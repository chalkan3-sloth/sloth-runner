name: Multi-Platform Build Test

on:
  push:
    branches: [ master ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - 'site/**'
  pull_request:
    branches: [ master ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - 'site/**'

jobs:
  test-builds:
    name: Test Build on ${{ matrix.os }} ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: amd64
            goos: linux
            goarch: amd64
          - os: ubuntu-latest
            arch: arm64
            goos: linux
            goarch: arm64
          - os: macos-latest
            arch: amd64
            goos: darwin
            goarch: amd64
      fail-fast: false
        
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential sqlite3 libsqlite3-dev gcc-aarch64-linux-gnu

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install sqlite3

      - name: Install Go dependencies
        run: go mod download
        timeout-minutes: 3

      - name: Build binary with telemetry (Linux ARM64)
        if: runner.os == 'Linux' && matrix.arch == 'arm64'
        run: |
          CC=aarch64-linux-gnu-gcc CGO_ENABLED=1 GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -v -o sloth-runner-${{ matrix.goos }}-${{ matrix.goarch }} ./cmd/sloth-runner
        timeout-minutes: 5

      - name: Build binary with telemetry (Linux AMD64)
        if: runner.os == 'Linux' && matrix.arch == 'amd64'
        run: |
          CGO_ENABLED=1 GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -v -o sloth-runner-${{ matrix.goos }}-${{ matrix.goarch }} ./cmd/sloth-runner
        timeout-minutes: 5

      - name: Build binary with telemetry (macOS)
        if: runner.os == 'macOS'
        run: |
          CGO_ENABLED=0 GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -v -o sloth-runner-${{ matrix.goos }}-${{ matrix.goarch }} ./cmd/sloth-runner
        timeout-minutes: 5

      - name: Test binary execution (skip ARM64)
        if: matrix.arch != 'arm64'
        run: ./sloth-runner-${{ matrix.goos }}-${{ matrix.goarch }} version || echo "Binary built successfully"
        timeout-minutes: 1

      - name: Upload test binary
        uses: actions/upload-artifact@v4
        with:
          name: sloth-runner-${{ matrix.goos }}-${{ matrix.goarch }}
          path: sloth-runner-${{ matrix.goos }}-${{ matrix.goarch }}
          retention-days: 1