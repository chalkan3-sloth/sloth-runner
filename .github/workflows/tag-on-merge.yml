name: Create Tag on Merge

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - 'site/**'

jobs:
  create-tag:
    name: Create Tag
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required to fetch all history for correct versioning
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and Push Tag
        id: create-tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Get commit message for skip check
          COMMIT_MSG=$(cat <<'EOF'
          ${{ github.event.head_commit.message }}
          EOF
          )

          # Check for skip tags
          if printf '%s' "$COMMIT_MSG" | grep -iE '\[(skip-tag|no-tag|skip-release|no-release)\]'; then
            echo "🚫 Tag creation skipped due to [skip-tag] in commit message"
            echo "tag_created=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Fetch all tags to ensure correct versioning
          git fetch --tags

          # Get the latest tag using proper version sorting
          LATEST_TAG=$(git tag -l | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1)
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="v0.0.0"
          fi
          echo "Latest tag: $LATEST_TAG"

          # Extract version components
          if [ "$LATEST_TAG" = "v0.0.0" ]; then
            MAJOR=0
            MINOR=0  
            PATCH=0
          else
            MAJOR=$(echo $LATEST_TAG | sed -E 's/v([0-9]+)\.([0-9]+)\.([0-9]+)/\1/')
            MINOR=$(echo $LATEST_TAG | sed -E 's/v([0-9]+)\.([0-9]+)\.([0-9]+)/\2/')
            PATCH=$(echo $LATEST_TAG | sed -E 's/v([0-9]+)\.([0-9]+)\.([0-9]+)/\3/')
          fi

          # Analyze commit message (already loaded above)
          echo "Analyzing commit: $(printf '%s' "$COMMIT_MSG" | head -c 100)..."

          # Determine version bump based on conventional commits
          if printf '%s' "$COMMIT_MSG" | grep -iE "(BREAKING CHANGE|breaking change|breaking:|major:)"; then
            # Major version bump
            NEW_MAJOR=$((MAJOR + 1))
            NEW_MINOR=0
            NEW_PATCH=0
            NEW_TAG="v${NEW_MAJOR}.${NEW_MINOR}.${NEW_PATCH}"
            echo "🚀 MAJOR version bump detected"
          elif printf '%s' "$COMMIT_MSG" | grep -iE "(feat\(|feat:|feature:|minor:)"; then
            # Minor version bump  
            NEW_MINOR=$((MINOR + 1))
            NEW_PATCH=0
            NEW_TAG="v${MAJOR}.${NEW_MINOR}.${NEW_PATCH}"
            echo "✨ MINOR version bump detected"
          else
            # Patch version bump (default)
            NEW_PATCH=$((PATCH + 1))
            NEW_TAG="v${MAJOR}.${MINOR}.${NEW_PATCH}"
            echo "🔧 PATCH version bump detected"
          fi

          echo "New tag: $NEW_TAG"

          # Check if tag already exists
          if git tag -l | grep -q "^${NEW_TAG}$"; then
            echo "⚠️  Tag $NEW_TAG already exists. Skipping tag creation."
            echo "🏷️  Existing tags: $(git tag -l | sort -V | tail -5 | tr '\n' ' ')"
            exit 0
          fi

          # Create and push the new tag
          git tag -a $NEW_TAG -m "Release $NEW_TAG"
          git push origin $NEW_TAG
          
          echo "🎯 Tag $NEW_TAG created successfully!"
          echo "tag_created=true" >> $GITHUB_OUTPUT
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Trigger Release Workflow
        if: steps.create-tag.outputs.tag_created == 'true'
        run: |
          echo "🚀 Triggering release workflow for tag ${{ steps.create-tag.outputs.new_tag }}"
          gh workflow run release.yml --ref ${{ steps.create-tag.outputs.new_tag }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    outputs:
      tag_created: ${{ steps.create-tag.outputs.tag_created }}
      new_tag: ${{ steps.create-tag.outputs.new_tag }}
