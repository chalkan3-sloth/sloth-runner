name: Create Tag on Merge

on:
  pull_request:
    types: [closed]
    branches:
      - master
  push:
    branches:
      - master

jobs:
  create-tag:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    name: Create Tag
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required to fetch all history for correct versioning

      - name: Create and Push Tag
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

          # Fetch all tags to ensure correct versioning
          git fetch --tags

          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"

          # Extract version components
          MAJOR=$(echo $LATEST_TAG | sed -E 's/v([0-9]+)\.([0-9]+)\.([0-9]+)/\1/')
          MINOR=$(echo $LATEST_TAG | sed -E 's/v([0-9]+)\.([0-9]+)\.([0-9]+)/\2/')
          PATCH=$(echo $LATEST_TAG | sed -E 's/v([0-9]+)\.([0-9]+)\.([0-9]+)/\3/')

          # Get commit message for analysis
          if [ "${{ github.event_name }}" = "push" ]; then
            COMMIT_MSG="${{ github.event.head_commit.message }}"
            echo "Analyzing push commit: $COMMIT_MSG"
          else
            COMMIT_MSG="${{ github.event.pull_request.title }}"
            PR_BODY="${{ github.event.pull_request.body }}"
            PR_LABELS="${{ join(github.event.pull_request.labels.*.name, ' ') }}"
            echo "Analyzing PR: $COMMIT_MSG"
            echo "PR Body: $PR_BODY"
            echo "PR Labels: $PR_LABELS"
          fi

          # Determine version bump based on conventional commits or labels
          if echo "$COMMIT_MSG $PR_BODY" | grep -iE "(BREAKING CHANGE|breaking:|major:)" || echo "$PR_LABELS" | grep -q "major"; then
            # Major version bump
            NEW_MAJOR=$((MAJOR + 1))
            NEW_MINOR=0
            NEW_PATCH=0
            NEW_TAG="v${NEW_MAJOR}.${NEW_MINOR}.${NEW_PATCH}"
            echo "üöÄ MAJOR version bump detected"
          elif echo "$COMMIT_MSG $PR_BODY" | grep -iE "(feat\(|feat:|feature:|minor:)" || echo "$PR_LABELS" | grep -q "minor\|feature"; then
            # Minor version bump  
            NEW_MINOR=$((MINOR + 1))
            NEW_PATCH=0
            NEW_TAG="v${MAJOR}.${NEW_MINOR}.${NEW_PATCH}"
            echo "‚ú® MINOR version bump detected"
          else
            # Patch version bump (default)
            NEW_PATCH=$((PATCH + 1))
            NEW_TAG="v${MAJOR}.${MINOR}.${NEW_PATCH}"
            echo "üîß PATCH version bump detected"
          fi

          echo "New tag: $NEW_TAG"

          # Create and push the new tag
          git tag $NEW_TAG
          git push origin $NEW_TAG
          
          echo "üéØ Tag $NEW_TAG created successfully!"
          
          # Try to trigger release workflow using Personal Access Token if available
          if [ -n "${{ secrets.PAT_TOKEN }}" ]; then
            echo "üöÄ Triggering release workflow with PAT token..."
            curl -X POST \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/actions/workflows/release.yml/dispatches" \
              -d "{\"ref\":\"$NEW_TAG\"}"
          else
            echo "‚ÑπÔ∏è  PAT_TOKEN not configured. Please manually trigger release or configure a Personal Access Token."
            echo "üí° To enable automatic releases, add a PAT_TOKEN secret with 'actions:write' permissions."
          fi
          
          echo "üì¶ New version: $NEW_TAG"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
