name: CI

on:
  push:
    branches: [ master ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - 'site/**'
  pull_request:
    branches: [ master ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - 'site/**'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: '-no-fail -fmt sarif -out results.sarif ./...'

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: results.sarif

  test:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential sqlite3 libsqlite3-dev
        timeout-minutes: 2

      - name: Install Go dependencies
        run: |
          go mod download
          go mod verify
        env:
          GOPROXY: "direct"
          CGO_ENABLED: 1
        timeout-minutes: 3

      - name: Run tests with coverage
        run: |
          go test -v ./cmd/sloth-runner/... -coverprofile=cmd-coverage.out -covermode=atomic -timeout=2m
          go test -v ./internal/telemetry/... -coverprofile=telemetry-coverage.out -covermode=atomic -timeout=2m
          go test -v ./internal/sloth/... -coverprofile=sloth-coverage.out -covermode=atomic -timeout=2m
          go test -v ./cmd/sloth-runner/services/... -coverprofile=services-coverage.out -covermode=atomic -timeout=2m
        env:
          CGO_ENABLED: 1
        timeout-minutes: 5

      - name: Merge coverage reports
        run: |
          echo "mode: atomic" > coverage.out
          tail -q -n +2 *-coverage.out >> coverage.out
          go tool cover -func=coverage.out

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        if: github.event_name == 'pull_request'
        with:
          files: ./coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: '*-coverage.out'
          retention-days: 7
