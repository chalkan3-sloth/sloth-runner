name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    steps:
      - name: Install Git
        run: |
          sudo apt-get update
          sudo apt-get install -y git
  lint-and-format:
    name: Lint and Format
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.1'
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install dependencies
        run: go mod tidy
        env:
          GOPROXY: "direct"
      - name: Run linter
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2
          $(go env GOPATH)/bin/golangci-lint run ./...

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: setup
    steps:
        - name: Checkout
          uses: actions/checkout@v4
        - name: Set up Go
          uses: actions/setup-go@v5
          with:
            go-version: '1.25.1'
        - name: Cache Go modules
          uses: actions/cache@v4
          with:
            path: ~/go/pkg/mod
            key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
            restore-keys: |
              ${{ runner.os }}-go-
        - name: Install dependencies
          run: go mod tidy
          env:
            GOPROXY: "direct"
        - name: Run tests with coverage
          run: go test -v ./... -coverprofile=coverage.out
        - name: Upload coverage report
          uses: actions/upload-artifact@v4
          with:
            name: coverage-report
            path: coverage.out
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.1'
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install dependencies
        run: go mod tidy
        env:
          GOPROXY: "direct"
      - name: Install govulncheck
        run: go install golang.org/x/vuln/cmd/govulncheck@latest
      - name: Run govulncheck
        run: $(go env GOPATH)/bin/govulncheck ./...

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.1'
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install dependencies
        run: go mod tidy
        env:
          GOPROXY: "direct"
      - name: Build
        run: |
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -v ./cmd/sloth-runner

  changelog:
    name: Changelog
    runs-on: ubuntu-latest
    needs: setup
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.1'
      - name: Run GoReleaser for changelog
        uses: goreleaser/goreleaser-action@v5
        with:
          version: '~> v2'
          args: release --snapshot --clean
        env:
          GOPROXY: "direct"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
