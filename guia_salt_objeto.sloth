-- ========================================
-- SALT COMO OBJETO - GUIA PRÁTICO
-- ========================================

print("🧂 SALT ORIENTADO A OBJETOS - GUIA DEFINITIVO")
print("=" .. string.rep("=", 50))

-- ===================================
-- 1. IMPORTAÇÃO E CRIAÇÃO DO OBJETO
-- ===================================

print("\n🔧 1. Criando cliente Salt como objeto...")

-- IMPORTANTE: Use 'salt_object_oriented' para trabalhar com objetos
local Salt = require("salt_object_oriented")

-- Criar instância do cliente Salt com configurações
local salt_client = Salt({
    master_host = "localhost",
    master_port = 4506,
    timeout = 30,
    retries = 3,
    output_format = "json"
})

print("✅ Cliente Salt OBJETO criado")
print("   Tipo:", type(salt_client))

-- ===================================
-- 2. USANDO MÉTODOS DO OBJETO
-- ===================================

print("\n🔌 2. Usando métodos do objeto...")

-- SINTAXE CORRETA: objeto:método() com dois pontos ":"
local ping_result = salt_client:ping("*")
if ping_result.success then
    print("✅ Ping via OBJETO executado com sucesso")
else
    print("❌ Ping falhou:", ping_result.error or "Simulação")
end

-- Outros exemplos de uso com sintaxe de objeto
local version_result = salt_client:version("*")
print("📋 Versão obtida via objeto:", version_result.success and "✅" or "❌")

local grains_result = salt_client:grains_get("*", "os_family")
print("🌾 Grains obtidos via objeto:", grains_result.success and "✅" or "❌")

-- ===================================
-- 3. OPERAÇÕES AVANÇADAS COM OBJETO
-- ===================================

print("\n🚀 3. Operações avançadas...")

-- Estados
local state_result = salt_client:state_apply("web*", "nginx", {test = true})
print("🏗️ Estado aplicado via objeto:", state_result.success and "✅" or "❌")

-- Pacotes
local pkg_result = salt_client:pkg_install("web*", "nginx")
print("📦 Pacote instalado via objeto:", pkg_result.success and "✅" or "❌")

-- Serviços
local service_result = salt_client:service_status("*", "nginx")
print("⚙️ Status do serviço via objeto:", service_result.success and "✅" or "❌")

-- ===================================
-- 4. MÚLTIPLOS CLIENTES (AMBIENTES)
-- ===================================

print("\n🏢 4. Múltiplos clientes para diferentes ambientes...")

-- Cliente para produção
local salt_prod = Salt({
    master_host = "prod-salt-master.company.com",
    timeout = 60,
    log_level = "warning"
})

-- Cliente para desenvolvimento
local salt_dev = Salt({
    master_host = "dev-salt-master.company.com", 
    timeout = 30,
    log_level = "debug"
})

print("✅ Cliente PRODUÇÃO criado")
print("✅ Cliente DESENVOLVIMENTO criado")

-- Usar diferentes clientes
local prod_ping = salt_prod:ping("prod-*")
local dev_ping = salt_dev:ping("dev-*")

print("🏭 Produção:", prod_ping.success and "✅ Online" or "❌ Offline")
print("🛠️ Desenvolvimento:", dev_ping.success and "✅ Online" or "❌ Offline")

-- ===================================
-- 5. EXEMPLOS PRÁTICOS COMPLETOS
-- ===================================

print("\n🎯 5. Exemplos práticos completos...")

-- Exemplo 1: Deploy de aplicação via objeto
local deploy_example = function(client, environment)
    print("🚀 Deploy no ambiente:", environment)
    
    -- Aplicar configuração básica
    local base_config = client:state_apply("*", "base")
    print("   Base config:", base_config.success and "✅" or "❌")
    
    -- Instalar dependências
    local deps = client:pkg_install("*", {"nginx", "python3", "git"})
    print("   Dependências:", deps.success and "✅" or "❌")
    
    -- Aplicar estado da aplicação
    local app_state = client:state_apply("*", "application", {
        pillar = {
            environment = environment,
            version = "v1.2.3"
        }
    })
    print("   App state:", app_state.success and "✅" or "❌")
    
    -- Verificar serviços
    local nginx_status = client:service_status("*", "nginx")
    print("   Nginx status:", nginx_status.success and "✅" or "❌")
    
    return base_config.success and deps.success and app_state.success
end

-- Executar deploy em produção
local prod_deploy = deploy_example(salt_prod, "production")
print("🏭 Deploy produção:", prod_deploy and "✅ Sucesso" or "❌ Falha")

-- Executar deploy em desenvolvimento  
local dev_deploy = deploy_example(salt_dev, "development")
print("🛠️ Deploy desenvolvimento:", dev_deploy and "✅ Sucesso" or "❌ Falha")

-- ===================================
-- 6. FUNCIONALIDADES AVANÇADAS
-- ===================================

print("\n⚡ 6. Funcionalidades avançadas do objeto...")

-- Operações assíncronas
local async_job = salt_client:async("*", "cmd", "run", "long-task")
if async_job.jid then
    print("🔄 Job assíncrono iniciado:", async_job.jid)
    
    -- Verificar status do job
    local job_status = salt_client:job_lookup(async_job.jid)
    print("💼 Status do job:", job_status.success and "✅" or "❌")
end

-- Operações em lote
local batch_result = salt_client:batch("*", "25%", "test", "ping")
print("📊 Execução em lote:", batch_result.success and "✅" or "❌")

-- Configuração de monitoramento
local beacon_config = salt_client:beacon_add("*", "diskusage", {
    interval = 300,
    threshold = 85
})
print("🚨 Beacon configurado:", beacon_config.success and "✅" or "❌")

-- Agendamento de tarefas
local schedule_backup = salt_client:schedule_add("*", "daily-backup", {
    function = "cmd.run",
    args = ["/usr/local/bin/backup.sh"],
    hours = 2
})
print("⏰ Backup agendado:", schedule_backup.success and "✅" or "❌")

-- ===================================
-- RESUMO E BOAS PRÁTICAS
-- ===================================

print("\n" .. string.rep("=", 50))
print("📚 RESUMO - SALT COMO OBJETO")
print("=" .. string.rep("=", 50))

print("\n✅ SINTAXE CORRETA:")
print("   local Salt = require('salt_object_oriented')")
print("   local client = Salt({configurações})")
print("   local result = client:método(parâmetros)")

print("\n🎯 VANTAGENS:")
print("   • Configuração isolada por cliente")
print("   • Múltiplos ambientes simultaneamente")
print("   • Sintaxe mais limpa e intuitiva")
print("   • Encapsulamento de estado")
print("   • Reutilização eficiente")

print("\n📋 MÉTODOS PRINCIPAIS:")
print("   • client:ping(target)")
print("   • client:state_apply(target, state)")
print("   • client:pkg_install(target, package)")
print("   • client:service_start(target, service)")
print("   • client:grains_get(target, grain)")

print("\n🔧 CONFIGURAÇÕES IMPORTANTES:")
print("   • master_host: Endereço do master Salt")
print("   • timeout: Timeout das operações")
print("   • retries: Número de tentativas")
print("   • output_format: Formato de saída (json)")

print("\n🚀 EXEMPLO RÁPIDO:")
print("local Salt = require('salt_object_oriented')")
print("local client = Salt({master_host = 'salt-master'})")
print("local result = client:ping('*')")
print("if result.success then")
print("    print('Salt funcionando!')")
print("end")

print("\n✨ Salt orientado a objetos configurado e funcionando!")