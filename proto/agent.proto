syntax = "proto3";

package agent;

option go_package = "github.com/chalkan3-sloth/sloth-runner/proto";

service Agent {
  rpc ExecuteTask(ExecuteTaskRequest) returns (ExecuteTaskResponse);
  rpc RunCommand(RunCommandRequest) returns (stream StreamOutputResponse);
  rpc Shutdown(ShutdownRequest) returns (ShutdownResponse);
  rpc UpdateAgent(UpdateAgentRequest) returns (UpdateAgentResponse);

  // Advanced Management RPCs
  rpc GetResourceUsage(ResourceUsageRequest) returns (ResourceUsageResponse);
  rpc GetProcessList(ProcessListRequest) returns (ProcessListResponse);
  rpc GetNetworkInfo(NetworkInfoRequest) returns (NetworkInfoResponse);
  rpc GetDiskInfo(DiskInfoRequest) returns (DiskInfoResponse);
  rpc StreamLogs(StreamLogsRequest) returns (stream LogEntry);
  rpc StreamMetrics(StreamMetricsRequest) returns (stream MetricsData);
  rpc RestartService(RestartServiceRequest) returns (RestartServiceResponse);
  rpc GetEnvironmentVars(EnvVarsRequest) returns (EnvVarsResponse);
  rpc SetEnvironmentVar(SetEnvVarRequest) returns (SetEnvVarResponse);
  rpc InstallModule(InstallModuleRequest) returns (InstallModuleResponse);
  rpc GetInstalledModules(ModulesRequest) returns (ModulesResponse);

  // Enhanced Troubleshooting RPCs
  rpc GetDetailedMetrics(DetailedMetricsRequest) returns (DetailedMetricsResponse);
  rpc GetRecentLogs(RecentLogsRequest) returns (RecentLogsResponse);
  rpc GetActiveConnections(ConnectionsRequest) returns (ConnectionsResponse);
  rpc GetSystemErrors(SystemErrorsRequest) returns (SystemErrorsResponse);
  rpc GetPerformanceHistory(PerformanceHistoryRequest) returns (PerformanceHistoryResponse);
  rpc DiagnoseHealth(HealthDiagnosticRequest) returns (HealthDiagnosticResponse);

  // Interactive Shell RPC
  rpc InteractiveShell(stream ShellInput) returns (stream ShellOutput);

  // Watcher Management RPCs
  rpc RegisterWatcher(RegisterWatcherRequest) returns (RegisterWatcherResponse);
  rpc ListWatchers(ListWatchersRequest) returns (ListWatchersResponse);
  rpc GetWatcher(GetWatcherRequest) returns (GetWatcherResponse);
  rpc RemoveWatcher(RemoveWatcherRequest) returns (RemoveWatcherResponse);
}

message ShutdownRequest {}

message ShutdownResponse {}

message UpdateAgentRequest {
  string target_version = 1; // Empty or "latest" for latest version
  bool force = 2; // Force update even if already on latest version
  bool skip_restart = 3; // Skip automatic service restart
}

message UpdateAgentResponse {
  bool success = 1;
  string message = 2;
  string old_version = 3;
  string new_version = 4;
}

message ExecuteTaskRequest {
  string task_name = 1;
  string task_group = 2;
  string lua_script = 3;
  bytes workspace = 4;
  string user = 5; // User to run the task as (default: root)
}

message ExecuteTaskResponse {
  bool success = 1;
  string output = 2;
  bytes workspace = 3;
}

message RegisterAgentRequest {
  string agent_name = 1;
  string agent_address = 2;
}

message RegisterAgentResponse {
  bool success = 1;
  string message = 2;
}

message AgentInfo {
  string agent_name = 1;
  string agent_address = 2;
  int64 last_heartbeat = 3; // Unix timestamp of the last heartbeat
  string status = 4;
  int64 last_info_collected = 5; // Unix timestamp of the last system info collection
  string system_info_json = 6; // JSON string with system information
  string version = 7; // Agent version
}

message ListAgentsRequest {
  // No fields needed for now
}

message ListAgentsResponse {
  repeated AgentInfo agents = 1;
}

message StopAgentRequest {
  string agent_name = 1;
}

message StopAgentResponse {
  bool success = 1;
  string message = 2;
}

message UnregisterAgentRequest {
  string agent_name = 1;
}

message UnregisterAgentResponse {
  bool success = 1;
  string message = 2;
}

message ExecuteCommandRequest {
  string agent_name = 1;
  string command = 2;
}

message RunCommandRequest {
  string command = 1;
  string user = 2; // User to run the command as (default: root)
}

// New message for streaming output
message StreamOutputResponse {
  string stdout_chunk = 1;
  string stderr_chunk = 2;
  bool finished = 3;
  int32 exit_code = 4;
  string error = 5;
}

service AgentRegistry {
  rpc RegisterAgent(RegisterAgentRequest) returns (RegisterAgentResponse);
  rpc ListAgents(ListAgentsRequest) returns (ListAgentsResponse);
  rpc StopAgent(StopAgentRequest) returns (StopAgentResponse);
  rpc UnregisterAgent(UnregisterAgentRequest) returns (UnregisterAgentResponse);
  rpc ExecuteCommand(ExecuteCommandRequest) returns (stream StreamOutputResponse);
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
  rpc GetAgentInfo(GetAgentInfoRequest) returns (GetAgentInfoResponse);

  // Group Management
  rpc CreateAgentGroup(CreateGroupRequest) returns (CreateGroupResponse);
  rpc AddAgentToGroup(AddToGroupRequest) returns (AddToGroupResponse);
  rpc RemoveAgentFromGroup(RemoveFromGroupRequest) returns (RemoveFromGroupResponse);
  rpc ListAgentGroups(ListGroupsRequest) returns (ListGroupsResponse);
  rpc DeleteAgentGroup(DeleteGroupRequest) returns (DeleteGroupResponse);

  // Bulk Operations
  rpc ExecuteOnMultipleAgents(BulkExecuteRequest) returns (stream BulkExecuteResponse);
  rpc GetMultipleAgentStatus(MultipleAgentStatusRequest) returns (MultipleAgentStatusResponse);

  // Health & Monitoring
  rpc GetAggregatedMetrics(AggregatedMetricsRequest) returns (AggregatedMetricsResponse);
  rpc StreamAgentEvents(StreamEventsRequest) returns (stream AgentEvent);

  // Event Reporting - Agents send events to master
  rpc SendEvent(SendEventRequest) returns (SendEventResponse);
  rpc SendEventBatch(SendEventBatchRequest) returns (SendEventBatchResponse);
}

message HeartbeatRequest {
  string agent_name = 1;
  string system_info_json = 2; // Optional: agent can send system info with heartbeat
  string version = 3; // Agent version
}

message HeartbeatResponse {
  bool success = 1;
  string message = 2;
}

message GetAgentInfoRequest {
  string agent_name = 1;
}

message GetAgentInfoResponse {
  bool success = 1;
  string message = 2;
  AgentInfo agent_info = 3;
}

// Advanced Management Messages

message ResourceUsageRequest {}

message ResourceUsageResponse {
  double cpu_percent = 1;
  double memory_percent = 2;
  uint64 memory_used_bytes = 3;
  uint64 memory_total_bytes = 4;
  double disk_percent = 5;
  uint64 disk_used_bytes = 6;
  uint64 disk_total_bytes = 7;
  uint32 process_count = 8;
  double load_avg_1min = 9;
  double load_avg_5min = 10;
  double load_avg_15min = 11;
  uint64 uptime_seconds = 12;
  uint64 network_rx_bytes = 13;
  uint64 network_tx_bytes = 14;
}

message ProcessListRequest {
  bool include_children = 1;
  string filter_name = 2;
}

message ProcessInfo {
  int32 pid = 1;
  string name = 2;
  string status = 3;
  double cpu_percent = 4;
  double memory_percent = 5;
  uint64 memory_bytes = 6;
  string user = 7;
  string command = 8;
  int64 started_at = 9;
}

message ProcessListResponse {
  repeated ProcessInfo processes = 1;
  uint32 total_count = 2;
}

message NetworkInfoRequest {}

message NetworkInterface {
  string name = 1;
  repeated string ip_addresses = 2;
  string mac_address = 3;
  uint64 bytes_sent = 4;
  uint64 bytes_recv = 5;
  uint32 packets_sent = 6;
  uint32 packets_recv = 7;
  bool is_up = 8;
}

message NetworkInfoResponse {
  repeated NetworkInterface interfaces = 1;
  string hostname = 2;
}

message DiskInfoRequest {}

message DiskPartition {
  string device = 1;
  string mountpoint = 2;
  string fstype = 3;
  uint64 total_bytes = 4;
  uint64 used_bytes = 5;
  uint64 free_bytes = 6;
  double percent = 7;
}

message DiskInfoResponse {
  repeated DiskPartition partitions = 1;
  uint64 total_io_read_bytes = 2;
  uint64 total_io_write_bytes = 3;
}

message StreamLogsRequest {
  string log_file = 1; // Path to log file or service name
  int32 tail_lines = 2; // Number of recent lines to stream
  bool follow = 3; // Keep streaming new lines
}

message LogEntry {
  int64 timestamp = 1;
  string level = 2;
  string message = 3;
  string source = 4;
}

message StreamMetricsRequest {
  int32 interval_seconds = 1; // How often to send metrics
}

message MetricsData {
  int64 timestamp = 1;
  double cpu_percent = 2;
  double memory_percent = 3;
  double disk_percent = 4;
  map<string, double> custom_metrics = 5;
}

message RestartServiceRequest {
  string service_name = 1;
  bool graceful = 2;
}

message RestartServiceResponse {
  bool success = 1;
  string message = 2;
}

message EnvVarsRequest {
  repeated string var_names = 1; // Empty for all vars
}

message EnvVarsResponse {
  map<string, string> variables = 1;
}

message SetEnvVarRequest {
  string name = 1;
  string value = 2;
  bool persistent = 3; // Save to profile
}

message SetEnvVarResponse {
  bool success = 1;
  string message = 2;
}

message InstallModuleRequest {
  string module_name = 1;
  string version = 2; // Empty for latest
}

message InstallModuleResponse {
  bool success = 1;
  string message = 2;
  string installed_version = 3;
}

message ModulesRequest {}

message ModuleInfo {
  string name = 1;
  string version = 2;
  bool installed = 3;
  string description = 4;
}

message ModulesResponse {
  repeated ModuleInfo modules = 1;
}

// Group Management Messages

message CreateGroupRequest {
  string group_name = 1;
  string description = 2;
  repeated string agent_names = 3;
  map<string, string> tags = 4;
}

message CreateGroupResponse {
  bool success = 1;
  string message = 2;
  string group_id = 3;
}

message AddToGroupRequest {
  string group_name = 1;
  repeated string agent_names = 2;
}

message AddToGroupResponse {
  bool success = 1;
  string message = 2;
}

message RemoveFromGroupRequest {
  string group_name = 1;
  repeated string agent_names = 2;
}

message RemoveFromGroupResponse {
  bool success = 1;
  string message = 2;
}

message ListGroupsRequest {}

message AgentGroup {
  string name = 1;
  string description = 2;
  repeated string agent_names = 3;
  map<string, string> tags = 4;
  int64 created_at = 5;
  int32 agent_count = 6;
}

message ListGroupsResponse {
  repeated AgentGroup groups = 1;
}

message DeleteGroupRequest {
  string group_name = 1;
}

message DeleteGroupResponse {
  bool success = 1;
  string message = 2;
}

// Bulk Operations Messages

message BulkExecuteRequest {
  repeated string agent_names = 1;
  string group_name = 2; // Alternative to agent_names
  string command = 3;
  string workflow_name = 4; // Alternative to command
  bool parallel = 5;
  int32 timeout_seconds = 6;
}

message BulkExecuteResponse {
  string agent_name = 1;
  bool success = 2;
  string output = 3;
  string error = 4;
  int32 exit_code = 5;
  int64 execution_time_ms = 6;
}

message MultipleAgentStatusRequest {
  repeated string agent_names = 1;
  string group_name = 2;
}

message AgentStatusInfo {
  string agent_name = 1;
  string status = 2;
  double cpu_percent = 3;
  double memory_percent = 4;
  int64 last_heartbeat = 5;
  bool healthy = 6;
}

message MultipleAgentStatusResponse {
  repeated AgentStatusInfo statuses = 1;
}

// Monitoring Messages

message AggregatedMetricsRequest {
  repeated string agent_names = 1;
  string group_name = 2;
  int32 time_range_minutes = 3;
}

message AggregatedMetricsResponse {
  double avg_cpu_percent = 1;
  double avg_memory_percent = 2;
  double avg_disk_percent = 3;
  int32 total_agents = 4;
  int32 healthy_agents = 5;
  int32 unhealthy_agents = 6;
  map<string, double> custom_metrics = 7;
}

message StreamEventsRequest {
  repeated string agent_names = 1;
  string group_name = 2;
  repeated string event_types = 3; // connected, disconnected, error, etc
}

message AgentEvent {
  string agent_name = 1;
  string event_type = 2;
  int64 timestamp = 3;
  string message = 4;
  map<string, string> metadata = 5;
  string severity = 6; // info, warning, error, critical
}

// Enhanced Troubleshooting Messages

message DetailedMetricsRequest {}

message CPUDetail {
  int32 core_count = 1;
  repeated double per_core_usage = 2;
  double user_time = 3;
  double system_time = 4;
  double idle_time = 5;
  double iowait_time = 6;
  string model_name = 7;
  double mhz = 8;
}

message MemoryDetail {
  uint64 total_bytes = 1;
  uint64 available_bytes = 2;
  uint64 used_bytes = 3;
  uint64 free_bytes = 4;
  uint64 cached_bytes = 5;
  uint64 buffers_bytes = 6;
  uint64 swap_total_bytes = 7;
  uint64 swap_used_bytes = 8;
  uint64 swap_free_bytes = 9;
  double percent = 10;
  double swap_percent = 11;
}

message DiskDetail {
  repeated DiskPartition partitions = 1;
  uint64 read_bytes_total = 2;
  uint64 write_bytes_total = 3;
  uint64 read_count = 4;
  uint64 write_count = 5;
  uint64 read_time_ms = 6;
  uint64 write_time_ms = 7;
}

message NetworkDetail {
  repeated NetworkInterface interfaces = 1;
  uint64 bytes_sent_total = 2;
  uint64 bytes_recv_total = 3;
  uint64 packets_sent_total = 4;
  uint64 packets_recv_total = 5;
  uint64 errors_in = 6;
  uint64 errors_out = 7;
  uint64 drops_in = 8;
  uint64 drops_out = 9;
  int32 active_connections = 10;
  int32 listening_ports = 11;
}

message DetailedMetricsResponse {
  int64 timestamp = 1;
  CPUDetail cpu = 2;
  MemoryDetail memory = 3;
  DiskDetail disk = 4;
  NetworkDetail network = 5;
  double load_avg_1min = 6;
  double load_avg_5min = 7;
  double load_avg_15min = 8;
  uint64 uptime_seconds = 9;
  int32 process_count = 10;
  int32 thread_count = 11;
  string kernel_version = 12;
  string os_version = 13;
}

message RecentLogsRequest {
  int32 max_lines = 1; // Default 100
  string level_filter = 2; // error, warning, info, debug
  string source_filter = 3; // Filter by source/service
  int64 since_timestamp = 4; // Get logs since this timestamp
}

message RecentLogsResponse {
  repeated LogEntry logs = 1;
  int32 total_count = 2;
  bool has_more = 3;
}

message ConnectionsRequest {
  string state_filter = 1; // ESTABLISHED, LISTEN, TIME_WAIT, etc
  bool include_local = 2; // Include localhost connections
}

message ConnectionInfo {
  string local_addr = 1;
  uint32 local_port = 2;
  string remote_addr = 3;
  uint32 remote_port = 4;
  string state = 5;
  int32 pid = 6;
  string process_name = 7;
  uint64 bytes_sent = 8;
  uint64 bytes_recv = 9;
  int64 established_at = 10;
}

message ConnectionsResponse {
  repeated ConnectionInfo connections = 1;
  int32 total_established = 2;
  int32 total_listening = 3;
  int32 total_time_wait = 4;
  int32 total_all = 5;
}

message SystemErrorsRequest {
  int32 max_errors = 1; // Default 50
  int64 since_timestamp = 2;
  bool include_warnings = 3;
}

message SystemError {
  int64 timestamp = 1;
  string severity = 2; // error, warning, critical
  string source = 3;
  string message = 4;
  string stack_trace = 5;
  map<string, string> context = 6;
  int32 occurrence_count = 7;
}

message SystemErrorsResponse {
  repeated SystemError errors = 1;
  int32 total_errors = 2;
  int32 total_warnings = 3;
  string most_common_error = 4;
}

message PerformanceHistoryRequest {
  int32 duration_minutes = 1; // Default 60
  int32 data_points = 2; // How many samples to return
}

message PerformanceSnapshot {
  int64 timestamp = 1;
  double cpu_percent = 2;
  double memory_percent = 3;
  double disk_percent = 4;
  double network_throughput_mbps = 5;
  double load_avg = 6;
  int32 active_connections = 7;
  int32 process_count = 8;
}

message PerformanceHistoryResponse {
  repeated PerformanceSnapshot snapshots = 1;
  PerformanceSnapshot avg = 2;
  PerformanceSnapshot min = 3;
  PerformanceSnapshot max = 4;
}

message HealthDiagnosticRequest {
  bool include_suggestions = 1;
  bool deep_check = 2;
}

message HealthIssue {
  string category = 1; // cpu, memory, disk, network, process
  string severity = 2; // info, warning, critical
  string description = 3;
  string current_value = 4;
  string threshold = 5;
  repeated string suggestions = 6;
  bool auto_fixable = 7;
}

message HealthDiagnosticResponse {
  string overall_status = 1; // healthy, degraded, unhealthy
  int32 health_score = 2; // 0-100
  repeated HealthIssue issues = 3;
  map<string, string> summary = 4;
  int64 check_timestamp = 5;
  int32 total_warnings = 6;
  int32 total_errors = 7;
}

// Interactive Shell Messages
message ShellInput {
  string command = 1; // Command to execute
  bytes stdin_data = 2; // Input data for interactive commands
  bool terminate = 3; // Signal to terminate the shell session
  uint32 window_rows = 4; // Terminal window height
  uint32 window_cols = 5; // Terminal window width
  bool resize = 6; // Signal that this is a window resize message
}

message ShellOutput {
  bytes stdout = 1; // Standard output
  bytes stderr = 2; // Standard error
  int32 exit_code = 3; // Exit code (only set when command completes)
  bool completed = 4; // True when command execution is complete
  string error = 5; // Error message if execution failed
}

// Event Reporting Messages - Agents push events to master
message EventData {
  string event_id = 1; // Unique event ID
  string event_type = 2; // Type of event (task.started, file.created, etc)
  string agent_name = 3; // Agent that generated the event
  int64 timestamp = 4; // Unix timestamp
  string stack = 5; // Stack name if applicable
  string run_id = 6; // Run ID if applicable
  map<string, string> data = 7; // Event data as key-value pairs
  string data_json = 8; // Optional: full JSON data
  string severity = 9; // info, warning, error, critical
}

message SendEventRequest {
  EventData event = 1;
}

message SendEventResponse {
  bool success = 1;
  string message = 2;
  string event_id = 3; // Confirmed event ID
}

message SendEventBatchRequest {
  repeated EventData events = 1;
  int32 batch_size = 2;
}

message SendEventBatchResponse {
  bool success = 1;
  string message = 2;
  int32 events_received = 3;
  int32 events_processed = 4;
  repeated string failed_event_ids = 5;
}

// Watcher Management Messages
message WatcherConfig {
  string id = 1;
  string type = 2; // file, process, port, cpu, memory, etc.
  repeated string conditions = 3; // created, changed, deleted, above, below, etc.
  string interval = 4;

  // Type-specific fields
  string file_path = 10;
  bool check_hash = 11;
  bool recursive = 12;

  string process_name = 20;
  int32 pid = 21;

  int32 port = 30;
  string protocol = 31;

  double cpu_threshold = 40;
  double memory_threshold = 41;
  double disk_threshold = 42;
}

message RegisterWatcherRequest {
  WatcherConfig config = 1;
}

message RegisterWatcherResponse {
  bool success = 1;
  string message = 2;
  string watcher_id = 3;
}

message ListWatchersRequest {}

message ListWatchersResponse {
  repeated WatcherConfig watchers = 1;
}

message GetWatcherRequest {
  string watcher_id = 1;
}

message GetWatcherResponse {
  WatcherConfig watcher = 1;
  bool found = 2;
}

message RemoveWatcherRequest {
  string watcher_id = 1;
}

message RemoveWatcherResponse {
  bool success = 1;
  string message = 2;
}