{"config":{"lang":["en","pt","zh"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83e\udda5 Sloth Runner - AI-Powered GitOps Task Orchestration Platform","text":"<p>The world's first AI-powered task orchestration platform with native GitOps capabilities. Sloth Runner combines intelligent optimization, predictive analytics, automated deployments, and enterprise-grade reliability into a single, powerful platform.</p> <p> </p>"},{"location":"#quick-start-with-gitops","title":"\ud83d\ude80 Quick Start with GitOps","text":"<p>Get started with a complete GitOps workflow in under 5 minutes:</p>"},{"location":"#1-install-sloth-runner","title":"1. Install Sloth Runner","text":"<pre><code>curl -sSL https://raw.githubusercontent.com/chalkan3-sloth/sloth-runner/main/install.sh | bash\n</code></pre>"},{"location":"#2-run-the-gitops-example","title":"2. Run the GitOps Example","text":"<pre><code># Clone the repository\ngit clone https://github.com/chalkan3-sloth/sloth-runner.git\ncd sloth-runner\n\n# Execute the complete GitOps workflow\nsloth-runner run -f examples/deploy_git_terraform.sloth -v examples/values.yaml deploy_git_terraform\n</code></pre>"},{"location":"#3-watch-the-magic-happen","title":"3. Watch the Magic Happen","text":"<pre><code>\u2705 Repository cloned successfully\n\u2705 Terraform initialized automatically  \n\u2705 Infrastructure planned and validated\n\u2705 Deployment completed successfully\n</code></pre>"},{"location":"#revolutionary-features","title":"\u2728 Revolutionary Features","text":""},{"location":"#modern-dsl-for-gitops","title":"\ud83c\udfaf Modern DSL for GitOps","text":"<p>Clean, powerful Lua-based syntax designed for infrastructure workflows</p> <pre><code>-- Complete GitOps workflow in clean, readable syntax\nlocal clone_task = task(\"clone_infrastructure\")\n    :description(\"Clone Terraform infrastructure repository\")\n    :workdir(\"/tmp/infrastructure\")\n    :command(function(this, params)\n        local git = require(\"git\")\n\n        log.info(\"\ud83d\udce1 Cloning infrastructure repository...\")\n        local repository = git.clone(\n            values.git.repository_url,\n            this.workdir.get()\n        )\n\n        return true, \"Repository cloned successfully\", {\n            repository_url = values.git.repository_url,\n            clone_destination = this.workdir.get()\n        }\n    end)\n    :timeout(\"5m\")\n    :retries(3, \"exponential\")\n    :build()\n\nlocal deploy_task = task(\"deploy_terraform\")\n    :description(\"Deploy infrastructure using Terraform\")\n    :command(function(this, params)\n        local terraform = require(\"terraform\")\n\n        -- Terraform init runs automatically\n        local client = terraform.init(this.workdir:get())\n\n        -- Load configuration from values.yaml\n        local tfvars = client:create_tfvars(\"terraform.tfvars\", {\n            environment = values.terraform.environment,\n            region = values.terraform.region,\n            instance_type = values.terraform.instance_type\n        })\n\n        -- Plan and apply infrastructure\n        local plan_result = client:plan({ var_file = tfvars.filename })\n        if plan_result.success then\n            return client:apply({ \n                var_file = tfvars.filename,\n                auto_approve = true \n            })\n        end\n\n        return false, \"Terraform plan failed\"\n    end)\n    :timeout(\"15m\")\n    :build()\n\n-- Define the complete GitOps workflow\nworkflow.define(\"infrastructure_deployment\")\n    :description(\"Complete GitOps: Clone + Plan + Deploy\")\n    :version(\"1.0.0\")\n    :tasks({ clone_task, deploy_task })\n    :config({\n        timeout = \"20m\",\n        max_parallel_tasks = 1\n    })\n    :on_complete(function(success, results)\n        if success then\n            log.info(\"\ud83c\udf89 Infrastructure deployed successfully!\")\n        end\n    end)\n</code></pre>"},{"location":"#native-gitops-integration","title":"\ud83c\udfd7\ufe0f Native GitOps Integration","text":"<p>Built-in support for Git and Terraform operations</p> <pre><code>-- Git operations with automatic credential handling\nlocal git = require(\"git\")\nlocal repo = git.clone(\"https://github.com/company/infrastructure\", \"/tmp/infra\")\ngit.checkout(repo, \"production\")\ngit.pull(repo, \"origin\", \"production\")\n\n-- Terraform lifecycle management\nlocal terraform = require(\"terraform\")\nlocal client = terraform.init(\"/tmp/infra/terraform/\")  -- Runs 'terraform init'\nlocal plan = client:plan({ var_file = \"production.tfvars\" })\nlocal apply = client:apply({ auto_approve = true })\n\n-- Values-driven configuration\nlocal config = {\n    environment = values.terraform.environment or \"production\",\n    region = values.terraform.region or \"us-west-2\",\n    instance_count = values.terraform.instance_count or 3\n}\n</code></pre>"},{"location":"#external-configuration-management","title":"\u2699\ufe0f External Configuration Management","text":"<p>Clean separation of code and configuration using values.yaml</p> <p>values.yaml: <pre><code>terraform:\n  environment: \"production\"\n  region: \"us-west-2\" \n  instance_type: \"t3.medium\"\n  enable_monitoring: true\n\ngit:\n  repository_url: \"https://github.com/company/terraform-infrastructure\"\n  branch: \"main\"\n\nworkflow:\n  timeout: \"30m\"\n  max_parallel_tasks: 2\n</code></pre></p> <p>Access in workflows: <pre><code>-- Load configuration from values.yaml\nlocal terraform_config = {\n    environment = values.terraform.environment,\n    region = values.terraform.region,\n    instance_type = values.terraform.instance_type\n}\n</code></pre></p>"},{"location":"#parallel-execution-with-goroutines","title":"\u26a1 Parallel Execution with Goroutines \ud83d\ude80","text":"<p>GAME CHANGER! Execute m\u00faltiplas opera\u00e7\u00f5es simultaneamente e reduza o tempo de deploy de minutos para segundos!</p> <ul> <li> <p> 10x Mais R\u00e1pido</p> <p>Deploy em 10 servidores em paralelo ao inv\u00e9s de sequencialmente.</p> <p>Antes: 5 minutos \u23f1\ufe0f Agora: 30 segundos \u26a1</p> </li> <li> <p> Worker Pools</p> <p>Controle a concorr\u00eancia com worker pools para processar grandes volumes.</p> <p>Perfeito para APIs com rate limiting.</p> </li> <li> <p> Async/Await</p> <p>Padr\u00e3o moderno de programa\u00e7\u00e3o ass\u00edncrona no Lua.</p> <p>C\u00f3digo limpo e f\u00e1cil de entender.</p> </li> <li> <p> Timeout Built-in</p> <p>Prote\u00e7\u00e3o contra opera\u00e7\u00f5es travadas com timeout autom\u00e1tico.</p> <p>Seguro e confi\u00e1vel.</p> </li> </ul>"},{"location":"#exemplo-real-deploy-paralelo","title":"\ud83d\udca1 Exemplo Real: Deploy Paralelo","text":"<pre><code>local deploy_task = task(\"deploy_multi_server\")\n    :description(\"Deploy to 10 servers in parallel - 10x faster!\")\n    :command(function(this, params)\n        local goroutine = require(\"goroutine\")\n\n        -- Lista de servidores para deploy\n        local servers = {\n            \"web-01\", \"web-02\", \"web-03\", \"api-01\", \"api-02\",\n            \"api-03\", \"db-01\", \"db-02\", \"cache-01\", \"cache-02\"\n        }\n\n        log.info(\"\ud83d\ude80 Starting parallel deployment to \" .. #servers .. \" servers...\")\n\n        -- Criar handles ass\u00edncronos para cada servidor\n        local handles = {}\n        for _, server in ipairs(servers) do\n            local handle = goroutine.async(function()\n                log.info(\"\ud83d\udce6 Deploying to \" .. server)\n\n                -- Simula deploy (upload, install, restart, health check)\n                goroutine.sleep(500)\n\n                return server, \"deployed\", os.date(\"%H:%M:%S\")\n            end)\n\n            table.insert(handles, handle)\n        end\n\n        -- Aguardar TODOS os deploys completarem\n        local results = goroutine.await_all(handles)\n\n        -- Processar resultados\n        log.info(\"\ud83d\udcca All \" .. #results .. \" servers deployed successfully!\")\n\n        return true, \"Parallel deployment completed in ~3 seconds!\"\n    end)\n    :timeout(\"2m\")\n    :build()\n\nworkflow.define(\"parallel_deployment\")\n    :description(\"Deploy to multiple servers in parallel\")\n    :tasks({ deploy_task })\n</code></pre> <p>Performance Real:</p> Opera\u00e7\u00e3o Sequencial Com Goroutines Ganho \ud83d\ude80 Deploy 10 servidores 5 minutos 30 segundos 10x \u26a1 \ud83c\udfe5 Health check 20 servi\u00e7os 1 minuto 5 segundos 12x \u26a1 \ud83d\udcca Processar 1000 itens 10 segundos 1 segundo 10x \u26a1 <p>\ud83d\udcd6 Documenta\u00e7\u00e3o Completa de Goroutines | \ud83e\uddea Mais Exemplos</p>"},{"location":"#core-features","title":"\ud83c\udf1f Core Features","text":""},{"location":"#stack-management","title":"\ud83d\uddc2\ufe0f Stack Management","text":"<p>Pulumi-style stack management with persistent state, exported outputs, and execution history tracking.</p> <ul> <li>\ud83d\udd12 Persistent stack state with SQLite in <code>/etc/sloth-runner/</code></li> <li>\ud83d\udcca Exported outputs capture from pipeline with JSON support</li> <li>\ud83d\udcc8 Complete execution history tracking with duration metrics</li> <li>\ud83c\udfaf Environment isolation by stack name</li> <li>\ud83c\udd94 Unique task and group IDs for enhanced traceability</li> <li>\ud83d\udccb Task listing with detailed relationship view</li> <li>\ud83d\uddd1\ufe0f Stack deletion with confirmation prompts</li> <li>\ud83c\udfa8 Multiple output formats: basic, enhanced, modern, json</li> </ul> <pre><code># Create and run a stack with enhanced output\nsloth-runner stack new my-production-stack -d \"Production deployment\" -f pipeline.sloth\nsloth-runner run my-production-stack -f pipeline.sloth --output enhanced\n\n# Run with JSON output for CI/CD integration\nsloth-runner run my-stack -f workflow.sloth --output json\n\n# List all stacks with status and metrics\nsloth-runner stack list\n\n# Show stack details with outputs and execution history\nsloth-runner stack show my-production-stack\n\n# List tasks with unique IDs and dependencies\nsloth-runner list -f pipeline.sloth\n\n# Delete stacks with confirmation\nsloth-runner stack delete old-stack\nsloth-runner stack delete old-stack --force  # skip confirmation\n</code></pre>"},{"location":"#distributed-by-design","title":"\ud83c\udf10 Distributed by Design","text":"<p>Native master-agent architecture with real-time streaming, automatic failover, and intelligent load balancing.</p> <ul> <li>\ud83d\udd17 gRPC-based agent communication</li> <li>\ud83d\udce1 Real-time command streaming</li> <li>\ud83d\udd04 Automatic failover and recovery</li> <li>\u2696\ufe0f Intelligent load balancing</li> <li>\ud83c\udfd7\ufe0f Scalable architecture for enterprise workloads</li> <li>\ud83d\udd12 TLS-secured communication</li> </ul> <pre><code># Start master server\nsloth-runner master --port 50053 --daemon\n\n# Start and manage agents\nsloth-runner agent start --name worker-01 --master localhost:50053\nsloth-runner agent list --master localhost:50053\nsloth-runner agent run worker-01 \"docker ps\" --master localhost:50053\n</code></pre>"},{"location":"#web-dashboard-ui","title":"\ud83c\udfa8 Web Dashboard &amp; UI","text":"<p>Modern web-based dashboard for comprehensive workflow management and monitoring.</p> <ul> <li>\ud83d\udcca Real-time monitoring dashboard</li> <li>\ud83c\udfaf Agent management interface</li> <li>\ud83d\udcc8 Performance metrics visualization</li> <li>\ud83d\udd0d Centralized logging system</li> <li>\ud83d\udc65 Team collaboration features</li> </ul> <pre><code># Start web dashboard\nsloth-runner ui --port 8080\n# Access at http://localhost:8080\n\n# Run as daemon\nsloth-runner ui --daemon --port 8080\n</code></pre>"},{"location":"#aiml-integration","title":"\ud83e\udd16 AI/ML Integration","text":"<p>Built-in artificial intelligence capabilities for smart automation and decision making.</p> <ul> <li>\ud83e\udde0 OpenAI integration for text processing</li> <li>\ud83e\udd16 Automated decision making</li> <li>\ud83d\udcdd Code generation assistance</li> <li>\ud83d\udd0d Intelligent analysis of workflows</li> <li>\ud83c\udfaf Smart recommendations</li> </ul> <pre><code>-- AI-powered workflow optimization\nlocal ai = require(\"ai\")\nlocal result = ai.openai.complete(\"Generate Docker build script\")\nlocal decision = ai.decide({\n    cpu_usage = metrics.cpu,\n    memory_usage = metrics.memory\n})\n</code></pre>"},{"location":"#advanced-scheduling","title":"\u23f0 Advanced Scheduling","text":"<p>Enterprise-grade task scheduling with cron-style syntax and background execution.</p> <ul> <li>\u23f0 Cron-style scheduling syntax</li> <li>\ud83d\udd04 Background execution daemon</li> <li>\ud83d\udcc5 Recurring tasks management</li> <li>\ud83c\udfaf Event-driven triggers</li> <li>\ud83d\udcca Schedule monitoring</li> </ul> <pre><code># Enable scheduler\nsloth-runner scheduler enable --config scheduler.yaml\n\n# List scheduled tasks\nsloth-runner scheduler list\n\n# Delete a scheduled task\nsloth-runner scheduler delete backup-task\n</code></pre>"},{"location":"#advanced-state-management","title":"\ud83d\udcbe Advanced State Management","text":"<p>Built-in SQLite-based persistent state with atomic operations, distributed locks, and TTL support.</p> <ul> <li>\ud83d\udd12 Distributed locking mechanisms</li> <li>\u269b\ufe0f Atomic operations support</li> <li>\u23f0 TTL-based data expiration</li> <li>\ud83d\udd0d Pattern-based queries</li> <li>\ud83d\udd04 State replication across agents</li> </ul> <pre><code>-- Advanced state operations\nlocal state = require(\"state\")\nstate.lock(\"deploy-resource\", 30)  -- 30 second lock\nstate.set(\"config\", data, 3600)    -- 1 hour TTL\nstate.atomic_increment(\"build-count\")\n</code></pre>"},{"location":"#project-scaffolding","title":"\ud83c\udfd7\ufe0f Project Scaffolding","text":"<p>Template-based project initialization similar to Pulumi new or Terraform init.</p> <ul> <li>\ud83d\udccb Multiple templates (basic, cicd, infrastructure, microservices, data-pipeline)</li> <li>\ud83c\udfaf Interactive mode with guided setup</li> <li>\ud83d\udcc1 Complete project structure generation</li> <li>\ud83d\udd27 Configuration files auto-generated</li> </ul> <pre><code># List available templates\nsloth-runner workflow list-templates\n\n# Create new project from template\nsloth-runner workflow init my-app --template cicd\n\n# Interactive mode\nsloth-runner workflow init my-app --interactive\n</code></pre>"},{"location":"#multi-cloud-excellence","title":"\u2601\ufe0f Multi-Cloud Excellence","text":"<p>Comprehensive cloud provider support with advanced automation capabilities.</p> <ul> <li>\u2601\ufe0f AWS, GCP, Azure native integration</li> <li>\ud83d\ude80 Terraform &amp; Pulumi advanced support</li> <li>\ud83d\udd27 Infrastructure as Code automation</li> <li>\ud83d\udd12 Security &amp; compliance built-in</li> <li>\ud83d\udcca Cost optimization tools</li> </ul>"},{"location":"#enterprise-security","title":"\ud83d\udd12 Enterprise Security","text":"<p>Built-in security features for enterprise compliance and data protection.</p> <ul> <li>\ud83d\udd10 Certificate management</li> <li>\ud83d\udd12 Secret encryption and storage</li> <li>\ud83d\udee1\ufe0f Vulnerability scanning</li> <li>\ud83d\udccb Compliance checking</li> <li>\ud83d\udcdd Audit logging system</li> </ul>"},{"location":"#enhanced-output-system","title":"\ud83d\udcca Enhanced Output System","text":"<p>Pulumi-style rich output formatting with configurable styles, progress indicators, and structured displays.</p> <ul> <li>\ud83c\udfa8 Multiple output styles (basic, enhanced, rich, modern, json)</li> <li>\ud83d\udcc8 Real-time progress indicators</li> <li>\ud83c\udfaf Structured output sections</li> <li>\ud83c\udf08 Rich color formatting</li> <li>\ud83d\udcca Metrics visualization</li> <li>\ud83d\udd27 JSON output for automation and CI/CD integration</li> </ul> <pre><code># Enhanced Pulumi-style output\nsloth-runner run my-stack -f workflow.sloth --output enhanced\n\n# JSON output for automation\nsloth-runner run my-stack -f workflow.sloth --output json\n\n# List tasks with unique IDs\nsloth-runner list -f workflow.sloth\n</code></pre>"},{"location":"#rich-module-ecosystem","title":"\ud83d\udd27 Rich Module Ecosystem","text":"<p>Extensive collection of pre-built modules for common automation tasks.</p> <ul> <li>\ud83c\udf10 Network &amp; HTTP operations</li> <li>\ud83d\udcbd Database integrations (MySQL, PostgreSQL, MongoDB, Redis)</li> <li>\ud83d\udce7 Notification systems (Email, Slack, Discord)</li> <li>\ud83d\udc0d Python/R integration with virtual environments</li> <li>\ud83d\udd17 GitOps advanced workflows</li> <li>\ud83e\uddea Testing frameworks and quality assurance</li> </ul>"},{"location":"#quick-start-examples","title":"\ud83d\ude80 Quick Start Examples","text":""},{"location":"#stack-management-with-pulumi-style-output","title":"\ud83d\uddc2\ufe0f Stack Management with Pulumi-Style Output","text":"<pre><code># Create a new project from template\nsloth-runner workflow init my-cicd --template cicd\n\n# Deploy to development environment\nsloth-runner run dev-app -f my-cicd.sloth --output enhanced\n\n# Deploy to production with stack persistence\nsloth-runner run prod-app -f my-cicd.sloth -o rich\n\n# Check deployment status and outputs\nsloth-runner stack show prod-app\n</code></pre>"},{"location":"#stack-with-exported-outputs-json-output","title":"\ud83d\udcca Stack with Exported Outputs &amp; JSON Output","text":"<pre><code>local deploy_task = task(\"deploy\")\n    :command(function(params, deps)\n        -- Deploy application\n        local result = exec.run(\"kubectl apply -f deployment.yaml\")\n\n        -- Export important outputs to stack\n        runner.Export({\n            app_url = \"https://myapp.example.com\",\n            version = \"1.2.3\",\n            environment = \"production\",\n            deployed_at = os.date(),\n            health_endpoint = \"https://myapp.example.com/health\"\n        })\n\n        return true, result.stdout, { status = \"deployed\" }\n    end)\n    :build()\n\nworkflow.define(\"production_deployment\", {\n    tasks = { deploy_task }\n})\n</code></pre> <p>Run with JSON output for automation: <pre><code># Get structured JSON output for CI/CD integration\nsloth-runner run prod-deployment -f deploy.sloth --output json\n\n# Example JSON output:\n{\n  \"status\": \"success\",\n  \"duration\": \"5.192ms\",\n  \"stack\": {\n    \"id\": \"abc123...\",\n    \"name\": \"prod-deployment\"\n  },\n  \"tasks\": {\n    \"deploy\": {\n      \"status\": \"Success\",\n      \"duration\": \"4.120ms\"\n    }\n  },\n  \"outputs\": {\n    \"app_url\": \"https://myapp.example.com\",\n    \"version\": \"1.2.3\",\n    \"environment\": \"production\"\n  },\n  \"workflow\": \"production_deployment\",\n  \"execution_time\": 1759237365\n}\n</code></pre></p>"},{"location":"#cli-commands-overview","title":"\ud83d\udcca CLI Commands Overview","text":""},{"location":"#stack-management-new","title":"Stack Management (NEW!)","text":"<pre><code># Execute with stack persistence (NEW SYNTAX)\nsloth-runner run {stack-name} --file workflow.sloth\n\n# Enhanced output styles\nsloth-runner run {stack-name} --file workflow.sloth --output enhanced\nsloth-runner run {stack-name} --file workflow.sloth --output json\n\n# Manage stacks\nsloth-runner stack list                    # List all stacks\nsloth-runner stack show production-app     # Show stack details with outputs\nsloth-runner stack delete old-env          # Delete stack\n\n# List tasks with unique IDs\nsloth-runner list --file workflow.sloth      # Show tasks and groups with IDs\n</code></pre>"},{"location":"#project-scaffolding_1","title":"Project Scaffolding","text":"<pre><code># Create new projects\nsloth-runner workflow init my-app --template cicd\nsloth-runner workflow list-templates       # Available templates\n</code></pre>"},{"location":"#distributed-agents-web-ui","title":"Distributed Agents &amp; Web UI","text":"<pre><code># Start master server\nsloth-runner master --port 50053 --daemon\n\n# Start distributed agents\nsloth-runner agent start --name web-builder --master localhost:50053\nsloth-runner agent start --name db-manager --master localhost:50053\n\n# Start web dashboard\nsloth-runner ui --port 8080 --daemon\n# Access dashboard at http://localhost:8080\n\n# List connected agents\nsloth-runner agent list --master localhost:50053\n\n# Execute commands on specific agents\nsloth-runner agent run web-builder \"docker ps\" --master localhost:50053\n</code></pre>"},{"location":"#advanced-scheduling_1","title":"Advanced Scheduling","text":"<pre><code># Enable background scheduler\nsloth-runner scheduler enable --config scheduler.yaml\n\n# List and manage scheduled tasks\nsloth-runner scheduler list\nsloth-runner scheduler delete backup-task\n</code></pre>"},{"location":"#distributed-deployment-with-monitoring","title":"\ud83d\udcca Distributed Deployment with Monitoring","text":"<pre><code>local monitoring = require(\"monitoring\")\nlocal state = require(\"state\")\n\n-- Production deployment with comprehensive monitoring\nlocal deploy_task = task(\"production_deployment\")\n    :command(function(params, deps)\n        -- Track deployment metrics\n        monitoring.counter(\"deployments_started\", 1)\n\n        -- Use state for coordination\n        local deploy_id = state.increment(\"deployment_counter\", 1)\n        state.set(\"current_deployment\", deploy_id)\n\n        -- Execute deployment\n        local result = exec.run(\"kubectl apply -f production.yaml\")\n\n        if result.success then\n            monitoring.gauge(\"deployment_status\", 1)\n            state.set(\"last_successful_deploy\", os.time())\n            log.info(\"\u2705 Deployment \" .. deploy_id .. \" completed successfully\")\n        else\n            monitoring.gauge(\"deployment_status\", 0)\n            monitoring.counter(\"deployments_failed\", 1)\n            log.error(\"\u274c Deployment \" .. deploy_id .. \" failed: \" .. result.stderr)\n        end\n\n        return result\n    end)\n    :build()\n</code></pre>"},{"location":"#multi-agent-distributed-execution","title":"\ud83c\udf10 Multi-Agent Distributed Execution","text":"<pre><code>local distributed = require(\"distributed\")\n\n-- Execute tasks across multiple agents\nworkflow.define(\"distributed_pipeline\", {\n    tasks = {\n        task(\"build_frontend\")\n            :agent(\"build-agent-1\")\n            :command(\"npm run build\")\n            :build(),\n\n        task(\"build_backend\")\n            :agent(\"build-agent-2\")\n            :command(\"go build -o app ./cmd/server\")\n            :build(),\n\n        task(\"run_tests\")\n            :agent(\"test-agent\")\n            :depends_on({\"build_frontend\", \"build_backend\"})\n            :command(\"npm test &amp;&amp; go test ./...\")\n            :build(),\n\n        task(\"deploy\")\n            :agent(\"deploy-agent\")\n            :depends_on({\"run_tests\"})\n            :command(\"./deploy.sh production\")\n            :build()\n    }\n})\n</code></pre>"},{"location":"#advanced-state-management_1","title":"\ud83d\udcbe Advanced State Management","text":"<pre><code>local state = require(\"state\")\n\n-- Complex state operations with locking\nlocal update_config = task(\"update_configuration\")\n    :command(function(params, deps)\n        -- Critical section with automatic locking\n        return state.with_lock(\"config_update\", function()\n            local current_version = state.get(\"config_version\") or 0\n            local new_version = current_version + 1\n\n            -- Atomic configuration update\n            local success = state.compare_and_swap(\"config_version\", current_version, new_version)\n\n            if success then\n                state.set(\"config_data\", params.new_config)\n                state.set(\"config_updated_at\", os.time())\n                log.info(\"Configuration updated to version \" .. new_version)\n                return { version = new_version, success = true }\n            else\n                log.error(\"Configuration update failed - version mismatch\")\n                return { success = false, error = \"version_mismatch\" }\n            end\n        end)\n    end)\n    :build()\n</code></pre>"},{"location":"#cicd-pipeline-with-gitops","title":"\ud83d\udd04 CI/CD Pipeline with GitOps","text":"<pre><code>local git = require(\"git\")\nlocal docker = require(\"docker\")\nlocal kubernetes = require(\"kubernetes\")\n\n-- Complete CI/CD pipeline\nworkflow.define(\"gitops_pipeline\", {\n    on_git_push = true,\n\n    tasks = {\n        task(\"checkout_code\")\n            :command(function()\n                return git.clone(params.repository, \"/tmp/build\")\n            end)\n            :build(),\n\n        task(\"run_tests\")\n            :depends_on({\"checkout_code\"})\n            :command(\"cd /tmp/build &amp;&amp; npm test\")\n            :retry_count(3)\n            :build(),\n\n        task(\"build_image\")\n            :depends_on({\"run_tests\"})\n            :command(function()\n                return docker.build({\n                    path = \"/tmp/build\",\n                    tag = \"myapp:\" .. params.git_sha,\n                    push = true\n                })\n            end)\n            :build(),\n\n        task(\"deploy_staging\")\n            :depends_on({\"build_image\"})\n            :command(function()\n                return kubernetes.apply_manifest({\n                    file = \"/tmp/build/k8s/staging.yaml\",\n                    namespace = \"staging\",\n                    image = \"myapp:\" .. params.git_sha\n                })\n            end)\n            :build(),\n\n        task(\"integration_tests\")\n            :depends_on({\"deploy_staging\"})\n            :command(\"./run-integration-tests.sh staging\")\n            :build(),\n\n        task(\"deploy_production\")\n            :depends_on({\"integration_tests\"})\n            :condition(function() return params.branch == \"main\" end)\n            :command(function()\n                return kubernetes.apply_manifest({\n                    file = \"/tmp/build/k8s/production.yaml\",\n                    namespace = \"production\",\n                    image = \"myapp:\" .. params.git_sha\n                })\n            end)\n            :build()\n    }\n})\n</code></pre>"},{"location":"#module-reference","title":"\ud83d\udcca Module Reference","text":"\ud83d\udd27 Core Modules <ul> <li><code>exec</code> - Command execution with streaming</li> <li><code>fs</code> - File system operations</li> <li><code>net</code> - Network utilities</li> <li><code>data</code> - Data processing utilities</li> <li><code>log</code> - Structured logging</li> </ul> \ud83d\udcbe State &amp; Monitoring <ul> <li><code>state</code> - Persistent state management</li> <li><code>metrics</code> - Monitoring and metrics</li> <li><code>monitoring</code> - System monitoring</li> <li><code>health</code> - Health check utilities</li> </ul> \u2601\ufe0f Cloud Providers <ul> <li><code>aws</code> - Amazon Web Services</li> <li><code>gcp</code> - Google Cloud Platform</li> <li><code>azure</code> - Microsoft Azure</li> <li><code>digitalocean</code> - DigitalOcean</li> </ul> \ud83d\udee0\ufe0f Infrastructure <ul> <li><code>kubernetes</code> - Kubernetes orchestration</li> <li><code>docker</code> - Container management</li> <li><code>terraform</code> - Infrastructure as Code</li> <li><code>pulumi</code> - Modern IaC</li> <li><code>salt</code> - Configuration management</li> </ul> \ud83d\udd17 Integrations <ul> <li><code>git</code> - Git operations</li> <li><code>python</code> - Python script execution</li> <li><code>notification</code> - Alert notifications</li> <li><code>crypto</code> - Cryptographic operations</li> </ul>"},{"location":"#why-choose-sloth-runner","title":"\ud83c\udfaf Why Choose Sloth Runner?","text":"\ud83c\udfe2 Enterprise Ready <ul> <li>\ud83c\udf0d Distributed execution across multiple agents</li> <li>\ud83d\udd12 Production-grade security with mTLS</li> <li>\ud83d\udcca Comprehensive monitoring and alerting</li> <li>\ud83d\udcbe Reliable state management with persistence</li> <li>\ud83d\udd04 Circuit breakers and fault tolerance</li> </ul> \ud83d\udc69\u200d\ud83d\udcbb Developer Experience <ul> <li>\ud83e\uddf0 Rich Lua-based DSL for complex workflows</li> <li>\ud83d\udce1 Real-time command output streaming</li> <li>\ud83d\udd04 Interactive REPL for debugging</li> <li>\ud83d\udcda Comprehensive documentation</li> <li>\ud83c\udfaf Intuitive task dependency management</li> </ul> \ud83d\ude80 Performance &amp; Reliability <ul> <li>\u26a1 High-performance parallel execution</li> <li>\ud83d\udd04 Automatic retry and error handling</li> <li>\ud83d\udcc8 Built-in performance monitoring</li> <li>\ud83c\udf9b\ufe0f Resource optimization and throttling</li> <li>\ud83d\udee1\ufe0f Robust error recovery mechanisms</li> </ul> \ud83d\udd27 Operational Excellence <ul> <li>\ud83d\udcca Prometheus-compatible metrics</li> <li>\ud83d\udd0d Distributed tracing support</li> <li>\ud83d\udccb Structured audit logging</li> <li>\ud83d\udea8 Flexible alerting mechanisms</li> <li>\ud83d\udd04 GitOps workflow integration</li> </ul>"},{"location":"#get-started-in-minutes","title":"\ud83d\ude80 Get Started in Minutes","text":"1 Install <pre><code># Linux/macOS\ncurl -L https://github.com/chalkan3-sloth/sloth-runner/releases/latest/download/sloth-runner_$(uname -s | tr '[:upper:]' '[:lower:]')_$(uname -m | sed 's/x86_64/amd64/').tar.gz | tar xz\nchmod +x sloth-runner &amp;&amp; sudo mv sloth-runner /usr/local/bin/</code></pre> 2 Create Your First Workflow <pre><code>echo 'local hello = task(\"hello\")\n  :command(function() \n    log.info(\"Hello from Sloth Runner! \ud83e\udda5\")\n    return true \n  end)\n  :build()\n\nworkflow.define(\"greeting\", { tasks = { hello } })' &gt; hello.sloth</code></pre> 3 Run Your Workflow <pre><code>sloth-runner run -f hello.sloth</code></pre>"},{"location":"#learn-more","title":"\ud83d\udcda Learn More","text":"\ud83d\ude80 Quick Tutorial <p>Get up and running with practical examples in 5 minutes</p> \ud83d\udcdd Advanced Examples <p>Production-ready workflows and real-world use cases</p> \ud83e\udde0 Core Concepts <p>Understanding tasks, workflows, and distributed execution</p> \ud83c\udfe2 Enterprise Features <p>Production-grade security, monitoring, and reliability</p> \ud83c\udf10 Distributed Execution <p>Master-agent architecture and multi-node coordination</p> \ud83d\udd27 Module Reference <p>Complete API documentation for all built-in modules</p>"},{"location":"#state-management-persistence-implemented","title":"\ud83d\udcbe State Management &amp; Persistence Implemented","text":"<ul> <li>SQLite-based persistent state with WAL mode for performance</li> <li>Atomic operations: increment, compare-and-swap, append</li> <li>Distributed locks with automatic timeout handling</li> <li>TTL support for automatic data expiration</li> <li>Pattern matching for bulk operations</li> </ul> <pre><code>-- Persistent state example\nstate.set(\"deployment_version\", \"v1.2.3\")\nlocal counter = state.increment(\"api_calls\", 1)\n\n-- Critical section with automatic locking\nstate.with_lock(\"deployment\", function()\n    -- Safe deployment logic\n    local success = deploy_application()\n    state.set(\"last_deploy\", os.time())\n    return success\nend)\n</code></pre>"},{"location":"#metrics-monitoring-implemented","title":"\ud83d\udcca Metrics &amp; Monitoring Implemented","text":"<ul> <li>System metrics: CPU, memory, disk, network monitoring</li> <li>Custom metrics: gauges, counters, histograms, timers</li> <li>Health checks with configurable thresholds</li> <li>Prometheus endpoints for external monitoring</li> <li>Real-time alerting based on conditions</li> </ul> <pre><code>-- Monitoring example\nlocal cpu = metrics.system_cpu()\nmetrics.gauge(\"app_performance\", response_time)\nmetrics.counter(\"requests_total\", 1)\n\nif cpu &gt; 80 then\n    metrics.alert(\"high_cpu\", {\n        level = \"warning\",\n        message = \"CPU usage critical: \" .. cpu .. \"%\"\n    })\nend\n</code></pre>"},{"location":"#distributed-agent-system-implemented","title":"\ud83c\udf10 Distributed Agent System Implemented","text":"<ul> <li>Master-agent architecture with gRPC communication</li> <li>Real-time streaming of command output</li> <li>Automatic agent registration and health monitoring</li> <li>Load balancing across available agents</li> <li>TLS encryption for secure communication</li> </ul> <pre><code># Start master server\nsloth-runner master --port 50053\n\n# Deploy agents on remote machines\nsloth-runner agent start --name agent-1 --master master:50053\n\n# Execute distributed commands\nsloth-runner agent run agent-1 \"deploy-script.sh\"\n</code></pre>"},{"location":"#documentation-by-language","title":"\ud83d\udcda Documentation by Language","text":""},{"location":"#english-documentation","title":"\ud83c\uddfa\ud83c\uddf8 English Documentation","text":"<ul> <li>\ud83d\udcd6 Getting Started</li> <li>\ud83e\udde0 Core Concepts</li> <li>\u26a1 Quick Start</li> <li>\ud83d\udcbb CLI Reference</li> <li>\ud83d\udd04 Interactive REPL</li> <li>\ud83c\udfaf Advanced Features</li> <li>\ud83d\ude80 Agent Improvements</li> </ul>"},{"location":"#documentacao-em-portugues","title":"\ud83c\udde7\ud83c\uddf7 Documenta\u00e7\u00e3o em Portugu\u00eas","text":"<ul> <li>\ud83d\udcd6 Primeiros Passos</li> <li>\ud83e\udde0 Conceitos Fundamentais</li> <li>\u26a1 In\u00edcio R\u00e1pido</li> <li>\ud83d\udcbb Refer\u00eancia CLI</li> <li>\ud83d\udd04 REPL Interativo</li> <li>\ud83c\udfaf Recursos Avan\u00e7ados</li> <li>\ud83d\ude80 Melhorias dos Agentes</li> </ul>"},{"location":"#_1","title":"\ud83c\udde8\ud83c\uddf3 \u4e2d\u6587\u6587\u6863","text":"<ul> <li>\ud83d\udcd6 \u5165\u95e8\u6307\u5357</li> <li>\ud83e\udde0 \u6838\u5fc3\u6982\u5ff5</li> <li>\u26a1 \u5feb\u901f\u5f00\u59cb</li> <li>\ud83d\udcbb CLI\u53c2\u8003</li> <li>\ud83d\udd04 \u4ea4\u4e92\u5f0fREPL</li> <li>\ud83c\udfaf \u9ad8\u7ea7\u529f\u80fd</li> <li>\ud83d\ude80 \u4ee3\u7406\u6539\u8fdb</li> </ul>"},{"location":"#module-reference_1","title":"\ud83d\udd27 Module Reference","text":""},{"location":"#built-in-modules","title":"\ud83d\udce6 Built-in Modules","text":"Module Description Language Support \ud83d\udcbe State Persistent state management EN PT ZH \ud83d\udcca Metrics Monitoring and observability EN PT ZH \u26a1 Exec Command execution EN PT ZH \ud83d\udcc1 FS File system operations EN PT ZH \ud83d\udce1 Net Network operations EN PT ZH \ud83d\udccb Data Data processing utilities EN PT ZH \ud83d\udcdd Log Structured logging EN PT ZH"},{"location":"#cloud-provider-modules","title":"\u2601\ufe0f Cloud Provider Modules","text":"Module Description Status \u2601\ufe0f AWS Amazon Web Services Ready \ud83c\udf29\ufe0f GCP Google Cloud Platform Ready \ud83d\udd37 Azure Microsoft Azure Ready \ud83c\udf0a DigitalOcean DigitalOcean Beta"},{"location":"#infrastructure-modules","title":"\ud83d\udee0\ufe0f Infrastructure Modules","text":"Module Description Status \ud83d\udc33 Docker Container management Ready \ud83c\udfd7\ufe0f Pulumi Modern IaC Ready \ud83c\udf0d Terraform Infrastructure provisioning Ready \ud83e\uddc2 Salt Configuration management Beta \ud83d\udc0d Python Python integration Beta"},{"location":"#get-started-today","title":"\ud83d\ude80 Get Started Today","text":"<pre><code># Install Sloth Runner\ncurl -L https://github.com/chalkan3-sloth/sloth-runner/releases/latest/download/sloth-runner_linux_amd64.tar.gz | tar xz\nchmod +x sloth-runner &amp;&amp; sudo mv sloth-runner /usr/local/bin/\n\n# Create your first workflow\necho 'local hello_task = task(\"greet\"):command(function() log.info(\"Hello World! \ud83d\ude80\") return true end):build(); workflow.define(\"hello\", { tasks = { hello_task } })' &gt; hello.sloth\n\n# Run it!\nsloth-runner run -f hello.sloth\n</code></pre>"},{"location":"#community-support","title":"\ud83e\udd1d Community &amp; Support","text":"\ud83d\udc19 GitHub <p>Source code, issues, and contributions</p> \ud83d\udcac Discussions <p>Community Q&amp;A and feature discussions</p> \ud83d\udc1b Issues <p>Bug reports and feature requests</p> \ud83c\udfe2 Enterprise <p>Commercial support and services</p> \ud83e\udda5 Ready to streamline your automation? <p>Join developers using Sloth Runner for reliable, scalable task orchestration.</p> \ud83d\ude80 Start Building Today"},{"location":"assets/","title":"Sloth Runner Logo and Assets","text":"<p>This directory contains logos, icons, and other assets for the Sloth Runner documentation.</p>"},{"location":"assets/#files","title":"Files:","text":"<ul> <li><code>favicon.png</code> - Browser favicon (16x16)</li> <li><code>logo.png</code> - Main logo (128x128) </li> <li><code>sloth-icon.svg</code> - Vector icon of sloth</li> </ul>"},{"location":"en/","title":"Sloth-Runner Documentation","text":"<p>Welcome to the comprehensive documentation for Sloth-Runner, your flexible tool for task automation and workflow orchestration using Lua scripts.</p> <p>Here you will find detailed guides, API references, and practical examples to help you make the most of Sloth-Runner's power.</p>"},{"location":"en/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Getting Started</li> <li>Core Concepts</li> <li>Distributed Task Execution</li> <li>CLI Commands</li> <li>Interactive REPL</li> <li>Built-in Modules:<ul> <li>AWS Module</li> <li>Azure Module</li> <li>Data Module</li> <li>DigitalOcean Module</li> <li>Docker Module</li> <li>Exec Module</li> <li>FS Module</li> <li>GCP Module</li> <li>Git Module</li> <li>Log Module</li> <li>Net Module</li> <li>Notifications Module</li> <li>Pulumi Module</li> <li>Python Module</li> <li>Salt Module</li> <li>Terraform Module</li> </ul> </li> <li>Advanced Examples</li> </ul> <p>English | Portugu\u00eas | \u4e2d\u6587</p>"},{"location":"en/CLI/","title":"\ud83d\ude80 Sloth Runner CLI Reference","text":"<p>Complete command-line interface reference for Sloth Runner - the AI-powered GitOps task orchestration platform.</p>"},{"location":"en/CLI/#overview","title":"Overview","text":"<p>Sloth Runner provides a comprehensive CLI for task execution, agent management, scheduling, and workflow orchestration.</p> <p>Main Commands:</p> <pre><code>sloth-runner [command] [flags]\n</code></pre> Command Description <code>run</code> Execute tasks from workflow files <code>agent</code> Manage distributed agents <code>master</code> Start the master coordination server <code>scheduler</code> Manage scheduled tasks <code>stack</code> Manage workflow stacks and state <code>ui</code> Start the web dashboard <code>workflow</code> Create and manage workflows <code>list</code> List tasks from workflow files <code>version</code> Show version information"},{"location":"en/CLI/#sloth-runner-run","title":"<code>sloth-runner run</code>","text":"<p>Execute tasks defined in <code>.sloth</code> workflow files with multiple output formats and state persistence.</p>"},{"location":"en/CLI/#usage","title":"Usage","text":"<pre><code>sloth-runner run [file.sloth|stack-name] [flags]\n</code></pre>"},{"location":"en/CLI/#flags","title":"Flags","text":"Flag Type Description <code>-f, --file</code> string Path to the Lua/Sloth task file <code>-o, --output</code> string Output style: <code>basic</code>, <code>enhanced</code>, <code>rich</code>, <code>modern</code>, <code>json</code> (default: <code>basic</code>) <code>-v, --values</code> string Path to values file (YAML/JSON) for parameterization <code>--interactive</code> bool Run in interactive mode with prompts <code>--yes</code> bool Skip confirmation prompts"},{"location":"en/CLI/#output-styles","title":"Output Styles","text":"<ul> <li>basic: Simple text output</li> <li>enhanced: Colored output with icons</li> <li>rich: Detailed output with progress bars</li> <li>modern: Modern UI with animations</li> <li>json: Machine-readable JSON output</li> </ul>"},{"location":"en/CLI/#examples","title":"Examples","text":"<pre><code># Run with modern output style\nsloth-runner run -f deploy.sloth -o modern\n\n# Run with values file\nsloth-runner run -f infra.sloth -v prod-values.yaml\n\n# Run from stack\nsloth-runner run prod-stack --yes\n\n# Interactive mode\nsloth-runner run -f tasks.sloth --interactive\n\n# JSON output for CI/CD\nsloth-runner run -f ci.sloth -o json\n</code></pre>"},{"location":"en/CLI/#sloth-runner-agent","title":"<code>sloth-runner agent</code>","text":"<p>Manage distributed agents for remote task execution.</p>"},{"location":"en/CLI/#subcommands","title":"Subcommands","text":""},{"location":"en/CLI/#agent-start","title":"<code>agent start</code>","text":"<p>Start an agent in agent mode to accept tasks from master server.</p> <pre><code>sloth-runner agent start [flags]\n</code></pre> <p>Flags: - <code>--master string</code>: Master server address (default: <code>localhost:50053</code>) - <code>--name string</code>: Agent name identifier - <code>--tags string</code>: Comma-separated tags for agent capabilities - <code>--daemon</code>: Run as background daemon</p> <p>Example: <pre><code># Start agent with tags\nsloth-runner agent start --master master.example.com:50053 \\\n  --name prod-agent-1 \\\n  --tags linux,docker,aws\n\n# Start as daemon\nsloth-runner agent start --daemon --name bg-agent\n</code></pre></p>"},{"location":"en/CLI/#agent-list","title":"<code>agent list</code>","text":"<p>List all registered agents with their status.</p> <pre><code>sloth-runner agent list [flags]\n</code></pre> <p>Flags: - <code>--master string</code>: Master server address</p> <p>Example: <pre><code>sloth-runner agent list --master master.example.com:50053\n</code></pre></p>"},{"location":"en/CLI/#agent-run","title":"<code>agent run</code>","text":"<p>Execute a command on a remote agent.</p> <pre><code>sloth-runner agent run [flags]\n</code></pre> <p>Flags: - <code>--agent string</code>: Target agent name - <code>--command string</code>: Command to execute - <code>--master string</code>: Master server address</p> <p>Example: <pre><code>sloth-runner agent run --agent prod-agent-1 \\\n  --command \"docker ps\" \\\n  --master master.example.com:50053\n</code></pre></p>"},{"location":"en/CLI/#agent-stop","title":"<code>agent stop</code>","text":"<p>Stop a remote agent gracefully.</p> <pre><code>sloth-runner agent stop [flags]\n</code></pre> <p>Flags: - <code>--agent string</code>: Agent name to stop - <code>--master string</code>: Master server address</p>"},{"location":"en/CLI/#agent-delete","title":"<code>agent delete</code>","text":"<p>Delete an agent from the registry.</p> <pre><code>sloth-runner agent delete [flags]\n</code></pre>"},{"location":"en/CLI/#sloth-runner-master","title":"<code>sloth-runner master</code>","text":"<p>Start the master coordination server for managing distributed agents.</p>"},{"location":"en/CLI/#usage_1","title":"Usage","text":"<pre><code>sloth-runner master [flags]\n</code></pre>"},{"location":"en/CLI/#flags_1","title":"Flags","text":"Flag Type Description <code>-p, --port</code> int Port to listen on (default: <code>50053</code>) <code>--daemon</code> bool Run as background daemon <code>--debug</code> bool Enable debug logging"},{"location":"en/CLI/#examples_1","title":"Examples","text":"<pre><code># Start master server\nsloth-runner master --port 50053\n\n# Start as daemon with debug\nsloth-runner master --daemon --debug\n\n# Custom port\nsloth-runner master --port 9000\n</code></pre>"},{"location":"en/CLI/#sloth-runner-scheduler","title":"<code>sloth-runner scheduler</code>","text":"<p>Manage scheduled tasks for automated execution.</p>"},{"location":"en/CLI/#subcommands_1","title":"Subcommands","text":""},{"location":"en/CLI/#scheduler-enable","title":"<code>scheduler enable</code>","text":"<p>Enable the scheduler service.</p> <pre><code>sloth-runner scheduler enable\n</code></pre>"},{"location":"en/CLI/#scheduler-disable","title":"<code>scheduler disable</code>","text":"<p>Disable the scheduler service.</p> <pre><code>sloth-runner scheduler disable\n</code></pre>"},{"location":"en/CLI/#scheduler-list","title":"<code>scheduler list</code>","text":"<p>List all scheduled tasks with their configuration.</p> <pre><code>sloth-runner scheduler list [flags]\n</code></pre> <p>Output: - Task name - Schedule (cron expression) - Next run time - Status (enabled/disabled)</p> <p>Example: <pre><code>sloth-runner scheduler list\n</code></pre></p>"},{"location":"en/CLI/#scheduler-delete","title":"<code>scheduler delete</code>","text":"<p>Delete a scheduled task.</p> <pre><code>sloth-runner scheduler delete [task-name]\n</code></pre>"},{"location":"en/CLI/#sloth-runner-stack","title":"<code>sloth-runner stack</code>","text":"<p>Manage workflow stacks for state persistence and environment isolation.</p>"},{"location":"en/CLI/#subcommands_2","title":"Subcommands","text":""},{"location":"en/CLI/#stack-new","title":"<code>stack new</code>","text":"<p>Create a new workflow stack.</p> <pre><code>sloth-runner stack new [stack-name] [flags]\n</code></pre> <p>Flags: - <code>-f, --file string</code>: Workflow file to associate - <code>--description string</code>: Stack description</p> <p>Example: <pre><code>sloth-runner stack new prod-infra \\\n  -f infrastructure.sloth \\\n  --description \"Production infrastructure stack\"\n</code></pre></p>"},{"location":"en/CLI/#stack-list","title":"<code>stack list</code>","text":"<p>List all workflow stacks.</p> <pre><code>sloth-runner stack list\n</code></pre> <p>Output: - Stack name - Workflow file - State status - Last updated</p>"},{"location":"en/CLI/#stack-show","title":"<code>stack show</code>","text":"<p>Show detailed information about a stack.</p> <pre><code>sloth-runner stack show [stack-name]\n</code></pre> <p>Output: - Stack configuration - State variables - Execution history - Associated resources</p>"},{"location":"en/CLI/#stack-delete","title":"<code>stack delete</code>","text":"<p>Delete a workflow stack and its state.</p> <pre><code>sloth-runner stack delete [stack-name] [flags]\n</code></pre> <p>Flags: - <code>--force</code>: Force deletion without confirmation</p>"},{"location":"en/CLI/#sloth-runner-ui","title":"<code>sloth-runner ui</code>","text":"<p>Start the web-based dashboard for visual management.</p>"},{"location":"en/CLI/#usage_2","title":"Usage","text":"<pre><code>sloth-runner ui [flags]\n</code></pre>"},{"location":"en/CLI/#flags_2","title":"Flags","text":"Flag Type Description <code>-p, --port</code> int Port for UI server (default: <code>8080</code>) <code>--daemon</code> bool Run as background daemon <code>--debug</code> bool Enable debug logging"},{"location":"en/CLI/#features","title":"Features","text":"<ul> <li>\ud83d\udcca Real-time task monitoring</li> <li>\ud83e\udd16 Agent health dashboard</li> <li>\ud83d\udcc5 Scheduler management</li> <li>\ud83d\udce6 Stack browser</li> <li>\ud83d\udcc8 Metrics and analytics</li> </ul>"},{"location":"en/CLI/#examples_2","title":"Examples","text":"<pre><code># Start UI on default port\nsloth-runner ui\n\n# Custom port\nsloth-runner ui --port 3000\n\n# Run as daemon\nsloth-runner ui --daemon --port 8080\n</code></pre> <p>Access at: <code>http://localhost:8080</code></p>"},{"location":"en/CLI/#sloth-runner-workflow","title":"<code>sloth-runner workflow</code>","text":"<p>Create and manage workflow projects with scaffolding.</p>"},{"location":"en/CLI/#subcommands_3","title":"Subcommands","text":""},{"location":"en/CLI/#workflow-init","title":"<code>workflow init</code>","text":"<p>Initialize a new workflow project with templates.</p> <pre><code>sloth-runner workflow init [project-name] [flags]\n</code></pre> <p>Flags: - <code>--template string</code>: Template to use (default: <code>basic</code>) - <code>--path string</code>: Target directory</p> <p>Available Templates: - <code>basic</code>: Simple task workflow - <code>cicd</code>: CI/CD pipeline - <code>infra</code>: Infrastructure automation - <code>gitops</code>: GitOps deployment</p> <p>Example: <pre><code># Create CI/CD project\nsloth-runner workflow init my-pipeline --template cicd\n\n# Custom path\nsloth-runner workflow init my-project --template infra --path ./projects/\n</code></pre></p>"},{"location":"en/CLI/#workflow-list-templates","title":"<code>workflow list-templates</code>","text":"<p>List all available workflow templates.</p> <pre><code>sloth-runner workflow list-templates\n</code></pre>"},{"location":"en/CLI/#sloth-runner-list","title":"<code>sloth-runner list</code>","text":"<p>List tasks and task groups from a workflow file without execution.</p>"},{"location":"en/CLI/#usage_3","title":"Usage","text":"<pre><code>sloth-runner list [flags]\nsloth-runner list [flags]\n</code></pre> <p>Flags:</p> <ul> <li><code>-f, --file string</code>: (Required) Path to the Lua task configuration file.</li> <li><code>-v, --values string</code>: Path to a YAML values file, in case your task definitions depend on it.</li> </ul>"},{"location":"en/CLI/#sloth-runner-new","title":"<code>sloth-runner new</code>","text":"<p>Generates a new boilerplate Lua task definition file from a template.</p> <p>Usage: <pre><code>sloth-runner new &lt;group-name&gt; [flags]\n</code></pre></p> <p>Arguments:</p> <ul> <li><code>&lt;group-name&gt;</code>: The name of the main task group to be created in the file.</li> </ul> <p>Flags:</p> <ul> <li><code>-t, --template string</code>: The template to use. Default is <code>simple</code>. Run <code>sloth-runner template list</code> to see all available options.</li> <li><code>-o, --output string</code>: The path to the output file. If not provided, the generated content will be printed to stdout.</li> </ul> <pre><code>sloth-runner list [flags]\n</code></pre>"},{"location":"en/CLI/#flags_3","title":"Flags","text":"Flag Type Description <code>-f, --file</code> string Path to workflow file"},{"location":"en/CLI/#output","title":"Output","text":"<ul> <li>Task groups</li> <li>Task names</li> <li>Descriptions</li> <li>Dependencies</li> <li>Conditions</li> </ul>"},{"location":"en/CLI/#example","title":"Example","text":"<pre><code>sloth-runner list -f deploy.sloth\n</code></pre>"},{"location":"en/CLI/#sloth-runner-version","title":"<code>sloth-runner version</code>","text":"<p>Display version and build information.</p>"},{"location":"en/CLI/#usage_4","title":"Usage","text":"<pre><code>sloth-runner version\n</code></pre>"},{"location":"en/CLI/#output_1","title":"Output","text":"<ul> <li>Version number</li> <li>Git commit hash</li> <li>Build date</li> <li>Go version</li> </ul>"},{"location":"en/CLI/#global-flags","title":"Global Flags","text":"<p>Available for all commands:</p> Flag Description <code>-h, --help</code> Show command help <code>--debug</code> Enable debug output <code>--config string</code> Config file path (default: <code>~/.sloth-runner/config.yaml</code>)"},{"location":"en/CLI/#configuration-file","title":"Configuration File","text":"<p>Sloth Runner supports configuration via <code>~/.sloth-runner/config.yaml</code>:</p> <pre><code># Master server settings\nmaster:\n  host: localhost\n  port: 50053\n\n# Agent settings\nagent:\n  name: my-agent\n  tags:\n    - linux\n    - docker\n  reconnect: true\n\n# UI settings\nui:\n  port: 8080\n  theme: dark\n\n# Scheduler settings\nscheduler:\n  enabled: true\n  timezone: UTC\n</code></pre>"},{"location":"en/CLI/#environment-variables","title":"Environment Variables","text":"<p>Override configuration with environment variables:</p> Variable Description <code>SLOTH_MASTER_HOST</code> Master server host <code>SLOTH_MASTER_PORT</code> Master server port <code>SLOTH_AGENT_NAME</code> Agent identifier <code>SLOTH_UI_PORT</code> UI server port <code>SLOTH_DEBUG</code> Enable debug mode"},{"location":"en/CLI/#exit-codes","title":"Exit Codes","text":"Code Meaning <code>0</code> Success <code>1</code> General error <code>2</code> Task execution failed <code>3</code> Configuration error <code>4</code> Network/connection error <code>5</code> State management error"},{"location":"en/CLI/#examples_3","title":"Examples","text":""},{"location":"en/CLI/#complete-cicd-pipeline","title":"Complete CI/CD Pipeline","text":"<pre><code># Initialize project\nsloth-runner workflow init my-app --template cicd\n\n# Run tests\nsloth-runner run -f my-app/.sloth/test.sloth -o rich\n\n# Deploy to staging\nsloth-runner run staging-stack --yes\n\n# Check agent status\nsloth-runner agent list --master ci-master:50053\n\n# Schedule nightly builds\nsloth-runner scheduler add nightly-build \\\n  --cron \"0 0 * * *\" \\\n  --workflow build.sloth\n</code></pre>"},{"location":"en/CLI/#infrastructure-automation","title":"Infrastructure Automation","text":"<pre><code># Create infrastructure stack\nsloth-runner stack new prod-infra -f infrastructure.sloth\n\n# Apply with modern output\nsloth-runner run prod-infra -o modern\n\n# Show stack state\nsloth-runner stack show prod-infra\n\n# Teardown\nsloth-runner stack delete prod-infra --force\n</code></pre>"},{"location":"en/CLI/#distributed-task-execution","title":"Distributed Task Execution","text":"<pre><code># Start master server\nsloth-runner master --port 50053 --daemon\n\n# Start agents on different servers\nsloth-runner agent start --master master:50053 --name web-1 --tags web,nginx\nsloth-runner agent start --master master:50053 --name db-1 --tags database,postgres\n\n# Execute on specific agent\nsloth-runner agent run --agent web-1 --command \"systemctl status nginx\"\n\n# Start UI for monitoring\nsloth-runner ui --port 8080\n</code></pre>"},{"location":"en/CLI/#best-practices","title":"Best Practices","text":""},{"location":"en/CLI/#1-use-stacks-for-state-management","title":"1. Use Stacks for State Management","text":"<pre><code># Don't: Run without state\nsloth-runner run -f deploy.sloth\n\n# Do: Use stacks for persistence\nsloth-runner stack new prod\nsloth-runner run prod\n</code></pre>"},{"location":"en/CLI/#2-specify-output-format-for-cicd","title":"2. Specify Output Format for CI/CD","text":"<pre><code># JSON for parsing\nsloth-runner run -f ci.sloth -o json &gt; results.json\n\n# Rich for interactive\nsloth-runner run -f deploy.sloth -o rich\n</code></pre>"},{"location":"en/CLI/#3-use-values-files-for-environments","title":"3. Use Values Files for Environments","text":"<pre><code># Development\nsloth-runner run -f app.sloth -v dev-values.yaml\n\n# Production\nsloth-runner run -f app.sloth -v prod-values.yaml\n</code></pre>"},{"location":"en/CLI/#4-tag-agents-appropriately","title":"4. Tag Agents Appropriately","text":"<pre><code># Specific capabilities\nsloth-runner agent start --tags \"linux,docker,aws,x86_64\"\n\n# Environment-based\nsloth-runner agent start --tags \"prod,us-east-1\"\n</code></pre>"},{"location":"en/CLI/#troubleshooting","title":"Troubleshooting","text":""},{"location":"en/CLI/#connection-issues","title":"Connection Issues","text":"<pre><code># Test master connectivity\ncurl http://master:50053/health\n\n# Check agent logs\nsloth-runner agent start --debug\n</code></pre>"},{"location":"en/CLI/#task-execution-failures","title":"Task Execution Failures","text":"<pre><code># Run with debug output\nsloth-runner run -f task.sloth --debug\n\n# Interactive mode for troubleshooting\nsloth-runner run -f task.sloth --interactive\n</code></pre>"},{"location":"en/CLI/#state-issues","title":"State Issues","text":"<pre><code># View stack state\nsloth-runner stack show my-stack\n\n# Reset stack (careful!)\nsloth-runner stack delete my-stack\nsloth-runner stack new my-stack -f workflow.sloth\n</code></pre>"},{"location":"en/CLI/#related-documentation","title":"Related Documentation","text":"<ul> <li>Getting Started</li> <li>Core Concepts</li> <li>Agent Architecture</li> <li>Scheduler Guide</li> <li>Web Dashboard</li> <li>Stack Management</li> </ul>"},{"location":"en/CLI/#see-also","title":"See Also","text":"<ul> <li>REPL Interactive Shell</li> <li>Modern DSL Syntax</li> <li>Module Reference</li> <li>Examples Repository</li> </ul> <p>Need more help? Run <code>sloth-runner [command] --help</code> for detailed information about any command.</p>"},{"location":"en/CLI/#sloth-runner-version_1","title":"<code>sloth-runner version</code>","text":"<p>Displays the current version of <code>sloth-runner</code>.</p> <pre><code>sloth-runner version\n</code></pre>"},{"location":"en/CLI/#sloth-runner-scheduler_1","title":"<code>sloth-runner scheduler</code>","text":"<p>Manages the <code>sloth-runner</code> task scheduler, allowing you to enable, disable, list, and delete scheduled tasks.</p> <p>For detailed information on scheduler commands and configuration, refer to the Task Scheduler documentation.</p> <p>Subcommands:</p> <ul> <li><code>sloth-runner scheduler enable</code>: Starts the scheduler as a background process.</li> <li><code>sloth-runner scheduler disable</code>: Stops the running scheduler process.</li> <li><code>sloth-runner scheduler list</code>: Lists all configured scheduled tasks.</li> <li><code>sloth-runner scheduler delete &lt;task_name&gt;</code>: Deletes a specific scheduled task.</li> </ul>"},{"location":"en/advanced-examples/","title":"Advanced Examples","text":"<p>This section presents more complex examples and use cases that combine multiple Sloth-Runner modules for end-to-end automation.</p>"},{"location":"en/advanced-examples/#full-example-end-to-end-cicd-pipeline","title":"Full Example: End-to-End CI/CD Pipeline","text":"<p>This tutorial demonstrates how to build a complete CI/CD pipeline using the <code>git</code>, <code>pulumi</code>, and <code>salt</code> modules to version code, provision infrastructure, and deploy an application.</p>"},{"location":"en/advanced-examples/#scenario","title":"Scenario","text":"<p>Imagine you have a Pulumi infrastructure project and an application project. You want to automate the following flow:</p> <ol> <li>Clone the infrastructure repository.</li> <li>Update a version file within the repository.</li> <li>Commit and push this change to Git.</li> <li>Execute <code>pulumi up</code> to provision or update the infrastructure (e.g., a staging environment).</li> <li>Use Salt to configure the provisioned servers and deploy the application.</li> </ol>"},{"location":"en/advanced-examples/#lua-script-examplespulumi_git_combined_examplesloth","title":"Lua Script (<code>examples/pulumi_git_combined_example.sloth</code>)","text":"<pre><code>-- examples/pulumi_git_combined_example.sloth\n\ncommand = function(params)\n    log.info(\"Starting combined Pulumi and Git example...\")\n\n    local pulumi_repo_url = \"https://github.com/my-org/my-pulumi-infra.git\" -- Example Pulumi repo\n    local pulumi_repo_path = \"./pulumi-infra-checkout\"\n    local new_infra_version = params.infra_version or \"v1.0.0-infra\"\n    local pulumi_project_workdir = pulumi_repo_path .. \"/my-vpc-project\" -- Subdirectory within the cloned repo\n    local repo\n\n    -- 1. Clone or open the Pulumi repository\n    log.info(\"Step 1: Cloning or opening Pulumi repository...\")\n    if not fs.exists(pulumi_repo_path) then\n        log.info(\"Cloning Pulumi repository: \" .. pulumi_repo_url)\n        local cloned_repo, clone_err = git.clone(pulumi_repo_url, pulumi_repo_path)\n        if clone_err then\n            log.error(\"Failed to clone Pulumi repository: \" .. clone_err)\n            return false, \"Git clone failed.\"\n        end\n        repo = cloned_repo\n    else\n        log.info(\"Pulumi repository already exists, opening local reference.\")\n        local opened_repo, open_err = git.repo(pulumi_repo_path)\n        if open_err then\n            log.error(\"Failed to open Pulumi repository: \" .. open_err)\n            return false, \"Git repo open failed.\"\n        end\n        repo = opened_repo\n    end\n\n    if not repo then\n        return false, \"Failed to get Pulumi repository reference.\"\n    end\n\n    -- 2. Update the repository (pull)\n    log.info(\"Step 2: Pulling latest changes from Pulumi repository...\")\n    repo:checkout(\"main\"):pull(\"origin\", \"main\")\n    local pull_result = repo:result()\n    if not pull_result.success then\n        log.error(\"Failed to pull Pulumi repository: \" .. pull_result.stderr)\n        return false, \"Git pull failed.\"\n    end\n    log.info(\"Pulumi repository updated. Stdout: \" .. pull_result.stdout)\n\n    -- 3. Simulate a change in the Pulumi code (e.g., update a version file)\n    log.info(\"Step 3: Simulating a change in Pulumi code (updating version file)...\")\n    local infra_version_file = pulumi_repo_path .. \"/INFRA_VERSION\"\n    fs.write(infra_version_file, new_infra_version)\n    log.info(\"Updated INFRA_VERSION file to: \" .. new_infra_version)\n\n    -- 4. Commit and push the changes\n    log.info(\"Step 4: Committing and pushing infrastructure version change...\")\n    local commit_message = \"ci: Bump infrastructure version to \" .. new_infra_version\n    repo:add(infra_version_file)\n        :commit(commit_message)\n        :push(\"origin\", \"main\") -- No follow_tags here, just the commit\n\n    local push_result = repo:result()\n    if not push_result.success then\n        log.error(\"Failed to push infrastructure changes: \" .. push_result.stderr)\n        return false, \"Git push failed for infra changes.\"\n    end\n    log.info(\"Infrastructure version change pushed. Stdout: \" .. push_result.stdout)\n\n    -- 5. Execute 'pulumi up' for the project\n    log.info(\"Step 5: Running pulumi up for the infrastructure project...\")\n    local infra_stack = pulumi.stack(\"my-org/my-infra/dev\", {\n        workdir = pulumi_project_workdir -- Use the subdirectory of the Pulumi project\n    })\n\n    local pulumi_up_result = infra_stack:up({ non_interactive = true })\n\n    if not pulumi_up_result.success then\n        log.error(\"Pulumi up failed: \" .. pulumi_up_result.stderr)\n        return false, \"Pulumi up failed.\"\n    end\n    log.info(\"Pulumi up completed successfully. Stdout: \" .. pulumi_up_result.stdout)\n\n    -- 6. Configure and deploy application using Salt (Example)\n    log.info(\"Step 6: Configuring and deploying application using Salt...\")\n    -- Assuming Pulumi up provided the server IP or hostname\n    -- For this example, we'll use a fictitious IP\n    local server_ip = \"192.168.1.100\" -- Replace with actual output from Pulumi, if any\n    local salt_target = salt.target(server_ip)\n\n    log.info(\"Running Salt test.ping on \" .. server_ip .. \"...\")\n    salt_target:ping()\n    local ping_result = salt_target:result()\n    if not ping_result.success then\n        log.error(\"Salt ping failed for \" .. server_ip .. \": \" .. ping_result.stderr)\n        return false, \"Salt ping failed.\"\n    end\n    log.info(\"Salt ping successful. Stdout: \" .. data.to_json(ping_result.stdout)) -- Assuming ping returns JSON\n\n    log.info(\"Applying Salt state 'app.install' on \" .. server_ip .. \"...\")\n    salt_target:cmd('state.apply', 'app.install')\n    local salt_apply_result = salt_target:result()\n    if not salt_apply_result.success then\n        log.error(\"Salt state.apply failed for \" .. server_ip .. \": \" .. salt_apply_result.stderr)\n        return false, \"Salt state.apply failed.\"\n    end\n    log.info(\"Salt state.apply successful. Stdout: \" .. data.to_json(salt_apply_result.stdout))\n\n    log.info(\"Combined Pulumi and Git example finished successfully.\")\n    return true, \"Combined Pulumi and Git example finished.\"\nend\n\nModern DSLs = {\n    pulumi_git_combined_example = {\n        description = \"Demonstrates combined usage of 'pulumi' and 'git' modules for CI/CD pipeline.\",\n        tasks = {\n            {\n                name = \"run_combined_example\",\n                command = command,\n                params = {\n                    infra_version = \"v1.0.0-test-combined\"\n                }\n            }\n        }\n    }\n}\n</code></pre> <p>English | Portugu\u00eas | \u4e2d\u6587</p>"},{"location":"en/advanced-features/","title":"\ud83c\udfaf Advanced Features","text":"<p>Sloth Runner provides powerful advanced features for enterprise deployments.</p>"},{"location":"en/advanced-features/#available-features","title":"Available Features","text":""},{"location":"en/advanced-features/#ai-integration","title":"\ud83e\udd16 AI Integration","text":"<p>Learn more: AI Integration</p>"},{"location":"en/advanced-features/#distributed-execution","title":"\ud83c\udf10 Distributed Execution","text":"<p>Learn more: Distributed Agents</p>"},{"location":"en/advanced-features/#web-dashboard","title":"\ud83d\udcca Web Dashboard","text":"<p>Learn more: Web Dashboard</p>"},{"location":"en/advanced-features/#advanced-scheduling","title":"\u23f0 Advanced Scheduling","text":"<p>Learn more: Advanced Scheduler</p>"},{"location":"en/advanced-features/#multi-cloud-support","title":"\u2601\ufe0f Multi-Cloud Support","text":"<p>Learn more: Multi-Cloud Excellence</p>"},{"location":"en/advanced-features/#stack-management","title":"\ud83d\uddc2\ufe0f Stack Management","text":"<p>Learn more: Stack Management</p>"},{"location":"en/advanced-features/#getting-started","title":"Getting Started","text":"<p>See Getting Started Guide for installation instructions.</p>"},{"location":"en/advanced-features/#examples","title":"Examples","text":"<p>Check out Advanced Examples for practical use cases.</p>"},{"location":"en/agent-improvements/","title":"\ud83d\ude80 Agent Improvements &amp; Future Enhancements","text":"<p>This document outlines the comprehensive improvements and new features that transform sloth-runner from a basic distributed execution system into an enterprise-grade orchestration platform.</p>"},{"location":"en/agent-improvements/#current-implementation-status","title":"\ud83d\udcca Current Implementation Status","text":""},{"location":"en/agent-improvements/#implemented-features","title":"\u2705 Implemented Features","text":""},{"location":"en/agent-improvements/#1-state-management-persistence-implemented","title":"1. \ud83d\udd04 State Management &amp; Persistence Implemented","text":"<ul> <li>SQLite-based persistent state with WAL mode</li> <li>47 Lua functions for comprehensive state management</li> <li>Atomic operations (increment, compare-and-swap, append)</li> <li>Distributed locks with automatic timeout handling</li> <li>TTL support with automatic expiration</li> <li>Pattern matching for bulk operations</li> </ul>"},{"location":"en/agent-improvements/#2-advanced-metrics-system-implemented","title":"2. \ud83d\udcca Advanced Metrics System Implemented","text":"<ul> <li>System metrics collection (CPU, memory, disk, network)</li> <li>Custom metrics (gauges, counters, histograms, timers)</li> <li>Automatic health checks with configurable thresholds</li> <li>Prometheus-compatible HTTP endpoints</li> <li>26 Lua functions for monitoring and alerting</li> </ul>"},{"location":"en/agent-improvements/#high-priority-improvements-planned","title":"\ud83c\udfaf High Priority Improvements Planned","text":""},{"location":"en/agent-improvements/#1-web-dashboard-real-time-monitoring","title":"1. \ud83d\udcf1 Web Dashboard &amp; Real-time Monitoring","text":"<pre><code>interface AgentDashboard {\n    realTimeMetrics: LiveMetricsDisplay;\n    taskExecution: TaskMonitor;\n    logStreaming: LogViewer;\n    healthStatus: HealthDashboard;\n    configManager: ConfigEditor;\n    alertCenter: AlertManager;\n}\n</code></pre> <p>Features: - Real-time metrics visualization with interactive charts - Live log streaming with filtering and search - Task execution monitoring with progress tracking - Health status overview with drill-down capabilities - Configuration management with validation - Alert management with notification routing</p> <p>Benefits: - Immediate visibility into system performance - Reduced time to identify and resolve issues - Enhanced user experience for operations teams - Centralized control and monitoring</p>"},{"location":"en/agent-improvements/#2-intelligent-resource-management","title":"2. \ud83c\udf9b\ufe0f Intelligent Resource Management","text":"<pre><code>type ResourceController struct {\n    CPULimits        ResourceLimits    `json:\"cpu_limits\"`\n    MemoryLimits     ResourceLimits    `json:\"memory_limits\"`\n    DiskIOLimits     ResourceLimits    `json:\"disk_limits\"`\n    NetworkLimits    ResourceLimits    `json:\"network_limits\"`\n    QueueManagement  QueueConfig       `json:\"queue_config\"`\n    LoadBalancer     LoadBalancerConfig `json:\"load_balancer\"`\n}\n\ntype ResourceLimits struct {\n    MaxUsagePercent  float64 `json:\"max_usage\"`\n    WarningThreshold float64 `json:\"warning_threshold\"`\n    ActionOnExceed   string  `json:\"action_on_exceed\"`\n    MonitoringWindow string  `json:\"monitoring_window\"`\n}\n</code></pre> <p>Capabilities: - Dynamic resource allocation based on current load - Task prioritization with queue management - Automatic scaling when resource thresholds are exceeded - Resource isolation using cgroups or containers - Predictive scaling using historical data</p>"},{"location":"en/agent-improvements/#3-advanced-load-balancing-task-distribution","title":"3. \ud83d\udd04 Advanced Load Balancing &amp; Task Distribution","text":"<pre><code>-- Intelligent load balancing in Lua\nlocal best_agent = load_balancer.select_agent({\n    strategy = \"weighted_round_robin\",\n    criteria = {\n        cpu_weight = 0.4,\n        memory_weight = 0.3,\n        network_weight = 0.2,\n        queue_weight = 0.1\n    },\n    constraints = {\n        max_cpu_percent = 80,\n        max_memory_percent = 85,\n        max_queue_size = 50\n    },\n    affinity = {\n        tags = {\"gpu\", \"ssd\"},\n        region = \"us-east-1\"\n    }\n})\n</code></pre> <p>Strategies: - Weighted round-robin based on system metrics - Least connections for even distribution - Resource-aware routing based on requirements - Affinity-based assignment for specialized tasks - Failure-aware routing with automatic failover</p>"},{"location":"en/agent-improvements/#4-advanced-health-monitoring","title":"4. \ud83c\udfe5 Advanced Health Monitoring","text":"<pre><code>type HealthChecker struct {\n    SystemChecks     []SystemHealthCheck     `json:\"system_checks\"`\n    ServiceChecks    []ServiceHealthCheck    `json:\"service_checks\"`\n    CustomChecks     []CustomHealthCheck     `json:\"custom_checks\"`\n    AlertRules       []HealthAlertRule       `json:\"alert_rules\"`\n    RecoveryActions  []RecoveryAction        `json:\"recovery_actions\"`\n}\n\ntype HealthCheck struct {\n    Name             string        `json:\"name\"`\n    Type             string        `json:\"type\"`\n    Interval         time.Duration `json:\"interval\"`\n    Timeout          time.Duration `json:\"timeout\"`\n    SuccessThreshold int           `json:\"success_threshold\"`\n    FailureThreshold int           `json:\"failure_threshold\"`\n    Command          string        `json:\"command,omitempty\"`\n    HTTPEndpoint     string        `json:\"http_endpoint,omitempty\"`\n}\n</code></pre> <p>Health Check Types: - System checks: CPU, memory, disk, network connectivity - Service checks: Database connectivity, API endpoints - Custom script checks: Application-specific validations - Dependency checks: External service availability - Performance checks: Response time, throughput</p>"},{"location":"en/agent-improvements/#medium-priority-enhancements-planned","title":"\ud83d\udd27 Medium Priority Enhancements Planned","text":""},{"location":"en/agent-improvements/#5-plugin-architecture-extensibility","title":"5. \ud83d\udd0c Plugin Architecture &amp; Extensibility","text":"<pre><code>type Plugin interface {\n    Name() string\n    Version() string\n    Description() string\n\n    Initialize(config PluginConfig) error\n    Execute(ctx context.Context, params PluginParams) (*PluginResult, error)\n    HealthCheck() (*PluginHealth, error)\n    Cleanup() error\n}\n\ntype PluginManager struct {\n    LoadedPlugins    map[string]Plugin      `json:\"loaded_plugins\"`\n    PluginConfigs    map[string]PluginConfig `json:\"plugin_configs\"`\n    PluginRegistry   PluginRegistry         `json:\"plugin_registry\"`\n    HookManager      HookManager            `json:\"hook_manager\"`\n}\n</code></pre> <p>Plugin Categories: - Infrastructure: Docker, Kubernetes, Terraform, Ansible - Cloud Providers: AWS, GCP, Azure, DigitalOcean enhanced - Databases: PostgreSQL, MySQL, Redis, MongoDB - Monitoring: Prometheus, Grafana, Datadog, New Relic - Notifications: Slack, Email, PagerDuty, Discord - Security: Vault, SOPS, certificate management</p>"},{"location":"en/agent-improvements/#6-enterprise-security-features","title":"6. \ud83d\udd12 Enterprise Security Features","text":"<pre><code>type SecurityConfig struct {\n    Authentication   AuthenticationConfig  `json:\"authentication\"`\n    Authorization    AuthorizationConfig   `json:\"authorization\"`\n    Encryption       EncryptionConfig      `json:\"encryption\"`\n    Audit           AuditConfig           `json:\"audit\"`\n    Compliance      ComplianceConfig      `json:\"compliance\"`\n}\n\ntype AuthenticationConfig struct {\n    Method          string        `json:\"method\"` // \"jwt\", \"oauth2\", \"mtls\", \"ldap\"\n    TokenTTL        time.Duration `json:\"token_ttl\"`\n    RefreshEnabled  bool          `json:\"refresh_enabled\"`\n    MFARequired     bool          `json:\"mfa_required\"`\n    SessionTimeout  time.Duration `json:\"session_timeout\"`\n}\n</code></pre> <p>Security Features: - mTLS authentication with automatic certificate rotation - RBAC (Role-Based Access Control) with fine-grained permissions - Audit logging of all actions with tamper-proof storage - Secret management integration with Vault/SOPS - Network policies and firewall rules - Compliance scanning (SOC2, PCI-DSS, HIPAA)</p>"},{"location":"en/agent-improvements/#7-advanced-caching-data-management","title":"7. \ud83d\udcbe Advanced Caching &amp; Data Management","text":"<pre><code>-- Enhanced caching with multiple backends\ncache.configure({\n    default_backend = \"redis\",\n    backends = {\n        redis = {\n            endpoints = {\"redis:6379\"},\n            cluster_mode = true,\n            password = secret(\"redis-password\")\n        },\n        memory = {\n            max_size_mb = 512,\n            eviction_policy = \"lru\"\n        },\n        disk = {\n            directory = \"/var/cache/sloth-runner\",\n            max_size_gb = 10,\n            compression = true\n        }\n    },\n    policies = {\n        artifacts = {backend = \"disk\", ttl = \"24h\"},\n        config = {backend = \"memory\", ttl = \"5m\"},\n        metrics = {backend = \"redis\", ttl = \"1h\"}\n    }\n})\n</code></pre>"},{"location":"en/agent-improvements/#advanced-features-beta","title":"\ud83c\udfa8 Advanced Features Beta","text":""},{"location":"en/agent-improvements/#8-ai-powered-optimization","title":"8. \ud83e\udd16 AI-Powered Optimization","text":"<pre><code>type AIAssistant struct {\n    PredictiveScaling      bool            `json:\"predictive_scaling\"`\n    AnomalyDetection      bool            `json:\"anomaly_detection\"`\n    PerformanceOptimization bool          `json:\"performance_optimization\"`\n    CapacityPlanning      bool            `json:\"capacity_planning\"`\n    AutoRemediation       bool            `json:\"auto_remediation\"`\n    CostOptimization      bool            `json:\"cost_optimization\"`\n}\n</code></pre> <p>AI Capabilities: - Predictive scaling based on historical patterns - Anomaly detection in metrics and behavior - Performance optimization recommendations - Capacity planning with growth projections - Automated remediation of common issues - Cost optimization suggestions</p>"},{"location":"en/agent-improvements/#9-advanced-workflow-engine","title":"9. \ud83c\udf10 Advanced Workflow Engine","text":"<pre><code>-- Visual workflow definition\nWorkflow = {\n    name = \"advanced_deployment_pipeline\",\n    description = \"Multi-stage deployment with rollback capabilities\",\n\n    stages = {\n        {\n            name = \"build_and_test\",\n            parallel = true,\n            tasks = {\n                {name = \"unit_tests\", timeout = \"10m\"},\n                {name = \"integration_tests\", timeout = \"15m\"},\n                {name = \"security_scan\", timeout = \"20m\"}\n            },\n            on_failure = \"abort\"\n        },\n        {\n            name = \"staging_deployment\",\n            condition = \"previous_stage_success\",\n            tasks = {\n                {name = \"deploy_staging\", agent_selector = \"staging_cluster\"},\n                {name = \"smoke_tests\", depends_on = \"deploy_staging\"}\n            },\n            approval_required = true,\n            approvers = [\"ops-team\", \"qa-team\"]\n        },\n        {\n            name = \"production_deployment\",\n            strategy = \"canary\",\n            rollback_trigger = {\n                error_rate = \"&gt; 5%\",\n                response_time = \"&gt; 1s\"\n            },\n            tasks = {\n                {name = \"deploy_canary\", percentage = 10},\n                {name = \"monitor_canary\", duration = \"10m\"},\n                {name = \"deploy_full\", condition = \"canary_success\"}\n            }\n        }\n    },\n\n    rollback = {\n        strategy = \"automatic\",\n        triggers = [\"error_threshold\", \"manual\"],\n        preserve_data = true\n    }\n}\n</code></pre>"},{"location":"en/agent-improvements/#10-multi-cloud-hybrid-support","title":"10. \ud83c\udf0d Multi-Cloud &amp; Hybrid Support","text":"<pre><code># Multi-cloud configuration\ncloud_providers:\n  aws:\n    regions: [\"us-east-1\", \"us-west-2\", \"eu-west-1\"]\n    services: [\"ecs\", \"fargate\", \"lambda\"]\n    cost_optimization: true\n\n  gcp:\n    regions: [\"us-central1\", \"europe-west1\"]\n    services: [\"gke\", \"cloud-run\", \"cloud-functions\"]\n\n  azure:\n    regions: [\"eastus\", \"westeurope\"]\n    services: [\"aci\", \"functions\"]\n\n  on_premises:\n    datacenters: [\"dc1\", \"dc2\"]\n    kubernetes_clusters: [\"prod\", \"staging\"]\n\ndeployment_strategy:\n  primary_cloud: \"aws\"\n  failover_cloud: \"gcp\"\n  cost_optimization: true\n  data_residency: \"eu-west-1\"\n  disaster_recovery: \"cross-cloud\"\n</code></pre>"},{"location":"en/agent-improvements/#implementation-roadmap","title":"\ud83d\udcca Implementation Roadmap","text":""},{"location":"en/agent-improvements/#phase-1-foundation-q1-2024-completed","title":"Phase 1: Foundation (Q1 2024) Completed","text":"<ul> <li>\u2705 State Management Module</li> <li>\u2705 Advanced Metrics System</li> <li>\u2705 Enhanced Documentation</li> </ul>"},{"location":"en/agent-improvements/#phase-2-core-improvements-q2-2024","title":"Phase 2: Core Improvements (Q2 2024)","text":"<ul> <li>\ud83d\udd04 Web Dashboard Development</li> <li>\ud83d\udd04 Resource Management Implementation</li> <li>\ud83d\udd04 Advanced Health Monitoring</li> </ul>"},{"location":"en/agent-improvements/#phase-3-platform-enhancement-q3-2024","title":"Phase 3: Platform Enhancement (Q3 2024)","text":"<ul> <li>\ud83d\udcc5 Plugin Architecture</li> <li>\ud83d\udcc5 Security Features</li> <li>\ud83d\udcc5 Load Balancing Improvements</li> </ul>"},{"location":"en/agent-improvements/#phase-4-intelligence-scale-q4-2024","title":"Phase 4: Intelligence &amp; Scale (Q4 2024)","text":"<ul> <li>\ud83d\udcc5 AI-Powered Features</li> <li>\ud83d\udcc5 Advanced Workflow Engine</li> <li>\ud83d\udcc5 Multi-Cloud Support</li> </ul>"},{"location":"en/agent-improvements/#expected-benefits","title":"\ud83c\udfaf Expected Benefits","text":""},{"location":"en/agent-improvements/#operational-excellence","title":"Operational Excellence","text":"<ul> <li>99.9% uptime with automatic failover</li> <li>50% reduction in manual operations</li> <li>Real-time visibility into all systems</li> <li>Automated remediation of common issues</li> </ul>"},{"location":"en/agent-improvements/#performance-scalability","title":"Performance &amp; Scalability","text":"<ul> <li>10x better resource utilization</li> <li>Sub-second task scheduling</li> <li>Linear scaling up to 10,000 agents</li> <li>Predictive capacity planning</li> </ul>"},{"location":"en/agent-improvements/#developer-experience","title":"Developer Experience","text":"<ul> <li>Visual workflow designer</li> <li>Integrated debugging tools</li> <li>Comprehensive API documentation</li> <li>Plugin ecosystem</li> </ul>"},{"location":"en/agent-improvements/#enterprise-features","title":"Enterprise Features","text":"<ul> <li>SOC2 compliance ready</li> <li>Multi-tenant isolation</li> <li>Audit trail for all operations</li> <li>Cost optimization recommendations</li> </ul>"},{"location":"en/agent-improvements/#competitive-advantage","title":"\ud83d\udcc8 Competitive Advantage","text":"Feature Sloth Runner Enhanced Jenkins GitLab CI GitHub Actions Airflow Lua Scripting \u2705 Native \u274c \u274c \u274c \u2705 Python State Management \u2705 Built-in \ud83d\udd0c Plugins \u274c \u274c \u2705 Database Real-time Metrics \u2705 Native \ud83d\udd0c Plugins \u26a0\ufe0f Basic \u26a0\ufe0f Basic \u2705 Native Distributed Agents \u2705 Native \u2705 Master/Slave \u2705 Runners \u2601\ufe0f Cloud \u2705 Celery AI Optimization \u2705 Built-in \u274c \u274c \u274c \ud83d\udd0c Plugins Multi-Cloud \u2705 Native \ud83d\udd0c Plugins \ud83d\udd0c Plugins \u2601\ufe0f Limited \ud83d\udd0c Plugins Visual Workflows \u2705 Built-in \ud83d\udd0c Plugins \u2705 Native \u2705 YAML \u2705 Native Enterprise Security \u2705 Built-in \ud83d\udd0c Plugins \u2705 Native \u2705 Native \u26a0\ufe0f Basic"},{"location":"en/agent-improvements/#getting-started-with-improvements","title":"\ud83d\ude80 Getting Started with Improvements","text":""},{"location":"en/agent-improvements/#enable-advanced-features","title":"Enable Advanced Features","text":"<pre><code># Enable metrics collection on agents\nsloth-runner agent start --metrics-port 8080 --health-checks\n\n# Start with enhanced monitoring\nsloth-runner master --dashboard-port 3000 --metrics-enabled\n\n# Configure advanced features\nsloth-runner config set features.ai_optimization=true\nsloth-runner config set features.predictive_scaling=true\n</code></pre>"},{"location":"en/agent-improvements/#monitor-implementation-progress","title":"Monitor Implementation Progress","text":"<pre><code>-- Check feature availability\nlocal features = system.available_features()\nfor feature, status in pairs(features) do\n    log.info(feature .. \": \" .. status)\nend\n\n-- Enable beta features\nsystem.enable_beta_features({\"workflow_engine\", \"ai_assistant\"})\n</code></pre>"},{"location":"en/agent-improvements/#additional-resources","title":"\ud83d\udcda Additional Resources","text":"<ul> <li>\ud83d\udcd6 State Management Guide</li> <li>\ud83d\udcca Metrics &amp; Monitoring Guide</li> <li>\ud83d\udd27 Plugin Development Guide</li> <li>\ud83c\udfd7\ufe0f Architecture Deep Dive</li> <li>\ud83d\ude80 Quick Start Tutorial</li> </ul> <p>The transformation of sloth-runner into an enterprise-grade orchestration platform represents a significant leap in capabilities, positioning it as a modern alternative to traditional CI/CD and workflow tools while maintaining the unique advantages of Lua scripting and distributed architecture! \ud83d\ude80</p>"},{"location":"en/ai-features/","title":"\ud83e\udd16 Intelligent Automation &amp; Analytics","text":"<p>Advanced Task Automation with Smart Analytics Sloth Runner provides intelligent automation features including predictive analytics, optimization algorithms, and adaptive workflows for modern infrastructure management.</p>"},{"location":"en/ai-features/#smart-automation-overview","title":"\ud83e\udde0 Smart Automation Overview","text":"<p>The intelligent automation features in Sloth Runner help optimize your workflows through data-driven insights, predictive analytics, and adaptive execution patterns.</p>"},{"location":"en/ai-features/#intelligent-features","title":"\u2728 Intelligent Features","text":""},{"location":"en/ai-features/#predictive-analytics","title":"\ud83d\udcca Predictive Analytics","text":"<ul> <li>Performance Prediction: Analyze historical data to predict system performance</li> <li>Failure Detection: Early warning system for potential task failures</li> <li>Resource Optimization: Predict and optimize resource usage patterns</li> <li>Trend Analysis: Identify patterns in workflow execution and performance</li> </ul>"},{"location":"en/ai-features/#adaptive-optimization","title":"\ud83c\udfaf Adaptive Optimization","text":"<ul> <li>Dynamic Resource Allocation: Automatically adjust resources based on demand</li> <li>Intelligent Retry Strategies: Adaptive retry patterns based on failure types</li> <li>Load Balancing Optimization: Smart distribution of tasks across agents</li> <li>Performance Tuning: Automatic optimization of task execution parameters</li> </ul>"},{"location":"en/ai-features/#self-healing-workflows","title":"\ud83d\udd04 Self-Healing Workflows","text":"<ul> <li>Automatic Recovery: Detect and recover from common failure scenarios</li> <li>Circuit Breaker Patterns: Prevent cascade failures with intelligent circuit breakers</li> <li>Health Monitoring: Continuous monitoring with automatic remediation</li> <li>Rollback Strategies: Intelligent rollback based on health metrics</li> </ul>"},{"location":"en/ai-features/#learning-adaptation","title":"\ud83d\udcc8 Learning &amp; Adaptation","text":"<ul> <li>Execution Pattern Learning: Learn from past executions to improve future runs</li> <li>Anomaly Detection: Identify unusual patterns in workflow execution</li> <li>Performance Baselines: Establish and monitor performance baselines</li> <li>Continuous Improvement: Automatically suggest workflow optimizations</li> </ul>"},{"location":"en/ai-features/#getting-started-with-intelligent-features","title":"\ud83d\ude80 Getting Started with Intelligent Features","text":""},{"location":"en/ai-features/#enable-predictive-analytics","title":"Enable Predictive Analytics","text":"<pre><code>local analytics = require(\"analytics\")\nlocal optimization = require(\"optimization\")\n\n-- Enable predictive analytics for a workflow\nworkflow.define(\"intelligent_deployment\", {\n    analytics_enabled = true,\n    optimization_level = \"aggressive\",\n\n    tasks = {\n        task(\"performance_analysis\")\n            :command(function()\n                -- Analyze historical performance data\n                local prediction = analytics.predict_performance({\n                    metric = \"deployment_time\",\n                    lookback_days = 30,\n                    confidence_threshold = 0.8\n                })\n\n                if prediction.expected_duration &gt; 300 then\n                    log.warn(\"Deployment expected to take \" .. prediction.expected_duration .. \" seconds\")\n                    analytics.alert(\"long_deployment_predicted\", prediction)\n                end\n\n                return prediction\n            end)\n            :build(),\n\n        task(\"optimized_deployment\")\n            :depends_on({\"performance_analysis\"})\n            :command(function(params, deps)\n                local prediction = deps.performance_analysis\n\n                -- Optimize deployment based on predictions\n                local strategy = optimization.recommend_strategy({\n                    predicted_duration = prediction.expected_duration,\n                    available_resources = system.get_resources(),\n                    priority_level = params.priority or \"normal\"\n                })\n\n                return exec.run_optimized(\"kubectl apply -f production.yaml\", strategy)\n            end)\n            :build()\n    }\n})\n</code></pre>"},{"location":"en/ai-features/#adaptive-resource-management","title":"Adaptive Resource Management","text":"<pre><code>local adaptive = require(\"adaptive\")\nlocal monitoring = require(\"monitoring\")\n\n-- Self-adjusting resource allocation\nlocal adaptive_pipeline = task(\"adaptive_processing\")\n    :command(function(params, deps)\n        -- Monitor current system load\n        local system_load = monitoring.get_system_metrics()\n\n        -- Adapt execution strategy based on load\n        local strategy = adaptive.calculate_strategy({\n            cpu_usage = system_load.cpu_percent,\n            memory_usage = system_load.memory_percent,\n            network_load = system_load.network_throughput,\n            historical_data = analytics.get_historical_load(24) -- 24 hours\n        })\n\n        -- Execute with adaptive parameters\n        return exec.run_with_strategy(\"./heavy-processing-task.sh\", {\n            parallelism = strategy.recommended_parallelism,\n            memory_limit = strategy.memory_allocation,\n            timeout = strategy.estimated_timeout,\n            retry_strategy = strategy.retry_config\n        })\n    end)\n    :build()\n</code></pre>"},{"location":"en/ai-features/#intelligent-error-handling","title":"Intelligent Error Handling","text":"<pre><code>local recovery = require(\"recovery\")\nlocal patterns = require(\"patterns\")\n\n-- Self-healing workflow with intelligent recovery\nworkflow.define(\"resilient_pipeline\", {\n    error_recovery = \"intelligent\",\n    learning_enabled = true,\n\n    on_task_failure = function(task_name, error, context)\n        -- Analyze failure pattern\n        local failure_analysis = patterns.analyze_failure({\n            task = task_name,\n            error = error,\n            context = context,\n            historical_failures = analytics.get_failure_history(task_name, 90)\n        })\n\n        -- Determine recovery strategy\n        local recovery_plan = recovery.generate_plan(failure_analysis)\n\n        log.info(\"Failure detected in \" .. task_name .. \": \" .. error.message)\n        log.info(\"Recovery strategy: \" .. recovery_plan.strategy)\n\n        if recovery_plan.auto_recoverable then\n            -- Attempt automatic recovery\n            local recovery_result = recovery.execute_plan(recovery_plan)\n\n            if recovery_result.success then\n                log.info(\"\u2705 Automatic recovery successful\")\n                return \"retry\"\n            else\n                log.error(\"\u274c Automatic recovery failed: \" .. recovery_result.error)\n                return \"fail\"\n            end\n        else\n            -- Manual intervention required\n            recovery.request_manual_intervention({\n                task = task_name,\n                error = error,\n                suggested_actions = recovery_plan.manual_steps\n            })\n            return \"pause\"\n        end\n    end,\n\n    tasks = {\n        task(\"database_migration\")\n            :command(\"./migrate-database.sh\")\n            :retry_strategy(\"intelligent\")\n            :build(),\n\n        task(\"service_deployment\")\n            :command(\"kubectl rollout deployment myapp\")\n            :health_check(function()\n                return monitoring.check_service_health(\"myapp\")\n            end)\n            :rollback_on_failure(true)\n            :build()\n    }\n})\n</code></pre>"},{"location":"en/ai-features/#performance-optimization","title":"Performance Optimization","text":"<pre><code>local optimizer = require(\"optimizer\")\nlocal profiler = require(\"profiler\")\n\n-- Continuous performance optimization\nlocal optimization_task = task(\"performance_optimization\")\n    :command(function(params, deps)\n        -- Profile current performance\n        local profile = profiler.analyze_workflow_performance({\n            workflow_id = params.workflow_id,\n            time_window = \"7d\",\n            metrics = {\"execution_time\", \"resource_usage\", \"error_rate\"}\n        })\n\n        -- Generate optimization recommendations\n        local recommendations = optimizer.analyze_performance(profile)\n\n        log.info(\"Performance Analysis Complete:\")\n        log.info(\"Average execution time: \" .. profile.avg_execution_time .. \"s\")\n        log.info(\"Resource efficiency: \" .. profile.resource_efficiency .. \"%\")\n        log.info(\"Error rate: \" .. profile.error_rate .. \"%\")\n\n        -- Apply optimizations if confidence is high\n        for _, rec in ipairs(recommendations) do\n            if rec.confidence &gt; 0.8 and rec.impact == \"high\" then\n                log.info(\"Applying optimization: \" .. rec.description)\n                optimizer.apply_optimization(rec)\n            else\n                log.info(\"Optimization suggestion: \" .. rec.description .. \" (confidence: \" .. rec.confidence .. \")\")\n            end\n        end\n\n        return {\n            optimizations_applied = #recommendations,\n            expected_improvement = optimizer.calculate_improvement(recommendations)\n        }\n    end)\n    :schedule(\"daily\")\n    :build()\n</code></pre>"},{"location":"en/ai-features/#analytics-dashboard-integration","title":"\ud83d\udcca Analytics Dashboard Integration","text":""},{"location":"en/ai-features/#real-time-analytics","title":"Real-time Analytics","text":"<pre><code>local dashboard = require(\"dashboard\")\nlocal realtime = require(\"realtime\")\n\n-- Real-time analytics dashboard\ndashboard.create_panel(\"workflow_intelligence\", {\n    title = \"Intelligent Workflow Analytics\",\n    refresh_interval = \"30s\",\n\n    widgets = {\n        {\n            type = \"prediction_chart\",\n            title = \"Performance Predictions\",\n            data_source = function()\n                return analytics.get_predictions({\n                    metrics = {\"execution_time\", \"success_rate\", \"resource_usage\"},\n                    forecast_days = 7\n                })\n            end\n        },\n\n        {\n            type = \"optimization_summary\",\n            title = \"Optimization Opportunities\",\n            data_source = function()\n                return optimizer.get_opportunities({\n                    priority = \"high\",\n                    confidence_threshold = 0.7\n                })\n            end\n        },\n\n        {\n            type = \"anomaly_detector\",\n            title = \"Detected Anomalies\",\n            data_source = function()\n                return analytics.detect_anomalies({\n                    time_window = \"24h\",\n                    sensitivity = \"medium\"\n                })\n            end\n        }\n    }\n})\n</code></pre>"},{"location":"en/ai-features/#configuration-options","title":"\ud83d\udd27 Configuration Options","text":""},{"location":"en/ai-features/#analytics-configuration","title":"Analytics Configuration","text":"<pre><code># sloth-runner.yaml\nanalytics:\n  enabled: true\n  data_retention: \"90d\"\n  prediction_models:\n    - execution_time\n    - resource_usage\n    - failure_probability\n\noptimization:\n  enabled: true\n  auto_apply_threshold: 0.8\n  learning_rate: 0.1\n\nmonitoring:\n  anomaly_detection: true\n  baseline_period: \"30d\"\n  alert_thresholds:\n    performance_degradation: 20%\n    error_rate_increase: 5%\n</code></pre>"},{"location":"en/ai-features/#benefits","title":"\ud83d\udcc8 Benefits","text":""},{"location":"en/ai-features/#operational-benefits","title":"Operational Benefits","text":"<ul> <li>Reduced Downtime: Predictive analytics help prevent failures before they occur</li> <li>Improved Performance: Continuous optimization leads to better resource utilization</li> <li>Lower Costs: Efficient resource usage reduces infrastructure costs</li> <li>Better Reliability: Self-healing capabilities improve overall system reliability</li> </ul>"},{"location":"en/ai-features/#developer-benefits","title":"Developer Benefits","text":"<ul> <li>Less Maintenance: Intelligent automation reduces manual intervention</li> <li>Faster Debugging: Anomaly detection helps identify issues quickly</li> <li>Data-Driven Decisions: Analytics provide insights for infrastructure improvements</li> <li>Continuous Learning: System improves over time without manual tuning</li> </ul>"},{"location":"en/ai-features/#next-steps","title":"\ud83d\ude80 Next Steps","text":"<ol> <li>Enable Analytics: Start by enabling basic analytics in your workflows</li> <li>Monitor Patterns: Observe workflow patterns and performance metrics</li> <li>Apply Optimizations: Implement recommended optimizations gradually</li> <li>Expand Coverage: Add analytics to more critical workflows</li> <li>Custom Models: Develop custom prediction models for specific use cases</li> </ol>"},{"location":"en/ai-features/#related-documentation","title":"\ud83d\udcda Related Documentation","text":"<ul> <li>Monitoring &amp; Metrics</li> <li>State Management</li> <li>Performance Tuning</li> <li>Error Handling</li> <li>Advanced Examples</li> </ul>"},{"location":"en/contributing/","title":"\ud83e\udd1d Contributing to Sloth Runner","text":"<p>Thank you for your interest in contributing to Sloth Runner! </p> <p>We welcome contributions from developers of all skill levels. Whether you're fixing bugs, adding features, improving documentation, or creating plugins, your help makes Sloth Runner better for everyone.</p>"},{"location":"en/contributing/#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"en/contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Go 1.21+ for core development</li> <li>Node.js 18+ for UI development  </li> <li>Lua 5.4+ for DSL development</li> <li>Git for version control</li> </ul>"},{"location":"en/contributing/#development-setup","title":"Development Setup","text":"<pre><code># Clone the repository\ngit clone https://github.com/chalkan3-sloth/sloth-runner.git\ncd sloth-runner\n\n# Install dependencies\ngo mod download\nnpm install  # for UI components\n\n# Run tests\nmake test\n\n# Build the project\nmake build\n</code></pre>"},{"location":"en/contributing/#ways-to-contribute","title":"\ud83d\udccb Ways to Contribute","text":""},{"location":"en/contributing/#bug-reports","title":"\ud83d\udc1b Bug Reports","text":"<p>Found a bug? Please help us fix it:</p> <ol> <li>Search existing issues to avoid duplicates</li> <li>Use our bug report template with:</li> <li>Sloth Runner version</li> <li>Operating system</li> <li>Steps to reproduce</li> <li>Expected vs actual behavior</li> <li>Error logs (if any)</li> </ol>"},{"location":"en/contributing/#feature-requests","title":"\ud83d\udca1 Feature Requests","text":"<p>Have an idea for improvement?</p> <ol> <li>Check the roadmap for planned features</li> <li>Open a feature request with:</li> <li>Clear description of the feature</li> <li>Use cases and benefits</li> <li>Possible implementation approach</li> </ol>"},{"location":"en/contributing/#code-contributions","title":"\ud83d\udd27 Code Contributions","text":"<p>Ready to code? Here's how:</p> <ol> <li>Fork the repository</li> <li>Create a feature branch (<code>git checkout -b feature/amazing-feature</code>)</li> <li>Make your changes following our coding standards</li> <li>Add tests for new functionality</li> <li>Update documentation if needed</li> <li>Commit with clear messages</li> <li>Push and create a Pull Request</li> </ol>"},{"location":"en/contributing/#documentation","title":"\ud83d\udcda Documentation","text":"<p>Help improve our docs:</p> <ul> <li>Fix typos and unclear explanations</li> <li>Add examples and tutorials</li> <li>Translate content to other languages</li> <li>Update API documentation</li> </ul>"},{"location":"en/contributing/#plugin-development","title":"\ud83d\udd0c Plugin Development","text":"<p>Create plugins for the community:</p> <ul> <li>Follow our Plugin Development Guide</li> <li>Submit to the plugin registry</li> <li>Maintain compatibility with core versions</li> </ul>"},{"location":"en/contributing/#development-guidelines","title":"\ud83d\udcd0 Development Guidelines","text":""},{"location":"en/contributing/#code-style","title":"Code Style","text":""},{"location":"en/contributing/#go-code","title":"Go Code","text":"<p>Follow standard Go conventions:</p> <pre><code>// Good: Clear function names and comments\nfunc ProcessWorkflowTasks(ctx context.Context, workflow *Workflow) error {\n    if workflow == nil {\n        return fmt.Errorf(\"workflow cannot be nil\")\n    }\n\n    for _, task := range workflow.Tasks {\n        if err := processTask(ctx, task); err != nil {\n            return fmt.Errorf(\"failed to process task %s: %w\", task.ID, err)\n        }\n    }\n\n    return nil\n}\n</code></pre>"},{"location":"en/contributing/#lua-dsl","title":"Lua DSL","text":"<p>Keep DSL code clean and readable:</p> <pre><code>-- Good: Clear task definition with proper chaining\nlocal deploy_task = task(\"deploy_application\")\n    :description(\"Deploy the application to production\")\n    :command(function(params, deps)\n        local result = exec.run(\"kubectl apply -f deployment.yaml\")\n        if not result.success then\n            log.error(\"Deployment failed: \" .. result.stderr)\n            return false\n        end\n        return true\n    end)\n    :timeout(300)\n    :retries(3)\n    :build()\n</code></pre>"},{"location":"en/contributing/#typescriptjavascript","title":"TypeScript/JavaScript","text":"<p>For UI components:</p> <pre><code>// Good: Proper typing and error handling\ninterface TaskResult {\n  id: string;\n  status: 'success' | 'failed' | 'running';\n  duration: number;\n}\n\nexport const TaskStatusCard: React.FC&lt;{ result: TaskResult }&gt; = ({ result }) =&gt; {\n  const statusColor = result.status === 'success' ? 'green' : \n                     result.status === 'failed' ? 'red' : 'blue';\n\n  return (\n    &lt;div className={`task-card status-${result.status}`}&gt;\n      &lt;h3&gt;{result.id}&lt;/h3&gt;\n      &lt;span style={{ color: statusColor }}&gt;{result.status}&lt;/span&gt;\n      &lt;small&gt;{result.duration}ms&lt;/small&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"en/contributing/#testing-standards","title":"Testing Standards","text":""},{"location":"en/contributing/#unit-tests","title":"Unit Tests","text":"<p>Write tests for all new functionality:</p> <pre><code>func TestProcessWorkflowTasks(t *testing.T) {\n    tests := []struct {\n        name     string\n        workflow *Workflow\n        wantErr  bool\n    }{\n        {\n            name:     \"nil workflow should return error\",\n            workflow: nil,\n            wantErr:  true,\n        },\n        {\n            name: \"valid workflow should process successfully\",\n            workflow: &amp;Workflow{\n                Tasks: []*Task{{ID: \"test-task\"}},\n            },\n            wantErr: false,\n        },\n    }\n\n    for _, tt := range tests {\n        t.Run(tt.name, func(t *testing.T) {\n            err := ProcessWorkflowTasks(context.Background(), tt.workflow)\n            if (err != nil) != tt.wantErr {\n                t.Errorf(\"ProcessWorkflowTasks() error = %v, wantErr %v\", err, tt.wantErr)\n            }\n        })\n    }\n}\n</code></pre>"},{"location":"en/contributing/#integration-tests","title":"Integration Tests","text":"<p>Test real-world scenarios:</p> <pre><code># Run integration tests\nmake test-integration\n\n# Test with different configurations\nmake test-configs\n</code></pre>"},{"location":"en/contributing/#documentation-standards","title":"Documentation Standards","text":"<ul> <li>Keep it simple - Use clear, concise language</li> <li>Include examples - Show don't just tell</li> <li>Update with changes - Keep docs in sync with code</li> <li>Test examples - Ensure all code examples work</li> </ul>"},{"location":"en/contributing/#pull-request-process","title":"\ud83d\udd04 Pull Request Process","text":""},{"location":"en/contributing/#before-submitting","title":"Before Submitting","text":"<ul> <li> Run tests - <code>make test</code></li> <li> Run linting - <code>make lint</code></li> <li> Update docs - If adding/changing features</li> <li> Add changelog entry - In <code>CHANGELOG.md</code></li> <li> Check compatibility - With existing features</li> </ul>"},{"location":"en/contributing/#pr-template","title":"PR Template","text":"<p>Use our pull request template:</p> <pre><code>## Description\nBrief description of changes\n\n## Type of Change\n- [ ] Bug fix\n- [ ] New feature\n- [ ] Breaking change\n- [ ] Documentation update\n\n## Testing\n- [ ] Unit tests added/updated\n- [ ] Integration tests pass\n- [ ] Manual testing completed\n\n## Checklist\n- [ ] Code follows style guidelines\n- [ ] Documentation updated\n- [ ] Changelog updated\n</code></pre>"},{"location":"en/contributing/#review-process","title":"Review Process","text":"<ol> <li>Automated checks run on all PRs</li> <li>Maintainer review for code quality and design</li> <li>Community feedback welcomed on all PRs</li> <li>Approval and merge by maintainers</li> </ol>"},{"location":"en/contributing/#project-structure","title":"\ud83c\udfd7\ufe0f Project Structure","text":"<p>Understanding the codebase:</p> <pre><code>sloth-runner/\n\u251c\u2500\u2500 cmd/                    # CLI commands\n\u251c\u2500\u2500 internal/              # Internal packages\n\u2502   \u251c\u2500\u2500 core/             # Core business logic\n\u2502   \u251c\u2500\u2500 dsl/              # DSL implementation\n\u2502   \u251c\u2500\u2500 execution/        # Task execution engine\n\u2502   \u2514\u2500\u2500 plugins/          # Plugin system\n\u251c\u2500\u2500 pkg/                   # Public packages\n\u251c\u2500\u2500 plugins/              # Built-in plugins\n\u251c\u2500\u2500 docs/                 # Documentation\n\u251c\u2500\u2500 web/                  # Web UI components\n\u2514\u2500\u2500 examples/             # Example workflows\n</code></pre>"},{"location":"en/contributing/#contribution-areas","title":"\ud83c\udfaf Contribution Areas","text":""},{"location":"en/contributing/#high-priority","title":"High Priority","text":"<ul> <li>\ud83d\udc1b Bug fixes - Always welcome</li> <li>\ud83d\udcc8 Performance improvements - Optimization opportunities</li> <li>\ud83e\uddea Test coverage - Increase test coverage</li> <li>\ud83d\udcda Documentation - Keep docs comprehensive</li> </ul>"},{"location":"en/contributing/#medium-priority","title":"Medium Priority","text":"<ul> <li>\u2728 New features - Following roadmap priorities</li> <li>\ud83d\udd0c Plugin ecosystem - More plugins and integrations</li> <li>\ud83c\udfa8 UI improvements - Better user experience</li> </ul>"},{"location":"en/contributing/#future-areas","title":"Future Areas","text":"<ul> <li>\ud83e\udd16 AI enhancements - Advanced ML capabilities  </li> <li>\u2601\ufe0f Cloud integrations - More cloud provider support</li> <li>\ud83d\udcca Analytics - Better insights and reporting</li> </ul>"},{"location":"en/contributing/#recognition","title":"\ud83c\udfc6 Recognition","text":"<p>Contributors are recognized in:</p> <ul> <li>CONTRIBUTORS.md - All contributors listed</li> <li>Release notes - Major contributions highlighted</li> <li>Community showcase - Featured contributions</li> <li>Contributor badges - GitHub profile recognition</li> </ul>"},{"location":"en/contributing/#getting-help","title":"\ud83d\udcde Getting Help","text":""},{"location":"en/contributing/#development-questions","title":"Development Questions","text":"<ul> <li>\ud83d\udcac Discord - <code>#development</code> channel</li> <li>\ud83d\udce7 Mailing List - dev@sloth-runner.io</li> <li>\ud83d\udcd6 Wiki - Development guides and FAQs</li> </ul>"},{"location":"en/contributing/#mentorship","title":"Mentorship","text":"<p>New to open source? We offer mentorship:</p> <ul> <li>\ud83d\udc65 Mentor matching - Paired with experienced contributors</li> <li>\ud83d\udcda Learning resources - Curated learning materials</li> <li>\ud83c\udfaf Guided contributions - Starter-friendly issues</li> </ul>"},{"location":"en/contributing/#code-of-conduct","title":"\ud83d\udcdc Code of Conduct","text":"<p>We are committed to providing a welcoming and inclusive environment. Please read our Code of Conduct.</p>"},{"location":"en/contributing/#our-standards","title":"Our Standards","text":"<ul> <li>\ud83e\udd1d Be respectful - Treat everyone with respect</li> <li>\ud83d\udca1 Be constructive - Provide helpful feedback</li> <li>\ud83c\udf0d Be inclusive - Welcome diverse perspectives</li> <li>\ud83d\udcda Be patient - Help others learn and grow</li> </ul>"},{"location":"en/contributing/#release-process","title":"\ud83d\ude80 Release Process","text":"<p>Understanding our releases:</p> <ul> <li>\ud83d\udd04 Continuous Integration - Automated testing and building</li> <li>\ud83d\udcc5 Regular Releases - Monthly feature releases</li> <li>\ud83d\udea8 Hotfixes - Critical bugs fixed immediately</li> <li>\ud83d\udcca Semantic Versioning - Clear version numbering</li> </ul>"},{"location":"en/contributing/#roadmap-participation","title":"\ud83d\udcc8 Roadmap Participation","text":"<p>Help shape the future:</p> <ul> <li>\ud83d\udccb Feature Planning - Participate in roadmap discussions</li> <li>\ud83d\uddf3\ufe0f Voting - Vote on feature priorities</li> <li>\ud83d\udcad RFC Process - Propose major changes through RFCs</li> </ul> <p>Ready to contribute? </p> <p>Start by exploring our Good First Issues or join our Discord community to introduce yourself!</p> <p>Thank you for helping make Sloth Runner better! \ud83e\udda5\u2728</p>"},{"location":"en/core-concepts/","title":"Core Concepts - Modern DSL","text":"<p>This document explains the fundamental concepts of <code>sloth-runner</code> using the Modern DSL, helping you understand how to define and orchestrate complex workflows with the new fluent API.</p>"},{"location":"en/core-concepts/#modern-dsl-overview","title":"Modern DSL Overview","text":"<p>The Modern DSL replaces the legacy <code>Modern DSLs</code> approach with a more intuitive, fluent API for defining workflows. Instead of large table structures, you now use chainable methods to build tasks and define workflows declaratively.</p> <pre><code>-- my_pipeline.sloth - Modern DSL\nlocal my_task = task(\"task_name\")\n    :description(\"Task description\")\n    :command(function() ... end)\n    :build()\n\nworkflow.define(\"workflow_name\", {\n    description = \"Workflow description - Modern DSL\",\n    tasks = { my_task }\n})\n</code></pre>"},{"location":"en/core-concepts/#task-definition-with-modern-dsl","title":"Task Definition with Modern DSL","text":"<p>Tasks are now defined using the <code>task()</code> function and fluent API methods:</p>"},{"location":"en/core-concepts/#basic-task-structure","title":"Basic Task Structure","text":"<pre><code>local my_task = task(\"task_name\")\n    :description(\"What this task does\")\n    :command(function(params, deps)\n        -- Task logic here\n        return true, \"Success message\", { output_data = \"value\" }\n    end)\n    :timeout(\"5m\")\n    :retries(3, \"exponential\")\n    :build()\n</code></pre>"},{"location":"en/core-concepts/#task-builder-methods","title":"Task Builder Methods","text":"<p>Core Properties: *   <code>:description(string)</code> - Human-readable task description *   <code>:command(function|string)</code> - Task execution logic *   <code>:timeout(string)</code> - Maximum execution time (e.g., \"10s\", \"5m\", \"1h\") *   <code>:retries(number, strategy)</code> - Retry configuration with strategy (\"exponential\", \"linear\", \"fixed\") *   <code>:depends_on(array)</code> - Array of task names this task depends on</p> <p>Advanced Features: *   <code>:async(boolean)</code> - Enable asynchronous execution *   <code>:artifacts(array)</code> - Files to save after successful execution *   <code>:consumes(array)</code> - Artifacts from other tasks to use *   <code>:run_if(function|string)</code> - Conditional execution logic *   <code>:abort_if(function|string)</code> - Condition to abort entire workflow</p> <p>Lifecycle Hooks: *   <code>:on_success(function)</code> - Execute when task succeeds *   <code>:on_failure(function)</code> - Execute when task fails *   <code>:on_timeout(function)</code> - Execute when task times out *   <code>:pre_hook(function)</code> - Execute before main command *   <code>:post_hook(function)</code> - Execute after main command</p> <p>Example: <pre><code>Modern DSLs = {\n  my_group = {\n    description = \"A group that manages its own temporary directory.\",\n    create_workdir_before_run = true,\n    clean_workdir_after_run = function(result)\n      if not result.success then\n        log.warn(\"Group failed. Workdir will be kept for debugging.\")\n      end\n      return result.success -- Only clean up if everything succeeded\n    end,\n    tasks = {\n      -- Tasks go here\n    }\n  }\n}\n</code></pre></p>"},{"location":"en/core-concepts/#individual-tasks","title":"Individual Tasks","text":"<p>A task is a single unit of work. It's defined as a table with several available properties to control its behavior.</p>"},{"location":"en/core-concepts/#basic-properties","title":"Basic Properties","text":"<ul> <li><code>name</code> (string): The unique name of the task within its group.</li> <li><code>description</code> (string): A brief description of what the task does.</li> <li><code>command</code> (string or function): The core action of the task.<ul> <li>As a string: It's executed as a shell command.</li> <li>As a function: The Lua function is executed. It receives two arguments: <code>params</code> (a table of its parameters) and <code>deps</code> (a table containing the outputs of its dependencies). The function must return:<ol> <li><code>boolean</code>: <code>true</code> for success, <code>false</code> for failure.</li> <li><code>string</code>: A message describing the result.</li> <li><code>table</code> (optional): A table of outputs that other tasks can depend on.</li> </ol> </li> </ul> </li> </ul>"},{"location":"en/core-concepts/#dependency-and-execution-flow","title":"Dependency and Execution Flow","text":"<ul> <li><code>depends_on</code> (string or table): A list of task names that must complete successfully before this task can run.</li> <li><code>next_if_fail</code> (string or table): A list of task names to run only if this task fails. This is useful for cleanup or notification tasks.</li> <li><code>async</code> (boolean): If <code>true</code>, the task runs in the background, and the runner does not wait for it to complete before starting the next task in the execution order.</li> </ul>"},{"location":"en/core-concepts/#error-handling-and-robustness","title":"Error Handling and Robustness","text":"<ul> <li><code>retries</code> (number): The number of times to retry a task if it fails. Default is <code>0</code>.</li> <li><code>timeout</code> (string): A duration (e.g., <code>\"10s\"</code>, <code>\"1m\"</code>) after which the task will be terminated if it's still running.</li> </ul>"},{"location":"en/core-concepts/#conditional-execution","title":"Conditional Execution","text":"<ul> <li><code>run_if</code> (string or function): The task will be skipped unless this condition is met.<ul> <li>As a string: A shell command. An exit code of <code>0</code> means the condition is met.</li> <li>As a function: A Lua function that returns <code>true</code> if the task should run.</li> </ul> </li> <li><code>abort_if</code> (string or function): The entire workflow will be aborted if this condition is met.<ul> <li>As a string: A shell command. An exit code of <code>0</code> means abort.</li> <li>As a function: A Lua function that returns <code>true</code> to abort.</li> </ul> </li> </ul>"},{"location":"en/core-concepts/#lifecycle-hooks","title":"Lifecycle Hooks","text":"<ul> <li><code>pre_exec</code> (function): A Lua function that runs before the main <code>command</code>.</li> <li><code>post_exec</code> (function): A Lua function that runs after the main <code>command</code> has completed successfully.</li> </ul>"},{"location":"en/core-concepts/#reusability","title":"Reusability","text":"<ul> <li><code>uses</code> (table): Specifies a pre-defined task from another file (loaded via <code>import</code>) to use as a base. The current task definition can then override properties like <code>params</code> or <code>description</code>.</li> <li><code>params</code> (table): A dictionary of key-value pairs that can be passed to the task's <code>command</code> function.</li> <li><code>artifacts</code> (string or table): A file pattern (glob) or a list of patterns specifying which files from the task's <code>workdir</code> should be saved as artifacts after a successful run.</li> <li><code>consumes</code> (string or table): The name of an artifact (or a list of names) from a previous task that should be copied into this task's <code>workdir</code> before it runs.</li> </ul>"},{"location":"en/core-concepts/#artifact-management","title":"Artifact Management","text":"<p>Sloth-Runner allows tasks to share files with each other through an artifact mechanism. One task can \"produce\" one or more files as artifacts, and subsequent tasks can \"consume\" those artifacts.</p> <p>This is useful for CI/CD pipelines where a build step might generate a binary (the artifact), which is then used by a testing or deployment step.</p>"},{"location":"en/core-concepts/#how-it-works","title":"How It Works","text":"<ol> <li> <p>Producing Artifacts: Add the <code>artifacts</code> key to your task definition. The value can be a single file pattern (e.g., <code>\"report.txt\"</code>) or a list (e.g., <code>{\"*.log\", \"app.bin\"}</code>). After the task runs successfully, the runner will find files in the task's <code>workdir</code> matching these patterns and copy them to a shared artifact storage for the pipeline.</p> </li> <li> <p>Consuming Artifacts: Add the <code>consumes</code> key to another task's definition (which typically <code>depends_on</code> the producer task). The value should be the filename of the artifact you want to use (e.g., <code>\"report.txt\"</code>). Before this task runs, the runner will copy the named artifact from the shared storage into this task's <code>workdir</code>, making it available to the <code>command</code>.</p> </li> </ol>"},{"location":"en/core-concepts/#artifacts-example","title":"Artifacts Example","text":"<pre><code>Modern DSLs = {\n  [\"ci-pipeline\"] = {\n    description = \"Demonstrates the use of artifacts.\",\n    create_workdir_before_run = true,\n    tasks = {\n      {\n        name = \"build\",\n        description = \"Creates a binary and declares it as an artifact.\",\n        command = \"echo 'binary_content' &gt; app.bin\",\n        artifacts = {\"app.bin\"}\n      },\n      {\n        name = \"test\",\n        description = \"Consumes the binary to run tests.\",\n        depends_on = \"build\",\n        consumes = {\"app.bin\"},\n        command = function(params)\n          -- At this point, 'app.bin' exists in this task's workdir\n          local content, err = fs.read(params.workdir .. \"/app.bin\")\n          if content == \"binary_content\" then\n            log.info(\"Successfully consumed artifact!\")\n            return true\n          else\n            return false, \"Artifact content was incorrect!\"\n          end\n        end\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"en/core-concepts/#global-functions","title":"Global Functions","text":"<p><code>sloth-runner</code> provides global functions in the Lua environment to help orchestrate workflows.</p>"},{"location":"en/core-concepts/#importpath","title":"<code>import(path)</code>","text":"<p>Loads another sloth file and returns the value it returns. This is the primary mechanism for creating reusable task modules. The path is relative to the file calling <code>import</code>.</p> <p>Example (<code>reusable_tasks.sloth</code>): <pre><code>-- Import a module that returns a table of task definitions\nlocal docker_tasks = import(\"shared/docker.sloth\")\n\nModern DSLs = {\n  main = {\n    tasks = {\n      {\n        -- Use the 'build' task from the imported module\n        uses = docker_tasks.build,\n        params = { image_name = \"my-app\" }\n      }\n    }\n  }\n}\n</code></pre></p>"},{"location":"en/core-concepts/#paralleltasks","title":"<code>parallel(tasks)</code>","text":"<p>Executes a list of tasks concurrently and waits for all of them to complete.</p> <ul> <li><code>tasks</code> (table): A list of task tables to run in parallel.</li> </ul> <p>Example: <pre><code>command = function()\n  log.info(\"Starting 3 tasks in parallel...\")\n  local results, err = parallel({\n    { name = \"short_task\", command = \"sleep 1\" },\n    { name = \"medium_task\", command = \"sleep 2\" },\n    { name = \"long_task\", command = \"sleep 3\" }\n  })\n  if err then\n    return false, \"Parallel execution failed\"\n  end\n  return true, \"All parallel tasks finished.\"\nend\n</code></pre></p>"},{"location":"en/core-concepts/#exporttable","title":"<code>export(table)</code>","text":"<p>Exports data from any point in a script to the CLI. When the <code>--return</code> flag is used, all exported tables are merged with the final task's output into a single JSON object.</p> <ul> <li><code>table</code>: A Lua table to be exported.</li> </ul> <p>Example: <pre><code>command = function()\n  export({ important_value = \"data from the middle of a task\" })\n  return true, \"Task done\", { final_output = \"some result\" }\nend\n</code></pre> Running with <code>--return</code> would produce: <pre><code>{\n  \"important_value\": \"data from the middle of a task\",\n  \"final_output\": \"some result\"\n}\n</code></pre></p>"},{"location":"en/distributed/","title":"Distributed Task Execution","text":"<p><code>sloth-runner</code> supports distributed task execution, allowing you to run tasks on remote agents. This enables scalable and distributed workflows, where different parts of your pipeline can be executed on different machines.</p>"},{"location":"en/distributed/#how-it-works","title":"How it Works","text":"<p>The distributed execution model in <code>sloth-runner</code> follows a master-agent architecture:</p> <ol> <li>Master: The main <code>sloth-runner</code> instance acts as the master. It parses the workflow definition, identifies tasks configured to run on remote agents, and dispatches them.</li> <li>Agent: A <code>sloth-runner</code> instance running in <code>agent</code> mode on a remote machine. It listens for incoming task execution requests from the master, executes the tasks, and sends back the results.</li> </ol>"},{"location":"en/distributed/#configuring-remote-tasks","title":"Configuring Remote Tasks","text":"<p>To run a task on a remote agent, you need to specify the <code>delegate_to</code> field in either the task group or the individual task definition.</p>"},{"location":"en/distributed/#1-delegate-to-an-agent-at-the-task-group-level","title":"1. Delegate to an Agent at the Task Group Level","text":"<p>You can define the agent directly within your <code>Modern DSLs</code> group using the <code>delegate_to</code> field. All tasks within this group will then be delegated to this agent unless overridden by a task-specific <code>delegate_to</code>.</p> <pre><code>Modern DSLs = {\n  my_distributed_group = {\n    description = \"A task group with distributed tasks.\",\n    delegate_to = { address = \"localhost:50051\" }, -- Define the agent for the entire group\n    tasks = {\n      {\n        name = \"remote_hello\",\n        description = \"Runs a hello world task on a remote agent.\",\n        -- No 'delegate_to' field needed here, it inherits from the group\n        command = function(params)\n          log.info(\"Hello from remote agent!\")\n          return true, \"Remote task executed.\"\n        end\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"en/distributed/#2-delegate-to-an-agent-at-the-task-level","title":"2. Delegate to an Agent at the Task Level","text":"<p>Alternatively, you can specify the <code>delegate_to</code> field directly on an individual task. This will override any group-level delegation or allow for ad-hoc remote execution.</p> <pre><code>Modern DSLs = {\n  my_group = {\n    description = \"A task group with a specific remote task.\",\n    tasks = {\n      {\n        name = \"specific_remote_task\",\n        description = \"Runs this task on a specific remote agent.\",\n        delegate_to = { address = \"192.168.1.100:50051\" }, -- Define agent for this task only\n        command = function(params)\n          log.info(\"Hello from a specific remote agent!\")\n          return true, \"Specific remote task executed.\"\n        end\n      },\n      {\n        name = \"local_task\",\n        description = \"This task runs locally.\",\n        command = \"echo 'Hello from local machine!'\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"en/distributed/#running-an-agent","title":"Running an Agent","text":"<p>To start a <code>sloth-runner</code> instance in agent mode, use the <code>agent</code> command:</p> <pre><code>sloth-runner agent -p 50051\n</code></pre> <ul> <li><code>-p, --port</code>: Specifies the port the agent should listen on. Defaults to <code>50051</code>.</li> </ul> <p>When an agent starts, it will listen for incoming gRPC requests from the master <code>sloth-runner</code> instance. Upon receiving a task, it will execute it in its local environment and return the result, along with any updated workspace files, back to the master.</p>"},{"location":"en/distributed/#workspace-synchronization","title":"Workspace Synchronization","text":"<p>When a task is dispatched to a remote agent, <code>sloth-runner</code> automatically handles the synchronization of the task's workspace:</p> <ol> <li>Master to Agent: The master creates a tarball of the current task's working directory and sends it to the agent.</li> <li>Agent Execution: The agent extracts the tarball into a temporary directory, executes the task within that directory, and any changes made to the files in the temporary directory are captured.</li> <li>Agent to Master: After task completion, the agent creates a tarball of the modified temporary directory and sends it back to the master. The master then extracts this tarball, updating its local workspace with any changes made by the remote task.</li> </ol> <p>This ensures that remote tasks have access to all necessary files and that any modifications they make are reflected back in the main workflow.</p>"},{"location":"en/enhanced-agent-output/","title":"Enhanced <code>sloth-runner agent run</code> Output","text":""},{"location":"en/enhanced-agent-output/#purpose","title":"Purpose","text":"<p>This feature significantly improves the visual presentation and informational content of the <code>sloth-runner agent run</code> command's output. Previously, the output was a plain text dump, making it difficult to quickly ascertain the status and details of remote command executions. The enhancement aims to provide a more elegant, colorful, and robust user experience by leveraging the <code>pterm</code> library for terminal output.</p> <p>The primary goals of this enhancement are: *   Clarity: Clearly distinguish between successful and failed command executions. *   Readability: Present information in a structured and easy-to-digest format. *   Expressiveness: Utilize colors and visual elements to convey status and highlight important details. *   Completeness: Ensure all relevant information (command, stdout, stderr, error messages) is presented comprehensively.</p>"},{"location":"en/enhanced-agent-output/#usage","title":"Usage","text":"<p>The usage of the <code>sloth-runner agent run</code> command remains the same. You execute it from your local machine (where the master is running) to instruct a registered agent to execute a shell command.</p> <pre><code>go run ./cmd/sloth-runner agent run &lt;agent_name&gt; '&lt;command_to_execute&gt;'\n</code></pre> <ul> <li><code>&lt;agent_name&gt;</code>: The name of the agent registered with the master (e.g., <code>agent1</code>, <code>agent2</code>).</li> <li><code>&lt;command_to_execute&gt;</code>: The shell command you want the agent to execute. Ensure proper quoting to prevent your local shell from interpreting the command before it reaches the agent.</li> </ul>"},{"location":"en/enhanced-agent-output/#output-style","title":"Output Style","text":"<p>The enhanced output now utilizes <code>pterm.DefaultBox</code> to encapsulate the command execution results, providing a clear visual boundary. Different colors and prefixes are used to indicate success or failure, and sections for the command, standard output, and standard error are clearly delineated.</p>"},{"location":"en/enhanced-agent-output/#successful-command-execution","title":"Successful Command Execution","text":"<p>Upon successful execution of a command on a remote agent, the output will be presented within a green-bordered box, with a <code>SUCCESS</code> title. It will clearly state that the command was successful, show the executed command, and display any <code>Stdout</code> content.</p> <p>Example Command: <pre><code>go run ./cmd/sloth-runner agent run agent1 'echo \"Hello from agent1 on $(hostname)\"'\n</code></pre></p> <p>Example Output: <pre><code>\u250c\u2500  SUCCESS  Command Execution Result on agent1 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n|  SUCCESS  Command executed successfully!                |\n|  INFO  Command: echo \"Hello from agent1 on $(hostname)\" |\n| # Stdout:                                               |\n| Hello from agent1 on ladyguica                          |\n|                                                         |\n|                                                         |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p>"},{"location":"en/enhanced-agent-output/#failed-command-execution","title":"Failed Command Execution","text":"<p>In the event of a command failing on a remote agent, the output will be presented within a red-bordered box, with an <code>ERROR</code> title. It will clearly indicate that the command failed, show the executed command, and display any <code>Stdout</code>, <code>Stderr</code>, and the specific <code>Error</code> message returned by the agent.</p> <p>Example Command (Hypothetical Failure): <pre><code>go run ./cmd/sloth-runner agent run agent1 'non_existent_command'\n</code></pre></p> <p>Example Output (Hypothetical): <pre><code>\u250c\u2500  ERROR  Command Execution Result on agent1 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n|  ERROR  Command failed on agent1!                     |\n|  INFO  Command: non_existent_command                  |\n| # Stderr:                                             |\n| bash: non_existent_command: command not found         |\n| # Error:                                              |\n| exit status 127                                       |\n|                                                       |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p> <p>This enhanced output ensures that users receive immediate, clear, and visually distinct feedback on the status of their remote agent commands, significantly improving the debugging and monitoring experience.</p>"},{"location":"en/enterprise-features/","title":"\ud83c\udfe2 Enterprise Features","text":"<p>Production-Grade Automation Platform Sloth Runner provides enterprise-grade reliability, security, and scalability for mission-critical automation workflows.</p>"},{"location":"en/enterprise-features/#enterprise-grade-foundation","title":"\ud83c\udf1f Enterprise-Grade Foundation","text":""},{"location":"en/enterprise-features/#ai-powered-intelligence-unique-to-sloth-runner","title":"\ud83e\udd16 AI-Powered Intelligence \u2b50 Unique to Sloth Runner","text":"<ul> <li>Predictive Analytics: 90%+ accurate failure prediction</li> <li>Intelligent Optimization: 2-5x performance improvements</li> <li>Adaptive Learning: Gets smarter with every execution</li> <li>Risk Assessment: Automated risk analysis for critical operations</li> </ul>"},{"location":"en/enterprise-features/#gitops-native-industry-first","title":"\ud83d\udd04 GitOps Native \u2b50 Industry First","text":"<ul> <li>Zero-Config GitOps: Works out-of-the-box with any Git repository</li> <li>Intelligent Diff Preview: Visual change analysis before deployment</li> <li>Smart Rollback: Automatic rollback with state restoration</li> <li>Multi-Environment: Coordinated dev/staging/production workflows</li> </ul>"},{"location":"en/enterprise-features/#distributed-architecture","title":"\ud83c\udf10 Distributed Architecture","text":"<ul> <li>Master-Agent Topology: Scalable distributed execution</li> <li>Automatic Failover: High availability with zero downtime</li> <li>Load Balancing: Intelligent workload distribution</li> <li>Real-Time Streaming: Live task execution monitoring</li> </ul>"},{"location":"en/enterprise-features/#enterprise-security","title":"\ud83d\udd12 Enterprise Security","text":"<ul> <li>mTLS Authentication: Mutual TLS for all communications</li> <li>RBAC Authorization: Role-based access control</li> <li>Audit Logging: Comprehensive audit trail</li> <li>Secrets Management: Secure credential storage and rotation</li> </ul>"},{"location":"en/enterprise-features/#advanced-monitoring","title":"\ud83d\udcca Advanced Monitoring","text":"<ul> <li>Real-Time Metrics: Prometheus-compatible metrics</li> <li>Health Checks: Automated system health monitoring</li> <li>Alerting: Intelligent alerting with escalation</li> <li>Observability: Complete system observability</li> </ul>"},{"location":"en/enterprise-features/#enterprise-state-management","title":"\ud83d\udcbe Enterprise State Management","text":"<ul> <li>SQLite Backend: Reliable persistent state storage</li> <li>Atomic Operations: ACID-compliant state operations</li> <li>Distributed Locks: Coordination across multiple agents</li> <li>TTL Support: Automatic state cleanup and lifecycle management</li> </ul>"},{"location":"en/enterprise-features/#distributed-architecture_1","title":"\ud83c\udfd7\ufe0f Distributed Architecture","text":""},{"location":"en/enterprise-features/#master-agent-topology","title":"Master-Agent Topology","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Master Node   \u2502    \u2502   Agent Node    \u2502    \u2502   Agent Node    \u2502\n\u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502\n\u2502  \u2022 Task Queue   \u2502\u25c4\u2500\u2500\u25ba\u2502  \u2022 Execution    \u2502    \u2502  \u2022 Execution    \u2502\n\u2502  \u2022 Scheduling   \u2502    \u2502  \u2022 Monitoring   \u2502    \u2502  \u2022 Monitoring   \u2502\n\u2502  \u2022 Monitoring   \u2502    \u2502  \u2022 Health       \u2502    \u2502  \u2022 Health       \u2502\n\u2502  \u2022 Web UI       \u2502    \u2502  \u2022 Streaming    \u2502    \u2502  \u2022 Streaming    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"en/enterprise-features/#scalability-features","title":"Scalability Features","text":"<ul> <li>Horizontal Scaling: Add agents on-demand</li> <li>Auto-Discovery: Automatic agent registration</li> <li>Load Balancing: Intelligent task distribution</li> <li>Resource Optimization: Efficient resource utilization</li> </ul>"},{"location":"en/enterprise-features/#high-availability","title":"High Availability","text":"<ul> <li>Master Redundancy: Multiple master nodes for failover</li> <li>Agent Failover: Automatic task rescheduling on failure</li> <li>Data Replication: State replication across nodes</li> <li>Zero-Downtime Updates: Rolling updates without service interruption</li> </ul>"},{"location":"en/enterprise-features/#security-compliance","title":"\ud83d\udd12 Security &amp; Compliance","text":""},{"location":"en/enterprise-features/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<pre><code>-- RBAC Configuration Example\nsecurity.configure({\n    auth = {\n        type = \"mTLS\",\n        ca_cert = \"/etc/sloth/ca.pem\",\n        server_cert = \"/etc/sloth/server.pem\",\n        server_key = \"/etc/sloth/server.key\"\n    },\n    rbac = {\n        enabled = true,\n        policies = {\n            {\n                role = \"admin\",\n                permissions = [\"*\"],\n                users = [\"admin@company.com\"]\n            },\n            {\n                role = \"developer\", \n                permissions = [\"workflow:read\", \"workflow:execute\"],\n                users = [\"dev-team@company.com\"]\n            },\n            {\n                role = \"viewer\",\n                permissions = [\"workflow:read\", \"metrics:read\"],\n                users = [\"ops-team@company.com\"]\n            }\n        }\n    }\n})\n</code></pre>"},{"location":"en/enterprise-features/#secrets-management","title":"Secrets Management","text":"<pre><code>-- Secure secrets handling\nlocal secrets = require(\"secrets\")\n\nlocal deploy_task = task(\"secure_deploy\")\n    :command(function(params, deps)\n        -- Retrieve secrets securely\n        local api_key = secrets.get(\"api_key\", {\n            vault = \"production\",\n            rotation = true\n        })\n\n        local db_password = secrets.get(\"db_password\", {\n            vault = \"database\",\n            ttl = \"1h\"\n        })\n\n        -- Use secrets in deployment\n        return deploy_with_secrets(api_key, db_password)\n    end)\n    :build()\n</code></pre>"},{"location":"en/enterprise-features/#audit-compliance","title":"Audit &amp; Compliance","text":"<ul> <li>Complete Audit Trail: Every action logged with full context</li> <li>Compliance Reporting: SOC2, HIPAA, PCI-DSS compliance</li> <li>Data Encryption: Encryption at rest and in transit</li> <li>Access Logging: Detailed access and permission logs</li> </ul>"},{"location":"en/enterprise-features/#monitoring-observability","title":"\ud83d\udcca Monitoring &amp; Observability","text":""},{"location":"en/enterprise-features/#prometheus-integration","title":"Prometheus Integration","text":"<pre><code># prometheus.yml\nglobal:\n  scrape_interval: 15s\n\nscrape_configs:\n  - job_name: 'sloth-runner'\n    static_configs:\n      - targets: ['sloth-master:8080']\n    metrics_path: '/metrics'\n    scrape_interval: 5s\n</code></pre>"},{"location":"en/enterprise-features/#key-metrics","title":"Key Metrics","text":"<ul> <li>Task Execution Metrics: Duration, success rate, throughput</li> <li>System Metrics: CPU, memory, disk, network utilization</li> <li>AI Metrics: Optimization success rate, prediction accuracy</li> <li>GitOps Metrics: Deployment frequency, rollback rate, sync health</li> </ul>"},{"location":"en/enterprise-features/#alerting-rules","title":"Alerting Rules","text":"<pre><code># alerting_rules.yml\ngroups:\n  - name: sloth-runner\n    rules:\n      - alert: HighTaskFailureRate\n        expr: rate(sloth_task_failures_total[5m]) &gt; 0.1\n        for: 2m\n        labels:\n          severity: warning\n        annotations:\n          summary: \"High task failure rate detected\"\n\n      - alert: AIOptimizationDown\n        expr: sloth_ai_optimizations_total == 0\n        for: 5m\n        labels:\n          severity: critical\n        annotations:\n          summary: \"AI optimization system is not functioning\"\n</code></pre>"},{"location":"en/enterprise-features/#grafana-dashboards","title":"Grafana Dashboards","text":"<p>Pre-built dashboards for: - System Overview: High-level system health and performance - Task Execution: Task-specific metrics and trends - AI Intelligence: AI optimization and prediction metrics - GitOps Workflows: GitOps deployment and sync status - Agent Performance: Individual agent performance and health</p>"},{"location":"en/enterprise-features/#performance-scalability","title":"\u26a1 Performance &amp; Scalability","text":""},{"location":"en/enterprise-features/#horizontal-scaling","title":"Horizontal Scaling","text":"<pre><code># Add more agents for increased capacity\nsloth-runner agent start \\\n  --master=master.company.com:8080 \\\n  --capacity=100 \\\n  --tags=production,linux\n\n# Scale GitOps workflows\nsloth-runner gitops scale \\\n  --workflows=10 \\\n  --repositories=50 \\\n  --sync-workers=20\n</code></pre>"},{"location":"en/enterprise-features/#performance-optimization","title":"Performance Optimization","text":"<ul> <li>Connection Pooling: Efficient resource utilization</li> <li>Caching: Intelligent caching of frequently accessed data</li> <li>Parallel Execution: Concurrent task execution</li> <li>Resource Limits: Configurable resource constraints</li> </ul>"},{"location":"en/enterprise-features/#load-testing","title":"Load Testing","text":"<pre><code>-- Load testing configuration\nlocal load_test = workflow.define(\"load_test\", {\n    description = \"Performance load testing\",\n    config = {\n        parallel_tasks = 100,\n        duration = \"10m\",\n        ramp_up = \"2m\"\n    },\n\n    tasks = {\n        task(\"load_generator\")\n            :replicas(100)\n            :command(function()\n                -- Simulate realistic workload\n                return simulate_production_load()\n            end)\n    }\n})\n</code></pre>"},{"location":"en/enterprise-features/#deployment-options","title":"\ud83d\ude80 Deployment Options","text":""},{"location":"en/enterprise-features/#cloud-deployments","title":"Cloud Deployments","text":""},{"location":"en/enterprise-features/#aws-deployment","title":"AWS Deployment","text":"<pre><code># aws-deployment.yml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: sloth-runner-master\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: sloth-runner-master\n  template:\n    metadata:\n      labels:\n        app: sloth-runner-master\n    spec:\n      containers:\n      - name: sloth-runner\n        image: slothrunner/sloth-runner:latest\n        env:\n        - name: MODE\n          value: \"master\"\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: sloth-secrets\n              key: database-url\n</code></pre>"},{"location":"en/enterprise-features/#kubernetes-helm-chart","title":"Kubernetes Helm Chart","text":"<pre><code># Install with Helm\nhelm repo add sloth-runner https://charts.sloth-runner.dev\nhelm install sloth-runner sloth-runner/sloth-runner \\\n  --set master.replicas=3 \\\n  --set agent.replicas=10 \\\n  --set ai.enabled=true \\\n  --set gitops.enabled=true\n</code></pre>"},{"location":"en/enterprise-features/#on-premises-deployment","title":"On-Premises Deployment","text":"<pre><code># Docker Compose for on-premises\nversion: '3.8'\nservices:\n  sloth-master:\n    image: slothrunner/sloth-runner:latest\n    command: [\"master\", \"start\"]\n    environment:\n      - AI_ENABLED=true\n      - GITOPS_ENABLED=true\n    ports:\n      - \"8080:8080\"\n    volumes:\n      - sloth-data:/data\n\n  sloth-agent:\n    image: slothrunner/sloth-runner:latest\n    command: [\"agent\", \"start\"]\n    environment:\n      - MASTER_URL=http://sloth-master:8080\n    deploy:\n      replicas: 5\n</code></pre>"},{"location":"en/enterprise-features/#hybrid-cloud","title":"Hybrid Cloud","text":"<pre><code>-- Multi-cloud configuration\ninfrastructure.configure({\n    clouds = {\n        {\n            provider = \"aws\",\n            region = \"us-west-2\",\n            agents = 10,\n            capabilities = [\"compute\", \"storage\"]\n        },\n        {\n            provider = \"gcp\", \n            region = \"us-central1\",\n            agents = 5,\n            capabilities = [\"ai\", \"analytics\"]\n        },\n        {\n            provider = \"azure\",\n            region = \"eastus\",\n            agents = 8,\n            capabilities = [\"compliance\", \"security\"]\n        }\n    },\n    load_balancing = \"round_robin\",\n    failover = \"automatic\"\n})\n</code></pre>"},{"location":"en/enterprise-features/#configuration-management","title":"\ud83d\udd27 Configuration Management","text":""},{"location":"en/enterprise-features/#environment-configuration","title":"Environment Configuration","text":"<pre><code># production.yml\nsloth_runner:\n  master:\n    replicas: 3\n    resources:\n      cpu: \"2\"\n      memory: \"4Gi\"\n    database:\n      type: \"postgresql\"\n      url: \"${DATABASE_URL}\"\n      pool_size: 20\n\n  agent:\n    replicas: 20\n    resources:\n      cpu: \"1\"\n      memory: \"2Gi\"\n    capabilities:\n      - \"docker\"\n      - \"kubernetes\" \n      - \"terraform\"\n\n  ai:\n    enabled: true\n    optimization_level: 8\n    learning_mode: \"adaptive\"\n    models:\n      - \"optimization\"\n      - \"prediction\"\n      - \"analytics\"\n\n  gitops:\n    enabled: true\n    repositories: 50\n    sync_workers: 10\n    auto_sync_interval: \"5m\"\n\n  security:\n    auth_type: \"mTLS\"\n    rbac_enabled: true\n    audit_logging: true\n    secrets_backend: \"vault\"\n\n  monitoring:\n    metrics_enabled: true\n    prometheus_endpoint: \"/metrics\"\n    grafana_dashboards: true\n    alerting_enabled: true\n</code></pre>"},{"location":"en/enterprise-features/#dynamic-configuration","title":"Dynamic Configuration","text":"<pre><code>-- Runtime configuration updates\nconfig.update({\n    ai = {\n        optimization_level = 9,  -- Increase optimization\n        learning_mode = \"aggressive\"\n    },\n    gitops = {\n        auto_sync_interval = \"2m\"  -- More frequent sync\n    }\n})\n</code></pre>"},{"location":"en/enterprise-features/#enterprise-integrations","title":"\ud83d\udcc8 Enterprise Integrations","text":""},{"location":"en/enterprise-features/#identity-providers","title":"Identity Providers","text":"<ul> <li>Active Directory: Seamless AD integration</li> <li>LDAP: Standard LDAP authentication</li> <li>SAML 2.0: Single sign-on support</li> <li>OAuth 2.0: Modern OAuth integration</li> <li>OIDC: OpenID Connect support</li> </ul>"},{"location":"en/enterprise-features/#monitoring-systems","title":"Monitoring Systems","text":"<ul> <li>Prometheus: Native Prometheus metrics</li> <li>Grafana: Pre-built dashboards</li> <li>DataDog: DataDog integration</li> <li>New Relic: APM integration</li> <li>Splunk: Log aggregation and analysis</li> </ul>"},{"location":"en/enterprise-features/#notification-systems","title":"Notification Systems","text":"<ul> <li>Slack: Real-time notifications</li> <li>Microsoft Teams: Team collaboration</li> <li>PagerDuty: Incident management</li> <li>Email: Traditional email notifications</li> <li>Webhooks: Custom integrations</li> </ul>"},{"location":"en/enterprise-features/#external-systems","title":"External Systems","text":"<ul> <li>JIRA: Issue tracking integration</li> <li>ServiceNow: ITSM integration</li> <li>HashiCorp Vault: Secrets management</li> <li>Consul: Service discovery</li> <li>Jenkins: CI/CD pipeline integration</li> </ul>"},{"location":"en/enterprise-features/#enterprise-support","title":"\ud83d\udcbc Enterprise Support","text":""},{"location":"en/enterprise-features/#support-tiers","title":"Support Tiers","text":""},{"location":"en/enterprise-features/#professional-support","title":"Professional Support","text":"<ul> <li>8x5 support coverage</li> <li>Email and chat support</li> <li>2-business-day response SLA</li> <li>Knowledge base access</li> </ul>"},{"location":"en/enterprise-features/#enterprise-support_1","title":"Enterprise Support","text":"<ul> <li>24x7 support coverage</li> <li>Phone, email, and chat support</li> <li>4-hour response SLA for critical issues</li> <li>Dedicated customer success manager</li> </ul>"},{"location":"en/enterprise-features/#premium-support","title":"Premium Support","text":"<ul> <li>24x7 priority support</li> <li>1-hour response SLA for critical issues</li> <li>Direct escalation to engineering</li> <li>Custom feature development</li> <li>On-site consulting available</li> </ul>"},{"location":"en/enterprise-features/#professional-services","title":"Professional Services","text":"<ul> <li>Implementation Services: Expert-guided implementation</li> <li>Training Programs: Comprehensive training for teams</li> <li>Custom Development: Tailored features and integrations</li> <li>Performance Optimization: System performance tuning</li> <li>Security Audits: Security assessment and hardening</li> </ul>"},{"location":"en/enterprise-features/#sla-guarantees","title":"SLA &amp; Guarantees","text":"<ul> <li>99.9% Uptime SLA: Guaranteed system availability</li> <li>Performance SLA: Response time guarantees</li> <li>Data Recovery: Backup and disaster recovery</li> <li>Security: Regular security assessments</li> </ul>"},{"location":"en/enterprise-features/#enterprise-documentation","title":"\ud83d\udcda Enterprise Documentation","text":""},{"location":"en/enterprise-features/#administrator-guides","title":"Administrator Guides","text":"<ul> <li>Installation &amp; Setup</li> <li>Security Configuration</li> <li>Monitoring Setup</li> <li>Backup &amp; Recovery</li> </ul>"},{"location":"en/enterprise-features/#operations-guides","title":"Operations Guides","text":"<ul> <li>Day-to-Day Operations</li> <li>Troubleshooting Guide</li> <li>Performance Tuning</li> <li>Scaling Guidelines</li> </ul>"},{"location":"en/enterprise-features/#developer-guides","title":"Developer Guides","text":"<ul> <li>Enterprise API</li> <li>Custom Integrations</li> <li>Plugin Development</li> <li>Advanced Workflows</li> </ul>"},{"location":"en/enterprise-features/#why-choose-sloth-runner-enterprise","title":"\ud83c\udfaf Why Choose Sloth Runner Enterprise?","text":""},{"location":"en/enterprise-features/#competitive-advantages","title":"Competitive Advantages","text":"Feature Sloth Runner Jenkins GitHub Actions GitLab CI AI Intelligence \u2705 Native \u274c None \u274c None \u274c None GitOps Native \u2705 Built-in \u26a0\ufe0f Plugins \u26a0\ufe0f External \u26a0\ufe0f Basic Modern DSL \u2705 Lua \u274c Groovy \u274c YAML \u274c YAML Distributed \u2705 Native \u26a0\ufe0f Complex \u274c Cloud-only \u26a0\ufe0f Limited Real-time UI \u2705 Built-in \u26a0\ufe0f Basic \u274c Limited \u26a0\ufe0f Basic Enterprise Security \u2705 Complete \u26a0\ufe0f Plugins \u26a0\ufe0f Cloud \u2705 Good"},{"location":"en/enterprise-features/#return-on-investment","title":"Return on Investment","text":"<ul> <li>50%+ Faster Deployments: AI optimization and GitOps automation</li> <li>90% Fewer Failures: AI failure prediction and prevention</li> <li>75% Less Maintenance: Self-healing and adaptive systems</li> <li>60% Faster Development: Modern DSL and intelligent workflows</li> </ul>"},{"location":"en/enterprise-features/#enterprise-success-stories","title":"Enterprise Success Stories","text":"<p>\"Sloth Runner's AI capabilities reduced our deployment failures by 85% and cut our release cycle time in half.\" \u2014 Senior DevOps Engineer, Fortune 500 Financial Services</p> <p>\"The GitOps native integration eliminated our need for external tools and reduced complexity by 70%.\" \u2014 Platform Architect, Global Technology Company</p> <p>\"AI-powered optimization improved our build times by 3x and saved us thousands in compute costs.\" \u2014 Engineering Director, Cloud-Native Startup</p>"},{"location":"en/enterprise-features/#get-started-with-enterprise","title":"\ud83d\ude80 Get Started with Enterprise","text":""},{"location":"en/enterprise-features/#contact-sales","title":"Contact Sales","text":"<p>Ready to transform your automation with AI-powered intelligence and GitOps native workflows?</p> <ul> <li>\ud83d\udce7 Email: enterprise@sloth-runner.dev</li> <li>\ud83d\udcde Phone: +1-800-SLOTH-AI</li> <li>\ud83d\udcac Chat: Enterprise Chat</li> <li>\ud83d\udcc5 Demo: Schedule Demo</li> </ul>"},{"location":"en/enterprise-features/#trial-options","title":"Trial Options","text":"<ul> <li>30-Day Free Trial: Full enterprise features</li> <li>Proof of Concept: Custom PoC with your data</li> <li>Pilot Program: Limited production deployment</li> <li>Migration Assistance: Expert-guided migration from existing tools</li> </ul> <p>\ud83c\udfe2 Sloth Runner Enterprise - The future of intelligent automation is here</p> <p>Trusted by Fortune 500 companies worldwide for mission-critical automation workflows.</p>"},{"location":"en/getting-started/","title":"\ud83d\ude80 Getting Started with Sloth Runner","text":"<p>Welcome to Sloth Runner - the AI-powered GitOps task orchestration platform! This guide will get you up and running in minutes.</p>"},{"location":"en/getting-started/#installation","title":"\ud83d\udce6 Installation","text":""},{"location":"en/getting-started/#quick-install-recommended","title":"Quick Install (Recommended)","text":"<p>Install the latest release with our automated script:</p> <pre><code>curl -sSL https://raw.githubusercontent.com/chalkan3-sloth/sloth-runner/main/install.sh | bash\n</code></pre> <p>This script: - \u2705 Detects your OS and architecture automatically - \u2705 Downloads the latest release from GitHub - \u2705 Installs to <code>/usr/local/bin</code> - \u2705 Verifies installation</p> <p>Note: Requires <code>sudo</code> privileges.</p>"},{"location":"en/getting-started/#manual-installation","title":"Manual Installation","text":"<p>Download from GitHub Releases:</p> <pre><code># Linux AMD64\nwget https://github.com/chalkan3-sloth/sloth-runner/releases/latest/download/sloth-runner-linux-amd64.tar.gz\ntar xzf sloth-runner-linux-amd64.tar.gz\nsudo mv sloth-runner /usr/local/bin/\n\n# macOS ARM64 (Apple Silicon)\nwget https://github.com/chalkan3-sloth/sloth-runner/releases/latest/download/sloth-runner-darwin-arm64.tar.gz\ntar xzf sloth-runner-darwin-arm64.tar.gz\nsudo mv sloth-runner /usr/local/bin/\n</code></pre>"},{"location":"en/getting-started/#verify-installation","title":"Verify Installation","text":"<pre><code>sloth-runner version\n</code></pre>"},{"location":"en/getting-started/#quick-start","title":"\ud83c\udfaf Quick Start","text":""},{"location":"en/getting-started/#your-first-workflow","title":"Your First Workflow","text":"<p>Create a simple workflow file <code>hello.sloth</code>:</p> <pre><code>-- hello.sloth\ntask(\"hello\")\n  :description(\"My first task\")\n  :command(function()\n    print(\"\ud83e\udda5 Hello from Sloth Runner!\")\n    return true\n  end)\n  :build()\n</code></pre> <p>Run it:</p> <pre><code>sloth-runner run -f hello.sloth\n</code></pre>"},{"location":"en/getting-started/#modern-output-styles","title":"Modern Output Styles","text":"<p>Try different output formats:</p> <pre><code># Basic output\nsloth-runner run -f hello.sloth -o basic\n\n# Enhanced with colors and icons\nsloth-runner run -f hello.sloth -o enhanced\n\n# Rich with progress bars\nsloth-runner run -f hello.sloth -o rich\n\n# Modern UI\nsloth-runner run -f hello.sloth -o modern\n\n# JSON for CI/CD\nsloth-runner run -f hello.sloth -o json\n</code></pre>"},{"location":"en/getting-started/#core-concepts","title":"\ud83d\udcda Core Concepts","text":""},{"location":"en/getting-started/#file-extension","title":"File Extension","text":"<p>\ud83d\udcdd Important: Sloth Runner uses <code>.sloth</code> extension for workflow files (not <code>.lua</code>). The syntax is still Lua - only the extension changed for better identification.</p>"},{"location":"en/getting-started/#tasks","title":"Tasks","text":"<p>Tasks are the building blocks. Define with the builder pattern:</p> <pre><code>task(\"build\")\n  :description(\"Build the application\")\n  :command(\"go build -o app\")\n  :build()\n\ntask(\"test\")\n  :description(\"Run tests\")\n  :command(\"go test ./...\")\n  :depends_on(\"build\")\n  :build()\n</code></pre>"},{"location":"en/getting-started/#task-groups","title":"Task Groups","text":"<p>Organize related tasks:</p> <pre><code>task_group(\"ci\")\n  :description(\"CI pipeline\")\n  :tasks({\"build\", \"test\", \"lint\"})\n</code></pre>"},{"location":"en/getting-started/#stack-management","title":"\ud83d\uddc2\ufe0f Stack Management","text":"<p>Stacks provide state persistence and environment isolation.</p>"},{"location":"en/getting-started/#create-a-stack","title":"Create a Stack","text":"<pre><code>sloth-runner stack new prod-app \\\n  -f deploy.sloth \\\n  --description \"Production deployment\"\n</code></pre>"},{"location":"en/getting-started/#run-with-stack","title":"Run with Stack","text":"<pre><code># Run workflow on stack\nsloth-runner run prod-app --yes\n\n# Check stack state\nsloth-runner stack show prod-app\n\n# List all stacks\nsloth-runner stack list\n</code></pre>"},{"location":"en/getting-started/#stack-benefits","title":"Stack Benefits","text":"<ul> <li>\u2705 State persistence between runs</li> <li>\u2705 Environment isolation</li> <li>\u2705 History tracking</li> <li>\u2705 Resource management</li> </ul>"},{"location":"en/getting-started/#modern-dsl-features","title":"\ud83c\udfa8 Modern DSL Features","text":""},{"location":"en/getting-started/#task-builder-api","title":"Task Builder API","text":"<pre><code>task(\"deploy\")\n  :description(\"Deploy to production\")\n  :condition(function() return os.getenv(\"ENV\") == \"prod\" end)\n  :command(function()\n    log.info(\"Deploying...\")\n    return exec.run(\"kubectl apply -f k8s/\")\n  end)\n  :on_success(function()\n    log.success(\"\u2705 Deployed successfully!\")\n  end)\n  :on_error(function(err)\n    log.error(\"\u274c Deployment failed: \" .. err)\n  end)\n  :timeout(300)\n  :retry(3)\n  :build()\n</code></pre>"},{"location":"en/getting-started/#values-files","title":"Values Files","text":"<p>Parameterize workflows with values files:</p> <p>values.yaml: <pre><code>environment: production\nreplicas: 3\nimage: myapp:v1.2.3\n</code></pre></p> <p>deploy.sloth: <pre><code>local env = values.environment\nlocal replicas = values.replicas\n\ntask(\"deploy\")\n  :command(function()\n    log.info(\"Deploying to \" .. env)\n    log.info(\"Replicas: \" .. replicas)\n  end)\n  :build()\n</code></pre></p> <p>Run with values:</p> <pre><code>sloth-runner run -f deploy.sloth -v values.yaml\n</code></pre>"},{"location":"en/getting-started/#built-in-modules","title":"\ud83e\udd16 Built-in Modules","text":"<p>Sloth Runner includes powerful built-in modules:</p>"},{"location":"en/getting-started/#example-docker-deployment","title":"Example: Docker Deployment","text":"<pre><code>local docker = require(\"docker\")\n\ntask(\"deploy_container\")\n  :command(function()\n    -- Pull image\n    docker.pull(\"nginx:latest\")\n\n    -- Run container\n    docker.run({\n      image = \"nginx:latest\",\n      name = \"web-server\",\n      ports = {\"80:80\"},\n      detach = true\n    })\n\n    return true\n  end)\n  :build()\n</code></pre>"},{"location":"en/getting-started/#available-modules","title":"Available Modules","text":"<ul> <li>\ud83d\udc33 docker - Container management</li> <li>\u2601\ufe0f aws, azure, gcp - Cloud providers</li> <li>\ud83d\udd27 systemd - Service management</li> <li>\ud83d\udce6 pkg - Package management</li> <li>\ud83d\udcca metrics - Monitoring</li> <li>\ud83d\udd10 vault - Secrets management</li> <li>\ud83c\udf0d terraform - Infrastructure as Code</li> </ul> <p>See all modules \u2192</p>"},{"location":"en/getting-started/#common-workflows","title":"\ud83c\udfad Common Workflows","text":""},{"location":"en/getting-started/#cicd-pipeline","title":"CI/CD Pipeline","text":"<pre><code>task(\"lint\")\n  :command(\"golangci-lint run\")\n  :build()\n\ntask(\"test\")\n  :command(\"go test -v ./...\")\n  :depends_on(\"lint\")\n  :build()\n\ntask(\"build\")\n  :command(\"go build -o app\")\n  :depends_on(\"test\")\n  :build()\n\ntask(\"deploy\")\n  :command(function()\n    exec.run(\"docker build -t myapp .\")\n    exec.run(\"docker push myapp\")\n    exec.run(\"kubectl rollout restart deployment/myapp\")\n  end)\n  :depends_on(\"build\")\n  :build()\n</code></pre> <p>Run the pipeline:</p> <pre><code>sloth-runner run -f pipeline.sloth -o rich\n</code></pre>"},{"location":"en/getting-started/#infrastructure-automation","title":"Infrastructure Automation","text":"<pre><code>local terraform = require(\"terraform\")\n\ntask(\"plan\")\n  :command(function()\n    return terraform.plan({\n      dir = \"./terraform\",\n      var_file = \"prod.tfvars\"\n    })\n  end)\n  :build()\n\ntask(\"apply\")\n  :command(function()\n    return terraform.apply({\n      dir = \"./terraform\",\n      auto_approve = true\n    })\n  end)\n  :depends_on(\"plan\")\n  :build()\n</code></pre>"},{"location":"en/getting-started/#distributed-execution","title":"\ud83c\udf10 Distributed Execution","text":""},{"location":"en/getting-started/#start-master-server","title":"Start Master Server","text":"<pre><code>sloth-runner master --port 50053 --daemon\n</code></pre>"},{"location":"en/getting-started/#start-agents","title":"Start Agents","text":"<p>On different servers:</p> <pre><code># Web server agent\nsloth-runner agent start \\\n  --master master.example.com:50053 \\\n  --name web-01 \\\n  --tags web,nginx\n\n# Database agent  \nsloth-runner agent start \\\n  --master master.example.com:50053 \\\n  --name db-01 \\\n  --tags database,postgres\n</code></pre>"},{"location":"en/getting-started/#distribute-tasks","title":"Distribute Tasks","text":"<pre><code>task(\"deploy_web\")\n  :target_agent(\"web-01\")\n  :command(\"nginx -s reload\")\n  :build()\n\ntask(\"backup_db\")\n  :target_agent(\"db-01\")\n  :command(\"pg_dump mydb &gt; backup.sql\")\n  :build()\n</code></pre>"},{"location":"en/getting-started/#web-dashboard","title":"\ud83d\udcca Web Dashboard","text":"<p>Start the UI for visual management:</p> <pre><code>sloth-runner ui --port 8080\n</code></pre> <p>Access at: <code>http://localhost:8080</code></p> <p>Features: - \ud83d\udcc8 Real-time task monitoring - \ud83e\udd16 Agent health dashboard - \ud83d\udcc5 Scheduler management - \ud83d\udce6 Stack browser - \ud83d\udcca Metrics and analytics</p>"},{"location":"en/getting-started/#scheduler","title":"\ud83d\udd04 Scheduler","text":"<p>Schedule recurring tasks:</p> <pre><code>-- In your workflow\nschedule(\"nightly_backup\")\n  :cron(\"0 2 * * *\")  -- 2 AM daily\n  :task(\"backup\")\n  :build()\n</code></pre> <p>Manage from CLI:</p> <pre><code># Enable scheduler\nsloth-runner scheduler enable\n\n# List scheduled tasks\nsloth-runner scheduler list\n\n# Disable scheduler\nsloth-runner scheduler disable\n</code></pre>"},{"location":"en/getting-started/#tips-best-practices","title":"\ud83d\udca1 Tips &amp; Best Practices","text":""},{"location":"en/getting-started/#1-use-stacks-for-state-management","title":"1. Use Stacks for State Management","text":"<pre><code># \u2705 Good: Use stacks\nsloth-runner stack new myapp\nsloth-runner run myapp\n\n# \u274c Avoid: Direct execution without state\nsloth-runner run -f workflow.sloth\n</code></pre>"},{"location":"en/getting-started/#2-choose-the-right-output-format","title":"2. Choose the Right Output Format","text":"<pre><code># Interactive terminal\nsloth-runner run -f deploy.sloth -o rich\n\n# CI/CD pipelines\nsloth-runner run -f ci.sloth -o json\n\n# Simple scripts\nsloth-runner run -f task.sloth -o basic\n</code></pre>"},{"location":"en/getting-started/#3-use-values-files-for-environments","title":"3. Use Values Files for Environments","text":"<pre><code># Development\nsloth-runner run -f app.sloth -v dev-values.yaml\n\n# Production\nsloth-runner run -f app.sloth -v prod-values.yaml\n</code></pre>"},{"location":"en/getting-started/#4-leverage-built-in-modules","title":"4. Leverage Built-in Modules","text":"<pre><code>-- \u274c Don't shell out unnecessarily\ntask(\"install\"):command(\"apt-get install nginx\"):build()\n\n-- \u2705 Use built-in modules\nlocal pkg = require(\"pkg\")\ntask(\"install\"):command(function()\n  return pkg.install(\"nginx\")\nend):build()\n</code></pre>"},{"location":"en/getting-started/#next-steps","title":"\ud83d\udcd6 Next Steps","text":"<p>Now that you're started, explore more:</p> <ul> <li>\ud83d\udcd8 Core Concepts - Deep dive into architecture</li> <li>\ud83c\udfa8 Modern DSL - Advanced syntax</li> <li>\ud83d\udd27 CLI Reference - All commands</li> <li>\ud83d\udce6 Modules - Built-in capabilities</li> <li>\ud83c\udfad Examples - Real-world workflows</li> <li>\ud83e\udd16 AI Features - Intelligent optimization</li> <li>\ud83d\ude80 GitOps - Automated deployments</li> </ul>"},{"location":"en/getting-started/#getting-help","title":"\ud83c\udd98 Getting Help","text":"<ul> <li>\ud83d\udcd6 Documentation: Full docs</li> <li>\ud83d\udcac Community: GitHub Discussions</li> <li>\ud83d\udc1b Issues: Bug Reports</li> <li>\ud83d\udcdd Examples: Example Repository</li> </ul> <p>Ready to automate? Create your first workflow and start orchestrating! \ud83d\ude80</p> <p>English | Portugu\u00eas | \u4e2d\u6587</p>"},{"location":"en/gitops-features/","title":"\ud83d\udd04 GitOps Native Workflows","text":"<p>\ud83c\udf1f World's First Native GitOps Task Runner Sloth Runner revolutionizes deployment automation with built-in GitOps workflows, making infrastructure-as-code truly seamless.</p>"},{"location":"en/gitops-features/#overview","title":"\ud83c\udf0a Overview","text":"<p>GitOps Native brings declarative, Git-driven deployment workflows directly into your task automation. No external tools needed - everything is built-in and ready to use.</p>"},{"location":"en/gitops-features/#key-gitops-features","title":"\u2728 Key GitOps Features","text":""},{"location":"en/gitops-features/#declarative-workflows","title":"\ud83d\udd04 Declarative Workflows","text":"<ul> <li>Zero Configuration: Works out-of-the-box with any Git repository</li> <li>Multi-Repository: Manage multiple repos in a single workflow</li> <li>Branch Strategies: Support for GitFlow, GitHub Flow, and custom strategies</li> </ul>"},{"location":"en/gitops-features/#intelligent-diff-preview","title":"\ud83d\udd0d Intelligent Diff Preview","text":"<ul> <li>Visual Changes: See exactly what will change before deployment</li> <li>Conflict Detection: Automatic detection and resolution of conflicts</li> <li>Impact Analysis: Understand the impact of changes before applying</li> </ul>"},{"location":"en/gitops-features/#smart-rollback","title":"\ud83d\udee1\ufe0f Smart Rollback","text":"<ul> <li>Automatic Rollback: Roll back on failure detection</li> <li>State Backup: Automatic backup before every deployment</li> <li>Multiple Strategies: Rollback to previous commit, timestamp, or state</li> </ul>"},{"location":"en/gitops-features/#multi-environment-support","title":"\ud83c\udfe2 Multi-Environment Support","text":"<ul> <li>Environment Isolation: Separate workflows for dev/staging/production</li> <li>Progressive Deployment: Automatic promotion through environments</li> <li>Approval Gates: Manual approval for production deployments</li> </ul>"},{"location":"en/gitops-features/#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"en/gitops-features/#simple-gitops-workflow","title":"Simple GitOps Workflow","text":"<pre><code>local gitops = require(\"gitops\")\n\n-- Create a GitOps workflow with minimal configuration\nlocal workflow = gitops.workflow({\n    repo = \"https://github.com/company/infrastructure\",\n    branch = \"main\",\n    auto_sync = true,\n    diff_preview = true,\n    rollback_on_failure = true\n})\n\n-- That's it! GitOps is now active\nlog.info(\"GitOps workflow created: \" .. workflow.workflow_id)\n</code></pre>"},{"location":"en/gitops-features/#advanced-multi-environment-setup","title":"Advanced Multi-Environment Setup","text":"<pre><code>local gitops = require(\"gitops\")\n\n-- Define environments with different configurations\nlocal environments = {\n    {\n        name = \"development\",\n        repo = \"https://github.com/company/k8s-dev\",\n        branch = \"develop\",\n        auto_sync = true,        -- Auto-deploy in dev\n        sync_interval = \"5m\"\n    },\n    {\n        name = \"staging\",\n        repo = \"https://github.com/company/k8s-staging\", \n        branch = \"staging\",\n        auto_sync = true,        -- Auto-deploy in staging\n        sync_interval = \"10m\"\n    },\n    {\n        name = \"production\",\n        repo = \"https://github.com/company/k8s-prod\",\n        branch = \"main\",\n        auto_sync = false,       -- Manual deploys in production\n        approval_required = true\n    }\n}\n\n-- Create workflows for all environments\nfor _, env in ipairs(environments) do\n    local workflow_id = gitops.create_workflow({\n        name = env.name .. \" Environment\",\n        repository = gitops.register_repository({\n            url = env.repo,\n            branch = env.branch\n        }),\n        auto_sync = env.auto_sync,\n        diff_preview = true,\n        rollback_on_failure = true\n    })\n\n    log.info(\"Created GitOps workflow for \" .. env.name .. \": \" .. workflow_id)\nend\n</code></pre>"},{"location":"en/gitops-features/#diff-preview-change-analysis","title":"\ud83d\udd0d Diff Preview &amp; Change Analysis","text":""},{"location":"en/gitops-features/#preview-changes-before-deployment","title":"Preview Changes Before Deployment","text":"<pre><code>local deploy_task = task(\"preview_and_deploy\")\n    :description(\"Preview changes before deploying\")\n    :command(function(params, deps)\n        local workflow_id = params.workflow_id\n\n        -- Generate comprehensive diff\n        local diff = gitops.generate_diff(workflow_id)\n\n        if not diff then\n            log.info(\"\u2139\ufe0f No changes detected\")\n            return {success = true, message = \"No changes to deploy\"}\n        end\n\n        -- Display change summary\n        log.info(\"\ud83d\udcca Deployment Summary:\")\n        log.info(\"  \ud83d\udcdd Total changes: \" .. diff.summary.total_changes)\n        log.info(\"  \u2728 Created: \" .. diff.summary.created_resources)\n        log.info(\"  \ud83d\udd04 Updated: \" .. diff.summary.updated_resources)\n        log.info(\"  \ud83d\uddd1\ufe0f Deleted: \" .. diff.summary.deleted_resources)\n\n        -- Check for conflicts\n        if diff.summary.conflict_count &gt; 0 then\n            log.warn(\"\u26a0\ufe0f Conflicts detected:\")\n            for _, conflict in ipairs(diff.conflicts) do\n                log.warn(\"  \u274c \" .. conflict.resource .. \": \" .. conflict.description)\n            end\n\n            return {success = false, message = \"Conflicts must be resolved before deployment\"}\n        end\n\n        -- Check for high-impact changes\n        local high_impact_changes = 0\n        for _, change in ipairs(diff.changes) do\n            if change.impact == \"high\" or change.impact == \"critical\" then\n                high_impact_changes = high_impact_changes + 1\n                log.warn(\"\u26a0\ufe0f High-impact change: \" .. change.resource .. \" (\" .. change.type .. \")\")\n            end\n        end\n\n        -- Show warnings\n        if #diff.warnings &gt; 0 then\n            log.warn(\"\u26a0\ufe0f Warnings:\")\n            for _, warning in ipairs(diff.warnings) do\n                log.warn(\"  \u2022 \" .. warning)\n            end\n        end\n\n        -- Require confirmation for high-impact changes\n        if high_impact_changes &gt; 0 then\n            print(\"Proceed with \" .. high_impact_changes .. \" high-impact changes? (y/N)\")\n            local response = io.read()\n            if response:lower() ~= \"y\" then\n                return {success = false, message = \"Deployment cancelled by user\"}\n            end\n        end\n\n        -- Execute deployment\n        log.info(\"\ud83d\ude80 Executing deployment...\")\n        return gitops.sync_workflow(workflow_id)\n    end)\n    :build()\n</code></pre>"},{"location":"en/gitops-features/#sync-strategies","title":"\ud83d\udd04 Sync Strategies","text":""},{"location":"en/gitops-features/#automatic-synchronization","title":"Automatic Synchronization","text":"<pre><code>-- Enable auto-sync for non-production environments\nlocal dev_workflow = gitops.workflow({\n    repo = \"https://github.com/company/dev-config\",\n    auto_sync = true,\n    sync_interval = \"5m\",     -- Check for changes every 5 minutes\n    diff_preview = true,\n    rollback_on_failure = true\n})\n\n-- Start the auto-sync controller\ngitops.start_auto_sync()\nlog.info(\"\ud83d\udd04 Auto-sync controller started\")\n</code></pre>"},{"location":"en/gitops-features/#manual-synchronization-with-validation","title":"Manual Synchronization with Validation","text":"<pre><code>local production_deploy = task(\"production_deploy\")\n    :description(\"Manual production deployment with full validation\")\n    :command(function(params, deps)\n        local workflow_id = params.workflow_id\n\n        -- Step 1: Generate and review diff\n        local diff = gitops.generate_diff(workflow_id)\n\n        -- Step 2: Run pre-deployment validations\n        log.info(\"\ud83d\udd0d Running pre-deployment validations...\")\n\n        -- Check for breaking changes\n        local breaking_changes = false\n        for _, change in ipairs(diff.changes) do\n            if change.type == \"delete\" and change.resource:match(\"PersistentVolume\") then\n                breaking_changes = true\n                log.error(\"\ud83d\udca5 Breaking change detected: Deleting PersistentVolume\")\n            end\n        end\n\n        if breaking_changes then\n            return {success = false, message = \"Breaking changes detected - manual review required\"}\n        end\n\n        -- Step 3: Execute deployment\n        log.info(\"\ud83d\ude80 Executing production deployment...\")\n        local sync_result = gitops.sync_workflow(workflow_id)\n\n        if not sync_result then\n            log.error(\"\ud83d\udca5 Deployment failed!\")\n            return {success = false, message = \"Deployment failed\"}\n        end\n\n        -- Step 4: Verify deployment\n        log.info(\"\ud83d\udd0d Verifying deployment...\")\n        local status = gitops.get_workflow_status(workflow_id)\n\n        if status.status == \"synced\" and status.last_sync_result.status == \"succeeded\" then\n            log.info(\"\u2705 Production deployment successful!\")\n            return {success = true, message = \"Production deployed successfully\"}\n        else\n            log.error(\"\ud83d\udca5 Deployment verification failed!\")\n            return {success = false, message = \"Deployment verification failed\"}\n        end\n    end)\n    :build()\n</code></pre>"},{"location":"en/gitops-features/#rollback-strategies","title":"\ud83d\udee1\ufe0f Rollback Strategies","text":""},{"location":"en/gitops-features/#automatic-rollback-on-failure","title":"Automatic Rollback on Failure","text":"<pre><code>local resilient_deploy = task(\"resilient_deploy\")\n    :description(\"Deploy with automatic rollback on failure\")\n    :command(function(params, deps)\n        local workflow_id = params.workflow_id\n\n        -- Deploy with automatic rollback enabled\n        local sync_result = gitops.sync_workflow(workflow_id)\n\n        if not sync_result then\n            log.warn(\"\ud83d\udd04 Deployment failed, automatic rollback initiated\")\n\n            -- GitOps will automatically rollback due to rollback_on_failure = true\n            -- But we can also trigger manual rollback\n            local rollback_result = gitops.rollback_workflow(workflow_id, \"Deployment failed\")\n\n            if rollback_result then\n                log.info(\"\u2705 Rollback completed successfully\")\n                return {success = false, message = \"Deployment failed but rollback successful\"}\n            else\n                log.error(\"\ud83d\udca5 Rollback failed!\")\n                return {success = false, message = \"Deployment and rollback both failed\"}\n            end\n        end\n\n        return {success = true, message = \"Deployment successful\"}\n    end)\n    :build()\n</code></pre>"},{"location":"en/gitops-features/#manual-rollback","title":"Manual Rollback","text":"<pre><code>local manual_rollback = task(\"manual_rollback\")\n    :description(\"Manual rollback to previous state\")\n    :command(function(params, deps)\n        local workflow_id = params.workflow_id\n        local reason = params.reason or \"Manual rollback requested\"\n\n        log.info(\"\ud83d\udd04 Initiating manual rollback...\")\n        log.info(\"\ud83d\udccb Reason: \" .. reason)\n\n        local rollback_result = gitops.rollback_workflow(workflow_id, reason)\n\n        if rollback_result then\n            log.info(\"\u2705 Manual rollback completed successfully\")\n\n            -- Verify rollback\n            local status = gitops.get_workflow_status(workflow_id)\n            log.info(\"\ud83d\udcca Current status: \" .. status.status)\n\n            return {success = true, message = \"Manual rollback completed\"}\n        else\n            log.error(\"\ud83d\udca5 Manual rollback failed!\")\n            return {success = false, message = \"Manual rollback failed\"}\n        end\n    end)\n    :build()\n</code></pre>"},{"location":"en/gitops-features/#kubernetes-integration","title":"\u2638\ufe0f Kubernetes Integration","text":""},{"location":"en/gitops-features/#native-kubernetes-workflows","title":"Native Kubernetes Workflows","text":"<pre><code>local k8s_gitops = task(\"kubernetes_gitops\")\n    :description(\"GitOps for Kubernetes manifests\")\n    :command(function(params, deps)\n        -- Create GitOps workflow for Kubernetes\n        local k8s_workflow = gitops.workflow({\n            repo = \"https://github.com/company/k8s-manifests\",\n            branch = \"main\",\n            target_path = \"manifests/production\",  -- Focus on specific directory\n            auto_sync = false,\n            diff_preview = true,\n            rollback_on_failure = true\n        })\n\n        -- Preview Kubernetes changes\n        local diff = gitops.generate_diff(k8s_workflow.workflow_id)\n\n        -- Kubernetes-specific validations\n        local k8s_issues = {}\n        for _, change in ipairs(diff.changes) do\n            -- Check for dangerous operations\n            if change.type == \"delete\" and change.resource:match(\"Namespace\") then\n                table.insert(k8s_issues, \"Deleting namespace: \" .. change.resource)\n            end\n\n            if change.type == \"update\" and change.resource:match(\"Deployment\") then\n                -- Check for image changes\n                log.info(\"\ud83d\udce6 Deployment update detected: \" .. change.resource)\n            end\n        end\n\n        if #k8s_issues &gt; 0 then\n            log.warn(\"\u26a0\ufe0f Kubernetes issues detected:\")\n            for _, issue in ipairs(k8s_issues) do\n                log.warn(\"  \u2022 \" .. issue)\n            end\n        end\n\n        -- Deploy to Kubernetes\n        return gitops.sync_workflow(k8s_workflow.workflow_id)\n    end)\n    :build()\n</code></pre>"},{"location":"en/gitops-features/#gitops-api-reference","title":"\ud83d\udcca GitOps API Reference","text":""},{"location":"en/gitops-features/#workflow-management","title":"Workflow Management","text":"<pre><code>-- Create simple workflow\nlocal workflow = gitops.workflow({\n    repo = \"https://github.com/org/repo\",\n    branch = \"main\",\n    auto_sync = true,\n    diff_preview = true,\n    rollback_on_failure = true\n})\n\n-- Create detailed workflow\nlocal workflow_id = gitops.create_workflow({\n    name = \"Production Infrastructure\",\n    repository = repo_id,\n    target_path = \"k8s/production\",\n    auto_sync = false,\n    diff_preview = true,\n    rollback_on_failure = true\n})\n</code></pre>"},{"location":"en/gitops-features/#repository-management","title":"Repository Management","text":"<pre><code>-- Register repository\nlocal repo_id = gitops.register_repository({\n    url = \"https://github.com/company/infrastructure\",\n    branch = \"main\",\n    credentials = {\n        type = \"token\",\n        token = \"ghp_xxxxx\"\n    }\n})\n</code></pre>"},{"location":"en/gitops-features/#sync-operations","title":"Sync Operations","text":"<pre><code>-- Manual sync\nlocal success = gitops.sync_workflow(workflow_id)\n\n-- Get workflow status\nlocal status = gitops.get_workflow_status(workflow_id)\n\n-- List all workflows\nlocal workflows = gitops.list_workflows()\n</code></pre>"},{"location":"en/gitops-features/#diff-and-preview","title":"Diff and Preview","text":"<pre><code>-- Generate diff\nlocal diff = gitops.generate_diff(workflow_id)\n\n-- Alias for diff\nlocal preview = gitops.preview_changes(workflow_id)\n</code></pre>"},{"location":"en/gitops-features/#rollback-operations","title":"Rollback Operations","text":"<pre><code>-- Rollback workflow\nlocal success = gitops.rollback_workflow(workflow_id, \"Reason for rollback\")\n</code></pre>"},{"location":"en/gitops-features/#auto-sync-control","title":"Auto-Sync Control","text":"<pre><code>-- Start auto-sync for all auto_sync=true workflows\ngitops.start_auto_sync()\n\n-- Stop auto-sync\ngitops.stop_auto_sync()\n</code></pre>"},{"location":"en/gitops-features/#best-practices","title":"\ud83c\udfaf Best Practices","text":""},{"location":"en/gitops-features/#1-environment-strategy","title":"1. Environment Strategy","text":"<pre><code>-- Use different repositories for different environments\nlocal environments = {\n    dev = {repo = \"company/k8s-dev\", auto_sync = true},\n    staging = {repo = \"company/k8s-staging\", auto_sync = true},\n    prod = {repo = \"company/k8s-prod\", auto_sync = false}\n}\n</code></pre>"},{"location":"en/gitops-features/#2-always-preview-in-production","title":"2. Always Preview in Production","text":"<pre><code>-- Never deploy to production without diff preview\nif environment == \"production\" then\n    local diff = gitops.generate_diff(workflow_id)\n    if diff.summary.conflict_count &gt; 0 then\n        error(\"Conflicts detected in production deployment!\")\n    end\nend\n</code></pre>"},{"location":"en/gitops-features/#3-use-descriptive-rollback-reasons","title":"3. Use Descriptive Rollback Reasons","text":"<pre><code>-- Provide clear reasons for rollbacks\ngitops.rollback_workflow(workflow_id, \"Health check failed after 5 minutes\")\n</code></pre>"},{"location":"en/gitops-features/#4-monitor-sync-results","title":"4. Monitor Sync Results","text":"<pre><code>-- Always check sync results\nlocal status = gitops.get_workflow_status(workflow_id)\nif status.last_sync_result.status ~= \"succeeded\" then\n    -- Handle failure\nend\n</code></pre>"},{"location":"en/gitops-features/#advanced-configuration","title":"\ud83d\udd27 Advanced Configuration","text":""},{"location":"en/gitops-features/#multi-repository-workflows","title":"Multi-Repository Workflows","text":"<pre><code>-- Coordinate multiple repositories\nlocal frontend_workflow = gitops.workflow({\n    repo = \"https://github.com/company/frontend-config\"\n})\n\nlocal backend_workflow = gitops.workflow({\n    repo = \"https://github.com/company/backend-config\"\n})\n\nlocal database_workflow = gitops.workflow({\n    repo = \"https://github.com/company/database-config\"\n})\n\n-- Deploy in sequence\ngitops.sync_workflow(database_workflow.workflow_id)\ngitops.sync_workflow(backend_workflow.workflow_id)\ngitops.sync_workflow(frontend_workflow.workflow_id)\n</code></pre>"},{"location":"en/gitops-features/#custom-sync-policies","title":"Custom Sync Policies","text":"<pre><code>local workflow_id = gitops.create_workflow({\n    name = \"Custom Sync Policy\",\n    repository = repo_id,\n    sync_policy = {\n        auto_prune = true,\n        retry = {\n            limit = 5,\n            backoff = \"exponential\"\n        },\n        health_check = {\n            enabled = true,\n            timeout = \"10m\"\n        }\n    }\n})\n</code></pre>"},{"location":"en/gitops-features/#examples","title":"\ud83e\uddea Examples","text":"<p>Explore our comprehensive GitOps Examples directory:</p> <ul> <li>Multi-Environment Deployments: Dev/Staging/Prod workflows</li> <li>Kubernetes GitOps: Native K8s integration</li> <li>Blue-Green Deployments: Zero-downtime deployment strategies</li> <li>Canary Releases: Gradual rollout strategies</li> <li>Disaster Recovery: Backup and restore workflows</li> </ul>"},{"location":"en/gitops-features/#whats-next","title":"\ud83d\ude80 What's Next?","text":"<p>GitOps Native is continuously evolving. Upcoming features include:</p> <ul> <li>\ud83c\udfaf ArgoCD Integration: Seamless integration with ArgoCD</li> <li>\ud83d\udd04 Flux Compatibility: Work with Flux workflows  </li> <li>\ud83d\udcca Advanced Metrics: Deployment success rates and performance metrics</li> <li>\ud83c\udf10 Multi-Cluster: Deploy across multiple Kubernetes clusters</li> <li>\ud83d\udee1\ufe0f Policy Enforcement: OPA/Gatekeeper integration for policy validation</li> </ul> <p>\ud83d\udd04 Ready to revolutionize your deployments? Start with our GitOps Quick Setup Guide or explore the complete API reference.</p>"},{"location":"en/master-agent-architecture/","title":"Sloth-Runner Master-Agent Architecture","text":"<p><code>sloth-runner</code> is designed with a master-agent architecture to facilitate distributed task execution. This allows you to orchestrate and run tasks across multiple remote machines from a central control point.</p>"},{"location":"en/master-agent-architecture/#core-concepts","title":"Core Concepts","text":""},{"location":"en/master-agent-architecture/#master-server","title":"Master Server","text":"<p>The Master Server is the central component of the <code>sloth-runner</code> ecosystem. Its primary responsibilities include:</p> <ul> <li>Agent Registry: Maintains a registry of all connected and available agents.</li> <li>Task Orchestration: Receives task execution requests and dispatches them to the appropriate agents.</li> <li>Communication Hub: Acts as the communication hub between the user (via the CLI) and the agents.</li> </ul>"},{"location":"en/master-agent-architecture/#agent","title":"Agent","text":"<p>An Agent is a lightweight process that runs on a remote machine. Its main functions are:</p> <ul> <li>Registration: Registers itself with the Master Server upon startup, providing its network address and name.</li> <li>Task Execution: Receives commands and tasks from the Master Server and executes them locally.</li> <li>Status Reporting: Reports the status and output of executed tasks back to the Master Server.</li> </ul>"},{"location":"en/master-agent-architecture/#communication-protocol","title":"Communication Protocol","text":"<p>Master and Agents communicate using gRPC, a high-performance, open-source universal RPC framework. This ensures efficient and reliable communication between the distributed components.</p>"},{"location":"en/master-agent-architecture/#installation-and-startup","title":"Installation and Startup","text":""},{"location":"en/master-agent-architecture/#master-server-installation","title":"Master Server Installation","text":"<p>To set up the <code>sloth-runner</code> Master Server, you typically run it on your local machine or a designated control server. The master listens for agent connections on a specified port.</p> <p>Command:</p> <pre><code>go run ./cmd/sloth-runner master -p &lt;port&gt; [--daemon]\n</code></pre> <ul> <li><code>-p, --port &lt;port&gt;</code>: Specifies the port on which the master server will listen for agent connections. The default port is <code>50053</code>.</li> <li><code>--daemon</code>: (Optional) Runs the master server as a background daemon process. This is recommended for continuous operation.</li> </ul> <p>Example:</p> <p>To start the master server on port <code>50053</code> in daemon mode:</p> <pre><code>go run ./cmd/sloth-runner master -p 50053 --daemon\n</code></pre> <p>Upon successful startup, the master will log that it is listening for agent registrations.</p>"},{"location":"en/master-agent-architecture/#agent-installation","title":"Agent Installation","text":"<p>Agents are deployed on the remote machines where you intend to execute tasks. Each agent needs to be configured with a unique name and the address of the Master Server.</p> <p>Command:</p> <pre><code>sloth-runner agent start --name &lt;agent_name&gt; --master &lt;master_ip&gt;:&lt;master_port&gt; --port &lt;agent_port&gt; --bind-address &lt;agent_ip&gt; [--daemon]\n</code></pre> <ul> <li><code>--name &lt;agent_name&gt;</code>: A unique name for this agent (e.g., <code>agent1</code>, <code>web-server-agent</code>). This name is used by the master to identify and address the agent.</li> <li><code>--master &lt;master_ip&gt;:&lt;master_port&gt;</code>: The IP address and port of the running Master Server. Agents will connect to this address to register and receive tasks.</li> <li><code>--port &lt;agent_port&gt;</code>: The port on which the agent itself will listen for direct communication from the master (e.g., for task execution requests). The default port is <code>50051</code>.</li> <li><code>--bind-address &lt;agent_ip&gt;</code>: Crucial for remote agents. This specifies the specific IPv4 address that the agent should bind to and report to the master. This ensures the master can correctly connect to the agent, especially in environments with multiple network interfaces or IPv6 preference. Always set this to the remote machine's accessible IPv4 address.</li> <li><code>--daemon</code>: (Optional) Runs the agent as a background daemon process.</li> </ul> <p>Example:</p> <p>To start an agent named <code>agent1</code> on a machine with IP <code>192.168.1.16</code>, connecting to a master at <code>192.168.1.21:50053</code>, and listening on port <code>50051</code>:</p> <pre><code>sloth-runner agent start --name agent1 --master 192.168.1.21:50053 --port 50051 --bind-address 192.168.1.16 --daemon\n</code></pre>"},{"location":"en/master-agent-architecture/#task-execution-workflow","title":"Task Execution Workflow","text":"<ol> <li>Master Startup: The <code>sloth-runner</code> master server starts and begins listening for agent registrations.</li> <li>Agent Startup &amp; Registration: An agent starts on a remote machine, connects to the configured master, and registers itself, providing its unique name and accessible network address.</li> <li>Agent Listing: The user can list all registered agents using <code>sloth-runner agent list</code> from the master's machine.</li> <li>Task Request: The user initiates a task execution on a specific agent using <code>sloth-runner agent run &lt;agent_name&gt; &lt;command&gt;</code>.</li> <li>Task Dispatch: The master receives the request, looks up the agent's address in its registry, and dispatches the command to the target agent via gRPC.</li> <li>Task Execution: The agent receives the command, executes it locally (e.g., using <code>bash -c &lt;command&gt;</code>), and captures its standard output, standard error, and exit status.</li> <li>Result Reporting: The agent sends the execution results (stdout, stderr, success/failure) back to the master.</li> <li>Output Presentation: The master receives the results and presents them to the user in a clear, formatted, and colored output (as described in the Enhanced <code>sloth-runner agent run</code> Output documentation).</li> </ol> <p>This architecture provides a flexible and scalable way to manage and execute tasks across your infrastructure. </p>"},{"location":"en/monitoring/","title":"\ud83d\udcca Monitoring","text":"<p>Comprehensive monitoring and observability for your workflows.</p>"},{"location":"en/monitoring/#overview","title":"Overview","text":"<p>Built-in monitoring capabilities:</p> <ul> <li>\ud83d\udcc8 Metrics collection</li> <li>\ud83d\udcca Dashboard visualization</li> <li>\u26a0\ufe0f Alerting</li> <li>\ud83d\udd0d Distributed tracing</li> </ul>"},{"location":"en/monitoring/#features","title":"Features","text":""},{"location":"en/monitoring/#metrics","title":"Metrics","text":"<p>Automatic collection of workflow metrics: - Execution time - Success/failure rates - Resource usage - Task dependencies</p>"},{"location":"en/monitoring/#web-dashboard","title":"Web Dashboard","text":"<p>Real-time visualization: - Workflow status - Task progress - Agent health - System metrics</p>"},{"location":"en/monitoring/#alerting","title":"Alerting","text":"<p>Configurable alerts: <pre><code>workflow.define(\"monitored_workflow\", {\n    monitoring = {\n        alerts = {\n            on_failure = true,\n            on_slow_execution = { threshold = \"10m\" },\n            channels = [\"slack\", \"email\"]\n        }\n    }\n})\n</code></pre></p>"},{"location":"en/monitoring/#integration","title":"Integration","text":"<p>Works with popular monitoring tools: - Prometheus - Grafana - Datadog - New Relic</p>"},{"location":"en/monitoring/#learn-more","title":"Learn More","text":"<ul> <li>Web Dashboard</li> <li>Metrics Module</li> </ul>"},{"location":"en/nvim-plugin/","title":"\ud83e\udda5 Neovim Plugin","text":"<p>IDE-grade support for Sloth Runner DSL in Neovim/LunarVim</p> <p>The Sloth Runner Neovim plugin provides comprehensive IDE features for working with <code>.sloth</code> workflow files, including syntax highlighting, code completion, and integrated task execution.</p>"},{"location":"en/nvim-plugin/#features","title":"\u2728 Features","text":""},{"location":"en/nvim-plugin/#rich-syntax-highlighting","title":"\ud83c\udfa8 Rich Syntax Highlighting","text":"<ul> <li>Custom colors for DSL keywords, methods, and modules</li> <li>String interpolation highlighting with <code>${variable}</code> syntax</li> <li>File path detection for script and configuration files</li> <li>Environment variable highlighting</li> <li>Comment support with proper spell checking</li> </ul>"},{"location":"en/nvim-plugin/#smart-file-detection","title":"\ud83d\udcc1 Smart File Detection","text":"<ul> <li>Auto-detects <code>.sloth</code> files and applies proper highlighting</li> <li>Backward compatibility with <code>.lua</code> extension</li> <li>Custom file icons (\ud83e\udda5) in file explorers</li> </ul>"},{"location":"en/nvim-plugin/#code-completion","title":"\u26a1 Code Completion","text":"<ul> <li>Intelligent completion for DSL methods: <code>command</code>, <code>description</code>, <code>timeout</code>, etc.</li> <li>Module completion for built-in modules: <code>exec</code>, <code>fs</code>, <code>net</code>, <code>aws</code>, etc.</li> <li>Function completion for common patterns: <code>task()</code>, <code>workflow.define()</code></li> </ul>"},{"location":"en/nvim-plugin/#integrated-runner","title":"\ud83d\udd27 Integrated Runner","text":"<ul> <li>Run workflows directly from Neovim with <code>&lt;leader&gt;sr</code></li> <li>List tasks in current file with <code>&lt;leader&gt;sl</code></li> <li>Dry-run support for testing workflows</li> </ul>"},{"location":"en/nvim-plugin/#code-snippets-templates","title":"\ud83d\udccb Code Snippets &amp; Templates","text":"<ul> <li>Quick task creation with <code>_task</code> abbreviation</li> <li>Workflow templates with <code>_workflow</code> abbreviation</li> <li>Function templates with <code>_cmd</code> abbreviation</li> <li>Auto-generated templates for new <code>.sloth</code> files</li> </ul>"},{"location":"en/nvim-plugin/#text-objects-navigation","title":"\ud83c\udfaf Text Objects &amp; Navigation","text":"<ul> <li>Select task blocks with <code>vit</code> (visual in task)</li> <li>Select workflow blocks with <code>viw</code> (visual in workflow)</li> <li>Smart folding for collapsible code sections</li> <li>Intelligent indentation for DSL chaining</li> </ul>"},{"location":"en/nvim-plugin/#quick-setup","title":"\ud83d\ude80 Quick Setup","text":""},{"location":"en/nvim-plugin/#for-lunarvim-users","title":"For LunarVim Users","text":"<p>Add to your <code>~/.config/lvim/config.lua</code>:</p> <pre><code>-- Disable auto-formatting (recommended)\nlvim.format_on_save.enabled = false\n\n-- Configure sloth file icons\nrequire('nvim-web-devicons').setup {\n  override_by_extension = {\n    [\"sloth\"] = {\n      icon = \"\ud83e\udda5\",\n      color = \"#8B4513\",\n      name = \"SlothDSL\"\n    }\n  }\n}\n\n-- Key mappings for sloth runner\nlvim.keys.normal_mode[\"&lt;leader&gt;sr\"] = function()\n  local file = vim.api.nvim_buf_get_name(0)\n  if file:match(\"%.sloth$\") then\n    vim.cmd(\"split | terminal sloth-runner run -f \" .. vim.fn.shellescape(file))\n  end\nend\n\nlvim.keys.normal_mode[\"&lt;leader&gt;sl\"] = function()\n  local file = vim.api.nvim_buf_get_name(0)\n  if file:match(\"%.sloth$\") then\n    vim.cmd(\"split | terminal sloth-runner list -f \" .. vim.fn.shellescape(file))\n  end\nend\n\n-- Manual formatting command\nlvim.keys.normal_mode[\"&lt;leader&gt;sf\"] = \":SlothFormat&lt;CR&gt;\"\n</code></pre>"},{"location":"en/nvim-plugin/#key-mappings","title":"\ud83d\udcdd Key Mappings","text":"Key Action Description <code>&lt;leader&gt;sr</code> Run File Execute current <code>.sloth</code> workflow <code>&lt;leader&gt;sl</code> List Tasks Show all tasks in current file <code>&lt;leader&gt;st</code> Dry Run Test workflow without execution <code>&lt;leader&gt;sd</code> Debug Run with debug output <code>&lt;leader&gt;sf</code> Format Format current file (manual)"},{"location":"en/nvim-plugin/#installation","title":"\ud83d\udee0\ufe0f Installation","text":""},{"location":"en/nvim-plugin/#manual-installation","title":"Manual Installation","text":"<ol> <li> <p>Copy plugin files to your Neovim config: <pre><code>cp -r /path/to/sloth-runner/nvim-plugin ~/.config/nvim/sloth-runner\n</code></pre></p> </li> <li> <p>Add to your Neovim configuration: <pre><code>-- Add to init.lua\nvim.opt.runtimepath:append(\"~/.config/nvim/sloth-runner\")\n</code></pre></p> </li> <li> <p>Restart Neovim and open a <code>.sloth</code> file</p> </li> </ol>"},{"location":"en/nvim-plugin/#code-snippets","title":"\ud83c\udfa8 Code Snippets","text":""},{"location":"en/nvim-plugin/#quick-task-creation","title":"Quick Task Creation","text":"<p>Type <code>_task</code> and press Tab:</p> <pre><code>local task_name = task(\"\")\n    :description(\"\")\n    :command(function(params, deps)\n        -- TODO: implement\n        return true\n    end)\n    :build()\n</code></pre>"},{"location":"en/nvim-plugin/#quick-workflow-creation","title":"Quick Workflow Creation","text":"<p>Type <code>_workflow</code> and press Tab:</p> <pre><code>workflow.define(\"\", {\n    description = \"\",\n    version = \"1.0.0\",\n    tasks = {\n        -- tasks here\n    }\n})\n</code></pre>"},{"location":"en/nvim-plugin/#configuration-options","title":"\ud83d\udd27 Configuration Options","text":"<p>The plugin automatically configures itself when you open <code>.sloth</code> files. Key features include:</p> <ul> <li>Automatic filetype detection for <code>.sloth</code> extensions</li> <li>Syntax highlighting with custom color scheme</li> <li>Code completion using omnifunc</li> <li>Smart indentation for DSL method chaining</li> <li>Code folding for task and workflow blocks</li> <li>Key mappings for common operations</li> </ul>"},{"location":"en/nvim-plugin/#troubleshooting","title":"\ud83d\udc1b Troubleshooting","text":""},{"location":"en/nvim-plugin/#syntax-highlighting-not-working","title":"Syntax Highlighting Not Working","text":"<ul> <li>Ensure the file has <code>.sloth</code> extension</li> <li>Run <code>:set filetype=sloth</code> manually if needed</li> <li>Check if plugin files are in correct location</li> </ul>"},{"location":"en/nvim-plugin/#key-mappings-not-working","title":"Key Mappings Not Working","text":"<ul> <li>Verify <code>sloth-runner</code> is in your PATH</li> <li>Check for conflicts with other plugins</li> <li>Use <code>:map &lt;leader&gt;sr</code> to verify mapping exists</li> </ul>"},{"location":"en/nvim-plugin/#code-completion-not-showing","title":"Code Completion Not Showing","text":"<ul> <li>Ensure completion is enabled: <code>:set completeopt=menu,menuone,noselect</code></li> <li>Try triggering manually with <code>&lt;C-x&gt;&lt;C-o&gt;</code></li> <li>Check omnifunc setting: <code>:set omnifunc?</code></li> </ul>"},{"location":"en/nvim-plugin/#example-workflow","title":"\ud83d\udcd6 Example Workflow","text":"<pre><code>-- deployment.sloth\nlocal deploy_task = task(\"deploy_app\")\n    :description(\"Deploy application to production\")\n    :command(function(params, deps)\n        local result = exec.run(\"kubectl apply -f deployment.yaml\")\n        if not result.success then\n            log.error(\"Deployment failed: \" .. result.stderr)\n            return false\n        end\n\n        log.info(\"\ud83d\ude80 Deployment successful!\")\n        return true\n    end)\n    :timeout(300)\n    :retries(3)\n    :build()\n\nworkflow.define(\"production_deployment\", {\n    description = \"Production deployment workflow\",\n    version = \"1.0.0\",\n    tasks = { deploy_task }\n})\n</code></pre> <p>With the plugin installed, this file will have: - Syntax highlighting for keywords, functions, and strings - Code completion when typing method names - Quick execution with <code>&lt;leader&gt;sr</code> - Task listing with <code>&lt;leader&gt;sl</code></p> <p>The Neovim plugin makes writing Sloth workflows a breeze with full IDE support. Start creating powerful automation workflows with confidence! \ud83e\udda5\u2728</p>"},{"location":"en/plugin-development/","title":"\ud83d\udd0c Plugin Development","text":"<p>Building Extensions for Sloth Runner Platform</p> <p>Sloth Runner provides a powerful plugin system that allows developers to extend the platform with custom functionality. This guide covers everything you need to know to develop your own plugins.</p>"},{"location":"en/plugin-development/#plugin-architecture","title":"\ud83c\udfd7\ufe0f Plugin Architecture","text":""},{"location":"en/plugin-development/#plugin-types","title":"Plugin Types","text":"<p>Sloth Runner supports several types of plugins:</p> <ol> <li>\ud83c\udf19 Lua Modules - Extend the DSL with new functions and capabilities</li> <li>\u26a1 Command Processors - Add new CLI commands and operations</li> <li>\ud83c\udfa8 UI Extensions - Enhance the web dashboard and interface</li> <li>\ud83d\udd17 Integrations - Connect with external tools and services</li> <li>\ud83e\udda5 Editor Plugins - IDE/Editor extensions (like our Neovim plugin)</li> </ol>"},{"location":"en/plugin-development/#core-components","title":"Core Components","text":"<pre><code>sloth-runner/\n\u251c\u2500\u2500 plugins/\n\u2502   \u251c\u2500\u2500 lua-modules/       # Lua DSL extensions\n\u2502   \u251c\u2500\u2500 commands/          # CLI command plugins\n\u2502   \u251c\u2500\u2500 ui/               # Web UI extensions\n\u2502   \u251c\u2500\u2500 integrations/     # Third-party integrations\n\u2502   \u2514\u2500\u2500 editors/          # Editor/IDE plugins\n\u2514\u2500\u2500 internal/\n    \u2514\u2500\u2500 plugin/           # Plugin system core\n</code></pre>"},{"location":"en/plugin-development/#developing-lua-module-plugins","title":"\ud83c\udf19 Developing Lua Module Plugins","text":""},{"location":"en/plugin-development/#basic-structure","title":"Basic Structure","text":"<p>Create a new Lua module that extends the DSL:</p> <pre><code>-- plugins/lua-modules/my-module/init.lua\nlocal M = {}\n\n-- Module metadata\nM._NAME = \"my-module\"\nM._VERSION = \"1.0.0\"\nM._DESCRIPTION = \"Custom functionality for Sloth Runner\"\n\n-- Public API\nfunction M.hello(name)\n    return string.format(\"Hello, %s from my custom module!\", name or \"World\")\nend\n\nfunction M.custom_task(config)\n    return {\n        execute = function(params)\n            log.info(\"\ud83d\udd0c Executing custom task: \" .. config.name)\n            -- Custom task logic here\n            return true\n        end,\n        validate = function()\n            return config.name ~= nil\n        end\n    }\nend\n\n-- Register module functions\nfunction M.register()\n    -- Make functions available in DSL\n    _G.my_module = M\n\n    -- Register custom task type\n    task.register_type(\"custom\", M.custom_task)\nend\n\nreturn M\n</code></pre>"},{"location":"en/plugin-development/#using-custom-modules-in-workflows","title":"Using Custom Modules in Workflows","text":"<pre><code>-- workflow.sloth\nlocal my_task = task(\"test_custom\")\n    :type(\"custom\", { name = \"test\" })\n    :description(\"Testing custom plugin\")\n    :build()\n\n-- Direct module usage\nlocal greeting = my_module.hello(\"Developer\")\nlog.info(greeting)\n\nworkflow.define(\"plugin_test\", {\n    description = \"Testing custom plugin\",\n    tasks = { my_task }\n})\n</code></pre>"},{"location":"en/plugin-development/#plugin-registration","title":"Plugin Registration","text":"<p>Create a plugin manifest:</p> <pre><code># plugins/lua-modules/my-module/plugin.yaml\nname: my-module\nversion: 1.0.0\ndescription: Custom functionality for Sloth Runner\ntype: lua-module\nauthor: Your Name\nlicense: MIT\n\nentry_point: init.lua\ndependencies:\n  - sloth-runner: \"&gt;=1.0.0\"\n\npermissions:\n  - filesystem.read\n  - network.http\n  - system.exec\n\nconfiguration:\n  settings:\n    api_key:\n      type: string\n      required: false\n      description: \"API key for external service\"\n</code></pre>"},{"location":"en/plugin-development/#command-plugin-development","title":"\u26a1 Command Plugin Development","text":""},{"location":"en/plugin-development/#cli-command-structure","title":"CLI Command Structure","text":"<pre><code>// plugins/commands/my-command/main.go\npackage main\n\nimport (\n    \"github.com/spf13/cobra\"\n    \"github.com/chalkan3-sloth/sloth-runner/pkg/plugin\"\n)\n\ntype MyCommandPlugin struct {\n    config *MyConfig\n}\n\ntype MyConfig struct {\n    Setting1 string `json:\"setting1\"`\n    Setting2 int    `json:\"setting2\"`\n}\n\nfunc (p *MyCommandPlugin) Name() string {\n    return \"my-command\"\n}\n\nfunc (p *MyCommandPlugin) Command() *cobra.Command {\n    cmd := &amp;cobra.Command{\n        Use:   \"my-command\",\n        Short: \"Custom command functionality\",\n        Long:  \"Extended description of custom command\",\n        RunE:  p.execute,\n    }\n\n    cmd.Flags().StringVar(&amp;p.config.Setting1, \"setting1\", \"\", \"Custom setting\")\n    cmd.Flags().IntVar(&amp;p.config.Setting2, \"setting2\", 0, \"Another setting\")\n\n    return cmd\n}\n\nfunc (p *MyCommandPlugin) execute(cmd *cobra.Command, args []string) error {\n    log.Info(\"\ud83d\udd0c Executing custom command with settings:\", \n        \"setting1\", p.config.Setting1,\n        \"setting2\", p.config.Setting2)\n\n    // Custom command logic here\n    return nil\n}\n\nfunc main() {\n    plugin := &amp;MyCommandPlugin{\n        config: &amp;MyConfig{},\n    }\n\n    plugin.Register()\n}\n</code></pre>"},{"location":"en/plugin-development/#command-plugin-manifest","title":"Command Plugin Manifest","text":"<pre><code># plugins/commands/my-command/plugin.yaml\nname: my-command\nversion: 1.0.0\ndescription: Custom CLI command for Sloth Runner\ntype: command\nauthor: Your Name\n\nbuild:\n  binary: my-command\n  source: main.go\n\ninstallation:\n  target: commands/my-command\n</code></pre>"},{"location":"en/plugin-development/#ui-extension-development","title":"\ud83c\udfa8 UI Extension Development","text":""},{"location":"en/plugin-development/#react-component-plugin","title":"React Component Plugin","text":"<pre><code>// plugins/ui/my-dashboard/src/MyDashboardPlugin.tsx\nimport React from 'react';\nimport { PluginComponent, useSlothApi } from '@sloth-runner/ui-sdk';\n\ninterface MyDashboardProps {\n  config: {\n    title: string;\n    refreshInterval: number;\n  };\n}\n\nexport const MyDashboardPlugin: PluginComponent&lt;MyDashboardProps&gt; = ({ config }) =&gt; {\n  const { data, loading } = useSlothApi('/api/custom-metrics');\n\n  return (\n    &lt;div className=\"my-dashboard-plugin\"&gt;\n      &lt;h2&gt;{config.title}&lt;/h2&gt;\n      {loading ? (\n        &lt;div&gt;Loading custom metrics...&lt;/div&gt;\n      ) : (\n        &lt;div className=\"metrics-grid\"&gt;\n          {data?.map((metric: any) =&gt; (\n            &lt;div key={metric.id} className=\"metric-card\"&gt;\n              &lt;h3&gt;{metric.name}&lt;/h3&gt;\n              &lt;div className=\"metric-value\"&gt;{metric.value}&lt;/div&gt;\n            &lt;/div&gt;\n          ))}\n        &lt;/div&gt;\n      )}\n    &lt;/div&gt;\n  );\n};\n\n// Plugin registration\nexport const plugin = {\n  name: 'my-dashboard',\n  version: '1.0.0',\n  component: MyDashboardPlugin,\n  defaultConfig: {\n    title: 'Custom Dashboard',\n    refreshInterval: 30000,\n  },\n};\n</code></pre>"},{"location":"en/plugin-development/#ui-plugin-manifest","title":"UI Plugin Manifest","text":"<pre><code># plugins/ui/my-dashboard/plugin.yaml\nname: my-dashboard\nversion: 1.0.0\ndescription: Custom dashboard for Sloth Runner\ntype: ui-extension\nauthor: Your Name\n\nbuild:\n  framework: react\n  entry: src/index.tsx\n  output: dist/\n\ninstallation:\n  target: ui/plugins/my-dashboard\n\ndependencies:\n  - \"@sloth-runner/ui-sdk\": \"^1.0.0\"\n  - \"react\": \"^18.0.0\"\n</code></pre>"},{"location":"en/plugin-development/#integration-plugin-development","title":"\ud83d\udd17 Integration Plugin Development","text":""},{"location":"en/plugin-development/#external-service-integration","title":"External Service Integration","text":"<pre><code>// plugins/integrations/my-service/integration.go\npackage main\n\nimport (\n    \"context\"\n    \"net/http\"\n    \"github.com/chalkan3-sloth/sloth-runner/pkg/integration\"\n)\n\ntype MyServiceIntegration struct {\n    client *http.Client\n    apiKey string\n}\n\nfunc (i *MyServiceIntegration) Name() string {\n    return \"my-service\"\n}\n\nfunc (i *MyServiceIntegration) Initialize(config map[string]interface{}) error {\n    i.apiKey = config[\"api_key\"].(string)\n    i.client = &amp;http.Client{}\n    return nil\n}\n\nfunc (i *MyServiceIntegration) GetMetrics(ctx context.Context) ([]integration.Metric, error) {\n    // Fetch metrics from external service\n    metrics := []integration.Metric{\n        {\n            Name:  \"custom_metric\",\n            Value: 42,\n            Tags:  map[string]string{\"source\": \"my-service\"},\n        },\n    }\n    return metrics, nil\n}\n\nfunc (i *MyServiceIntegration) SendNotification(ctx context.Context, msg integration.Message) error {\n    // Send notification via external service\n    return nil\n}\n\nfunc main() {\n    integration := &amp;MyServiceIntegration{}\n    integration.Register()\n}\n</code></pre>"},{"location":"en/plugin-development/#plugin-development-tools","title":"\ud83d\udee0\ufe0f Plugin Development Tools","text":""},{"location":"en/plugin-development/#plugin-generator","title":"Plugin Generator","text":"<p>Create new plugins quickly with the generator:</p> <pre><code># Generate a new Lua module plugin\nsloth-runner plugin generate --type=lua-module --name=my-module\n\n# Generate a CLI command plugin\nsloth-runner plugin generate --type=command --name=my-command\n\n# Generate a UI extension\nsloth-runner plugin generate --type=ui --name=my-dashboard\n</code></pre>"},{"location":"en/plugin-development/#development-environment","title":"Development Environment","text":"<pre><code># Start development server with plugin hot-reload\nsloth-runner dev --plugins-dir=./plugins\n\n# Test plugin locally\nsloth-runner plugin test ./plugins/my-plugin\n\n# Build plugin for distribution\nsloth-runner plugin build ./plugins/my-plugin --output=dist/\n</code></pre>"},{"location":"en/plugin-development/#plugin-testing","title":"Plugin Testing","text":"<pre><code>// plugins/my-plugin/plugin_test.go\npackage main\n\nimport (\n    \"testing\"\n    \"github.com/chalkan3-sloth/sloth-runner/pkg/plugin/testing\"\n)\n\nfunc TestMyPlugin(t *testing.T) {\n    // Create test environment\n    env := plugintest.NewEnvironment(t)\n\n    // Load plugin\n    plugin, err := env.LoadPlugin(\"./\")\n    if err != nil {\n        t.Fatal(err)\n    }\n\n    // Test plugin functionality\n    result, err := plugin.Execute(map[string]interface{}{\n        \"test_param\": \"value\",\n    })\n\n    if err != nil {\n        t.Fatal(err)\n    }\n\n    // Verify results\n    if result.Status != \"success\" {\n        t.Errorf(\"Expected success, got %s\", result.Status)\n    }\n}\n</code></pre>"},{"location":"en/plugin-development/#plugin-distribution","title":"\ud83d\udce6 Plugin Distribution","text":""},{"location":"en/plugin-development/#plugin-registry","title":"Plugin Registry","text":"<p>Publish your plugin to the Sloth Runner plugin registry:</p> <pre><code># Login to registry\nsloth-runner registry login\n\n# Publish plugin\nsloth-runner plugin publish ./my-plugin\n\n# Install published plugin\nsloth-runner plugin install my-username/my-plugin\n</code></pre>"},{"location":"en/plugin-development/#plugin-marketplace","title":"Plugin Marketplace","text":"<p>Browse and discover plugins:</p> <pre><code># Search plugins\nsloth-runner plugin search \"kubernetes\"\n\n# Get plugin info\nsloth-runner plugin info kubernetes-operator\n\n# Install from marketplace\nsloth-runner plugin install --marketplace kubernetes-operator\n</code></pre>"},{"location":"en/plugin-development/#security-best-practices","title":"\ud83d\udd12 Security &amp; Best Practices","text":""},{"location":"en/plugin-development/#security-guidelines","title":"Security Guidelines","text":"<ol> <li>\ud83d\udee1\ufe0f Principle of Least Privilege - Request only necessary permissions</li> <li>\ud83d\udd10 Input Validation - Always validate user input and configuration</li> <li>\ud83d\udeab Avoid Global State - Keep plugin state isolated</li> <li>\ud83d\udcdd Error Handling - Provide clear error messages and logging</li> <li>\ud83e\uddea Testing - Write comprehensive tests for all functionality</li> </ol>"},{"location":"en/plugin-development/#code-quality","title":"Code Quality","text":"<pre><code>// Good: Clear error handling\nfunc (p *MyPlugin) Execute(params map[string]interface{}) (*Result, error) {\n    value, ok := params[\"required_param\"].(string)\n    if !ok {\n        return nil, fmt.Errorf(\"required_param must be a string\")\n    }\n\n    if value == \"\" {\n        return nil, fmt.Errorf(\"required_param cannot be empty\")\n    }\n\n    // Process with validated input\n    result := p.process(value)\n    return result, nil\n}\n</code></pre>"},{"location":"en/plugin-development/#documentation-standards","title":"Documentation Standards","text":"<p>Every plugin should include:</p> <ul> <li>\ud83d\udccb README.md - Installation and usage instructions</li> <li>\ud83d\udcda API Documentation - Function/method documentation</li> <li>\ud83d\udcd6 Examples - Working code examples</li> <li>\ud83e\uddea Tests - Unit and integration tests</li> <li>\ud83d\udcc4 License - Clear licensing information</li> </ul>"},{"location":"en/plugin-development/#advanced-plugin-features","title":"\ud83d\ude80 Advanced Plugin Features","text":""},{"location":"en/plugin-development/#plugin-hooks","title":"Plugin Hooks","text":"<pre><code>-- Respond to system events\nfunction M.on_task_start(task_id, context)\n    log.info(\"\ud83d\udd0c Task starting: \" .. task_id)\n    -- Custom logic before task execution\nend\n\nfunction M.on_task_complete(task_id, result)\n    log.info(\"\ud83d\udd0c Task completed: \" .. task_id)\n    -- Custom logic after task completion\nend\n\n-- Register hooks\nM.hooks = {\n    [\"task.start\"] = M.on_task_start,\n    [\"task.complete\"] = M.on_task_complete,\n}\n</code></pre>"},{"location":"en/plugin-development/#plugin-communication","title":"Plugin Communication","text":"<pre><code>-- Inter-plugin communication\nfunction M.send_to_plugin(plugin_name, message)\n    local plugin = sloth.plugins.get(plugin_name)\n    if plugin and plugin.receive_message then\n        return plugin.receive_message(message)\n    end\n    return nil\nend\n\nfunction M.receive_message(message)\n    log.info(\"\ud83d\udd0c Received message: \" .. message.type)\n    -- Handle incoming message\n    return { status = \"received\" }\nend\n</code></pre>"},{"location":"en/plugin-development/#configuration-management","title":"Configuration Management","text":"<pre><code># plugins/my-plugin/config.schema.json\n{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"api_endpoint\": {\n      \"type\": \"string\",\n      \"format\": \"uri\",\n      \"description\": \"API endpoint URL\"\n    },\n    \"timeout\": {\n      \"type\": \"integer\",\n      \"minimum\": 1,\n      \"maximum\": 300,\n      \"default\": 30\n    }\n  },\n  \"required\": [\"api_endpoint\"]\n}\n</code></pre>"},{"location":"en/plugin-development/#examples-templates","title":"\ud83d\udcda Examples &amp; Templates","text":""},{"location":"en/plugin-development/#complete-plugin-example","title":"Complete Plugin Example","text":"<p>Check out these example plugins:</p> <ul> <li>Kubernetes Operator Plugin - Manage K8s resources</li> <li>Slack Integration Plugin - Send notifications</li> <li>Monitoring Dashboard Plugin - Custom metrics UI</li> </ul>"},{"location":"en/plugin-development/#plugin-templates","title":"Plugin Templates","text":"<p>Use official templates for quick starts:</p> <pre><code># Use template\nsloth-runner plugin init --template=lua-module my-plugin\nsloth-runner plugin init --template=go-command my-command\nsloth-runner plugin init --template=react-ui my-dashboard\n</code></pre>"},{"location":"en/plugin-development/#community-support","title":"\ud83d\udcac Community &amp; Support","text":""},{"location":"en/plugin-development/#getting-help","title":"Getting Help","text":"<ul> <li>\ud83d\udcd6 Plugin API Documentation</li> <li>\ud83d\udcac Discord Community - #plugin-development</li> <li>\ud83d\udc1b GitHub Issues - Bug reports and feature requests</li> <li>\ud83d\udce7 Plugin Mailing List - Development discussions</li> </ul>"},{"location":"en/plugin-development/#contributing","title":"Contributing","text":"<p>We welcome plugin contributions! See our Contributing Guide for details on:</p> <ul> <li>Plugin submission process</li> <li>Code review guidelines</li> <li>Documentation requirements</li> <li>Testing standards</li> </ul> <p>Start building amazing plugins for Sloth Runner today! The platform's extensible architecture makes it easy to add exactly the functionality you need. \ud83d\udd0c\u2728</p>"},{"location":"en/quick-start/","title":"\u26a1 Quick Start Guide","text":"<p>Get up and running with Sloth Runner in under 10 minutes! This guide will walk you through installation, basic usage, and your first distributed task execution.</p>"},{"location":"en/quick-start/#installation","title":"\ud83d\ude80 Installation","text":""},{"location":"en/quick-start/#option-1-download-binary","title":"Option 1: Download Binary","text":"<pre><code># Download latest release\ncurl -L https://github.com/chalkan3-sloth/sloth-runner/releases/latest/download/sloth-runner-linux-amd64 -o sloth-runner\nchmod +x sloth-runner\nsudo mv sloth-runner /usr/local/bin/\n</code></pre>"},{"location":"en/quick-start/#option-2-build-from-source","title":"Option 2: Build from Source","text":"<pre><code># Clone repository\ngit clone https://github.com/chalkan3-sloth/sloth-runner.git\ncd sloth-runner\n\n# Build binary\ngo build -o sloth-runner ./cmd/sloth-runner\n\n# Add to PATH\nexport PATH=$PATH:$(pwd)\n</code></pre>"},{"location":"en/quick-start/#option-3-docker","title":"Option 3: Docker","text":"<pre><code># Pull official image\ndocker pull slothrunner/sloth-runner:latest\n\n# Create alias for easy usage\nalias sloth-runner='docker run --rm -v $(pwd):/workspace slothrunner/sloth-runner'\n</code></pre>"},{"location":"en/quick-start/#verify-installation","title":"\ud83d\udccb Verify Installation","text":"<pre><code># Check version\nsloth-runner --version\n\n# View available commands\nsloth-runner --help\n</code></pre> <p>Expected output: <pre><code>Sloth Runner v2.0.0\nA powerful task orchestration platform with Lua scripting\n</code></pre></p>"},{"location":"en/quick-start/#your-first-task","title":"\ud83c\udfaf Your First Task","text":"<p>Create your first Lua task file:</p> <pre><code># Create a simple task file\ncat &gt; hello-world.sloth &lt;&lt; 'EOF'\nModern DSLs = {\n    hello_world = {\n        description = \"My first Sloth Runner task\",\n        tasks = {\n            greet = {\n                name = \"greet\",\n                description = \"Say hello to the world\",\n                command = function()\n                    log.info(\"\ud83c\udf89 Hello from Sloth Runner!\")\n\n                    -- Get system information\n                    local hostname, _ = exec.run(\"hostname\")\n                    local whoami, _ = exec.run(\"whoami\")\n\n                    log.info(\"Running on: \" .. hostname)\n                    log.info(\"User: \" .. whoami)\n\n                    -- Use state management\n                    state.set(\"last_greeting\", os.time())\n                    local count = state.increment(\"greeting_count\", 1)\n\n                    log.info(\"This is greeting #\" .. count)\n\n                    return true, \"Hello World task completed successfully!\"\n                end\n            },\n\n            system_info = {\n                name = \"system_info\", \n                description = \"Display system metrics\",\n                depends_on = \"greet\",\n                command = function()\n                    log.info(\"\ud83d\udcca System Information:\")\n\n                    -- Get system metrics\n                    local cpu = metrics.system_cpu()\n                    local memory = metrics.system_memory()\n                    local disk = metrics.system_disk()\n\n                    log.info(\"CPU Usage: \" .. string.format(\"%.1f%%\", cpu))\n                    log.info(\"Memory: \" .. string.format(\"%.1f%% (%.0f MB used)\", \n                        memory.percent, memory.used_mb))\n                    log.info(\"Disk: \" .. string.format(\"%.1f%% (%.1f GB used)\", \n                        disk.percent, disk.used_gb))\n\n                    -- Record metrics\n                    metrics.gauge(\"quickstart_cpu\", cpu)\n                    metrics.gauge(\"quickstart_memory\", memory.percent)\n\n                    return true, \"System info collected\"\n                end\n            }\n        }\n    }\n}\nEOF\n</code></pre>"},{"location":"en/quick-start/#run-your-first-task","title":"\ud83c\udfc3\u200d\u2642\ufe0f Run Your First Task","text":"<pre><code># Execute the task\nsloth-runner run -f hello-world.sloth\n\n# Or run specific task\nsloth-runner run -f hello-world.sloth -t greet\n</code></pre> <p>Expected output: <pre><code>2024-01-15 10:30:00 INFO \ud83c\udf89 Hello from Sloth Runner!\n2024-01-15 10:30:00 INFO Running on: my-computer\n2024-01-15 10:30:00 INFO User: myuser\n2024-01-15 10:30:00 INFO This is greeting #1\n2024-01-15 10:30:01 INFO \ud83d\udcca System Information:\n2024-01-15 10:30:01 INFO CPU Usage: 15.2%\n2024-01-15 10:30:01 INFO Memory: 45.8% (7520 MB used)\n2024-01-15 10:30:01 INFO Disk: 67.3% (234.5 GB used)\n\u2705 Task 'hello_world' completed successfully!\n</code></pre></p>"},{"location":"en/quick-start/#setting-up-distributed-execution","title":"\ud83c\udf10 Setting Up Distributed Execution","text":""},{"location":"en/quick-start/#step-1-start-master-server","title":"Step 1: Start Master Server","text":"<pre><code># Start master on your main machine (e.g., 192.168.1.100)\nsloth-runner master --port 50053 --bind-address 192.168.1.100\n\n# Or with enhanced features\nsloth-runner master --port 50053 --metrics-port 8080 --dashboard-port 3000\n</code></pre>"},{"location":"en/quick-start/#step-2-deploy-remote-agents","title":"Step 2: Deploy Remote Agents","text":"<p>On remote machine 1 (192.168.1.101): <pre><code># Download sloth-runner binary to remote machine\nscp sloth-runner user@192.168.1.101:/usr/local/bin/\n\n# SSH and start agent\nssh user@192.168.1.101\nsloth-runner agent start \\\n    --name agent-1 \\\n    --master 192.168.1.100:50053 \\\n    --port 50051 \\\n    --bind-address 192.168.1.101\n</code></pre></p> <p>On remote machine 2 (192.168.1.102): <pre><code># SSH and start agent  \nssh user@192.168.1.102\nsloth-runner agent start \\\n    --name agent-2 \\\n    --master 192.168.1.100:50053 \\\n    --port 50051 \\\n    --bind-address 192.168.1.102\n</code></pre></p>"},{"location":"en/quick-start/#step-3-verify-agent-registration","title":"Step 3: Verify Agent Registration","text":"<pre><code># List registered agents\nsloth-runner agent list --master 192.168.1.100:50053\n</code></pre> <p>Expected output: <pre><code>Registered Agents:\n  agent-1    192.168.1.101:50051    Active    2s ago\n  agent-2    192.168.1.102:50051    Active    1s ago\n</code></pre></p>"},{"location":"en/quick-start/#step-4-run-distributed-tasks","title":"Step 4: Run Distributed Tasks","text":"<pre><code># Execute command on specific agent\nsloth-runner agent run agent-1 \"echo 'Hello from Agent 1'\" --master 192.168.1.100:50053\n\n# Execute on all agents\nsloth-runner agent run agent-1 \"uptime\" --master 192.168.1.100:50053 &amp;\nsloth-runner agent run agent-2 \"uptime\" --master 192.168.1.100:50053 &amp;\nwait\n</code></pre>"},{"location":"en/quick-start/#exploring-advanced-features","title":"\ud83d\udcca Exploring Advanced Features","text":""},{"location":"en/quick-start/#state-management-example","title":"State Management Example","text":"<pre><code>-- Create state-demo.sloth\nModern DSLs = {\n    state_demo = {\n        description = \"Demonstrate state management capabilities\",\n        tasks = {\n            setup_state = {\n                name = \"setup_state\",\n                description = \"Initialize application state\", \n                command = function()\n                    -- Initialize configuration\n                    state.set(\"app_config\", {\n                        version = \"1.0.0\",\n                        environment = \"development\",\n                        debug = true\n                    })\n\n                    -- Set TTL for session data (5 minutes)\n                    state.set(\"session_token\", \"abc123xyz\", 300)\n\n                    -- Initialize counters\n                    state.set(\"api_calls\", 0)\n                    state.set(\"errors\", 0)\n\n                    log.info(\"\u2705 Application state initialized\")\n                    return true, \"State setup completed\"\n                end\n            },\n\n            simulate_usage = {\n                name = \"simulate_usage\",\n                description = \"Simulate application usage\",\n                depends_on = \"setup_state\",\n                command = function()\n                    -- Simulate API calls\n                    for i = 1, 10 do\n                        local calls = state.increment(\"api_calls\", 1)\n\n                        -- Simulate occasional error\n                        if math.random(1, 10) &gt; 8 then\n                            state.increment(\"errors\", 1)\n                            log.warn(\"Simulated error occurred\")\n                        end\n\n                        -- Add to processing queue\n                        state.list_push(\"processing_queue\", {\n                            id = \"req_\" .. i,\n                            timestamp = os.time(),\n                            status = \"pending\"\n                        })\n\n                        exec.run(\"sleep 0.1\") -- Small delay\n                    end\n\n                    local total_calls = state.get(\"api_calls\")\n                    local total_errors = state.get(\"errors\")\n                    local queue_size = state.list_length(\"processing_queue\")\n\n                    log.info(\"\ud83d\udcca Usage Summary:\")\n                    log.info(\"  API Calls: \" .. total_calls)\n                    log.info(\"  Errors: \" .. total_errors)\n                    log.info(\"  Queue Size: \" .. queue_size)\n\n                    return true, \"Usage simulation completed\"\n                end\n            },\n\n            process_queue = {\n                name = \"process_queue\",\n                description = \"Process items in queue with locking\",\n                depends_on = \"simulate_usage\",\n                command = function()\n                    -- Process queue with distributed lock\n                    state.with_lock(\"queue_processing\", function()\n                        log.info(\"\ud83d\udd12 Processing queue with exclusive lock...\")\n\n                        local processed = 0\n                        while state.list_length(\"processing_queue\") &gt; 0 do\n                            local item = state.list_pop(\"processing_queue\")\n                            log.info(\"Processing item: \" .. item.id)\n                            processed = processed + 1\n                        end\n\n                        log.info(\"\u2705 Processed \" .. processed .. \" items\")\n                        state.set(\"last_processing_time\", os.time())\n\n                    end, 30) -- 30 second timeout\n\n                    return true, \"Queue processing completed\"\n                end\n            }\n        }\n    }\n}\n</code></pre> <p>Run the state demo: <pre><code>sloth-runner run -f state-demo.sloth\n</code></pre></p>"},{"location":"en/quick-start/#metrics-monitoring-example","title":"Metrics Monitoring Example","text":"<pre><code>-- Create metrics-demo.sloth  \nModern DSLs = {\n    metrics_demo = {\n        description = \"Demonstrate metrics and monitoring\",\n        tasks = {\n            collect_metrics = {\n                name = \"collect_metrics\",\n                description = \"Collect system and custom metrics\",\n                command = function()\n                    log.info(\"\ud83d\udcca Collecting system metrics...\")\n\n                    -- System metrics\n                    local cpu = metrics.system_cpu()\n                    local memory = metrics.system_memory() \n                    local disk = metrics.system_disk()\n\n                    log.info(\"System Status:\")\n                    log.info(\"  CPU: \" .. string.format(\"%.1f%%\", cpu))\n                    log.info(\"  Memory: \" .. string.format(\"%.1f%%\", memory.percent))\n                    log.info(\"  Disk: \" .. string.format(\"%.1f%%\", disk.percent))\n\n                    -- Custom metrics\n                    metrics.gauge(\"demo_cpu_usage\", cpu)\n                    metrics.counter(\"demo_executions\", 1)\n\n                    -- Performance timer\n                    local processing_time = metrics.timer(\"data_processing\", function()\n                        -- Simulate data processing\n                        local sum = 0\n                        for i = 1, 1000000 do\n                            sum = sum + math.sqrt(i)\n                        end\n                        return sum\n                    end)\n\n                    log.info(\"\u23f1\ufe0f Processing took: \" .. string.format(\"%.2f ms\", processing_time))\n\n                    -- Health check\n                    local health = metrics.health_status()\n                    log.info(\"\ud83c\udfe5 Overall health: \" .. health.overall)\n\n                    -- Alert if CPU is high\n                    if cpu &gt; 50 then\n                        metrics.alert(\"high_cpu_demo\", {\n                            level = \"warning\",\n                            message = \"CPU usage is elevated: \" .. string.format(\"%.1f%%\", cpu),\n                            value = cpu\n                        })\n                    end\n\n                    return true, \"Metrics collection completed\"\n                end\n            }\n        }\n    }\n}\n</code></pre> <p>Run the metrics demo: <pre><code>sloth-runner run -f metrics-demo.sloth\n</code></pre></p>"},{"location":"en/quick-start/#access-web-dashboard","title":"\ud83c\udf10 Access Web Dashboard","text":"<p>If you started the master with dashboard support:</p> <pre><code># Open web dashboard\nopen http://192.168.1.100:3000\n\n# View metrics endpoint\ncurl http://192.168.1.100:8080/metrics\n\n# Check health status\ncurl http://192.168.1.100:8080/health\n</code></pre>"},{"location":"en/quick-start/#whats-next","title":"\ud83d\udcda What's Next?","text":""},{"location":"en/quick-start/#explore-core-concepts","title":"Explore Core Concepts","text":"<ul> <li>\ud83d\udcd6 Core Concepts - Understand tasks, workflows, and state</li> <li>\ud83d\udd27 CLI Commands - Master all available commands</li> <li>\ud83c\udf19 Lua API - Deep dive into scripting capabilities</li> </ul>"},{"location":"en/quick-start/#advanced-features","title":"Advanced Features","text":"<ul> <li>\ud83d\udcbe State Management - Persistent state and locks</li> <li>\ud83d\udcca Metrics &amp; Monitoring - Observability and alerting</li> <li>\ud83d\ude80 Agent Improvements - Enterprise features</li> </ul>"},{"location":"en/quick-start/#cloud-integrations","title":"Cloud Integrations","text":"<ul> <li>\u2601\ufe0f AWS Integration - Deploy and manage AWS resources</li> <li>\ud83c\udf29\ufe0f GCP Integration - Google Cloud Platform tasks</li> <li>\ud83d\udd37 Azure Integration - Microsoft Azure automation</li> </ul>"},{"location":"en/quick-start/#infrastructure-as-code","title":"Infrastructure as Code","text":"<ul> <li>\ud83d\udc33 Docker - Container management</li> <li>\ud83c\udfd7\ufe0f Pulumi - Modern infrastructure as code</li> <li>\ud83c\udf0d Terraform - Infrastructure provisioning</li> </ul>"},{"location":"en/quick-start/#getting-help","title":"\ud83c\udd98 Getting Help","text":""},{"location":"en/quick-start/#documentation","title":"Documentation","text":"<ul> <li>\ud83d\udcda Full Documentation</li> <li>\ud83d\udd0d API Reference</li> <li>\ud83d\udca1 Examples</li> </ul>"},{"location":"en/quick-start/#community","title":"Community","text":"<ul> <li>\ud83d\udcac GitHub Discussions</li> <li>\ud83d\udc1b Issue Tracker</li> <li>\ud83d\udce7 Email Support</li> </ul>"},{"location":"en/quick-start/#quick-troubleshooting","title":"Quick Troubleshooting","text":"<p>Agent won't connect to master? <pre><code># Check network connectivity\ntelnet 192.168.1.100 50053\n\n# Verify master is running\nsloth-runner agent list --master 192.168.1.100:50053\n\n# Check firewall settings\nsudo ufw status\n</code></pre></p> <p>Tasks failing with permission errors? <pre><code># Check user permissions\nls -la /usr/local/bin/sloth-runner\n\n# Run with appropriate user\nsudo -u myuser sloth-runner run -f task.sloth\n</code></pre></p> <p>State database issues? <pre><code># Check state database location\nls -la ~/.sloth-runner/\n\n# View state statistics\nsloth-runner state stats\n\n# Clear corrupted state (careful!)\nrm ~/.sloth-runner/state.db*\n</code></pre></p>"},{"location":"en/quick-start/#congratulations","title":"\ud83c\udf89 Congratulations!\ud83d\ude80 Ready for More?","text":"<p>You've successfully: - \u2705 Installed Sloth Runner - \u2705 Executed your first task - \u2705 Set up distributed agents - \u2705 Explored state management - \u2705 Monitored system metrics</p> <p>You're now ready to build powerful, distributed task orchestration workflows with Sloth Runner! \ud83d\ude80</p> <p>Explore advanced features and build production-ready workflows</p> Advanced Features \u2192 More Examples \u2192"},{"location":"en/repl/","title":"Interactive REPL","text":"<p>The <code>sloth-runner repl</code> command drops you into an interactive Read-Eval-Print Loop (REPL) session. This is a powerful tool for debugging, exploration, and quick experimentation with the sloth-runner modules.</p>"},{"location":"en/repl/#starting-the-repl","title":"Starting the REPL","text":"<p>To start a session, simply run: <pre><code>sloth-runner repl\n</code></pre></p> <p>You can also pre-load a workflow file to have its <code>Modern DSLs</code> and any helper functions available in the session. This is incredibly useful for debugging an existing pipeline.</p> <pre><code>sloth-runner repl -f /path/to/your/pipeline.sloth\n</code></pre>"},{"location":"en/repl/#features","title":"Features","text":""},{"location":"en/repl/#live-environment","title":"Live Environment","text":"<p>The REPL provides a live Lua environment where you can execute any Lua code. All the built-in sloth-runner modules (<code>aws</code>, <code>docker</code>, <code>fs</code>, <code>log</code>, etc.) are pre-loaded and ready to use.</p> <pre><code>sloth&gt; log.info(\"Hello from the REPL!\")\nsloth&gt; result = fs.read(\"README.md\")\nsloth&gt; print(string.sub(result, 1, 50))\n</code></pre>"},{"location":"en/repl/#autocompletion","title":"Autocompletion","text":"<p>The REPL has a sophisticated autocompletion system. - Start typing the name of a global variable or module (e.g., <code>aws</code>) and press <code>Tab</code> to see suggestions. - Type a module name followed by a dot (e.g., <code>docker.</code>) and press <code>Tab</code> to see all the functions available in that module.</p>"},{"location":"en/repl/#history","title":"History","text":"<p>The REPL keeps a history of your commands. Use the up and down arrow keys to navigate through previous commands.</p>"},{"location":"en/repl/#example-session","title":"Example Session","text":"<p>Here is an example of using the REPL to debug a Docker command.</p> <pre><code>$ sloth-runner repl\nSloth-Runner Interactive REPL\nType 'exit' or 'quit' to leave.\nsloth&gt; result = docker.exec({\"ps\", \"-a\"})\nsloth&gt; print(result.stdout)\nCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES\nsloth&gt; -- Now let's try to build an image\nsloth&gt; build_result = docker.build({tag=\"my-test\", path=\"./examples/docker\"})\nsloth&gt; print(build_result.success)\ntrue\nsloth&gt; exit\nBye!\n</code></pre>"},{"location":"en/security/","title":"\ud83d\udd12 Security","text":"<p>Enterprise-grade security features for production deployments.</p>"},{"location":"en/security/#overview","title":"Overview","text":"<p>Sloth Runner provides comprehensive security features:</p> <ul> <li>\ud83d\udd10 Secrets management</li> <li>\ud83d\udee1\ufe0f Access control</li> <li>\ud83d\udcdd Audit logging</li> <li>\ud83d\udd12 Encryption</li> </ul>"},{"location":"en/security/#key-features","title":"Key Features","text":""},{"location":"en/security/#secrets-management","title":"Secrets Management","text":"<p>Secure storage and injection of sensitive data.</p> <pre><code>local secret = require(\"secrets\")\n\nlocal deploy_task = task(\"secure_deploy\")\n    :command(function()\n        local api_key = secret.get(\"API_KEY\")\n        -- Use securely\n    end)\n    :build()\n</code></pre>"},{"location":"en/security/#access-control","title":"Access Control","text":"<p>Role-based access control (RBAC) for workflows and resources.</p>"},{"location":"en/security/#audit-trail","title":"Audit Trail","text":"<p>Complete logging of all actions for compliance.</p>"},{"location":"en/security/#encryption","title":"Encryption","text":"<p>Data encryption at rest and in transit.</p>"},{"location":"en/security/#best-practices","title":"Best Practices","text":"<ul> <li>\u2705 Use secret management for credentials</li> <li>\u2705 Enable audit logging</li> <li>\u2705 Implement least privilege access</li> <li>\u2705 Regular security audits</li> <li>\u2705 Encrypt sensitive data</li> </ul>"},{"location":"en/security/#learn-more","title":"Learn More","text":"<ul> <li>Enterprise Features</li> <li>Best Practices</li> </ul>"},{"location":"en/stack-management/","title":"\ud83d\uddc2\ufe0f Stack Management","text":"<p>Sloth Runner provides a complete stack management system similar to Pulumi, allowing you to persist workflow state and track executions over time.</p>"},{"location":"en/stack-management/#introduction","title":"\ud83d\ude80 Introduction","text":"<p>Stack Management in Sloth Runner enables:</p> <ul> <li>Persist state between executions</li> <li>Track outputs exported from pipeline</li> <li>Complete history of executions</li> <li>Intuitive CLI management</li> <li>Isolation by environment/project</li> </ul>"},{"location":"en/stack-management/#basic-syntax","title":"\ud83d\udcdd Basic Syntax","text":""},{"location":"en/stack-management/#running-with-stack","title":"Running with Stack","text":"<pre><code># New syntax - stack name as positional argument\nsloth-runner run {stack-name} --file workflow.sloth\n\n# Practical examples\nsloth-runner run production-app -f deploy.sloth --output enhanced\nsloth-runner run dev-environment -f test.sloth -o rich\nsloth-runner run my-cicd -f pipeline.sloth\n</code></pre>"},{"location":"en/stack-management/#managing-stacks","title":"Managing Stacks","text":"<pre><code># List all stacks\nsloth-runner stack list\n\n# Show stack details\nsloth-runner stack show production-app\n\n# Delete stack\nsloth-runner stack delete old-environment\n</code></pre>"},{"location":"en/stack-management/#core-concepts","title":"\ud83c\udfaf Core Concepts","text":""},{"location":"en/stack-management/#stack-state","title":"Stack State","text":"<p>Each stack maintains:</p> <ul> <li>Unique ID (UUID)</li> <li>Stack name</li> <li>Current status (created, running, completed, failed)</li> <li>Exported outputs from pipeline</li> <li>Execution history</li> <li>Metadata and configurations</li> </ul>"},{"location":"en/stack-management/#lifecycle","title":"Lifecycle","text":"<ol> <li>Creation: Stack is automatically created on first execution</li> <li>Execution: State is updated during execution</li> <li>Persistence: Outputs and results are saved</li> <li>Reuse: Subsequent executions reuse the stack</li> </ol>"},{"location":"en/stack-management/#state-persistence","title":"\ud83d\udcbe State Persistence","text":""},{"location":"en/stack-management/#database","title":"Database","text":"<p>Sloth Runner uses SQLite to persist state:</p> <pre><code>~/.sloth-runner/stacks.db\n</code></pre>"},{"location":"en/stack-management/#tables","title":"Tables","text":"<ul> <li>stacks: Main stack information</li> <li>stack_executions: Detailed execution history</li> </ul>"},{"location":"en/stack-management/#exported-outputs","title":"\ud83d\udcca Exported Outputs","text":""},{"location":"en/stack-management/#automatic-capture","title":"Automatic Capture","text":"<p>The system automatically captures:</p> <ul> <li>TaskRunner exports (<code>runner.Exports</code>)</li> <li>Global <code>outputs</code> variable from Lua</li> <li>Execution metadata</li> </ul>"},{"location":"en/stack-management/#export-example","title":"Export Example","text":"<pre><code>local deploy_task = task(\"deploy\")\n    :command(function(params, deps)\n        -- Deploy logic...\n\n        -- Export outputs to stack\n        runner.Export({\n            app_url = \"https://myapp.example.com\",\n            version = \"1.2.3\",\n            environment = \"production\",\n            deployed_at = os.date()\n        })\n\n        return true, \"Deploy successful\", deploy_info\n    end)\n    :build()\n</code></pre>"},{"location":"en/stack-management/#cli-interface","title":"\ud83d\udda5\ufe0f CLI Interface","text":""},{"location":"en/stack-management/#stack-list","title":"Stack List","text":"<pre><code>$ sloth-runner stack list\n\nWorkflow Stacks     \n\nNAME                  STATUS     LAST RUN           DURATION     EXECUTIONS\n----                  ------     --------           --------     ----------\nproduction-app        completed  2025-09-29 19:27   6.8s         5\ndev-environment       running    2025-09-29 19:25   2.1s         12\nstaging-api           failed     2025-09-29 19:20   4.2s         3\n</code></pre>"},{"location":"en/stack-management/#stack-details","title":"Stack Details","text":"<pre><code>$ sloth-runner stack show production-app\n\nStack: production-app     \n\nID: abc123-def456-789\nStatus: completed\nCreated: 2025-09-29 15:30:21\nUpdated: 2025-09-29 19:27:15\nExecutions: 5\nLast Duration: 6.8s\n\n     Outputs     \n\napp_url: \"https://myapp.example.com\"\nversion: \"1.2.3\"\nenvironment: \"production\"\ndeployed_at: \"2025-09-29 19:27:15\"\n\n     Recent Executions     \n\nSTARTED            STATUS     DURATION   TASKS   SUCCESS   FAILED\n-------            ------     --------   -----   -------   ------\n2025-09-29 19:27   completed  6.8s       3       3         0\n2025-09-29 18:45   completed  7.2s       3       3         0\n2025-09-29 17:30   failed     4.1s       3       2         1\n</code></pre>"},{"location":"en/stack-management/#output-styles","title":"\ud83c\udfa8 Output Styles","text":""},{"location":"en/stack-management/#configurable-per-execution","title":"Configurable per Execution","text":"<pre><code># Basic output (default)\nsloth-runner run my-stack -f workflow.sloth\n\n# Enhanced output\nsloth-runner run my-stack -f workflow.sloth --output enhanced\nsloth-runner run my-stack -f workflow.sloth -o rich\nsloth-runner run my-stack -f workflow.sloth --output modern\n</code></pre>"},{"location":"en/stack-management/#pulumi-style","title":"Pulumi Style","text":"<p>The <code>enhanced</code> output provides rich formatting similar to Pulumi:</p> <pre><code>\ud83e\udda5 Sloth Runner\n\n     Workflow: production-app     \n\nStarted at: 2025-09-29 19:27:15\n\n\u2713 build (2.1s) completed\n\u2713 test (3.2s) completed  \n\u2713 deploy (1.5s) completed\n\n     Workflow Completed Successfully     \n\n\u2713 production-app\nDuration: 6.8s\nTasks executed: 3\n\n     Outputs     \n\n\u251c\u2500 exports:\n  \u2502 app_url: \"https://myapp.example.com\"\n  \u2502 version: \"1.2.3\"\n  \u2502 environment: \"production\"\n</code></pre>"},{"location":"en/stack-management/#use-cases","title":"\ud83d\udd27 Use Cases","text":""},{"location":"en/stack-management/#separate-environments","title":"Separate Environments","text":"<pre><code># Development\nsloth-runner run dev-app -f app.sloth\n\n# Staging  \nsloth-runner run staging-app -f app.sloth\n\n# Production\nsloth-runner run prod-app -f app.sloth --output enhanced\n</code></pre>"},{"location":"en/stack-management/#cicd-integration","title":"CI/CD Integration","text":"<pre><code># In CI/CD pipeline\nsloth-runner run ${ENVIRONMENT}-${APP_NAME} -f pipeline.sloth\n\n# Examples:\nsloth-runner run prod-frontend -f frontend-deploy.sloth\nsloth-runner run staging-api -f api-deploy.sloth\n</code></pre>"},{"location":"en/stack-management/#monitoring","title":"Monitoring","text":"<pre><code># View status of all environments\nsloth-runner stack list\n\n# Check last production deployment\nsloth-runner stack show prod-app\n\n# Clean up test environments\nsloth-runner stack delete temp-test-env\n</code></pre>"},{"location":"en/stack-management/#best-practices","title":"\ud83d\udee0\ufe0f Best Practices","text":""},{"location":"en/stack-management/#stack-naming","title":"Stack Naming","text":"<pre><code># Use pattern: {environment}-{application}\nsloth-runner run prod-frontend -f deploy.sloth\nsloth-runner run staging-api -f deploy.sloth\nsloth-runner run dev-database -f setup.sloth\n</code></pre>"},{"location":"en/stack-management/#output-exports","title":"Output Exports","text":"<pre><code>-- Export relevant information\nrunner.Export({\n    -- Important URLs\n    app_url = deploy_info.url,\n    admin_url = deploy_info.admin_url,\n\n    -- Version information\n    version = build_info.version,\n    commit_hash = build_info.commit,\n\n    -- Environment settings\n    environment = config.environment,\n    region = config.region,\n\n    -- Timestamps\n    deployed_at = os.date(),\n    build_time = build_info.timestamp\n})\n</code></pre>"},{"location":"en/stack-management/#lifecycle-management","title":"Lifecycle Management","text":"<pre><code># Active development\nsloth-runner run dev-app -f app.sloth\n\n# When ready for staging\nsloth-runner run staging-app -f app.sloth\n\n# Deploy to production\nsloth-runner run prod-app -f app.sloth --output enhanced\n\n# Clean up old environments\nsloth-runner stack delete old-test-branch\n</code></pre>"},{"location":"en/stack-management/#migration","title":"\ud83d\udd04 Migration","text":""},{"location":"en/stack-management/#old-vs-new-commands","title":"Old vs New Commands","text":"<pre><code># Before\nsloth-runner run -f workflow.sloth --stack my-stack\n\n# Now\nsloth-runner run my-stack -f workflow.sloth\n</code></pre>"},{"location":"en/stack-management/#compatibility","title":"Compatibility","text":"<ul> <li>Existing workflows continue to work</li> <li>Stack is optional - can run without specifying</li> <li>Outputs are captured automatically when stack is used</li> </ul>"},{"location":"en/stack-management/#next-steps","title":"\ud83d\udcda Next Steps","text":"<ul> <li>Output Styles - Output style configuration</li> <li>Workflow Scaffolding - Project creation</li> <li>Examples - Practical examples</li> <li>CLI Reference - Complete command reference</li> </ul>"},{"location":"en/testing/","title":"Testing Workflows","text":"<p>The sloth-runner includes a built-in testing framework that allows you to write unit and integration tests for your task workflows. Writing tests for your automation is crucial for ensuring reliability, preventing regressions, and having confidence when making changes.</p>"},{"location":"en/testing/#the-test-command","title":"The <code>test</code> Command","text":"<p>You can run a test file using the <code>sloth-runner test</code> command. It requires two main files: the workflow you want to test and the test script itself.</p> <pre><code>sloth-runner test -w &lt;path_to_workflow.sloth&gt; -f &lt;path_to_test_file.sloth&gt;\n</code></pre> <ul> <li><code>-w, --workflow</code>: Specifies the path to the main <code>Modern DSLs</code> file that you want to test.</li> <li><code>-f, --file</code>: Specifies the path to your test file.</li> </ul>"},{"location":"en/testing/#writing-tests","title":"Writing Tests","text":"<p>Tests are written in Lua and use two new global modules provided by the test runner: <code>test</code> and <code>assert</code>.</p>"},{"location":"en/testing/#the-test-module","title":"The <code>test</code> Module","text":"<p>The <code>test</code> module is used to structure your tests and to run specific tasks from your workflow.</p> <ul> <li><code>test.describe(suite_name, function)</code>: Groups related tests into a \"suite\". This is for organization.</li> <li><code>test.it(function)</code>: Defines an individual test case. The description of the test should be included in the assertion messages inside this function.</li> <li><code>test.run_task(task_name)</code>: This is the core function of the testing framework. It executes a single task by its name from the loaded workflow file. It returns a <code>result</code> table containing the execution details.</li> </ul> <p>The <code>result</code> table returned by <code>run_task</code> has the following structure:</p> <pre><code>{\n  success = true, -- boolean: true if the task succeeded, false otherwise\n  message = \"Task executed successfully\", -- string: The message returned by the task\n  duration = \"1.23ms\", -- string: The execution duration\n  output = { ... }, -- table: The output table returned by the task\n  error = nil -- string: The error message if the task failed\n}\n</code></pre>"},{"location":"en/testing/#the-assert-module","title":"The <code>assert</code> Module","text":"<p>The <code>assert</code> module provides functions to check the results of your task executions.</p> <ul> <li><code>assert.is_true(value, message)</code>: Checks if the <code>value</code> is true.</li> <li><code>assert.equals(actual, expected, message)</code>: Checks if the <code>actual</code> value is equal to the <code>expected</code> value.</li> </ul>"},{"location":"en/testing/#mocking-modules","title":"Mocking Modules","text":"<p>To test the logic of your pipelines without making real external calls (e.g., to AWS, Docker, or Terraform), the testing framework includes a powerful mocking feature.</p>"},{"location":"en/testing/#strict-mocking-policy","title":"Strict Mocking Policy","text":"<p>The test runner enforces a strict mocking policy. When running in test mode, any call to a module function (like <code>aws.exec</code> or <code>docker.build</code>) that has not been explicitly mocked will cause the test to fail immediately. This ensures that your tests are fully self-contained, deterministic, and do not have unintended side effects.</p>"},{"location":"en/testing/#testmockfunction_name-mock_definition","title":"<code>test.mock(function_name, mock_definition)</code>","text":"<p>This function allows you to define a fake return value for any mockable module function.</p> <ul> <li><code>function_name</code> (string): The full name of the function to mock (e.g., <code>\"aws.s3.sync\"</code>, <code>\"docker.build\"</code>).</li> <li><code>mock_definition</code> (table): A table that defines what the mocked function should return. It must contain a <code>returns</code> key, which is a list of the values the function will return.</li> </ul> <p>The <code>returns</code> list is crucial because Lua functions can return multiple values.</p> <p>Example:</p> <pre><code>-- Mock a function that returns a single result table\ntest.mock(\"docker.build\", {\n  returns = {\n    { success = true, stdout = \"Successfully built image\" }\n  }\n})\n\n-- Mock a function that returns two values (e.g., a value and an error)\n-- This simulates a successful call to terraform.output\ntest.mock(\"terraform.output\", {\n  returns = { \"my_file.txt\", nil }\n})\n\n-- This simulates a failed call\ntest.mock(\"terraform.output\", {\n  returns = { nil, \"output not found\" }\n})\n</code></pre>"},{"location":"en/testing/#complete-mocking-example","title":"Complete Mocking Example","text":"<p>Let's say you have a task that calls <code>aws.exec</code> and has logic that depends on the output.</p> <p>Task in <code>my_workflow.sloth</code>: <pre><code>-- ...\n{\n  name = \"check-account\",\n  command = function()\n    local result = aws.exec({\"sts\", \"get-caller-identity\"})\n    local data = data.parse_json(result.stdout)\n    if data.Account == \"123456789012\" then\n      return true, \"Correct account.\"\n    else\n      return false, \"Wrong account.\"\n    end\n  end\n}\n-- ...\n</code></pre></p> <p>Test in <code>my_test.sloth</code>: <pre><code>test.describe(\"Account Check Logic\", function()\n  test.it(function()\n    -- Mock the return value of aws.exec\n    test.mock(\"aws.exec\", {\n      returns = {\n        {\n          success = true,\n          stdout = '{\"Account\": \"123456789012\"}'\n        }\n      }\n    })\n\n    -- Run the task that uses the mock\n    local result = test.run_task(\"check-account\")\n\n    -- Assert that the task's logic worked correctly with the mocked data\n    assert.is_true(result.success, \"Task should succeed with the correct account ID\")\n    assert.equals(result.message, \"Correct account.\", \"Message should be correct\")\n  end)\nend)\n</code></pre></p>"},{"location":"en/ai/optimization/","title":"\u26a1 AI-Powered Optimization","text":"<p>Sloth Runner includes intelligent optimization capabilities powered by machine learning.</p>"},{"location":"en/ai/optimization/#overview","title":"Overview","text":"<p>The AI optimization engine analyzes your workflows and provides recommendations for:</p> <ul> <li>\u26a1 Performance improvements</li> <li>\ud83d\udd04 Resource allocation</li> <li>\u23f1\ufe0f Execution timing</li> <li>\ud83d\udcca Bottleneck detection</li> </ul>"},{"location":"en/ai/optimization/#key-features","title":"Key Features","text":""},{"location":"en/ai/optimization/#automatic-optimization","title":"Automatic Optimization","text":"<p>The system automatically suggests optimizations based on historical data.</p>"},{"location":"en/ai/optimization/#resource-prediction","title":"Resource Prediction","text":"<p>Predicts resource usage patterns to optimize allocation.</p>"},{"location":"en/ai/optimization/#execution-planning","title":"Execution Planning","text":"<p>Suggests optimal task execution order based on dependencies and resource availability.</p>"},{"location":"en/ai/optimization/#usage","title":"Usage","text":"<pre><code>-- Enable AI optimization\nworkflow.define(\"optimized_workflow\", {\n    ai_optimization = true,\n    tasks = { ... }\n})\n</code></pre>"},{"location":"en/ai/optimization/#learn-more","title":"Learn More","text":"<ul> <li>AI Integration Overview</li> <li>Performance Best Practices</li> <li>Advanced Examples</li> </ul>"},{"location":"en/ai/prediction/","title":"\ud83d\udd2e Failure Prediction","text":"<p>AI-powered failure prediction helps prevent issues before they occur.</p>"},{"location":"en/ai/prediction/#overview","title":"Overview","text":"<p>The failure prediction system uses historical data to:</p> <ul> <li>\ud83c\udfaf Predict potential failures</li> <li>\ud83d\udcca Identify risk patterns</li> <li>\u26a0\ufe0f Alert before issues occur</li> <li>\ud83d\udd04 Suggest preventive actions</li> </ul>"},{"location":"en/ai/prediction/#features","title":"Features","text":""},{"location":"en/ai/prediction/#pattern-recognition","title":"Pattern Recognition","text":"<p>Analyzes historical failures to identify common patterns.</p>"},{"location":"en/ai/prediction/#early-warning-system","title":"Early Warning System","text":"<p>Alerts you when conditions match failure patterns.</p>"},{"location":"en/ai/prediction/#automated-recovery","title":"Automated Recovery","text":"<p>Suggests or implements automatic recovery strategies.</p>"},{"location":"en/ai/prediction/#configuration","title":"Configuration","text":"<pre><code>workflow.define(\"safe_workflow\", {\n    failure_prediction = {\n        enabled = true,\n        confidence_threshold = 0.75,\n        auto_prevent = true\n    },\n    tasks = { ... }\n})\n</code></pre>"},{"location":"en/ai/prediction/#learn-more","title":"Learn More","text":"<ul> <li>AI Integration</li> <li>Error Handling Best Practices</li> </ul>"},{"location":"en/examples/cicd/","title":"\ud83d\udd04 CI/CD Pipeline Example","text":"<p>Complete CI/CD pipeline example using Sloth Runner.</p>"},{"location":"en/examples/cicd/#overview","title":"Overview","text":"<p>This example demonstrates a full CI/CD pipeline with: - Build - Test - Deploy - Monitoring</p>"},{"location":"en/examples/cicd/#complete-example","title":"Complete Example","text":"<pre><code>local exec = require(\"exec\")\nlocal git = require(\"git\")\nlocal log = require(\"log\")\n\n-- Build stage\nlocal build_task = task(\"build\")\n    :description(\"Build application\")\n    :command(function()\n        log.info(\"\ud83d\udd28 Building...\")\n        local result = exec.run(\"go build -o app ./cmd\")\n        return result.success, result.stdout\n    end)\n    :build()\n\n-- Test stage\nlocal test_task = task(\"test\")\n    :description(\"Run tests\")\n    :depends_on({\"build\"})\n    :command(function()\n        log.info(\"\ud83e\uddea Testing...\")\n        local result = exec.run(\"go test -v ./...\")\n        return result.success, result.stdout\n    end)\n    :build()\n\n-- Deploy stage\nlocal deploy_task = task(\"deploy\")\n    :description(\"Deploy to production\")\n    :depends_on({\"build\", \"test\"})\n    :command(function()\n        log.info(\"\ud83d\ude80 Deploying...\")\n        local result = exec.run(\"kubectl apply -f k8s/\")\n        return result.success, result.stdout\n    end)\n    :build()\n\n-- Complete CI/CD workflow\nworkflow.define(\"cicd_pipeline\", {\n    description = \"Complete CI/CD pipeline\",\n    tasks = { build_task, test_task, deploy_task },\n\n    on_success = function()\n        log.info(\"\u2705 Pipeline completed successfully!\")\n    end,\n\n    on_failure = function(error)\n        log.error(\"\u274c Pipeline failed: \" .. error.message)\n    end\n})\n</code></pre>"},{"location":"en/examples/cicd/#features-demonstrated","title":"Features Demonstrated","text":"<ul> <li>\u2705 Multi-stage pipeline</li> <li>\u2705 Task dependencies</li> <li>\u2705 Error handling</li> <li>\u2705 Logging</li> <li>\u2705 Deployment automation</li> </ul>"},{"location":"en/examples/cicd/#learn-more","title":"Learn More","text":"<ul> <li>GitOps Features</li> <li>Advanced Examples</li> </ul>"},{"location":"en/examples/iac/","title":"\ud83c\udfd7\ufe0f Infrastructure as Code Example","text":"<p>Managing infrastructure with Sloth Runner and Terraform/Pulumi.</p>"},{"location":"en/examples/iac/#overview","title":"Overview","text":"<p>Use Sloth Runner to orchestrate infrastructure deployments: - \ud83c\udf0d Terraform - \ud83c\udfd7\ufe0f Pulumi - \u2601\ufe0f Multi-cloud</p>"},{"location":"en/examples/iac/#terraform-example","title":"Terraform Example","text":"<pre><code>local terraform = require(\"terraform\")\nlocal log = require(\"log\")\n\nlocal plan_task = task(\"tf_plan\")\n    :description(\"Plan infrastructure changes\")\n    :command(function()\n        log.info(\"\ud83d\udccb Planning...\")\n        local result = terraform.plan({\n            dir = \"./terraform\",\n            var_file = \"prod.tfvars\"\n        })\n        return result.success, result.plan\n    end)\n    :build()\n\nlocal apply_task = task(\"tf_apply\")\n    :description(\"Apply infrastructure changes\")\n    :depends_on({\"tf_plan\"})\n    :command(function()\n        log.info(\"\ud83d\ude80 Applying...\")\n        local result = terraform.apply({\n            dir = \"./terraform\",\n            auto_approve = true\n        })\n        return result.success, result.output\n    end)\n    :build()\n\nworkflow.define(\"infrastructure\", {\n    description = \"Manage infrastructure\",\n    tasks = { plan_task, apply_task }\n})\n</code></pre>"},{"location":"en/examples/iac/#pulumi-example","title":"Pulumi Example","text":"<pre><code>local pulumi = require(\"pulumi\")\n\nlocal deploy_task = task(\"pulumi_deploy\")\n    :description(\"Deploy with Pulumi\")\n    :command(function()\n        local result = pulumi.up({\n            stack = \"production\",\n            project = \"./infra\"\n        })\n        return result.success\n    end)\n    :build()\n</code></pre>"},{"location":"en/examples/iac/#learn-more","title":"Learn More","text":"<ul> <li>Terraform Module</li> <li>Pulumi Module</li> <li>Multi-Cloud</li> </ul>"},{"location":"en/examples/multi-cloud/","title":"\u2601\ufe0f Multi-Cloud Deployment Example","text":"<p>Deploy applications across multiple cloud providers.</p>"},{"location":"en/examples/multi-cloud/#overview","title":"Overview","text":"<p>Sloth Runner supports deployment to: - \u2601\ufe0f AWS - \ud83d\udd37 Azure - \ud83c\udf29\ufe0f GCP - \ud83c\udf0a DigitalOcean</p>"},{"location":"en/examples/multi-cloud/#example-deploy-to-multiple-clouds","title":"Example: Deploy to Multiple Clouds","text":"<pre><code>local aws = require(\"aws\")\nlocal azure = require(\"azure\")\nlocal gcp = require(\"gcp\")\nlocal log = require(\"log\")\n\n-- Deploy to AWS\nlocal aws_deploy = task(\"deploy_aws\")\n    :description(\"Deploy to AWS\")\n    :command(function()\n        log.info(\"\u2601\ufe0f Deploying to AWS...\")\n        local result = aws.deploy({\n            region = \"us-east-1\",\n            service = \"ecs\",\n            image = \"myapp:latest\"\n        })\n        return result.success\n    end)\n    :build()\n\n-- Deploy to Azure\nlocal azure_deploy = task(\"deploy_azure\")\n    :description(\"Deploy to Azure\")\n    :command(function()\n        log.info(\"\ud83d\udd37 Deploying to Azure...\")\n        local result = azure.deploy({\n            region = \"eastus\",\n            service = \"container-instances\",\n            image = \"myapp:latest\"\n        })\n        return result.success\n    end)\n    :build()\n\n-- Deploy to GCP\nlocal gcp_deploy = task(\"deploy_gcp\")\n    :description(\"Deploy to GCP\")\n    :command(function()\n        log.info(\"\ud83c\udf29\ufe0f Deploying to GCP...\")\n        local result = gcp.deploy({\n            region = \"us-central1\",\n            service = \"cloud-run\",\n            image = \"myapp:latest\"\n        })\n        return result.success\n    end)\n    :build()\n\n-- Multi-cloud workflow\nworkflow.define(\"multi_cloud\", {\n    description = \"Deploy to multiple clouds\",\n    tasks = {\n        aws_deploy,\n        azure_deploy,\n        gcp_deploy\n    },\n    parallel = true  -- Deploy to all clouds simultaneously\n})\n</code></pre>"},{"location":"en/examples/multi-cloud/#features","title":"Features","text":"<ul> <li>\u2705 Parallel deployment</li> <li>\u2705 Provider-specific configuration</li> <li>\u2705 Unified interface</li> <li>\u2705 Automatic failover</li> </ul>"},{"location":"en/examples/multi-cloud/#learn-more","title":"Learn More","text":"<ul> <li>Multi-Cloud Excellence</li> <li>AWS Module</li> <li>Azure Module</li> <li>GCP Module</li> </ul>"},{"location":"en/gitops/kubernetes/","title":"\u2638\ufe0f Kubernetes Integration","text":"<p>Native Kubernetes integration for GitOps workflows.</p>"},{"location":"en/gitops/kubernetes/#overview","title":"Overview","text":"<p>Sloth Runner integrates seamlessly with Kubernetes:</p> <ul> <li>\ud83d\udce6 Deploy applications</li> <li>\ud83d\udd04 Manage resources</li> <li>\ud83d\udcca Monitor status</li> <li>\ud83d\udd01 Rolling updates</li> </ul>"},{"location":"en/gitops/kubernetes/#basic-usage","title":"Basic Usage","text":"<pre><code>local k8s = require(\"kubernetes\")\n\nlocal deploy_task = task(\"k8s_deploy\")\n    :description(\"Deploy to Kubernetes\")\n    :command(function()\n        -- Apply manifest\n        local result = k8s.apply(\"deployment.yaml\")\n\n        -- Wait for rollout\n        k8s.wait_for_rollout(\"deployment/myapp\", {\n            timeout = \"5m\"\n        })\n\n        return result.success\n    end)\n    :build()\n</code></pre>"},{"location":"en/gitops/kubernetes/#features","title":"Features","text":""},{"location":"en/gitops/kubernetes/#manifest-management","title":"Manifest Management","text":"<ul> <li>Apply/delete manifests</li> <li>Template rendering</li> <li>Diff preview</li> </ul>"},{"location":"en/gitops/kubernetes/#resource-monitoring","title":"Resource Monitoring","text":"<ul> <li>Pod status</li> <li>Deployment health</li> <li>Service endpoints</li> </ul>"},{"location":"en/gitops/kubernetes/#gitops-workflow","title":"GitOps Workflow","text":"<ul> <li>Git-based source of truth</li> <li>Automated sync</li> <li>Drift detection</li> </ul>"},{"location":"en/gitops/kubernetes/#learn-more","title":"Learn More","text":"<ul> <li>GitOps Overview</li> <li>Multi-Cloud Support</li> </ul>"},{"location":"en/gitops/multi-env/","title":"\ud83c\udfe2 Multi-Environment GitOps","text":"<p>Deploy and manage applications across multiple environments with GitOps.</p>"},{"location":"en/gitops/multi-env/#overview","title":"Overview","text":"<p>Sloth Runner provides native multi-environment support:</p> <ul> <li>\ud83d\udd04 Development</li> <li>\ud83e\uddea Staging</li> <li>\ud83d\ude80 Production</li> <li>\ud83c\udf0d Multi-region</li> </ul>"},{"location":"en/gitops/multi-env/#environment-configuration","title":"Environment Configuration","text":"<pre><code>-- Define environment-specific settings\nlocal environments = {\n    dev = {\n        replicas = 1,\n        resources = { cpu = \"100m\", memory = \"128Mi\" }\n    },\n    staging = {\n        replicas = 2,\n        resources = { cpu = \"200m\", memory = \"256Mi\" }\n    },\n    production = {\n        replicas = 5,\n        resources = { cpu = \"1\", memory = \"1Gi\" }\n    }\n}\n\n-- Deploy to specific environment\nworkflow.define(\"multi_env_deploy\", {\n    environment = params.env or \"dev\",\n    tasks = { deploy_task }\n})\n</code></pre>"},{"location":"en/gitops/multi-env/#features","title":"Features","text":"<ul> <li>\u2705 Environment isolation</li> <li>\u2705 Progressive rollout</li> <li>\u2705 Environment-specific secrets</li> <li>\u2705 Cross-environment promotion</li> </ul>"},{"location":"en/gitops/multi-env/#learn-more","title":"Learn More","text":"<ul> <li>GitOps Features</li> <li>Stack Management</li> </ul>"},{"location":"en/modules/ai/","title":"\ud83e\udd16 AI Module - Complete API Reference","text":"<p>The AI module provides artificial intelligence capabilities for task optimization, failure prediction, and performance analytics.</p>"},{"location":"en/modules/ai/#module-overview","title":"\ud83d\udccb Module Overview","text":"<pre><code>local ai = require(\"ai\")\n</code></pre> <p>The AI module is the core of Sloth Runner's intelligence features, providing:</p> <ul> <li>\ud83d\udd2e Predictive Failure Detection - Predict task failures before they happen</li> <li>\u26a1 Intelligent Optimization - Automatically optimize commands for better performance  </li> <li>\ud83d\udcca Performance Analytics - Analyze execution patterns and trends</li> <li>\ud83e\udde0 Adaptive Learning - Continuous improvement from execution history</li> </ul>"},{"location":"en/modules/ai/#configuration","title":"\ud83d\udd27 Configuration","text":""},{"location":"en/modules/ai/#aiconfigureconfig","title":"<code>ai.configure(config)</code>","text":"<p>Configure AI behavior and capabilities.</p> <pre><code>ai.configure({\n    enabled = true,                    -- Enable/disable AI features\n    learning_mode = \"adaptive\",        -- adaptive | aggressive | conservative\n    optimization_level = 8,            -- 1-10 (higher = more aggressive)\n    failure_prediction = true,         -- Enable failure prediction\n    auto_optimize = true,              -- Automatically apply optimizations\n    confidence_threshold = 0.7         -- Minimum confidence for auto-apply\n})\n</code></pre> <p>Parameters: - <code>enabled</code> (boolean): Enable or disable all AI features - <code>learning_mode</code> (string): Learning aggressiveness level - <code>optimization_level</code> (number): Optimization aggressiveness (1-10) - <code>failure_prediction</code> (boolean): Enable predictive failure detection - <code>auto_optimize</code> (boolean): Automatically apply high-confidence optimizations - <code>confidence_threshold</code> (number): Minimum confidence score for auto-application</p>"},{"location":"en/modules/ai/#aiget_config","title":"<code>ai.get_config()</code>","text":"<p>Get current AI configuration.</p> <pre><code>local config = ai.get_config()\n-- Returns: {enabled: true, learning_mode: \"adaptive\", ...}\n</code></pre>"},{"location":"en/modules/ai/#optimization","title":"\u26a1 Optimization","text":""},{"location":"en/modules/ai/#aioptimize_commandcommand-options","title":"<code>ai.optimize_command(command, options)</code>","text":"<p>Get AI optimization suggestions for a command.</p> <pre><code>local result = ai.optimize_command(\"go build -o app ./cmd/main.go\", {\n    history = ai.get_task_history(\"go build\"),\n    system_resources = {\n        cpu_usage = 45,\n        memory_usage = 60,\n        load_avg = 1.2\n    },\n    similar_tasks = ai.find_similar_tasks(\"go build\", 10),\n    environment = \"production\"\n})\n</code></pre> <p>Parameters: - <code>command</code> (string): Original command to optimize - <code>options</code> (table): Optimization context   - <code>history</code> (array): Historical executions of this command   - <code>system_resources</code> (table): Current system resource usage   - <code>similar_tasks</code> (array): Similar task executions   - <code>environment</code> (string): Execution environment (dev/staging/prod)</p> <p>Returns: <pre><code>{\n    original_command = \"go build -o app ./cmd/main.go\",\n    optimized_command = \"go build -p 4 -ldflags='-s -w' -o app ./cmd/main.go\",\n    confidence_score = 0.85,           -- 0.0-1.0\n    expected_speedup = 2.3,            -- Expected performance multiplier\n    optimizations = {                  -- Applied optimizations\n        {\n            type = \"parallelization\",\n            description = \"Added -p 4 for parallel compilation\",\n            impact = 1.8\n        },\n        {\n            type = \"size_optimization\", \n            description = \"Added -ldflags='-s -w' to reduce binary size\",\n            impact = 0.5\n        }\n    },\n    resource_savings = {\n        estimated_time_saved = \"1.2s\",\n        memory_efficiency = \"+15%\"\n    },\n    rationale = \"Command shows parallelization opportunities based on system CPU count\"\n}\n</code></pre></p>"},{"location":"en/modules/ai/#failure-prediction","title":"\ud83d\udd2e Failure Prediction","text":""},{"location":"en/modules/ai/#aipredict_failuretask_name-command-options","title":"<code>ai.predict_failure(task_name, command, options)</code>","text":"<p>Predict the probability of task failure.</p> <pre><code>local prediction = ai.predict_failure(\"deploy_task\", \"kubectl apply -f deployment.yaml\", {\n    history = ai.get_task_history(\"kubectl apply\"),\n    environment = \"production\",\n    system_state = {\n        disk_usage = 85,\n        network_latency = 120\n    }\n})\n</code></pre> <p>Parameters: - <code>task_name</code> (string): Name of the task being analyzed - <code>command</code> (string): Command to be executed - <code>options</code> (table): Prediction context   - <code>history</code> (array): Historical executions   - <code>environment</code> (string): Execution environment   - <code>system_state</code> (table): Current system state</p> <p>Returns: <pre><code>{\n    failure_probability = 0.23,        -- 0.0-1.0\n    confidence = 0.78,                 -- Confidence in prediction\n    risk_factors = {                   -- Identified risk factors\n        {\n            type = \"resource_contention\",\n            description = \"High disk usage detected (85%)\",\n            impact = 0.6,\n            severity = \"medium\"\n        },\n        {\n            type = \"network_latency\",\n            description = \"Elevated network latency (120ms)\",\n            impact = 0.3,\n            severity = \"low\"\n        }\n    },\n    recommendations = {                -- AI-generated recommendations\n        \"Consider waiting for disk usage to decrease below 80%\",\n        \"Add timeout configuration to handle network latency\",\n        \"Implement retry logic with exponential backoff\"\n    },\n    similar_failures = {               -- Historical similar failures\n        count = 3,\n        common_causes = [\"network_timeout\", \"resource_exhaustion\"]\n    }\n}\n</code></pre></p>"},{"location":"en/modules/ai/#performance-analytics","title":"\ud83d\udcca Performance Analytics","text":""},{"location":"en/modules/ai/#aianalyze_performancecommand-options","title":"<code>ai.analyze_performance(command, options)</code>","text":"<p>Analyze performance patterns for a command or task.</p> <pre><code>local analysis = ai.analyze_performance(\"go build\", {\n    time_range = \"30d\",                -- 1d, 7d, 30d, 90d\n    environment = \"all\",               -- all, dev, staging, prod\n    include_failures = true\n})\n</code></pre> <p>Parameters: - <code>command</code> (string): Command to analyze - <code>options</code> (table): Analysis options   - <code>time_range</code> (string): Time range for analysis   - <code>environment</code> (string): Environment filter   - <code>include_failures</code> (boolean): Include failed executions</p> <p>Returns: <pre><code>{\n    total_executions = 156,\n    success_rate = 0.94,               -- 94% success rate\n    avg_execution_time = \"2.3s\",\n    fastest_execution = \"1.1s\",\n    slowest_execution = \"5.7s\",\n    performance_trend = \"improving\",    -- improving | stable | degrading\n    insights = {                       -- AI-generated insights\n        \"Performance improved 23% over the last 30 days\",\n        \"Failures primarily occur during high system load\",\n        \"Consider caching to improve cold-start performance\"\n    },\n    recommendations = {\n        \"Enable build caching to reduce average execution time\",\n        \"Implement resource monitoring for failure prevention\"\n    },\n    patterns = {                       -- Detected patterns\n        peak_hours = [\"09:00-10:00\", \"14:00-15:00\"],\n        failure_correlation = [\"high_cpu_usage\", \"memory_pressure\"]\n    }\n}\n</code></pre></p>"},{"location":"en/modules/ai/#aiget_task_statstask_name","title":"<code>ai.get_task_stats(task_name)</code>","text":"<p>Get aggregated statistics for a specific task.</p> <pre><code>local stats = ai.get_task_stats(\"build_application\")\n</code></pre> <p>Returns: <pre><code>{\n    task_name = \"build_application\",\n    total_runs = 89,\n    success_count = 84,\n    failure_count = 5,\n    success_rate = 0.944,              -- 94.4%\n    total_time = \"3m 45s\",\n    avg_time = \"2.5s\",\n    fastest_time = \"1.2s\",\n    slowest_time = \"8.1s\",\n    last_execution = \"2024-01-15T10:30:00Z\",\n    trend = \"stable\"\n}\n</code></pre></p>"},{"location":"en/modules/ai/#learning-history","title":"\ud83e\udde0 Learning &amp; History","text":""},{"location":"en/modules/ai/#airecord_executionexecution_data","title":"<code>ai.record_execution(execution_data)</code>","text":"<p>Record task execution for AI learning.</p> <pre><code>ai.record_execution({\n    task_name = \"build_application\",\n    command = \"go build -o app ./cmd/main.go\",\n    success = true,\n    execution_time = \"2.5s\",\n    start_time = os.time(),\n    end_time = os.time() + 2.5,\n    parameters = {\n        environment = \"development\",\n        go_version = \"1.21.0\",\n        parallel = true\n    },\n    system_resources = {\n        cpu_usage = 45,\n        memory_usage = 60,\n        disk_usage = 30\n    },\n    error_message = nil,               -- If success = false\n    optimization_applied = true,\n    ai_confidence = 0.85\n})\n</code></pre> <p>Parameters: - <code>task_name</code> (string): Name of the executed task - <code>command</code> (string): Command that was executed - <code>success</code> (boolean): Whether execution was successful - <code>execution_time</code> (string): Time taken to execute - <code>parameters</code> (table): Execution parameters and context - <code>system_resources</code> (table): System resource state during execution - <code>error_message</code> (string): Error message if failed - <code>optimization_applied</code> (boolean): Whether AI optimization was used - <code>ai_confidence</code> (number): Confidence score if optimization was applied</p>"},{"location":"en/modules/ai/#aiget_task_historycommand-limit","title":"<code>ai.get_task_history(command, limit)</code>","text":"<p>Get execution history for a command.</p> <pre><code>local history = ai.get_task_history(\"go build\", 20)\n-- Returns array of execution records\n</code></pre>"},{"location":"en/modules/ai/#aifind_similar_taskscommand-limit","title":"<code>ai.find_similar_tasks(command, limit)</code>","text":"<p>Find tasks similar to the given command.</p> <pre><code>local similar = ai.find_similar_tasks(\"go build -o app\", 10)\n-- Returns array of similar task executions\n</code></pre>"},{"location":"en/modules/ai/#insights-recommendations","title":"\ud83d\udca1 Insights &amp; Recommendations","text":""},{"location":"en/modules/ai/#aigenerate_insightsoptions","title":"<code>ai.generate_insights(options)</code>","text":"<p>Generate AI-powered insights about task execution patterns.</p> <pre><code>local insights = ai.generate_insights({\n    scope = \"global\",                  -- global | task | command\n    task_name = \"build_application\",   -- if scope = \"task\"\n    time_range = \"7d\"\n})\n</code></pre> <p>Returns: <pre><code>{\n    \"Tasks executed during business hours have 15% lower failure rate\",\n    \"Commands with parallel flags show 40% better performance\", \n    \"Memory-intensive tasks perform better with explicit heap size settings\",\n    \"Network-dependent tasks should include timeout and retry configurations\"\n}\n</code></pre></p>"},{"location":"en/modules/ai/#best-practices","title":"\ud83c\udfaf Best Practices","text":""},{"location":"en/modules/ai/#1-always-record-executions","title":"1. Always Record Executions","text":"<pre><code>-- Record every execution for AI learning\nworkflow.define(\"my_pipeline\", {\n    on_task_complete = function(task_name, success, output)\n        ai.record_execution({\n            task_name = task_name,\n            command = output.command,\n            success = success,\n            execution_time = output.duration\n        })\n    end\n})\n</code></pre>"},{"location":"en/modules/ai/#2-use-confidence-thresholds","title":"2. Use Confidence Thresholds","text":"<pre><code>-- Only apply high-confidence optimizations\nlocal optimization = ai.optimize_command(command)\nif optimization.confidence_score &gt; 0.8 then\n    command = optimization.optimized_command\n    log.info(\"Applied AI optimization with \" .. (optimization.confidence_score * 100) .. \"% confidence\")\nend\n</code></pre>"},{"location":"en/modules/ai/#3-monitor-predictions","title":"3. Monitor Predictions","text":"<pre><code>-- Always check predictions for critical tasks\nlocal prediction = ai.predict_failure(task_name, command)\nif prediction.failure_probability &gt; 0.3 then\n    log.warn(\"High failure risk detected: \" .. (prediction.failure_probability * 100) .. \"%\")\n    for _, rec in ipairs(prediction.recommendations) do\n        log.info(\"Recommendation: \" .. rec)\n    end\nend\n</code></pre>"},{"location":"en/modules/ai/#4-regular-analysis","title":"4. Regular Analysis","text":"<pre><code>-- Periodic performance analysis\nlocal analysis = ai.analyze_performance(\"critical_task\")\nif analysis.performance_trend == \"degrading\" then\n    log.warn(\"Performance degradation detected for critical_task\")\n    -- Take action\nend\n</code></pre>"},{"location":"en/modules/ai/#advanced-features","title":"\ud83d\udd2c Advanced Features","text":""},{"location":"en/modules/ai/#learning-modes","title":"Learning Modes","text":"<ul> <li>Adaptive: Balanced learning and optimization (recommended)</li> <li>Aggressive: Maximum optimization attempts, higher risk</li> <li>Conservative: Minimal changes, maximum safety</li> </ul>"},{"location":"en/modules/ai/#optimization-strategies","title":"Optimization Strategies","text":"<p>The AI system includes multiple built-in optimization strategies: - Parallelization: Detect parallel execution opportunities - Memory Optimization: Adjust memory settings for optimal performance - Compiler Optimization: Suggest better compiler flags and options - Caching: Implement intelligent caching strategies - Network Optimization: Optimize network operations and timeouts - I/O Optimization: Improve file and disk operations</p>"},{"location":"en/modules/ai/#custom-metrics","title":"Custom Metrics","text":"<p>You can provide custom metrics to improve AI analysis:</p> <pre><code>ai.record_execution({\n    task_name = \"custom_task\",\n    success = true,\n    execution_time = \"1.5s\",\n    custom_metrics = {\n        memory_peak = \"512MB\",\n        cache_hit_rate = 0.85,\n        network_requests = 15,\n        database_queries = 8\n    }\n})\n</code></pre>"},{"location":"en/modules/ai/#integration-examples","title":"\ud83d\ude80 Integration Examples","text":""},{"location":"en/modules/ai/#with-modern-dsl","title":"With Modern DSL","text":"<pre><code>local build_task = task(\"ai_optimized_build\")\n    :description(\"Build with AI optimization\")\n    :command(function(params, deps)\n        local cmd = \"go build -o app ./cmd/main.go\"\n        local optimization = ai.optimize_command(cmd, {\n            history = ai.get_task_history(cmd)\n        })\n\n        if optimization.confidence_score &gt; 0.7 then\n            return exec.run(optimization.optimized_command)\n        else\n            return exec.run(cmd)\n        end\n    end)\n    :on_success(function(params, output)\n        ai.record_execution({\n            task_name = \"ai_optimized_build\",\n            command = output.command,\n            success = true,\n            execution_time = output.duration\n        })\n    end)\n    :build()\n</code></pre>"},{"location":"en/modules/ai/#with-gitops","title":"With GitOps","text":"<pre><code>local gitops_task = task(\"intelligent_deploy\")\n    :command(function(params, deps)\n        local deploy_cmd = \"kubectl apply -f manifests/\"\n\n        -- AI failure prediction\n        local prediction = ai.predict_failure(\"intelligent_deploy\", deploy_cmd)\n        if prediction.failure_probability &gt; 0.25 then\n            log.warn(\"High deployment risk detected\")\n            return {success = false, message = \"Deployment blocked by AI risk assessment\"}\n        end\n\n        -- GitOps deployment\n        return gitops.sync_workflow(params.workflow_id)\n    end)\n    :build()\n</code></pre>"},{"location":"en/modules/ai/#see-also","title":"\ud83d\udcda See Also","text":"<ul> <li>AI Features Overview</li> <li>Performance Optimization Guide</li> <li>Failure Prediction Guide</li> <li>AI Best Practices</li> </ul>"},{"location":"en/modules/aws/","title":"AWS Module","text":"<p>The <code>aws</code> module provides a comprehensive interface for interacting with Amazon Web Services using the AWS CLI. It is designed to work seamlessly with standard AWS credential chains and also has first-class support for <code>aws-vault</code> for enhanced security.</p>"},{"location":"en/modules/aws/#configuration","title":"Configuration","text":"<p>No specific configuration in <code>values.yaml</code> is required. The module relies on your environment being configured to interact with AWS. This can be achieved through: - IAM roles for EC2 instances or ECS/EKS tasks. - Standard environment variables (<code>AWS_ACCESS_KEY_ID</code>, <code>AWS_SECRET_ACCESS_KEY</code>, etc.). - A configured <code>~/.aws/credentials</code> file. - Using <code>aws-vault</code> with a named profile.</p>"},{"location":"en/modules/aws/#generic-executor","title":"Generic Executor","text":""},{"location":"en/modules/aws/#awsexecargs-opts","title":"<code>aws.exec(args, opts)</code>","text":"<p>This is the core function of the module. It executes any AWS CLI command and returns the result.</p> <p>Parameters:</p> <ul> <li><code>args</code> (table): Required. A table of strings representing the command and arguments to pass to the AWS CLI (e.g., <code>{\"s3\", \"ls\", \"--recursive\"}</code>).</li> <li><code>opts</code> (table): Optional. A table of options for the execution.<ul> <li><code>profile</code> (string): If provided, the command will be executed using <code>aws-vault exec &lt;profile&gt; -- aws ...</code>. If omitted, it will run <code>aws ...</code> directly.</li> </ul> </li> </ul> <p>Returns:</p> <p>A table containing the following fields: - <code>stdout</code> (string): The standard output from the command. - <code>stderr</code> (string): The standard error from the command. - <code>exit_code</code> (number): The exit code of the command. <code>0</code> typically indicates success.</p> <p>Example:</p> <pre><code>-- Using default credentials\nlocal result = aws.exec({\"sts\", \"get-caller-identity\"})\nif result.exit_code == 0 then\n  print(result.stdout)\nend\n\n-- Using an aws-vault profile\nlocal result_with_profile = aws.exec({\"ec2\", \"describe-instances\"}, {profile = \"my-prod-profile\"})\n</code></pre>"},{"location":"en/modules/aws/#s3-helpers","title":"S3 Helpers","text":""},{"location":"en/modules/aws/#awss3syncparams","title":"<code>aws.s3.sync(params)</code>","text":"<p>A high-level wrapper for the <code>aws s3 sync</code> command, useful for synchronizing directories with S3.</p> <p>Parameters:</p> <ul> <li><code>params</code> (table): A table containing the following fields:<ul> <li><code>source</code> (string): Required. The source directory or S3 path.</li> <li><code>destination</code> (string): Required. The destination directory or S3 path.</li> <li><code>profile</code> (string): Optional. The <code>aws-vault</code> profile to use.</li> <li><code>delete</code> (boolean): Optional. If <code>true</code>, adds the <code>--delete</code> flag to the sync command.</li> </ul> </li> </ul> <p>Returns:</p> <ul> <li><code>true</code> on success.</li> <li><code>false, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>local ok, err = aws.s3.sync({\n  source = \"./build\",\n  destination = \"s3://my-app-bucket/static\",\n  profile = \"deployment-profile\",\n  delete = true\n})\nif not ok then\n  log.error(\"S3 sync failed: \" .. err)\nend\n</code></pre>"},{"location":"en/modules/aws/#secrets-manager-helpers","title":"Secrets Manager Helpers","text":""},{"location":"en/modules/aws/#awssecretsmanagerget_secretparams","title":"<code>aws.secretsmanager.get_secret(params)</code>","text":"<p>Retrieves a secret's value from AWS Secrets Manager. This function simplifies the process by directly returning the <code>SecretString</code>.</p> <p>Parameters:</p> <ul> <li><code>params</code> (table): A table containing the following fields:<ul> <li><code>secret_id</code> (string): Required. The name or ARN of the secret to retrieve.</li> <li><code>profile</code> (string): Optional. The <code>aws-vault</code> profile to use.</li> </ul> </li> </ul> <p>Returns:</p> <ul> <li><code>secret_string</code> (string) on success.</li> <li><code>nil, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>local db_password, err = aws.secretsmanager.get_secret({\n  secret_id = \"production/database/password\",\n  profile = \"my-app-profile\"\n})\n\nif not db_password then\n  log.error(\"Failed to get secret: \" .. err)\n  return false, \"Config failed.\"\nend\n\n-- Now you can use the db_password variable\n</code></pre>"},{"location":"en/modules/azure/","title":"Azure Module","text":"<p>The <code>azure</code> module provides an interface for interacting with Microsoft Azure using the <code>az</code> command-line tool.</p>"},{"location":"en/modules/azure/#configuration","title":"Configuration","text":"<p>This module requires the <code>az</code> CLI to be installed and authenticated. Before running pipelines that use this module, you must log in to your Azure account:</p> <pre><code>az login\n</code></pre> <p>The module will use your logged-in credentials for all commands.</p>"},{"location":"en/modules/azure/#generic-executor","title":"Generic Executor","text":""},{"location":"en/modules/azure/#azureexecargs","title":"<code>azure.exec(args)</code>","text":"<p>Executes any <code>az</code> command. This function automatically adds the <code>--output json</code> flag (if not already present) to ensure that the output is machine-parsable.</p> <p>Parameters:</p> <ul> <li><code>args</code> (table): Required. A table of strings representing the command and arguments to pass to <code>az</code> (e.g., <code>{\"group\", \"list\", \"--location\", \"eastus\"}</code>).</li> </ul> <p>Returns:</p> <p>A table containing the following fields: - <code>stdout</code> (string): The standard output from the command (as a JSON string). - <code>stderr</code> (string): The standard error from the command. - <code>exit_code</code> (number): The exit code of the command. <code>0</code> typically indicates success.</p> <p>Example:</p> <pre><code>local result = azure.exec({\"account\", \"show\"})\nif result.exit_code == 0 then\n  local account_info, err = data.parse_json(result.stdout)\n  if account_info then\n    log.info(\"Logged in as: \" .. account_info.user.name)\n  end\nend\n</code></pre>"},{"location":"en/modules/azure/#resource-group-rg-helpers","title":"Resource Group (RG) Helpers","text":""},{"location":"en/modules/azure/#azurergdeleteparams","title":"<code>azure.rg.delete(params)</code>","text":"<p>Deletes a resource group.</p> <p>Parameters:</p> <ul> <li><code>params</code> (table): A table containing the following fields:<ul> <li><code>name</code> (string): Required. The name of the resource group to delete.</li> <li><code>yes</code> (boolean): Optional. If <code>true</code>, adds the <code>--yes</code> flag to bypass the confirmation prompt.</li> </ul> </li> </ul> <p>Returns:</p> <ul> <li><code>true</code> on success.</li> <li><code>false, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>local ok, err = azure.rg.delete({\n  name = \"my-test-rg\",\n  yes = true\n})\nif not ok then\n  log.error(\"Failed to delete resource group: \" .. err)\nend\n</code></pre>"},{"location":"en/modules/azure/#virtual-machine-vm-helpers","title":"Virtual Machine (VM) Helpers","text":""},{"location":"en/modules/azure/#azurevmlistparams","title":"<code>azure.vm.list(params)</code>","text":"<p>Lists virtual machines.</p> <p>Parameters:</p> <ul> <li><code>params</code> (table): Optional. A table containing the following fields:<ul> <li><code>resource_group</code> (string): The name of a resource group to scope the list to. If omitted, lists VMs in the entire subscription.</li> </ul> </li> </ul> <p>Returns:</p> <ul> <li><code>vms</code> (table) on success, where the table is a parsed JSON array of your VM objects.</li> <li><code>nil, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>-- List all VMs in the subscription\nlocal all_vms, err1 = azure.vm.list()\n\n-- List VMs in a specific resource group\nlocal specific_vms, err2 = azure.vm.list({resource_group = \"my-production-rg\"})\nif specific_vms then\n  for _, vm in ipairs(specific_vms) do\n    print(\"Found VM: \" .. vm.name)\n  end\nend\n</code></pre>"},{"location":"en/modules/data/","title":"Data Module","text":"<p>The <code>data</code> module provides functions for parsing and serializing data between Lua tables and common data formats like JSON and YAML.</p> <p>---\\n</p>"},{"location":"en/modules/data/#dataparse_jsonjson_string","title":"<code>data.parse_json(json_string)</code>","text":"<p>Parses a JSON string into a Lua table.</p> <ul> <li>Parameters:<ul> <li><code>json_string</code> (string): The JSON formatted string to parse.</li> </ul> </li> <li>Returns:<ul> <li><code>table</code>: The resulting Lua table.</li> <li><code>error</code>: An error object if parsing fails.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"en/modules/data/#datato_jsonlua_table","title":"<code>data.to_json(lua_table)</code>","text":"<p>Serializes a Lua table into a JSON string.</p> <ul> <li>Parameters:<ul> <li><code>lua_table</code> (table): The Lua table to serialize.</li> </ul> </li> <li>Returns:<ul> <li><code>string</code>: The resulting JSON string.</li> <li><code>error</code>: An error object if serialization fails.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"en/modules/data/#dataparse_yamlyaml_string","title":"<code>data.parse_yaml(yaml_string)</code>","text":"<p>Parses a YAML string into a Lua table.</p> <ul> <li>Parameters:<ul> <li><code>yaml_string</code> (string): The YAML formatted string to parse.</li> </ul> </li> <li>Returns:<ul> <li><code>table</code>: The resulting Lua table.</li> <li><code>error</code>: An error object if parsing fails.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"en/modules/data/#datato_yamllua_table","title":"<code>data.to_yaml(lua_table)</code>","text":"<p>Serializes a Lua table into a YAML string.</p> <ul> <li>Parameters:<ul> <li><code>lua_table</code> (table): The Lua table to serialize.</li> </ul> </li> <li>Returns:<ul> <li><code>string</code>: The resulting YAML string.</li> <li><code>error</code>: An error object if serialization fails.</li> </ul> </li> </ul>"},{"location":"en/modules/data/#example","title":"Example","text":"<pre><code>command = function()\n  local data = require(\"data\")\n\n  -- JSON Example\n  log.info(\"Testing JSON serialization...\")\n  local my_table = { name = \"sloth-runner\", version = 1.0, features = { \"tasks\", \"lua\" } }\n  local json_str, err = data.to_json(my_table)\n  if err then\n    return false, \"Failed to serialize to JSON: \" .. err\n  end\n  print(\"Serialized JSON: \" .. json_str)\n\n  log.info(\"Testing JSON parsing...\")\n  local parsed_table, err = data.parse_json(json_str)\n  if err then\n    return false, \"Failed to parse JSON: \" .. err\n  end\n  log.info(\"Parsed name from JSON: \" .. parsed_table.name)\n\n  -- YAML Example\n  log.info(\"Testing YAML serialization...\")\n  local yaml_str, err = data.to_yaml(my_table)\n  if err then\n    return false, \"Failed to serialize to YAML: \" .. err\n  end\n  print(\"Serialized YAML:\\n\" .. yaml_str)\n\n  log.info(\"Testing YAML parsing...\")\n  parsed_table, err = data.parse_yaml(yaml_str)\n  if err then\n    return false, \"Failed to parse YAML: \" .. err\n  end\n  log.info(\"Parsed version from YAML: \" .. parsed_table.version)\n\n  return true, \"Data module operations successful.\"\nend\n</code></pre>"},{"location":"en/modules/digitalocean/","title":"DigitalOcean Module","text":"<p>The <code>digitalocean</code> module provides an interface for interacting with your DigitalOcean resources using the <code>doctl</code> command-line tool.</p>"},{"location":"en/modules/digitalocean/#configuration","title":"Configuration","text":"<p>This module requires the <code>doctl</code> CLI to be installed and authenticated. The standard way to do this is to generate a personal access token in your DigitalOcean control panel and set it as the <code>DIGITALOCEAN_ACCESS_TOKEN</code> environment variable.</p> <pre><code>export DIGITALOCEAN_ACCESS_TOKEN=\"your_do_api_token_here\"\n</code></pre> <p>The module will automatically use this token for all commands.</p>"},{"location":"en/modules/digitalocean/#generic-executor","title":"Generic Executor","text":""},{"location":"en/modules/digitalocean/#digitaloceanexecargs","title":"<code>digitalocean.exec(args)</code>","text":"<p>Executes any <code>doctl</code> command. This function automatically adds the <code>--output json</code> flag to ensure that the output is machine-parsable.</p> <p>Parameters:</p> <ul> <li><code>args</code> (table): Required. A table of strings representing the command and arguments to pass to <code>doctl</code> (e.g., <code>{\"compute\", \"droplet\", \"list\"}</code>).</li> </ul> <p>Returns:</p> <p>A table containing the following fields: - <code>stdout</code> (string): The standard output from the command (as a JSON string). - <code>stderr</code> (string): The standard error from the command. - <code>exit_code</code> (number): The exit code of the command. <code>0</code> typically indicates success.</p> <p>Example:</p> <pre><code>local result = digitalocean.exec({\"account\", \"get\"})\nif result.exit_code == 0 then\n  local account_info, err = data.parse_json(result.stdout)\n  if account_info then\n    log.info(\"Account status: \" .. account_info.status)\n  end\nend\n</code></pre>"},{"location":"en/modules/digitalocean/#droplets-helpers","title":"Droplets Helpers","text":""},{"location":"en/modules/digitalocean/#digitaloceandropletslist","title":"<code>digitalocean.droplets.list()</code>","text":"<p>A high-level wrapper to list all Droplets in your account.</p> <p>Returns:</p> <ul> <li><code>droplets</code> (table) on success, where the table is a parsed JSON array of your Droplet objects.</li> <li><code>nil, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>local droplets, err = digitalocean.droplets.list()\nif droplets then\n  for _, droplet in ipairs(droplets) do\n    print(\"Found Droplet: \" .. droplet.name)\n  end\nend\n</code></pre>"},{"location":"en/modules/digitalocean/#digitaloceandropletsdeleteparams","title":"<code>digitalocean.droplets.delete(params)</code>","text":"<p>Deletes a specific Droplet by its ID.</p> <p>Parameters:</p> <ul> <li><code>params</code> (table): A table containing the following fields:<ul> <li><code>id</code> (string): Required. The ID of the Droplet to delete.</li> <li><code>force</code> (boolean): Optional. If <code>true</code>, adds the <code>--force</code> flag to bypass the confirmation prompt. Defaults to <code>false</code>.</li> </ul> </li> </ul> <p>Returns:</p> <ul> <li><code>true</code> on success.</li> <li><code>false, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>local ok, err = digitalocean.droplets.delete({\n  id = \"123456789\",\n  force = true\n})\nif not ok then\n  log.error(\"Failed to delete droplet: \" .. err)\nend\n</code></pre>"},{"location":"en/modules/docker/","title":"Docker Module","text":"<p>The <code>docker</code> module provides a convenient interface for interacting with the Docker daemon, allowing you to build, run, and push Docker images as part of your pipelines.</p>"},{"location":"en/modules/docker/#configuration","title":"Configuration","text":"<p>This module requires the <code>docker</code> CLI to be installed and the Docker daemon to be running and accessible.</p>"},{"location":"en/modules/docker/#functions","title":"Functions","text":""},{"location":"en/modules/docker/#dockerexecargs","title":"<code>docker.exec(args)</code>","text":"<p>Executes any raw <code>docker</code> command.</p> <ul> <li><code>args</code> (table): Required. A list of arguments to pass to the <code>docker</code> command (e.g., <code>{\"ps\", \"-a\"}</code>).</li> <li>Returns: A result table with <code>success</code>, <code>stdout</code>, <code>stderr</code>, and <code>exit_code</code>.</li> </ul>"},{"location":"en/modules/docker/#dockerbuildparams","title":"<code>docker.build(params)</code>","text":"<p>Builds a Docker image using <code>docker build</code>.</p> <ul> <li><code>params</code> (table):<ul> <li><code>tag</code> (string): Required. The tag for the image (e.g., <code>my-app:latest</code>).</li> <li><code>path</code> (string): Required. The build context path.</li> <li><code>dockerfile</code> (string): Optional. The path to the Dockerfile.</li> <li><code>build_args</code> (table): Optional. A table of build arguments (e.g., <code>{VERSION = \"1.0\"}</code>).</li> </ul> </li> <li>Returns: A result table.</li> </ul>"},{"location":"en/modules/docker/#dockerpushparams","title":"<code>docker.push(params)</code>","text":"<p>Pushes a Docker image to a registry using <code>docker push</code>.</p> <ul> <li><code>params</code> (table):<ul> <li><code>tag</code> (string): Required. The tag of the image to push.</li> </ul> </li> <li>Returns: A result table.</li> </ul>"},{"location":"en/modules/docker/#dockerrunparams","title":"<code>docker.run(params)</code>","text":"<p>Runs a Docker container using <code>docker run</code>.</p> <ul> <li><code>params</code> (table):<ul> <li><code>image</code> (string): Required. The image to run.</li> <li><code>name</code> (string): Optional. The name for the container.</li> <li><code>detach</code> (boolean): Optional. If <code>true</code>, runs the container in the background (<code>-d</code>).</li> <li><code>ports</code> (table): Optional. A list of port mappings (e.g., <code>{\"8080:80\"}</code>).</li> <li><code>env</code> (table): Optional. A table of environment variables (e.g., <code>{MY_VAR = \"value\"}</code>).</li> </ul> </li> <li>Returns: A result table.</li> </ul>"},{"location":"en/modules/docker/#example","title":"Example","text":"<pre><code>local image_tag = \"my-test-image:latest\"\n\n-- Task 1: Build\nlocal result_build = docker.build({\n  tag = image_tag,\n  path = \"./app\"\n})\nif not result_build.success then return false, \"Build failed\" end\n\n-- Task 2: Run\nlocal result_run = docker.run({\n  image = image_tag,\n  name = \"my-test-container\",\n  ports = {\"8080:80\"}\n})\nif not result_run.success then return false, \"Run failed\" end\n\n-- Task 3: Push (after successful testing)\nlocal result_push = docker.push({tag = image_tag})\nif not result_push.success then return false, \"Push failed\" end\n</code></pre>"},{"location":"en/modules/exec/","title":"Exec Module","text":"<p>The <code>exec</code> module is one of the most fundamental modules in <code>sloth-runner</code>. It provides a powerful function to execute arbitrary shell commands, giving you full control over the execution environment.</p>"},{"location":"en/modules/exec/#execruncommand-options","title":"<code>exec.run(command, [options])</code>","text":"<p>Executes a shell command using <code>bash -c</code>.</p>"},{"location":"en/modules/exec/#parameters","title":"Parameters","text":"<ul> <li><code>command</code> (string): The shell command to execute.</li> <li><code>options</code> (table, optional): A table of options to control the execution.<ul> <li><code>workdir</code> (string): The working directory where the command should be executed. If not provided, it runs in the task group's temporary directory (if available) or the current directory.</li> <li><code>env</code> (table): A dictionary of environment variables (key-value pairs) to set for the command's execution. These are added to the existing environment.</li> </ul> </li> </ul>"},{"location":"en/modules/exec/#returns","title":"Returns","text":"<p>A table containing the result of the command execution:</p> <ul> <li><code>success</code> (boolean): <code>true</code> if the command exited with a code of <code>0</code>, otherwise <code>false</code>.</li> <li><code>stdout</code> (string): The standard output from the command.</li> <li><code>stderr</code> (string): The standard error output from the command.</li> </ul>"},{"location":"en/modules/exec/#example","title":"Example","text":"<p>This example demonstrates how to use <code>exec.run</code> with a custom working directory and environment variables.</p> <pre><code>-- examples/exec_module_example.sloth\n\nModern DSLs = {\n  main = {\n    description = \"A task to demonstrate the exec module.\",\n    tasks = {\n      {\n        name = \"run-with-options\",\n        description = \"Executes a command with a custom workdir and environment.\",\n        command = function()\n          log.info(\"Preparing to run a custom command...\")\n\n          local exec = require(\"exec\")\n\n          -- Create a temporary directory for the example\n          local temp_dir = \"/tmp/sloth-exec-test\"\n          fs.mkdir(temp_dir)\n          fs.write(temp_dir .. \"/test.txt\", \"hello from test file\")\n\n          -- Define options\n          local options = {\n            workdir = temp_dir,\n            env = {\n              MY_VAR = \"SlothRunner\",\n              ANOTHER_VAR = \"is_awesome\"\n            }\n          }\n\n          -- Execute the command\n          local result = exec.run(\"echo 'MY_VAR is $MY_VAR' &amp;&amp; ls -l &amp;&amp; cat test.txt\", options)\n\n          -- Clean up the temporary directory\n          fs.rm_r(temp_dir)\n\n          if result.success then\n            log.info(\"Command executed successfully!\")\n            print(\"--- STDOUT ---\")\n            print(result.stdout)\n            print(\"--------------\")\n            return true, \"Exec command successful.\"\n          else\n            log.error(\"Exec command failed.\")\n            log.error(\"Stderr: \" .. result.stderr)\n            return false, \"Exec command failed.\"\n          end\n        end\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"en/modules/fs/","title":"FS Module","text":"<p>The <code>fs</code> module provides essential functions for interacting with the file system directly from your Lua scripts.</p>"},{"location":"en/modules/fs/#fsreadpath","title":"<code>fs.read(path)</code>","text":"<p>Reads the entire content of a file.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The path to the file.</li> </ul> </li> <li>Returns:<ul> <li><code>string</code>: The content of the file.</li> <li><code>error</code>: An error object if the read fails.</li> </ul> </li> </ul>"},{"location":"en/modules/fs/#fswritepath-content","title":"<code>fs.write(path, content)</code>","text":"<p>Writes content to a file, overwriting it if it already exists.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The path to the file.</li> <li><code>content</code> (string): The content to write.</li> </ul> </li> <li>Returns:<ul> <li><code>error</code>: An error object if the write fails.</li> </ul> </li> </ul>"},{"location":"en/modules/fs/#fsappendpath-content","title":"<code>fs.append(path, content)</code>","text":"<p>Appends content to the end of a file. Creates the file if it doesn't exist.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The path to the file.</li> <li><code>content</code> (string): The content to append.</li> </ul> </li> <li>Returns:<ul> <li><code>error</code>: An error object if the append fails.</li> </ul> </li> </ul>"},{"location":"en/modules/fs/#fsexistspath","title":"<code>fs.exists(path)</code>","text":"<p>Checks if a file or directory exists at the given path.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The path to check.</li> </ul> </li> <li>Returns:<ul> <li><code>boolean</code>: <code>true</code> if the path exists, <code>false</code> otherwise.</li> </ul> </li> </ul>"},{"location":"en/modules/fs/#fsmkdirpath","title":"<code>fs.mkdir(path)</code>","text":"<p>Creates a directory at the given path, including any necessary parent directories (like <code>mkdir -p</code>).</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The directory path to create.</li> </ul> </li> <li>Returns:<ul> <li><code>error</code>: An error object if the creation fails.</li> </ul> </li> </ul>"},{"location":"en/modules/fs/#fsrmpath","title":"<code>fs.rm(path)</code>","text":"<p>Removes a single file.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The path to the file to remove.</li> </ul> </li> <li>Returns:<ul> <li><code>error</code>: An error object if the removal fails.</li> </ul> </li> </ul>"},{"location":"en/modules/fs/#fsrm_rpath","title":"<code>fs.rm_r(path)</code>","text":"<p>Removes a file or directory recursively (like <code>rm -rf</code>).</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The path to remove.</li> </ul> </li> <li>Returns:<ul> <li><code>error</code>: An error object if the removal fails.</li> </ul> </li> </ul>"},{"location":"en/modules/fs/#fslspath","title":"<code>fs.ls(path)</code>","text":"<p>Lists the contents of a directory.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The path to the directory.</li> </ul> </li> <li>Returns:<ul> <li><code>table</code>: A table containing the names of files and subdirectories.</li> <li><code>error</code>: An error object if the listing fails.</li> </ul> </li> </ul>"},{"location":"en/modules/fs/#fstmpname","title":"<code>fs.tmpname()</code>","text":"<p>Generates a unique temporary directory path. Note: This function only returns the name; it does not create the directory.</p> <ul> <li>Returns:<ul> <li><code>string</code>: A unique path suitable for a temporary directory.</li> <li><code>error</code>: An error object if a name could not be generated.</li> </ul> </li> </ul>"},{"location":"en/modules/fs/#example","title":"Example","text":"<pre><code>command = function()\n  local fs = require(\"fs\")\n\n  local tmp_dir = \"/tmp/fs-example\"\n  log.info(\"Creating directory: \" .. tmp_dir)\n  fs.mkdir(tmp_dir)\n\n  local file_path = tmp_dir .. \"/my_file.txt\"\n  log.info(\"Writing to file: \" .. file_path)\n  fs.write(file_path, \"Hello, Sloth Runner!\\n\")\n\n  log.info(\"Appending to file...\")\n  fs.append(file_path, \"This is a new line.\")\n\n  if fs.exists(file_path) then\n    log.info(\"File content: \" .. fs.read(file_path))\n  end\n\n  log.info(\"Listing contents of \" .. tmp_dir)\n  local contents = fs.ls(tmp_dir)\n  for i, name in ipairs(contents) do\n    print(\"- \" .. name)\n  end\n\n  log.info(\"Cleaning up...\")\n  fs.rm_r(tmp_dir)\n\n  return true, \"FS module operations successful.\"\nend\n</code></pre>"},{"location":"en/modules/gcp/","title":"GCP Module","text":"<p>The <code>gcp</code> module provides a simple interface for executing Google Cloud CLI (<code>gcloud</code>) commands from within a <code>sloth-runner</code> task.</p>"},{"location":"en/modules/gcp/#gcpexecargs","title":"<code>gcp.exec(args)</code>","text":"<p>Executes a <code>gcloud</code> command with the specified arguments.</p>"},{"location":"en/modules/gcp/#parameters","title":"Parameters","text":"<ul> <li><code>args</code> (table): A Lua table (array) of strings representing the arguments to pass to the <code>gcloud</code> command. For example, <code>{\"compute\", \"instances\", \"list\"}</code>.</li> </ul>"},{"location":"en/modules/gcp/#returns","title":"Returns","text":"<p>A table containing the result of the command execution with the following keys:</p> <ul> <li><code>stdout</code> (string): The standard output from the command.</li> <li><code>stderr</code> (string): The standard error output from the command.</li> <li><code>exit_code</code> (number): The exit code of the command. An exit code of <code>0</code> typically indicates success.</li> </ul>"},{"location":"en/modules/gcp/#example","title":"Example","text":"<p>This example defines a task that lists all Compute Engine instances in the <code>us-central1</code> region for a specific project.</p> <pre><code>-- examples/gcp_cli_example.sloth\n\nModern DSLs = {\n  main = {\n    description = \"A task to list GCP compute instances.\",\n    tasks = {\n      {\n        name = \"list-instances\",\n        description = \"Lists GCE instances in us-central1.\",\n        command = function()\n          log.info(\"Listing GCP instances...\")\n\n          -- require the gcp module to make it available\n          local gcp = require(\"gcp\")\n\n          -- Execute the gcloud command\n          local result = gcp.exec({\n            \"compute\", \n            \"instances\", \n            \"list\", \n            \"--project\", \"my-gcp-project-id\",\n            \"--zones\", \"us-central1-a,us-central1-b\"\n          })\n\n          -- Check the result\n          if result and result.exit_code == 0 then\n            log.info(\"Successfully listed instances.\")\n            print(\"--- INSTANCE LIST ---\")\n            print(result.stdout)\n            print(\"---------------------\")\n            return true, \"GCP command successful.\"\n          else\n            log.error(\"Failed to list GCP instances.\")\n            if result then\n              log.error(\"Stderr: \" .. result.stderr)\n            end\n            return false, \"GCP command failed.\"\n          end\n        end\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"en/modules/git/","title":"Git Module","text":"<p>The <code>git</code> module provides a fluent API to interact with Git repositories, allowing you to automate common version control operations like cloning, committing, and pushing.</p>"},{"location":"en/modules/git/#gitcloneurl-path","title":"<code>git.clone(url, path)</code>","text":"<p>Clones a Git repository to a local path.</p> <ul> <li>Parameters:<ul> <li><code>url</code> (string): The URL of the repository to clone.</li> <li><code>path</code> (string): The local directory to clone into.</li> </ul> </li> <li>Returns:<ul> <li><code>repo</code> (object): A <code>GitRepo</code> object on success.</li> <li><code>error</code>: An error object if the clone fails.</li> </ul> </li> </ul>"},{"location":"en/modules/git/#gitrepopath","title":"<code>git.repo(path)</code>","text":"<p>Opens an existing local Git repository.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The path to the existing local repository.</li> </ul> </li> <li>Returns:<ul> <li><code>repo</code> (object): A <code>GitRepo</code> object on success.</li> <li><code>error</code>: An error object if the path is not a valid Git repository.</li> </ul> </li> </ul>"},{"location":"en/modules/git/#the-gitrepo-object","title":"The <code>GitRepo</code> Object","text":"<p>This object represents a local repository and provides chainable methods for performing Git operations.</p>"},{"location":"en/modules/git/#repocheckoutref","title":"<code>repo:checkout(ref)</code>","text":"<p>Checks out a specific branch, tag, or commit.</p> <ul> <li>Parameters: <code>ref</code> (string).</li> </ul>"},{"location":"en/modules/git/#repopullremote-branch","title":"<code>repo:pull(remote, branch)</code>","text":"<p>Pulls changes from a remote.</p> <ul> <li>Parameters: <code>remote</code> (string), <code>branch</code> (string).</li> </ul>"},{"location":"en/modules/git/#repoaddpattern","title":"<code>repo:add(pattern)</code>","text":"<p>Stages files for a commit.</p> <ul> <li>Parameters: <code>pattern</code> (string), e.g., <code>\".\"</code> or <code>\"path/to/file.txt\"</code>.</li> </ul>"},{"location":"en/modules/git/#repocommitmessage","title":"<code>repo:commit(message)</code>","text":"<p>Creates a commit.</p> <ul> <li>Parameters: <code>message</code> (string).</li> </ul>"},{"location":"en/modules/git/#repotagname-message","title":"<code>repo:tag(name, [message])</code>","text":"<p>Creates a new tag.</p> <ul> <li>Parameters: <code>name</code> (string), <code>message</code> (string, optional).</li> </ul>"},{"location":"en/modules/git/#repopushremote-branch-options","title":"<code>repo:push(remote, branch, [options])</code>","text":"<p>Pushes commits to a remote.</p> <ul> <li>Parameters:<ul> <li><code>remote</code> (string).</li> <li><code>branch</code> (string).</li> <li><code>options</code> (table, optional): e.g., <code>{ follow_tags = true }</code>.</li> </ul> </li> </ul>"},{"location":"en/modules/git/#reporesult","title":"<code>repo:result()</code>","text":"<p>This method is called at the end of a chain to get the result of the last operation.</p> <ul> <li>Returns:<ul> <li><code>result</code> (table): A table containing <code>success</code> (boolean), <code>stdout</code> (string), and <code>stderr</code> (string).</li> </ul> </li> </ul>"},{"location":"en/modules/git/#example","title":"Example","text":"<p>This example demonstrates a full CI/CD-like workflow: clone, create a version file, add, commit, tag, and push.</p> <pre><code>command = function()\n  local git = require(\"git\")\n  local repo_path = \"/tmp/git-example-repo\"\n\n  -- Clean up previous runs\n  fs.rm_r(repo_path)\n\n  -- 1. Clone the repository\n  log.info(\"Cloning repository...\")\n  local repo, err = git.clone(\"https://github.com/chalkan3-sloth/sloth-runner.git\", repo_path)\n  if err then\n    return false, \"Failed to clone: \" .. err\n  end\n\n  -- 2. Create and write a version file\n  fs.write(repo_path .. \"/VERSION\", \"1.2.3\")\n\n  -- 3. Chain Git commands: add -&gt; commit -&gt; tag -&gt; push\n  log.info(\"Adding, committing, tagging, and pushing...\")\n  repo:add(\".\"):commit(\"ci: Bump version to 1.2.3\"):tag(\"v1.2.3\"):push(\"origin\", \"main\", { follow_tags = true })\n\n  -- 4. Get the result of the final operation (push)\n  local result = repo:result()\n\n  if not result.success then\n    log.error(\"Git push failed: \" .. result.stderr)\n    return false, \"Git push failed.\"\n  end\n\n  log.info(\"Successfully pushed new version tag.\")\n  return true, \"Git operations successful.\"\nend\n</code></pre>"},{"location":"en/modules/gitops/","title":"\ud83d\udd04 GitOps Module - Complete API Reference","text":"<p>The GitOps module provides native Git-driven deployment workflows with intelligent diff preview, automatic rollback, and multi-environment support.</p>"},{"location":"en/modules/gitops/#module-overview","title":"\ud83d\udccb Module Overview","text":"<pre><code>local gitops = require(\"gitops\")\n</code></pre> <p>The GitOps module enables:</p> <ul> <li>\ud83c\udf0a Declarative Workflows - Git-driven deployment automation</li> <li>\ud83d\udd0d Intelligent Diff Preview - Visual change analysis before deployment</li> <li>\ud83d\udee1\ufe0f Smart Rollback - Automatic rollback on failure with state backup</li> <li>\ud83c\udfe2 Multi-Environment - Separate workflows for dev/staging/production</li> <li>\u2638\ufe0f Kubernetes Native - First-class Kubernetes integration</li> </ul>"},{"location":"en/modules/gitops/#quick-setup","title":"\ud83d\ude80 Quick Setup","text":""},{"location":"en/modules/gitops/#gitopsworkflowconfig","title":"<code>gitops.workflow(config)</code>","text":"<p>Create a simple GitOps workflow with minimal configuration.</p> <pre><code>local workflow = gitops.workflow({\n    repo = \"https://github.com/company/infrastructure\",\n    branch = \"main\",\n    auto_sync = true,\n    diff_preview = true,\n    rollback_on_failure = true\n})\n\n-- Returns: {workflow_id: \"workflow-123\", repository_id: \"repo-123\", status: \"created\"}\n</code></pre> <p>Parameters: - <code>repo</code> (string): Git repository URL - <code>branch</code> (string): Git branch to track (default: \"main\") - <code>auto_sync</code> (boolean): Enable automatic synchronization - <code>diff_preview</code> (boolean): Enable diff preview before sync - <code>rollback_on_failure</code> (boolean): Enable automatic rollback on failure</p> <p>Returns: <pre><code>{\n    workflow_id = \"workflow-1234567890\",\n    repository_id = \"repo-1234567890\", \n    status = \"created\",\n    auto_sync = true,\n    diff_preview = true,\n    rollback_on_failure = true\n}\n</code></pre></p>"},{"location":"en/modules/gitops/#repository-management","title":"\ud83c\udfd7\ufe0f Repository Management","text":""},{"location":"en/modules/gitops/#gitopsregister_repositoryconfig","title":"<code>gitops.register_repository(config)</code>","text":"<p>Register a Git repository for GitOps workflows.</p> <pre><code>local repo_id = gitops.register_repository({\n    id = \"production-repo\",           -- Optional custom ID\n    url = \"https://github.com/company/k8s-manifests\",\n    branch = \"main\",\n    credentials = {                   -- Optional authentication\n        type = \"token\",\n        token = \"ghp_xxxxxxxxxxxx\"\n    },\n    poll_interval = \"30s\"            -- How often to check for changes\n})\n</code></pre> <p>Parameters: - <code>id</code> (string): Custom repository ID (auto-generated if not provided) - <code>url</code> (string): Git repository URL - <code>branch</code> (string): Git branch to track - <code>credentials</code> (table): Authentication credentials   - <code>type</code> (string): \"token\", \"ssh\", or \"userpass\"   - <code>token</code> (string): Personal access token (for type=\"token\")   - <code>username</code> (string): Username (for type=\"userpass\")   - <code>password</code> (string): Password (for type=\"userpass\")   - <code>ssh_key</code> (string): SSH private key (for type=\"ssh\") - <code>poll_interval</code> (string): Polling interval for auto-sync</p>"},{"location":"en/modules/gitops/#workflow-management","title":"\ud83d\udd27 Workflow Management","text":""},{"location":"en/modules/gitops/#gitopscreate_workflowconfig","title":"<code>gitops.create_workflow(config)</code>","text":"<p>Create a detailed GitOps workflow with advanced configuration.</p> <pre><code>local workflow_id = gitops.create_workflow({\n    id = \"production-workflow\",       -- Optional custom ID\n    name = \"Production Infrastructure\",\n    repository = \"production-repo\",   -- Repository ID\n    target_path = \"k8s/production\",   -- Path within repository\n    auto_sync = false,                -- Manual sync for production\n    diff_preview = true,\n    rollback_on_failure = true,\n    sync_policy = {                   -- Advanced sync configuration\n        auto_prune = true,            -- Remove orphaned resources\n        retry = {\n            limit = 3,\n            backoff = \"exponential\"\n        },\n        health_check = {\n            enabled = true,\n            timeout = \"10m\"\n        }\n    }\n})\n</code></pre> <p>Parameters: - <code>id</code> (string): Custom workflow ID - <code>name</code> (string): Human-readable workflow name - <code>repository</code> (string): Repository ID to use - <code>target_path</code> (string): Path within repository to sync - <code>auto_sync</code> (boolean): Enable automatic synchronization - <code>diff_preview</code> (boolean): Enable diff preview - <code>rollback_on_failure</code> (boolean): Enable automatic rollback - <code>sync_policy</code> (table): Advanced synchronization policies</p>"},{"location":"en/modules/gitops/#gitopsget_workflow_statusworkflow_id","title":"<code>gitops.get_workflow_status(workflow_id)</code>","text":"<p>Get the current status of a GitOps workflow.</p> <pre><code>local status = gitops.get_workflow_status(\"workflow-123\")\n</code></pre> <p>Returns: <pre><code>{\n    id = \"workflow-123\",\n    name = \"Production Infrastructure\",\n    status = \"synced\",                -- active | syncing | synced | failed | degraded\n    auto_sync = false,\n    repository = \"production-repo\",\n    last_sync_result = {              -- Last synchronization result\n        id = \"sync-1234567890\",\n        status = \"succeeded\",         -- running | succeeded | failed\n        start_time = \"2024-01-15T10:30:00Z\",\n        commit_hash = \"abc123def456\",\n        message = \"Sync completed successfully\",\n        metrics = {\n            duration = \"45.2s\",\n            resources_processed = 15,\n            resources_applied = 8,\n            resources_skipped = 7,\n            conflicts_resolved = 0\n        }\n    }\n}\n</code></pre></p>"},{"location":"en/modules/gitops/#gitopslist_workflows","title":"<code>gitops.list_workflows()</code>","text":"<p>List all registered GitOps workflows.</p> <pre><code>local workflows = gitops.list_workflows()\n-- Returns array of workflow objects\n</code></pre>"},{"location":"en/modules/gitops/#synchronization","title":"\ud83d\udd04 Synchronization","text":""},{"location":"en/modules/gitops/#gitopssync_workflowworkflow_id","title":"<code>gitops.sync_workflow(workflow_id)</code>","text":"<p>Manually trigger synchronization for a workflow.</p> <pre><code>local success = gitops.sync_workflow(\"workflow-123\")\n-- Returns: true on success, false on failure\n</code></pre>"},{"location":"en/modules/gitops/#gitopsstart_auto_sync","title":"<code>gitops.start_auto_sync()</code>","text":"<p>Start the auto-sync controller for all workflows with <code>auto_sync = true</code>.</p> <pre><code>gitops.start_auto_sync()\n-- Starts background polling for all auto-sync enabled workflows\n</code></pre>"},{"location":"en/modules/gitops/#gitopsstop_auto_sync","title":"<code>gitops.stop_auto_sync()</code>","text":"<p>Stop the auto-sync controller.</p> <pre><code>gitops.stop_auto_sync()\n-- Stops all background synchronization\n</code></pre>"},{"location":"en/modules/gitops/#diff-preview","title":"\ud83d\udd0d Diff &amp; Preview","text":""},{"location":"en/modules/gitops/#gitopsgenerate_diffworkflow_id","title":"<code>gitops.generate_diff(workflow_id)</code>","text":"<p>Generate a comprehensive diff preview for pending changes.</p> <pre><code>local diff = gitops.generate_diff(\"workflow-123\")\n</code></pre> <p>Returns: <pre><code>{\n    workflow_id = \"workflow-123\",\n    generated_at = \"2024-01-15T10:30:00Z\",\n    summary = {                       -- High-level summary\n        total_changes = 5,\n        created_resources = 2,\n        updated_resources = 2,\n        deleted_resources = 1,\n        conflict_count = 0,\n        warning_count = 1\n    },\n    changes = {                       -- Detailed changes\n        {\n            type = \"create\",          -- create | update | delete\n            resource = \"Deployment/web-app\",\n            desired_state = {...},    -- New resource definition\n            diff = \"+ Creating Deployment/web-app with 3 replicas\",\n            impact = \"medium\"         -- low | medium | high | critical\n        },\n        {\n            type = \"update\", \n            resource = \"Service/web-svc\",\n            current_state = {...},    -- Current resource state\n            desired_state = {...},    -- Desired resource state\n            diff = \"~ Updating Service/web-svc:\\n  port: 80 -&gt; 8080\",\n            impact = \"low\"\n        }\n    },\n    conflicts = {                     -- Detected conflicts\n        {\n            resource = \"ConfigMap/app-config\",\n            type = \"validation\",      -- resource_exists | out_of_sync | validation\n            description = \"Resource modified outside of GitOps\",\n            current_state = {...},\n            desired_state = {...},\n            suggestions = [\n                \"Review manual changes before proceeding\",\n                \"Consider updating the Git repository\"\n            ]\n        }\n    },\n    warnings = [                      -- Warnings and recommendations\n        \"High-impact change detected: Deployment/critical-app\"\n    ]\n}\n</code></pre></p>"},{"location":"en/modules/gitops/#gitopspreview_changesworkflow_id","title":"<code>gitops.preview_changes(workflow_id)</code>","text":"<p>Alias for <code>gitops.generate_diff()</code> for better readability.</p> <pre><code>local preview = gitops.preview_changes(\"workflow-123\")\n-- Same as gitops.generate_diff()\n</code></pre>"},{"location":"en/modules/gitops/#rollback","title":"\ud83d\udee1\ufe0f Rollback","text":""},{"location":"en/modules/gitops/#gitopsrollback_workflowworkflow_id-reason","title":"<code>gitops.rollback_workflow(workflow_id, reason)</code>","text":"<p>Rollback a workflow to its previous state.</p> <pre><code>local success = gitops.rollback_workflow(\"workflow-123\", \"Health check failed\")\n-- Returns: true on success, false on failure\n</code></pre> <p>Parameters: - <code>workflow_id</code> (string): Workflow to rollback - <code>reason</code> (string): Reason for rollback (for audit logging)</p>"},{"location":"en/modules/gitops/#complete-examples","title":"\ud83c\udfaf Complete Examples","text":""},{"location":"en/modules/gitops/#multi-environment-setup","title":"Multi-Environment Setup","text":"<pre><code>local gitops = require(\"gitops\")\nlocal log = require(\"log\")\n\n-- Define environments\nlocal environments = {\n    {\n        name = \"development\",\n        repo = \"https://github.com/company/k8s-dev\",\n        branch = \"develop\",\n        auto_sync = true,\n        sync_interval = \"5m\"\n    },\n    {\n        name = \"staging\",\n        repo = \"https://github.com/company/k8s-staging\",\n        branch = \"staging\", \n        auto_sync = true,\n        sync_interval = \"10m\"\n    },\n    {\n        name = \"production\",\n        repo = \"https://github.com/company/k8s-prod\",\n        branch = \"main\",\n        auto_sync = false,      -- Manual deployments in production\n        approval_required = true\n    }\n}\n\n-- Create workflows for all environments\nlocal workflows = {}\nfor _, env in ipairs(environments) do\n    -- Register repository\n    local repo_id = gitops.register_repository({\n        id = env.name .. \"-repo\",\n        url = env.repo,\n        branch = env.branch\n    })\n\n    -- Create workflow\n    local workflow_id = gitops.create_workflow({\n        id = env.name .. \"-workflow\",\n        name = env.name .. \" Environment\", \n        repository = repo_id,\n        target_path = \"manifests\",\n        auto_sync = env.auto_sync,\n        diff_preview = true,\n        rollback_on_failure = true\n    })\n\n    workflows[env.name] = workflow_id\n    log.info(\"Created GitOps workflow for \" .. env.name .. \": \" .. workflow_id)\nend\n\n-- Start auto-sync controller\ngitops.start_auto_sync()\n</code></pre>"},{"location":"en/modules/gitops/#production-deployment-with-validation","title":"Production Deployment with Validation","text":"<pre><code>local production_deploy = task(\"production_deploy\")\n    :description(\"Production deployment with full GitOps validation\")\n    :command(function(params, deps)\n        local workflow_id = workflows.production\n\n        -- Step 1: Generate diff and validate\n        log.info(\"\ud83d\udd0d Analyzing changes for production deployment...\")\n        local diff = gitops.generate_diff(workflow_id)\n\n        if not diff then\n            log.info(\"\u2139\ufe0f No changes detected\")\n            return {success = true, message = \"No changes to deploy\"}\n        end\n\n        -- Step 2: Display change summary\n        log.info(\"\ud83d\udcca Production Deployment Summary:\")\n        log.info(\"  \ud83d\udcdd Total changes: \" .. diff.summary.total_changes)\n        log.info(\"  \u2728 Created: \" .. diff.summary.created_resources)\n        log.info(\"  \ud83d\udd04 Updated: \" .. diff.summary.updated_resources)\n        log.info(\"  \ud83d\uddd1\ufe0f Deleted: \" .. diff.summary.deleted_resources)\n\n        -- Step 3: Check for conflicts and high-impact changes\n        if diff.summary.conflict_count &gt; 0 then\n            log.error(\"\ud83d\udca5 Conflicts detected - manual resolution required\")\n            return {success = false, message = \"Conflicts must be resolved\"}\n        end\n\n        local high_impact_changes = 0\n        for _, change in ipairs(diff.changes) do\n            if change.impact == \"high\" or change.impact == \"critical\" then\n                high_impact_changes = high_impact_changes + 1\n                log.warn(\"\u26a0\ufe0f High-impact: \" .. change.resource .. \" (\" .. change.type .. \")\")\n            end\n        end\n\n        -- Step 4: Show warnings\n        if #diff.warnings &gt; 0 then\n            log.warn(\"\u26a0\ufe0f Warnings:\")\n            for _, warning in ipairs(diff.warnings) do\n                log.warn(\"  \u2022 \" .. warning)\n            end\n        end\n\n        -- Step 5: Require approval for production\n        if high_impact_changes &gt; 0 then\n            print(\"\ud83d\udd12 High-impact changes detected. Proceed? (y/N)\")\n            local response = io.read()\n            if response:lower() ~= \"y\" then\n                return {success = false, message = \"Deployment cancelled\"}\n            end\n        end\n\n        -- Step 6: Execute deployment\n        log.info(\"\ud83d\ude80 Executing production deployment...\")\n        local sync_success = gitops.sync_workflow(workflow_id)\n\n        if not sync_success then\n            log.error(\"\ud83d\udca5 Production deployment failed!\")\n            return {success = false, message = \"Deployment failed\"}\n        end\n\n        -- Step 7: Verify deployment\n        log.info(\"\ud83d\udd0d Verifying deployment...\")\n        local status = gitops.get_workflow_status(workflow_id)\n\n        if status.status == \"synced\" and status.last_sync_result.status == \"succeeded\" then\n            log.info(\"\u2705 Production deployment successful!\")\n            log.info(\"\ud83d\udcca Applied \" .. status.last_sync_result.metrics.resources_applied .. \" resources\")\n            log.info(\"\u23f1\ufe0f Completed in \" .. status.last_sync_result.metrics.duration)\n            return {success = true, message = \"Production deployed successfully\"}\n        else\n            log.error(\"\ud83d\udca5 Deployment verification failed!\")\n\n            -- Automatic rollback\n            log.warn(\"\ud83d\udd04 Initiating automatic rollback...\")\n            local rollback_success = gitops.rollback_workflow(workflow_id, \"Deployment verification failed\")\n\n            if rollback_success then\n                log.info(\"\u2705 Automatic rollback completed\")\n                return {success = false, message = \"Deployment failed, rollback successful\"}\n            else\n                log.error(\"\ud83d\udca5 Rollback also failed!\")\n                return {success = false, message = \"Deployment and rollback both failed\"}\n            end\n        end\n    end)\n    :build()\n</code></pre>"},{"location":"en/modules/gitops/#kubernetes-specific-gitops","title":"Kubernetes-Specific GitOps","text":"<pre><code>local k8s_deploy = task(\"kubernetes_gitops_deploy\")\n    :description(\"Kubernetes-native GitOps deployment\")\n    :command(function(params, deps)\n        local workflow_id = params.workflow_id\n\n        -- Generate diff with Kubernetes-specific analysis\n        local diff = gitops.generate_diff(workflow_id)\n\n        -- Kubernetes-specific validations\n        local k8s_issues = {}\n        for _, change in ipairs(diff.changes) do\n            -- Check for dangerous Kubernetes operations\n            if change.type == \"delete\" then\n                if change.resource:match(\"Namespace\") then\n                    table.insert(k8s_issues, \"\ud83d\udea8 CRITICAL: Deleting namespace \" .. change.resource)\n                elseif change.resource:match(\"PersistentVolume\") then\n                    table.insert(k8s_issues, \"\u26a0\ufe0f WARNING: Deleting PersistentVolume \" .. change.resource)\n                end\n            end\n\n            if change.type == \"update\" and change.resource:match(\"Deployment\") then\n                log.info(\"\ud83d\udce6 Deployment update: \" .. change.resource)\n                -- Could add image change detection here\n            end\n        end\n\n        if #k8s_issues &gt; 0 then\n            log.warn(\"\ud83d\udea8 Kubernetes-specific issues detected:\")\n            for _, issue in ipairs(k8s_issues) do\n                log.warn(\"  \" .. issue)\n            end\n\n            print(\"Proceed despite Kubernetes warnings? (y/N)\")\n            local response = io.read()\n            if response:lower() ~= \"y\" then\n                return {success = false, message = \"Deployment cancelled due to K8s issues\"}\n            end\n        end\n\n        -- Execute Kubernetes deployment\n        local sync_success = gitops.sync_workflow(workflow_id)\n\n        if sync_success then\n            -- Kubernetes-specific post-deployment checks\n            log.info(\"\ud83d\udd0d Running Kubernetes health checks...\")\n\n            -- Could add kubectl-based health checks here\n            -- kubectl get pods --all-namespaces\n            -- kubectl get services\n            -- kubectl get ingress\n\n            return {success = true, message = \"Kubernetes deployment successful\"}\n        else\n            return {success = false, message = \"Kubernetes deployment failed\"}\n        end\n    end)\n    :build()\n</code></pre>"},{"location":"en/modules/gitops/#best-practices","title":"\ud83c\udfaf Best Practices","text":""},{"location":"en/modules/gitops/#1-environment-separation","title":"1. Environment Separation","text":"<pre><code>-- Use different repositories for different environments\nlocal env_repos = {\n    dev = \"company/k8s-dev\",\n    staging = \"company/k8s-staging\", \n    prod = \"company/k8s-prod\"\n}\n</code></pre>"},{"location":"en/modules/gitops/#2-always-preview-in-production","title":"2. Always Preview in Production","text":"<pre><code>-- Never deploy to production without reviewing changes\nif environment == \"production\" then\n    local diff = gitops.generate_diff(workflow_id)\n    if diff.summary.conflict_count &gt; 0 or has_high_impact_changes(diff) then\n        -- Require manual approval\n    end\nend\n</code></pre>"},{"location":"en/modules/gitops/#3-descriptive-rollback-reasons","title":"3. Descriptive Rollback Reasons","text":"<pre><code>-- Provide clear audit trail\ngitops.rollback_workflow(workflow_id, \"Health check failed after 5 minutes - CPU usage &gt; 90%\")\n</code></pre>"},{"location":"en/modules/gitops/#4-monitor-sync-results","title":"4. Monitor Sync Results","text":"<pre><code>-- Always verify deployment success\nlocal status = gitops.get_workflow_status(workflow_id)\nif status.last_sync_result.status ~= \"succeeded\" then\n    -- Handle failure appropriately\nend\n</code></pre>"},{"location":"en/modules/gitops/#5-use-auto-sync-judiciously","title":"5. Use Auto-Sync Judiciously","text":"<pre><code>-- Auto-sync for dev/staging, manual for production\nlocal auto_sync = environment ~= \"production\"\n</code></pre>"},{"location":"en/modules/gitops/#advanced-features","title":"\ud83d\udd27 Advanced Features","text":""},{"location":"en/modules/gitops/#custom-sync-policies","title":"Custom Sync Policies","text":"<pre><code>local workflow_id = gitops.create_workflow({\n    name = \"Advanced Sync Policy\",\n    repository = repo_id,\n    sync_policy = {\n        auto_prune = true,            -- Remove resources not in Git\n        retry = {\n            limit = 5,\n            backoff = \"exponential\",  -- exponential | linear | fixed\n            max_duration = \"10m\"\n        },\n        health_check = {\n            enabled = true,\n            timeout = \"10m\",\n            failure_mode = \"rollback\"  -- ignore | fail | rollback\n        },\n        pre_sync_hooks = [            -- Commands to run before sync\n            \"kubectl cluster-info\",\n            \"helm repo update\"\n        ],\n        post_sync_hooks = [           -- Commands to run after sync\n            \"kubectl rollout status deployment/app\",\n            \"curl -f http://app/health\"\n        ]\n    }\n})\n</code></pre>"},{"location":"en/modules/gitops/#multi-repository-coordination","title":"Multi-Repository Coordination","text":"<pre><code>-- Coordinate deployments across multiple repositories\nlocal repos = {\n    frontend = gitops.workflow({repo = \"company/frontend-config\"}),\n    backend = gitops.workflow({repo = \"company/backend-config\"}),\n    database = gitops.workflow({repo = \"company/database-config\"})\n}\n\n-- Deploy in dependency order\ngitops.sync_workflow(repos.database.workflow_id)\ngitops.sync_workflow(repos.backend.workflow_id) \ngitops.sync_workflow(repos.frontend.workflow_id)\n</code></pre>"},{"location":"en/modules/gitops/#integration-examples","title":"\ud83d\ude80 Integration Examples","text":""},{"location":"en/modules/gitops/#with-ai-module","title":"With AI Module","text":"<pre><code>local ai = require(\"ai\")\nlocal gitops = require(\"gitops\")\n\nlocal intelligent_deploy = task(\"ai_gitops_deploy\")\n    :command(function(params, deps)\n        local deploy_cmd = \"kubectl apply -f manifests/\"\n\n        -- AI failure prediction before GitOps deployment\n        local prediction = ai.predict_failure(\"ai_gitops_deploy\", deploy_cmd)\n\n        if prediction.failure_probability &gt; 0.25 then\n            log.warn(\"\ud83e\udd16 AI detected high deployment risk: \" .. \n                    string.format(\"%.1f%%\", prediction.failure_probability * 100))\n\n            for _, rec in ipairs(prediction.recommendations) do\n                log.info(\"\ud83d\udca1 AI Recommendation: \" .. rec)\n            end\n        end\n\n        -- GitOps deployment with AI insights\n        local workflow_id = params.gitops_workflow_id\n        local success = gitops.sync_workflow(workflow_id)\n\n        -- Record execution for AI learning\n        ai.record_execution({\n            task_name = \"ai_gitops_deploy\",\n            command = deploy_cmd,\n            success = success,\n            execution_time = \"30s\",\n            ai_prediction_used = true,\n            predicted_failure_probability = prediction.failure_probability\n        })\n\n        return {success = success}\n    end)\n    :build()\n</code></pre>"},{"location":"en/modules/gitops/#with-modern-dsl-workflows","title":"With Modern DSL Workflows","text":"<pre><code>workflow.define(\"gitops_pipeline\", {\n    description = \"Complete GitOps deployment pipeline\",\n    version = \"2.0.0\",\n\n    metadata = {\n        author = \"DevOps Team\",\n        tags = {\"gitops\", \"kubernetes\", \"production\"}\n    },\n\n    tasks = {\n        production_deploy,\n        k8s_deploy\n    },\n\n    on_task_start = function(task_name)\n        log.info(\"\ud83d\ude80 Starting GitOps task: \" .. task_name)\n    end,\n\n    on_task_complete = function(task_name, success, output)\n        if success then\n            log.info(\"\u2705 GitOps task completed: \" .. task_name)\n        else\n            log.error(\"\u274c GitOps task failed: \" .. task_name)\n\n            -- Could trigger emergency rollback here\n            if task_name == \"production_deploy\" then\n                log.warn(\"\ud83d\udd04 Triggering emergency rollback...\")\n                gitops.rollback_workflow(production_workflow_id, \"Emergency rollback due to task failure\")\n            end\n        end\n    end,\n\n    on_complete = function(success, results)\n        if success then\n            log.info(\"\ud83c\udf89 GitOps pipeline completed successfully!\")\n        else\n            log.error(\"\ud83d\udca5 GitOps pipeline failed - check logs for details\")\n        end\n    end\n})\n</code></pre>"},{"location":"en/modules/gitops/#see-also","title":"\ud83d\udcda See Also","text":"<ul> <li>GitOps Features Overview</li> <li>GitOps Quick Setup</li> <li>Multi-Environment GitOps</li> <li>Kubernetes Integration</li> <li>Rollback Strategies</li> </ul>"},{"location":"en/modules/log/","title":"Log Module","text":"<p>The <code>log</code> module provides a simple and essential interface for logging messages from within your Lua scripts to the <code>sloth-runner</code> console. Using this module is the standard way to provide feedback and debug information during a task's execution.</p>"},{"location":"en/modules/log/#loginfomessage","title":"<code>log.info(message)</code>","text":"<p>Logs a message at the INFO level. This is the standard level for general, informative messages.</p> <ul> <li>Parameters:<ul> <li><code>message</code> (string): The message to log.</li> </ul> </li> </ul>"},{"location":"en/modules/log/#logwarnmessage","title":"<code>log.warn(message)</code>","text":"<p>Logs a message at the WARN level. This is suitable for non-critical issues that should be brought to the user's attention.</p> <ul> <li>Parameters:<ul> <li><code>message</code> (string): The message to log.</li> </ul> </li> </ul>"},{"location":"en/modules/log/#logerrormessage","title":"<code>log.error(message)</code>","text":"<p>Logs a message at the ERROR level. This should be used for significant errors that might cause a task to fail.</p> <ul> <li>Parameters:<ul> <li><code>message</code> (string): The message to log.</li> </ul> </li> </ul>"},{"location":"en/modules/log/#logdebugmessage","title":"<code>log.debug(message)</code>","text":"<p>Logs a message at the DEBUG level. These messages are typically hidden unless the runner is in a verbose or debug mode. They are useful for detailed diagnostic information.</p> <ul> <li>Parameters:<ul> <li><code>message</code> (string): The message to log.</li> </ul> </li> </ul>"},{"location":"en/modules/log/#example","title":"Example","text":"<pre><code>command = function()\n  -- The log module is globally available and does not need to be required.\n\n  log.info(\"Starting the logging example task.\")\n\n  local user_name = \"Sloth\"\n  log.debug(\"Current user is: \" .. user_name)\n\n  if user_name ~= \"Sloth\" then\n    log.warn(\"The user is not the expected one.\")\n  end\n\n  log.info(\"Task is performing its main action...\")\n\n  local success = true -- Simulate a successful operation\n  if not success then\n    log.error(\"The main action failed unexpectedly!\")\n    return false, \"Main action failed\"\n  end\n\n  log.info(\"Logging example task finished successfully.\")\n  return true, \"Logging demonstrated.\"\nend\n</code></pre>"},{"location":"en/modules/metrics/","title":"\ud83d\udcca Metrics &amp; Monitoring Module","text":"<p>The Metrics &amp; Monitoring module provides comprehensive system monitoring, custom metrics collection, and health checking capabilities. It enables real-time observability of both system resources and application performance.</p>"},{"location":"en/modules/metrics/#key-features","title":"\ud83d\ude80 Key Features","text":"<ul> <li>System Metrics: Automatic collection of CPU, memory, disk, and network metrics</li> <li>Runtime Metrics: Go runtime information (goroutines, heap, GC)</li> <li>Custom Metrics: Gauges, counters, histograms, and timers</li> <li>Health Checks: Automatic system health monitoring</li> <li>HTTP Endpoints: Prometheus-compatible metrics export</li> <li>Alerting: Threshold-based alerts</li> <li>JSON API: Complete metrics data for integrations</li> </ul>"},{"location":"en/modules/metrics/#system-metrics","title":"\ud83d\udcca System Metrics","text":""},{"location":"en/modules/metrics/#cpu-memory-and-disk-monitoring","title":"CPU, Memory, and Disk Monitoring","text":"<pre><code>-- Get current CPU usage\nlocal cpu_usage = metrics.system_cpu()\nlog.info(\"CPU Usage: \" .. string.format(\"%.1f%%\", cpu_usage))\n\n-- Get memory information\nlocal memory_info = metrics.system_memory()\nlog.info(\"Memory: \" .. string.format(\"%.1f%% (%.0f/%.0f MB)\", \n    memory_info.percent, memory_info.used_mb, memory_info.total_mb))\n\n-- Get disk usage\nlocal disk_info = metrics.system_disk(\"/\")\nlog.info(\"Disk: \" .. string.format(\"%.1f%% (%.1f/%.1f GB)\", \n    disk_info.percent, disk_info.used_gb, disk_info.total_gb))\n\n-- Check specific disk path\nlocal var_disk = metrics.system_disk(\"/var\")\nlog.info(\"Var disk usage: \" .. string.format(\"%.1f%%\", var_disk.percent))\n</code></pre>"},{"location":"en/modules/metrics/#runtime-information","title":"Runtime Information","text":"<pre><code>-- Get Go runtime metrics\nlocal runtime = metrics.runtime_info()\nlog.info(\"Runtime Information:\")\nlog.info(\"  Goroutines: \" .. runtime.goroutines)\nlog.info(\"  CPU cores: \" .. runtime.num_cpu)\nlog.info(\"  Heap allocated: \" .. string.format(\"%.1f MB\", runtime.heap_alloc_mb))\nlog.info(\"  Heap system: \" .. string.format(\"%.1f MB\", runtime.heap_sys_mb))\nlog.info(\"  GC cycles: \" .. runtime.num_gc)\nlog.info(\"  Go version: \" .. runtime.go_version)\n</code></pre>"},{"location":"en/modules/metrics/#custom-metrics","title":"\ud83d\udcc8 Custom Metrics","text":""},{"location":"en/modules/metrics/#gauge-metrics-current-values","title":"Gauge Metrics (Current Values)","text":"<pre><code>-- Set simple gauge values\nmetrics.gauge(\"cpu_temperature\", 65.4)\nmetrics.gauge(\"active_connections\", 142)\nmetrics.gauge(\"queue_size\", 23)\n\n-- Set gauge with tags\nmetrics.gauge(\"memory_usage\", memory_percent, {\n    server = \"web-01\",\n    environment = \"production\",\n    region = \"us-east-1\"\n})\n\n-- Update deployment status\nmetrics.gauge(\"deployment_progress\", 75.5, {\n    app = \"frontend\",\n    version = \"v2.1.0\"\n})\n</code></pre>"},{"location":"en/modules/metrics/#counter-metrics-incremental-values","title":"Counter Metrics (Incremental Values)","text":"<pre><code>-- Increment counters\nlocal total_requests = metrics.counter(\"http_requests_total\", 1)\nlocal error_count = metrics.counter(\"http_errors_total\", 1, {\n    status_code = \"500\",\n    endpoint = \"/api/users\"\n})\n\n-- Bulk increment\nlocal processed = metrics.counter(\"messages_processed\", 50, {\n    queue = \"user_notifications\",\n    priority = \"high\"\n})\n\nlog.info(\"Total requests processed: \" .. total_requests)\n</code></pre>"},{"location":"en/modules/metrics/#histogram-metrics-value-distributions","title":"Histogram Metrics (Value Distributions)","text":"<pre><code>-- Record response times\nmetrics.histogram(\"response_time_ms\", 245.6, {\n    endpoint = \"/api/users\",\n    method = \"GET\"\n})\n\n-- Record payload sizes\nmetrics.histogram(\"payload_size_bytes\", 1024, {\n    content_type = \"application/json\"\n})\n\n-- Record batch sizes\nmetrics.histogram(\"batch_size\", 150, {\n    operation = \"bulk_insert\",\n    table = \"user_events\"\n})\n</code></pre>"},{"location":"en/modules/metrics/#timer-metrics-function-execution-time","title":"Timer Metrics (Function Execution Time)","text":"<pre><code>-- Time function execution automatically\nlocal duration = metrics.timer(\"database_query\", function()\n    -- Simulate database query\n    local result = exec.run(\"sleep 0.1\")\n    return result\nend, {\n    query_type = \"select\",\n    table = \"users\"\n})\n\nlog.info(\"Database query took: \" .. string.format(\"%.2f ms\", duration))\n\n-- Time complex operations\nlocal processing_time = metrics.timer(\"data_processing\", function()\n    -- Process large dataset\n    local data = {}\n    for i = 1, 100000 do\n        data[i] = math.sqrt(i) * 2.5\n    end\n    return #data\nend, {\n    operation = \"mathematical_computation\",\n    size = \"large\"\n})\n\nlog.info(\"Data processing completed in: \" .. string.format(\"%.2f ms\", processing_time))\n</code></pre>"},{"location":"en/modules/metrics/#health-monitoring","title":"\ud83c\udfe5 Health Monitoring","text":""},{"location":"en/modules/metrics/#automatic-health-status","title":"Automatic Health Status","text":"<pre><code>-- Get comprehensive health status\nlocal health = metrics.health_status()\nlog.info(\"Overall Health Status: \" .. health.overall)\n\n-- Check individual components\nlocal components = {\"cpu\", \"memory\", \"disk\"}\nfor _, component in ipairs(components) do\n    local comp_info = health[component]\n    if comp_info then\n        local status_icon = \"\u2705\"\n        if comp_info.status == \"warning\" then\n            status_icon = \"\u26a0\ufe0f\"\n        elseif comp_info.status == \"critical\" then\n            status_icon = \"\u274c\"\n        end\n\n        log.info(string.format(\"  %s %s: %.1f%% (%s)\", \n            status_icon, component:upper(), comp_info.usage, comp_info.status))\n    end\nend\n</code></pre>"},{"location":"en/modules/metrics/#custom-health-checks","title":"Custom Health Checks","text":"<pre><code>-- Create health check function\nfunction check_application_health()\n    local health_score = 100\n    local issues = {}\n\n    -- Check database connectivity\n    local db_result = exec.run(\"pg_isready -h localhost -p 5432\")\n    if db_result ~= \"\" then\n        health_score = health_score - 20\n        table.insert(issues, \"Database connection failed\")\n    end\n\n    -- Check disk space\n    local disk = metrics.system_disk(\"/\")\n    if disk.percent &gt; 90 then\n        health_score = health_score - 30\n        table.insert(issues, \"Disk space critical: \" .. string.format(\"%.1f%%\", disk.percent))\n    end\n\n    -- Check memory usage\n    local memory = metrics.system_memory()\n    if memory.percent &gt; 85 then\n        health_score = health_score - 25\n        table.insert(issues, \"Memory usage high: \" .. string.format(\"%.1f%%\", memory.percent))\n    end\n\n    -- Record health score\n    metrics.gauge(\"application_health_score\", health_score)\n\n    if health_score &lt; 70 then\n        metrics.alert(\"application_health\", {\n            level = \"warning\",\n            message = \"Application health degraded: \" .. table.concat(issues, \", \"),\n            score = health_score\n        })\n    end\n\n    return health_score &gt;= 70\nend\n\n-- Use in tasks\nModern DSLs = {\n    health_monitoring = {\n        tasks = {\n            health_check = {\n                command = function()\n                    local healthy = check_application_health()\n                    return healthy, healthy and \"System healthy\" or \"System health issues detected\"\n                end\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"en/modules/metrics/#alerting-system","title":"\ud83d\udea8 Alerting System","text":""},{"location":"en/modules/metrics/#creating-alerts","title":"Creating Alerts","text":"<pre><code>-- Simple threshold alert\nlocal cpu = metrics.system_cpu()\nif cpu &gt; 80 then\n    metrics.alert(\"high_cpu_usage\", {\n        level = \"warning\",\n        message = \"CPU usage is high: \" .. string.format(\"%.1f%%\", cpu),\n        threshold = 80,\n        value = cpu,\n        severity = \"medium\"\n    })\nend\n\n-- Complex alert with multiple conditions\nlocal memory = metrics.system_memory()\nlocal disk = metrics.system_disk()\n\nif memory.percent &gt; 90 and disk.percent &gt; 85 then\n    metrics.alert(\"resource_exhaustion\", {\n        level = \"critical\",\n        message = string.format(\"Critical resource usage - Memory: %.1f%%, Disk: %.1f%%\", \n            memory.percent, disk.percent),\n        memory_usage = memory.percent,\n        disk_usage = disk.percent,\n        recommended_action = \"Scale up resources immediately\"\n    })\nend\n\n-- Application-specific alerts\nlocal queue_size = state.get(\"task_queue_size\", 0)\nif queue_size &gt; 1000 then\n    metrics.alert(\"queue_backlog\", {\n        level = \"warning\", \n        message = \"Task queue backlog detected: \" .. queue_size .. \" items\",\n        queue_size = queue_size,\n        estimated_processing_time = queue_size * 2 .. \" seconds\"\n    })\nend\n</code></pre>"},{"location":"en/modules/metrics/#metrics-management","title":"\ud83d\udd0d Metrics Management","text":""},{"location":"en/modules/metrics/#retrieving-custom-metrics","title":"Retrieving Custom Metrics","text":"<pre><code>-- Get specific custom metric\nlocal cpu_metric = metrics.get_custom(\"cpu_temperature\")\nif cpu_metric then\n    log.info(\"CPU Temperature metric: \" .. data.to_json(cpu_metric))\nend\n\n-- List all custom metrics\nlocal all_metrics = metrics.list_custom()\nlog.info(\"Total custom metrics: \" .. #all_metrics)\nfor i, metric_name in ipairs(all_metrics) do\n    log.info(\"  \" .. i .. \". \" .. metric_name)\nend\n</code></pre>"},{"location":"en/modules/metrics/#performance-monitoring-example","title":"Performance Monitoring Example","text":"<pre><code>Modern DSLs = {\n    performance_monitoring = {\n        tasks = {\n            monitor_api_performance = {\n                command = function()\n                    -- Start monitoring session\n                    log.info(\"Starting API performance monitoring...\")\n\n                    -- Simulate API calls and measure performance\n                    for i = 1, 10 do\n                        local api_time = metrics.timer(\"api_call_\" .. i, function()\n                            -- Simulate API call\n                            exec.run(\"curl -s -o /dev/null -w '%{time_total}' https://api.example.com/health\")\n                        end, {\n                            endpoint = \"health\",\n                            call_number = tostring(i)\n                        })\n\n                        -- Record response time\n                        metrics.histogram(\"api_response_time\", api_time, {\n                            endpoint = \"health\"\n                        })\n\n                        -- Check if response time is acceptable\n                        if api_time &gt; 1000 then -- 1 second\n                            metrics.counter(\"slow_api_calls\", 1, {\n                                endpoint = \"health\"\n                            })\n\n                            metrics.alert(\"slow_api_response\", {\n                                level = \"warning\",\n                                message = string.format(\"Slow API response: %.2f ms\", api_time),\n                                response_time = api_time,\n                                threshold = 1000\n                            })\n                        end\n\n                        -- Brief delay between calls\n                        exec.run(\"sleep 0.1\")\n                    end\n\n                    -- Get summary statistics\n                    local system_health = metrics.health_status()\n                    log.info(\"System health after API tests: \" .. system_health.overall)\n\n                    return true, \"API performance monitoring completed\"\n                end\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"en/modules/metrics/#http-endpoints","title":"\ud83c\udf10 HTTP Endpoints","text":"<p>The metrics module automatically exposes HTTP endpoints for external monitoring systems:</p>"},{"location":"en/modules/metrics/#prometheus-format-metrics","title":"Prometheus Format (<code>/metrics</code>)","text":"<pre><code># Access Prometheus-compatible metrics\ncurl http://agent:8080/metrics\n\n# Example output:\n# sloth_agent_cpu_usage_percent 15.4\n# sloth_agent_memory_usage_mb 2048.5\n# sloth_agent_disk_usage_percent 67.2\n# sloth_agent_tasks_total 142\n</code></pre>"},{"location":"en/modules/metrics/#json-format-metricsjson","title":"JSON Format (<code>/metrics/json</code>)","text":"<pre><code># Get complete metrics in JSON format\ncurl http://agent:8080/metrics/json\n\n# Example response:\n{\n  \"agent_name\": \"myagent1\",\n  \"timestamp\": \"2024-01-15T10:30:00Z\",\n  \"system\": {\n    \"cpu_usage_percent\": 15.4,\n    \"memory_usage_mb\": 2048.5,\n    \"disk_usage_percent\": 67.2\n  },\n  \"runtime\": {\n    \"num_goroutines\": 25,\n    \"heap_alloc_mb\": 45.2\n  },\n  \"custom\": {\n    \"api_response_time\": {...},\n    \"deployment_progress\": 85.5\n  }\n}\n</code></pre>"},{"location":"en/modules/metrics/#health-check-health","title":"Health Check (<code>/health</code>)","text":"<pre><code># Check agent health status\ncurl http://agent:8080/health\n\n# Example response:\n{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2024-01-15T10:30:00Z\",\n  \"checks\": {\n    \"cpu\": {\"usage\": 15.4, \"status\": \"healthy\"},\n    \"memory\": {\"usage\": 45.8, \"status\": \"healthy\"},\n    \"disk\": {\"usage\": 67.2, \"status\": \"healthy\"}\n  }\n}\n</code></pre>"},{"location":"en/modules/metrics/#api-reference","title":"\ud83d\udccb API Reference","text":""},{"location":"en/modules/metrics/#system-metrics_1","title":"System Metrics","text":"Function Parameters Return Description <code>metrics.system_cpu()</code> - usage: number Get current CPU usage percentage <code>metrics.system_memory()</code> - info: table Get memory usage information <code>metrics.system_disk(path?)</code> path?: string info: table Get disk usage for path (default: \"/\") <code>metrics.runtime_info()</code> - info: table Get Go runtime information"},{"location":"en/modules/metrics/#custom-metrics_1","title":"Custom Metrics","text":"Function Parameters Return Description <code>metrics.gauge(name, value, tags?)</code> name: string, value: number, tags?: table success: boolean Set gauge metric <code>metrics.counter(name, increment?, tags?)</code> name: string, increment?: number, tags?: table new_value: number Increment counter <code>metrics.histogram(name, value, tags?)</code> name: string, value: number, tags?: table success: boolean Record histogram value <code>metrics.timer(name, function, tags?)</code> name: string, func: function, tags?: table duration: number Time function execution"},{"location":"en/modules/metrics/#health-and-monitoring","title":"Health and Monitoring","text":"Function Parameters Return Description <code>metrics.health_status()</code> - status: table Get comprehensive health status <code>metrics.alert(name, data)</code> name: string, data: table success: boolean Create alert"},{"location":"en/modules/metrics/#utilities","title":"Utilities","text":"Function Parameters Return Description <code>metrics.get_custom(name)</code> name: string metric: table | nil Get custom metric by name <code>metrics.list_custom()</code> - names: table List all custom metric names"},{"location":"en/modules/metrics/#best-practices","title":"\ud83c\udfaf Best Practices","text":"<ol> <li>Use appropriate metric types - gauges for current values, counters for totals, histograms for distributions</li> <li>Add meaningful tags to categorize and filter metrics</li> <li>Set reasonable alert thresholds to avoid alert fatigue</li> <li>Monitor performance impact of extensive metrics collection</li> <li>Use timers for performance-critical operations to identify bottlenecks</li> <li>Implement health checks for all critical system components</li> <li>Export metrics to external systems like Prometheus for long-term storage</li> </ol> <p>The Metrics &amp; Monitoring module provides comprehensive observability for your distributed sloth-runner environment! \ud83d\udcca\ud83d\ude80</p>"},{"location":"en/modules/net/","title":"Net Module","text":"<p>The <code>net</code> module provides functions for making HTTP requests and downloading files, allowing your tasks to interact with web services and remote resources.</p>"},{"location":"en/modules/net/#nethttp_geturl","title":"<code>net.http_get(url)</code>","text":"<p>Performs an HTTP GET request to the specified URL.</p> <ul> <li>Parameters:<ul> <li><code>url</code> (string): The URL to send the GET request to.</li> </ul> </li> <li>Returns:<ul> <li><code>body</code> (string): The response body as a string.</li> <li><code>status_code</code> (number): The HTTP status code of the response.</li> <li><code>headers</code> (table): A table containing the response headers.</li> <li><code>error</code> (string): An error message if the request failed.</li> </ul> </li> </ul>"},{"location":"en/modules/net/#nethttp_posturl-body-headers","title":"<code>net.http_post(url, body, [headers])</code>","text":"<p>Performs an HTTP POST request to the specified URL.</p> <ul> <li>Parameters:<ul> <li><code>url</code> (string): The URL to send the POST request to.</li> <li><code>body</code> (string): The request body to send.</li> <li><code>headers</code> (table, optional): A table of request headers to set.</li> </ul> </li> <li>Returns:<ul> <li><code>body</code> (string): The response body as a string.</li> <li><code>status_code</code> (number): The HTTP status code of the response.</li> <li><code>headers</code> (table): A table containing the response headers.</li> <li><code>error</code> (string): An error message if the request failed.</li> </ul> </li> </ul>"},{"location":"en/modules/net/#netdownloadurl-destination_path","title":"<code>net.download(url, destination_path)</code>","text":"<p>Downloads a file from a URL and saves it to a local path.</p> <ul> <li>Parameters:<ul> <li><code>url</code> (string): The URL of the file to download.</li> <li><code>destination_path</code> (string): The local file path to save the downloaded content.</li> </ul> </li> <li>Returns:<ul> <li><code>error</code>: An error object if the download fails.</li> </ul> </li> </ul>"},{"location":"en/modules/net/#example","title":"Example","text":"<pre><code>command = function()\n  local net = require(\"net\")\n\n  -- Example GET request\n  log.info(\"Performing GET request to httpbin.org...\")\n  local body, status, headers, err = net.http_get(\"https://httpbin.org/get\")\n  if err then\n    log.error(\"GET request failed: \" .. err)\n    return false, \"GET request failed\"\n  end\n  log.info(\"GET request successful! Status: \" .. status)\n  -- print(\"Response Body: \" .. body)\n\n  -- Example POST request\n  log.info(\"Performing POST request to httpbin.org...\")\n  local post_body = '{\"name\": \"sloth-runner\", \"awesome\": true}'\n  local post_headers = { [\"Content-Type\"] = \"application/json\" }\n  body, status, headers, err = net.http_post(\"https://httpbin.org/post\", post_body, post_headers)\n  if err then\n    log.error(\"POST request failed: \" .. err)\n    return false, \"POST request failed\"\n  end\n  log.info(\"POST request successful! Status: \" .. status)\n  -- print(\"Response Body: \" .. body)\n\n  -- Example Download\n  local download_path = \"/tmp/sloth-runner-logo.svg\"\n  log.info(\"Downloading file to \" .. download_path)\n  local err = net.download(\"https://raw.githubusercontent.com/chalkan3-sloth/sloth-runner/master/assets/sloth-runner-logo.svg\", download_path)\n  if err then\n    log.error(\"Download failed: \" .. err)\n    return false, \"Download failed\"\n  end\n  log.info(\"File downloaded successfully.\")\n  fs.rm(download_path) -- Clean up\n\n  return true, \"Net module operations successful.\"\nend\n</code></pre>"},{"location":"en/modules/notifications/","title":"Notifications Module","text":"<p>The <code>notifications</code> module provides a simple way to send messages to various notification services from your pipelines. This is particularly useful for reporting the success or failure of a CI/CD workflow.</p> <p>Currently, the following services are supported: - Slack - ntfy</p>"},{"location":"en/modules/notifications/#configuration","title":"Configuration","text":"<p>Before using the module, you need to add the required credentials or URLs to your <code>configs/values.yaml</code> file. The module will read these values at runtime.</p> <pre><code># configs/values.yaml\n\nnotifications:\n  slack:\n    # Your Slack Incoming Webhook URL\n    webhook_url: \"https://hooks.slack.com/services/...\"\n  ntfy:\n    # The ntfy server to use. Can be the public one or self-hosted.\n    server: \"https://ntfy.sh\"\n    # The topic to publish the notification to.\n    topic: \"your-sloth-runner-topic\"\n</code></pre>"},{"location":"en/modules/notifications/#slack","title":"Slack","text":""},{"location":"en/modules/notifications/#notificationsslacksendparams","title":"<code>notifications.slack.send(params)</code>","text":"<p>Sends a message to a Slack channel via an Incoming Webhook.</p> <p>Parameters:</p> <ul> <li><code>params</code> (table): A table containing the following fields:<ul> <li><code>webhook_url</code> (string): Required. The Slack Incoming Webhook URL. It's recommended to get this from the <code>values</code> module.</li> <li><code>message</code> (string): Required. The main text of the message.</li> <li><code>pipeline</code> (string): Optional. The name of the pipeline, which will be displayed in the message attachment for context.</li> <li><code>error_details</code> (string): Optional. Any error details to include in the message attachment. This is useful for failure notifications.</li> </ul> </li> </ul> <p>Returns:</p> <ul> <li><code>true</code> on success.</li> <li><code>false, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>local values = require(\"values\")\n\nlocal slack_webhook = values.get(\"notifications.slack.webhook_url\")\n\nif slack_webhook and slack_webhook ~= \"\" then\n  -- On success\n  notifications.slack.send({\n    webhook_url = slack_webhook,\n    message = \"\u2705 Pipeline executed successfully!\",\n    pipeline = \"my-awesome-pipeline\"\n  })\n\n  -- On failure\n  notifications.slack.send({\n    webhook_url = slack_webhook,\n    message = \"\u274c Pipeline execution failed!\",\n    pipeline = \"my-awesome-pipeline\",\n    error_details = \"Could not connect to database.\"\n  })\nend\n</code></pre>"},{"location":"en/modules/notifications/#ntfy","title":"ntfy","text":""},{"location":"en/modules/notifications/#notificationsntfysendparams","title":"<code>notifications.ntfy.send(params)</code>","text":"<p>Sends a message to an ntfy.sh topic.</p> <p>Parameters:</p> <ul> <li><code>params</code> (table): A table containing the following fields:<ul> <li><code>server</code> (string): Required. The ntfy server URL.</li> <li><code>topic</code> (string): Required. The topic to send the message to.</li> <li><code>message</code> (string): Required. The body of the notification.</li> <li><code>title</code> (string): Optional. The title of the notification.</li> <li><code>priority</code> (string): Optional. Notification priority (e.g., <code>high</code>, <code>default</code>, <code>low</code>).</li> <li><code>tags</code> (table): Optional. A list of tags (emojis) to add to the notification.</li> </ul> </li> </ul> <p>Returns:</p> <ul> <li><code>true</code> on success.</li> <li><code>false, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>local values = require(\"values\")\n\nlocal ntfy_server = values.get(\"notifications.ntfy.server\")\nlocal ntfy_topic = values.get(\"notifications.ntfy.topic\")\n\nif ntfy_topic and ntfy_topic ~= \"\" then\n  -- On success\n  notifications.ntfy.send({\n    server = ntfy_server,\n    topic = ntfy_topic,\n    title = \"Pipeline Success\",\n    message = \"The pipeline finished without errors.\",\n    priority = \"default\",\n    tags = {\"tada\"}\n  })\n\n  -- On failure\n  notifications.ntfy.send({\n    server = ntfy_server,\n    topic = ntfy_topic,\n    title = \"Pipeline Failed!\",\n    message = \"The pipeline failed with an error.\",\n    priority = \"high\",\n    tags = {\"skull\", \"warning\"}\n  })\nend\n</code></pre>"},{"location":"en/modules/pkg/","title":"\ud83d\udce6 Package Manager Module","text":"<p>The <code>pkg</code> module provides comprehensive cross-platform package management functionality. It automatically detects the system's package manager and provides a unified interface for managing packages.</p>"},{"location":"en/modules/pkg/#supported-package-managers","title":"\ud83c\udfaf Supported Package Managers","text":"<ul> <li>apt / apt-get (Debian/Ubuntu)</li> <li>yum / dnf (RHEL/CentOS/Fedora)</li> <li>pacman (Arch Linux)</li> <li>zypper (openSUSE)</li> <li>brew (macOS - Homebrew)</li> </ul>"},{"location":"en/modules/pkg/#functions-overview","title":"\ud83d\udcda Functions Overview","text":"Function Description <code>pkg.install(packages)</code> Install one or more packages <code>pkg.remove(packages)</code> Remove one or more packages <code>pkg.update()</code> Update package cache/list <code>pkg.upgrade()</code> Upgrade all packages <code>pkg.search(query)</code> Search for packages <code>pkg.info(package)</code> Get package information <code>pkg.list()</code> List installed packages <code>pkg.is_installed(package)</code> Check if package is installed <code>pkg.get_manager()</code> Get detected package manager <code>pkg.clean()</code> Clean package cache <code>pkg.autoremove()</code> Remove unused dependencies <code>pkg.which(executable)</code> Find executable path <code>pkg.version(package)</code> Get package version <code>pkg.deps(package)</code> List package dependencies <code>pkg.install_local(file)</code> Install from local file"},{"location":"en/modules/pkg/#detailed-documentation","title":"\ud83d\udcd6 Detailed Documentation","text":""},{"location":"en/modules/pkg/#installation-removal","title":"Installation &amp; Removal","text":""},{"location":"en/modules/pkg/#pkginstallpackages","title":"<code>pkg.install(packages)</code>","text":"<p>Installs one or more packages.</p> <p>Parameters: - <code>packages</code>: String (single package) or Table (multiple packages)</p> <p>Returns: - <code>success</code> (boolean): <code>true</code> on success, <code>false</code> on failure - <code>output</code> (string): Command output</p> <p>Examples:</p> Modern DSLWith delegate_to <pre><code>local pkg = require(\"pkg\")\n\nlocal install_tools = task(\"install_tools\")\n    :description(\"Install development tools\")\n    :command(function(this, params)\n        log.info(\"Installing tools...\")\n\n        -- Install multiple packages\n        local tools = {\"git\", \"curl\", \"wget\", \"vim\"}\n        local success, output = pkg.install(tools)\n\n        if success then\n            log.info(\"\u2705 Tools installed successfully!\")\n            return true, \"Installed\"\n        else\n            log.error(\"\u274c Failed: \" .. output)\n            return false, \"Failed\"\n        end\n    end)\n    :timeout(\"300s\")\n    :build()\n\nworkflow.define(\"setup\")\n    :tasks({ install_tools })\n</code></pre> <pre><code>local pkg = require(\"pkg\")\n\nlocal install_on_agent = task(\"install_on_agent\")\n    :description(\"Install packages on remote agent\")\n    :command(function(this, params)\n        log.info(\"Installing on remote agent...\")\n\n        local success, output = pkg.install({\"htop\", \"ncdu\"})\n\n        if success then\n            log.info(\"\u2705 Installed on agent!\")\n            return true, \"OK\"\n        else\n            return false, \"Failed\"\n        end\n    end)\n    :delegate_to(\"production-server\")\n    :timeout(\"300s\")\n    :build()\n\nworkflow.define(\"remote_install\")\n    :tasks({ install_on_agent })\n</code></pre>"},{"location":"en/modules/pkg/#pkgremovepackages","title":"<code>pkg.remove(packages)</code>","text":"<p>Removes one or more packages.</p> <p>Parameters: - <code>packages</code>: String or Table</p> <p>Returns: - <code>success</code> (boolean), <code>output</code> (string)</p> <p>Example:</p> <pre><code>local pkg = require(\"pkg\")\n\nlocal cleanup = task(\"cleanup\")\n    :description(\"Remove unnecessary packages\")\n    :command(function(this, params)\n        local packages = {\"package1\", \"package2\"}\n        local success, output = pkg.remove(packages)\n\n        if success then\n            log.info(\"\u2705 Packages removed\")\n            return true, \"Removed\"\n        end\n        return false, \"Failed\"\n    end)\n    :timeout(\"180s\")\n    :build()\n</code></pre>"},{"location":"en/modules/pkg/#package-information","title":"Package Information","text":""},{"location":"en/modules/pkg/#pkgsearchquery","title":"<code>pkg.search(query)</code>","text":"<p>Searches for packages.</p> <p>Example:</p> <pre><code>local pkg = require(\"pkg\")\n\nlocal search_python = task(\"search_python\")\n    :description(\"Search for Python packages\")\n    :command(function(this, params)\n        local success, results = pkg.search(\"python3\")\n\n        if success then\n            log.info(\"Search results:\")\n            local count = 0\n            for line in results:gmatch(\"[^\\r\\n]+\") do\n                if count &lt; 10 then\n                    log.info(\"  \u2022 \" .. line)\n                end\n                count = count + 1\n            end\n            return true, count .. \" results\"\n        end\n        return false, \"Search failed\"\n    end)\n    :timeout(\"60s\")\n    :build()\n</code></pre>"},{"location":"en/modules/pkg/#pkginfopackage","title":"<code>pkg.info(package)</code>","text":"<p>Gets package information.</p> <p>Example:</p> <pre><code>local success, info = pkg.info(\"curl\")\nif success then\n    log.info(\"Package info:\\n\" .. info)\nend\n</code></pre>"},{"location":"en/modules/pkg/#pkglist","title":"<code>pkg.list()</code>","text":"<p>Lists installed packages.</p> <p>Returns: <code>success</code> (boolean), <code>packages</code> (table)</p> <p>Example:</p> <pre><code>local success, packages = pkg.list()\nif success and type(packages) == \"table\" then\n    local count = 0\n    for _ in pairs(packages) do count = count + 1 end\n    log.info(\"\ud83d\udce6 Total: \" .. count .. \" packages\")\nend\n</code></pre>"},{"location":"en/modules/pkg/#system-maintenance","title":"System Maintenance","text":""},{"location":"en/modules/pkg/#pkgupdate","title":"<code>pkg.update()</code>","text":"<p>Updates package cache.</p> <p>Example:</p> <pre><code>local update_cache = task(\"update_cache\")\n    :description(\"Update package cache\")\n    :command(function(this, params)\n        log.info(\"Updating...\")\n        return pkg.update()\n    end)\n    :timeout(\"120s\")\n    :build()\n</code></pre>"},{"location":"en/modules/pkg/#pkgupgrade","title":"<code>pkg.upgrade()</code>","text":"<p>Upgrades all packages.</p>"},{"location":"en/modules/pkg/#pkgclean","title":"<code>pkg.clean()</code>","text":"<p>Cleans package cache.</p>"},{"location":"en/modules/pkg/#pkgautoremove","title":"<code>pkg.autoremove()</code>","text":"<p>Removes unused dependencies.</p> <p>Example:</p> <pre><code>local maintenance = task(\"maintenance\")\n    :description(\"System maintenance\")\n    :command(function(this, params)\n        -- Update\n        pkg.update()\n\n        -- Upgrade\n        pkg.upgrade()\n\n        -- Clean\n        pkg.clean()\n        pkg.autoremove()\n\n        return true, \"Maintenance complete\"\n    end)\n    :timeout(\"600s\")\n    :build()\n</code></pre>"},{"location":"en/modules/pkg/#advanced-functions","title":"Advanced Functions","text":""},{"location":"en/modules/pkg/#pkgis_installedpackage","title":"<code>pkg.is_installed(package)</code>","text":"<p>Checks if installed.</p> <p>Example:</p> <pre><code>local pkg = require(\"pkg\")\n\nlocal check_requirements = task(\"check_requirements\")\n    :description(\"Check required packages\")\n    :command(function(this, params)\n        local required = {\"git\", \"curl\", \"wget\"}\n        local missing = {}\n\n        for _, pkg_name in ipairs(required) do\n            local installed, _ = pkg.is_installed(pkg_name)\n            if not installed then\n                table.insert(missing, pkg_name)\n            end\n        end\n\n        if #missing &gt; 0 then\n            return false, \"Missing: \" .. table.concat(missing, \", \")\n        end\n\n        return true, \"All OK\"\n    end)\n    :build()\n</code></pre>"},{"location":"en/modules/pkg/#pkgget_manager","title":"<code>pkg.get_manager()</code>","text":"<p>Returns package manager name.</p> <p>Example:</p> <pre><code>local manager, err = pkg.get_manager()\nlog.info(\"Manager: \" .. (manager or \"unknown\"))\n</code></pre>"},{"location":"en/modules/pkg/#pkgwhichexecutable","title":"<code>pkg.which(executable)</code>","text":"<p>Finds executable path.</p> <p>Example:</p> <pre><code>local path, err = pkg.which(\"git\")\nif path then\n    log.info(\"Git at: \" .. path)\nend\n</code></pre>"},{"location":"en/modules/pkg/#pkgversionpackage","title":"<code>pkg.version(package)</code>","text":"<p>Gets package version.</p>"},{"location":"en/modules/pkg/#pkgdepspackage","title":"<code>pkg.deps(package)</code>","text":"<p>Lists dependencies.</p>"},{"location":"en/modules/pkg/#pkginstall_localfilepath","title":"<code>pkg.install_local(filepath)</code>","text":"<p>Installs from local file (.deb, .rpm).</p>"},{"location":"en/modules/pkg/#complete-examples","title":"\ud83c\udfaf Complete Examples","text":""},{"location":"en/modules/pkg/#development-environment-setup","title":"Development Environment Setup","text":"<pre><code>local pkg = require(\"pkg\")\n\nlocal update = task(\"update\")\n    :command(function() return pkg.update() end)\n    :build()\n\nlocal install_tools = task(\"install_tools\")\n    :command(function()\n        local tools = {\"git\", \"curl\", \"wget\", \"vim\", \"htop\"}\n        return pkg.install(tools)\n    end)\n    :depends_on({\"update\"})\n    :build()\n\nlocal verify = task(\"verify\")\n    :command(function()\n        for _, tool in ipairs({\"git\", \"curl\"}) do\n            if pkg.is_installed(tool) then\n                local path = pkg.which(tool)\n                log.info(\"\u2705 \" .. tool .. \" (\" .. path .. \")\")\n            end\n        end\n        return true, \"OK\"\n    end)\n    :depends_on({\"install_tools\"})\n    :build()\n\nworkflow.define(\"setup_dev\")\n    :tasks({ update, install_tools, verify })\n</code></pre>"},{"location":"en/modules/pkg/#distributed-management","title":"Distributed Management","text":"<pre><code>local pkg = require(\"pkg\")\n\nlocal update_servers = task(\"update_servers\")\n    :command(function() return pkg.update() end)\n    :delegate_to(\"prod-server-1\")\n    :build()\n\nlocal install_monitoring = task(\"install_monitoring\")\n    :command(function()\n        return pkg.install({\"htop\", \"iotop\", \"nethogs\"})\n    end)\n    :delegate_to(\"prod-server-1\")\n    :depends_on({\"update_servers\"})\n    :build()\n\nworkflow.define(\"setup_monitoring\")\n    :tasks({ update_servers, install_monitoring })\n</code></pre>"},{"location":"en/modules/pkg/#system-audit","title":"System Audit","text":"<pre><code>local pkg = require(\"pkg\")\n\nlocal audit = task(\"audit\")\n    :command(function()\n        log.info(\"\ud83d\udcca System Audit\")\n        log.info(\"=\".rep(60))\n\n        local manager = pkg.get_manager()\n        log.info(\"Manager: \" .. manager)\n\n        local _, packages = pkg.list()\n        local count = 0\n        for _ in pairs(packages) do count = count + 1 end\n        log.info(\"Packages: \" .. count)\n\n        local critical = {\"openssl\", \"curl\"}\n        for _, p in ipairs(critical) do\n            local installed = pkg.is_installed(p)\n            log.info((installed and \"\u2705\" or \"\u274c\") .. \" \" .. p)\n        end\n\n        return true, \"OK\"\n    end)\n    :build()\n\nworkflow.define(\"audit\")\n    :tasks({ audit })\n</code></pre>"},{"location":"en/modules/pkg/#best-practices","title":"\ud83d\ude80 Best Practices","text":"<ol> <li> <p>Update before installing: <pre><code>pkg.update()\npkg.install(\"package\")\n</code></pre></p> </li> <li> <p>Check before installing: <pre><code>if not pkg.is_installed(\"git\") then\n    pkg.install(\"git\")\nend\n</code></pre></p> </li> <li> <p>Cleanup after operations: <pre><code>pkg.clean()\npkg.autoremove()\n</code></pre></p> </li> <li> <p>Use delegate_to for remote: <pre><code>:delegate_to(\"server-name\")\n</code></pre></p> </li> </ol>"},{"location":"en/modules/pkg/#platform-notes","title":"\u26a0\ufe0f Platform Notes","text":"<ul> <li>Linux: Requires sudo</li> <li>macOS: Homebrew doesn't need sudo</li> <li>Arch: Uses pacman syntax</li> <li>openSUSE: Uses zypper</li> </ul>"},{"location":"en/modules/pkg/#see-also","title":"\ud83d\udd17 See Also","text":"<ul> <li>exec Module</li> <li>Modern DSL Guide</li> <li>Distributed Agents</li> </ul>"},{"location":"en/modules/pulumi/","title":"Pulumi Module","text":"<p>The <code>pulumi</code> module provides a fluent API to orchestrate Pulumi stacks, enabling you to manage your Infrastructure as Code (IaC) workflows directly from <code>sloth-runner</code>.</p>"},{"location":"en/modules/pulumi/#pulumistackname-options","title":"<code>pulumi.stack(name, options)</code>","text":"<p>Creates a Pulumi stack object.</p> <ul> <li>Parameters:<ul> <li><code>name</code> (string): The full name of the stack (e.g., <code>\"my-org/my-project/dev\"</code>).</li> <li><code>options</code> (table): A table of options.<ul> <li><code>workdir</code> (string): Required. The path to the Pulumi project directory.</li> </ul> </li> </ul> </li> <li>Returns:<ul> <li><code>stack</code> (object): A <code>PulumiStack</code> object.</li> <li><code>error</code>: An error object if the stack cannot be initialized.</li> </ul> </li> </ul>"},{"location":"en/modules/pulumi/#the-pulumistack-object","title":"The <code>PulumiStack</code> Object","text":"<p>This object represents a specific Pulumi stack and provides methods for interaction.</p>"},{"location":"en/modules/pulumi/#stackupoptions","title":"<code>stack:up([options])</code>","text":"<p>Creates or updates the stack's resources by running <code>pulumi up</code>.</p> <ul> <li>Parameters:<ul> <li><code>options</code> (table, optional):<ul> <li><code>yes</code> (boolean): If <code>true</code>, passes <code>--yes</code> to approve the update automatically.</li> <li><code>config</code> (table): A dictionary of configuration values to pass to the stack.</li> <li><code>args</code> (table): A list of additional string arguments to pass to the command.</li> </ul> </li> </ul> </li> <li>Returns:<ul> <li><code>result</code> (table): A table containing <code>success</code> (boolean), <code>stdout</code> (string), and <code>stderr</code> (string).</li> </ul> </li> </ul>"},{"location":"en/modules/pulumi/#stackpreviewoptions","title":"<code>stack:preview([options])</code>","text":"<p>Previews the changes that would be made by an update by running <code>pulumi preview</code>.</p> <ul> <li>Parameters: Same as <code>stack:up</code>.</li> <li>Returns: Same as <code>stack:up</code>.</li> </ul>"},{"location":"en/modules/pulumi/#stackrefreshoptions","title":"<code>stack:refresh([options])</code>","text":"<p>Refreshes the stack's state by running <code>pulumi refresh</code>.</p> <ul> <li>Parameters: Same as <code>stack:up</code>.</li> <li>Returns: Same as <code>stack:up</code>.</li> </ul>"},{"location":"en/modules/pulumi/#stackdestroyoptions","title":"<code>stack:destroy([options])</code>","text":"<p>Destroys all resources in the stack by running <code>pulumi destroy</code>.</p> <ul> <li>Parameters: Same as <code>stack:up</code>.</li> <li>Returns: Same as <code>stack:up</code>.</li> </ul>"},{"location":"en/modules/pulumi/#stackoutputs","title":"<code>stack:outputs()</code>","text":"<p>Retrieves the outputs of a deployed stack.</p> <ul> <li>Returns:<ul> <li><code>outputs</code> (table): A Lua table of the stack's outputs.</li> <li><code>error</code>: An error object if fetching outputs fails.</li> </ul> </li> </ul>"},{"location":"en/modules/pulumi/#example","title":"Example","text":"<p>This example shows a common pattern: deploying a networking stack (VPC) and then using its output (<code>vpcId</code>) to configure and deploy an application stack.</p> <pre><code>command = function()\n  local pulumi = require(\"pulumi\")\n\n  -- 1. Define the VPC stack\n  local vpc_stack = pulumi.stack(\"my-org/vpc/prod\", { workdir = \"./pulumi/vpc\" })\n\n  -- 2. Deploy the VPC\n  log.info(\"Deploying VPC stack...\")\n  local vpc_result = vpc_stack:up({ yes = true })\n  if not vpc_result.success then\n    return false, \"VPC deployment failed: \" .. vpc_result.stderr\n  end\n\n  -- 3. Get the VPC ID from its outputs\n  log.info(\"Fetching VPC outputs...\")\n  local vpc_outputs, err = vpc_stack:outputs()\n  if err then\n    return false, \"Failed to get VPC outputs: \" .. err\n  end\n  local vpc_id = vpc_outputs.vpcId\n\n  -- 4. Define the App stack\n  local app_stack = pulumi.stack(\"my-org/app/prod\", { workdir = \"./pulumi/app\" })\n\n  -- 5. Deploy the App, passing the vpcId as configuration\n  log.info(\"Deploying App stack into VPC: \" .. vpc_id)\n  local app_result = app_stack:up({\n    yes = true,\n    config = { [\"my-app:vpcId\"] = vpc_id }\n  })\n  if not app_result.success then\n    return false, \"App deployment failed: \" .. app_result.stderr\n  end\n\n  log.info(\"All stacks deployed successfully.\")\n  return true, \"Pulumi orchestration complete.\"\nend\n</code></pre>"},{"location":"en/modules/python/","title":"Python Module","text":"<p>The <code>python</code> module provides a convenient way to manage Python virtual environments (<code>venv</code>) and execute scripts from within your <code>sloth-runner</code> tasks. This is particularly useful for workflows that involve Python-based tools or scripts.</p>"},{"location":"en/modules/python/#pythonvenvpath","title":"<code>python.venv(path)</code>","text":"<p>Creates a Python virtual environment object. Note that this only creates the object in Lua; the environment itself is not created on the file system until you call <code>:create()</code>.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The file system path where the virtual environment should be created (e.g., <code>./.venv</code>).</li> </ul> </li> <li>Returns:<ul> <li><code>venv</code> (object): A virtual environment object with methods to interact with it.</li> </ul> </li> </ul>"},{"location":"en/modules/python/#venvcreate","title":"<code>venv:create()</code>","text":"<p>Creates the virtual environment on the file system at the specified path.</p> <ul> <li>Returns:<ul> <li><code>error</code>: An error object if the creation fails.</li> </ul> </li> </ul>"},{"location":"en/modules/python/#venvpipcommand","title":"<code>venv:pip(command)</code>","text":"<p>Executes a <code>pip</code> command within the context of the virtual environment.</p> <ul> <li>Parameters:<ul> <li><code>command</code> (string): The arguments to pass to <code>pip</code> (e.g., <code>install -r requirements.txt</code>).</li> </ul> </li> <li>Returns:<ul> <li><code>result</code> (table): A table containing the <code>stdout</code>, <code>stderr</code>, and <code>exit_code</code> of the <code>pip</code> command.</li> </ul> </li> </ul>"},{"location":"en/modules/python/#venvexecscript_path","title":"<code>venv:exec(script_path)</code>","text":"<p>Executes a Python script using the Python interpreter from the virtual environment.</p> <ul> <li>Parameters:<ul> <li><code>script_path</code> (string): The path to the Python script to execute.</li> </ul> </li> <li>Returns:<ul> <li><code>result</code> (table): A table containing the <code>stdout</code>, <code>stderr</code>, and <code>exit_code</code> of the script execution.</li> </ul> </li> </ul>"},{"location":"en/modules/python/#example","title":"Example","text":"<p>This example demonstrates a complete lifecycle: creating a virtual environment, installing dependencies from a <code>requirements.txt</code> file, and running a Python script.</p> <pre><code>-- examples/python_venv_lifecycle_example.sloth\n\nModern DSLs = {\n  main = {\n    description = \"A task to demonstrate the Python venv lifecycle.\",\n    create_workdir_before_run = true, -- Use a temporary workdir\n    tasks = {\n      {\n        name = \"run-python-script\",\n        description = \"Creates a venv, installs dependencies, and runs a script.\",\n        command = function(params)\n          local python = require(\"python\")\n          local workdir = params.workdir -- Get the temp workdir from the group\n\n          -- 1. Write our Python script and dependencies to the workdir\n          fs.write(workdir .. \"/requirements.txt\", \"requests==2.28.1\")\n          fs.write(workdir .. \"/main.py\", \"import requests\\nprint(f'Hello from Python! Using requests version: {requests.__version__}')\")\n\n          -- 2. Create a venv object\n          local venv_path = workdir .. \"/.venv\"\n          log.info(\"Setting up virtual environment at: \" .. venv_path)\n          local venv = python.venv(venv_path)\n\n          -- 3. Create the venv on the filesystem\n          venv:create()\n\n          -- 4. Install dependencies using pip\n          log.info(\"Installing dependencies from requirements.txt...\")\n          local pip_result = venv:pip(\"install -r \" .. workdir .. \"/requirements.txt\")\n          if pip_result.exit_code ~= 0 then\n            log.error(\"Pip install failed: \" .. pip_result.stderr)\n            return false, \"Failed to install Python dependencies.\"\n          end\n\n          -- 5. Execute the script\n          log.info(\"Running the Python script...\")\n          local exec_result = venv:exec(workdir .. \"/main.py\")\n          if exec_result.exit_code ~= 0 then\n            log.error(\"Python script failed: \" .. exec_result.stderr)\n            return false, \"Python script execution failed.\"\n          end\n\n          log.info(\"Python script executed successfully.\")\n          print(\"---\\n--- Python Script Output ---\")\n          print(exec_result.stdout)\n          print(\"----------------------------\")\n\n          return true, \"Python venv lifecycle complete.\"\n        end\n      }\n    }\n  }\n}\n</code></pre> <p>```</p>"},{"location":"en/modules/reliability/","title":"\ud83d\udee1\ufe0f Reliability Module","text":"<p>The Reliability module provides enterprise-grade reliability patterns including circuit breakers, retry logic with exponential backoff, and failure handling strategies. These patterns help build resilient systems that can gracefully handle failures and recover automatically.</p>"},{"location":"en/modules/reliability/#key-features","title":"\ud83d\ude80 Key Features","text":"<ul> <li>Circuit Breaker Pattern: Prevents cascading failures by stopping calls to failing services</li> <li>Retry Logic: Configurable retry strategies with backoff algorithms</li> <li>Failure Tracking: Persistent failure state across task executions</li> <li>Multiple Strategies: Fixed delay, exponential backoff, linear backoff, custom</li> <li>Jitter Support: Randomization to prevent thundering herd problems</li> <li>State Integration: Uses state module for persistent failure tracking</li> <li>Callback Support: Custom callbacks for retry and state change events</li> </ul>"},{"location":"en/modules/reliability/#basic-usage","title":"\ud83d\udccb Basic Usage","text":""},{"location":"en/modules/reliability/#simple-retry","title":"Simple Retry","text":"<pre><code>-- Retry a function up to 3 times with 1 second initial delay\nlocal result = reliability.retry(3, 1, function()\n    -- Your potentially failing code here\n    if math.random() &gt; 0.7 then\n        return \"Success!\"\n    else\n        return nil, \"Random failure\"\n    end\nend)\n\nif result then\n    log.info(\"Operation succeeded: \" .. result)\nelse \n    log.error(\"All retries failed\")\nend\n</code></pre>"},{"location":"en/modules/reliability/#advanced-retry-configuration","title":"Advanced Retry Configuration","text":"<pre><code>local config = {\n    max_attempts = 5,\n    initial_delay = 0.5,  -- 500ms\n    max_delay = 10,       -- 10 seconds max\n    strategy = reliability.strategy.EXPONENTIAL_BACKOFF,\n    multiplier = 2.0,\n    jitter = true,\n    on_retry = function(attempt, delay, error)\n        log.warn(\"Retry attempt \" .. attempt .. \" in \" .. delay .. \"s: \" .. error)\n    end\n}\n\nlocal result = reliability.retry_with_config(config, function()\n    -- Your code here\n    return call_external_service()\nend)\n</code></pre>"},{"location":"en/modules/reliability/#circuit-breaker","title":"Circuit Breaker","text":"<pre><code>local cb_config = {\n    max_failures = 3,     -- Open after 3 failures\n    timeout = 30,         -- Wait 30 seconds before trying half-open\n    success_threshold = 2, -- Need 2 successes to close circuit\n    on_state_change = function(from_state, to_state)\n        log.info(\"Circuit breaker: \" .. from_state .. \" -&gt; \" .. to_state)\n    end\n}\n\nlocal result = reliability.circuit_breaker(\"external_api\", cb_config, function()\n    -- Call that might fail\n    return http.get(\"https://api.example.com/data\")\nend)\n</code></pre>"},{"location":"en/modules/reliability/#retry-strategies","title":"\ud83d\udd04 Retry Strategies","text":""},{"location":"en/modules/reliability/#available-strategy-types","title":"Available Strategy Types","text":"<pre><code>-- Fixed delay between retries\nreliability.strategy.FIXED_DELAY\n\n-- Exponential backoff (delay doubles each time)\nreliability.strategy.EXPONENTIAL_BACKOFF  \n\n-- Linear backoff (delay increases linearly)\nreliability.strategy.LINEAR_BACKOFF\n\n-- Custom delay function\nreliability.strategy.CUSTOM_BACKOFF\n</code></pre>"},{"location":"en/modules/reliability/#custom-delay-function","title":"Custom Delay Function","text":"<pre><code>local config = {\n    max_attempts = 5,\n    strategy = reliability.strategy.CUSTOM_BACKOFF,\n    custom_delay = function(attempt)\n        -- Custom fibonacci-like delays\n        if attempt == 1 then return 1 end\n        if attempt == 2 then return 1 end\n        return (attempt - 1) + (attempt - 2)\n    end\n}\n</code></pre>"},{"location":"en/modules/reliability/#circuit-breaker-states","title":"\u26a1 Circuit Breaker States","text":""},{"location":"en/modules/reliability/#state-transitions","title":"State Transitions","text":"<ul> <li>Closed \u2192 Open: After max_failures consecutive failures</li> <li>Open \u2192 Half-Open: After timeout period expires  </li> <li>Half-Open \u2192 Closed: After success_threshold successes</li> <li>Half-Open \u2192 Open: After any failure</li> </ul>"},{"location":"en/modules/reliability/#monitoring-circuit-state","title":"Monitoring Circuit State","text":"<pre><code>-- Get current statistics\nlocal stats = reliability.get_circuit_stats(\"my_service\")\nif stats then\n    log.info(\"Circuit state: \" .. stats.state)\n    log.info(\"Total requests: \" .. stats.requests)\n    log.info(\"Success rate: \" .. (stats.total_success / stats.requests * 100) .. \"%\")\nend\n\n-- List all circuit breakers\nlocal circuits = reliability.list_circuits()\nfor _, name in ipairs(circuits) do\n    log.info(\"Circuit: \" .. name)\nend\n\n-- Reset circuit breaker\nreliability.reset_circuit(\"my_service\")\n</code></pre>"},{"location":"en/modules/reliability/#integration-with-state-module","title":"\ud83d\udd17 Integration with State Module","text":""},{"location":"en/modules/reliability/#persistent-failure-tracking","title":"Persistent Failure Tracking","text":"<pre><code>-- Track failures across task executions\nlocal service_name = \"payment_service\"\nlocal failure_key = \"failures:\" .. service_name\n\nlocal function make_payment_call()\n    local success = make_api_call()\n\n    if success then\n        -- Reset failure count on success\n        state.set(failure_key, \"0\")\n        return true\n    else\n        -- Increment failure counter\n        local failures = state.increment(failure_key, 1)\n\n        -- Circuit break if too many failures\n        if failures &gt;= 5 then\n            return nil, \"Service circuit opened - too many failures\"\n        end\n\n        return nil, \"Temporary service failure\"\n    end\nend\n\n-- Use with retry\nlocal result = reliability.retry(3, 2, make_payment_call)\n</code></pre>"},{"location":"en/modules/reliability/#distributed-lock-with-retry","title":"Distributed Lock with Retry","text":"<pre><code>-- Combine distributed locking with retry logic\nlocal retry_config = {\n    max_attempts = 5,\n    initial_delay = 0.5,\n    strategy = reliability.strategy.LINEAR_BACKOFF\n}\n\nlocal result = reliability.retry_with_config(retry_config, function()\n    -- Try to acquire distributed lock\n    if not state.try_lock(\"critical_resource\", 10) then\n        return nil, \"Could not acquire lock\"\n    end\n\n    -- Do critical work\n    local work_result = perform_critical_operation()\n\n    -- Release lock\n    state.unlock(\"critical_resource\")\n\n    return work_result\nend)\n</code></pre>"},{"location":"en/modules/reliability/#advanced-patterns","title":"\ud83d\udcca Advanced Patterns","text":""},{"location":"en/modules/reliability/#combine-multiple-patterns","title":"Combine Multiple Patterns","text":"<pre><code>-- Deployment with circuit breaker, retry, and state tracking\nlocal deployment_steps = {\"validate\", \"backup\", \"deploy\", \"verify\"}\n\nfor _, step in ipairs(deployment_steps) do\n    local step_result = reliability.retry_with_config({\n        max_attempts = 3,\n        initial_delay = 1,\n        strategy = reliability.strategy.EXPONENTIAL_BACKOFF,\n        on_retry = function(attempt, delay, error)\n            state.append(\"deployment_log\", \n                step .. \" retry \" .. attempt .. \": \" .. error, \"\\n\")\n        end\n    }, function()\n        return reliability.circuit_breaker(\"deployment_service\", {\n            max_failures = 2,\n            timeout = 30,\n            on_state_change = function(from, to)\n                state.set(\"deployment_cb_state\", to)\n            end\n        }, function()\n            return execute_deployment_step(step)\n        end)\n    end)\n\n    if not step_result then\n        state.set(\"deployment_status\", \"failed_at_\" .. step)\n        return false, \"Deployment failed at: \" .. step\n    end\n\n    -- Update progress\n    local progress = math.floor((step_index / #deployment_steps) * 100)\n    state.set(\"deployment_progress\", progress)\nend\n\nstate.set(\"deployment_status\", \"completed\")\n</code></pre>"},{"location":"en/modules/reliability/#health-check-with-backoff","title":"Health Check with Backoff","text":"<pre><code>-- Health check with exponential backoff\nlocal health_config = {\n    max_attempts = 10,\n    initial_delay = 1,\n    max_delay = 60,\n    strategy = reliability.strategy.EXPONENTIAL_BACKOFF,\n    multiplier = 1.5,\n    jitter = true\n}\n\nlocal health_status = reliability.retry_with_config(health_config, function()\n    local response = http.get(\"http://localhost:8080/health\")\n\n    if response.status == 200 then\n        return response.body\n    else\n        return nil, \"Health check failed: \" .. response.status\n    end\nend)\n</code></pre>"},{"location":"en/modules/reliability/#configuration-reference","title":"\ud83c\udf9b\ufe0f Configuration Reference","text":""},{"location":"en/modules/reliability/#retry-configuration","title":"Retry Configuration","text":"<pre><code>{\n    max_attempts = 3,           -- Maximum retry attempts\n    initial_delay = 1,          -- Initial delay in seconds\n    max_delay = 30,             -- Maximum delay in seconds  \n    strategy = \"exponential\",   -- Retry strategy\n    multiplier = 2.0,           -- Backoff multiplier\n    jitter = true,              -- Add random jitter\n    on_retry = function(attempt, delay, error)\n        -- Retry callback\n    end\n}\n</code></pre>"},{"location":"en/modules/reliability/#circuit-breaker-configuration","title":"Circuit Breaker Configuration","text":"<pre><code>{\n    max_failures = 5,           -- Failures before opening\n    timeout = 60,               -- Seconds before half-open\n    success_threshold = 1,      -- Successes needed to close\n    on_state_change = function(from, to)\n        -- State change callback  \n    end\n}\n</code></pre>"},{"location":"en/modules/reliability/#error-handling","title":"\ud83d\udea8 Error Handling","text":""},{"location":"en/modules/reliability/#custom-error-predicates","title":"Custom Error Predicates","text":"<pre><code>-- Retry only on specific errors\nlocal config = {\n    max_attempts = 3,\n    should_retry = function(error)\n        -- Only retry on network errors\n        return string.find(error, \"network\") or string.find(error, \"timeout\")\n    end\n}\n</code></pre>"},{"location":"en/modules/reliability/#error-types","title":"Error Types","text":"<ul> <li>RetryableError: Explicitly marked as retryable</li> <li>NonRetryableError: Should not be retried</li> <li>CircuitBreakerError: Circuit is open, don't retry immediately</li> </ul>"},{"location":"en/modules/reliability/#monitoring-and-observability","title":"\ud83d\udcc8 Monitoring and Observability","text":""},{"location":"en/modules/reliability/#metrics-collection","title":"Metrics Collection","text":"<pre><code>-- Circuit breaker metrics\nlocal cb_stats = reliability.get_circuit_stats(\"service_name\")\n-- Returns: requests, total_success, total_failures, consecutive_success, \n--          consecutive_failures, state, last_success_time, last_failure_time\n\n-- State-based metrics\nlocal failure_count = tonumber(state.get(\"service_failures\", \"0\"))\nlocal success_rate = calculate_success_rate()\n\n-- Log metrics\nlog.info(\"Service metrics\", {\n    circuit_state = cb_stats.state,\n    failure_count = failure_count,\n    success_rate = success_rate\n})\n</code></pre> <p>The reliability module provides the foundation for building resilient, fault-tolerant automation workflows that can handle failures gracefully and recover automatically.</p>"},{"location":"en/modules/salt/","title":"Salt Module","text":"<p>The <code>salt</code> module provides a fluent API to interact with SaltStack, allowing you to run remote execution commands and manage configurations from your <code>sloth-runner</code> workflows.</p>"},{"location":"en/modules/salt/#saltclientoptions","title":"<code>salt.client([options])</code>","text":"<p>Creates a Salt client object.</p> <ul> <li>Parameters:<ul> <li><code>options</code> (table, optional): A table of options.<ul> <li><code>config_path</code> (string): Path to the Salt master configuration file.</li> </ul> </li> </ul> </li> <li>Returns:<ul> <li><code>client</code> (object): A <code>SaltClient</code> object.</li> </ul> </li> </ul>"},{"location":"en/modules/salt/#the-saltclient-object","title":"The <code>SaltClient</code> Object","text":"<p>This object represents a client for a Salt master and provides methods for targeting minions.</p>"},{"location":"en/modules/salt/#clienttargettarget_string-expr_form","title":"<code>client:target(target_string, [expr_form])</code>","text":"<p>Specifies the minion(s) to target for a command.</p> <ul> <li>Parameters:<ul> <li><code>target_string</code> (string): The target expression (e.g., <code>\"*\"</code> for all minions, <code>\"web-server-1\"</code>, or a grain value).</li> <li><code>expr_form</code> (string, optional): The type of targeting to use (e.g., <code>\"glob\"</code>, <code>\"grain\"</code>, <code>\"list\"</code>). Defaults to glob.</li> </ul> </li> <li>Returns:<ul> <li><code>target</code> (object): A <code>SaltTarget</code> object.</li> </ul> </li> </ul>"},{"location":"en/modules/salt/#the-salttarget-object","title":"The <code>SaltTarget</code> Object","text":"<p>This object represents a specific target and provides chainable methods for executing Salt functions.</p>"},{"location":"en/modules/salt/#targetcmdfunction-arg1-arg2","title":"<code>target:cmd(function, [arg1, arg2, ...])</code>","text":"<p>Executes a Salt execution module function on the target.</p> <ul> <li>Parameters:<ul> <li><code>function</code> (string): The name of the function to run (e.g., <code>\"test.ping\"</code>, <code>\"state.apply\"</code>, <code>\"cmd.run\"</code>).</li> <li><code>arg1</code>, <code>arg2</code>, ... (any): Additional arguments to pass to the Salt function.</li> </ul> </li> <li>Returns:<ul> <li><code>result</code> (table): A table containing <code>success</code> (boolean), <code>stdout</code> (string or table), and <code>stderr</code> (string). If the Salt command returns JSON, <code>stdout</code> will be a parsed Lua table.</li> </ul> </li> </ul>"},{"location":"en/modules/salt/#example","title":"Example","text":"<p>This example demonstrates targeting minions to ping them and apply a Salt state.</p> <pre><code>command = function()\n  local salt = require(\"salt\")\n\n  -- 1. Create a Salt client\n  local client = salt.client()\n\n  -- 2. Target all minions and ping them\n  log.info(\"Pinging all minions...\")\n  local ping_result = client:target(\"*\"):cmd(\"test.ping\")\n  if not ping_result.success then\n    return false, \"Failed to ping minions: \" .. ping_result.stderr\n  end\n  print(\"Ping Results:\")\n  print(data.to_yaml(ping_result.stdout)) -- stdout is a table\n\n  -- 3. Target a specific web server and apply a state\n  log.info(\"Applying 'nginx' state to web-server-1...\")\n  local apply_result = client:target(\"web-server-1\", \"glob\"):cmd(\"state.apply\", \"nginx\")\n  if not apply_result.success then\n    return false, \"Failed to apply state: \" .. apply_result.stderr\n  end\n\n  log.info(\"State applied successfully.\")\n  return true, \"Salt operations complete.\"\nend\n</code></pre>"},{"location":"en/modules/state/","title":"\ud83d\udcbe State Management Module","text":"<p>The State Management module provides powerful persistent state capabilities with atomic operations, distributed locks, and TTL (Time To Live) functionality. All data is stored locally using SQLite with WAL mode for maximum performance and reliability.</p>"},{"location":"en/modules/state/#key-features","title":"\ud83d\ude80 Key Features","text":"<ul> <li>SQLite Persistence: Reliable storage with WAL mode</li> <li>Atomic Operations: Thread-safe increment, compare-and-swap, append</li> <li>Distributed Locks: Critical sections with automatic timeout</li> <li>TTL (Time To Live): Automatic key expiration</li> <li>Data Types: String, number, boolean, table, list</li> <li>Pattern Matching: Wildcard key searches</li> <li>Auto Cleanup: Background cleanup of expired data</li> <li>Statistics: Usage and performance metrics</li> </ul>"},{"location":"en/modules/state/#basic-usage","title":"\ud83d\udccb Basic Usage","text":""},{"location":"en/modules/state/#setting-and-getting-values","title":"Setting and Getting Values","text":"<pre><code>-- Set values\nstate.set(\"app_version\", \"v1.2.3\")\nstate.set(\"user_count\", 1000)\nstate.set(\"config\", {\n    debug = true,\n    max_connections = 100\n})\n\n-- Get values\nlocal version = state.get(\"app_version\")\nlocal count = state.get(\"user_count\")\nlocal config = state.get(\"config\")\n\n-- Get with default value\nlocal theme = state.get(\"ui_theme\", \"dark\")\n\n-- Check existence\nif state.exists(\"app_version\") then\n    log.info(\"App version is configured\")\nend\n\n-- Delete key\nstate.delete(\"old_key\")\n</code></pre>"},{"location":"en/modules/state/#ttl-time-to-live","title":"TTL (Time To Live)","text":"<pre><code>-- Set with TTL (60 seconds)\nstate.set(\"session_token\", \"abc123\", 60)\n\n-- Set TTL for existing key\nstate.set_ttl(\"user_session\", 300) -- 5 minutes\n\n-- Check remaining TTL\nlocal ttl = state.get_ttl(\"session_token\")\nlog.info(\"Token expires in \" .. ttl .. \" seconds\")\n</code></pre>"},{"location":"en/modules/state/#atomic-operations","title":"Atomic Operations","text":"<pre><code>-- Atomic increment\nlocal counter = state.increment(\"page_views\", 1)\nlocal bulk_counter = state.increment(\"downloads\", 50)\n\n-- Atomic decrement  \nlocal remaining = state.decrement(\"inventory\", 5)\n\n-- String append\nstate.set(\"log_messages\", \"Starting application\")\nlocal new_length = state.append(\"log_messages\", \" -&gt; Connecting to database\")\n\n-- Atomic compare-and-swap\nlocal old_version = state.get(\"config_version\")\nlocal success = state.compare_swap(\"config_version\", old_version, old_version + 1)\nif success then\n    log.info(\"Configuration updated safely\")\nend\n</code></pre>"},{"location":"en/modules/state/#list-operations","title":"List Operations","text":"<pre><code>-- Add items to list\nstate.list_push(\"deployment_queue\", {\n    app = \"frontend\",\n    version = \"v2.1.0\",\n    environment = \"staging\"\n})\n\n-- Check list size\nlocal queue_size = state.list_length(\"deployment_queue\")\nlog.info(\"Items in queue: \" .. queue_size)\n\n-- Process list (pop removes last item)\nwhile state.list_length(\"deployment_queue\") &gt; 0 do\n    local deployment = state.list_pop(\"deployment_queue\")\n    log.info(\"Processing deployment: \" .. deployment.app)\n    -- Process deployment...\nend\n</code></pre>"},{"location":"en/modules/state/#distributed-locks-and-critical-sections","title":"Distributed Locks and Critical Sections","text":"<pre><code>-- Try to acquire lock (no waiting)\nlocal lock_acquired = state.try_lock(\"deployment_lock\", 30) -- 30 seconds TTL\nif lock_acquired then\n    -- Critical work\n    state.unlock(\"deployment_lock\")\nend\n\n-- Lock with wait and timeout\nlocal acquired = state.lock(\"database_migration\", 60) -- wait up to 60s\nif acquired then\n    -- Execute migration\n    state.unlock(\"database_migration\")\nend\n\n-- Critical section with automatic lock management\nstate.with_lock(\"critical_section\", function()\n    log.info(\"Executing critical operation...\")\n\n    -- Update global counter\n    local counter = state.increment(\"global_counter\", 1)\n\n    -- Update timestamp\n    state.set(\"last_operation\", os.time())\n\n    log.info(\"Critical operation completed - counter: \" .. counter)\n\n    -- Lock is automatically released when function returns\n    return \"operation_success\"\nend, 15) -- 15 second timeout\n</code></pre>"},{"location":"en/modules/state/#api-reference","title":"\ud83d\udd0d API Reference","text":""},{"location":"en/modules/state/#basic-operations","title":"Basic Operations","text":"Function Parameters Return Description <code>state.set(key, value, ttl?)</code> key: string, value: any, ttl?: number success: boolean Set a value with optional TTL <code>state.get(key, default?)</code> key: string, default?: any value: any Get a value or return default <code>state.delete(key)</code> key: string success: boolean Remove a key <code>state.exists(key)</code> key: string exists: boolean Check if key exists <code>state.clear(pattern?)</code> pattern?: string success: boolean Remove keys by pattern"},{"location":"en/modules/state/#ttl-operations","title":"TTL Operations","text":"Function Parameters Return Description <code>state.set_ttl(key, seconds)</code> key: string, seconds: number success: boolean Set TTL for existing key <code>state.get_ttl(key)</code> key: string ttl: number Get remaining TTL (-1 = no TTL, -2 = not exists)"},{"location":"en/modules/state/#atomic-operations_1","title":"Atomic Operations","text":"Function Parameters Return Description <code>state.increment(key, delta?)</code> key: string, delta?: number new_value: number Atomically increment value <code>state.decrement(key, delta?)</code> key: string, delta?: number new_value: number Atomically decrement value <code>state.append(key, value)</code> key: string, value: string new_length: number Atomically append string <code>state.compare_swap(key, old, new)</code> key: string, old: any, new: any success: boolean Atomic compare-and-swap"},{"location":"en/modules/state/#list-operations_1","title":"List Operations","text":"Function Parameters Return Description <code>state.list_push(key, item)</code> key: string, item: any length: number Add item to end of list <code>state.list_pop(key)</code> key: string item: any | nil Remove and return last item <code>state.list_length(key)</code> key: string length: number Get list length"},{"location":"en/modules/state/#distributed-locks","title":"Distributed Locks","text":"Function Parameters Return Description <code>state.try_lock(name, ttl)</code> name: string, ttl: number success: boolean Try to acquire lock without waiting <code>state.lock(name, timeout?)</code> name: string, timeout?: number success: boolean Acquire lock with timeout <code>state.unlock(name)</code> name: string success: boolean Release lock <code>state.with_lock(name, fn, timeout?)</code> name: string, fn: function, timeout?: number result: any Execute function with automatic lock"},{"location":"en/modules/state/#utilities","title":"Utilities","text":"Function Parameters Return Description <code>state.keys(pattern?)</code> pattern?: string keys: table List keys by pattern <code>state.stats()</code> - stats: table Get system statistics"},{"location":"en/modules/state/#practical-use-cases","title":"\ud83d\udca1 Practical Use Cases","text":""},{"location":"en/modules/state/#1-deployment-version-control","title":"1. Deployment Version Control","text":"<pre><code>Modern DSLs = {\n    deployment_pipeline = {\n        tasks = {\n            prepare_deploy = {\n                command = function()\n                    -- Check last deployed version\n                    local last_version = state.get(\"last_deployed_version\", \"v0.0.0\")\n                    local new_version = \"v1.2.3\"\n\n                    -- Check if already deployed\n                    if last_version == new_version then\n                        log.warn(\"Version \" .. new_version .. \" already deployed\")\n                        return false, \"Version already deployed\"\n                    end\n\n                    -- Register deployment start\n                    state.set(\"deploy_status\", \"in_progress\")\n                    state.set(\"deploy_start_time\", os.time())\n                    state.increment(\"total_deploys\", 1)\n\n                    return true, \"Deploy preparation completed\"\n                end\n            },\n\n            execute_deploy = {\n                depends_on = \"prepare_deploy\",\n                command = function()\n                    -- Critical section for deployment\n                    return state.with_lock(\"deployment_lock\", function()\n                        log.info(\"Executing deployment with lock...\")\n\n                        -- Simulate deployment\n                        exec.run(\"sleep 5\")\n\n                        -- Update state\n                        state.set(\"last_deployed_version\", \"v1.2.3\")\n                        state.set(\"deploy_status\", \"completed\")\n                        state.set(\"deploy_end_time\", os.time())\n\n                        -- Record history\n                        state.list_push(\"deploy_history\", {\n                            version = \"v1.2.3\",\n                            timestamp = os.time(),\n                            duration = state.get(\"deploy_end_time\") - state.get(\"deploy_start_time\")\n                        })\n\n                        return true, \"Deploy completed successfully\"\n                    end, 300) -- 5 minutes timeout\n                end\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"en/modules/state/#2-intelligent-caching-with-ttl","title":"2. Intelligent Caching with TTL","text":"<pre><code>-- Helper function for caching\nfunction get_cached_data(cache_key, fetch_function, ttl)\n    local cached = state.get(cache_key)\n    if cached then\n        log.info(\"Cache hit: \" .. cache_key)\n        return cached\n    end\n\n    log.info(\"Cache miss: \" .. cache_key .. \" - fetching...\")\n    local data = fetch_function()\n    state.set(cache_key, data, ttl or 300) -- 5 minutes default\n    return data\nend\n\n-- Usage in tasks\nModern DSLs = {\n    data_processing = {\n        tasks = {\n            fetch_user_data = {\n                command = function()\n                    local user_data = get_cached_data(\"user:123:profile\", function()\n                        -- Simulate expensive fetch\n                        return {\n                            name = \"Alice\",\n                            email = \"alice@example.com\",\n                            preferences = {\"dark_mode\", \"notifications\"}\n                        }\n                    end, 600) -- Cache for 10 minutes\n\n                    log.info(\"User data: \" .. data.to_json(user_data))\n                    return true, \"User data retrieved\"\n                end\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"en/modules/state/#3-rate-limiting","title":"3. Rate Limiting","text":"<pre><code>function check_rate_limit(identifier, max_requests, window_seconds)\n    local key = \"rate_limit:\" .. identifier\n    local current_count = state.get(key, 0)\n\n    if current_count &gt;= max_requests then\n        return false, \"Rate limit exceeded\"\n    end\n\n    -- Increment counter\n    if current_count == 0 then\n        -- First request in window\n        state.set(key, 1, window_seconds)\n    else\n        -- Increment existing counter\n        state.increment(key, 1)\n    end\n\n    return true, \"Request allowed\"\nend\n\n-- Usage in tasks\nModern DSLs = {\n    api_tasks = {\n        tasks = {\n            make_api_call = {\n                command = function()\n                    local allowed, msg = check_rate_limit(\"api_calls\", 100, 3600) -- 100 calls/hour\n\n                    if not allowed then\n                        log.error(msg)\n                        return false, msg\n                    end\n\n                    -- Make API call\n                    log.info(\"Making API call...\")\n                    return true, \"API call completed\"\n                end\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"en/modules/state/#configuration-and-storage","title":"\u2699\ufe0f Configuration and Storage","text":""},{"location":"en/modules/state/#database-location","title":"Database Location","text":"<p>By default, the SQLite database is created at: - Linux/macOS: <code>~/.sloth-runner/state.db</code> - Windows: <code>%USERPROFILE%\\.sloth-runner\\state.db</code></p>"},{"location":"en/modules/state/#technical-characteristics","title":"Technical Characteristics","text":"<ul> <li>Engine: SQLite 3 with WAL mode</li> <li>Concurrent Access: Support for multiple simultaneous connections</li> <li>Auto-cleanup: Automatic cleanup of expired data every 5 minutes</li> <li>Lock Timeout: Expired locks are cleaned automatically</li> <li>Serialization: JSON for complex objects, native format for simple types</li> </ul>"},{"location":"en/modules/state/#limitations","title":"Limitations","text":"<ul> <li>Local Scope: State is persisted only on local machine</li> <li>Concurrency: Locks are effective only within local process</li> <li>Size: Suitable for small to medium datasets (&lt; 1GB)</li> </ul>"},{"location":"en/modules/state/#best-practices","title":"\ud83d\udd04 Best Practices","text":"<ol> <li>Use TTL for temporary data to prevent storage bloat</li> <li>Use locks for critical sections to avoid race conditions  </li> <li>Use patterns for bulk operations to manage related keys</li> <li>Monitor storage size using <code>state.stats()</code> </li> <li>Use atomic operations instead of read-modify-write patterns</li> <li>Clean up expired keys regularly with <code>state.clear(pattern)</code></li> </ol> <p>The State Management module transforms sloth-runner into a stateful, reliable platform for complex task orchestration! \ud83d\ude80</p>"},{"location":"en/modules/systemd/","title":"\u2699\ufe0f Systemd Module","text":"<p>The <code>systemd</code> module provides comprehensive systemd service management functionality for Linux systems. It allows you to create, manage, and monitor systemd services programmatically.</p>"},{"location":"en/modules/systemd/#overview","title":"\ud83c\udfaf Overview","text":"<p>The systemd module enables you to: - Create and configure systemd service files - Start, stop, restart, and reload services - Enable and disable services - Check service status and activity - List all services - Manage systemd daemon configuration</p>"},{"location":"en/modules/systemd/#functions-overview","title":"\ud83d\udcda Functions Overview","text":"Function Description <code>systemd.create_service(name, config)</code> Create a new systemd service <code>systemd.start(service)</code> Start a service <code>systemd.stop(service)</code> Stop a service <code>systemd.restart(service)</code> Restart a service <code>systemd.reload(service)</code> Reload a service <code>systemd.enable(service)</code> Enable service at boot <code>systemd.disable(service)</code> Disable service at boot <code>systemd.status(service)</code> Get service status <code>systemd.is_active(service)</code> Check if service is active <code>systemd.is_enabled(service)</code> Check if service is enabled <code>systemd.daemon_reload()</code> Reload systemd daemon <code>systemd.remove_service(service)</code> Remove a service <code>systemd.list_services(opts)</code> List all services <code>systemd.show(service)</code> Show detailed service info"},{"location":"en/modules/systemd/#detailed-documentation","title":"\ud83d\udcd6 Detailed Documentation","text":""},{"location":"en/modules/systemd/#service-creation","title":"Service Creation","text":""},{"location":"en/modules/systemd/#systemdcreate_servicename-config","title":"<code>systemd.create_service(name, config)</code>","text":"<p>Creates a new systemd service file at <code>/etc/systemd/system/{name}.service</code>.</p> <p>Parameters: - <code>name</code> (string): Service name (without .service extension) - <code>config</code> (table): Service configuration</p> <p>Configuration Options:</p> <pre><code>{\n    -- [Unit] section\n    description = \"Service description\",\n    after = \"network.target\",\n    wants = \"other.service\",\n    requires = \"required.service\",\n\n    -- [Service] section (required)\n    exec_start = \"/path/to/executable\",\n    exec_stop = \"/path/to/stop/script\",\n    exec_reload = \"/path/to/reload/script\",\n    type = \"simple\",  -- simple, forking, oneshot, dbus, notify, idle\n    user = \"username\",\n    group = \"groupname\",\n    working_directory = \"/path/to/workdir\",\n    restart = \"always\",  -- no, on-success, on-failure, on-abnormal, on-abort, always\n    restart_sec = \"5s\",\n    environment = {\n        VAR1 = \"value1\",\n        VAR2 = \"value2\"\n    },\n\n    -- [Install] section\n    wanted_by = \"multi-user.target\"\n}\n</code></pre> <p>Returns: - <code>success</code> (boolean): <code>true</code> if service was created - <code>message</code> (string): Result message</p> <p>Examples:</p> Modern DSLWith delegate_to <pre><code>local systemd = require(\"systemd\")\n\nlocal create_web_service = task(\"create_web_service\")\n    :description(\"Create web application service\")\n    :command(function(this, params)\n        log.info(\"Creating web service...\")\n\n        local config = {\n            description = \"Web Application Server\",\n            after = \"network.target\",\n            exec_start = \"/usr/bin/node /app/server.js\",\n            type = \"simple\",\n            user = \"webapp\",\n            working_directory = \"/app\",\n            restart = \"always\",\n            restart_sec = \"10s\",\n            environment = {\n                NODE_ENV = \"production\",\n                PORT = \"3000\"\n            }\n        }\n\n        local success, msg = systemd.create_service(\"webapp\", config)\n\n        if success then\n            log.info(\"\u2705 Service created!\")\n            -- Reload daemon and enable\n            systemd.daemon_reload()\n            systemd.enable(\"webapp\")\n            systemd.start(\"webapp\")\n            return true, \"Service deployed\"\n        else\n            log.error(\"\u274c Failed: \" .. msg)\n            return false, msg\n        end\n    end)\n    :timeout(\"60s\")\n    :build()\n\nworkflow.define(\"deploy_service\")\n    :tasks({ create_web_service })\n</code></pre> <pre><code>local systemd = require(\"systemd\")\n\nlocal deploy_remote_service = task(\"deploy_remote_service\")\n    :description(\"Deploy service on remote agent\")\n    :command(function(this, params)\n        local config = {\n            description = \"Remote Monitoring Agent\",\n            after = \"network.target\",\n            exec_start = \"/opt/monitor/agent\",\n            type = \"simple\",\n            user = \"monitor\",\n            restart = \"always\"\n        }\n\n        local success, msg = systemd.create_service(\"monitor-agent\", config)\n\n        if success then\n            systemd.daemon_reload()\n            systemd.enable(\"monitor-agent\")\n            systemd.start(\"monitor-agent\")\n            log.info(\"\u2705 Deployed on \" .. (this.agent or \"local\"))\n            return true, \"OK\"\n        end\n\n        return false, \"Failed\"\n    end)\n    :delegate_to(\"production-server\")\n    :timeout(\"60s\")\n    :build()\n\nworkflow.define(\"remote_deploy\")\n    :tasks({ deploy_remote_service })\n</code></pre>"},{"location":"en/modules/systemd/#service-control","title":"Service Control","text":""},{"location":"en/modules/systemd/#systemdstartservice","title":"<code>systemd.start(service)</code>","text":"<p>Starts a systemd service.</p> <p>Parameters: - <code>service</code> (string): Service name</p> <p>Returns: - <code>success</code> (boolean), <code>output</code> (string)</p> <p>Example: <pre><code>local success, output = systemd.start(\"nginx\")\nif success then\n    log.info(\"\u2705 Nginx started\")\nend\n</code></pre></p>"},{"location":"en/modules/systemd/#systemdstopservice","title":"<code>systemd.stop(service)</code>","text":"<p>Stops a systemd service.</p> <p>Example: <pre><code>local success, output = systemd.stop(\"nginx\")\n</code></pre></p>"},{"location":"en/modules/systemd/#systemdrestartservice","title":"<code>systemd.restart(service)</code>","text":"<p>Restarts a systemd service.</p> <p>Example: <pre><code>local success, output = systemd.restart(\"nginx\")\n</code></pre></p>"},{"location":"en/modules/systemd/#systemdreloadservice","title":"<code>systemd.reload(service)</code>","text":"<p>Reloads a systemd service configuration without restarting.</p> <p>Example: <pre><code>local success, output = systemd.reload(\"nginx\")\n</code></pre></p>"},{"location":"en/modules/systemd/#service-status","title":"Service Status","text":""},{"location":"en/modules/systemd/#systemdstatusservice","title":"<code>systemd.status(service)</code>","text":"<p>Gets detailed status of a service.</p> <p>Returns: - <code>status</code> (string): Status output - <code>error</code> (string): Error message if any</p> <p>Example: <pre><code>local status, err = systemd.status(\"nginx\")\nlog.info(\"Status:\\n\" .. status)\n</code></pre></p>"},{"location":"en/modules/systemd/#systemdis_activeservice","title":"<code>systemd.is_active(service)</code>","text":"<p>Checks if a service is currently active/running.</p> <p>Returns: - <code>active</code> (boolean): <code>true</code> if active - <code>state</code> (string): Service state</p> <p>Example: <pre><code>local active, state = systemd.is_active(\"nginx\")\nif active then\n    log.info(\"\u2705 Service is running\")\nelse\n    log.warn(\"\u274c Service is \" .. state)\nend\n</code></pre></p>"},{"location":"en/modules/systemd/#systemdis_enabledservice","title":"<code>systemd.is_enabled(service)</code>","text":"<p>Checks if a service is enabled to start at boot.</p> <p>Returns: - <code>enabled</code> (boolean): <code>true</code> if enabled - <code>state</code> (string): Enable state</p> <p>Example: <pre><code>local enabled, state = systemd.is_enabled(\"nginx\")\n</code></pre></p>"},{"location":"en/modules/systemd/#service-management","title":"Service Management","text":""},{"location":"en/modules/systemd/#systemdenableservice","title":"<code>systemd.enable(service)</code>","text":"<p>Enables a service to start automatically at boot.</p> <p>Example: <pre><code>local success, output = systemd.enable(\"nginx\")\n</code></pre></p>"},{"location":"en/modules/systemd/#systemddisableservice","title":"<code>systemd.disable(service)</code>","text":"<p>Disables a service from starting at boot.</p> <p>Example: <pre><code>local success, output = systemd.disable(\"nginx\")\n</code></pre></p>"},{"location":"en/modules/systemd/#systemddaemon_reload","title":"<code>systemd.daemon_reload()</code>","text":"<p>Reloads systemd daemon configuration. Required after creating or modifying service files.</p> <p>Example: <pre><code>local success, output = systemd.daemon_reload()\n</code></pre></p>"},{"location":"en/modules/systemd/#systemdremove_serviceservice","title":"<code>systemd.remove_service(service)</code>","text":"<p>Removes a systemd service completely (stops, disables, and deletes the service file).</p> <p>Example: <pre><code>local success, msg = systemd.remove_service(\"old-service\")\n</code></pre></p>"},{"location":"en/modules/systemd/#service-information","title":"Service Information","text":""},{"location":"en/modules/systemd/#systemdlist_servicesoptions","title":"<code>systemd.list_services(options)</code>","text":"<p>Lists systemd services with optional filters.</p> <p>Parameters: - <code>options</code> (table, optional): Filter options   - <code>state</code>: Filter by state (e.g., \"active\", \"failed\", \"inactive\")   - <code>no_header</code>: Boolean, exclude header in output</p> <p>Returns: - <code>list</code> (string): Service list - <code>error</code> (string): Error if any</p> <p>Example: <pre><code>-- List all services\nlocal list, err = systemd.list_services()\nlog.info(list)\n\n-- List only active services\nlocal active, err = systemd.list_services({ state = \"active\" })\n\n-- List failed services without header\nlocal failed, err = systemd.list_services({ \n    state = \"failed\", \n    no_header = true \n})\n</code></pre></p>"},{"location":"en/modules/systemd/#systemdshowservice","title":"<code>systemd.show(service)</code>","text":"<p>Shows detailed properties of a service.</p> <p>Returns: - <code>info</code> (string): Detailed service information - <code>error</code> (string): Error if any</p> <p>Example: <pre><code>local info, err = systemd.show(\"nginx\")\nlog.info(\"Service details:\\n\" .. info)\n</code></pre></p>"},{"location":"en/modules/systemd/#complete-examples","title":"\ud83c\udfaf Complete Examples","text":""},{"location":"en/modules/systemd/#web-application-deployment","title":"Web Application Deployment","text":"<pre><code>local systemd = require(\"systemd\")\n\nlocal deploy_webapp = task(\"deploy_webapp\")\n    :description(\"Deploy and configure web application\")\n    :command(function(this, params)\n        log.info(\"\ud83d\ude80 Deploying web application...\")\n\n        -- Create service\n        local config = {\n            description = \"Node.js Web Application\",\n            after = \"network.target postgresql.service\",\n            requires = \"postgresql.service\",\n            exec_start = \"/usr/bin/node /var/www/app/server.js\",\n            exec_reload = \"/bin/kill -HUP $MAINPID\",\n            type = \"simple\",\n            user = \"webapp\",\n            group = \"webapp\",\n            working_directory = \"/var/www/app\",\n            restart = \"always\",\n            restart_sec = \"10s\",\n            environment = {\n                NODE_ENV = \"production\",\n                PORT = \"3000\",\n                DB_HOST = \"localhost\"\n            },\n            wanted_by = \"multi-user.target\"\n        }\n\n        local success, msg = systemd.create_service(\"webapp\", config)\n        if not success then\n            return false, \"Failed to create service: \" .. msg\n        end\n\n        log.info(\"\u2705 Service file created\")\n\n        -- Reload daemon\n        systemd.daemon_reload()\n        log.info(\"\u2705 Daemon reloaded\")\n\n        -- Enable and start\n        systemd.enable(\"webapp\")\n        log.info(\"\u2705 Service enabled\")\n\n        systemd.start(\"webapp\")\n        log.info(\"\u2705 Service started\")\n\n        -- Verify it's running\n        local active, state = systemd.is_active(\"webapp\")\n        if active then\n            log.info(\"\u2705 Service is running!\")\n            return true, \"Deployment successful\"\n        else\n            log.error(\"\u274c Service failed to start: \" .. state)\n            return false, \"Service not running\"\n        end\n    end)\n    :timeout(\"120s\")\n    :build()\n\nworkflow.define(\"deploy\")\n    :tasks({ deploy_webapp })\n</code></pre>"},{"location":"en/modules/systemd/#service-health-check","title":"Service Health Check","text":"<pre><code>local systemd = require(\"systemd\")\n\nlocal health_check = task(\"health_check\")\n    :description(\"Check critical services health\")\n    :command(function(this, params)\n        log.info(\"\ud83d\udd0d Health Check Starting...\")\n        log.info(string.rep(\"=\", 60))\n\n        local services = {\n            \"nginx\",\n            \"postgresql\",\n            \"redis\",\n            \"webapp\"\n        }\n\n        local all_healthy = true\n\n        for _, service in ipairs(services) do\n            local active, state = systemd.is_active(service)\n            local enabled, enable_state = systemd.is_enabled(service)\n\n            log.info(\"\\n\ud83d\udce6 \" .. service .. \":\")\n            log.info(\"  Active: \" .. (active and \"\u2705 YES\" or \"\u274c NO (\" .. state .. \")\"))\n            log.info(\"  Enabled: \" .. (enabled and \"\u2705 YES\" or \"\u26a0\ufe0f  NO\"))\n\n            if not active then\n                all_healthy = false\n                log.warn(\"  \u26a0\ufe0f  Service is not running!\")\n            end\n        end\n\n        log.info(\"\\n\" .. string.rep(\"=\", 60))\n\n        if all_healthy then\n            log.info(\"\u2705 All services healthy\")\n            return true, \"All OK\"\n        else\n            log.error(\"\u274c Some services are down\")\n            return false, \"Services down\"\n        end\n    end)\n    :timeout(\"60s\")\n    :build()\n\nworkflow.define(\"health_check\")\n    :tasks({ health_check })\n</code></pre>"},{"location":"en/modules/systemd/#distributed-service-management","title":"Distributed Service Management","text":"<pre><code>local systemd = require(\"systemd\")\n\nlocal restart_all_servers = task(\"restart_nginx\")\n    :description(\"Restart nginx on all servers\")\n    :command(function(this, params)\n        log.info(\"\ud83d\udd04 Restarting nginx...\")\n\n        local success, output = systemd.restart(\"nginx\")\n\n        if success then\n            -- Wait a bit for restart\n            os.execute(\"sleep 2\")\n\n            -- Verify it's running\n            local active, state = systemd.is_active(\"nginx\")\n            if active then\n                log.info(\"\u2705 Nginx restarted on \" .. (this.agent or \"local\"))\n                return true, \"OK\"\n            else\n                log.error(\"\u274c Nginx failed to start: \" .. state)\n                return false, \"Failed\"\n            end\n        end\n\n        return false, \"Restart failed\"\n    end)\n    :delegate_to(\"web-server-1\")\n    :timeout(\"60s\")\n    :build()\n\nworkflow.define(\"rolling_restart\")\n    :tasks({ restart_all_servers })\n</code></pre>"},{"location":"en/modules/systemd/#service-monitoring","title":"Service Monitoring","text":"<pre><code>local systemd = require(\"systemd\")\n\nlocal monitor_services = task(\"monitor_services\")\n    :description(\"Monitor and report service status\")\n    :command(function(this, params)\n        log.info(\"\ud83d\udcca Service Monitoring Report\")\n        log.info(string.rep(\"=\", 60))\n\n        -- List all failed services\n        local failed, _ = systemd.list_services({ \n            state = \"failed\",\n            no_header = true \n        })\n\n        if failed and failed ~= \"\" then\n            log.warn(\"\\n\u26a0\ufe0f  Failed Services:\")\n            log.warn(failed)\n        else\n            log.info(\"\\n\u2705 No failed services\")\n        end\n\n        -- List active services count\n        local active, _ = systemd.list_services({ \n            state = \"active\",\n            no_header = true \n        })\n\n        if active then\n            local count = 0\n            for _ in active:gmatch(\"[^\\r\\n]+\") do\n                count = count + 1\n            end\n            log.info(\"\\n\ud83d\udcca Active services: \" .. count)\n        end\n\n        log.info(\"\\n\" .. string.rep(\"=\", 60))\n        return true, \"Report complete\"\n    end)\n    :timeout(\"60s\")\n    :build()\n\nworkflow.define(\"monitor\")\n    :tasks({ monitor_services })\n</code></pre>"},{"location":"en/modules/systemd/#service-update-workflow","title":"Service Update Workflow","text":"<pre><code>local systemd = require(\"systemd\")\n\nlocal update_service = task(\"update_service\")\n    :description(\"Update service configuration\")\n    :command(function(this, params)\n        local service_name = \"webapp\"\n\n        log.info(\"\ud83d\udd04 Updating \" .. service_name .. \"...\")\n\n        -- Check if running\n        local was_active, _ = systemd.is_active(service_name)\n\n        -- Stop if running\n        if was_active then\n            log.info(\"Stopping service...\")\n            systemd.stop(service_name)\n        end\n\n        -- Update service configuration\n        local new_config = {\n            description = \"Updated Web Application\",\n            after = \"network.target\",\n            exec_start = \"/usr/bin/node /app/server.js\",\n            type = \"simple\",\n            user = \"webapp\",\n            working_directory = \"/app\",\n            restart = \"always\",\n            environment = {\n                NODE_ENV = \"production\",\n                PORT = \"3000\",\n                VERSION = \"2.0\"  -- New version\n            }\n        }\n\n        systemd.create_service(service_name, new_config)\n        systemd.daemon_reload()\n\n        -- Start if it was running before\n        if was_active then\n            log.info(\"Starting service...\")\n            systemd.start(service_name)\n\n            -- Verify\n            local active, _ = systemd.is_active(service_name)\n            if active then\n                log.info(\"\u2705 Service updated and running\")\n                return true, \"Updated\"\n            end\n        end\n\n        return true, \"Configuration updated\"\n    end)\n    :timeout(\"120s\")\n    :build()\n\nworkflow.define(\"update\")\n    :tasks({ update_service })\n</code></pre>"},{"location":"en/modules/systemd/#best-practices","title":"\ud83d\ude80 Best Practices","text":"<ol> <li> <p>Always reload daemon after creating/modifying services: <pre><code>systemd.create_service(\"myservice\", config)\nsystemd.daemon_reload()\n</code></pre></p> </li> <li> <p>Verify service started successfully: <pre><code>systemd.start(\"myservice\")\nlocal active, state = systemd.is_active(\"myservice\")\nif not active then\n    log.error(\"Service failed: \" .. state)\nend\n</code></pre></p> </li> <li> <p>Enable services for persistence: <pre><code>systemd.enable(\"myservice\")  -- Start at boot\n</code></pre></p> </li> <li> <p>Use proper service types:</p> </li> <li><code>simple</code>: Default, process doesn't fork</li> <li><code>forking</code>: Process forks and parent exits</li> <li><code>oneshot</code>: Process exits before systemd continues</li> <li> <p><code>notify</code>: Process sends notification when ready</p> </li> <li> <p>Set restart policies: <pre><code>restart = \"always\"  -- Always restart\nrestart_sec = \"10s\"  -- Wait 10s between restarts\n</code></pre></p> </li> <li> <p>Use delegate_to for distributed management: <pre><code>:delegate_to(\"server-name\")\n</code></pre></p> </li> </ol>"},{"location":"en/modules/systemd/#security-considerations","title":"\u26a0\ufe0f Security Considerations","text":"<ul> <li>Service files are created in <code>/etc/systemd/system/</code> (requires root/sudo)</li> <li>Always specify <code>user</code> and <code>group</code> to avoid running as root</li> <li>Use <code>WorkingDirectory</code> to isolate service environment</li> <li>Validate environment variables before setting them</li> <li>Use proper file permissions (0644 for service files)</li> </ul>"},{"location":"en/modules/systemd/#platform-support","title":"\ud83d\udc27 Platform Support","text":"<ul> <li>Linux: Full support (systemd-based distributions)</li> <li>Ubuntu/Debian: \u2705 Supported</li> <li>CentOS/RHEL: \u2705 Supported</li> <li>Fedora: \u2705 Supported</li> <li>Arch Linux: \u2705 Supported</li> <li>macOS: \u274c Not supported (use launchd instead)</li> <li>Windows: \u274c Not supported (use sc.exe or nssm)</li> </ul>"},{"location":"en/modules/systemd/#see-also","title":"\ud83d\udd17 See Also","text":"<ul> <li>exec Module - For running custom systemctl commands</li> <li>Modern DSL Guide - DSL syntax reference</li> <li>Distributed Agents - Remote execution with delegate_to</li> <li>Official systemd documentation</li> </ul>"},{"location":"en/modules/terraform/","title":"Terraform Module","text":"<p>The <code>terraform</code> module provides a high-level interface for orchestrating <code>terraform</code> CLI commands, allowing you to manage your infrastructure lifecycle directly from within a Sloth-Runner pipeline.</p>"},{"location":"en/modules/terraform/#configuration","title":"Configuration","text":"<p>This module requires the <code>terraform</code> CLI to be installed and available in the system's PATH. All commands must be executed within a specific <code>workdir</code> where your <code>.tf</code> files are located.</p>"},{"location":"en/modules/terraform/#functions","title":"Functions","text":""},{"location":"en/modules/terraform/#terraforminitparams","title":"<code>terraform.init(params)</code>","text":"<p>Initializes a Terraform working directory.</p> <ul> <li><code>params</code> (table):<ul> <li><code>workdir</code> (string): Required. The path to the directory containing the Terraform files.</li> </ul> </li> <li>Returns: A result table with <code>success</code>, <code>stdout</code>, <code>stderr</code>, and <code>exit_code</code>.</li> </ul>"},{"location":"en/modules/terraform/#terraformplanparams","title":"<code>terraform.plan(params)</code>","text":"<p>Creates a Terraform execution plan.</p> <ul> <li><code>params</code> (table):<ul> <li><code>workdir</code> (string): Required. The path to the directory.</li> <li><code>out</code> (string): Optional. The filename to save the generated plan to.</li> </ul> </li> <li>Returns: A result table.</li> </ul>"},{"location":"en/modules/terraform/#terraformapplyparams","title":"<code>terraform.apply(params)</code>","text":"<p>Applies a Terraform plan.</p> <ul> <li><code>params</code> (table):<ul> <li><code>workdir</code> (string): Required. The path to the directory.</li> <li><code>plan</code> (string): Optional. The path to a plan file to apply.</li> <li><code>auto_approve</code> (boolean): Optional. If <code>true</code>, applies changes without interactive approval.</li> </ul> </li> <li>Returns: A result table.</li> </ul>"},{"location":"en/modules/terraform/#terraformdestroyparams","title":"<code>terraform.destroy(params)</code>","text":"<p>Destroys Terraform-managed infrastructure.</p> <ul> <li><code>params</code> (table):<ul> <li><code>workdir</code> (string): Required. The path to the directory.</li> <li><code>auto_approve</code> (boolean): Optional. If <code>true</code>, destroys resources without interactive approval.</li> </ul> </li> <li>Returns: A result table.</li> </ul>"},{"location":"en/modules/terraform/#terraformoutputparams","title":"<code>terraform.output(params)</code>","text":"<p>Reads an output variable from a Terraform state file.</p> <ul> <li><code>params</code> (table):<ul> <li><code>workdir</code> (string): Required. The path to the directory.</li> <li><code>name</code> (string): Optional. The name of a specific output to read. If omitted, all outputs are returned as a table.</li> </ul> </li> <li>Returns:<ul> <li>On success: The parsed JSON value of the output (can be a string, table, etc.).</li> <li>On failure: <code>nil, error_message</code>.</li> </ul> </li> </ul>"},{"location":"en/modules/terraform/#full-lifecycle-example","title":"Full Lifecycle Example","text":"<pre><code>local tf_workdir = \"./examples/terraform\"\n\n-- Task 1: Init\nlocal result_init = terraform.init({workdir = tf_workdir})\nif not result_init.success then return false, \"Init failed\" end\n\n-- Task 2: Plan\nlocal result_plan = terraform.plan({workdir = tf_workdir})\nif not result_plan.success then return false, \"Plan failed\" end\n\n-- Task 3: Apply\nlocal result_apply = terraform.apply({workdir = tf_workdir, auto_approve = true})\nif not result_apply.success then return false, \"Apply failed\" end\n\n-- Task 4: Get Output\nlocal filename, err = terraform.output({workdir = tf_workdir, name = \"report_filename\"})\nif not filename then return false, \"Output failed: \" .. err end\nlog.info(\"Terraform created file: \" .. filename)\n\n-- Task 5: Destroy\nlocal result_destroy = terraform.destroy({workdir = tf_workdir, auto_approve = true})\nif not result_destroy.success then return false, \"Destroy failed\" end\n</code></pre>"},{"location":"modern-dsl/","title":"\ud83c\udfa8 Modern DSL - Sloth Runner","text":"<p>Welcome to the Sloth Runner Modern DSL documentation!</p>"},{"location":"modern-dsl/#overview","title":"Overview","text":"<p>Sloth Runner uses a modern, expressive DSL (Domain Specific Language) based on Lua that makes it easy to define workflows, tasks, and orchestrate complex operations.</p>"},{"location":"modern-dsl/#key-features","title":"Key Features","text":"<ul> <li>\ud83d\udd04 Chainable API - Fluent, readable syntax</li> <li>\ud83c\udfaf Type Safety - Clear error messages</li> <li>\ud83e\udde9 Modular Design - Reusable components</li> <li>\ud83d\udce6 Rich Standard Library - Built-in modules for common tasks</li> <li>\ud83c\udf10 Distributed Execution - Native support for distributed workflows</li> <li>\ud83d\udcbe State Management - Persistent state across runs</li> <li>\ud83d\udcca Stack Management - Pulumi-style stack support</li> </ul>"},{"location":"modern-dsl/#quick-example","title":"Quick Example","text":"<pre><code>-- Define a simple task\nlocal build_task = task(\"build\")\n    :description(\"Build the application\")\n    :command(function(params, deps)\n        local exec = require(\"exec\")\n        local result = exec.run(\"go build -o app ./cmd\")\n        return result.success, result.stdout\n    end)\n    :timeout(\"5m\")\n    :retries(3)\n    :build()\n\n-- Create a workflow\nworkflow.define(\"my_workflow\", {\n    description = \"My first workflow\",\n    version = \"1.0.0\",\n    tasks = { build_task }\n})\n</code></pre>"},{"location":"modern-dsl/#documentation-sections","title":"Documentation Sections","text":""},{"location":"modern-dsl/#getting-started","title":"\ud83d\udcd6 Getting Started","text":"<ul> <li>Introduction - Start here to learn the basics</li> <li>Best Practices - Learn how to write effective workflows</li> <li>Reference Guide - Complete API reference</li> </ul>"},{"location":"modern-dsl/#core-concepts","title":"\ud83d\udd27 Core Concepts","text":""},{"location":"modern-dsl/#tasks","title":"Tasks","text":"<p>Tasks are the building blocks of workflows. They define individual units of work.</p> <pre><code>local my_task = task(\"task_name\")\n    :description(\"What this task does\")\n    :command(function(params, deps)\n        -- Your code here\n        return true  -- success\n    end)\n    :build()\n</code></pre>"},{"location":"modern-dsl/#workflows","title":"Workflows","text":"<p>Workflows orchestrate multiple tasks with dependencies.</p> <pre><code>workflow.define(\"workflow_name\", {\n    description = \"Workflow description\",\n    tasks = { task1, task2, task3 },\n    on_success = function(results)\n        print(\"Success!\")\n    end\n})\n</code></pre>"},{"location":"modern-dsl/#dependencies","title":"Dependencies","text":"<p>Tasks can depend on other tasks:</p> <pre><code>local test_task = task(\"test\")\n    :depends_on({\"build\"})  -- Runs after build\n    :command(function(params, deps)\n        local build_result = deps.build\n        -- Use build result\n    end)\n    :build()\n</code></pre>"},{"location":"modern-dsl/#built-in-modules","title":"\ud83d\udce6 Built-in Modules","text":"<p>Sloth Runner provides a rich set of built-in modules:</p> <ul> <li>exec - Execute commands</li> <li>fs - File system operations</li> <li>net - Network operations</li> <li>log - Logging</li> <li>state - State management</li> <li>metrics - Metrics collection</li> </ul> <p>See all modules</p>"},{"location":"modern-dsl/#common-patterns","title":"\ud83c\udfaf Common Patterns","text":""},{"location":"modern-dsl/#error-handling","title":"Error Handling","text":"<pre><code>:command(function()\n    local success, error = pcall(function()\n        -- Your code\n    end)\n    return success, error\nend)\n</code></pre>"},{"location":"modern-dsl/#conditional-execution","title":"Conditional Execution","text":"<pre><code>:condition(function(params)\n    return params.environment == \"production\"\nend)\n</code></pre>"},{"location":"modern-dsl/#callbacks","title":"Callbacks","text":"<pre><code>:on_success(function(params, output)\n    log.info(\"Task succeeded!\")\nend)\n:on_failure(function(params, error)\n    log.error(\"Task failed: \" .. error)\nend)\n</code></pre>"},{"location":"modern-dsl/#advanced-features","title":"Advanced Features","text":""},{"location":"modern-dsl/#stack-management","title":"\ud83d\uddc2\ufe0f Stack Management","text":"<pre><code>-- Use stacks for environment isolation\nsloth-runner stack run -f workflow.sloth --stack production\n</code></pre>"},{"location":"modern-dsl/#distributed-execution","title":"\ud83c\udf10 Distributed Execution","text":"<pre><code>local remote_task = task(\"remote_work\")\n    :agent(\"worker-01\")\n    :run_on(\"remote_cluster\")\n    :command(function()\n        -- Runs on remote agent\n    end)\n    :build()\n</code></pre>"},{"location":"modern-dsl/#output-formats","title":"\ud83d\udcca Output Formats","text":"<pre><code># Enhanced output with emojis\nsloth-runner run -f workflow.sloth --output enhanced\n\n# JSON output for automation\nsloth-runner run -f workflow.sloth --output json\n\n# Modern styled output\nsloth-runner run -f workflow.sloth --output modern\n</code></pre>"},{"location":"modern-dsl/#examples","title":"Examples","text":""},{"location":"modern-dsl/#cicd-pipeline","title":"CI/CD Pipeline","text":"<p>See CI/CD Example</p>"},{"location":"modern-dsl/#infrastructure-as-code","title":"Infrastructure as Code","text":"<p>See IaC Example</p>"},{"location":"modern-dsl/#multi-cloud-deployment","title":"Multi-Cloud Deployment","text":"<p>See Multi-Cloud Example</p>"},{"location":"modern-dsl/#learn-more","title":"Learn More","text":"<ul> <li>Core Concepts</li> <li>Advanced Features</li> <li>Examples</li> <li>Lua API Reference</li> </ul>"},{"location":"modern-dsl/#community-support","title":"Community &amp; Support","text":"<ul> <li>\ud83d\udcda Documentation Home</li> <li>\ud83d\udc1b Report Issues</li> <li>\ud83d\udcac Discussions</li> </ul> <p>Ready to get started? Check out the Introduction!</p>"},{"location":"modern-dsl/best-practices/","title":"\ud83d\udcdd Modern DSL Best Practices","text":"<p>This guide provides best practices, patterns, and recommendations for writing effective workflows using the Modern DSL.</p>"},{"location":"modern-dsl/best-practices/#general-principles","title":"\ud83c\udfaf General Principles","text":""},{"location":"modern-dsl/best-practices/#1-clear-and-descriptive-naming","title":"1. Clear and Descriptive Naming","text":"<pre><code>-- \u274c Poor naming\nlocal t1 = task(\"t1\"):command(\"npm run build\"):build()\nlocal t2 = task(\"t2\"):command(\"npm test\"):build()\n\n-- \u2705 Good naming\nlocal build_frontend = task(\"build_frontend\")\n    :description(\"Build React frontend application\")\n    :command(\"npm run build:frontend\")\n    :build()\n\nlocal run_unit_tests = task(\"run_unit_tests\")\n    :description(\"Execute Jest unit test suite\")\n    :command(\"npm run test:unit\")\n    :build()\n</code></pre>"},{"location":"modern-dsl/best-practices/#2-comprehensive-documentation","title":"2. Comprehensive Documentation","text":"<pre><code>local deploy_to_production = task(\"deploy_to_production\")\n    :description(\"Deploy application to production Kubernetes cluster with health checks\")\n    :command(function(params, deps)\n        -- Deploy using helm with production values\n        local result = exec.run(\"helm upgrade --install myapp ./charts/myapp -f values.prod.yaml\")\n\n        if not result.success then\n            return false, \"Helm deployment failed: \" .. result.stderr\n        end\n\n        -- Verify deployment health\n        local health_check = k8s.wait_for_pods(\"app=myapp\", \"5m\")\n        if not health_check.ready then\n            return false, \"Pods not ready within timeout\"\n        end\n\n        return true, \"Production deployment successful\", {\n            release_name = \"myapp\",\n            pods_ready = health_check.count,\n            deployment_time = os.time()\n        }\n    end)\n    :metadata({\n        owner = \"platform-team\",\n        runbook = \"https://runbooks.company.com/production-deploy\",\n        escalation = \"platform-oncall@company.com\"\n    })\n    :build()\n</code></pre>"},{"location":"modern-dsl/best-practices/#3-consistent-error-handling","title":"3. Consistent Error Handling","text":"<pre><code>local process_data_task = task(\"process_data\")\n    :description(\"Process incoming data with comprehensive error handling\")\n    :command(function(params, deps)\n        local input_data = deps.fetch_data.result\n\n        -- Validate input\n        if not input_data or #input_data == 0 then\n            return false, \"No input data received from fetch_data task\"\n        end\n\n        -- Process with error handling\n        local success, result, error = pcall(function()\n            return data_processor.process(input_data, {\n                format = params.output_format or \"json\",\n                validation = true,\n                sanitize = true\n            })\n        end)\n\n        if not success then\n            return false, \"Data processing failed: \" .. (error or \"unknown error\")\n        end\n\n        -- Validate output\n        if not result or not result.processed_count then\n            return false, \"Processing completed but output validation failed\"\n        end\n\n        log.info(\"Successfully processed \" .. result.processed_count .. \" records\")\n\n        return true, \"Data processing completed\", {\n            processed_count = result.processed_count,\n            output_file = result.output_file,\n            processing_time = result.duration\n        }\n    end)\n    :timeout(\"30m\")\n    :retries(2, \"exponential\")\n    :on_failure(function(params, error)\n        log.error(\"Data processing failed: \" .. error)\n\n        -- Send detailed failure notification\n        notifications.send(\"slack\", {\n            channel = \"#data-alerts\",\n            message = \"\ud83d\udea8 Data processing pipeline failed\\n\" ..\n                     \"Error: \" .. error .. \"\\n\" ..\n                     \"Input size: \" .. (params.input_size or \"unknown\") .. \"\\n\" ..\n                     \"Runbook: https://runbooks.company.com/data-processing\"\n        })\n    end)\n    :build()\n</code></pre>"},{"location":"modern-dsl/best-practices/#task-design-patterns","title":"\ud83c\udfd7\ufe0f Task Design Patterns","text":""},{"location":"modern-dsl/best-practices/#pattern-1-idempotent-tasks","title":"Pattern 1: Idempotent Tasks","text":"<p>Design tasks that can be safely re-run:</p> <pre><code>local setup_database = task(\"setup_database\")\n    :description(\"Idempotent database setup with migration support\")\n    :command(function(params)\n        -- Check if database exists\n        local db_exists = database.exists(params.database_name)\n\n        if not db_exists then\n            log.info(\"Creating database: \" .. params.database_name)\n            local create_result = database.create(params.database_name)\n            if not create_result.success then\n                return false, \"Failed to create database: \" .. create_result.error\n            end\n        else\n            log.info(\"Database already exists: \" .. params.database_name)\n        end\n\n        -- Run migrations (idempotent)\n        log.info(\"Running database migrations...\")\n        local migrate_result = database.migrate(params.database_name, {\n            migrations_path = \"./migrations\",\n            target_version = params.target_version\n        })\n\n        if not migrate_result.success then\n            return false, \"Migration failed: \" .. migrate_result.error\n        end\n\n        return true, \"Database setup completed\", {\n            database_name = params.database_name,\n            current_version = migrate_result.current_version,\n            migrations_applied = migrate_result.applied_count\n        }\n    end)\n    :retries(3, \"exponential\")\n    :build()\n</code></pre>"},{"location":"modern-dsl/best-practices/#pattern-2-circuit-breaker-for-external-services","title":"Pattern 2: Circuit Breaker for External Services","text":"<pre><code>local call_external_api = task(\"call_external_api\")\n    :description(\"Call external API with circuit breaker protection\")\n    :command(function(params)\n        -- Use circuit breaker for external API calls\n        local api_result = circuit.protect(\"payment_api\", function()\n            return net.http_post(\"https://api.payment.com/process\", {\n                headers = {\n                    [\"Authorization\"] = \"Bearer \" .. utils.secret(\"payment_api_token\"),\n                    [\"Content-Type\"] = \"application/json\"\n                },\n                body = data.to_json(params.payment_data),\n                timeout = \"10s\"\n            })\n        end, {\n            failure_threshold = 5,\n            recovery_timeout = \"30s\",\n            half_open_max_calls = 3\n        })\n\n        if not api_result.success then\n            -- Circuit might be open\n            if api_result.circuit_open then\n                return false, \"Payment API circuit breaker is open - service unavailable\"\n            else\n                return false, \"Payment API call failed: \" .. api_result.error\n            end\n        end\n\n        -- Validate API response\n        if api_result.status_code ~= 200 then\n            return false, \"Payment API returned error: \" .. api_result.status_code\n        end\n\n        local response_data = data.parse_json(api_result.body)\n        if not response_data.transaction_id then\n            return false, \"Invalid response from payment API - missing transaction_id\"\n        end\n\n        return true, \"Payment processed successfully\", {\n            transaction_id = response_data.transaction_id,\n            amount = response_data.amount,\n            status = response_data.status\n        }\n    end)\n    :timeout(\"30s\")\n    :retries(3, \"exponential\")\n    :build()\n</code></pre>"},{"location":"modern-dsl/best-practices/#pattern-3-parallel-processing-with-aggregation","title":"Pattern 3: Parallel Processing with Aggregation","text":"<pre><code>local parallel_data_processing = task(\"parallel_data_processing\")\n    :description(\"Process data in parallel and aggregate results\")\n    :command(function(params, deps)\n        local input_files = deps.prepare_data.file_list\n\n        log.info(\"Processing \" .. #input_files .. \" files in parallel...\")\n\n        -- Process files in parallel\n        local results = async.parallel(\n            table.map(input_files, function(file)\n                return function()\n                    return data_processor.process_file(file, {\n                        format = params.output_format,\n                        validation = true\n                    })\n                end\n            end),\n            {\n                max_workers = params.max_workers or 4,\n                timeout = \"20m\",\n                fail_fast = false  -- Process all files even if some fail\n            }\n        )\n\n        -- Aggregate results\n        local successful_files = {}\n        local failed_files = {}\n        local total_records = 0\n\n        for i, result in ipairs(results) do\n            if result.success then\n                table.insert(successful_files, {\n                    file = input_files[i],\n                    records = result.record_count\n                })\n                total_records = total_records + result.record_count\n            else\n                table.insert(failed_files, {\n                    file = input_files[i],\n                    error = result.error\n                })\n            end\n        end\n\n        -- Report results\n        log.info(\"Processing completed:\")\n        log.info(\"  Successful files: \" .. #successful_files)\n        log.info(\"  Failed files: \" .. #failed_files)\n        log.info(\"  Total records processed: \" .. total_records)\n\n        if #failed_files &gt; 0 then\n            log.warn(\"Some files failed to process:\")\n            for _, failed in ipairs(failed_files) do\n                log.warn(\"  \" .. failed.file .. \": \" .. failed.error)\n            end\n        end\n\n        -- Decide if task should succeed or fail\n        local success_rate = #successful_files / #input_files\n        if success_rate &lt; (params.min_success_rate or 0.8) then\n            return false, \"Processing failed - success rate \" .. \n                   string.format(\"%.1f%%\", success_rate * 100) .. \n                   \" below threshold\"\n        end\n\n        return true, \"Parallel processing completed\", {\n            total_files = #input_files,\n            successful_files = #successful_files,\n            failed_files = #failed_files,\n            total_records = total_records,\n            success_rate = success_rate\n        }\n    end)\n    :timeout(\"30m\")\n    :depends_on({\"prepare_data\"})\n    :build()\n</code></pre>"},{"location":"modern-dsl/best-practices/#workflow-design-patterns","title":"\ud83d\udd04 Workflow Design Patterns","text":""},{"location":"modern-dsl/best-practices/#pattern-1-multi-environment-deployment","title":"Pattern 1: Multi-Environment Deployment","text":"<pre><code>local deploy_to_environment = function(environment)\n    return task(\"deploy_to_\" .. environment)\n        :description(\"Deploy application to \" .. environment .. \" environment\")\n        :command(function(params, deps)\n            local build_info = deps.build_application\n\n            log.info(\"Deploying to \" .. environment .. \" environment...\")\n\n            -- Environment-specific configuration\n            local env_config = {\n                staging = {\n                    replicas = 2,\n                    resources = {cpu = \"100m\", memory = \"256Mi\"},\n                    ingress = \"staging.example.com\"\n                },\n                production = {\n                    replicas = 5,\n                    resources = {cpu = \"500m\", memory = \"1Gi\"},\n                    ingress = \"api.example.com\"\n                }\n            }\n\n            local config = env_config[environment]\n            if not config then\n                return false, \"Unknown environment: \" .. environment\n            end\n\n            -- Deploy with environment-specific settings\n            local deploy_result = k8s.deploy({\n                image = build_info.image_tag,\n                namespace = environment,\n                replicas = config.replicas,\n                resources = config.resources,\n                ingress_host = config.ingress\n            })\n\n            if not deploy_result.success then\n                return false, \"Deployment to \" .. environment .. \" failed: \" .. deploy_result.error\n            end\n\n            -- Environment-specific health checks\n            local health_timeout = environment == \"production\" and \"10m\" or \"5m\"\n            local health_check = k8s.wait_for_rollout({\n                deployment = \"myapp\",\n                namespace = environment,\n                timeout = health_timeout\n            })\n\n            if not health_check.ready then\n                return false, \"Health check failed for \" .. environment .. \" deployment\"\n            end\n\n            return true, \"Successfully deployed to \" .. environment, {\n                environment = environment,\n                replicas_ready = health_check.ready_replicas,\n                deployment_time = os.time(),\n                endpoint = \"https://\" .. config.ingress\n            }\n        end)\n        :condition(when(\"params.deploy_\" .. environment .. \" == true\"))\n        :timeout(environment == \"production\" and \"20m\" or \"10m\")\n        :retries(environment == \"production\" and 1 or 2)\n        :build()\nend\n\n-- Define environment-specific workflows\nworkflow.define(\"deploy_pipeline\", {\n    description = \"Multi-environment deployment pipeline\",\n    version = \"2.0.0\",\n\n    tasks = {\n        build_application,\n        run_tests,\n        deploy_to_environment(\"staging\"),\n        deploy_to_environment(\"production\")\n    },\n\n    config = {\n        timeout = \"1h\",\n        max_parallel_tasks = 2\n    }\n})\n</code></pre>"},{"location":"modern-dsl/best-practices/#pattern-2-blue-green-deployment","title":"Pattern 2: Blue-Green Deployment","text":"<pre><code>local blue_green_deployment = task(\"blue_green_deploy\")\n    :description(\"Blue-green deployment with automatic rollback\")\n    :command(function(params, deps)\n        local build_info = deps.build_application\n        local current_env = k8s.get_active_environment(\"myapp\")\n        local target_env = current_env == \"blue\" and \"green\" or \"blue\"\n\n        log.info(\"Current active environment: \" .. current_env)\n        log.info(\"Deploying to target environment: \" .. target_env)\n\n        -- Deploy to target environment\n        local deploy_result = k8s.deploy({\n            image = build_info.image_tag,\n            environment = target_env,\n            namespace = \"production\",\n            replicas = 3\n        })\n\n        if not deploy_result.success then\n            return false, \"Deployment to \" .. target_env .. \" failed: \" .. deploy_result.error\n        end\n\n        -- Wait for deployment to be ready\n        local health_check = k8s.wait_for_rollout({\n            deployment = \"myapp-\" .. target_env,\n            namespace = \"production\",\n            timeout = \"10m\"\n        })\n\n        if not health_check.ready then\n            return false, \"Target environment \" .. target_env .. \" not ready\"\n        end\n\n        -- Run smoke tests against target environment\n        local smoke_tests = testing.run_smoke_tests({\n            endpoint = \"http://myapp-\" .. target_env .. \":8080\",\n            timeout = \"5m\"\n        })\n\n        if not smoke_tests.passed then\n            log.error(\"Smoke tests failed, keeping current environment active\")\n            return false, \"Smoke tests failed: \" .. smoke_tests.error\n        end\n\n        -- Switch traffic to new environment\n        log.info(\"Switching traffic from \" .. current_env .. \" to \" .. target_env)\n        local switch_result = k8s.switch_traffic({\n            service = \"myapp\",\n            from_env = current_env,\n            to_env = target_env\n        })\n\n        if not switch_result.success then\n            return false, \"Traffic switch failed: \" .. switch_result.error\n        end\n\n        -- Wait and verify new environment is stable\n        sleep(30)  -- Allow some traffic to flow\n\n        local stability_check = monitoring.check_stability({\n            service = \"myapp\",\n            environment = target_env,\n            duration = \"2m\",\n            error_rate_threshold = 0.01\n        })\n\n        if not stability_check.stable then\n            log.error(\"New environment unstable, rolling back...\")\n\n            -- Rollback traffic\n            k8s.switch_traffic({\n                service = \"myapp\",\n                from_env = target_env,\n                to_env = current_env\n            })\n\n            return false, \"Deployment unstable, rolled back: \" .. stability_check.reason\n        end\n\n        -- Success - clean up old environment\n        log.info(\"Deployment successful, cleaning up old environment\")\n        k8s.scale_down({\n            deployment = \"myapp-\" .. current_env,\n            replicas = 0\n        })\n\n        return true, \"Blue-green deployment completed successfully\", {\n            previous_env = current_env,\n            current_env = target_env,\n            deployment_time = os.time(),\n            image_deployed = build_info.image_tag\n        }\n    end)\n    :depends_on({\"build_application\", \"run_tests\"})\n    :timeout(\"30m\")\n    :on_failure(function(params, error)\n        log.error(\"Blue-green deployment failed: \" .. error)\n\n        -- Send critical alert\n        alerts.send(\"pagerduty\", {\n            severity = \"critical\",\n            summary = \"Blue-green deployment failed\",\n            details = error,\n            runbook = \"https://runbooks.company.com/blue-green-rollback\"\n        })\n    end)\n    :build()\n</code></pre>"},{"location":"modern-dsl/best-practices/#monitoring-and-observability-best-practices","title":"\ud83d\udcca Monitoring and Observability Best Practices","text":""},{"location":"modern-dsl/best-practices/#1-comprehensive-metrics-collection","title":"1. Comprehensive Metrics Collection","text":"<pre><code>workflow.define(\"monitored_pipeline\", {\n    description = \"Pipeline with comprehensive monitoring\",\n    version = \"2.0.0\",\n\n    tasks = { build_task, test_task, deploy_task },\n\n    config = {\n        monitoring = {\n            metrics = {\n                enabled = true,\n                custom_metrics = {\n                    \"pipeline_duration_seconds\",\n                    \"build_size_bytes\", \n                    \"test_coverage_percentage\",\n                    \"deployment_success_rate\"\n                }\n            },\n\n            alerts = {\n                enabled = true,\n                rules = {\n                    {\n                        name = \"pipeline_duration_high\",\n                        condition = \"pipeline_duration_seconds &gt; 1800\",  -- 30 minutes\n                        severity = \"warning\",\n                        message = \"Pipeline taking longer than expected\"\n                    },\n                    {\n                        name = \"deployment_failure_rate_high\",\n                        condition = \"deployment_success_rate &lt; 0.95\",\n                        severity = \"critical\",\n                        message = \"Deployment success rate below 95%\"\n                    }\n                }\n            }\n        }\n    },\n\n    on_start = function()\n        metrics.start_timer(\"pipeline_duration\")\n        metrics.increment(\"pipeline_starts_total\")\n        return true\n    end,\n\n    on_complete = function(success, results)\n        local duration = metrics.stop_timer(\"pipeline_duration\")\n\n        metrics.record_gauge(\"pipeline_duration_seconds\", duration)\n\n        if success then\n            metrics.increment(\"pipeline_success_total\")\n        else\n            metrics.increment(\"pipeline_failure_total\")\n        end\n\n        return true\n    end\n})\n</code></pre>"},{"location":"modern-dsl/best-practices/#2-structured-logging","title":"2. Structured Logging","text":"<pre><code>local structured_logging_task = task(\"process_with_logging\")\n    :description(\"Task with comprehensive structured logging\")\n    :command(function(params)\n        local correlation_id = utils.uuid()\n\n        log.info(\"Starting data processing\", {\n            correlation_id = correlation_id,\n            input_size = params.input_size,\n            processing_mode = params.mode,\n            timestamp = os.time()\n        })\n\n        -- Processing with progress logging\n        local total_items = params.input_size\n        local processed_items = 0\n\n        for i = 1, total_items do\n            -- Process item\n            local item_result = process_item(i)\n            processed_items = processed_items + 1\n\n            -- Log progress every 1000 items\n            if i % 1000 == 0 then\n                log.info(\"Processing progress\", {\n                    correlation_id = correlation_id,\n                    processed_items = processed_items,\n                    total_items = total_items,\n                    progress_percentage = math.floor((processed_items / total_items) * 100),\n                    items_per_second = calculate_rate(processed_items)\n                })\n            end\n\n            if not item_result.success then\n                log.error(\"Item processing failed\", {\n                    correlation_id = correlation_id,\n                    item_id = i,\n                    error = item_result.error,\n                    retry_count = item_result.retry_count\n                })\n            end\n        end\n\n        log.info(\"Data processing completed\", {\n            correlation_id = correlation_id,\n            total_items = total_items,\n            processed_items = processed_items,\n            success_rate = processed_items / total_items,\n            duration_seconds = calculate_duration()\n        })\n\n        return true, \"Processing completed\", {\n            correlation_id = correlation_id,\n            processed_items = processed_items,\n            success_rate = processed_items / total_items\n        }\n    end)\n    :build()\n</code></pre>"},{"location":"modern-dsl/best-practices/#security-best-practices","title":"\ud83d\udd10 Security Best Practices","text":""},{"location":"modern-dsl/best-practices/#1-secret-management","title":"1. Secret Management","text":"<pre><code>local secure_deployment = task(\"secure_deploy\")\n    :description(\"Deployment with proper secret management\")\n    :command(function(params)\n        -- Retrieve secrets securely\n        local db_password = utils.secret(\"database_password\")\n        local api_key = utils.secret(\"external_api_key\")\n        local ssl_cert = utils.secret(\"ssl_certificate\")\n\n        if not db_password or not api_key or not ssl_cert then\n            return false, \"Required secrets not available\"\n        end\n\n        -- Use secrets in deployment without logging them\n        local deploy_result = k8s.deploy({\n            image = params.image_tag,\n            secrets = {\n                DATABASE_PASSWORD = db_password,\n                API_KEY = api_key,\n                SSL_CERT = ssl_cert\n            },\n            security_context = {\n                run_as_non_root = true,\n                read_only_root_filesystem = true,\n                capabilities = {\n                    drop = {\"ALL\"}\n                }\n            }\n        })\n\n        -- Clear secrets from memory\n        db_password = nil\n        api_key = nil\n        ssl_cert = nil\n\n        if not deploy_result.success then\n            return false, \"Secure deployment failed: \" .. deploy_result.error\n        end\n\n        return true, \"Secure deployment completed\", {\n            deployment_id = deploy_result.deployment_id,\n            security_scan_passed = true\n        }\n    end)\n    :security({\n        secrets_required = {\"database_password\", \"external_api_key\", \"ssl_certificate\"},\n        rbac_role = \"secure-deployer\",\n        audit_logging = true\n    })\n    :build()\n</code></pre>"},{"location":"modern-dsl/best-practices/#2-input-validation","title":"2. Input Validation","text":"<pre><code>local validated_task = task(\"process_user_input\")\n    :description(\"Process user input with comprehensive validation\")\n    :command(function(params)\n        -- Validate required parameters\n        validate.required(params.user_id, \"user_id\")\n        validate.required(params.action, \"action\")\n\n        -- Validate parameter types and formats\n        validate.type(params.user_id, \"number\", \"user_id\")\n        validate.pattern(params.action, \"^[a-zA-Z0-9_]+$\", \"action\")\n\n        -- Validate parameter ranges\n        validate.range(params.user_id, 1, 1000000, \"user_id\")\n        validate.enum(params.action, {\"create\", \"update\", \"delete\"}, \"action\")\n\n        -- Sanitize input\n        local sanitized_input = utils.sanitize({\n            user_id = params.user_id,\n            action = params.action,\n            data = params.data and utils.escape_html(params.data) or nil\n        })\n\n        -- Process with validated and sanitized input\n        local result = user_processor.process(sanitized_input)\n\n        if not result.success then\n            return false, \"Processing failed: \" .. result.error\n        end\n\n        return true, \"User input processed successfully\", {\n            user_id = sanitized_input.user_id,\n            action = sanitized_input.action,\n            result_id = result.id\n        }\n    end)\n    :validation(function(params)\n        -- Pre-execution validation\n        if not params.user_id or not params.action then\n            return false, \"Missing required parameters\"\n        end\n        return true\n    end)\n    :build()\n</code></pre>"},{"location":"modern-dsl/best-practices/#performance-optimization-best-practices","title":"\ud83c\udfaf Performance Optimization Best Practices","text":""},{"location":"modern-dsl/best-practices/#1-efficient-resource-usage","title":"1. Efficient Resource Usage","text":"<pre><code>local optimized_task = task(\"resource_optimized_processing\")\n    :description(\"Processing task optimized for resource usage\")\n    :command(function(params)\n        -- Set resource limits\n        process.set_memory_limit(\"2GB\")\n        process.set_cpu_limit(\"2 cores\")\n\n        -- Use streaming for large datasets\n        local input_stream = data.open_stream(params.input_file)\n        local output_stream = data.create_stream(params.output_file)\n\n        local processed_count = 0\n        local batch_size = 1000\n\n        while true do\n            local batch = input_stream:read_batch(batch_size)\n            if not batch or #batch == 0 then\n                break\n            end\n\n            -- Process batch efficiently\n            local processed_batch = data_processor.process_batch(batch, {\n                parallel_workers = 4,\n                memory_efficient = true\n            })\n\n            -- Write results\n            output_stream:write_batch(processed_batch)\n            processed_count = processed_count + #processed_batch\n\n            -- Memory cleanup\n            batch = nil\n            processed_batch = nil\n\n            -- Yield control periodically\n            if processed_count % 10000 == 0 then\n                log.info(\"Processed \" .. processed_count .. \" records...\")\n                coroutine.yield()\n            end\n        end\n\n        input_stream:close()\n        output_stream:close()\n\n        return true, \"Processing completed efficiently\", {\n            processed_count = processed_count,\n            memory_usage = process.get_memory_usage(),\n            cpu_usage = process.get_cpu_usage()\n        }\n    end)\n    :resources({\n        cpu = \"2 cores\",\n        memory = \"2GB\",\n        disk = \"10GB\"\n    })\n    :build()\n</code></pre>"},{"location":"modern-dsl/best-practices/#2-caching-strategies","title":"2. Caching Strategies","text":"<pre><code>local cached_computation = task(\"cached_expensive_computation\")\n    :description(\"Expensive computation with intelligent caching\")\n    :command(function(params)\n        local cache_key = \"computation_\" .. params.dataset_id .. \"_\" .. params.algorithm_version\n\n        -- Check cache first\n        local cached_result = cache.get(cache_key)\n        if cached_result then\n            log.info(\"Using cached result for \" .. cache_key)\n            return true, \"Computation completed (cached)\", cached_result\n        end\n\n        log.info(\"Cache miss, performing computation...\")\n\n        -- Perform expensive computation\n        local start_time = os.time()\n        local computation_result = expensive_algorithm.compute({\n            dataset_id = params.dataset_id,\n            algorithm_version = params.algorithm_version,\n            parameters = params.computation_params\n        })\n        local computation_time = os.time() - start_time\n\n        if not computation_result.success then\n            return false, \"Computation failed: \" .. computation_result.error\n        end\n\n        -- Cache result with TTL\n        local cache_ttl = computation_time &gt; 300 and \"1h\" or \"30m\"  -- Longer cache for expensive computations\n        cache.set(cache_key, computation_result.data, cache_ttl)\n\n        log.info(\"Computation completed in \" .. computation_time .. \"s, cached with TTL \" .. cache_ttl)\n\n        return true, \"Computation completed\", {\n            result = computation_result.data,\n            computation_time = computation_time,\n            cache_key = cache_key,\n            cached = false\n        }\n    end)\n    :build()\n</code></pre> <p>Following these best practices will help you build robust, maintainable, and efficient workflows using the Modern DSL. Remember to adapt these patterns to your specific use cases and requirements!</p>"},{"location":"modern-dsl/introduction/","title":"\ud83c\udfaf Modern DSL Introduction","text":"<p>Welcome to the Modern DSL (Domain Specific Language) for Sloth Runner - a powerful approach to defining workflows that combines the flexibility of Lua with an intuitive, fluent API.</p>"},{"location":"modern-dsl/introduction/#what-is-modern-dsl","title":"\ud83d\ude80 What is Modern DSL?","text":"<p>The Modern DSL is the syntax for Sloth Runner that provides:</p> <ul> <li>\ud83c\udfaf Fluent API: Chainable, intuitive method calls</li> <li>\ud83d\udccb Declarative Workflows: Configuration-driven workflow definitions  </li> <li>\ud83d\udd04 Enhanced Features: Built-in retry strategies, circuit breakers, and resilience patterns</li> <li>\ud83d\udee1\ufe0f Type Safety: Better validation and error detection</li> <li>\ud83d\udcca Rich Metadata: Comprehensive workflow and task information</li> <li>\u26a1 Modern Patterns: Async operations, performance monitoring, and observability</li> </ul>"},{"location":"modern-dsl/introduction/#modern-dsl-syntax","title":"\ud83c\udfa8 Modern DSL Syntax","text":""},{"location":"modern-dsl/introduction/#task-definition","title":"Task Definition","text":"<pre><code>-- Define tasks with fluent API\nlocal build_task = task(\"build_app\")\n    :description(\"Build application with modern features\")\n    :command(function(params, deps)\n        log.info(\"Building application...\")\n        local result = exec.run(\"go build -o app ./cmd/main.go\")\n\n        if not result.success then\n            return false, \"Build failed: \" .. result.stderr\n        end\n\n        return true, \"Build completed\", {\n            artifact = \"app\",\n            size = fs.size(\"app\"),\n            build_time = result.duration\n        }\n    end)\n    :timeout(\"5m\")\n    :retries(3, \"exponential\")\n    :depends_on({\"setup\"})\n    :artifacts({\"app\"})\n    :on_success(function(params, output)\n        log.info(\"Build completed! Artifact size: \" .. output.size .. \" bytes\")\n    end)\n    :build()\n\nlocal test_task = task(\"run_tests\")\n    :description(\"Run comprehensive test suite\")\n    :command(\"go test ./...\")\n    :depends_on({\"build_app\"})\n    :timeout(\"10m\")\n    :condition(when(\"params.skip_tests != true\"))\n    :build()\n\n-- Define workflow with rich configuration\nworkflow.define(\"my_pipeline\", {\n    description = \"Modern CI/CD Pipeline\",\n    version = \"2.0.0\",\n\n    metadata = {\n        author = \"DevOps Team\",\n        tags = {\"ci\", \"golang\", \"build\"},\n        created_at = os.date(),\n        repository = \"github.com/company/project\"\n    },\n\n    tasks = { build_task, test_task },\n\n    config = {\n        timeout = \"30m\",\n        retry_policy = \"exponential\",\n        max_parallel_tasks = 4,\n        cleanup_on_failure = true\n    },\n\n    on_start = function()\n        log.info(\"\ud83d\ude80 Starting modern CI/CD pipeline...\")\n        return true\n    end,\n\n    on_complete = function(success, results)\n        if success then\n            log.info(\"\u2705 Pipeline completed successfully!\")\n            -- Send notification, update status, etc.\n        else\n            log.error(\"\u274c Pipeline failed!\")\n        end\n        return true\n    end\n})\n</code></pre>"},{"location":"modern-dsl/introduction/#key-benefits","title":"\ud83c\udfaf Key Benefits","text":""},{"location":"modern-dsl/introduction/#1-enhanced-readability","title":"1. Enhanced Readability","text":"<p>The fluent API makes workflows self-documenting and easier to understand:</p> <pre><code>-- Clear, expressive syntax\nlocal deploy_task = task(\"deploy_to_production\")\n    :description(\"Deploy application to production environment\")\n    :command(function(params, deps)\n        -- Business logic is clear and well-structured\n        return deploy_application(deps.build_app.artifact)\n    end)\n    :condition(when(\"env.ENVIRONMENT == 'production'\"))\n    :retries(2, \"exponential\")\n    :timeout(\"15m\")\n    :on_failure(function(params, error)\n        alert.send(\"deployment_failed\", {\n            environment = \"production\",\n            error = error\n        })\n    end)\n    :build()\n</code></pre>"},{"location":"modern-dsl/introduction/#2-built-in-resilience-patterns","title":"2. Built-in Resilience Patterns","text":"<p>Modern DSL includes enterprise-grade resilience patterns out of the box:</p> <pre><code>-- Circuit breaker for external dependencies\nlocal api_task = task(\"call_external_api\")\n    :command(function()\n        return circuit.protect(\"payment_api\", function()\n            return net.http_post(\"https://api.payment.com/charge\", data)\n        end)\n    end)\n    :retries(3, \"exponential\")\n    :build()\n\n-- Saga pattern for distributed transactions\nlocal payment_saga = saga.define(\"payment_process\")\n    :step(\"validate_payment\", validate_task)\n    :step(\"charge_card\", charge_task)\n    :step(\"update_inventory\", inventory_task)\n    :compensate(\"charge_card\", refund_task)\n    :compensate(\"update_inventory\", restore_inventory_task)\n    :build()\n</code></pre>"},{"location":"modern-dsl/introduction/#3-advanced-async-operations","title":"3. Advanced Async Operations","text":"<p>Modern patterns for parallel and asynchronous execution:</p> <pre><code>local parallel_build = task(\"parallel_build\")\n    :command(function()\n        -- Modern async patterns\n        local results = async.parallel({\n            frontend = function()\n                return exec.run(\"npm run build:frontend\")\n            end,\n            backend = function() \n                return exec.run(\"go build ./cmd/server\")\n            end,\n            docs = function()\n                return exec.run(\"mkdocs build\")\n            end\n        }, {\n            max_workers = 3,\n            timeout = \"10m\",\n            fail_fast = false\n        })\n\n        return true, \"All builds completed\", results\n    end)\n    :build()\n</code></pre>"},{"location":"modern-dsl/introduction/#4-rich-metadata-and-observability","title":"4. Rich Metadata and Observability","text":"<p>Comprehensive tracking and monitoring capabilities:</p> <pre><code>workflow.define(\"data_pipeline\", {\n    description = \"ETL Data Processing Pipeline\",\n    version = \"3.1.0\",\n\n    metadata = {\n        author = \"Data Team\",\n        tags = {\"etl\", \"data\", \"analytics\"},\n        sla = \"4h\",\n        cost_center = \"analytics\",\n        compliance = [\"GDPR\", \"SOX\"]\n    },\n\n    config = {\n        monitoring = {\n            metrics = true,\n            alerts = true,\n            dashboard = \"grafana://data-pipeline\"\n        },\n        performance = {\n            expected_duration = \"2h\",\n            memory_limit = \"4GB\",\n            cpu_limit = \"2 cores\"\n        }\n    }\n})\n</code></pre>"},{"location":"modern-dsl/introduction/#learning-path","title":"\ud83c\udf93 Learning Path","text":""},{"location":"modern-dsl/introduction/#beginner","title":"Beginner","text":"<ol> <li>Start with simple task definitions</li> <li>Learn the fluent API basics</li> <li>Explore basic workflow configuration</li> </ol>"},{"location":"modern-dsl/introduction/#intermediate","title":"Intermediate","text":"<ol> <li>Add error handling and retries</li> <li>Use conditional execution</li> <li>Implement parallel tasks</li> </ol>"},{"location":"modern-dsl/introduction/#advanced","title":"Advanced","text":"<ol> <li>Master circuit breaker patterns</li> <li>Implement saga patterns</li> <li>Build enterprise-grade pipelines</li> </ol>"},{"location":"modern-dsl/introduction/#getting-started","title":"\ud83d\ude80 Getting Started","text":"<p>Ready to start with Modern DSL? Check out these resources:</p> <ul> <li>Task Definition API - Complete task builder reference</li> <li>Workflow Definition - Workflow configuration guide</li> <li>Migration Guide - Convert existing workflows</li> <li>Best Practices - Modern DSL patterns and guidelines</li> <li>Examples - Browse modernized examples</li> </ul>"},{"location":"modern-dsl/introduction/#community","title":"\ud83e\udd1d Community","text":"<p>The Modern DSL is designed with community feedback in mind:</p> <ul> <li>\ud83d\udc1b Issues: Report bugs and request features</li> <li>\ud83d\udca1 Ideas: Propose new DSL features</li> <li>\ud83d\udcda Documentation: Help improve guides and examples</li> <li>\ud83d\udd27 Tools: Build migration and validation tools</li> </ul> <p>\ud83c\udfaf The Modern DSL represents the future of workflow automation - more powerful, more intuitive, and more maintainable than ever before!</p>"},{"location":"modern-dsl/reference-guide/","title":"\ud83d\udcda Modern DSL Reference Guide","text":"<p>This guide provides comprehensive examples and patterns for using the Modern DSL syntax in Sloth Runner.</p>"},{"location":"modern-dsl/reference-guide/#modern-dsl-overview","title":"\ud83c\udfaf Modern DSL Overview","text":"<p>The Modern DSL is the primary syntax for defining workflows in Sloth Runner, providing a powerful fluent API for task orchestration.</p>"},{"location":"modern-dsl/reference-guide/#modern-dsl-structure","title":"Modern DSL Structure","text":"<pre><code>-- Define tasks with fluent API\nlocal my_task = task(\"task_name\")\n    :description(\"Task description\")\n    :command(\"shell command or function\")\n    :depends_on({\"other_task\"})\n    :timeout(\"5m\")\n    :retries(3, \"exponential\")\n    :build()\n\n-- Define workflow\nworkflow.define(\"workflow_name\", {\n    description = \"Workflow description\",\n    version = \"2.0.0\",\n    tasks = { my_task }\n})\n</code></pre>"},{"location":"modern-dsl/reference-guide/#essential-modern-dsl-patterns","title":"\ud83d\ude80 Essential Modern DSL Patterns","text":""},{"location":"modern-dsl/reference-guide/#basic-task-definition","title":"Basic Task Definition","text":"<pre><code>local build_task = task(\"build_app\")\n    :description(\"Build the application\")\n    :command(\"npm run build\")\n    :timeout(\"10m\")\n    :build()\n</code></pre>"},{"location":"modern-dsl/reference-guide/#task-with-dependencies","title":"Task with Dependencies","text":"<pre><code>local deploy_task = task(\"deploy_app\")\n    :command(\"kubectl apply -f deployment.yaml\")\n    :depends_on({\"build_app\"})  -- Always use array format\n    :build()\n\nlocal notify_task = task(\"notify_team\")\n    :command(\"slack-notify.sh\")\n    :depends_on({\"test_app\", \"security_scan\"})  -- Multiple dependencies\n    :build()\n</code></pre>"},{"location":"modern-dsl/reference-guide/#function-commands-with-error-handling","title":"Function Commands with Error Handling","text":"<pre><code>local process_task = task(\"process_data\")\n    :command(function(params, deps)  -- 'deps' parameter for dependency outputs\n        local data = deps.fetch_data.result\n        log.info(\"Processing: \" .. data)\n\n        if not data then\n            return false, \"No data to process\"\n        end\n\n        return true, \"Processed\", {processed = data}\n    end)\n    :build()\n</code></pre>"},{"location":"modern-dsl/reference-guide/#advanced-task-with-hooks","title":"Advanced Task with Hooks","text":"<pre><code>local deploy_task = task(\"deploy\")\n    :command(\"deploy.sh\")\n    :pre_hook(function(params, deps)  -- pre_hook for setup\n        log.info(\"Preparing deployment...\")\n        return true, \"Ready\"\n    end)\n    :post_hook(function(params, output)  -- post_hook for cleanup\n        log.info(\"Deployment completed\")\n        return true, \"Done\"\n    end)\n    :on_success(function(params, output)  -- Success-specific hook\n        notifications.send(\"slack\", \"Deployment successful!\")\n    end)\n    :on_failure(function(params, error)  -- Failure-specific hook\n        alerts.send(\"pagerduty\", \"Deployment failed: \" .. error)\n    end)\n    :build()\n</code></pre>"},{"location":"modern-dsl/reference-guide/#enhanced-modern-dsl-features","title":"\ud83d\udd27 Enhanced Modern DSL Features","text":""},{"location":"modern-dsl/reference-guide/#circuit-breaker-pattern","title":"Circuit Breaker Pattern","text":"<pre><code>local api_task = task(\"call_external_api\")\n    :command(function()\n        return circuit.protect(\"payment_api\", function()\n            return net.http_post(\"https://api.payment.com/charge\", data)\n        end)\n    end)\n    :retries(3, \"exponential\")\n    :build()\n</code></pre>"},{"location":"modern-dsl/reference-guide/#conditional-execution","title":"Conditional Execution","text":"<pre><code>local enhanced_task = task(\"enhanced_deploy\")\n    :description(\"Deploy with modern features\")\n    :command(\"deploy.sh\")\n    :depends_on({\"build\", \"test\"})\n    :timeout(\"15m\")\n    :retries(3, \"exponential\")  -- Enhanced retry with strategy\n    :condition(when(\"env.ENVIRONMENT == 'production'\"))  -- Conditional execution\n    :artifacts({\"deployment.yaml\", \"logs/\"})  -- Artifact management\n    :metadata({  -- Rich metadata\n        owner = \"platform-team\",\n        cost_center = \"engineering\"\n    })\n    :build()\n</code></pre>"},{"location":"modern-dsl/reference-guide/#parallel-task-execution","title":"Parallel Task Execution","text":"<pre><code>local parallel_build = task(\"parallel_build\")\n    :command(function()\n        -- Modern async patterns\n        local results = async.parallel({\n            frontend = function()\n                return exec.run(\"npm run build:frontend\")\n            end,\n            backend = function() \n                return exec.run(\"go build ./cmd/server\")\n            end,\n            docs = function()\n                return exec.run(\"mkdocs build\")\n            end\n        }, {\n            max_workers = 3,\n            timeout = \"10m\",\n            fail_fast = false\n        })\n\n        return true, \"All builds completed\", results\n    end)\n    :build()\n</code></pre>"},{"location":"modern-dsl/reference-guide/#complete-workflow-examples","title":"\ud83c\udf1f Complete Workflow Examples","text":""},{"location":"modern-dsl/reference-guide/#simple-workflow","title":"Simple Workflow","text":"<pre><code>-- Simple build and test workflow\nlocal build_task = task(\"build\")\n    :description(\"Build application\")\n    :command(\"go build -o app ./cmd/main.go\")\n    :timeout(\"5m\")\n    :artifacts({\"app\"})\n    :build()\n\nlocal test_task = task(\"test\")\n    :description(\"Run tests\")\n    :command(\"go test ./...\")\n    :depends_on({\"build\"})\n    :timeout(\"10m\")\n    :build()\n\nworkflow.define(\"ci_pipeline\", {\n    description = \"Simple CI Pipeline\",\n    version = \"2.0.0\",\n    tasks = { build_task, test_task },\n\n    config = {\n        timeout = \"30m\",\n        retry_policy = \"exponential\"\n    }\n})\n</code></pre>"},{"location":"modern-dsl/reference-guide/#enterprise-workflow-with-monitoring","title":"Enterprise Workflow with Monitoring","text":"<pre><code>workflow.define(\"enterprise_deployment\", {\n    description = \"Enterprise deployment pipeline\",\n    version = \"3.0.0\",\n\n    metadata = {\n        author = \"Platform Team\",\n        team = \"infrastructure\",\n        tags = {\"deployment\", \"production\", \"enterprise\"},\n        cost_center = \"engineering\",\n        criticality = \"high\"\n    },\n\n    tasks = { build_task, test_task, security_task, deploy_task },\n\n    config = {\n        timeout = \"2h\",\n        max_parallel_tasks = 4,\n        retry_policy = \"exponential\",\n        cleanup_on_failure = true,\n\n        monitoring = {\n            metrics = true,\n            alerts = true,\n            dashboard = \"grafana://deployment-pipeline\"\n        },\n\n        security = {\n            required_secrets = [\"k8s_token\", \"registry_password\"],\n            rbac_role = \"deployment-executor\"\n        }\n    },\n\n    pre_conditions = {\n        cluster_available = function()\n            local result = exec.run(\"kubectl cluster-info\")\n            return result.success, \"Kubernetes cluster not available\"\n        end\n    },\n\n    on_start = function()\n        log.info(\"\ud83d\ude80 Starting enterprise deployment...\")\n        metrics.increment(\"deployment_starts_total\")\n        return true\n    end,\n\n    on_complete = function(success, results)\n        local duration = metrics.stop_timer(\"deployment_duration\")\n\n        if success then\n            log.info(\"\u2705 Deployment completed successfully!\")\n            metrics.increment(\"deployment_success_total\")\n        else\n            log.error(\"\u274c Deployment failed!\")\n            metrics.increment(\"deployment_failure_total\")\n        end\n\n        return true\n    end\n})\n</code></pre>"},{"location":"modern-dsl/reference-guide/#best-practices","title":"\ud83c\udfaf Best Practices","text":""},{"location":"modern-dsl/reference-guide/#task-definition","title":"Task Definition","text":"<ol> <li>Always use descriptive names for tasks and workflows</li> <li>Set appropriate timeouts for all tasks</li> <li>Use exponential backoff for retry strategies</li> <li>Add metadata for tracking and documentation</li> <li>Implement proper error handling in function commands</li> </ol>"},{"location":"modern-dsl/reference-guide/#workflow-organization","title":"Workflow Organization","text":"<ol> <li>Group related tasks logically</li> <li>Use meaningful version numbers for workflows</li> <li>Add comprehensive metadata for maintainability</li> <li>Set resource limits for performance</li> <li>Enable monitoring for production workflows</li> </ol>"},{"location":"modern-dsl/reference-guide/#error-handling","title":"Error Handling","text":"<ol> <li>Use circuit breakers for external dependencies</li> <li>Implement compensation logic for critical operations</li> <li>Add proper logging at all levels</li> <li>Set up alerts for failures</li> <li>Plan rollback strategies for deployments</li> </ol> <p>\ud83c\udfaf The Modern DSL provides powerful capabilities for building robust, maintainable workflows. Use these patterns as building blocks for your automation needs!</p>"},{"location":"modules/","title":"\ud83d\udce6 Modules Reference","text":"<p>Sloth Runner provides a comprehensive set of built-in modules for common operations.</p>"},{"location":"modules/#overview","title":"Overview","text":"<p>Modules are Lua libraries that provide additional functionality to your workflows. They are loaded using the <code>require()</code> function.</p> <pre><code>local exec = require(\"exec\")\nlocal fs = require(\"fs\")\nlocal log = require(\"log\")\n</code></pre>"},{"location":"modules/#core-modules","title":"Core Modules","text":""},{"location":"modules/#execution-system","title":"\u26a1 Execution &amp; System","text":"<ul> <li>exec - Execute shell commands and processes</li> <li>fs - File system operations (read, write, copy, move)</li> <li>net - Network operations (HTTP, TCP, DNS)</li> <li>log - Structured logging with levels</li> </ul>"},{"location":"modules/#testing-validation","title":"\ud83e\uddea Testing &amp; Validation \ud83d\udd25","text":"<ul> <li>infra_test - Infrastructure testing and validation (NEW!)</li> <li>Test files, permissions, services, ports, processes</li> <li>Remote agent testing support</li> <li>Fail-fast validation for deployments</li> </ul>"},{"location":"modules/#data-state","title":"\ud83d\udcbe Data &amp; State","text":"<ul> <li>state - Persistent state management</li> <li>data - Data processing (JSON, YAML, CSV)</li> <li>metrics - Metrics collection and reporting</li> </ul>"},{"location":"modules/#cloud-providers","title":"Cloud Providers","text":""},{"location":"modules/#aws","title":"\u2601\ufe0f AWS","text":"<p>AWS Module Documentation</p> <p>Amazon Web Services integration: - EC2, ECS, Lambda - S3, DynamoDB - CloudFormation - IAM, Secrets Manager</p>"},{"location":"modules/#azure","title":"\ud83d\udd37 Azure","text":"<p>Azure Module Documentation</p> <p>Microsoft Azure integration: - Virtual Machines, Container Instances - Blob Storage, Cosmos DB - ARM Templates - Key Vault</p>"},{"location":"modules/#gcp","title":"\ud83c\udf29\ufe0f GCP","text":"<p>GCP Module Documentation</p> <p>Google Cloud Platform integration: - Compute Engine, Cloud Run - Cloud Storage, Firestore - Deployment Manager - Secret Manager</p>"},{"location":"modules/#digitalocean","title":"\ud83c\udf0a DigitalOcean","text":"<p>DigitalOcean Module Documentation</p> <p>DigitalOcean integration: - Droplets, Kubernetes - Spaces (Object Storage) - Load Balancers - Databases</p>"},{"location":"modules/#infrastructure-tools","title":"Infrastructure Tools","text":""},{"location":"modules/#docker","title":"\ud83d\udc33 Docker","text":"<p>Docker Module Documentation</p> <p>Container management: - Build images - Run containers - Manage networks - Docker Compose</p>"},{"location":"modules/#kubernetes","title":"\u2638\ufe0f Kubernetes","text":"<p>Integration via kubectl and native API</p>"},{"location":"modules/#terraform","title":"\ud83c\udf0d Terraform","text":"<p>Terraform Module Documentation</p> <p>Infrastructure as Code: - Plan and apply - State management - Output parsing - Multi-workspace</p>"},{"location":"modules/#pulumi","title":"\ud83c\udfd7\ufe0f Pulumi","text":"<p>Pulumi Module Documentation</p> <p>Modern Infrastructure as Code: - Stack management - State backends - Output exports - Preview changes</p>"},{"location":"modules/#saltstack","title":"\ud83e\uddc2 SaltStack","text":"<p>SaltStack Module Documentation</p> <p>Configuration management: - Execute states - Run commands - Manage minions - Highstate application</p>"},{"location":"modules/#version-control","title":"Version Control","text":""},{"location":"modules/#git","title":"\ud83d\udc19 Git","text":"<p>Git Module Documentation</p> <p>Git operations: - Clone repositories - Commit changes - Push/pull - Branch management - Tag management</p>"},{"location":"modules/#notifications","title":"Notifications","text":""},{"location":"modules/#notifications_1","title":"\ud83d\udd14 Notifications","text":"<p>Notifications Module Documentation</p> <p>Multi-channel notifications: - Slack - Email - Webhook - Discord - Microsoft Teams</p>"},{"location":"modules/#system-management","title":"System Management","text":""},{"location":"modules/#systemd","title":"\u2699\ufe0f Systemd","text":"<p>Systemd Module Documentation</p> <p>Linux service management: - Start/stop services - Enable/disable - Status checking - Journal logs</p>"},{"location":"modules/#package-management","title":"\ud83d\udce6 Package Management","text":"<ul> <li>pkg - Package manager integration</li> <li>apt (Debian/Ubuntu)</li> <li>yum/dnf (RedHat/CentOS)</li> <li>pacman (Arch Linux)</li> <li>brew (macOS)</li> </ul>"},{"location":"modules/#module-usage-patterns","title":"Module Usage Patterns","text":""},{"location":"modules/#basic-usage","title":"Basic Usage","text":"<pre><code>-- Load module\nlocal exec = require(\"exec\")\n\n-- Use module\nlocal result = exec.run(\"echo 'Hello World'\")\nif result.success then\n    print(result.stdout)\nend\n</code></pre>"},{"location":"modules/#error-handling","title":"Error Handling","text":"<pre><code>local fs = require(\"fs\")\n\nlocal success, content = pcall(function()\n    return fs.read(\"/path/to/file\")\nend)\n\nif not success then\n    log.error(\"Failed to read file: \" .. content)\nend\n</code></pre>"},{"location":"modules/#combining-modules","title":"Combining Modules","text":"<pre><code>local git = require(\"git\")\nlocal exec = require(\"exec\")\nlocal notification = require(\"notification\")\n\n-- Clone repo\ngit.clone(\"https://github.com/user/repo.git\", \"/tmp/repo\")\n\n-- Build\nexec.run(\"cd /tmp/repo &amp;&amp; make build\")\n\n-- Notify\nnotification.slack({\n    webhook = os.getenv(\"SLACK_WEBHOOK\"),\n    message = \"Build completed!\"\n})\n</code></pre>"},{"location":"modules/#module-configuration","title":"Module Configuration","text":"<p>Some modules require configuration:</p> <pre><code>-- AWS credentials\nlocal aws = require(\"aws\")\naws.config({\n    region = \"us-east-1\",\n    access_key = os.getenv(\"AWS_ACCESS_KEY\"),\n    secret_key = os.getenv(\"AWS_SECRET_KEY\")\n})\n\n-- Use AWS\naws.s3.upload(\"bucket-name\", \"file.txt\", \"/local/file.txt\")\n</code></pre>"},{"location":"modules/#custom-modules","title":"Custom Modules","text":"<p>You can also create custom modules:</p> <pre><code>-- mymodule.lua\nlocal M = {}\n\nfunction M.hello(name)\n    return \"Hello, \" .. name .. \"!\"\nend\n\nreturn M\n</code></pre> <p>Use it in your workflow: <pre><code>local mymodule = require(\"mymodule\")\nprint(mymodule.hello(\"World\"))\n</code></pre></p>"},{"location":"modules/#best-practices","title":"Best Practices","text":""},{"location":"modules/#1-check-return-values","title":"1. Check Return Values","text":"<p>Always check if operations succeeded: <pre><code>local result = exec.run(\"command\")\nif not result.success then\n    return false, result.stderr\nend\n</code></pre></p>"},{"location":"modules/#2-handle-errors-gracefully","title":"2. Handle Errors Gracefully","text":"<p>Use pcall for operations that might fail: <pre><code>local ok, err = pcall(function()\n    fs.remove(\"/important/file\")\nend)\n</code></pre></p>"},{"location":"modules/#3-use-environment-variables","title":"3. Use Environment Variables","text":"<p>Never hardcode credentials: <pre><code>local api_key = os.getenv(\"API_KEY\")\nif not api_key then\n    error(\"API_KEY not set\")\nend\n</code></pre></p>"},{"location":"modules/#4-log-important-operations","title":"4. Log Important Operations","text":"<pre><code>log.info(\"Starting deployment...\")\nlocal result = deploy()\nlog.info(\"Deployment \" .. (result.success and \"succeeded\" or \"failed\"))\n</code></pre>"},{"location":"modules/#module-reference-quick-links","title":"Module Reference Quick Links","text":""},{"location":"modules/#core","title":"Core","text":"<ul> <li>exec | fs | net | log</li> </ul>"},{"location":"modules/#testing","title":"Testing \ud83d\udd25","text":"<ul> <li>infra_test - Infrastructure testing and validation</li> </ul>"},{"location":"modules/#cloud","title":"Cloud","text":"<ul> <li>AWS | Azure | GCP | DigitalOcean</li> </ul>"},{"location":"modules/#infrastructure","title":"Infrastructure","text":"<ul> <li>Docker | Terraform | Pulumi | Salt</li> </ul>"},{"location":"modules/#tools","title":"Tools","text":"<ul> <li>Git | Pkg | Systemd | Notifications</li> </ul>"},{"location":"modules/#parallel-testing","title":"Parallel &amp; Testing \ud83d\udd25","text":"<ul> <li>Goroutine | infra_test</li> </ul>"},{"location":"modules/#learn-more","title":"Learn More","text":"<ul> <li>Modern DSL Guide</li> <li>Core Concepts</li> <li>Advanced Examples</li> <li>Lua API Reference</li> </ul> <p>Need help? Check the documentation home or file an issue.</p>"},{"location":"modules/ai/","title":"\ud83e\udd16 AI Module - Complete API Reference","text":"<p>The AI module provides artificial intelligence capabilities for task optimization, failure prediction, and performance analytics.</p>"},{"location":"modules/ai/#module-overview","title":"\ud83d\udccb Module Overview","text":"<pre><code>local ai = require(\"ai\")\n</code></pre> <p>The AI module is the core of Sloth Runner's intelligence features, providing:</p> <ul> <li>\ud83d\udd2e Predictive Failure Detection - Predict task failures before they happen</li> <li>\u26a1 Intelligent Optimization - Automatically optimize commands for better performance  </li> <li>\ud83d\udcca Performance Analytics - Analyze execution patterns and trends</li> <li>\ud83e\udde0 Adaptive Learning - Continuous improvement from execution history</li> </ul>"},{"location":"modules/ai/#configuration","title":"\ud83d\udd27 Configuration","text":""},{"location":"modules/ai/#aiconfigureconfig","title":"<code>ai.configure(config)</code>","text":"<p>Configure AI behavior and capabilities.</p> <pre><code>ai.configure({\n    enabled = true,                    -- Enable/disable AI features\n    learning_mode = \"adaptive\",        -- adaptive | aggressive | conservative\n    optimization_level = 8,            -- 1-10 (higher = more aggressive)\n    failure_prediction = true,         -- Enable failure prediction\n    auto_optimize = true,              -- Automatically apply optimizations\n    confidence_threshold = 0.7         -- Minimum confidence for auto-apply\n})\n</code></pre> <p>Parameters: - <code>enabled</code> (boolean): Enable or disable all AI features - <code>learning_mode</code> (string): Learning aggressiveness level - <code>optimization_level</code> (number): Optimization aggressiveness (1-10) - <code>failure_prediction</code> (boolean): Enable predictive failure detection - <code>auto_optimize</code> (boolean): Automatically apply high-confidence optimizations - <code>confidence_threshold</code> (number): Minimum confidence score for auto-application</p>"},{"location":"modules/ai/#aiget_config","title":"<code>ai.get_config()</code>","text":"<p>Get current AI configuration.</p> <pre><code>local config = ai.get_config()\n-- Returns: {enabled: true, learning_mode: \"adaptive\", ...}\n</code></pre>"},{"location":"modules/ai/#optimization","title":"\u26a1 Optimization","text":""},{"location":"modules/ai/#aioptimize_commandcommand-options","title":"<code>ai.optimize_command(command, options)</code>","text":"<p>Get AI optimization suggestions for a command.</p> <pre><code>local result = ai.optimize_command(\"go build -o app ./cmd/main.go\", {\n    history = ai.get_task_history(\"go build\"),\n    system_resources = {\n        cpu_usage = 45,\n        memory_usage = 60,\n        load_avg = 1.2\n    },\n    similar_tasks = ai.find_similar_tasks(\"go build\", 10),\n    environment = \"production\"\n})\n</code></pre> <p>Parameters: - <code>command</code> (string): Original command to optimize - <code>options</code> (table): Optimization context   - <code>history</code> (array): Historical executions of this command   - <code>system_resources</code> (table): Current system resource usage   - <code>similar_tasks</code> (array): Similar task executions   - <code>environment</code> (string): Execution environment (dev/staging/prod)</p> <p>Returns: <pre><code>{\n    original_command = \"go build -o app ./cmd/main.go\",\n    optimized_command = \"go build -p 4 -ldflags='-s -w' -o app ./cmd/main.go\",\n    confidence_score = 0.85,           -- 0.0-1.0\n    expected_speedup = 2.3,            -- Expected performance multiplier\n    optimizations = {                  -- Applied optimizations\n        {\n            type = \"parallelization\",\n            description = \"Added -p 4 for parallel compilation\",\n            impact = 1.8\n        },\n        {\n            type = \"size_optimization\", \n            description = \"Added -ldflags='-s -w' to reduce binary size\",\n            impact = 0.5\n        }\n    },\n    resource_savings = {\n        estimated_time_saved = \"1.2s\",\n        memory_efficiency = \"+15%\"\n    },\n    rationale = \"Command shows parallelization opportunities based on system CPU count\"\n}\n</code></pre></p>"},{"location":"modules/ai/#failure-prediction","title":"\ud83d\udd2e Failure Prediction","text":""},{"location":"modules/ai/#aipredict_failuretask_name-command-options","title":"<code>ai.predict_failure(task_name, command, options)</code>","text":"<p>Predict the probability of task failure.</p> <pre><code>local prediction = ai.predict_failure(\"deploy_task\", \"kubectl apply -f deployment.yaml\", {\n    history = ai.get_task_history(\"kubectl apply\"),\n    environment = \"production\",\n    system_state = {\n        disk_usage = 85,\n        network_latency = 120\n    }\n})\n</code></pre> <p>Parameters: - <code>task_name</code> (string): Name of the task being analyzed - <code>command</code> (string): Command to be executed - <code>options</code> (table): Prediction context   - <code>history</code> (array): Historical executions   - <code>environment</code> (string): Execution environment   - <code>system_state</code> (table): Current system state</p> <p>Returns: <pre><code>{\n    failure_probability = 0.23,        -- 0.0-1.0\n    confidence = 0.78,                 -- Confidence in prediction\n    risk_factors = {                   -- Identified risk factors\n        {\n            type = \"resource_contention\",\n            description = \"High disk usage detected (85%)\",\n            impact = 0.6,\n            severity = \"medium\"\n        },\n        {\n            type = \"network_latency\",\n            description = \"Elevated network latency (120ms)\",\n            impact = 0.3,\n            severity = \"low\"\n        }\n    },\n    recommendations = {                -- AI-generated recommendations\n        \"Consider waiting for disk usage to decrease below 80%\",\n        \"Add timeout configuration to handle network latency\",\n        \"Implement retry logic with exponential backoff\"\n    },\n    similar_failures = {               -- Historical similar failures\n        count = 3,\n        common_causes = [\"network_timeout\", \"resource_exhaustion\"]\n    }\n}\n</code></pre></p>"},{"location":"modules/ai/#performance-analytics","title":"\ud83d\udcca Performance Analytics","text":""},{"location":"modules/ai/#aianalyze_performancecommand-options","title":"<code>ai.analyze_performance(command, options)</code>","text":"<p>Analyze performance patterns for a command or task.</p> <pre><code>local analysis = ai.analyze_performance(\"go build\", {\n    time_range = \"30d\",                -- 1d, 7d, 30d, 90d\n    environment = \"all\",               -- all, dev, staging, prod\n    include_failures = true\n})\n</code></pre> <p>Parameters: - <code>command</code> (string): Command to analyze - <code>options</code> (table): Analysis options   - <code>time_range</code> (string): Time range for analysis   - <code>environment</code> (string): Environment filter   - <code>include_failures</code> (boolean): Include failed executions</p> <p>Returns: <pre><code>{\n    total_executions = 156,\n    success_rate = 0.94,               -- 94% success rate\n    avg_execution_time = \"2.3s\",\n    fastest_execution = \"1.1s\",\n    slowest_execution = \"5.7s\",\n    performance_trend = \"improving\",    -- improving | stable | degrading\n    insights = {                       -- AI-generated insights\n        \"Performance improved 23% over the last 30 days\",\n        \"Failures primarily occur during high system load\",\n        \"Consider caching to improve cold-start performance\"\n    },\n    recommendations = {\n        \"Enable build caching to reduce average execution time\",\n        \"Implement resource monitoring for failure prevention\"\n    },\n    patterns = {                       -- Detected patterns\n        peak_hours = [\"09:00-10:00\", \"14:00-15:00\"],\n        failure_correlation = [\"high_cpu_usage\", \"memory_pressure\"]\n    }\n}\n</code></pre></p>"},{"location":"modules/ai/#aiget_task_statstask_name","title":"<code>ai.get_task_stats(task_name)</code>","text":"<p>Get aggregated statistics for a specific task.</p> <pre><code>local stats = ai.get_task_stats(\"build_application\")\n</code></pre> <p>Returns: <pre><code>{\n    task_name = \"build_application\",\n    total_runs = 89,\n    success_count = 84,\n    failure_count = 5,\n    success_rate = 0.944,              -- 94.4%\n    total_time = \"3m 45s\",\n    avg_time = \"2.5s\",\n    fastest_time = \"1.2s\",\n    slowest_time = \"8.1s\",\n    last_execution = \"2024-01-15T10:30:00Z\",\n    trend = \"stable\"\n}\n</code></pre></p>"},{"location":"modules/ai/#learning-history","title":"\ud83e\udde0 Learning &amp; History","text":""},{"location":"modules/ai/#airecord_executionexecution_data","title":"<code>ai.record_execution(execution_data)</code>","text":"<p>Record task execution for AI learning.</p> <pre><code>ai.record_execution({\n    task_name = \"build_application\",\n    command = \"go build -o app ./cmd/main.go\",\n    success = true,\n    execution_time = \"2.5s\",\n    start_time = os.time(),\n    end_time = os.time() + 2.5,\n    parameters = {\n        environment = \"development\",\n        go_version = \"1.21.0\",\n        parallel = true\n    },\n    system_resources = {\n        cpu_usage = 45,\n        memory_usage = 60,\n        disk_usage = 30\n    },\n    error_message = nil,               -- If success = false\n    optimization_applied = true,\n    ai_confidence = 0.85\n})\n</code></pre> <p>Parameters: - <code>task_name</code> (string): Name of the executed task - <code>command</code> (string): Command that was executed - <code>success</code> (boolean): Whether execution was successful - <code>execution_time</code> (string): Time taken to execute - <code>parameters</code> (table): Execution parameters and context - <code>system_resources</code> (table): System resource state during execution - <code>error_message</code> (string): Error message if failed - <code>optimization_applied</code> (boolean): Whether AI optimization was used - <code>ai_confidence</code> (number): Confidence score if optimization was applied</p>"},{"location":"modules/ai/#aiget_task_historycommand-limit","title":"<code>ai.get_task_history(command, limit)</code>","text":"<p>Get execution history for a command.</p> <pre><code>local history = ai.get_task_history(\"go build\", 20)\n-- Returns array of execution records\n</code></pre>"},{"location":"modules/ai/#aifind_similar_taskscommand-limit","title":"<code>ai.find_similar_tasks(command, limit)</code>","text":"<p>Find tasks similar to the given command.</p> <pre><code>local similar = ai.find_similar_tasks(\"go build -o app\", 10)\n-- Returns array of similar task executions\n</code></pre>"},{"location":"modules/ai/#insights-recommendations","title":"\ud83d\udca1 Insights &amp; Recommendations","text":""},{"location":"modules/ai/#aigenerate_insightsoptions","title":"<code>ai.generate_insights(options)</code>","text":"<p>Generate AI-powered insights about task execution patterns.</p> <pre><code>local insights = ai.generate_insights({\n    scope = \"global\",                  -- global | task | command\n    task_name = \"build_application\",   -- if scope = \"task\"\n    time_range = \"7d\"\n})\n</code></pre> <p>Returns: <pre><code>{\n    \"Tasks executed during business hours have 15% lower failure rate\",\n    \"Commands with parallel flags show 40% better performance\", \n    \"Memory-intensive tasks perform better with explicit heap size settings\",\n    \"Network-dependent tasks should include timeout and retry configurations\"\n}\n</code></pre></p>"},{"location":"modules/ai/#best-practices","title":"\ud83c\udfaf Best Practices","text":""},{"location":"modules/ai/#1-always-record-executions","title":"1. Always Record Executions","text":"<pre><code>-- Record every execution for AI learning\nworkflow.define(\"my_pipeline\", {\n    on_task_complete = function(task_name, success, output)\n        ai.record_execution({\n            task_name = task_name,\n            command = output.command,\n            success = success,\n            execution_time = output.duration\n        })\n    end\n})\n</code></pre>"},{"location":"modules/ai/#2-use-confidence-thresholds","title":"2. Use Confidence Thresholds","text":"<pre><code>-- Only apply high-confidence optimizations\nlocal optimization = ai.optimize_command(command)\nif optimization.confidence_score &gt; 0.8 then\n    command = optimization.optimized_command\n    log.info(\"Applied AI optimization with \" .. (optimization.confidence_score * 100) .. \"% confidence\")\nend\n</code></pre>"},{"location":"modules/ai/#3-monitor-predictions","title":"3. Monitor Predictions","text":"<pre><code>-- Always check predictions for critical tasks\nlocal prediction = ai.predict_failure(task_name, command)\nif prediction.failure_probability &gt; 0.3 then\n    log.warn(\"High failure risk detected: \" .. (prediction.failure_probability * 100) .. \"%\")\n    for _, rec in ipairs(prediction.recommendations) do\n        log.info(\"Recommendation: \" .. rec)\n    end\nend\n</code></pre>"},{"location":"modules/ai/#4-regular-analysis","title":"4. Regular Analysis","text":"<pre><code>-- Periodic performance analysis\nlocal analysis = ai.analyze_performance(\"critical_task\")\nif analysis.performance_trend == \"degrading\" then\n    log.warn(\"Performance degradation detected for critical_task\")\n    -- Take action\nend\n</code></pre>"},{"location":"modules/ai/#advanced-features","title":"\ud83d\udd2c Advanced Features","text":""},{"location":"modules/ai/#learning-modes","title":"Learning Modes","text":"<ul> <li>Adaptive: Balanced learning and optimization (recommended)</li> <li>Aggressive: Maximum optimization attempts, higher risk</li> <li>Conservative: Minimal changes, maximum safety</li> </ul>"},{"location":"modules/ai/#optimization-strategies","title":"Optimization Strategies","text":"<p>The AI system includes multiple built-in optimization strategies: - Parallelization: Detect parallel execution opportunities - Memory Optimization: Adjust memory settings for optimal performance - Compiler Optimization: Suggest better compiler flags and options - Caching: Implement intelligent caching strategies - Network Optimization: Optimize network operations and timeouts - I/O Optimization: Improve file and disk operations</p>"},{"location":"modules/ai/#custom-metrics","title":"Custom Metrics","text":"<p>You can provide custom metrics to improve AI analysis:</p> <pre><code>ai.record_execution({\n    task_name = \"custom_task\",\n    success = true,\n    execution_time = \"1.5s\",\n    custom_metrics = {\n        memory_peak = \"512MB\",\n        cache_hit_rate = 0.85,\n        network_requests = 15,\n        database_queries = 8\n    }\n})\n</code></pre>"},{"location":"modules/ai/#integration-examples","title":"\ud83d\ude80 Integration Examples","text":""},{"location":"modules/ai/#with-modern-dsl","title":"With Modern DSL","text":"<pre><code>local build_task = task(\"ai_optimized_build\")\n    :description(\"Build with AI optimization\")\n    :command(function(params, deps)\n        local cmd = \"go build -o app ./cmd/main.go\"\n        local optimization = ai.optimize_command(cmd, {\n            history = ai.get_task_history(cmd)\n        })\n\n        if optimization.confidence_score &gt; 0.7 then\n            return exec.run(optimization.optimized_command)\n        else\n            return exec.run(cmd)\n        end\n    end)\n    :on_success(function(params, output)\n        ai.record_execution({\n            task_name = \"ai_optimized_build\",\n            command = output.command,\n            success = true,\n            execution_time = output.duration\n        })\n    end)\n    :build()\n</code></pre>"},{"location":"modules/ai/#with-gitops","title":"With GitOps","text":"<pre><code>local gitops_task = task(\"intelligent_deploy\")\n    :command(function(params, deps)\n        local deploy_cmd = \"kubectl apply -f manifests/\"\n\n        -- AI failure prediction\n        local prediction = ai.predict_failure(\"intelligent_deploy\", deploy_cmd)\n        if prediction.failure_probability &gt; 0.25 then\n            log.warn(\"High deployment risk detected\")\n            return {success = false, message = \"Deployment blocked by AI risk assessment\"}\n        end\n\n        -- GitOps deployment\n        return gitops.sync_workflow(params.workflow_id)\n    end)\n    :build()\n</code></pre>"},{"location":"modules/ai/#see-also","title":"\ud83d\udcda See Also","text":"<ul> <li>AI Features Overview</li> <li>Performance Optimization Guide</li> <li>Failure Prediction Guide</li> <li>AI Best Practices</li> </ul>"},{"location":"modules/aws/","title":"AWS Module","text":"<p>The <code>aws</code> module provides a comprehensive interface for interacting with Amazon Web Services using the AWS CLI. It is designed to work seamlessly with standard AWS credential chains and also has first-class support for <code>aws-vault</code> for enhanced security.</p>"},{"location":"modules/aws/#configuration","title":"Configuration","text":"<p>No specific configuration in <code>values.yaml</code> is required. The module relies on your environment being configured to interact with AWS. This can be achieved through: - IAM roles for EC2 instances or ECS/EKS tasks. - Standard environment variables (<code>AWS_ACCESS_KEY_ID</code>, <code>AWS_SECRET_ACCESS_KEY</code>, etc.). - A configured <code>~/.aws/credentials</code> file. - Using <code>aws-vault</code> with a named profile.</p>"},{"location":"modules/aws/#generic-executor","title":"Generic Executor","text":""},{"location":"modules/aws/#awsexecargs-opts","title":"<code>aws.exec(args, opts)</code>","text":"<p>This is the core function of the module. It executes any AWS CLI command and returns the result.</p> <p>Parameters:</p> <ul> <li><code>args</code> (table): Required. A table of strings representing the command and arguments to pass to the AWS CLI (e.g., <code>{\"s3\", \"ls\", \"--recursive\"}</code>).</li> <li><code>opts</code> (table): Optional. A table of options for the execution.<ul> <li><code>profile</code> (string): If provided, the command will be executed using <code>aws-vault exec &lt;profile&gt; -- aws ...</code>. If omitted, it will run <code>aws ...</code> directly.</li> </ul> </li> </ul> <p>Returns:</p> <p>A table containing the following fields: - <code>stdout</code> (string): The standard output from the command. - <code>stderr</code> (string): The standard error from the command. - <code>exit_code</code> (number): The exit code of the command. <code>0</code> typically indicates success.</p> <p>Example:</p> <pre><code>-- Using default credentials\nlocal result = aws.exec({\"sts\", \"get-caller-identity\"})\nif result.exit_code == 0 then\n  print(result.stdout)\nend\n\n-- Using an aws-vault profile\nlocal result_with_profile = aws.exec({\"ec2\", \"describe-instances\"}, {profile = \"my-prod-profile\"})\n</code></pre>"},{"location":"modules/aws/#s3-helpers","title":"S3 Helpers","text":""},{"location":"modules/aws/#awss3syncparams","title":"<code>aws.s3.sync(params)</code>","text":"<p>A high-level wrapper for the <code>aws s3 sync</code> command, useful for synchronizing directories with S3.</p> <p>Parameters:</p> <ul> <li><code>params</code> (table): A table containing the following fields:<ul> <li><code>source</code> (string): Required. The source directory or S3 path.</li> <li><code>destination</code> (string): Required. The destination directory or S3 path.</li> <li><code>profile</code> (string): Optional. The <code>aws-vault</code> profile to use.</li> <li><code>delete</code> (boolean): Optional. If <code>true</code>, adds the <code>--delete</code> flag to the sync command.</li> </ul> </li> </ul> <p>Returns:</p> <ul> <li><code>true</code> on success.</li> <li><code>false, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>local ok, err = aws.s3.sync({\n  source = \"./build\",\n  destination = \"s3://my-app-bucket/static\",\n  profile = \"deployment-profile\",\n  delete = true\n})\nif not ok then\n  log.error(\"S3 sync failed: \" .. err)\nend\n</code></pre>"},{"location":"modules/aws/#secrets-manager-helpers","title":"Secrets Manager Helpers","text":""},{"location":"modules/aws/#awssecretsmanagerget_secretparams","title":"<code>aws.secretsmanager.get_secret(params)</code>","text":"<p>Retrieves a secret's value from AWS Secrets Manager. This function simplifies the process by directly returning the <code>SecretString</code>.</p> <p>Parameters:</p> <ul> <li><code>params</code> (table): A table containing the following fields:<ul> <li><code>secret_id</code> (string): Required. The name or ARN of the secret to retrieve.</li> <li><code>profile</code> (string): Optional. The <code>aws-vault</code> profile to use.</li> </ul> </li> </ul> <p>Returns:</p> <ul> <li><code>secret_string</code> (string) on success.</li> <li><code>nil, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>local db_password, err = aws.secretsmanager.get_secret({\n  secret_id = \"production/database/password\",\n  profile = \"my-app-profile\"\n})\n\nif not db_password then\n  log.error(\"Failed to get secret: \" .. err)\n  return false, \"Config failed.\"\nend\n\n-- Now you can use the db_password variable\n</code></pre>"},{"location":"modules/azure/","title":"Azure Module","text":"<p>The <code>azure</code> module provides an interface for interacting with Microsoft Azure using the <code>az</code> command-line tool.</p>"},{"location":"modules/azure/#configuration","title":"Configuration","text":"<p>This module requires the <code>az</code> CLI to be installed and authenticated. Before running pipelines that use this module, you must log in to your Azure account:</p> <pre><code>az login\n</code></pre> <p>The module will use your logged-in credentials for all commands.</p>"},{"location":"modules/azure/#generic-executor","title":"Generic Executor","text":""},{"location":"modules/azure/#azureexecargs","title":"<code>azure.exec(args)</code>","text":"<p>Executes any <code>az</code> command. This function automatically adds the <code>--output json</code> flag (if not already present) to ensure that the output is machine-parsable.</p> <p>Parameters:</p> <ul> <li><code>args</code> (table): Required. A table of strings representing the command and arguments to pass to <code>az</code> (e.g., <code>{\"group\", \"list\", \"--location\", \"eastus\"}</code>).</li> </ul> <p>Returns:</p> <p>A table containing the following fields: - <code>stdout</code> (string): The standard output from the command (as a JSON string). - <code>stderr</code> (string): The standard error from the command. - <code>exit_code</code> (number): The exit code of the command. <code>0</code> typically indicates success.</p> <p>Example:</p> <pre><code>local result = azure.exec({\"account\", \"show\"})\nif result.exit_code == 0 then\n  local account_info, err = data.parse_json(result.stdout)\n  if account_info then\n    log.info(\"Logged in as: \" .. account_info.user.name)\n  end\nend\n</code></pre>"},{"location":"modules/azure/#resource-group-rg-helpers","title":"Resource Group (RG) Helpers","text":""},{"location":"modules/azure/#azurergdeleteparams","title":"<code>azure.rg.delete(params)</code>","text":"<p>Deletes a resource group.</p> <p>Parameters:</p> <ul> <li><code>params</code> (table): A table containing the following fields:<ul> <li><code>name</code> (string): Required. The name of the resource group to delete.</li> <li><code>yes</code> (boolean): Optional. If <code>true</code>, adds the <code>--yes</code> flag to bypass the confirmation prompt.</li> </ul> </li> </ul> <p>Returns:</p> <ul> <li><code>true</code> on success.</li> <li><code>false, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>local ok, err = azure.rg.delete({\n  name = \"my-test-rg\",\n  yes = true\n})\nif not ok then\n  log.error(\"Failed to delete resource group: \" .. err)\nend\n</code></pre>"},{"location":"modules/azure/#virtual-machine-vm-helpers","title":"Virtual Machine (VM) Helpers","text":""},{"location":"modules/azure/#azurevmlistparams","title":"<code>azure.vm.list(params)</code>","text":"<p>Lists virtual machines.</p> <p>Parameters:</p> <ul> <li><code>params</code> (table): Optional. A table containing the following fields:<ul> <li><code>resource_group</code> (string): The name of a resource group to scope the list to. If omitted, lists VMs in the entire subscription.</li> </ul> </li> </ul> <p>Returns:</p> <ul> <li><code>vms</code> (table) on success, where the table is a parsed JSON array of your VM objects.</li> <li><code>nil, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>-- List all VMs in the subscription\nlocal all_vms, err1 = azure.vm.list()\n\n-- List VMs in a specific resource group\nlocal specific_vms, err2 = azure.vm.list({resource_group = \"my-production-rg\"})\nif specific_vms then\n  for _, vm in ipairs(specific_vms) do\n    print(\"Found VM: \" .. vm.name)\n  end\nend\n</code></pre>"},{"location":"modules/data/","title":"Data Module","text":"<p>The <code>data</code> module provides functions for parsing and serializing data between Lua tables and common data formats like JSON and YAML.</p> <p>---\\n</p>"},{"location":"modules/data/#dataparse_jsonjson_string","title":"<code>data.parse_json(json_string)</code>","text":"<p>Parses a JSON string into a Lua table.</p> <ul> <li>Parameters:<ul> <li><code>json_string</code> (string): The JSON formatted string to parse.</li> </ul> </li> <li>Returns:<ul> <li><code>table</code>: The resulting Lua table.</li> <li><code>error</code>: An error object if parsing fails.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"modules/data/#datato_jsonlua_table","title":"<code>data.to_json(lua_table)</code>","text":"<p>Serializes a Lua table into a JSON string.</p> <ul> <li>Parameters:<ul> <li><code>lua_table</code> (table): The Lua table to serialize.</li> </ul> </li> <li>Returns:<ul> <li><code>string</code>: The resulting JSON string.</li> <li><code>error</code>: An error object if serialization fails.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"modules/data/#dataparse_yamlyaml_string","title":"<code>data.parse_yaml(yaml_string)</code>","text":"<p>Parses a YAML string into a Lua table.</p> <ul> <li>Parameters:<ul> <li><code>yaml_string</code> (string): The YAML formatted string to parse.</li> </ul> </li> <li>Returns:<ul> <li><code>table</code>: The resulting Lua table.</li> <li><code>error</code>: An error object if parsing fails.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"modules/data/#datato_yamllua_table","title":"<code>data.to_yaml(lua_table)</code>","text":"<p>Serializes a Lua table into a YAML string.</p> <ul> <li>Parameters:<ul> <li><code>lua_table</code> (table): The Lua table to serialize.</li> </ul> </li> <li>Returns:<ul> <li><code>string</code>: The resulting YAML string.</li> <li><code>error</code>: An error object if serialization fails.</li> </ul> </li> </ul>"},{"location":"modules/data/#example","title":"Example","text":"<pre><code>command = function()\n  local data = require(\"data\")\n\n  -- JSON Example\n  log.info(\"Testing JSON serialization...\")\n  local my_table = { name = \"sloth-runner\", version = 1.0, features = { \"tasks\", \"lua\" } }\n  local json_str, err = data.to_json(my_table)\n  if err then\n    return false, \"Failed to serialize to JSON: \" .. err\n  end\n  print(\"Serialized JSON: \" .. json_str)\n\n  log.info(\"Testing JSON parsing...\")\n  local parsed_table, err = data.parse_json(json_str)\n  if err then\n    return false, \"Failed to parse JSON: \" .. err\n  end\n  log.info(\"Parsed name from JSON: \" .. parsed_table.name)\n\n  -- YAML Example\n  log.info(\"Testing YAML serialization...\")\n  local yaml_str, err = data.to_yaml(my_table)\n  if err then\n    return false, \"Failed to serialize to YAML: \" .. err\n  end\n  print(\"Serialized YAML:\\n\" .. yaml_str)\n\n  log.info(\"Testing YAML parsing...\")\n  parsed_table, err = data.parse_yaml(yaml_str)\n  if err then\n    return false, \"Failed to parse YAML: \" .. err\n  end\n  log.info(\"Parsed version from YAML: \" .. parsed_table.version)\n\n  return true, \"Data module operations successful.\"\nend\n</code></pre>"},{"location":"modules/digitalocean/","title":"DigitalOcean Module","text":"<p>The <code>digitalocean</code> module provides an interface for interacting with your DigitalOcean resources using the <code>doctl</code> command-line tool.</p>"},{"location":"modules/digitalocean/#configuration","title":"Configuration","text":"<p>This module requires the <code>doctl</code> CLI to be installed and authenticated. The standard way to do this is to generate a personal access token in your DigitalOcean control panel and set it as the <code>DIGITALOCEAN_ACCESS_TOKEN</code> environment variable.</p> <pre><code>export DIGITALOCEAN_ACCESS_TOKEN=\"your_do_api_token_here\"\n</code></pre> <p>The module will automatically use this token for all commands.</p>"},{"location":"modules/digitalocean/#generic-executor","title":"Generic Executor","text":""},{"location":"modules/digitalocean/#digitaloceanexecargs","title":"<code>digitalocean.exec(args)</code>","text":"<p>Executes any <code>doctl</code> command. This function automatically adds the <code>--output json</code> flag to ensure that the output is machine-parsable.</p> <p>Parameters:</p> <ul> <li><code>args</code> (table): Required. A table of strings representing the command and arguments to pass to <code>doctl</code> (e.g., <code>{\"compute\", \"droplet\", \"list\"}</code>).</li> </ul> <p>Returns:</p> <p>A table containing the following fields: - <code>stdout</code> (string): The standard output from the command (as a JSON string). - <code>stderr</code> (string): The standard error from the command. - <code>exit_code</code> (number): The exit code of the command. <code>0</code> typically indicates success.</p> <p>Example:</p> <pre><code>local result = digitalocean.exec({\"account\", \"get\"})\nif result.exit_code == 0 then\n  local account_info, err = data.parse_json(result.stdout)\n  if account_info then\n    log.info(\"Account status: \" .. account_info.status)\n  end\nend\n</code></pre>"},{"location":"modules/digitalocean/#droplets-helpers","title":"Droplets Helpers","text":""},{"location":"modules/digitalocean/#digitaloceandropletslist","title":"<code>digitalocean.droplets.list()</code>","text":"<p>A high-level wrapper to list all Droplets in your account.</p> <p>Returns:</p> <ul> <li><code>droplets</code> (table) on success, where the table is a parsed JSON array of your Droplet objects.</li> <li><code>nil, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>local droplets, err = digitalocean.droplets.list()\nif droplets then\n  for _, droplet in ipairs(droplets) do\n    print(\"Found Droplet: \" .. droplet.name)\n  end\nend\n</code></pre>"},{"location":"modules/digitalocean/#digitaloceandropletsdeleteparams","title":"<code>digitalocean.droplets.delete(params)</code>","text":"<p>Deletes a specific Droplet by its ID.</p> <p>Parameters:</p> <ul> <li><code>params</code> (table): A table containing the following fields:<ul> <li><code>id</code> (string): Required. The ID of the Droplet to delete.</li> <li><code>force</code> (boolean): Optional. If <code>true</code>, adds the <code>--force</code> flag to bypass the confirmation prompt. Defaults to <code>false</code>.</li> </ul> </li> </ul> <p>Returns:</p> <ul> <li><code>true</code> on success.</li> <li><code>false, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>local ok, err = digitalocean.droplets.delete({\n  id = \"123456789\",\n  force = true\n})\nif not ok then\n  log.error(\"Failed to delete droplet: \" .. err)\nend\n</code></pre>"},{"location":"modules/docker/","title":"Docker Module","text":"<p>The <code>docker</code> module provides a convenient interface for interacting with the Docker daemon, allowing you to build, run, and push Docker images as part of your pipelines.</p>"},{"location":"modules/docker/#configuration","title":"Configuration","text":"<p>This module requires the <code>docker</code> CLI to be installed and the Docker daemon to be running and accessible.</p>"},{"location":"modules/docker/#functions","title":"Functions","text":""},{"location":"modules/docker/#dockerexecargs","title":"<code>docker.exec(args)</code>","text":"<p>Executes any raw <code>docker</code> command.</p> <ul> <li><code>args</code> (table): Required. A list of arguments to pass to the <code>docker</code> command (e.g., <code>{\"ps\", \"-a\"}</code>).</li> <li>Returns: A result table with <code>success</code>, <code>stdout</code>, <code>stderr</code>, and <code>exit_code</code>.</li> </ul>"},{"location":"modules/docker/#dockerbuildparams","title":"<code>docker.build(params)</code>","text":"<p>Builds a Docker image using <code>docker build</code>.</p> <ul> <li><code>params</code> (table):<ul> <li><code>tag</code> (string): Required. The tag for the image (e.g., <code>my-app:latest</code>).</li> <li><code>path</code> (string): Required. The build context path.</li> <li><code>dockerfile</code> (string): Optional. The path to the Dockerfile.</li> <li><code>build_args</code> (table): Optional. A table of build arguments (e.g., <code>{VERSION = \"1.0\"}</code>).</li> </ul> </li> <li>Returns: A result table.</li> </ul>"},{"location":"modules/docker/#dockerpushparams","title":"<code>docker.push(params)</code>","text":"<p>Pushes a Docker image to a registry using <code>docker push</code>.</p> <ul> <li><code>params</code> (table):<ul> <li><code>tag</code> (string): Required. The tag of the image to push.</li> </ul> </li> <li>Returns: A result table.</li> </ul>"},{"location":"modules/docker/#dockerrunparams","title":"<code>docker.run(params)</code>","text":"<p>Runs a Docker container using <code>docker run</code>.</p> <ul> <li><code>params</code> (table):<ul> <li><code>image</code> (string): Required. The image to run.</li> <li><code>name</code> (string): Optional. The name for the container.</li> <li><code>detach</code> (boolean): Optional. If <code>true</code>, runs the container in the background (<code>-d</code>).</li> <li><code>ports</code> (table): Optional. A list of port mappings (e.g., <code>{\"8080:80\"}</code>).</li> <li><code>env</code> (table): Optional. A table of environment variables (e.g., <code>{MY_VAR = \"value\"}</code>).</li> </ul> </li> <li>Returns: A result table.</li> </ul>"},{"location":"modules/docker/#example","title":"Example","text":"<pre><code>local image_tag = \"my-test-image:latest\"\n\n-- Task 1: Build\nlocal result_build = docker.build({\n  tag = image_tag,\n  path = \"./app\"\n})\nif not result_build.success then return false, \"Build failed\" end\n\n-- Task 2: Run\nlocal result_run = docker.run({\n  image = image_tag,\n  name = \"my-test-container\",\n  ports = {\"8080:80\"}\n})\nif not result_run.success then return false, \"Run failed\" end\n\n-- Task 3: Push (after successful testing)\nlocal result_push = docker.push({tag = image_tag})\nif not result_push.success then return false, \"Push failed\" end\n</code></pre>"},{"location":"modules/exec/","title":"Exec Module","text":"<p>The <code>exec</code> module is one of the most fundamental modules in <code>sloth-runner</code>. It provides a powerful function to execute arbitrary shell commands, giving you full control over the execution environment.</p>"},{"location":"modules/exec/#execruncommand-options","title":"<code>exec.run(command, [options])</code>","text":"<p>Executes a shell command using <code>bash -c</code>.</p>"},{"location":"modules/exec/#parameters","title":"Parameters","text":"<ul> <li><code>command</code> (string): The shell command to execute.</li> <li><code>options</code> (table, optional): A table of options to control the execution.<ul> <li><code>workdir</code> (string): The working directory where the command should be executed. If not provided, it runs in the task group's temporary directory (if available) or the current directory.</li> <li><code>env</code> (table): A dictionary of environment variables (key-value pairs) to set for the command's execution. These are added to the existing environment.</li> </ul> </li> </ul>"},{"location":"modules/exec/#returns","title":"Returns","text":"<p>A table containing the result of the command execution:</p> <ul> <li><code>success</code> (boolean): <code>true</code> if the command exited with a code of <code>0</code>, otherwise <code>false</code>.</li> <li><code>stdout</code> (string): The standard output from the command.</li> <li><code>stderr</code> (string): The standard error output from the command.</li> </ul>"},{"location":"modules/exec/#example","title":"Example","text":"<p>This example demonstrates how to use <code>exec.run</code> with a custom working directory and environment variables.</p> <pre><code>-- examples/exec_module_example.sloth\n\nModern DSLs = {\n  main = {\n    description = \"A task to demonstrate the exec module.\",\n    tasks = {\n      {\n        name = \"run-with-options\",\n        description = \"Executes a command with a custom workdir and environment.\",\n        command = function()\n          log.info(\"Preparing to run a custom command...\")\n\n          local exec = require(\"exec\")\n\n          -- Create a temporary directory for the example\n          local temp_dir = \"/tmp/sloth-exec-test\"\n          fs.mkdir(temp_dir)\n          fs.write(temp_dir .. \"/test.txt\", \"hello from test file\")\n\n          -- Define options\n          local options = {\n            workdir = temp_dir,\n            env = {\n              MY_VAR = \"SlothRunner\",\n              ANOTHER_VAR = \"is_awesome\"\n            }\n          }\n\n          -- Execute the command\n          local result = exec.run(\"echo 'MY_VAR is $MY_VAR' &amp;&amp; ls -l &amp;&amp; cat test.txt\", options)\n\n          -- Clean up the temporary directory\n          fs.rm_r(temp_dir)\n\n          if result.success then\n            log.info(\"Command executed successfully!\")\n            print(\"--- STDOUT ---\")\n            print(result.stdout)\n            print(\"--------------\")\n            return true, \"Exec command successful.\"\n          else\n            log.error(\"Exec command failed.\")\n            log.error(\"Stderr: \" .. result.stderr)\n            return false, \"Exec command failed.\"\n          end\n        end\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"modules/fs/","title":"FS Module","text":"<p>The <code>fs</code> module provides essential functions for interacting with the file system directly from your Lua scripts.</p>"},{"location":"modules/fs/#fsreadpath","title":"<code>fs.read(path)</code>","text":"<p>Reads the entire content of a file.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The path to the file.</li> </ul> </li> <li>Returns:<ul> <li><code>string</code>: The content of the file.</li> <li><code>error</code>: An error object if the read fails.</li> </ul> </li> </ul>"},{"location":"modules/fs/#fswritepath-content","title":"<code>fs.write(path, content)</code>","text":"<p>Writes content to a file, overwriting it if it already exists.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The path to the file.</li> <li><code>content</code> (string): The content to write.</li> </ul> </li> <li>Returns:<ul> <li><code>error</code>: An error object if the write fails.</li> </ul> </li> </ul>"},{"location":"modules/fs/#fsappendpath-content","title":"<code>fs.append(path, content)</code>","text":"<p>Appends content to the end of a file. Creates the file if it doesn't exist.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The path to the file.</li> <li><code>content</code> (string): The content to append.</li> </ul> </li> <li>Returns:<ul> <li><code>error</code>: An error object if the append fails.</li> </ul> </li> </ul>"},{"location":"modules/fs/#fsexistspath","title":"<code>fs.exists(path)</code>","text":"<p>Checks if a file or directory exists at the given path.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The path to check.</li> </ul> </li> <li>Returns:<ul> <li><code>boolean</code>: <code>true</code> if the path exists, <code>false</code> otherwise.</li> </ul> </li> </ul>"},{"location":"modules/fs/#fsmkdirpath","title":"<code>fs.mkdir(path)</code>","text":"<p>Creates a directory at the given path, including any necessary parent directories (like <code>mkdir -p</code>).</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The directory path to create.</li> </ul> </li> <li>Returns:<ul> <li><code>error</code>: An error object if the creation fails.</li> </ul> </li> </ul>"},{"location":"modules/fs/#fsrmpath","title":"<code>fs.rm(path)</code>","text":"<p>Removes a single file.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The path to the file to remove.</li> </ul> </li> <li>Returns:<ul> <li><code>error</code>: An error object if the removal fails.</li> </ul> </li> </ul>"},{"location":"modules/fs/#fsrm_rpath","title":"<code>fs.rm_r(path)</code>","text":"<p>Removes a file or directory recursively (like <code>rm -rf</code>).</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The path to remove.</li> </ul> </li> <li>Returns:<ul> <li><code>error</code>: An error object if the removal fails.</li> </ul> </li> </ul>"},{"location":"modules/fs/#fslspath","title":"<code>fs.ls(path)</code>","text":"<p>Lists the contents of a directory.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The path to the directory.</li> </ul> </li> <li>Returns:<ul> <li><code>table</code>: A table containing the names of files and subdirectories.</li> <li><code>error</code>: An error object if the listing fails.</li> </ul> </li> </ul>"},{"location":"modules/fs/#fstmpname","title":"<code>fs.tmpname()</code>","text":"<p>Generates a unique temporary directory path. Note: This function only returns the name; it does not create the directory.</p> <ul> <li>Returns:<ul> <li><code>string</code>: A unique path suitable for a temporary directory.</li> <li><code>error</code>: An error object if a name could not be generated.</li> </ul> </li> </ul>"},{"location":"modules/fs/#example","title":"Example","text":"<pre><code>command = function()\n  local fs = require(\"fs\")\n\n  local tmp_dir = \"/tmp/fs-example\"\n  log.info(\"Creating directory: \" .. tmp_dir)\n  fs.mkdir(tmp_dir)\n\n  local file_path = tmp_dir .. \"/my_file.txt\"\n  log.info(\"Writing to file: \" .. file_path)\n  fs.write(file_path, \"Hello, Sloth Runner!\\n\")\n\n  log.info(\"Appending to file...\")\n  fs.append(file_path, \"This is a new line.\")\n\n  if fs.exists(file_path) then\n    log.info(\"File content: \" .. fs.read(file_path))\n  end\n\n  log.info(\"Listing contents of \" .. tmp_dir)\n  local contents = fs.ls(tmp_dir)\n  for i, name in ipairs(contents) do\n    print(\"- \" .. name)\n  end\n\n  log.info(\"Cleaning up...\")\n  fs.rm_r(tmp_dir)\n\n  return true, \"FS module operations successful.\"\nend\n</code></pre>"},{"location":"modules/gcp/","title":"GCP Module","text":"<p>The <code>gcp</code> module provides a simple interface for executing Google Cloud CLI (<code>gcloud</code>) commands from within a <code>sloth-runner</code> task.</p>"},{"location":"modules/gcp/#gcpexecargs","title":"<code>gcp.exec(args)</code>","text":"<p>Executes a <code>gcloud</code> command with the specified arguments.</p>"},{"location":"modules/gcp/#parameters","title":"Parameters","text":"<ul> <li><code>args</code> (table): A Lua table (array) of strings representing the arguments to pass to the <code>gcloud</code> command. For example, <code>{\"compute\", \"instances\", \"list\"}</code>.</li> </ul>"},{"location":"modules/gcp/#returns","title":"Returns","text":"<p>A table containing the result of the command execution with the following keys:</p> <ul> <li><code>stdout</code> (string): The standard output from the command.</li> <li><code>stderr</code> (string): The standard error output from the command.</li> <li><code>exit_code</code> (number): The exit code of the command. An exit code of <code>0</code> typically indicates success.</li> </ul>"},{"location":"modules/gcp/#example","title":"Example","text":"<p>This example defines a task that lists all Compute Engine instances in the <code>us-central1</code> region for a specific project.</p> <pre><code>-- examples/gcp_cli_example.sloth\n\nModern DSLs = {\n  main = {\n    description = \"A task to list GCP compute instances.\",\n    tasks = {\n      {\n        name = \"list-instances\",\n        description = \"Lists GCE instances in us-central1.\",\n        command = function()\n          log.info(\"Listing GCP instances...\")\n\n          -- require the gcp module to make it available\n          local gcp = require(\"gcp\")\n\n          -- Execute the gcloud command\n          local result = gcp.exec({\n            \"compute\", \n            \"instances\", \n            \"list\", \n            \"--project\", \"my-gcp-project-id\",\n            \"--zones\", \"us-central1-a,us-central1-b\"\n          })\n\n          -- Check the result\n          if result and result.exit_code == 0 then\n            log.info(\"Successfully listed instances.\")\n            print(\"--- INSTANCE LIST ---\")\n            print(result.stdout)\n            print(\"---------------------\")\n            return true, \"GCP command successful.\"\n          else\n            log.error(\"Failed to list GCP instances.\")\n            if result then\n              log.error(\"Stderr: \" .. result.stderr)\n            end\n            return false, \"GCP command failed.\"\n          end\n        end\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"modules/git/","title":"Git Module","text":"<p>The <code>git</code> module provides a fluent API to interact with Git repositories, allowing you to automate common version control operations like cloning, committing, and pushing.</p>"},{"location":"modules/git/#gitcloneurl-path","title":"<code>git.clone(url, path)</code>","text":"<p>Clones a Git repository to a local path.</p> <ul> <li>Parameters:<ul> <li><code>url</code> (string): The URL of the repository to clone.</li> <li><code>path</code> (string): The local directory to clone into.</li> </ul> </li> <li>Returns:<ul> <li><code>repo</code> (object): A <code>GitRepo</code> object on success.</li> <li><code>error</code>: An error object if the clone fails.</li> </ul> </li> </ul>"},{"location":"modules/git/#gitrepopath","title":"<code>git.repo(path)</code>","text":"<p>Opens an existing local Git repository.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The path to the existing local repository.</li> </ul> </li> <li>Returns:<ul> <li><code>repo</code> (object): A <code>GitRepo</code> object on success.</li> <li><code>error</code>: An error object if the path is not a valid Git repository.</li> </ul> </li> </ul>"},{"location":"modules/git/#the-gitrepo-object","title":"The <code>GitRepo</code> Object","text":"<p>This object represents a local repository and provides chainable methods for performing Git operations.</p>"},{"location":"modules/git/#repocheckoutref","title":"<code>repo:checkout(ref)</code>","text":"<p>Checks out a specific branch, tag, or commit.</p> <ul> <li>Parameters: <code>ref</code> (string).</li> </ul>"},{"location":"modules/git/#repopullremote-branch","title":"<code>repo:pull(remote, branch)</code>","text":"<p>Pulls changes from a remote.</p> <ul> <li>Parameters: <code>remote</code> (string), <code>branch</code> (string).</li> </ul>"},{"location":"modules/git/#repoaddpattern","title":"<code>repo:add(pattern)</code>","text":"<p>Stages files for a commit.</p> <ul> <li>Parameters: <code>pattern</code> (string), e.g., <code>\".\"</code> or <code>\"path/to/file.txt\"</code>.</li> </ul>"},{"location":"modules/git/#repocommitmessage","title":"<code>repo:commit(message)</code>","text":"<p>Creates a commit.</p> <ul> <li>Parameters: <code>message</code> (string).</li> </ul>"},{"location":"modules/git/#repotagname-message","title":"<code>repo:tag(name, [message])</code>","text":"<p>Creates a new tag.</p> <ul> <li>Parameters: <code>name</code> (string), <code>message</code> (string, optional).</li> </ul>"},{"location":"modules/git/#repopushremote-branch-options","title":"<code>repo:push(remote, branch, [options])</code>","text":"<p>Pushes commits to a remote.</p> <ul> <li>Parameters:<ul> <li><code>remote</code> (string).</li> <li><code>branch</code> (string).</li> <li><code>options</code> (table, optional): e.g., <code>{ follow_tags = true }</code>.</li> </ul> </li> </ul>"},{"location":"modules/git/#reporesult","title":"<code>repo:result()</code>","text":"<p>This method is called at the end of a chain to get the result of the last operation.</p> <ul> <li>Returns:<ul> <li><code>result</code> (table): A table containing <code>success</code> (boolean), <code>stdout</code> (string), and <code>stderr</code> (string).</li> </ul> </li> </ul>"},{"location":"modules/git/#example","title":"Example","text":"<p>This example demonstrates a full CI/CD-like workflow: clone, create a version file, add, commit, tag, and push.</p> <pre><code>command = function()\n  local git = require(\"git\")\n  local repo_path = \"/tmp/git-example-repo\"\n\n  -- Clean up previous runs\n  fs.rm_r(repo_path)\n\n  -- 1. Clone the repository\n  log.info(\"Cloning repository...\")\n  local repo, err = git.clone(\"https://github.com/chalkan3-sloth/sloth-runner.git\", repo_path)\n  if err then\n    return false, \"Failed to clone: \" .. err\n  end\n\n  -- 2. Create and write a version file\n  fs.write(repo_path .. \"/VERSION\", \"1.2.3\")\n\n  -- 3. Chain Git commands: add -&gt; commit -&gt; tag -&gt; push\n  log.info(\"Adding, committing, tagging, and pushing...\")\n  repo:add(\".\"):commit(\"ci: Bump version to 1.2.3\"):tag(\"v1.2.3\"):push(\"origin\", \"main\", { follow_tags = true })\n\n  -- 4. Get the result of the final operation (push)\n  local result = repo:result()\n\n  if not result.success then\n    log.error(\"Git push failed: \" .. result.stderr)\n    return false, \"Git push failed.\"\n  end\n\n  log.info(\"Successfully pushed new version tag.\")\n  return true, \"Git operations successful.\"\nend\n</code></pre>"},{"location":"modules/gitops/","title":"\ud83d\udd04 GitOps Module - Complete API Reference","text":"<p>The GitOps module provides native Git-driven deployment workflows with intelligent diff preview, automatic rollback, and multi-environment support.</p>"},{"location":"modules/gitops/#module-overview","title":"\ud83d\udccb Module Overview","text":"<pre><code>local gitops = require(\"gitops\")\n</code></pre> <p>The GitOps module enables:</p> <ul> <li>\ud83c\udf0a Declarative Workflows - Git-driven deployment automation</li> <li>\ud83d\udd0d Intelligent Diff Preview - Visual change analysis before deployment</li> <li>\ud83d\udee1\ufe0f Smart Rollback - Automatic rollback on failure with state backup</li> <li>\ud83c\udfe2 Multi-Environment - Separate workflows for dev/staging/production</li> <li>\u2638\ufe0f Kubernetes Native - First-class Kubernetes integration</li> </ul>"},{"location":"modules/gitops/#quick-setup","title":"\ud83d\ude80 Quick Setup","text":""},{"location":"modules/gitops/#gitopsworkflowconfig","title":"<code>gitops.workflow(config)</code>","text":"<p>Create a simple GitOps workflow with minimal configuration.</p> <pre><code>local workflow = gitops.workflow({\n    repo = \"https://github.com/company/infrastructure\",\n    branch = \"main\",\n    auto_sync = true,\n    diff_preview = true,\n    rollback_on_failure = true\n})\n\n-- Returns: {workflow_id: \"workflow-123\", repository_id: \"repo-123\", status: \"created\"}\n</code></pre> <p>Parameters: - <code>repo</code> (string): Git repository URL - <code>branch</code> (string): Git branch to track (default: \"main\") - <code>auto_sync</code> (boolean): Enable automatic synchronization - <code>diff_preview</code> (boolean): Enable diff preview before sync - <code>rollback_on_failure</code> (boolean): Enable automatic rollback on failure</p> <p>Returns: <pre><code>{\n    workflow_id = \"workflow-1234567890\",\n    repository_id = \"repo-1234567890\", \n    status = \"created\",\n    auto_sync = true,\n    diff_preview = true,\n    rollback_on_failure = true\n}\n</code></pre></p>"},{"location":"modules/gitops/#repository-management","title":"\ud83c\udfd7\ufe0f Repository Management","text":""},{"location":"modules/gitops/#gitopsregister_repositoryconfig","title":"<code>gitops.register_repository(config)</code>","text":"<p>Register a Git repository for GitOps workflows.</p> <pre><code>local repo_id = gitops.register_repository({\n    id = \"production-repo\",           -- Optional custom ID\n    url = \"https://github.com/company/k8s-manifests\",\n    branch = \"main\",\n    credentials = {                   -- Optional authentication\n        type = \"token\",\n        token = \"ghp_xxxxxxxxxxxx\"\n    },\n    poll_interval = \"30s\"            -- How often to check for changes\n})\n</code></pre> <p>Parameters: - <code>id</code> (string): Custom repository ID (auto-generated if not provided) - <code>url</code> (string): Git repository URL - <code>branch</code> (string): Git branch to track - <code>credentials</code> (table): Authentication credentials   - <code>type</code> (string): \"token\", \"ssh\", or \"userpass\"   - <code>token</code> (string): Personal access token (for type=\"token\")   - <code>username</code> (string): Username (for type=\"userpass\")   - <code>password</code> (string): Password (for type=\"userpass\")   - <code>ssh_key</code> (string): SSH private key (for type=\"ssh\") - <code>poll_interval</code> (string): Polling interval for auto-sync</p>"},{"location":"modules/gitops/#workflow-management","title":"\ud83d\udd27 Workflow Management","text":""},{"location":"modules/gitops/#gitopscreate_workflowconfig","title":"<code>gitops.create_workflow(config)</code>","text":"<p>Create a detailed GitOps workflow with advanced configuration.</p> <pre><code>local workflow_id = gitops.create_workflow({\n    id = \"production-workflow\",       -- Optional custom ID\n    name = \"Production Infrastructure\",\n    repository = \"production-repo\",   -- Repository ID\n    target_path = \"k8s/production\",   -- Path within repository\n    auto_sync = false,                -- Manual sync for production\n    diff_preview = true,\n    rollback_on_failure = true,\n    sync_policy = {                   -- Advanced sync configuration\n        auto_prune = true,            -- Remove orphaned resources\n        retry = {\n            limit = 3,\n            backoff = \"exponential\"\n        },\n        health_check = {\n            enabled = true,\n            timeout = \"10m\"\n        }\n    }\n})\n</code></pre> <p>Parameters: - <code>id</code> (string): Custom workflow ID - <code>name</code> (string): Human-readable workflow name - <code>repository</code> (string): Repository ID to use - <code>target_path</code> (string): Path within repository to sync - <code>auto_sync</code> (boolean): Enable automatic synchronization - <code>diff_preview</code> (boolean): Enable diff preview - <code>rollback_on_failure</code> (boolean): Enable automatic rollback - <code>sync_policy</code> (table): Advanced synchronization policies</p>"},{"location":"modules/gitops/#gitopsget_workflow_statusworkflow_id","title":"<code>gitops.get_workflow_status(workflow_id)</code>","text":"<p>Get the current status of a GitOps workflow.</p> <pre><code>local status = gitops.get_workflow_status(\"workflow-123\")\n</code></pre> <p>Returns: <pre><code>{\n    id = \"workflow-123\",\n    name = \"Production Infrastructure\",\n    status = \"synced\",                -- active | syncing | synced | failed | degraded\n    auto_sync = false,\n    repository = \"production-repo\",\n    last_sync_result = {              -- Last synchronization result\n        id = \"sync-1234567890\",\n        status = \"succeeded\",         -- running | succeeded | failed\n        start_time = \"2024-01-15T10:30:00Z\",\n        commit_hash = \"abc123def456\",\n        message = \"Sync completed successfully\",\n        metrics = {\n            duration = \"45.2s\",\n            resources_processed = 15,\n            resources_applied = 8,\n            resources_skipped = 7,\n            conflicts_resolved = 0\n        }\n    }\n}\n</code></pre></p>"},{"location":"modules/gitops/#gitopslist_workflows","title":"<code>gitops.list_workflows()</code>","text":"<p>List all registered GitOps workflows.</p> <pre><code>local workflows = gitops.list_workflows()\n-- Returns array of workflow objects\n</code></pre>"},{"location":"modules/gitops/#synchronization","title":"\ud83d\udd04 Synchronization","text":""},{"location":"modules/gitops/#gitopssync_workflowworkflow_id","title":"<code>gitops.sync_workflow(workflow_id)</code>","text":"<p>Manually trigger synchronization for a workflow.</p> <pre><code>local success = gitops.sync_workflow(\"workflow-123\")\n-- Returns: true on success, false on failure\n</code></pre>"},{"location":"modules/gitops/#gitopsstart_auto_sync","title":"<code>gitops.start_auto_sync()</code>","text":"<p>Start the auto-sync controller for all workflows with <code>auto_sync = true</code>.</p> <pre><code>gitops.start_auto_sync()\n-- Starts background polling for all auto-sync enabled workflows\n</code></pre>"},{"location":"modules/gitops/#gitopsstop_auto_sync","title":"<code>gitops.stop_auto_sync()</code>","text":"<p>Stop the auto-sync controller.</p> <pre><code>gitops.stop_auto_sync()\n-- Stops all background synchronization\n</code></pre>"},{"location":"modules/gitops/#diff-preview","title":"\ud83d\udd0d Diff &amp; Preview","text":""},{"location":"modules/gitops/#gitopsgenerate_diffworkflow_id","title":"<code>gitops.generate_diff(workflow_id)</code>","text":"<p>Generate a comprehensive diff preview for pending changes.</p> <pre><code>local diff = gitops.generate_diff(\"workflow-123\")\n</code></pre> <p>Returns: <pre><code>{\n    workflow_id = \"workflow-123\",\n    generated_at = \"2024-01-15T10:30:00Z\",\n    summary = {                       -- High-level summary\n        total_changes = 5,\n        created_resources = 2,\n        updated_resources = 2,\n        deleted_resources = 1,\n        conflict_count = 0,\n        warning_count = 1\n    },\n    changes = {                       -- Detailed changes\n        {\n            type = \"create\",          -- create | update | delete\n            resource = \"Deployment/web-app\",\n            desired_state = {...},    -- New resource definition\n            diff = \"+ Creating Deployment/web-app with 3 replicas\",\n            impact = \"medium\"         -- low | medium | high | critical\n        },\n        {\n            type = \"update\", \n            resource = \"Service/web-svc\",\n            current_state = {...},    -- Current resource state\n            desired_state = {...},    -- Desired resource state\n            diff = \"~ Updating Service/web-svc:\\n  port: 80 -&gt; 8080\",\n            impact = \"low\"\n        }\n    },\n    conflicts = {                     -- Detected conflicts\n        {\n            resource = \"ConfigMap/app-config\",\n            type = \"validation\",      -- resource_exists | out_of_sync | validation\n            description = \"Resource modified outside of GitOps\",\n            current_state = {...},\n            desired_state = {...},\n            suggestions = [\n                \"Review manual changes before proceeding\",\n                \"Consider updating the Git repository\"\n            ]\n        }\n    },\n    warnings = [                      -- Warnings and recommendations\n        \"High-impact change detected: Deployment/critical-app\"\n    ]\n}\n</code></pre></p>"},{"location":"modules/gitops/#gitopspreview_changesworkflow_id","title":"<code>gitops.preview_changes(workflow_id)</code>","text":"<p>Alias for <code>gitops.generate_diff()</code> for better readability.</p> <pre><code>local preview = gitops.preview_changes(\"workflow-123\")\n-- Same as gitops.generate_diff()\n</code></pre>"},{"location":"modules/gitops/#rollback","title":"\ud83d\udee1\ufe0f Rollback","text":""},{"location":"modules/gitops/#gitopsrollback_workflowworkflow_id-reason","title":"<code>gitops.rollback_workflow(workflow_id, reason)</code>","text":"<p>Rollback a workflow to its previous state.</p> <pre><code>local success = gitops.rollback_workflow(\"workflow-123\", \"Health check failed\")\n-- Returns: true on success, false on failure\n</code></pre> <p>Parameters: - <code>workflow_id</code> (string): Workflow to rollback - <code>reason</code> (string): Reason for rollback (for audit logging)</p>"},{"location":"modules/gitops/#complete-examples","title":"\ud83c\udfaf Complete Examples","text":""},{"location":"modules/gitops/#multi-environment-setup","title":"Multi-Environment Setup","text":"<pre><code>local gitops = require(\"gitops\")\nlocal log = require(\"log\")\n\n-- Define environments\nlocal environments = {\n    {\n        name = \"development\",\n        repo = \"https://github.com/company/k8s-dev\",\n        branch = \"develop\",\n        auto_sync = true,\n        sync_interval = \"5m\"\n    },\n    {\n        name = \"staging\",\n        repo = \"https://github.com/company/k8s-staging\",\n        branch = \"staging\", \n        auto_sync = true,\n        sync_interval = \"10m\"\n    },\n    {\n        name = \"production\",\n        repo = \"https://github.com/company/k8s-prod\",\n        branch = \"main\",\n        auto_sync = false,      -- Manual deployments in production\n        approval_required = true\n    }\n}\n\n-- Create workflows for all environments\nlocal workflows = {}\nfor _, env in ipairs(environments) do\n    -- Register repository\n    local repo_id = gitops.register_repository({\n        id = env.name .. \"-repo\",\n        url = env.repo,\n        branch = env.branch\n    })\n\n    -- Create workflow\n    local workflow_id = gitops.create_workflow({\n        id = env.name .. \"-workflow\",\n        name = env.name .. \" Environment\", \n        repository = repo_id,\n        target_path = \"manifests\",\n        auto_sync = env.auto_sync,\n        diff_preview = true,\n        rollback_on_failure = true\n    })\n\n    workflows[env.name] = workflow_id\n    log.info(\"Created GitOps workflow for \" .. env.name .. \": \" .. workflow_id)\nend\n\n-- Start auto-sync controller\ngitops.start_auto_sync()\n</code></pre>"},{"location":"modules/gitops/#production-deployment-with-validation","title":"Production Deployment with Validation","text":"<pre><code>local production_deploy = task(\"production_deploy\")\n    :description(\"Production deployment with full GitOps validation\")\n    :command(function(params, deps)\n        local workflow_id = workflows.production\n\n        -- Step 1: Generate diff and validate\n        log.info(\"\ud83d\udd0d Analyzing changes for production deployment...\")\n        local diff = gitops.generate_diff(workflow_id)\n\n        if not diff then\n            log.info(\"\u2139\ufe0f No changes detected\")\n            return {success = true, message = \"No changes to deploy\"}\n        end\n\n        -- Step 2: Display change summary\n        log.info(\"\ud83d\udcca Production Deployment Summary:\")\n        log.info(\"  \ud83d\udcdd Total changes: \" .. diff.summary.total_changes)\n        log.info(\"  \u2728 Created: \" .. diff.summary.created_resources)\n        log.info(\"  \ud83d\udd04 Updated: \" .. diff.summary.updated_resources)\n        log.info(\"  \ud83d\uddd1\ufe0f Deleted: \" .. diff.summary.deleted_resources)\n\n        -- Step 3: Check for conflicts and high-impact changes\n        if diff.summary.conflict_count &gt; 0 then\n            log.error(\"\ud83d\udca5 Conflicts detected - manual resolution required\")\n            return {success = false, message = \"Conflicts must be resolved\"}\n        end\n\n        local high_impact_changes = 0\n        for _, change in ipairs(diff.changes) do\n            if change.impact == \"high\" or change.impact == \"critical\" then\n                high_impact_changes = high_impact_changes + 1\n                log.warn(\"\u26a0\ufe0f High-impact: \" .. change.resource .. \" (\" .. change.type .. \")\")\n            end\n        end\n\n        -- Step 4: Show warnings\n        if #diff.warnings &gt; 0 then\n            log.warn(\"\u26a0\ufe0f Warnings:\")\n            for _, warning in ipairs(diff.warnings) do\n                log.warn(\"  \u2022 \" .. warning)\n            end\n        end\n\n        -- Step 5: Require approval for production\n        if high_impact_changes &gt; 0 then\n            print(\"\ud83d\udd12 High-impact changes detected. Proceed? (y/N)\")\n            local response = io.read()\n            if response:lower() ~= \"y\" then\n                return {success = false, message = \"Deployment cancelled\"}\n            end\n        end\n\n        -- Step 6: Execute deployment\n        log.info(\"\ud83d\ude80 Executing production deployment...\")\n        local sync_success = gitops.sync_workflow(workflow_id)\n\n        if not sync_success then\n            log.error(\"\ud83d\udca5 Production deployment failed!\")\n            return {success = false, message = \"Deployment failed\"}\n        end\n\n        -- Step 7: Verify deployment\n        log.info(\"\ud83d\udd0d Verifying deployment...\")\n        local status = gitops.get_workflow_status(workflow_id)\n\n        if status.status == \"synced\" and status.last_sync_result.status == \"succeeded\" then\n            log.info(\"\u2705 Production deployment successful!\")\n            log.info(\"\ud83d\udcca Applied \" .. status.last_sync_result.metrics.resources_applied .. \" resources\")\n            log.info(\"\u23f1\ufe0f Completed in \" .. status.last_sync_result.metrics.duration)\n            return {success = true, message = \"Production deployed successfully\"}\n        else\n            log.error(\"\ud83d\udca5 Deployment verification failed!\")\n\n            -- Automatic rollback\n            log.warn(\"\ud83d\udd04 Initiating automatic rollback...\")\n            local rollback_success = gitops.rollback_workflow(workflow_id, \"Deployment verification failed\")\n\n            if rollback_success then\n                log.info(\"\u2705 Automatic rollback completed\")\n                return {success = false, message = \"Deployment failed, rollback successful\"}\n            else\n                log.error(\"\ud83d\udca5 Rollback also failed!\")\n                return {success = false, message = \"Deployment and rollback both failed\"}\n            end\n        end\n    end)\n    :build()\n</code></pre>"},{"location":"modules/gitops/#kubernetes-specific-gitops","title":"Kubernetes-Specific GitOps","text":"<pre><code>local k8s_deploy = task(\"kubernetes_gitops_deploy\")\n    :description(\"Kubernetes-native GitOps deployment\")\n    :command(function(params, deps)\n        local workflow_id = params.workflow_id\n\n        -- Generate diff with Kubernetes-specific analysis\n        local diff = gitops.generate_diff(workflow_id)\n\n        -- Kubernetes-specific validations\n        local k8s_issues = {}\n        for _, change in ipairs(diff.changes) do\n            -- Check for dangerous Kubernetes operations\n            if change.type == \"delete\" then\n                if change.resource:match(\"Namespace\") then\n                    table.insert(k8s_issues, \"\ud83d\udea8 CRITICAL: Deleting namespace \" .. change.resource)\n                elseif change.resource:match(\"PersistentVolume\") then\n                    table.insert(k8s_issues, \"\u26a0\ufe0f WARNING: Deleting PersistentVolume \" .. change.resource)\n                end\n            end\n\n            if change.type == \"update\" and change.resource:match(\"Deployment\") then\n                log.info(\"\ud83d\udce6 Deployment update: \" .. change.resource)\n                -- Could add image change detection here\n            end\n        end\n\n        if #k8s_issues &gt; 0 then\n            log.warn(\"\ud83d\udea8 Kubernetes-specific issues detected:\")\n            for _, issue in ipairs(k8s_issues) do\n                log.warn(\"  \" .. issue)\n            end\n\n            print(\"Proceed despite Kubernetes warnings? (y/N)\")\n            local response = io.read()\n            if response:lower() ~= \"y\" then\n                return {success = false, message = \"Deployment cancelled due to K8s issues\"}\n            end\n        end\n\n        -- Execute Kubernetes deployment\n        local sync_success = gitops.sync_workflow(workflow_id)\n\n        if sync_success then\n            -- Kubernetes-specific post-deployment checks\n            log.info(\"\ud83d\udd0d Running Kubernetes health checks...\")\n\n            -- Could add kubectl-based health checks here\n            -- kubectl get pods --all-namespaces\n            -- kubectl get services\n            -- kubectl get ingress\n\n            return {success = true, message = \"Kubernetes deployment successful\"}\n        else\n            return {success = false, message = \"Kubernetes deployment failed\"}\n        end\n    end)\n    :build()\n</code></pre>"},{"location":"modules/gitops/#best-practices","title":"\ud83c\udfaf Best Practices","text":""},{"location":"modules/gitops/#1-environment-separation","title":"1. Environment Separation","text":"<pre><code>-- Use different repositories for different environments\nlocal env_repos = {\n    dev = \"company/k8s-dev\",\n    staging = \"company/k8s-staging\", \n    prod = \"company/k8s-prod\"\n}\n</code></pre>"},{"location":"modules/gitops/#2-always-preview-in-production","title":"2. Always Preview in Production","text":"<pre><code>-- Never deploy to production without reviewing changes\nif environment == \"production\" then\n    local diff = gitops.generate_diff(workflow_id)\n    if diff.summary.conflict_count &gt; 0 or has_high_impact_changes(diff) then\n        -- Require manual approval\n    end\nend\n</code></pre>"},{"location":"modules/gitops/#3-descriptive-rollback-reasons","title":"3. Descriptive Rollback Reasons","text":"<pre><code>-- Provide clear audit trail\ngitops.rollback_workflow(workflow_id, \"Health check failed after 5 minutes - CPU usage &gt; 90%\")\n</code></pre>"},{"location":"modules/gitops/#4-monitor-sync-results","title":"4. Monitor Sync Results","text":"<pre><code>-- Always verify deployment success\nlocal status = gitops.get_workflow_status(workflow_id)\nif status.last_sync_result.status ~= \"succeeded\" then\n    -- Handle failure appropriately\nend\n</code></pre>"},{"location":"modules/gitops/#5-use-auto-sync-judiciously","title":"5. Use Auto-Sync Judiciously","text":"<pre><code>-- Auto-sync for dev/staging, manual for production\nlocal auto_sync = environment ~= \"production\"\n</code></pre>"},{"location":"modules/gitops/#advanced-features","title":"\ud83d\udd27 Advanced Features","text":""},{"location":"modules/gitops/#custom-sync-policies","title":"Custom Sync Policies","text":"<pre><code>local workflow_id = gitops.create_workflow({\n    name = \"Advanced Sync Policy\",\n    repository = repo_id,\n    sync_policy = {\n        auto_prune = true,            -- Remove resources not in Git\n        retry = {\n            limit = 5,\n            backoff = \"exponential\",  -- exponential | linear | fixed\n            max_duration = \"10m\"\n        },\n        health_check = {\n            enabled = true,\n            timeout = \"10m\",\n            failure_mode = \"rollback\"  -- ignore | fail | rollback\n        },\n        pre_sync_hooks = [            -- Commands to run before sync\n            \"kubectl cluster-info\",\n            \"helm repo update\"\n        ],\n        post_sync_hooks = [           -- Commands to run after sync\n            \"kubectl rollout status deployment/app\",\n            \"curl -f http://app/health\"\n        ]\n    }\n})\n</code></pre>"},{"location":"modules/gitops/#multi-repository-coordination","title":"Multi-Repository Coordination","text":"<pre><code>-- Coordinate deployments across multiple repositories\nlocal repos = {\n    frontend = gitops.workflow({repo = \"company/frontend-config\"}),\n    backend = gitops.workflow({repo = \"company/backend-config\"}),\n    database = gitops.workflow({repo = \"company/database-config\"})\n}\n\n-- Deploy in dependency order\ngitops.sync_workflow(repos.database.workflow_id)\ngitops.sync_workflow(repos.backend.workflow_id) \ngitops.sync_workflow(repos.frontend.workflow_id)\n</code></pre>"},{"location":"modules/gitops/#integration-examples","title":"\ud83d\ude80 Integration Examples","text":""},{"location":"modules/gitops/#with-ai-module","title":"With AI Module","text":"<pre><code>local ai = require(\"ai\")\nlocal gitops = require(\"gitops\")\n\nlocal intelligent_deploy = task(\"ai_gitops_deploy\")\n    :command(function(params, deps)\n        local deploy_cmd = \"kubectl apply -f manifests/\"\n\n        -- AI failure prediction before GitOps deployment\n        local prediction = ai.predict_failure(\"ai_gitops_deploy\", deploy_cmd)\n\n        if prediction.failure_probability &gt; 0.25 then\n            log.warn(\"\ud83e\udd16 AI detected high deployment risk: \" .. \n                    string.format(\"%.1f%%\", prediction.failure_probability * 100))\n\n            for _, rec in ipairs(prediction.recommendations) do\n                log.info(\"\ud83d\udca1 AI Recommendation: \" .. rec)\n            end\n        end\n\n        -- GitOps deployment with AI insights\n        local workflow_id = params.gitops_workflow_id\n        local success = gitops.sync_workflow(workflow_id)\n\n        -- Record execution for AI learning\n        ai.record_execution({\n            task_name = \"ai_gitops_deploy\",\n            command = deploy_cmd,\n            success = success,\n            execution_time = \"30s\",\n            ai_prediction_used = true,\n            predicted_failure_probability = prediction.failure_probability\n        })\n\n        return {success = success}\n    end)\n    :build()\n</code></pre>"},{"location":"modules/gitops/#with-modern-dsl-workflows","title":"With Modern DSL Workflows","text":"<pre><code>workflow.define(\"gitops_pipeline\", {\n    description = \"Complete GitOps deployment pipeline\",\n    version = \"2.0.0\",\n\n    metadata = {\n        author = \"DevOps Team\",\n        tags = {\"gitops\", \"kubernetes\", \"production\"}\n    },\n\n    tasks = {\n        production_deploy,\n        k8s_deploy\n    },\n\n    on_task_start = function(task_name)\n        log.info(\"\ud83d\ude80 Starting GitOps task: \" .. task_name)\n    end,\n\n    on_task_complete = function(task_name, success, output)\n        if success then\n            log.info(\"\u2705 GitOps task completed: \" .. task_name)\n        else\n            log.error(\"\u274c GitOps task failed: \" .. task_name)\n\n            -- Could trigger emergency rollback here\n            if task_name == \"production_deploy\" then\n                log.warn(\"\ud83d\udd04 Triggering emergency rollback...\")\n                gitops.rollback_workflow(production_workflow_id, \"Emergency rollback due to task failure\")\n            end\n        end\n    end,\n\n    on_complete = function(success, results)\n        if success then\n            log.info(\"\ud83c\udf89 GitOps pipeline completed successfully!\")\n        else\n            log.error(\"\ud83d\udca5 GitOps pipeline failed - check logs for details\")\n        end\n    end\n})\n</code></pre>"},{"location":"modules/gitops/#see-also","title":"\ud83d\udcda See Also","text":"<ul> <li>GitOps Features Overview</li> <li>GitOps Quick Setup</li> <li>Multi-Environment GitOps</li> <li>Kubernetes Integration</li> <li>Rollback Strategies</li> </ul>"},{"location":"modules/goroutine/","title":"\ud83d\ude80 M\u00f3dulo Goroutine - Execu\u00e7\u00e3o Paralela Poderosa","text":""},{"location":"modules/goroutine/#visao-geral","title":"\ud83c\udf1f Vis\u00e3o Geral","text":"<p>O m\u00f3dulo <code>goroutine</code> traz o poder das goroutines do Go para seus scripts Lua, permitindo executar tarefas em paralelo com facilidade. Com este m\u00f3dulo, voc\u00ea pode:</p> <ul> <li>\u26a1 Executar m\u00faltiplas opera\u00e7\u00f5es simultaneamente - Reduzir tempo de execu\u00e7\u00e3o de minutos para segundos</li> <li>\ud83c\udfed Criar worker pools - Controlar concorr\u00eancia e processar grandes volumes de dados</li> <li>\ud83c\udfaf Async/Await pattern - Escrever c\u00f3digo ass\u00edncrono de forma limpa e leg\u00edvel</li> <li>\ud83d\udd04 WaitGroups - Sincronizar m\u00faltiplas goroutines facilmente</li> <li>\u23f1\ufe0f Timeout e error handling - Executar opera\u00e7\u00f5es com limites de tempo</li> </ul>"},{"location":"modules/goroutine/#casos-de-uso-reais","title":"\ud83d\udcbc Casos de Uso Reais","text":"Cen\u00e1rio Tempo Sequencial Com Goroutines Ganho \ud83d\ude80 Deploy em 10 servidores 5 minutos 30 segundos 10x mais r\u00e1pido \ud83c\udfe5 Health check de 20 servi\u00e7os 1 minuto 5 segundos 12x mais r\u00e1pido \ud83d\udcca Processar 1000 registros 10 segundos 1 segundo 10x mais r\u00e1pido"},{"location":"modules/goroutine/#importacao","title":"\ud83d\udce6 Importa\u00e7\u00e3o","text":"<pre><code>local goroutine = require(\"goroutine\")\n</code></pre>"},{"location":"modules/goroutine/#funcoes-disponiveis","title":"Fun\u00e7\u00f5es Dispon\u00edveis","text":""},{"location":"modules/goroutine/#1-goroutinespawnfunction","title":"1. <code>goroutine.spawn(function)</code>","text":"<p>Executa uma fun\u00e7\u00e3o em uma nova goroutine.</p> <p>Par\u00e2metros: - <code>function</code>: Fun\u00e7\u00e3o Lua a ser executada em paralelo</p> <p>Retorno: Nenhum</p> <p>Exemplo: <pre><code>goroutine.spawn(function()\n    log.info(\"Executando em paralelo!\")\nend)\n</code></pre></p>"},{"location":"modules/goroutine/#2-goroutinespawn_manycount-function","title":"2. <code>goroutine.spawn_many(count, function)</code>","text":"<p>Executa m\u00faltiplas inst\u00e2ncias de uma fun\u00e7\u00e3o em goroutines separadas.</p> <p>Par\u00e2metros: - <code>count</code> (number): N\u00famero de goroutines a criar - <code>function</code>: Fun\u00e7\u00e3o que recebe o ID da goroutine como par\u00e2metro</p> <p>Retorno: Nenhum</p> <p>Exemplo: <pre><code>goroutine.spawn_many(5, function(id)\n    log.info(\"Goroutine #\" .. tostring(id))\nend)\n</code></pre></p>"},{"location":"modules/goroutine/#3-goroutinewait_group","title":"3. <code>goroutine.wait_group()</code>","text":"<p>Cria um WaitGroup para sincroniza\u00e7\u00e3o de goroutines.</p> <p>Retorno: Objeto WaitGroup com os m\u00e9todos: - <code>add(delta)</code>: Incrementa o contador - <code>done()</code>: Decrementa o contador - <code>wait()</code>: Aguarda at\u00e9 o contador chegar a zero</p> <p>Exemplo: <pre><code>local wg = goroutine.wait_group()\n\nwg:add(3)\n\nfor i = 1, 3 do\n    goroutine.spawn(function()\n        -- Fazer trabalho\n        log.info(\"Worker \" .. i)\n        wg:done()\n    end)\nend\n\nwg:wait()  -- Aguarda todas as goroutines\n</code></pre></p>"},{"location":"modules/goroutine/#4-goroutinepool_createname-options","title":"4. <code>goroutine.pool_create(name, options)</code>","text":"<p>Cria um worker pool para gerenciar execu\u00e7\u00e3o paralela de tarefas.</p> <p>Par\u00e2metros: - <code>name</code> (string): Nome \u00fanico do pool - <code>options</code> (table): Configura\u00e7\u00f5es do pool   - <code>workers</code> (number): N\u00famero de workers (padr\u00e3o: 4)</p> <p>Retorno: <code>true</code> em sucesso</p> <p>Exemplo: <pre><code>goroutine.pool_create(\"mypool\", { workers = 10 })\n</code></pre></p>"},{"location":"modules/goroutine/#5-goroutinepool_submitname-function","title":"5. <code>goroutine.pool_submit(name, function, ...)</code>","text":"<p>Submete uma tarefa para execu\u00e7\u00e3o em um worker pool.</p> <p>Par\u00e2metros: - <code>name</code> (string): Nome do pool - <code>function</code>: Fun\u00e7\u00e3o a ser executada - <code>...</code>: Argumentos opcionais para a fun\u00e7\u00e3o</p> <p>Retorno:  - <code>task_id</code> (string): ID da tarefa submetida - <code>error</code> (string): Mensagem de erro se falhar</p> <p>Exemplo: <pre><code>local task_id = goroutine.pool_submit(\"mypool\", function()\n    return \"Resultado\"\nend)\n\nif task_id then\n    log.info(\"Tarefa submetida: \" .. task_id)\nend\n</code></pre></p>"},{"location":"modules/goroutine/#6-goroutinepool_waitname","title":"6. <code>goroutine.pool_wait(name)</code>","text":"<p>Aguarda at\u00e9 que todas as tarefas do pool sejam conclu\u00eddas.</p> <p>Par\u00e2metros: - <code>name</code> (string): Nome do pool</p> <p>Retorno: <code>true</code> em sucesso</p> <p>Exemplo: <pre><code>goroutine.pool_wait(\"mypool\")\n</code></pre></p>"},{"location":"modules/goroutine/#7-goroutinepool_closename","title":"7. <code>goroutine.pool_close(name)</code>","text":"<p>Fecha um worker pool e libera recursos.</p> <p>Par\u00e2metros: - <code>name</code> (string): Nome do pool</p> <p>Retorno: <code>true</code> em sucesso</p> <p>Exemplo: <pre><code>goroutine.pool_close(\"mypool\")\n</code></pre></p>"},{"location":"modules/goroutine/#8-goroutinepool_statsname","title":"8. <code>goroutine.pool_stats(name)</code>","text":"<p>Retorna estat\u00edsticas de um worker pool.</p> <p>Par\u00e2metros: - <code>name</code> (string): Nome do pool</p> <p>Retorno: Table com estat\u00edsticas: - <code>name</code> (string): Nome do pool - <code>workers</code> (number): N\u00famero de workers - <code>active</code> (number): Tarefas em execu\u00e7\u00e3o - <code>completed</code> (number): Tarefas conclu\u00eddas - <code>failed</code> (number): Tarefas que falharam - <code>queued</code> (number): Tarefas na fila</p> <p>Exemplo: <pre><code>local stats = goroutine.pool_stats(\"mypool\")\nlog.info(\"Conclu\u00eddas: \" .. stats.completed)\nlog.info(\"Ativas: \" .. stats.active)\n</code></pre></p>"},{"location":"modules/goroutine/#9-goroutineasyncfunction","title":"9. <code>goroutine.async(function)</code>","text":"<p>Executa uma fun\u00e7\u00e3o de forma ass\u00edncrona e retorna um handle.</p> <p>Par\u00e2metros: - <code>function</code>: Fun\u00e7\u00e3o a ser executada</p> <p>Retorno: Handle para await</p> <p>Exemplo: <pre><code>local handle = goroutine.async(function()\n    -- Opera\u00e7\u00e3o demorada\n    return \"resultado\"\nend)\n</code></pre></p>"},{"location":"modules/goroutine/#10-goroutineawaithandle","title":"10. <code>goroutine.await(handle)</code>","text":"<p>Aguarda a conclus\u00e3o de uma opera\u00e7\u00e3o async.</p> <p>Par\u00e2metros: - <code>handle</code>: Handle retornado por <code>async()</code></p> <p>Retorno: - <code>success</code> (boolean): Se a opera\u00e7\u00e3o foi bem-sucedida - <code>...</code>: Valores retornados pela fun\u00e7\u00e3o async</p> <p>Exemplo: <pre><code>local handle = goroutine.async(function()\n    return \"valor1\", \"valor2\"\nend)\n\nlocal success, val1, val2 = goroutine.await(handle)\nif success then\n    log.info(\"Resultados: \" .. val1 .. \", \" .. val2)\nend\n</code></pre></p>"},{"location":"modules/goroutine/#11-goroutineawait_allhandles","title":"11. <code>goroutine.await_all(handles)</code>","text":"<p>Aguarda a conclus\u00e3o de m\u00faltiplas opera\u00e7\u00f5es async.</p> <p>Par\u00e2metros: - <code>handles</code> (table): Array de handles</p> <p>Retorno: Table com resultados: <pre><code>{\n    { success = true, values = {...} },\n    { success = false, error = \"...\" },\n    ...\n}\n</code></pre></p> <p>Exemplo: <pre><code>local handles = {}\nfor i = 1, 5 do\n    handles[i] = goroutine.async(function()\n        return \"Resultado \" .. i\n    end)\nend\n\nlocal results = goroutine.await_all(handles)\nfor i, result in ipairs(results) do\n    if result.success then\n        log.info(\"Task \" .. i .. \": \" .. result.values[1])\n    end\nend\n</code></pre></p>"},{"location":"modules/goroutine/#12-goroutinesleepmilliseconds","title":"12. <code>goroutine.sleep(milliseconds)</code>","text":"<p>Pausa a execu\u00e7\u00e3o por um per\u00edodo especificado.</p> <p>Par\u00e2metros: - <code>milliseconds</code> (number): Tempo em milissegundos</p> <p>Retorno: Nenhum</p> <p>Exemplo: <pre><code>goroutine.sleep(1000)  -- Dorme por 1 segundo\n</code></pre></p>"},{"location":"modules/goroutine/#13-goroutinetimeoutmilliseconds-function","title":"13. <code>goroutine.timeout(milliseconds, function)</code>","text":"<p>Executa uma fun\u00e7\u00e3o com um timeout.</p> <p>Par\u00e2metros: - <code>milliseconds</code> (number): Tempo m\u00e1ximo em milissegundos - <code>function</code>: Fun\u00e7\u00e3o a ser executada</p> <p>Retorno: - <code>success</code> (boolean): <code>false</code> se timeout - <code>...</code>: Valores retornados ou mensagem de erro</p> <p>Exemplo: <pre><code>local success, result = goroutine.timeout(5000, function()\n    -- Opera\u00e7\u00e3o que pode demorar\n    return \"resultado\"\nend)\n\nif success then\n    log.info(\"Conclu\u00eddo: \" .. result)\nelse\n    log.error(\"Timeout: \" .. result)\nend\n</code></pre></p>"},{"location":"modules/goroutine/#exemplos-praticos","title":"Exemplos Pr\u00e1ticos","text":""},{"location":"modules/goroutine/#exemplo-1-worker-pool-para-processamento-paralelo","title":"Exemplo 1: Worker Pool para Processamento Paralelo","text":"<pre><code>local process_files_task = task(\"process_files\")\n    :description(\"Processa arquivos em paralelo\")\n    :command(function(this, params)\n        local goroutine = require(\"goroutine\")\n\n        -- Criar pool com 5 workers\n        goroutine.pool_create(\"fileprocessor\", { workers = 5 })\n\n        local files = {\"file1.txt\", \"file2.txt\", \"file3.txt\", \"file4.txt\", \"file5.txt\"}\n\n        -- Submeter tarefas\n        for _, file in ipairs(files) do\n            goroutine.pool_submit(\"fileprocessor\", function()\n                log.info(\"Processando: \" .. file)\n                goroutine.sleep(1000)  -- Simula processamento\n                return \"Processado: \" .. file\n            end)\n        end\n\n        -- Aguardar conclus\u00e3o\n        goroutine.pool_wait(\"fileprocessor\")\n\n        -- Ver estat\u00edsticas\n        local stats = goroutine.pool_stats(\"fileprocessor\")\n        log.info(\"Total processado: \" .. stats.completed)\n\n        -- Limpar\n        goroutine.pool_close(\"fileprocessor\")\n\n        return true\n    end)\n    :delegate_to(\"mariguica\")\n    :build()\n</code></pre>"},{"location":"modules/goroutine/#exemplo-2-operacoes-assincronas-com-asyncawait","title":"Exemplo 2: Opera\u00e7\u00f5es Ass\u00edncronas com Async/Await","text":"<pre><code>local fetch_data_task = task(\"fetch_data\")\n    :description(\"Busca dados de m\u00faltiplas fontes em paralelo\")\n    :command(function(this, params)\n        local goroutine = require(\"goroutine\")\n        local http = require(\"http\")\n\n        -- Iniciar buscas ass\u00edncronas\n        local h1 = goroutine.async(function()\n            return http.get(\"https://api1.example.com/data\")\n        end)\n\n        local h2 = goroutine.async(function()\n            return http.get(\"https://api2.example.com/data\")\n        end)\n\n        local h3 = goroutine.async(function()\n            return http.get(\"https://api3.example.com/data\")\n        end)\n\n        -- Aguardar todos os resultados\n        local results = goroutine.await_all({h1, h2, h3})\n\n        -- Processar resultados\n        local all_success = true\n        for i, result in ipairs(results) do\n            if not result.success then\n                log.error(\"API \" .. i .. \" falhou: \" .. result.error)\n                all_success = false\n            end\n        end\n\n        return all_success\n    end)\n    :delegate_to(\"mariguica\")\n    :timeout(\"30s\")\n    :build()\n</code></pre>"},{"location":"modules/goroutine/#exemplo-3-sincronizacao-com-waitgroup","title":"Exemplo 3: Sincroniza\u00e7\u00e3o com WaitGroup","text":"<pre><code>local parallel_tasks = task(\"parallel_tasks\")\n    :description(\"Executa m\u00faltiplas tarefas com sincroniza\u00e7\u00e3o\")\n    :command(function(this, params)\n        local goroutine = require(\"goroutine\")\n\n        local wg = goroutine.wait_group()\n        local results = {}\n\n        -- Adicionar 3 tarefas\n        wg:add(3)\n\n        -- Task 1: Download\n        goroutine.spawn(function()\n            log.info(\"Baixando arquivo...\")\n            goroutine.sleep(2000)\n            results.download = \"OK\"\n            wg:done()\n        end)\n\n        -- Task 2: Processar\n        goroutine.spawn(function()\n            log.info(\"Processando dados...\")\n            goroutine.sleep(1500)\n            results.process = \"OK\"\n            wg:done()\n        end)\n\n        -- Task 3: Upload\n        goroutine.spawn(function()\n            log.info(\"Fazendo upload...\")\n            goroutine.sleep(1000)\n            results.upload = \"OK\"\n            wg:done()\n        end)\n\n        -- Aguardar todas\n        log.info(\"Aguardando conclus\u00e3o...\")\n        wg:wait()\n\n        log.info(\"Todas as tarefas conclu\u00eddas!\")\n        log.info(\"Download: \" .. results.download)\n        log.info(\"Process: \" .. results.process)\n        log.info(\"Upload: \" .. results.upload)\n\n        return true\n    end)\n    :delegate_to(\"mariguica\")\n    :build()\n</code></pre>"},{"location":"modules/goroutine/#exemplo-4-timeout-para-operacoes-criticas","title":"Exemplo 4: Timeout para Opera\u00e7\u00f5es Cr\u00edticas","text":"<pre><code>local critical_operation = task(\"critical_operation\")\n    :description(\"Opera\u00e7\u00e3o com timeout de seguran\u00e7a\")\n    :command(function(this, params)\n        local goroutine = require(\"goroutine\")\n\n        local success, result = goroutine.timeout(5000, function()\n            -- Opera\u00e7\u00e3o que pode travar\n            log.info(\"Executando opera\u00e7\u00e3o cr\u00edtica...\")\n            goroutine.sleep(3000)  -- Simula\u00e7\u00e3o\n            return \"Opera\u00e7\u00e3o conclu\u00edda\"\n        end)\n\n        if success then\n            log.info(\"\u2705 \" .. result)\n            return true\n        else\n            log.error(\"\u274c Timeout: \" .. result)\n            return false\n        end\n    end)\n    :delegate_to(\"mariguica\")\n    :build()\n</code></pre>"},{"location":"modules/goroutine/#melhores-praticas","title":"Melhores Pr\u00e1ticas","text":""},{"location":"modules/goroutine/#1-sempre-fechar-pools","title":"1. Sempre Fechar Pools","text":"<pre><code>-- \u2705 BOM\ngoroutine.pool_create(\"mypool\", { workers = 5 })\n-- ... usar pool\ngoroutine.pool_wait(\"mypool\")\ngoroutine.pool_close(\"mypool\")\n\n-- \u274c RUIM - vazamento de recursos\ngoroutine.pool_create(\"mypool\", { workers = 5 })\n-- ... esqueceu de fechar\n</code></pre>"},{"location":"modules/goroutine/#2-usar-waitgroups-para-sincronizacao","title":"2. Usar WaitGroups para Sincroniza\u00e7\u00e3o","text":"<pre><code>-- \u2705 BOM\nlocal wg = goroutine.wait_group()\nwg:add(3)\n\nfor i = 1, 3 do\n    goroutine.spawn(function()\n        -- trabalho\n        wg:done()\n    end)\nend\n\nwg:wait()\n\n-- \u274c RUIM - n\u00e3o garante ordem\nfor i = 1, 3 do\n    goroutine.spawn(function()\n        -- trabalho sem sincroniza\u00e7\u00e3o\n    end)\nend\n</code></pre>"},{"location":"modules/goroutine/#3-tratar-erros-em-operacoes-async","title":"3. Tratar Erros em Opera\u00e7\u00f5es Async","text":"<pre><code>-- \u2705 BOM\nlocal success, result = goroutine.await(handle)\nif success then\n    log.info(\"OK: \" .. result)\nelse\n    log.error(\"Erro: \" .. result)\n    -- Tratamento de erro\nend\n\n-- \u274c RUIM - assume sucesso\nlocal _, result = goroutine.await(handle)\nlog.info(result)  -- pode ser erro!\n</code></pre>"},{"location":"modules/goroutine/#4-dimensionar-pools-adequadamente","title":"4. Dimensionar Pools Adequadamente","text":"<pre><code>-- \u2705 BOM - baseado em cores dispon\u00edveis\nlocal cpus = 4  -- ou detectar dinamicamente\ngoroutine.pool_create(\"cpu-bound\", { workers = cpus })\n\n-- \u2705 BOM - I/O bound pode ter mais workers\ngoroutine.pool_create(\"io-bound\", { workers = cpus * 2 })\n\n-- \u274c RUIM - muito poucos workers\ngoroutine.pool_create(\"mypool\", { workers = 1 })\n\n-- \u274c RUIM - workers demais\ngoroutine.pool_create(\"mypool\", { workers = 1000 })\n</code></pre>"},{"location":"modules/goroutine/#5-usar-timeouts-para-operacoes-externas","title":"5. Usar Timeouts para Opera\u00e7\u00f5es Externas","text":"<pre><code>-- \u2705 BOM\nlocal success, data = goroutine.timeout(10000, function()\n    return fetch_external_api()\nend)\n\n-- \u274c RUIM - pode travar indefinidamente\nfetch_external_api()\n</code></pre>"},{"location":"modules/goroutine/#performance-e-limitacoes","title":"Performance e Limita\u00e7\u00f5es","text":""},{"location":"modules/goroutine/#capacidades","title":"Capacidades","text":"<ul> <li>\u2705 Execu\u00e7\u00e3o verdadeiramente paralela usando goroutines do Go</li> <li>\u2705 Overhead muito baixo para criar goroutines</li> <li>\u2705 Suporta milhares de goroutines simult\u00e2neas</li> <li>\u2705 Worker pools com gerenciamento eficiente de recursos</li> <li>\u2705 Sincroniza\u00e7\u00e3o segura com WaitGroups</li> </ul>"},{"location":"modules/goroutine/#limitacoes","title":"Limita\u00e7\u00f5es","text":"<ul> <li>\u26a0\ufe0f Cada goroutine spawned cria um novo estado Lua (overhead de mem\u00f3ria)</li> <li>\u26a0\ufe0f Vari\u00e1veis n\u00e3o s\u00e3o compartilhadas entre goroutines (use valores de retorno)</li> <li>\u26a0\ufe0f Worker pools t\u00eam buffer limitado de tarefas (padr\u00e3o: 2x workers)</li> <li>\u26a0\ufe0f Async handles n\u00e3o podem ser reutilizados ap\u00f3s await</li> </ul>"},{"location":"modules/goroutine/#troubleshooting","title":"Troubleshooting","text":""},{"location":"modules/goroutine/#pool-queue-cheio","title":"Pool Queue Cheio","text":"<pre><code>local task_id, err = goroutine.pool_submit(\"mypool\", fn)\nif not task_id then\n    log.warn(\"Pool cheio: \" .. err)\n    -- Aguardar ou aumentar workers\nend\n</code></pre>"},{"location":"modules/goroutine/#detectar-goroutines-travadas","title":"Detectar Goroutines Travadas","text":"<pre><code>-- Usar timeout para detectar travamentos\nlocal success, result = goroutine.timeout(5000, function()\n    -- opera\u00e7\u00e3o suspeita\nend)\n\nif not success then\n    log.error(\"Poss\u00edvel deadlock detectado!\")\nend\n</code></pre>"},{"location":"modules/goroutine/#monitorar-pool","title":"Monitorar Pool","text":"<pre><code>-- Verificar periodicamente\nlocal stats = goroutine.pool_stats(\"mypool\")\nif stats.failed &gt; 0 then\n    log.warn(\"Tarefas falharam: \" .. stats.failed)\nend\n\nif stats.active == 0 and stats.queued == 0 then\n    log.info(\"Pool est\u00e1 ocioso\")\nend\n</code></pre>"},{"location":"modules/goroutine/#compatibilidade","title":"Compatibilidade","text":"<ul> <li>\u2705 Funciona com <code>:delegate_to()</code> para execu\u00e7\u00e3o remota</li> <li>\u2705 Compat\u00edvel com todos os outros m\u00f3dulos</li> <li>\u2705 Suporta nested goroutines</li> <li>\u2705 Thread-safe em todas as opera\u00e7\u00f5es</li> <li>\u2705 Funciona em Linux, macOS e Windows</li> </ul>"},{"location":"modules/goroutine/#exemplos-completos-e-prontos-para-usar","title":"\ud83c\udfaf Exemplos Completos e Prontos para Usar","text":""},{"location":"modules/goroutine/#exemplo-real-deploy-paralelo-em-multiplos-servidores","title":"\ud83d\ude80 Exemplo Real: Deploy Paralelo em M\u00faltiplos Servidores","text":"<p>Este exemplo mostra como deployar uma aplica\u00e7\u00e3o em 6 servidores simultaneamente, reduzindo o tempo de 5 minutos para 30 segundos!</p> <pre><code>-- examples/parallel_deployment.sloth\nlocal deploy_to_servers = task(\"deploy_multi_server\")\n    :description(\"Deploy application to multiple servers in parallel\")\n    :command(function(this, params)\n        local goroutine = require(\"goroutine\")\n\n        local servers = {\n            {name = \"web-01\", host = \"192.168.1.10\"},\n            {name = \"web-02\", host = \"192.168.1.11\"},\n            {name = \"web-03\", host = \"192.168.1.12\"},\n            {name = \"api-01\", host = \"192.168.1.20\"},\n            {name = \"api-02\", host = \"192.168.1.21\"},\n            {name = \"db-01\", host = \"192.168.1.30\"},\n        }\n\n        log.info(\"\ud83d\ude80 Starting parallel deployment to \" .. #servers .. \" servers...\")\n\n        -- Create async handles for parallel deployment\n        local handles = {}\n        for _, server in ipairs(servers) do\n            local handle = goroutine.async(function()\n                log.info(\"\ud83d\udce6 Deploying to \" .. server.name .. \" (\" .. server.host .. \")\")\n\n                -- Simulate deployment steps\n                local steps = {\n                    \"Uploading application files...\",\n                    \"Installing dependencies...\",\n                    \"Restarting services...\",\n                    \"Running health checks...\"\n                }\n\n                for _, step in ipairs(steps) do\n                    log.info(\"  \u2192 \" .. server.name .. \": \" .. step)\n                    goroutine.sleep(500)  -- Sleep 500ms to simulate work\n                end\n\n                return server.name, server.host, \"success\", os.date(\"%Y-%m-%d %H:%M:%S\")\n            end)\n\n            table.insert(handles, handle)\n        end\n\n        log.info(\"\u23f3 Waiting for all deployments to complete...\")\n\n        -- Wait for all async operations to complete\n        local results = goroutine.await_all(handles)\n\n        -- Process results\n        local success_count = 0\n        local failed_count = 0\n\n        log.info(\"\\n\ud83d\udcca Deployment Results:\")\n        log.info(\"\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\")\n\n        for i, result in ipairs(results) do\n            if result.success then\n                success_count = success_count + 1\n                local server_name = result.values[1]\n                local deployed_at = result.values[4]\n                log.info(\"\u2705 \" .. server_name .. \" \u2192 Deployed successfully at \" .. deployed_at)\n            else\n                failed_count = failed_count + 1\n                log.error(\"\u274c \" .. (result.error or \"Unknown deployment failure\"))\n            end\n        end\n\n        log.info(\"\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\")\n        log.info(\"\ud83d\udcc8 Summary: \" .. success_count .. \" successful, \" .. failed_count .. \" failed\")\n\n        return success_count == #servers, \"Deployment completed\", {\n            total = #servers,\n            success = success_count,\n            failed = failed_count\n        }\n    end)\n    :timeout(\"2m\")\n    :build()\n\nworkflow.define(\"parallel_deployment\")\n    :description(\"Deploy to multiple servers in parallel\")\n    :version(\"1.0.0\")\n    :tasks({ deploy_to_servers })\n    :config({ timeout = \"5m\" })\n</code></pre> <p>Como executar: <pre><code>sloth-runner run -f examples/parallel_deployment.sloth\n</code></pre></p>"},{"location":"modules/goroutine/#exemplo-real-health-check-paralelo","title":"\ud83c\udfe5 Exemplo Real: Health Check Paralelo","text":"<p>Verifique a sa\u00fade de m\u00faltiplos servi\u00e7os simultaneamente:</p> <pre><code>-- examples/parallel_health_check.sloth\nlocal parallel_health_check = task(\"check_services_health\")\n    :description(\"Check health of multiple services in parallel\")\n    :command(function(this, params)\n        local goroutine = require(\"goroutine\")\n        local http = require(\"http\")\n\n        local services = {\n            {name = \"API Gateway\", url = \"http://localhost:8080/health\"},\n            {name = \"Auth Service\", url = \"http://localhost:8081/health\"},\n            {name = \"Database Service\", url = \"http://localhost:8082/health\"},\n            {name = \"Cache Service\", url = \"http://localhost:8083/health\"},\n            {name = \"Queue Service\", url = \"http://localhost:8084/health\"},\n        }\n\n        log.info(\"\ud83c\udfe5 Starting parallel health checks for \" .. #services .. \" services...\")\n\n        local handles = {}\n        for _, service in ipairs(services) do\n            local handle = goroutine.async(function()\n                local start_time = os.clock()\n                local success, response = pcall(function()\n                    return http.get(service.url, {\n                        timeout = 5,\n                        headers = { [\"User-Agent\"] = \"Sloth-Runner-HealthCheck/1.0\" }\n                    })\n                end)\n\n                local elapsed = (os.clock() - start_time) * 1000\n\n                if success and response and response.status_code == 200 then\n                    return service.name, \"healthy\", elapsed, response.body or \"\"\n                else\n                    local error_msg = response and response.error or \"Connection failed\"\n                    return service.name, \"unhealthy\", elapsed, error_msg\n                end\n            end)\n\n            table.insert(handles, handle)\n        end\n\n        log.info(\"\u23f3 Waiting for all health checks to complete...\")\n\n        local results = goroutine.await_all(handles)\n\n        local healthy_count = 0\n        local unhealthy_count = 0\n\n        log.info(\"\\n\ud83c\udfe5 Health Check Results:\")\n        log.info(\"\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\")\n\n        for _, result in ipairs(results) do\n            if result.success then\n                local name = result.values[1]\n                local status = result.values[2]\n                local time_ms = string.format(\"%.2f\", result.values[3])\n\n                if status == \"healthy\" then\n                    healthy_count = healthy_count + 1\n                    log.info(\"\u2705 \" .. name .. \": \" .. status .. \" (\" .. time_ms .. \"ms)\")\n                else\n                    unhealthy_count = unhealthy_count + 1\n                    local error = result.values[4]\n                    log.error(\"\u274c \" .. name .. \": \" .. status .. \" - \" .. error)\n                end\n            else\n                unhealthy_count = unhealthy_count + 1\n                log.error(\"\u274c Error: \" .. (result.error or \"Unknown error\"))\n            end\n        end\n\n        log.info(\"\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\")\n        log.info(\"\ud83d\udcca Summary: \" .. healthy_count .. \" healthy, \" .. unhealthy_count .. \" unhealthy\")\n\n        return unhealthy_count == 0, \"Health check completed\", {\n            total = #services,\n            healthy = healthy_count,\n            unhealthy = unhealthy_count\n        }\n    end)\n    :timeout(\"30s\")\n    :build()\n\nworkflow.define(\"health_check_workflow\")\n    :description(\"Parallel health check for multiple services\")\n    :version(\"1.0.0\")\n    :tasks({ parallel_health_check })\n</code></pre>"},{"location":"modules/goroutine/#exemplo-real-worker-pool-para-processar-grande-volume","title":"\ud83c\udfed Exemplo Real: Worker Pool para Processar Grande Volume","text":"<p>Processe milhares de itens com controle de concorr\u00eancia:</p> <pre><code>-- examples/worker_pool_example.sloth\nlocal process_with_pool = task(\"worker_pool_processing\")\n    :description(\"Process tasks using a worker pool\")\n    :command(function(this, params)\n        local goroutine = require(\"goroutine\")\n\n        log.info(\"\ud83c\udfed Creating worker pool with 5 workers...\")\n        goroutine.pool_create(\"data_processing\", { workers = 5 })\n\n        local tasks = {}\n        for i = 1, 50 do\n            tasks[i] = {\n                id = i,\n                data = \"Task #\" .. i,\n                priority = math.random(1, 3)\n            }\n        end\n\n        log.info(\"\ud83d\udccb Submitting \" .. #tasks .. \" tasks to worker pool...\")\n\n        for _, task_data in ipairs(tasks) do\n            goroutine.pool_submit(\"data_processing\", function()\n                log.info(\"\u2699\ufe0f Processing \" .. task_data.data)\n                goroutine.sleep(100 * task_data.priority)\n                return {\n                    id = task_data.id,\n                    status = \"completed\",\n                    processed_at = os.date(\"%H:%M:%S\")\n                }\n            end)\n        end\n\n        log.info(\"\u23f3 Waiting for all tasks to complete...\")\n        goroutine.pool_wait(\"data_processing\")\n\n        local stats = goroutine.pool_stats(\"data_processing\")\n\n        log.info(\"\\n\ud83d\udcca Worker Pool Statistics:\")\n        log.info(\"\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\")\n        log.info(\"\ud83d\udc77 Workers: \" .. stats.workers)\n        log.info(\"\u2705 Completed: \" .. stats.completed)\n        log.info(\"\u274c Failed: \" .. stats.failed)\n        log.info(\"\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\")\n\n        goroutine.pool_close(\"data_processing\")\n\n        return true, \"All tasks processed successfully\", {\n            total_tasks = #tasks,\n            completed = stats.completed,\n            failed = stats.failed\n        }\n    end)\n    :timeout(\"5m\")\n    :build()\n\nworkflow.define(\"worker_pool_workflow\")\n    :description(\"Process multiple tasks with a worker pool\")\n    :version(\"1.0.0\")\n    :tasks({ process_with_pool })\n</code></pre>"},{"location":"modules/goroutine/#mais-recursos","title":"\ud83d\udcda Mais Recursos","text":"<ul> <li>\ud83d\udcd6 Documenta\u00e7\u00e3o Completa</li> <li>\ud83e\uddea Mais Exemplos</li> <li>\ud83c\udfaf Benchmarks de Performance</li> <li>\ud83d\udcac Discuss\u00f5es e Suporte</li> </ul>"},{"location":"modules/infra_test/","title":"M\u00f3dulo infra_test","text":"<p>O m\u00f3dulo <code>infra_test</code> fornece um framework completo de valida\u00e7\u00e3o e teste de infraestrutura nativo ao Sloth Runner. Ele permite que voc\u00ea insira asser\u00e7\u00f5es de teste diretamente nas suas tasks para verificar o resultado de opera\u00e7\u00f5es de deploy ou configuration management.</p>"},{"location":"modules/infra_test/#visao-geral","title":"Vis\u00e3o Geral","text":"<p>O <code>infra_test</code> \u00e9 inspirado em ferramentas como Testinfra e InSpec, mas \u00e9 nativo e integrado ao Sloth Runner, permitindo testes de infraestrutura diretamente nas tasks sem depend\u00eancias externas.</p>"},{"location":"modules/infra_test/#caracteristicas-principais","title":"Caracter\u00edsticas Principais","text":"<ul> <li>\u2705 Execu\u00e7\u00e3o Local e Remota: Todos os testes podem ser executados localmente ou delegados para agentes remotos</li> <li>\u2705 Asser\u00e7\u00f5es Nativas: Interrompe a execu\u00e7\u00e3o da task em caso de falha</li> <li>\u2705 Zero Depend\u00eancias: N\u00e3o requer instala\u00e7\u00e3o de ferramentas externas</li> <li>\u2705 Integra\u00e7\u00e3o Total: Funciona perfeitamente com o sistema de agents do Sloth Runner</li> <li>\u2705 Detec\u00e7\u00e3o Autom\u00e1tica de Pacotes: Suporta apt, yum, pacman, apk e brew automaticamente</li> <li>\u2705 Valida\u00e7\u00e3o de Vers\u00f5es: Verifica vers\u00f5es espec\u00edficas de pacotes instalados</li> </ul>"},{"location":"modules/infra_test/#modulos-de-teste-disponiveis","title":"M\u00f3dulos de Teste Dispon\u00edveis","text":"<p>O <code>infra_test</code> oferece 6 categorias de testes:</p> <ol> <li>\ud83d\uddc2\ufe0f Testes de Arquivo - Verifica exist\u00eancia, permiss\u00f5es, conte\u00fado e propriet\u00e1rios</li> <li>\ud83c\udf10 Testes de Rede - Valida portas, conectividade TCP/UDP e ping</li> <li>\u2699\ufe0f Testes de Servi\u00e7o - Verifica status de servi\u00e7os systemd/init</li> <li>\ud83d\udd04 Testes de Processo - Valida processos em execu\u00e7\u00e3o</li> <li>\ud83d\udcbb Testes de Comando - Executa comandos e valida sa\u00eddas</li> <li>\ud83d\udce6 Testes de Pacote - Verifica instala\u00e7\u00e3o e vers\u00f5es de pacotes (NOVO!)</li> </ol>"},{"location":"modules/infra_test/#parametro-target","title":"Par\u00e2metro Target","text":"<p>Todas as fun\u00e7\u00f5es de teste aceitam um par\u00e2metro opcional <code>target</code> para especificar onde o teste ser\u00e1 executado:</p> Par\u00e2metro target Comportamento Omitido ou <code>\"local\"</code> Executa no agente local (onde a task est\u00e1 rodando) String (nome do agente) O teste \u00e9 delegado ao agente remoto especificado <code>\"localhost\"</code> For\u00e7a o teste no agente onde a task foi agendada"},{"location":"modules/infra_test/#referencia-rapida-de-funcoes","title":"Refer\u00eancia R\u00e1pida de Fun\u00e7\u00f5es","text":""},{"location":"modules/infra_test/#testes-de-arquivo","title":"\ud83d\uddc2\ufe0f Testes de Arquivo","text":"<ul> <li><code>file_exists(path, [target])</code> - Verifica exist\u00eancia</li> <li><code>is_directory(path, [target])</code> - Verifica se \u00e9 diret\u00f3rio</li> <li><code>is_file(path, [target])</code> - Verifica se \u00e9 arquivo</li> <li><code>file_contains(path, pattern, [target])</code> - Verifica conte\u00fado</li> <li><code>file_mode(path, mode, [target])</code> - Verifica permiss\u00f5es</li> <li><code>file_owner(path, user, [target])</code> - Verifica propriet\u00e1rio</li> <li><code>file_group(path, group, [target])</code> - Verifica grupo</li> <li><code>file_size(path, bytes, [target])</code> - Verifica tamanho</li> </ul>"},{"location":"modules/infra_test/#testes-de-rede","title":"\ud83c\udf10 Testes de Rede","text":"<ul> <li><code>port_is_listening(port, [target])</code> - Verifica porta aberta</li> <li><code>port_is_tcp(port, [target])</code> - Verifica porta TCP</li> <li><code>port_is_udp(port, [target])</code> - Verifica porta UDP</li> <li><code>can_connect(host, port, [timeout])</code> - Testa conectividade TCP</li> <li><code>ping(host, [count], [target])</code> - Testa conectividade ICMP</li> </ul>"},{"location":"modules/infra_test/#testes-de-servico","title":"\u2699\ufe0f Testes de Servi\u00e7o","text":"<ul> <li><code>service_is_running(name, [target])</code> - Verifica se servi\u00e7o est\u00e1 ativo</li> <li><code>service_is_enabled(name, [target])</code> - Verifica se est\u00e1 habilitado</li> </ul>"},{"location":"modules/infra_test/#testes-de-processo","title":"\ud83d\udd04 Testes de Processo","text":"<ul> <li><code>process_is_running(pattern, [target])</code> - Verifica processo</li> <li><code>process_count(pattern, count, [target])</code> - Conta processos</li> </ul>"},{"location":"modules/infra_test/#testes-de-comando","title":"\ud83d\udcbb Testes de Comando","text":"<ul> <li><code>command_succeeds(cmd, [target])</code> - Verifica exit code 0</li> <li><code>command_fails(cmd, [target])</code> - Verifica exit code != 0</li> <li><code>command_stdout_contains(cmd, pattern, [target])</code> - Verifica sa\u00edda</li> <li><code>command_stderr_is_empty(cmd, [target])</code> - Verifica stderr vazio</li> <li><code>command_output_equals(cmd, expected, [target])</code> - Verifica sa\u00edda exata</li> </ul>"},{"location":"modules/infra_test/#testes-de-pacote","title":"\ud83d\udce6 Testes de Pacote","text":"<ul> <li><code>package_is_installed(name, [target])</code> - Verifica instala\u00e7\u00e3o</li> <li><code>package_version(name, version, [target])</code> - Verifica vers\u00e3o</li> </ul>"},{"location":"modules/infra_test/#modelo-de-retorno","title":"Modelo de Retorno","text":"<ul> <li>Sucesso: A fun\u00e7\u00e3o n\u00e3o retorna nada (ou retorna <code>true</code>)</li> <li>Falha: A fun\u00e7\u00e3o lan\u00e7a um erro que interrompe a execu\u00e7\u00e3o da task e marca a task como falha</li> </ul>"},{"location":"modules/infra_test/#testes-de-arquivo-file-tests","title":"Testes de Arquivo (File Tests)","text":""},{"location":"modules/infra_test/#file_existspath-target","title":"file_exists(path, [target])","text":"<p>Verifica se um arquivo ou diret\u00f3rio existe.</p> <p>Par\u00e2metros: - <code>path</code> (string): Caminho do arquivo ou diret\u00f3rio - <code>target</code> (string, opcional): Agente onde executar o teste</p> <p>Exemplo: <pre><code>local infra_test = require(\"infra_test\")\n\nworkflow(\"test-deployment\")\n  :task(\"verify-config\", function()\n    -- Verifica localmente\n    infra_test.file_exists(\"/etc/nginx/nginx.conf\")\n\n    -- Verifica em agente remoto\n    infra_test.file_exists(\"/etc/nginx/nginx.conf\", \"web-server-01\")\n  end)\n  :delegate_to(\"prod-agent\")\n</code></pre></p>"},{"location":"modules/infra_test/#is_directorypath-target","title":"is_directory(path, [target])","text":"<p>Verifica se o caminho \u00e9 um diret\u00f3rio.</p> <p>Exemplo: <pre><code>infra_test.is_directory(\"/var/www/html\")\ninfra_test.is_directory(\"/opt/app\", \"app-server\")\n</code></pre></p>"},{"location":"modules/infra_test/#is_filepath-target","title":"is_file(path, [target])","text":"<p>Verifica se o caminho \u00e9 um arquivo regular.</p> <p>Exemplo: <pre><code>infra_test.is_file(\"/etc/hosts\")\ninfra_test.is_file(\"/var/log/app.log\", \"log-server\")\n</code></pre></p>"},{"location":"modules/infra_test/#file_containspath-pattern-target","title":"file_contains(path, pattern, [target])","text":"<p>Verifica se o arquivo cont\u00e9m uma string ou padr\u00e3o regex.</p> <p>Par\u00e2metros: - <code>path</code> (string): Caminho do arquivo - <code>pattern</code> (string): String ou express\u00e3o regular a buscar - <code>target</code> (string, opcional): Agente onde executar</p> <p>Exemplo: <pre><code>-- Verifica string simples\ninfra_test.file_contains(\"/etc/nginx/nginx.conf\", \"worker_processes\")\n\n-- Verifica com regex\ninfra_test.file_contains(\"/var/log/app.log\", \"ERROR.*database\", \"app-server\")\n</code></pre></p>"},{"location":"modules/infra_test/#file_modepath-mode-target","title":"file_mode(path, mode, [target])","text":"<p>Verifica as permiss\u00f5es do arquivo.</p> <p>Par\u00e2metros: - <code>path</code> (string): Caminho do arquivo - <code>mode</code> (string): Permiss\u00f5es esperadas (ex: \"644\", \"0644\", \"0o644\") - <code>target</code> (string, opcional): Agente onde executar</p> <p>Exemplo: <pre><code>infra_test.file_mode(\"/etc/passwd\", \"644\")\ninfra_test.file_mode(\"/root/.ssh/id_rsa\", \"0600\", \"bastion\")\n</code></pre></p>"},{"location":"modules/infra_test/#file_ownerpath-user-target","title":"file_owner(path, user, [target])","text":"<p>Verifica se o propriet\u00e1rio (usu\u00e1rio) do arquivo corresponde.</p> <p>Exemplo: <pre><code>infra_test.file_owner(\"/var/www/html\", \"www-data\")\ninfra_test.file_owner(\"/opt/app/config.yaml\", \"appuser\", \"app-server\")\n</code></pre></p>"},{"location":"modules/infra_test/#file_grouppath-group-target","title":"file_group(path, group, [target])","text":"<p>Verifica se o grupo do arquivo corresponde.</p> <p>Exemplo: <pre><code>infra_test.file_group(\"/var/www/html\", \"www-data\")\ninfra_test.file_group(\"/etc/ssl/private\", \"ssl-cert\", \"web-server\")\n</code></pre></p>"},{"location":"modules/infra_test/#file_sizepath-size_in_bytes-target","title":"file_size(path, size_in_bytes, [target])","text":"<p>Verifica o tamanho exato do arquivo em bytes.</p> <p>Exemplo: <pre><code>infra_test.file_size(\"/etc/machine-id\", 33)\ninfra_test.file_size(\"/var/cache/app.db\", 1048576, \"cache-server\")\n</code></pre></p>"},{"location":"modules/infra_test/#testes-de-rede-e-porta-network-tests","title":"Testes de Rede e Porta (Network Tests)","text":""},{"location":"modules/infra_test/#port_is_listeningport-target","title":"port_is_listening(port, [target])","text":"<p>Verifica se a porta est\u00e1 aberta/escutando no alvo.</p> <p>Exemplo: <pre><code>infra_test.port_is_listening(80)\ninfra_test.port_is_listening(443, \"web-server\")\ninfra_test.port_is_listening(5432, \"db-server\")\n</code></pre></p>"},{"location":"modules/infra_test/#port_is_tcpport-target","title":"port_is_tcp(port, [target])","text":"<p>Verifica se a porta est\u00e1 escutando usando o protocolo TCP.</p> <p>Exemplo: <pre><code>infra_test.port_is_tcp(22)\ninfra_test.port_is_tcp(3306, \"mysql-server\")\n</code></pre></p>"},{"location":"modules/infra_test/#port_is_udpport-target","title":"port_is_udp(port, [target])","text":"<p>Verifica se a porta est\u00e1 escutando usando o protocolo UDP.</p> <p>Exemplo: <pre><code>infra_test.port_is_udp(53)\ninfra_test.port_is_udp(123, \"ntp-server\")\n</code></pre></p>"},{"location":"modules/infra_test/#can_connecthost-port-timeout_ms","title":"can_connect(host, port, [timeout_ms])","text":"<p>Testa a conectividade TCP a partir do agente para um host externo/remoto.</p> <p>Par\u00e2metros: - <code>host</code> (string): Host de destino - <code>port</code> (number): Porta de destino - <code>timeout_ms</code> (number, opcional): Timeout em milissegundos (padr\u00e3o: 5000)</p> <p>Exemplo: <pre><code>infra_test.can_connect(\"google.com\", 443)\ninfra_test.can_connect(\"database.internal\", 5432, 3000)\n</code></pre></p>"},{"location":"modules/infra_test/#pinghost-count-target","title":"ping(host, [count], [target])","text":"<p>Testa a conectividade ICMP (ping) para um host.</p> <p>Par\u00e2metros: - <code>host</code> (string): Host de destino - <code>count</code> (number, opcional): N\u00famero de pacotes (padr\u00e3o: 4) - <code>target</code> (string, opcional): Agente onde executar</p> <p>Exemplo: <pre><code>infra_test.ping(\"8.8.8.8\")\ninfra_test.ping(\"internal-router\", 10)\ninfra_test.ping(\"remote-server\", 5, \"edge-agent\")\n</code></pre></p>"},{"location":"modules/infra_test/#testes-de-servico-e-processo-service-process-tests","title":"Testes de Servi\u00e7o e Processo (Service &amp; Process Tests)","text":""},{"location":"modules/infra_test/#service_is_runningname-target","title":"service_is_running(name, [target])","text":"<p>Verifica se o servi\u00e7o est\u00e1 ativo (via systemctl, service, etc.).</p> <p>Exemplo: <pre><code>infra_test.service_is_running(\"nginx\")\ninfra_test.service_is_running(\"postgresql\", \"db-server\")\n</code></pre></p>"},{"location":"modules/infra_test/#service_is_enabledname-target","title":"service_is_enabled(name, [target])","text":"<p>Verifica se o servi\u00e7o est\u00e1 habilitado para iniciar no boot.</p> <p>Exemplo: <pre><code>infra_test.service_is_enabled(\"docker\")\ninfra_test.service_is_enabled(\"nginx\", \"web-server\")\n</code></pre></p>"},{"location":"modules/infra_test/#process_is_runningpattern-target","title":"process_is_running(pattern, [target])","text":"<p>Verifica se um processo com um nome ou padr\u00e3o de comando est\u00e1 em execu\u00e7\u00e3o.</p> <p>Exemplo: <pre><code>infra_test.process_is_running(\"nginx\")\ninfra_test.process_is_running(\"java.*spring-boot\", \"app-server\")\n</code></pre></p>"},{"location":"modules/infra_test/#process_countpattern-count-target","title":"process_count(pattern, count, [target])","text":"<p>Verifica se o n\u00famero de processos corresponde a um valor exato.</p> <p>Par\u00e2metros: - <code>pattern</code> (string): Padr\u00e3o para buscar processos - <code>count</code> (number): N\u00famero esperado de processos - <code>target</code> (string, opcional): Agente onde executar</p> <p>Exemplo: <pre><code>infra_test.process_count(\"nginx\", 4)\ninfra_test.process_count(\"worker\", 8, \"worker-node\")\n</code></pre></p>"},{"location":"modules/infra_test/#testes-de-comando-e-saida-command-output-tests","title":"Testes de Comando e Sa\u00edda (Command &amp; Output Tests)","text":""},{"location":"modules/infra_test/#command_succeedscmd-target","title":"command_succeeds(cmd, [target])","text":"<p>Verifica se o comando retorna o c\u00f3digo de sa\u00edda 0.</p> <p>Exemplo: <pre><code>infra_test.command_succeeds(\"which docker\")\ninfra_test.command_succeeds(\"systemctl is-active nginx\", \"web-server\")\n</code></pre></p>"},{"location":"modules/infra_test/#command_failscmd-target","title":"command_fails(cmd, [target])","text":"<p>Verifica se o comando retorna um c\u00f3digo de sa\u00edda diferente de zero.</p> <p>Exemplo: <pre><code>infra_test.command_fails(\"systemctl is-active fake-service\")\ninfra_test.command_fails(\"test -f /nonexistent\", \"app-server\")\n</code></pre></p>"},{"location":"modules/infra_test/#command_stdout_containscmd-pattern-target","title":"command_stdout_contains(cmd, pattern, [target])","text":"<p>Verifica se a sa\u00edda padr\u00e3o do comando cont\u00e9m uma string ou regex.</p> <p>Par\u00e2metros: - <code>cmd</code> (string): Comando a executar - <code>pattern</code> (string): String ou regex a buscar na sa\u00edda - <code>target</code> (string, opcional): Agente onde executar</p> <p>Exemplo: <pre><code>infra_test.command_stdout_contains(\"cat /etc/os-release\", \"Ubuntu\")\ninfra_test.command_stdout_contains(\"docker --version\", \"version 20\", \"docker-host\")\n</code></pre></p>"},{"location":"modules/infra_test/#command_stderr_is_emptycmd-target","title":"command_stderr_is_empty(cmd, [target])","text":"<p>Verifica se a sa\u00edda de erro do comando est\u00e1 vazia.</p> <p>Exemplo: <pre><code>infra_test.command_stderr_is_empty(\"ls /home\")\ninfra_test.command_stderr_is_empty(\"cat /etc/hosts\", \"web-server\")\n</code></pre></p>"},{"location":"modules/infra_test/#command_output_equalscmd-expected_output-target","title":"command_output_equals(cmd, expected_output, [target])","text":"<p>Verifica se a sa\u00edda padr\u00e3o \u00e9 exatamente igual ao valor esperado.</p> <p>Par\u00e2metros: - <code>cmd</code> (string): Comando a executar - <code>expected_output</code> (string): Sa\u00edda esperada - <code>target</code> (string, opcional): Agente onde executar</p> <p>Exemplo: <pre><code>infra_test.command_output_equals(\"whoami\", \"root\")\ninfra_test.command_output_equals(\"cat /etc/hostname\", \"web-01\", \"web-server\")\n</code></pre></p>"},{"location":"modules/infra_test/#testes-de-pacote-package-tests","title":"Testes de Pacote (Package Tests)","text":""},{"location":"modules/infra_test/#package_is_installedpackage_name-target","title":"package_is_installed(package_name, [target])","text":"<p>Verifica se um pacote est\u00e1 instalado no sistema. O m\u00f3dulo detecta automaticamente o gerenciador de pacotes dispon\u00edvel (apt/dpkg, yum/rpm, pacman, apk, brew).</p> <p>Par\u00e2metros: - <code>package_name</code> (string): Nome do pacote - <code>target</code> (string, opcional): Agente onde executar o teste</p> <p>Gerenciadores Suportados: - Debian/Ubuntu: dpkg - RedHat/CentOS/Fedora: rpm - Arch Linux: pacman - Alpine Linux: apk - macOS: brew</p> <p>Exemplo: <pre><code>local infra_test = require(\"infra_test\")\n\n-- Verifica se nginx est\u00e1 instalado localmente\ninfra_test.package_is_installed(\"nginx\")\n\n-- Verifica em agente remoto\ninfra_test.package_is_installed(\"postgresql\", \"db-server\")\n\n-- Verifica m\u00faltiplos pacotes\ninfra_test.package_is_installed(\"docker-ce\")\ninfra_test.package_is_installed(\"docker-compose\")\ninfra_test.package_is_installed(\"git\")\n</code></pre></p>"},{"location":"modules/infra_test/#package_versionpackage_name-expected_version-target","title":"package_version(package_name, expected_version, [target])","text":"<p>Verifica a vers\u00e3o de um pacote instalado. Aceita vers\u00e3o exata ou prefixo.</p> <p>Par\u00e2metros: - <code>package_name</code> (string): Nome do pacote - <code>expected_version</code> (string): Vers\u00e3o esperada (ou prefixo da vers\u00e3o) - <code>target</code> (string, opcional): Agente onde executar o teste</p> <p>Exemplo: <pre><code>-- Verifica vers\u00e3o exata\ninfra_test.package_version(\"nginx\", \"1.18.0\")\n\n-- Verifica prefixo de vers\u00e3o (ex: 1.18.x)\ninfra_test.package_version(\"nginx\", \"1.18\", \"web-server\")\n\n-- Verifica vers\u00e3o major\ninfra_test.package_version(\"postgresql\", \"14\", \"db-server\")\n</code></pre></p>"},{"location":"modules/infra_test/#exemplos-completos","title":"Exemplos Completos","text":""},{"location":"modules/infra_test/#exemplo-1-teste-de-deploy-de-aplicacao","title":"Exemplo 1: Teste de Deploy de Aplica\u00e7\u00e3o","text":"<pre><code>local infra_test = require(\"infra_test\")\nlocal pkg = require(\"pkg\")\n\nworkflow(\"deploy-and-test-app\")\n  :task(\"install-nginx\", function()\n    pkg.install(\"nginx\")\n  end)\n\n  :task(\"verify-installation\", function()\n    -- Verifica se o pacote foi instalado\n    infra_test.package_is_installed(\"nginx\")\n\n    -- Verifica se os arquivos existem\n    infra_test.file_exists(\"/usr/sbin/nginx\")\n    infra_test.file_exists(\"/etc/nginx/nginx.conf\")\n\n    -- Verifica se o servi\u00e7o est\u00e1 rodando e habilitado\n    infra_test.service_is_running(\"nginx\")\n    infra_test.service_is_enabled(\"nginx\")\n\n    -- Verifica se a porta est\u00e1 aberta\n    infra_test.port_is_tcp(80)\n\n    -- Verifica se o processo est\u00e1 ativo\n    infra_test.process_is_running(\"nginx\")\n  end)\n\n  :task(\"verify-config\", function()\n    -- Verifica permiss\u00f5es e propriet\u00e1rio\n    infra_test.file_mode(\"/etc/nginx/nginx.conf\", \"644\")\n    infra_test.file_owner(\"/var/www/html\", \"www-data\")\n\n    -- Verifica conte\u00fado da configura\u00e7\u00e3o\n    infra_test.file_contains(\"/etc/nginx/nginx.conf\", \"worker_processes\")\n  end)\n\n  :delegate_to(\"web-server-01\")\n</code></pre>"},{"location":"modules/infra_test/#exemplo-2-validacao-multi-agent","title":"Exemplo 2: Valida\u00e7\u00e3o Multi-Agent","text":"<pre><code>local infra_test = require(\"infra_test\")\n\nworkflow(\"test-infrastructure\")\n  :task(\"test-web-servers\", function()\n    -- Testa m\u00faltiplos servidores web\n    local servers = {\"web-01\", \"web-02\", \"web-03\"}\n\n    for _, server in ipairs(servers) do\n      print(\"Testing \" .. server)\n\n      infra_test.service_is_running(\"nginx\", server)\n      infra_test.port_is_listening(80, server)\n      infra_test.port_is_listening(443, server)\n      infra_test.file_exists(\"/var/www/html/index.html\", server)\n    end\n  end)\n\n  :task(\"test-connectivity\", function()\n    -- Testa conectividade entre servidores\n    infra_test.can_connect(\"db-server.internal\", 5432)\n    infra_test.can_connect(\"cache-server.internal\", 6379)\n    infra_test.ping(\"load-balancer\", 5)\n  end)\n</code></pre>"},{"location":"modules/infra_test/#exemplo-3-teste-de-configuracao-completa","title":"Exemplo 3: Teste de Configura\u00e7\u00e3o Completa","text":"<pre><code>local infra_test = require(\"infra_test\")\nlocal systemd = require(\"systemd\")\n\nworkflow(\"deploy-microservice\")\n  :task(\"create-service\", function()\n    systemd.create_service(\"myapp\", {\n      description = \"My Application\",\n      exec_start = \"/opt/myapp/bin/start.sh\",\n      user = \"appuser\",\n      working_directory = \"/opt/myapp\"\n    })\n\n    systemd.enable(\"myapp\")\n    systemd.start(\"myapp\")\n  end)\n\n  :task(\"validate-deployment\", function()\n    -- Verifica estrutura de diret\u00f3rios\n    infra_test.is_directory(\"/opt/myapp\")\n    infra_test.is_directory(\"/opt/myapp/bin\")\n    infra_test.is_directory(\"/opt/myapp/logs\")\n\n    -- Verifica arquivos\n    infra_test.is_file(\"/opt/myapp/bin/start.sh\")\n    infra_test.file_mode(\"/opt/myapp/bin/start.sh\", \"755\")\n    infra_test.file_owner(\"/opt/myapp\", \"appuser\")\n\n    -- Verifica servi\u00e7o\n    infra_test.service_is_running(\"myapp\")\n    infra_test.service_is_enabled(\"myapp\")\n\n    -- Verifica processo\n    infra_test.process_is_running(\"myapp\")\n\n    -- Verifica porta da aplica\u00e7\u00e3o\n    infra_test.port_is_listening(8080)\n\n    -- Testa endpoint da aplica\u00e7\u00e3o\n    infra_test.command_succeeds(\"curl -s http://localhost:8080/health\")\n    infra_test.command_stdout_contains(\n      \"curl -s http://localhost:8080/health\",\n      \"\\\"status\\\":\\\"up\\\"\"\n    )\n  end)\n\n  :delegate_to(\"app-server-prod\")\n</code></pre>"},{"location":"modules/infra_test/#exemplo-4-teste-de-seguranca","title":"Exemplo 4: Teste de Seguran\u00e7a","text":"<pre><code>local infra_test = require(\"infra_test\")\n\nworkflow(\"security-audit\")\n  :task(\"check-file-permissions\", function()\n    -- Verifica permiss\u00f5es cr\u00edticas\n    infra_test.file_mode(\"/etc/passwd\", \"644\")\n    infra_test.file_mode(\"/etc/shadow\", \"640\")\n    infra_test.file_mode(\"/root/.ssh/id_rsa\", \"600\")\n\n    -- Verifica propriet\u00e1rios\n    infra_test.file_owner(\"/etc/shadow\", \"root\")\n    infra_test.file_group(\"/etc/shadow\", \"shadow\")\n  end)\n\n  :task(\"check-services\", function()\n    -- Verifica que servi\u00e7os desnecess\u00e1rios n\u00e3o est\u00e3o rodando\n    infra_test.command_fails(\"systemctl is-active telnet\")\n    infra_test.command_fails(\"systemctl is-active ftp\")\n\n    -- Verifica que servi\u00e7os cr\u00edticos est\u00e3o rodando\n    infra_test.service_is_running(\"sshd\")\n    infra_test.service_is_running(\"fail2ban\")\n  end)\n\n  :task(\"check-firewall\", function()\n    -- Verifica regras de firewall\n    infra_test.command_succeeds(\"iptables -L | grep -q 'Chain INPUT'\")\n    infra_test.command_stdout_contains(\n      \"iptables -L INPUT\",\n      \"ACCEPT.*tcp.*dpt:ssh\"\n    )\n  end)\n\n  :delegate_to(\"prod-server\")\n</code></pre>"},{"location":"modules/infra_test/#exemplo-5-teste-de-pacotes-e-dependencias","title":"Exemplo 5: Teste de Pacotes e Depend\u00eancias","text":"<pre><code>local infra_test = require(\"infra_test\")\nlocal pkg = require(\"pkg\")\n\nworkflow(\"setup-development-environment\")\n  :task(\"install-packages\", function()\n    pkg.install(\"git\")\n    pkg.install(\"docker-ce\")\n    pkg.install(\"nodejs\")\n    pkg.install(\"python3\")\n  end)\n\n  :task(\"verify-packages\", function()\n    -- Verifica se todos os pacotes foram instalados\n    infra_test.package_is_installed(\"git\")\n    infra_test.package_is_installed(\"docker-ce\")\n    infra_test.package_is_installed(\"nodejs\")\n    infra_test.package_is_installed(\"python3\")\n\n    -- Verifica vers\u00f5es espec\u00edficas\n    infra_test.package_version(\"nodejs\", \"18\")\n    infra_test.package_version(\"python3\", \"3.10\")\n\n    -- Verifica bin\u00e1rios dispon\u00edveis\n    infra_test.command_succeeds(\"which git\")\n    infra_test.command_succeeds(\"which docker\")\n    infra_test.command_succeeds(\"which node\")\n    infra_test.command_succeeds(\"which python3\")\n\n    -- Verifica vers\u00f5es via comando\n    infra_test.command_stdout_contains(\"node --version\", \"v18\")\n    infra_test.command_stdout_contains(\"python3 --version\", \"Python 3.10\")\n  end)\n\n  :task(\"verify-docker-service\", function()\n    infra_test.service_is_running(\"docker\")\n    infra_test.service_is_enabled(\"docker\")\n    infra_test.port_is_listening(2375)\n  end)\n\n  :delegate_to(\"dev-machine\")\n</code></pre>"},{"location":"modules/infra_test/#exemplo-6-auditoria-de-pacotes-multi-agent","title":"Exemplo 6: Auditoria de Pacotes Multi-Agent","text":"<pre><code>local infra_test = require(\"infra_test\")\n\nworkflow(\"audit-packages\")\n  :task(\"audit-web-servers\", function()\n    local servers = {\"web-01\", \"web-02\", \"web-03\"}\n    local required_packages = {\n      \"nginx\",\n      \"certbot\",\n      \"ufw\",\n      \"fail2ban\"\n    }\n\n    for _, server in ipairs(servers) do\n      print(\"Auditing \" .. server)\n\n      for _, pkg_name in ipairs(required_packages) do\n        infra_test.package_is_installed(pkg_name, server)\n      end\n\n      -- Verifica vers\u00e3o do nginx\n      infra_test.package_version(\"nginx\", \"1.18\", server)\n\n      -- Verifica que pacotes inseguros n\u00e3o est\u00e3o instalados\n      infra_test.command_fails(\"dpkg -l telnetd\", server)\n      infra_test.command_fails(\"dpkg -l rsh-server\", server)\n    end\n  end)\n\n  :task(\"audit-database-servers\", function()\n    local db_servers = {\"db-01\", \"db-02\"}\n\n    for _, server in ipairs(db_servers) do\n      print(\"Auditing database: \" .. server)\n\n      -- Verifica pacotes do PostgreSQL\n      infra_test.package_is_installed(\"postgresql-14\", server)\n      infra_test.package_is_installed(\"postgresql-contrib\", server)\n\n      -- Verifica servi\u00e7o\n      infra_test.service_is_running(\"postgresql\", server)\n      infra_test.port_is_listening(5432, server)\n\n      -- Verifica vers\u00e3o\n      infra_test.command_stdout_contains(\n        \"psql --version\",\n        \"14.\",\n        server\n      )\n    end\n  end)\n</code></pre>"},{"location":"modules/infra_test/#melhores-praticas","title":"Melhores Pr\u00e1ticas","text":"<ol> <li>Organize Testes por Contexto: Agrupe testes relacionados em tasks separadas</li> <li>Use Nomes Descritivos: Nomeie suas tasks de forma clara (ex: \"verify-nginx-config\")</li> <li>Teste Progressivamente: Comece com testes b\u00e1sicos (exist\u00eancia) e avance para testes complexos (conte\u00fado, permiss\u00f5es)</li> <li>Teste em M\u00faltiplos Agentes: Use o par\u00e2metro <code>target</code> para validar configura\u00e7\u00f5es em v\u00e1rios servidores</li> <li>Combine com M\u00f3dulos: Integre <code>infra_test</code> com <code>pkg</code>, <code>systemd</code>, e outros m\u00f3dulos para ciclos completos de deploy+teste</li> <li>Valide Pacotes: Sempre verifique se pacotes foram instalados corretamente ap\u00f3s opera\u00e7\u00f5es de instala\u00e7\u00e3o</li> <li>Use Vers\u00f5es Espec\u00edficas: Para ambientes de produ\u00e7\u00e3o, valide vers\u00f5es espec\u00edficas de pacotes cr\u00edticos</li> </ol>"},{"location":"modules/infra_test/#casos-de-uso-recomendados","title":"Casos de Uso Recomendados","text":""},{"location":"modules/infra_test/#1-deploy-com-validacao","title":"1. Deploy com Valida\u00e7\u00e3o","text":"<p>Combine instala\u00e7\u00e3o de pacotes com valida\u00e7\u00e3o imediata: <pre><code>workflow(\"deploy-with-validation\")\n  :task(\"install\", function()\n    pkg.install(\"nginx\")\n  end)\n  :task(\"validate\", function()\n    infra_test.package_is_installed(\"nginx\")\n    infra_test.service_is_running(\"nginx\")\n    infra_test.port_is_listening(80)\n  end)\n</code></pre></p>"},{"location":"modules/infra_test/#2-auditoria-de-conformidade","title":"2. Auditoria de Conformidade","text":"<p>Valide que todos os servidores est\u00e3o em conformidade: <pre><code>workflow(\"compliance-check\")\n  :task(\"check-security-packages\", function()\n    infra_test.package_is_installed(\"fail2ban\")\n    infra_test.package_is_installed(\"ufw\")\n    infra_test.service_is_running(\"fail2ban\")\n  end)\n</code></pre></p>"},{"location":"modules/infra_test/#3-validacao-de-dependencias","title":"3. Valida\u00e7\u00e3o de Depend\u00eancias","text":"<p>Verifique que todas as depend\u00eancias necess\u00e1rias est\u00e3o presentes: <pre><code>workflow(\"check-dependencies\")\n  :task(\"verify\", function()\n    local deps = {\"python3\", \"python3-pip\", \"python3-venv\"}\n    for _, dep in ipairs(deps) do\n      infra_test.package_is_installed(dep)\n    end\n  end)\n</code></pre></p>"},{"location":"modules/infra_test/#notas-importantes","title":"Notas Importantes","text":"<ul> <li>\u26a0\ufe0f Todos os testes s\u00e3o s\u00edncronos e bloqueiam a execu\u00e7\u00e3o at\u00e9 completarem</li> <li>\u26a0\ufe0f Uma falha em qualquer teste interrompe a task imediatamente</li> <li>\u26a0\ufe0f Testes em agentes remotos requerem que o agente esteja conectado e ativo</li> <li>\u26a0\ufe0f Comandos shell s\u00e3o executados com <code>sh -c</code>, portanto use sintaxe POSIX-compat\u00edvel</li> </ul>"},{"location":"modules/infra_test/#diferencas-com-outras-ferramentas","title":"Diferen\u00e7as com Outras Ferramentas","text":""},{"location":"modules/infra_test/#vs-testinfra","title":"vs Testinfra","text":"<ul> <li>\u2705 Integrado nativamente ao Sloth Runner (sem Python/pip)</li> <li>\u2705 Usa o sistema de agents nativo</li> <li>\u2705 Sintaxe Lua consistente com o resto do workflow</li> </ul>"},{"location":"modules/infra_test/#vs-inspec","title":"vs InSpec","text":"<ul> <li>\u2705 Mais leve e sem depend\u00eancias Ruby</li> <li>\u2705 Integra\u00e7\u00e3o total com tasks e workflows</li> <li>\u2705 Execu\u00e7\u00e3o em tempo real durante o deploy</li> </ul>"},{"location":"modules/infra_test/#vs-serverspec","title":"vs Serverspec","text":"<ul> <li>\u2705 N\u00e3o requer instala\u00e7\u00e3o de gems</li> <li>\u2705 Melhor performance para testes r\u00e1pidos</li> <li>\u2705 Suporte nativo a execu\u00e7\u00e3o paralela (via goroutines)</li> </ul>"},{"location":"modules/log/","title":"Log Module","text":"<p>The <code>log</code> module provides a simple and essential interface for logging messages from within your Lua scripts to the <code>sloth-runner</code> console. Using this module is the standard way to provide feedback and debug information during a task's execution.</p>"},{"location":"modules/log/#loginfomessage","title":"<code>log.info(message)</code>","text":"<p>Logs a message at the INFO level. This is the standard level for general, informative messages.</p> <ul> <li>Parameters:<ul> <li><code>message</code> (string): The message to log.</li> </ul> </li> </ul>"},{"location":"modules/log/#logwarnmessage","title":"<code>log.warn(message)</code>","text":"<p>Logs a message at the WARN level. This is suitable for non-critical issues that should be brought to the user's attention.</p> <ul> <li>Parameters:<ul> <li><code>message</code> (string): The message to log.</li> </ul> </li> </ul>"},{"location":"modules/log/#logerrormessage","title":"<code>log.error(message)</code>","text":"<p>Logs a message at the ERROR level. This should be used for significant errors that might cause a task to fail.</p> <ul> <li>Parameters:<ul> <li><code>message</code> (string): The message to log.</li> </ul> </li> </ul>"},{"location":"modules/log/#logdebugmessage","title":"<code>log.debug(message)</code>","text":"<p>Logs a message at the DEBUG level. These messages are typically hidden unless the runner is in a verbose or debug mode. They are useful for detailed diagnostic information.</p> <ul> <li>Parameters:<ul> <li><code>message</code> (string): The message to log.</li> </ul> </li> </ul>"},{"location":"modules/log/#example","title":"Example","text":"<pre><code>command = function()\n  -- The log module is globally available and does not need to be required.\n\n  log.info(\"Starting the logging example task.\")\n\n  local user_name = \"Sloth\"\n  log.debug(\"Current user is: \" .. user_name)\n\n  if user_name ~= \"Sloth\" then\n    log.warn(\"The user is not the expected one.\")\n  end\n\n  log.info(\"Task is performing its main action...\")\n\n  local success = true -- Simulate a successful operation\n  if not success then\n    log.error(\"The main action failed unexpectedly!\")\n    return false, \"Main action failed\"\n  end\n\n  log.info(\"Logging example task finished successfully.\")\n  return true, \"Logging demonstrated.\"\nend\n</code></pre>"},{"location":"modules/metrics/","title":"\ud83d\udcca Metrics &amp; Monitoring Module","text":"<p>The Metrics &amp; Monitoring module provides comprehensive system monitoring, custom metrics collection, and health checking capabilities. It enables real-time observability of both system resources and application performance.</p>"},{"location":"modules/metrics/#key-features","title":"\ud83d\ude80 Key Features","text":"<ul> <li>System Metrics: Automatic collection of CPU, memory, disk, and network metrics</li> <li>Runtime Metrics: Go runtime information (goroutines, heap, GC)</li> <li>Custom Metrics: Gauges, counters, histograms, and timers</li> <li>Health Checks: Automatic system health monitoring</li> <li>HTTP Endpoints: Prometheus-compatible metrics export</li> <li>Alerting: Threshold-based alerts</li> <li>JSON API: Complete metrics data for integrations</li> </ul>"},{"location":"modules/metrics/#system-metrics","title":"\ud83d\udcca System Metrics","text":""},{"location":"modules/metrics/#cpu-memory-and-disk-monitoring","title":"CPU, Memory, and Disk Monitoring","text":"<pre><code>-- Get current CPU usage\nlocal cpu_usage = metrics.system_cpu()\nlog.info(\"CPU Usage: \" .. string.format(\"%.1f%%\", cpu_usage))\n\n-- Get memory information\nlocal memory_info = metrics.system_memory()\nlog.info(\"Memory: \" .. string.format(\"%.1f%% (%.0f/%.0f MB)\", \n    memory_info.percent, memory_info.used_mb, memory_info.total_mb))\n\n-- Get disk usage\nlocal disk_info = metrics.system_disk(\"/\")\nlog.info(\"Disk: \" .. string.format(\"%.1f%% (%.1f/%.1f GB)\", \n    disk_info.percent, disk_info.used_gb, disk_info.total_gb))\n\n-- Check specific disk path\nlocal var_disk = metrics.system_disk(\"/var\")\nlog.info(\"Var disk usage: \" .. string.format(\"%.1f%%\", var_disk.percent))\n</code></pre>"},{"location":"modules/metrics/#runtime-information","title":"Runtime Information","text":"<pre><code>-- Get Go runtime metrics\nlocal runtime = metrics.runtime_info()\nlog.info(\"Runtime Information:\")\nlog.info(\"  Goroutines: \" .. runtime.goroutines)\nlog.info(\"  CPU cores: \" .. runtime.num_cpu)\nlog.info(\"  Heap allocated: \" .. string.format(\"%.1f MB\", runtime.heap_alloc_mb))\nlog.info(\"  Heap system: \" .. string.format(\"%.1f MB\", runtime.heap_sys_mb))\nlog.info(\"  GC cycles: \" .. runtime.num_gc)\nlog.info(\"  Go version: \" .. runtime.go_version)\n</code></pre>"},{"location":"modules/metrics/#custom-metrics","title":"\ud83d\udcc8 Custom Metrics","text":""},{"location":"modules/metrics/#gauge-metrics-current-values","title":"Gauge Metrics (Current Values)","text":"<pre><code>-- Set simple gauge values\nmetrics.gauge(\"cpu_temperature\", 65.4)\nmetrics.gauge(\"active_connections\", 142)\nmetrics.gauge(\"queue_size\", 23)\n\n-- Set gauge with tags\nmetrics.gauge(\"memory_usage\", memory_percent, {\n    server = \"web-01\",\n    environment = \"production\",\n    region = \"us-east-1\"\n})\n\n-- Update deployment status\nmetrics.gauge(\"deployment_progress\", 75.5, {\n    app = \"frontend\",\n    version = \"v2.1.0\"\n})\n</code></pre>"},{"location":"modules/metrics/#counter-metrics-incremental-values","title":"Counter Metrics (Incremental Values)","text":"<pre><code>-- Increment counters\nlocal total_requests = metrics.counter(\"http_requests_total\", 1)\nlocal error_count = metrics.counter(\"http_errors_total\", 1, {\n    status_code = \"500\",\n    endpoint = \"/api/users\"\n})\n\n-- Bulk increment\nlocal processed = metrics.counter(\"messages_processed\", 50, {\n    queue = \"user_notifications\",\n    priority = \"high\"\n})\n\nlog.info(\"Total requests processed: \" .. total_requests)\n</code></pre>"},{"location":"modules/metrics/#histogram-metrics-value-distributions","title":"Histogram Metrics (Value Distributions)","text":"<pre><code>-- Record response times\nmetrics.histogram(\"response_time_ms\", 245.6, {\n    endpoint = \"/api/users\",\n    method = \"GET\"\n})\n\n-- Record payload sizes\nmetrics.histogram(\"payload_size_bytes\", 1024, {\n    content_type = \"application/json\"\n})\n\n-- Record batch sizes\nmetrics.histogram(\"batch_size\", 150, {\n    operation = \"bulk_insert\",\n    table = \"user_events\"\n})\n</code></pre>"},{"location":"modules/metrics/#timer-metrics-function-execution-time","title":"Timer Metrics (Function Execution Time)","text":"<pre><code>-- Time function execution automatically\nlocal duration = metrics.timer(\"database_query\", function()\n    -- Simulate database query\n    local result = exec.run(\"sleep 0.1\")\n    return result\nend, {\n    query_type = \"select\",\n    table = \"users\"\n})\n\nlog.info(\"Database query took: \" .. string.format(\"%.2f ms\", duration))\n\n-- Time complex operations\nlocal processing_time = metrics.timer(\"data_processing\", function()\n    -- Process large dataset\n    local data = {}\n    for i = 1, 100000 do\n        data[i] = math.sqrt(i) * 2.5\n    end\n    return #data\nend, {\n    operation = \"mathematical_computation\",\n    size = \"large\"\n})\n\nlog.info(\"Data processing completed in: \" .. string.format(\"%.2f ms\", processing_time))\n</code></pre>"},{"location":"modules/metrics/#health-monitoring","title":"\ud83c\udfe5 Health Monitoring","text":""},{"location":"modules/metrics/#automatic-health-status","title":"Automatic Health Status","text":"<pre><code>-- Get comprehensive health status\nlocal health = metrics.health_status()\nlog.info(\"Overall Health Status: \" .. health.overall)\n\n-- Check individual components\nlocal components = {\"cpu\", \"memory\", \"disk\"}\nfor _, component in ipairs(components) do\n    local comp_info = health[component]\n    if comp_info then\n        local status_icon = \"\u2705\"\n        if comp_info.status == \"warning\" then\n            status_icon = \"\u26a0\ufe0f\"\n        elseif comp_info.status == \"critical\" then\n            status_icon = \"\u274c\"\n        end\n\n        log.info(string.format(\"  %s %s: %.1f%% (%s)\", \n            status_icon, component:upper(), comp_info.usage, comp_info.status))\n    end\nend\n</code></pre>"},{"location":"modules/metrics/#custom-health-checks","title":"Custom Health Checks","text":"<pre><code>-- Create health check function\nfunction check_application_health()\n    local health_score = 100\n    local issues = {}\n\n    -- Check database connectivity\n    local db_result = exec.run(\"pg_isready -h localhost -p 5432\")\n    if db_result ~= \"\" then\n        health_score = health_score - 20\n        table.insert(issues, \"Database connection failed\")\n    end\n\n    -- Check disk space\n    local disk = metrics.system_disk(\"/\")\n    if disk.percent &gt; 90 then\n        health_score = health_score - 30\n        table.insert(issues, \"Disk space critical: \" .. string.format(\"%.1f%%\", disk.percent))\n    end\n\n    -- Check memory usage\n    local memory = metrics.system_memory()\n    if memory.percent &gt; 85 then\n        health_score = health_score - 25\n        table.insert(issues, \"Memory usage high: \" .. string.format(\"%.1f%%\", memory.percent))\n    end\n\n    -- Record health score\n    metrics.gauge(\"application_health_score\", health_score)\n\n    if health_score &lt; 70 then\n        metrics.alert(\"application_health\", {\n            level = \"warning\",\n            message = \"Application health degraded: \" .. table.concat(issues, \", \"),\n            score = health_score\n        })\n    end\n\n    return health_score &gt;= 70\nend\n\n-- Use in tasks\nModern DSLs = {\n    health_monitoring = {\n        tasks = {\n            health_check = {\n                command = function()\n                    local healthy = check_application_health()\n                    return healthy, healthy and \"System healthy\" or \"System health issues detected\"\n                end\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"modules/metrics/#alerting-system","title":"\ud83d\udea8 Alerting System","text":""},{"location":"modules/metrics/#creating-alerts","title":"Creating Alerts","text":"<pre><code>-- Simple threshold alert\nlocal cpu = metrics.system_cpu()\nif cpu &gt; 80 then\n    metrics.alert(\"high_cpu_usage\", {\n        level = \"warning\",\n        message = \"CPU usage is high: \" .. string.format(\"%.1f%%\", cpu),\n        threshold = 80,\n        value = cpu,\n        severity = \"medium\"\n    })\nend\n\n-- Complex alert with multiple conditions\nlocal memory = metrics.system_memory()\nlocal disk = metrics.system_disk()\n\nif memory.percent &gt; 90 and disk.percent &gt; 85 then\n    metrics.alert(\"resource_exhaustion\", {\n        level = \"critical\",\n        message = string.format(\"Critical resource usage - Memory: %.1f%%, Disk: %.1f%%\", \n            memory.percent, disk.percent),\n        memory_usage = memory.percent,\n        disk_usage = disk.percent,\n        recommended_action = \"Scale up resources immediately\"\n    })\nend\n\n-- Application-specific alerts\nlocal queue_size = state.get(\"task_queue_size\", 0)\nif queue_size &gt; 1000 then\n    metrics.alert(\"queue_backlog\", {\n        level = \"warning\", \n        message = \"Task queue backlog detected: \" .. queue_size .. \" items\",\n        queue_size = queue_size,\n        estimated_processing_time = queue_size * 2 .. \" seconds\"\n    })\nend\n</code></pre>"},{"location":"modules/metrics/#metrics-management","title":"\ud83d\udd0d Metrics Management","text":""},{"location":"modules/metrics/#retrieving-custom-metrics","title":"Retrieving Custom Metrics","text":"<pre><code>-- Get specific custom metric\nlocal cpu_metric = metrics.get_custom(\"cpu_temperature\")\nif cpu_metric then\n    log.info(\"CPU Temperature metric: \" .. data.to_json(cpu_metric))\nend\n\n-- List all custom metrics\nlocal all_metrics = metrics.list_custom()\nlog.info(\"Total custom metrics: \" .. #all_metrics)\nfor i, metric_name in ipairs(all_metrics) do\n    log.info(\"  \" .. i .. \". \" .. metric_name)\nend\n</code></pre>"},{"location":"modules/metrics/#performance-monitoring-example","title":"Performance Monitoring Example","text":"<pre><code>Modern DSLs = {\n    performance_monitoring = {\n        tasks = {\n            monitor_api_performance = {\n                command = function()\n                    -- Start monitoring session\n                    log.info(\"Starting API performance monitoring...\")\n\n                    -- Simulate API calls and measure performance\n                    for i = 1, 10 do\n                        local api_time = metrics.timer(\"api_call_\" .. i, function()\n                            -- Simulate API call\n                            exec.run(\"curl -s -o /dev/null -w '%{time_total}' https://api.example.com/health\")\n                        end, {\n                            endpoint = \"health\",\n                            call_number = tostring(i)\n                        })\n\n                        -- Record response time\n                        metrics.histogram(\"api_response_time\", api_time, {\n                            endpoint = \"health\"\n                        })\n\n                        -- Check if response time is acceptable\n                        if api_time &gt; 1000 then -- 1 second\n                            metrics.counter(\"slow_api_calls\", 1, {\n                                endpoint = \"health\"\n                            })\n\n                            metrics.alert(\"slow_api_response\", {\n                                level = \"warning\",\n                                message = string.format(\"Slow API response: %.2f ms\", api_time),\n                                response_time = api_time,\n                                threshold = 1000\n                            })\n                        end\n\n                        -- Brief delay between calls\n                        exec.run(\"sleep 0.1\")\n                    end\n\n                    -- Get summary statistics\n                    local system_health = metrics.health_status()\n                    log.info(\"System health after API tests: \" .. system_health.overall)\n\n                    return true, \"API performance monitoring completed\"\n                end\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"modules/metrics/#http-endpoints","title":"\ud83c\udf10 HTTP Endpoints","text":"<p>The metrics module automatically exposes HTTP endpoints for external monitoring systems:</p>"},{"location":"modules/metrics/#prometheus-format-metrics","title":"Prometheus Format (<code>/metrics</code>)","text":"<pre><code># Access Prometheus-compatible metrics\ncurl http://agent:8080/metrics\n\n# Example output:\n# sloth_agent_cpu_usage_percent 15.4\n# sloth_agent_memory_usage_mb 2048.5\n# sloth_agent_disk_usage_percent 67.2\n# sloth_agent_tasks_total 142\n</code></pre>"},{"location":"modules/metrics/#json-format-metricsjson","title":"JSON Format (<code>/metrics/json</code>)","text":"<pre><code># Get complete metrics in JSON format\ncurl http://agent:8080/metrics/json\n\n# Example response:\n{\n  \"agent_name\": \"myagent1\",\n  \"timestamp\": \"2024-01-15T10:30:00Z\",\n  \"system\": {\n    \"cpu_usage_percent\": 15.4,\n    \"memory_usage_mb\": 2048.5,\n    \"disk_usage_percent\": 67.2\n  },\n  \"runtime\": {\n    \"num_goroutines\": 25,\n    \"heap_alloc_mb\": 45.2\n  },\n  \"custom\": {\n    \"api_response_time\": {...},\n    \"deployment_progress\": 85.5\n  }\n}\n</code></pre>"},{"location":"modules/metrics/#health-check-health","title":"Health Check (<code>/health</code>)","text":"<pre><code># Check agent health status\ncurl http://agent:8080/health\n\n# Example response:\n{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2024-01-15T10:30:00Z\",\n  \"checks\": {\n    \"cpu\": {\"usage\": 15.4, \"status\": \"healthy\"},\n    \"memory\": {\"usage\": 45.8, \"status\": \"healthy\"},\n    \"disk\": {\"usage\": 67.2, \"status\": \"healthy\"}\n  }\n}\n</code></pre>"},{"location":"modules/metrics/#api-reference","title":"\ud83d\udccb API Reference","text":""},{"location":"modules/metrics/#system-metrics_1","title":"System Metrics","text":"Function Parameters Return Description <code>metrics.system_cpu()</code> - usage: number Get current CPU usage percentage <code>metrics.system_memory()</code> - info: table Get memory usage information <code>metrics.system_disk(path?)</code> path?: string info: table Get disk usage for path (default: \"/\") <code>metrics.runtime_info()</code> - info: table Get Go runtime information"},{"location":"modules/metrics/#custom-metrics_1","title":"Custom Metrics","text":"Function Parameters Return Description <code>metrics.gauge(name, value, tags?)</code> name: string, value: number, tags?: table success: boolean Set gauge metric <code>metrics.counter(name, increment?, tags?)</code> name: string, increment?: number, tags?: table new_value: number Increment counter <code>metrics.histogram(name, value, tags?)</code> name: string, value: number, tags?: table success: boolean Record histogram value <code>metrics.timer(name, function, tags?)</code> name: string, func: function, tags?: table duration: number Time function execution"},{"location":"modules/metrics/#health-and-monitoring","title":"Health and Monitoring","text":"Function Parameters Return Description <code>metrics.health_status()</code> - status: table Get comprehensive health status <code>metrics.alert(name, data)</code> name: string, data: table success: boolean Create alert"},{"location":"modules/metrics/#utilities","title":"Utilities","text":"Function Parameters Return Description <code>metrics.get_custom(name)</code> name: string metric: table | nil Get custom metric by name <code>metrics.list_custom()</code> - names: table List all custom metric names"},{"location":"modules/metrics/#best-practices","title":"\ud83c\udfaf Best Practices","text":"<ol> <li>Use appropriate metric types - gauges for current values, counters for totals, histograms for distributions</li> <li>Add meaningful tags to categorize and filter metrics</li> <li>Set reasonable alert thresholds to avoid alert fatigue</li> <li>Monitor performance impact of extensive metrics collection</li> <li>Use timers for performance-critical operations to identify bottlenecks</li> <li>Implement health checks for all critical system components</li> <li>Export metrics to external systems like Prometheus for long-term storage</li> </ol> <p>The Metrics &amp; Monitoring module provides comprehensive observability for your distributed sloth-runner environment! \ud83d\udcca\ud83d\ude80</p>"},{"location":"modules/net/","title":"Net Module","text":"<p>The <code>net</code> module provides functions for making HTTP requests and downloading files, allowing your tasks to interact with web services and remote resources.</p>"},{"location":"modules/net/#nethttp_geturl","title":"<code>net.http_get(url)</code>","text":"<p>Performs an HTTP GET request to the specified URL.</p> <ul> <li>Parameters:<ul> <li><code>url</code> (string): The URL to send the GET request to.</li> </ul> </li> <li>Returns:<ul> <li><code>body</code> (string): The response body as a string.</li> <li><code>status_code</code> (number): The HTTP status code of the response.</li> <li><code>headers</code> (table): A table containing the response headers.</li> <li><code>error</code> (string): An error message if the request failed.</li> </ul> </li> </ul>"},{"location":"modules/net/#nethttp_posturl-body-headers","title":"<code>net.http_post(url, body, [headers])</code>","text":"<p>Performs an HTTP POST request to the specified URL.</p> <ul> <li>Parameters:<ul> <li><code>url</code> (string): The URL to send the POST request to.</li> <li><code>body</code> (string): The request body to send.</li> <li><code>headers</code> (table, optional): A table of request headers to set.</li> </ul> </li> <li>Returns:<ul> <li><code>body</code> (string): The response body as a string.</li> <li><code>status_code</code> (number): The HTTP status code of the response.</li> <li><code>headers</code> (table): A table containing the response headers.</li> <li><code>error</code> (string): An error message if the request failed.</li> </ul> </li> </ul>"},{"location":"modules/net/#netdownloadurl-destination_path","title":"<code>net.download(url, destination_path)</code>","text":"<p>Downloads a file from a URL and saves it to a local path.</p> <ul> <li>Parameters:<ul> <li><code>url</code> (string): The URL of the file to download.</li> <li><code>destination_path</code> (string): The local file path to save the downloaded content.</li> </ul> </li> <li>Returns:<ul> <li><code>error</code>: An error object if the download fails.</li> </ul> </li> </ul>"},{"location":"modules/net/#example","title":"Example","text":"<pre><code>command = function()\n  local net = require(\"net\")\n\n  -- Example GET request\n  log.info(\"Performing GET request to httpbin.org...\")\n  local body, status, headers, err = net.http_get(\"https://httpbin.org/get\")\n  if err then\n    log.error(\"GET request failed: \" .. err)\n    return false, \"GET request failed\"\n  end\n  log.info(\"GET request successful! Status: \" .. status)\n  -- print(\"Response Body: \" .. body)\n\n  -- Example POST request\n  log.info(\"Performing POST request to httpbin.org...\")\n  local post_body = '{\"name\": \"sloth-runner\", \"awesome\": true}'\n  local post_headers = { [\"Content-Type\"] = \"application/json\" }\n  body, status, headers, err = net.http_post(\"https://httpbin.org/post\", post_body, post_headers)\n  if err then\n    log.error(\"POST request failed: \" .. err)\n    return false, \"POST request failed\"\n  end\n  log.info(\"POST request successful! Status: \" .. status)\n  -- print(\"Response Body: \" .. body)\n\n  -- Example Download\n  local download_path = \"/tmp/sloth-runner-logo.svg\"\n  log.info(\"Downloading file to \" .. download_path)\n  local err = net.download(\"https://raw.githubusercontent.com/chalkan3-sloth/sloth-runner/master/assets/sloth-runner-logo.svg\", download_path)\n  if err then\n    log.error(\"Download failed: \" .. err)\n    return false, \"Download failed\"\n  end\n  log.info(\"File downloaded successfully.\")\n  fs.rm(download_path) -- Clean up\n\n  return true, \"Net module operations successful.\"\nend\n</code></pre>"},{"location":"modules/notifications/","title":"Notifications Module","text":"<p>The <code>notifications</code> module provides a simple way to send messages to various notification services from your pipelines. This is particularly useful for reporting the success or failure of a CI/CD workflow.</p> <p>Currently, the following services are supported: - Slack - ntfy</p>"},{"location":"modules/notifications/#configuration","title":"Configuration","text":"<p>Before using the module, you need to add the required credentials or URLs to your <code>configs/values.yaml</code> file. The module will read these values at runtime.</p> <pre><code># configs/values.yaml\n\nnotifications:\n  slack:\n    # Your Slack Incoming Webhook URL\n    webhook_url: \"https://hooks.slack.com/services/...\"\n  ntfy:\n    # The ntfy server to use. Can be the public one or self-hosted.\n    server: \"https://ntfy.sh\"\n    # The topic to publish the notification to.\n    topic: \"your-sloth-runner-topic\"\n</code></pre>"},{"location":"modules/notifications/#slack","title":"Slack","text":""},{"location":"modules/notifications/#notificationsslacksendparams","title":"<code>notifications.slack.send(params)</code>","text":"<p>Sends a message to a Slack channel via an Incoming Webhook.</p> <p>Parameters:</p> <ul> <li><code>params</code> (table): A table containing the following fields:<ul> <li><code>webhook_url</code> (string): Required. The Slack Incoming Webhook URL. It's recommended to get this from the <code>values</code> module.</li> <li><code>message</code> (string): Required. The main text of the message.</li> <li><code>pipeline</code> (string): Optional. The name of the pipeline, which will be displayed in the message attachment for context.</li> <li><code>error_details</code> (string): Optional. Any error details to include in the message attachment. This is useful for failure notifications.</li> </ul> </li> </ul> <p>Returns:</p> <ul> <li><code>true</code> on success.</li> <li><code>false, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>local values = require(\"values\")\n\nlocal slack_webhook = values.get(\"notifications.slack.webhook_url\")\n\nif slack_webhook and slack_webhook ~= \"\" then\n  -- On success\n  notifications.slack.send({\n    webhook_url = slack_webhook,\n    message = \"\u2705 Pipeline executed successfully!\",\n    pipeline = \"my-awesome-pipeline\"\n  })\n\n  -- On failure\n  notifications.slack.send({\n    webhook_url = slack_webhook,\n    message = \"\u274c Pipeline execution failed!\",\n    pipeline = \"my-awesome-pipeline\",\n    error_details = \"Could not connect to database.\"\n  })\nend\n</code></pre>"},{"location":"modules/notifications/#ntfy","title":"ntfy","text":""},{"location":"modules/notifications/#notificationsntfysendparams","title":"<code>notifications.ntfy.send(params)</code>","text":"<p>Sends a message to an ntfy.sh topic.</p> <p>Parameters:</p> <ul> <li><code>params</code> (table): A table containing the following fields:<ul> <li><code>server</code> (string): Required. The ntfy server URL.</li> <li><code>topic</code> (string): Required. The topic to send the message to.</li> <li><code>message</code> (string): Required. The body of the notification.</li> <li><code>title</code> (string): Optional. The title of the notification.</li> <li><code>priority</code> (string): Optional. Notification priority (e.g., <code>high</code>, <code>default</code>, <code>low</code>).</li> <li><code>tags</code> (table): Optional. A list of tags (emojis) to add to the notification.</li> </ul> </li> </ul> <p>Returns:</p> <ul> <li><code>true</code> on success.</li> <li><code>false, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>local values = require(\"values\")\n\nlocal ntfy_server = values.get(\"notifications.ntfy.server\")\nlocal ntfy_topic = values.get(\"notifications.ntfy.topic\")\n\nif ntfy_topic and ntfy_topic ~= \"\" then\n  -- On success\n  notifications.ntfy.send({\n    server = ntfy_server,\n    topic = ntfy_topic,\n    title = \"Pipeline Success\",\n    message = \"The pipeline finished without errors.\",\n    priority = \"default\",\n    tags = {\"tada\"}\n  })\n\n  -- On failure\n  notifications.ntfy.send({\n    server = ntfy_server,\n    topic = ntfy_topic,\n    title = \"Pipeline Failed!\",\n    message = \"The pipeline failed with an error.\",\n    priority = \"high\",\n    tags = {\"skull\", \"warning\"}\n  })\nend\n</code></pre>"},{"location":"modules/pkg/","title":"\ud83d\udce6 Package Manager Module","text":"<p>The <code>pkg</code> module provides comprehensive cross-platform package management functionality. It automatically detects the system's package manager and provides a unified interface for managing packages.</p>"},{"location":"modules/pkg/#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"modules/pkg/#modern-syntax-recommended","title":"Modern Syntax (Recommended)","text":"<pre><code>-- pkg is available globally, no require needed!\ntask(\"install_tools\")\n  :command(function()\n    pkg.update()\n    pkg.install({\"git\", \"curl\", \"vim\"})\n    return true\n  end)\n  :build()\n</code></pre>"},{"location":"modules/pkg/#classic-syntax-still-supported","title":"Classic Syntax (Still Supported)","text":"<pre><code>local pkg = require(\"pkg\")\n\ntask(\"install_tools\")\n  :command(function()\n    pkg.update()\n    pkg.install({\"git\", \"curl\", \"vim\"})\n    return true\n  end)\n  :build()\n</code></pre> <p>\ud83d\udca1 Tip: Use the modern syntax! All built-in modules (<code>pkg</code>, <code>docker</code>, <code>systemd</code>, <code>git</code>, <code>terraform</code>, etc.) are available globally without <code>require()</code>.</p>"},{"location":"modules/pkg/#supported-package-managers","title":"\ud83c\udfaf Supported Package Managers","text":"Package Manager Systems Auto-Detected apt / apt-get Debian, Ubuntu \u2705 yum / dnf RHEL, CentOS, Fedora, Amazon Linux \u2705 pacman Arch Linux, Manjaro \u2705 zypper openSUSE, SLES \u2705 brew macOS (Homebrew) \u2705"},{"location":"modules/pkg/#api-reference","title":"\ud83d\udcda API Reference","text":""},{"location":"modules/pkg/#installation-removal","title":"Installation &amp; Removal","text":""},{"location":"modules/pkg/#pkginstallpackages","title":"<code>pkg.install(packages)</code>","text":"<p>Install one or more packages.</p> <p>Parameters: - <code>packages</code>: <code>string</code> (single) or <code>table</code> (multiple)</p> <p>Returns: - <code>success</code> (boolean) - <code>output</code> (string)</p> <p>Examples:</p> <pre><code>-- Single package\nlocal ok, msg = pkg.install(\"nginx\")\n\n-- Multiple packages\nlocal ok, msg = pkg.install({\"git\", \"curl\", \"wget\", \"vim\"})\n\n-- In Modern DSL task\ntask(\"install_nginx\")\n  :command(function()\n    log.info(\"Installing nginx...\")\n    local success, output = pkg.install(\"nginx\")\n    if success then\n      log.success(\"\u2705 Nginx installed!\")\n    else\n      log.error(\"\u274c Failed: \" .. output)\n    end\n    return success\n  end)\n  :build()\n</code></pre>"},{"location":"modules/pkg/#pkgremovepackages","title":"<code>pkg.remove(packages)</code>","text":"<p>Remove one or more packages.</p> <p>Parameters: - <code>packages</code>: <code>string</code> (single) or <code>table</code> (multiple)</p> <p>Returns: - <code>success</code> (boolean) - <code>output</code> (string)</p> <p>Examples:</p> <pre><code>-- Remove single package\npkg.remove(\"apache2\")\n\n-- Remove multiple packages\npkg.remove({\"apache2\", \"php-fpm\"})\n</code></pre>"},{"location":"modules/pkg/#package-information","title":"Package Information","text":""},{"location":"modules/pkg/#pkgis_installedpackage","title":"<code>pkg.is_installed(package)</code>","text":"<p>Check if a package is installed.</p> <p>Parameters: - <code>package</code>: <code>string</code> - Package name</p> <p>Returns: - <code>installed</code> (boolean)</p> <p>Example:</p> <pre><code>if pkg.is_installed(\"nginx\") then\n  log.info(\"\u2705 Nginx is installed\")\nelse\n  log.warn(\"\u26a0\ufe0f  Nginx not found, installing...\")\n  pkg.install(\"nginx\")\nend\n</code></pre>"},{"location":"modules/pkg/#pkginfopackage","title":"<code>pkg.info(package)</code>","text":"<p>Get detailed information about a package.</p> <p>Parameters: - <code>package</code>: <code>string</code> - Package name</p> <p>Returns: - <code>success</code> (boolean) - <code>info</code> (string) - Package information</p> <p>Example:</p> <pre><code>local ok, info = pkg.info(\"nginx\")\nif ok then\n  print(info)  -- Shows version, description, dependencies, etc.\nend\n</code></pre>"},{"location":"modules/pkg/#pkgversionpackage","title":"<code>pkg.version(package)</code>","text":"<p>Get the installed version of a package.</p> <p>Parameters: - <code>package</code>: <code>string</code> - Package name</p> <p>Returns: - <code>success</code> (boolean) - <code>version</code> (string)</p> <p>Example:</p> <pre><code>local ok, ver = pkg.version(\"nginx\")\nif ok then\n  log.info(\"Nginx version: \" .. ver)\nend\n</code></pre>"},{"location":"modules/pkg/#pkgdepspackage","title":"<code>pkg.deps(package)</code>","text":"<p>List package dependencies.</p> <p>Parameters: - <code>package</code>: <code>string</code> - Package name</p> <p>Returns: - <code>success</code> (boolean) - <code>dependencies</code> (table or string)</p> <p>Example:</p> <pre><code>local ok, deps = pkg.deps(\"nginx\")\nif ok and type(deps) == \"table\" then\n  for _, dep in ipairs(deps) do\n    print(\"  - \" .. dep)\n  end\nend\n</code></pre>"},{"location":"modules/pkg/#repository-management","title":"Repository Management","text":""},{"location":"modules/pkg/#pkgupdate","title":"<code>pkg.update()</code>","text":"<p>Update the package cache/repository list.</p> <p>Returns: - <code>success</code> (boolean) - <code>output</code> (string)</p> <p>Example:</p> <pre><code>task(\"update_cache\")\n  :command(function()\n    log.info(\"Updating package cache...\")\n    local ok, msg = pkg.update()\n    return ok\n  end)\n  :timeout(\"2m\")\n  :build()\n</code></pre>"},{"location":"modules/pkg/#pkgupgrade","title":"<code>pkg.upgrade()</code>","text":"<p>Upgrade all installed packages to their latest versions.</p> <p>Returns: - <code>success</code> (boolean) - <code>output</code> (string)</p> <p>Example:</p> <pre><code>task(\"upgrade_system\")\n  :command(function()\n    pkg.update()\n    local ok, msg = pkg.upgrade()\n    if ok then\n      log.success(\"\u2705 System upgraded!\")\n    end\n    return ok\n  end)\n  :timeout(\"30m\")\n  :build()\n</code></pre>"},{"location":"modules/pkg/#pkgsearchquery","title":"<code>pkg.search(query)</code>","text":"<p>Search for packages in repositories.</p> <p>Parameters: - <code>query</code>: <code>string</code> - Search term</p> <p>Returns: - <code>success</code> (boolean) - <code>results</code> (string) - Search results</p> <p>Example:</p> <pre><code>local ok, results = pkg.search(\"python3\")\nif ok then\n  print(results)\nend\n</code></pre>"},{"location":"modules/pkg/#maintenance","title":"Maintenance","text":""},{"location":"modules/pkg/#pkgclean","title":"<code>pkg.clean()</code>","text":"<p>Clean the package manager cache.</p> <p>Returns: - <code>success</code> (boolean) - <code>output</code> (string)</p> <p>Example:</p> <pre><code>pkg.clean()  -- Free up disk space\n</code></pre>"},{"location":"modules/pkg/#pkgautoremove","title":"<code>pkg.autoremove()</code>","text":"<p>Remove packages that were automatically installed as dependencies but are no longer needed.</p> <p>Returns: - <code>success</code> (boolean) - <code>output</code> (string)</p> <p>Example:</p> <pre><code>task(\"cleanup\")\n  :command(function()\n    pkg.autoremove()\n    pkg.clean()\n    return true\n  end)\n  :build()\n</code></pre>"},{"location":"modules/pkg/#pkglist","title":"<code>pkg.list()</code>","text":"<p>List all installed packages.</p> <p>Returns: - <code>success</code> (boolean) - <code>packages</code> (table or string) - List of installed packages</p> <p>Example:</p> <pre><code>local ok, packages = pkg.list()\nif ok and type(packages) == \"table\" then\n  log.info(\"Installed packages: \" .. #packages)\nend\n</code></pre>"},{"location":"modules/pkg/#advanced-functions","title":"Advanced Functions","text":""},{"location":"modules/pkg/#pkgget_manager","title":"<code>pkg.get_manager()</code>","text":"<p>Get the detected package manager name.</p> <p>Returns: - <code>manager</code> (string) - e.g., \"apt\", \"yum\", \"pacman\", \"brew\"</p> <p>Example:</p> <pre><code>local pm = pkg.get_manager()\nlog.info(\"Using package manager: \" .. pm)\n</code></pre>"},{"location":"modules/pkg/#pkgwhichexecutable","title":"<code>pkg.which(executable)</code>","text":"<p>Find the full path of an executable.</p> <p>Parameters: - <code>executable</code>: <code>string</code> - Command name</p> <p>Returns: - <code>success</code> (boolean) - <code>path</code> (string) - Full path or error message</p> <p>Example:</p> <pre><code>local ok, path = pkg.which(\"nginx\")\nif ok then\n  log.info(\"Nginx binary: \" .. path)\nend\n</code></pre>"},{"location":"modules/pkg/#pkginstall_localfile","title":"<code>pkg.install_local(file)</code>","text":"<p>Install a package from a local file.</p> <p>Parameters: - <code>file</code>: <code>string</code> - Path to package file (.deb, .rpm, etc.)</p> <p>Returns: - <code>success</code> (boolean) - <code>output</code> (string)</p> <p>Example:</p> <pre><code>pkg.install_local(\"/tmp/my-app_1.0.0_amd64.deb\")\n</code></pre>"},{"location":"modules/pkg/#complete-examples","title":"\ud83c\udfaf Complete Examples","text":""},{"location":"modules/pkg/#development-environment-setup","title":"Development Environment Setup","text":"<pre><code>task(\"setup_dev_env\")\n  :description(\"Install development tools\")\n  :command(function()\n    log.info(\"\ud83d\ude80 Setting up development environment...\")\n\n    -- Update cache\n    log.info(\"\ud83d\udce6 Updating package cache...\")\n    pkg.update()\n\n    -- Install dev tools\n    local tools = {\n      \"git\",\n      \"curl\",\n      \"wget\",\n      \"vim\",\n      \"build-essential\",  -- apt\n      \"htop\",\n      \"jq\"\n    }\n\n    log.info(\"\ud83d\udee0\ufe0f  Installing tools...\")\n    local ok, msg = pkg.install(tools)\n\n    if ok then\n      log.success(\"\u2705 All tools installed!\")\n\n      -- Verify installations\n      for _, tool in ipairs(tools) do\n        if pkg.is_installed(tool) then\n          local _, ver = pkg.version(tool)\n          log.info(\"  \u2713 \" .. tool .. \" \" .. (ver or \"\"))\n        end\n      end\n    else\n      log.error(\"\u274c Installation failed: \" .. msg)\n      return false\n    end\n\n    return true\n  end)\n  :timeout(\"10m\")\n  :build()\n</code></pre>"},{"location":"modules/pkg/#conditional-package-management","title":"Conditional Package Management","text":"<pre><code>task(\"ensure_nginx\")\n  :description(\"Ensure Nginx is installed and running\")\n  :command(function()\n    -- Check if already installed\n    if pkg.is_installed(\"nginx\") then\n      log.info(\"\u2705 Nginx already installed\")\n      local _, ver = pkg.version(\"nginx\")\n      log.info(\"   Version: \" .. ver)\n    else\n      log.info(\"Installing Nginx...\")\n      local ok, msg = pkg.install(\"nginx\")\n      if not ok then\n        log.error(\"Failed: \" .. msg)\n        return false\n      end\n    end\n\n    -- Start service (assuming systemd)\n    local systemd = require(\"systemd\")\n    systemd.enable(\"nginx\")\n    systemd.start(\"nginx\")\n\n    return true\n  end)\n  :build()\n</code></pre>"},{"location":"modules/pkg/#multi-package-workflow","title":"Multi-Package Workflow","text":"<pre><code>task(\"update\")\n  :command(function()\n    return pkg.update()\n  end)\n  :build()\n\ntask(\"install_web_stack\")\n  :depends_on(\"update\")\n  :command(function()\n    return pkg.install({\"nginx\", \"php-fpm\", \"mysql-server\"})\n  end)\n  :build()\n\ntask(\"cleanup\")\n  :depends_on(\"install_web_stack\")\n  :command(function()\n    pkg.autoremove()\n    pkg.clean()\n    return true\n  end)\n  :build()\n</code></pre>"},{"location":"modules/pkg/#cross-platform-package-management","title":"Cross-Platform Package Management","text":"<pre><code>task(\"install_docker\")\n  :command(function()\n    local pm = pkg.get_manager()\n    log.info(\"Package manager: \" .. pm)\n\n    pkg.update()\n\n    if pm == \"apt\" then\n      pkg.install({\"docker.io\", \"docker-compose\"})\n    elseif pm == \"yum\" or pm == \"dnf\" then\n      pkg.install({\"docker\", \"docker-compose\"})\n    elseif pm == \"pacman\" then\n      pkg.install({\"docker\", \"docker-compose\"})\n    elseif pm == \"brew\" then\n      pkg.install(\"docker\")\n    end\n\n    return true\n  end)\n  :build()\n</code></pre>"},{"location":"modules/pkg/#error-handling","title":"\ud83d\udd0d Error Handling","text":"<pre><code>task(\"safe_install\")\n  :command(function()\n    local ok, msg = pkg.install(\"nginx\")\n\n    if not ok then\n      log.error(\"Installation failed: \" .. msg)\n\n      -- Try alternative\n      log.info(\"Trying alternative package...\")\n      ok, msg = pkg.install(\"nginx-full\")\n    end\n\n    return ok, msg\n  end)\n  :on_error(function(err)\n    log.error(\"Task failed: \" .. err)\n    -- Cleanup or rollback here\n  end)\n  :retry(3)  -- Retry up to 3 times\n  :build()\n</code></pre>"},{"location":"modules/pkg/#best-practices","title":"\ud83d\udca1 Best Practices","text":""},{"location":"modules/pkg/#1-always-update-before-installing","title":"1. Always Update Before Installing","text":"<pre><code>-- \u2705 Good\npkg.update()\npkg.install(\"package\")\n\n-- \u274c Bad\npkg.install(\"package\")  -- May get outdated version\n</code></pre>"},{"location":"modules/pkg/#2-handle-installation-failures","title":"2. Handle Installation Failures","text":"<pre><code>-- \u2705 Good\nlocal ok, msg = pkg.install(\"nginx\")\nif not ok then\n  log.error(msg)\n  return false\nend\n\n-- \u274c Bad\npkg.install(\"nginx\")  -- Ignores failures\n</code></pre>"},{"location":"modules/pkg/#3-check-before-installing","title":"3. Check Before Installing","text":"<pre><code>-- \u2705 Good\nif not pkg.is_installed(\"nginx\") then\n  pkg.install(\"nginx\")\nend\n\n-- \u274c Bad (slower, may fail if already installed)\npkg.install(\"nginx\")\n</code></pre>"},{"location":"modules/pkg/#4-use-timeouts-for-long-operations","title":"4. Use Timeouts for Long Operations","text":"<pre><code>task(\"upgrade_all\")\n  :command(function()\n    return pkg.upgrade()\n  end)\n  :timeout(\"30m\")  -- \u2705 Prevent hanging\n  :build()\n</code></pre>"},{"location":"modules/pkg/#troubleshooting","title":"\ud83d\udc1b Troubleshooting","text":""},{"location":"modules/pkg/#permission-denied","title":"Permission Denied","text":"<p>Most package operations require root:</p> <pre><code># Run with sudo\nsudo sloth-runner run -f workflow.sloth\n</code></pre>"},{"location":"modules/pkg/#package-not-found","title":"Package Not Found","text":"<pre><code>-- Search first\nlocal ok, results = pkg.search(\"package-name\")\nprint(results)\n</code></pre>"},{"location":"modules/pkg/#lock-file-errors","title":"Lock File Errors","text":"<pre><code>-- Wait and retry\ntask(\"install\")\n  :command(function()\n    return pkg.install(\"package\")\n  end)\n  :retry(3)\n  :retry_delay(\"30s\")\n  :build()\n</code></pre>"},{"location":"modules/pkg/#related-modules","title":"\ud83d\udd17 Related Modules","text":"<ul> <li>systemd - Service management</li> <li>docker - Container management</li> <li>terraform - Infrastructure as Code</li> </ul>"},{"location":"modules/pkg/#see-also","title":"\ud83d\udcd6 See Also","text":"<ul> <li>Getting Started</li> <li>Modern DSL</li> <li>Examples Repository</li> </ul> <p>Package management made simple across all platforms! \ud83d\udce6\u2728     <pre><code>local pkg = require(\"pkg\")\n\nlocal install_tools = task(\"install_tools\")\n    :description(\"Install development tools\")\n    :command(function(this, params)\n        log.info(\"Installing tools...\")\n\n        -- Install multiple packages\n        local tools = {\"git\", \"curl\", \"wget\", \"vim\"}\n        local success, output = pkg.install(tools)\n\n        if success then\n            log.info(\"\u2705 Tools installed successfully!\")\n            return true, \"Installed\"\n        else\n            log.error(\"\u274c Failed: \" .. output)\n            return false, \"Failed\"\n        end\n    end)\n    :timeout(\"300s\")\n    :build()\n\nworkflow.define(\"setup\")\n    :tasks({ install_tools })\n</code></pre></p> With delegate_to <pre><code>local pkg = require(\"pkg\")\n\nlocal install_on_agent = task(\"install_on_agent\")\n    :description(\"Install packages on remote agent\")\n    :command(function(this, params)\n        log.info(\"Installing on remote agent...\")\n\n        local success, output = pkg.install({\"htop\", \"ncdu\"})\n\n        if success then\n            log.info(\"\u2705 Installed on agent!\")\n            return true, \"OK\"\n        else\n            return false, \"Failed\"\n        end\n    end)\n    :delegate_to(\"production-server\")\n    :timeout(\"300s\")\n    :build()\n\nworkflow.define(\"remote_install\")\n    :tasks({ install_on_agent })\n</code></pre>"},{"location":"modules/pkg/#pkgremovepackages_1","title":"<code>pkg.remove(packages)</code>","text":"<p>Removes one or more packages.</p> <p>Parameters: - <code>packages</code>: String or Table</p> <p>Returns: - <code>success</code> (boolean), <code>output</code> (string)</p> <p>Example:</p> <pre><code>local pkg = require(\"pkg\")\n\nlocal cleanup = task(\"cleanup\")\n    :description(\"Remove unnecessary packages\")\n    :command(function(this, params)\n        local packages = {\"package1\", \"package2\"}\n        local success, output = pkg.remove(packages)\n\n        if success then\n            log.info(\"\u2705 Packages removed\")\n            return true, \"Removed\"\n        end\n        return false, \"Failed\"\n    end)\n    :timeout(\"180s\")\n    :build()\n</code></pre>"},{"location":"modules/pkg/#package-information_1","title":"Package Information","text":""},{"location":"modules/pkg/#pkgsearchquery_1","title":"<code>pkg.search(query)</code>","text":"<p>Searches for packages.</p> <p>Example:</p> <pre><code>local pkg = require(\"pkg\")\n\nlocal search_python = task(\"search_python\")\n    :description(\"Search for Python packages\")\n    :command(function(this, params)\n        local success, results = pkg.search(\"python3\")\n\n        if success then\n            log.info(\"Search results:\")\n            local count = 0\n            for line in results:gmatch(\"[^\\r\\n]+\") do\n                if count &lt; 10 then\n                    log.info(\"  \u2022 \" .. line)\n                end\n                count = count + 1\n            end\n            return true, count .. \" results\"\n        end\n        return false, \"Search failed\"\n    end)\n    :timeout(\"60s\")\n    :build()\n</code></pre>"},{"location":"modules/pkg/#pkginfopackage_1","title":"<code>pkg.info(package)</code>","text":"<p>Gets package information.</p> <p>Example:</p> <pre><code>local success, info = pkg.info(\"curl\")\nif success then\n    log.info(\"Package info:\\n\" .. info)\nend\n</code></pre>"},{"location":"modules/pkg/#pkglist_1","title":"<code>pkg.list()</code>","text":"<p>Lists installed packages.</p> <p>Returns: <code>success</code> (boolean), <code>packages</code> (table)</p> <p>Example:</p> <pre><code>local success, packages = pkg.list()\nif success and type(packages) == \"table\" then\n    local count = 0\n    for _ in pairs(packages) do count = count + 1 end\n    log.info(\"\ud83d\udce6 Total: \" .. count .. \" packages\")\nend\n</code></pre>"},{"location":"modules/pkg/#system-maintenance","title":"System Maintenance","text":""},{"location":"modules/pkg/#pkgupdate_1","title":"<code>pkg.update()</code>","text":"<p>Updates package cache.</p> <p>Example:</p> <pre><code>local update_cache = task(\"update_cache\")\n    :description(\"Update package cache\")\n    :command(function(this, params)\n        log.info(\"Updating...\")\n        return pkg.update()\n    end)\n    :timeout(\"120s\")\n    :build()\n</code></pre>"},{"location":"modules/pkg/#pkgupgrade_1","title":"<code>pkg.upgrade()</code>","text":"<p>Upgrades all packages.</p>"},{"location":"modules/pkg/#pkgclean_1","title":"<code>pkg.clean()</code>","text":"<p>Cleans package cache.</p>"},{"location":"modules/pkg/#pkgautoremove_1","title":"<code>pkg.autoremove()</code>","text":"<p>Removes unused dependencies.</p> <p>Example:</p> <pre><code>local maintenance = task(\"maintenance\")\n    :description(\"System maintenance\")\n    :command(function(this, params)\n        -- Update\n        pkg.update()\n\n        -- Upgrade\n        pkg.upgrade()\n\n        -- Clean\n        pkg.clean()\n        pkg.autoremove()\n\n        return true, \"Maintenance complete\"\n    end)\n    :timeout(\"600s\")\n    :build()\n</code></pre>"},{"location":"modules/pkg/#advanced-functions_1","title":"Advanced Functions","text":""},{"location":"modules/pkg/#pkgis_installedpackage_1","title":"<code>pkg.is_installed(package)</code>","text":"<p>Checks if installed.</p> <p>Example:</p> <pre><code>local pkg = require(\"pkg\")\n\nlocal check_requirements = task(\"check_requirements\")\n    :description(\"Check required packages\")\n    :command(function(this, params)\n        local required = {\"git\", \"curl\", \"wget\"}\n        local missing = {}\n\n        for _, pkg_name in ipairs(required) do\n            local installed, _ = pkg.is_installed(pkg_name)\n            if not installed then\n                table.insert(missing, pkg_name)\n            end\n        end\n\n        if #missing &gt; 0 then\n            return false, \"Missing: \" .. table.concat(missing, \", \")\n        end\n\n        return true, \"All OK\"\n    end)\n    :build()\n</code></pre>"},{"location":"modules/pkg/#pkgget_manager_1","title":"<code>pkg.get_manager()</code>","text":"<p>Returns package manager name.</p> <p>Example:</p> <pre><code>local manager, err = pkg.get_manager()\nlog.info(\"Manager: \" .. (manager or \"unknown\"))\n</code></pre>"},{"location":"modules/pkg/#pkgwhichexecutable_1","title":"<code>pkg.which(executable)</code>","text":"<p>Finds executable path.</p> <p>Example:</p> <pre><code>local path, err = pkg.which(\"git\")\nif path then\n    log.info(\"Git at: \" .. path)\nend\n</code></pre>"},{"location":"modules/pkg/#pkgversionpackage_1","title":"<code>pkg.version(package)</code>","text":"<p>Gets package version.</p>"},{"location":"modules/pkg/#pkgdepspackage_1","title":"<code>pkg.deps(package)</code>","text":"<p>Lists dependencies.</p>"},{"location":"modules/pkg/#pkginstall_localfilepath","title":"<code>pkg.install_local(filepath)</code>","text":"<p>Installs from local file (.deb, .rpm).</p>"},{"location":"modules/pkg/#complete-examples_1","title":"\ud83c\udfaf Complete Examples","text":""},{"location":"modules/pkg/#development-environment-setup_1","title":"Development Environment Setup","text":"<pre><code>local pkg = require(\"pkg\")\n\nlocal update = task(\"update\")\n    :command(function() return pkg.update() end)\n    :build()\n\nlocal install_tools = task(\"install_tools\")\n    :command(function()\n        local tools = {\"git\", \"curl\", \"wget\", \"vim\", \"htop\"}\n        return pkg.install(tools)\n    end)\n    :depends_on({\"update\"})\n    :build()\n\nlocal verify = task(\"verify\")\n    :command(function()\n        for _, tool in ipairs({\"git\", \"curl\"}) do\n            if pkg.is_installed(tool) then\n                local path = pkg.which(tool)\n                log.info(\"\u2705 \" .. tool .. \" (\" .. path .. \")\")\n            end\n        end\n        return true, \"OK\"\n    end)\n    :depends_on({\"install_tools\"})\n    :build()\n\nworkflow.define(\"setup_dev\")\n    :tasks({ update, install_tools, verify })\n</code></pre>"},{"location":"modules/pkg/#distributed-management","title":"Distributed Management","text":"<pre><code>local pkg = require(\"pkg\")\n\nlocal update_servers = task(\"update_servers\")\n    :command(function() return pkg.update() end)\n    :delegate_to(\"prod-server-1\")\n    :build()\n\nlocal install_monitoring = task(\"install_monitoring\")\n    :command(function()\n        return pkg.install({\"htop\", \"iotop\", \"nethogs\"})\n    end)\n    :delegate_to(\"prod-server-1\")\n    :depends_on({\"update_servers\"})\n    :build()\n\nworkflow.define(\"setup_monitoring\")\n    :tasks({ update_servers, install_monitoring })\n</code></pre>"},{"location":"modules/pkg/#system-audit","title":"System Audit","text":"<pre><code>local pkg = require(\"pkg\")\n\nlocal audit = task(\"audit\")\n    :command(function()\n        log.info(\"\ud83d\udcca System Audit\")\n        log.info(\"=\".rep(60))\n\n        local manager = pkg.get_manager()\n        log.info(\"Manager: \" .. manager)\n\n        local _, packages = pkg.list()\n        local count = 0\n        for _ in pairs(packages) do count = count + 1 end\n        log.info(\"Packages: \" .. count)\n\n        local critical = {\"openssl\", \"curl\"}\n        for _, p in ipairs(critical) do\n            local installed = pkg.is_installed(p)\n            log.info((installed and \"\u2705\" or \"\u274c\") .. \" \" .. p)\n        end\n\n        return true, \"OK\"\n    end)\n    :build()\n\nworkflow.define(\"audit\")\n    :tasks({ audit })\n</code></pre>"},{"location":"modules/pkg/#best-practices_1","title":"\ud83d\ude80 Best Practices","text":"<ol> <li> <p>Update before installing: <pre><code>pkg.update()\npkg.install(\"package\")\n</code></pre></p> </li> <li> <p>Check before installing: <pre><code>if not pkg.is_installed(\"git\") then\n    pkg.install(\"git\")\nend\n</code></pre></p> </li> <li> <p>Cleanup after operations: <pre><code>pkg.clean()\npkg.autoremove()\n</code></pre></p> </li> <li> <p>Use delegate_to for remote: <pre><code>:delegate_to(\"server-name\")\n</code></pre></p> </li> </ol>"},{"location":"modules/pkg/#platform-notes","title":"\u26a0\ufe0f Platform Notes","text":"<ul> <li>Linux: Requires sudo</li> <li>macOS: Homebrew doesn't need sudo</li> <li>Arch: Uses pacman syntax</li> <li>openSUSE: Uses zypper</li> </ul>"},{"location":"modules/pkg/#see-also_1","title":"\ud83d\udd17 See Also","text":"<ul> <li>exec Module</li> <li>Modern DSL Guide</li> <li>Distributed Agents</li> </ul>"},{"location":"modules/pulumi/","title":"Pulumi Module","text":"<p>The <code>pulumi</code> module provides a fluent API to orchestrate Pulumi stacks, enabling you to manage your Infrastructure as Code (IaC) workflows directly from <code>sloth-runner</code>.</p>"},{"location":"modules/pulumi/#pulumistackname-options","title":"<code>pulumi.stack(name, options)</code>","text":"<p>Creates a Pulumi stack object.</p> <ul> <li>Parameters:<ul> <li><code>name</code> (string): The full name of the stack (e.g., <code>\"my-org/my-project/dev\"</code>).</li> <li><code>options</code> (table): A table of options.<ul> <li><code>workdir</code> (string): Required. The path to the Pulumi project directory.</li> </ul> </li> </ul> </li> <li>Returns:<ul> <li><code>stack</code> (object): A <code>PulumiStack</code> object.</li> <li><code>error</code>: An error object if the stack cannot be initialized.</li> </ul> </li> </ul>"},{"location":"modules/pulumi/#the-pulumistack-object","title":"The <code>PulumiStack</code> Object","text":"<p>This object represents a specific Pulumi stack and provides methods for interaction.</p>"},{"location":"modules/pulumi/#stackupoptions","title":"<code>stack:up([options])</code>","text":"<p>Creates or updates the stack's resources by running <code>pulumi up</code>.</p> <ul> <li>Parameters:<ul> <li><code>options</code> (table, optional):<ul> <li><code>yes</code> (boolean): If <code>true</code>, passes <code>--yes</code> to approve the update automatically.</li> <li><code>config</code> (table): A dictionary of configuration values to pass to the stack.</li> <li><code>args</code> (table): A list of additional string arguments to pass to the command.</li> </ul> </li> </ul> </li> <li>Returns:<ul> <li><code>result</code> (table): A table containing <code>success</code> (boolean), <code>stdout</code> (string), and <code>stderr</code> (string).</li> </ul> </li> </ul>"},{"location":"modules/pulumi/#stackpreviewoptions","title":"<code>stack:preview([options])</code>","text":"<p>Previews the changes that would be made by an update by running <code>pulumi preview</code>.</p> <ul> <li>Parameters: Same as <code>stack:up</code>.</li> <li>Returns: Same as <code>stack:up</code>.</li> </ul>"},{"location":"modules/pulumi/#stackrefreshoptions","title":"<code>stack:refresh([options])</code>","text":"<p>Refreshes the stack's state by running <code>pulumi refresh</code>.</p> <ul> <li>Parameters: Same as <code>stack:up</code>.</li> <li>Returns: Same as <code>stack:up</code>.</li> </ul>"},{"location":"modules/pulumi/#stackdestroyoptions","title":"<code>stack:destroy([options])</code>","text":"<p>Destroys all resources in the stack by running <code>pulumi destroy</code>.</p> <ul> <li>Parameters: Same as <code>stack:up</code>.</li> <li>Returns: Same as <code>stack:up</code>.</li> </ul>"},{"location":"modules/pulumi/#stackoutputs","title":"<code>stack:outputs()</code>","text":"<p>Retrieves the outputs of a deployed stack.</p> <ul> <li>Returns:<ul> <li><code>outputs</code> (table): A Lua table of the stack's outputs.</li> <li><code>error</code>: An error object if fetching outputs fails.</li> </ul> </li> </ul>"},{"location":"modules/pulumi/#example","title":"Example","text":"<p>This example shows a common pattern: deploying a networking stack (VPC) and then using its output (<code>vpcId</code>) to configure and deploy an application stack.</p> <pre><code>command = function()\n  local pulumi = require(\"pulumi\")\n\n  -- 1. Define the VPC stack\n  local vpc_stack = pulumi.stack(\"my-org/vpc/prod\", { workdir = \"./pulumi/vpc\" })\n\n  -- 2. Deploy the VPC\n  log.info(\"Deploying VPC stack...\")\n  local vpc_result = vpc_stack:up({ yes = true })\n  if not vpc_result.success then\n    return false, \"VPC deployment failed: \" .. vpc_result.stderr\n  end\n\n  -- 3. Get the VPC ID from its outputs\n  log.info(\"Fetching VPC outputs...\")\n  local vpc_outputs, err = vpc_stack:outputs()\n  if err then\n    return false, \"Failed to get VPC outputs: \" .. err\n  end\n  local vpc_id = vpc_outputs.vpcId\n\n  -- 4. Define the App stack\n  local app_stack = pulumi.stack(\"my-org/app/prod\", { workdir = \"./pulumi/app\" })\n\n  -- 5. Deploy the App, passing the vpcId as configuration\n  log.info(\"Deploying App stack into VPC: \" .. vpc_id)\n  local app_result = app_stack:up({\n    yes = true,\n    config = { [\"my-app:vpcId\"] = vpc_id }\n  })\n  if not app_result.success then\n    return false, \"App deployment failed: \" .. app_result.stderr\n  end\n\n  log.info(\"All stacks deployed successfully.\")\n  return true, \"Pulumi orchestration complete.\"\nend\n</code></pre>"},{"location":"modules/python/","title":"Python Module","text":"<p>The <code>python</code> module provides a convenient way to manage Python virtual environments (<code>venv</code>) and execute scripts from within your <code>sloth-runner</code> tasks. This is particularly useful for workflows that involve Python-based tools or scripts.</p>"},{"location":"modules/python/#pythonvenvpath","title":"<code>python.venv(path)</code>","text":"<p>Creates a Python virtual environment object. Note that this only creates the object in Lua; the environment itself is not created on the file system until you call <code>:create()</code>.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The file system path where the virtual environment should be created (e.g., <code>./.venv</code>).</li> </ul> </li> <li>Returns:<ul> <li><code>venv</code> (object): A virtual environment object with methods to interact with it.</li> </ul> </li> </ul>"},{"location":"modules/python/#venvcreate","title":"<code>venv:create()</code>","text":"<p>Creates the virtual environment on the file system at the specified path.</p> <ul> <li>Returns:<ul> <li><code>error</code>: An error object if the creation fails.</li> </ul> </li> </ul>"},{"location":"modules/python/#venvpipcommand","title":"<code>venv:pip(command)</code>","text":"<p>Executes a <code>pip</code> command within the context of the virtual environment.</p> <ul> <li>Parameters:<ul> <li><code>command</code> (string): The arguments to pass to <code>pip</code> (e.g., <code>install -r requirements.txt</code>).</li> </ul> </li> <li>Returns:<ul> <li><code>result</code> (table): A table containing the <code>stdout</code>, <code>stderr</code>, and <code>exit_code</code> of the <code>pip</code> command.</li> </ul> </li> </ul>"},{"location":"modules/python/#venvexecscript_path","title":"<code>venv:exec(script_path)</code>","text":"<p>Executes a Python script using the Python interpreter from the virtual environment.</p> <ul> <li>Parameters:<ul> <li><code>script_path</code> (string): The path to the Python script to execute.</li> </ul> </li> <li>Returns:<ul> <li><code>result</code> (table): A table containing the <code>stdout</code>, <code>stderr</code>, and <code>exit_code</code> of the script execution.</li> </ul> </li> </ul>"},{"location":"modules/python/#example","title":"Example","text":"<p>This example demonstrates a complete lifecycle: creating a virtual environment, installing dependencies from a <code>requirements.txt</code> file, and running a Python script.</p> <pre><code>-- examples/python_venv_lifecycle_example.sloth\n\nModern DSLs = {\n  main = {\n    description = \"A task to demonstrate the Python venv lifecycle.\",\n    create_workdir_before_run = true, -- Use a temporary workdir\n    tasks = {\n      {\n        name = \"run-python-script\",\n        description = \"Creates a venv, installs dependencies, and runs a script.\",\n        command = function(params)\n          local python = require(\"python\")\n          local workdir = params.workdir -- Get the temp workdir from the group\n\n          -- 1. Write our Python script and dependencies to the workdir\n          fs.write(workdir .. \"/requirements.txt\", \"requests==2.28.1\")\n          fs.write(workdir .. \"/main.py\", \"import requests\\nprint(f'Hello from Python! Using requests version: {requests.__version__}')\")\n\n          -- 2. Create a venv object\n          local venv_path = workdir .. \"/.venv\"\n          log.info(\"Setting up virtual environment at: \" .. venv_path)\n          local venv = python.venv(venv_path)\n\n          -- 3. Create the venv on the filesystem\n          venv:create()\n\n          -- 4. Install dependencies using pip\n          log.info(\"Installing dependencies from requirements.txt...\")\n          local pip_result = venv:pip(\"install -r \" .. workdir .. \"/requirements.txt\")\n          if pip_result.exit_code ~= 0 then\n            log.error(\"Pip install failed: \" .. pip_result.stderr)\n            return false, \"Failed to install Python dependencies.\"\n          end\n\n          -- 5. Execute the script\n          log.info(\"Running the Python script...\")\n          local exec_result = venv:exec(workdir .. \"/main.py\")\n          if exec_result.exit_code ~= 0 then\n            log.error(\"Python script failed: \" .. exec_result.stderr)\n            return false, \"Python script execution failed.\"\n          end\n\n          log.info(\"Python script executed successfully.\")\n          print(\"---\\n--- Python Script Output ---\")\n          print(exec_result.stdout)\n          print(\"----------------------------\")\n\n          return true, \"Python venv lifecycle complete.\"\n        end\n      }\n    }\n  }\n}\n</code></pre> <p>```</p>"},{"location":"modules/reliability/","title":"\ud83d\udee1\ufe0f Reliability Module","text":"<p>The Reliability module provides enterprise-grade reliability patterns including circuit breakers, retry logic with exponential backoff, and failure handling strategies. These patterns help build resilient systems that can gracefully handle failures and recover automatically.</p>"},{"location":"modules/reliability/#key-features","title":"\ud83d\ude80 Key Features","text":"<ul> <li>Circuit Breaker Pattern: Prevents cascading failures by stopping calls to failing services</li> <li>Retry Logic: Configurable retry strategies with backoff algorithms</li> <li>Failure Tracking: Persistent failure state across task executions</li> <li>Multiple Strategies: Fixed delay, exponential backoff, linear backoff, custom</li> <li>Jitter Support: Randomization to prevent thundering herd problems</li> <li>State Integration: Uses state module for persistent failure tracking</li> <li>Callback Support: Custom callbacks for retry and state change events</li> </ul>"},{"location":"modules/reliability/#basic-usage","title":"\ud83d\udccb Basic Usage","text":""},{"location":"modules/reliability/#simple-retry","title":"Simple Retry","text":"<pre><code>-- Retry a function up to 3 times with 1 second initial delay\nlocal result = reliability.retry(3, 1, function()\n    -- Your potentially failing code here\n    if math.random() &gt; 0.7 then\n        return \"Success!\"\n    else\n        return nil, \"Random failure\"\n    end\nend)\n\nif result then\n    log.info(\"Operation succeeded: \" .. result)\nelse \n    log.error(\"All retries failed\")\nend\n</code></pre>"},{"location":"modules/reliability/#advanced-retry-configuration","title":"Advanced Retry Configuration","text":"<pre><code>local config = {\n    max_attempts = 5,\n    initial_delay = 0.5,  -- 500ms\n    max_delay = 10,       -- 10 seconds max\n    strategy = reliability.strategy.EXPONENTIAL_BACKOFF,\n    multiplier = 2.0,\n    jitter = true,\n    on_retry = function(attempt, delay, error)\n        log.warn(\"Retry attempt \" .. attempt .. \" in \" .. delay .. \"s: \" .. error)\n    end\n}\n\nlocal result = reliability.retry_with_config(config, function()\n    -- Your code here\n    return call_external_service()\nend)\n</code></pre>"},{"location":"modules/reliability/#circuit-breaker","title":"Circuit Breaker","text":"<pre><code>local cb_config = {\n    max_failures = 3,     -- Open after 3 failures\n    timeout = 30,         -- Wait 30 seconds before trying half-open\n    success_threshold = 2, -- Need 2 successes to close circuit\n    on_state_change = function(from_state, to_state)\n        log.info(\"Circuit breaker: \" .. from_state .. \" -&gt; \" .. to_state)\n    end\n}\n\nlocal result = reliability.circuit_breaker(\"external_api\", cb_config, function()\n    -- Call that might fail\n    return http.get(\"https://api.example.com/data\")\nend)\n</code></pre>"},{"location":"modules/reliability/#retry-strategies","title":"\ud83d\udd04 Retry Strategies","text":""},{"location":"modules/reliability/#available-strategy-types","title":"Available Strategy Types","text":"<pre><code>-- Fixed delay between retries\nreliability.strategy.FIXED_DELAY\n\n-- Exponential backoff (delay doubles each time)\nreliability.strategy.EXPONENTIAL_BACKOFF  \n\n-- Linear backoff (delay increases linearly)\nreliability.strategy.LINEAR_BACKOFF\n\n-- Custom delay function\nreliability.strategy.CUSTOM_BACKOFF\n</code></pre>"},{"location":"modules/reliability/#custom-delay-function","title":"Custom Delay Function","text":"<pre><code>local config = {\n    max_attempts = 5,\n    strategy = reliability.strategy.CUSTOM_BACKOFF,\n    custom_delay = function(attempt)\n        -- Custom fibonacci-like delays\n        if attempt == 1 then return 1 end\n        if attempt == 2 then return 1 end\n        return (attempt - 1) + (attempt - 2)\n    end\n}\n</code></pre>"},{"location":"modules/reliability/#circuit-breaker-states","title":"\u26a1 Circuit Breaker States","text":""},{"location":"modules/reliability/#state-transitions","title":"State Transitions","text":"<ul> <li>Closed \u2192 Open: After max_failures consecutive failures</li> <li>Open \u2192 Half-Open: After timeout period expires  </li> <li>Half-Open \u2192 Closed: After success_threshold successes</li> <li>Half-Open \u2192 Open: After any failure</li> </ul>"},{"location":"modules/reliability/#monitoring-circuit-state","title":"Monitoring Circuit State","text":"<pre><code>-- Get current statistics\nlocal stats = reliability.get_circuit_stats(\"my_service\")\nif stats then\n    log.info(\"Circuit state: \" .. stats.state)\n    log.info(\"Total requests: \" .. stats.requests)\n    log.info(\"Success rate: \" .. (stats.total_success / stats.requests * 100) .. \"%\")\nend\n\n-- List all circuit breakers\nlocal circuits = reliability.list_circuits()\nfor _, name in ipairs(circuits) do\n    log.info(\"Circuit: \" .. name)\nend\n\n-- Reset circuit breaker\nreliability.reset_circuit(\"my_service\")\n</code></pre>"},{"location":"modules/reliability/#integration-with-state-module","title":"\ud83d\udd17 Integration with State Module","text":""},{"location":"modules/reliability/#persistent-failure-tracking","title":"Persistent Failure Tracking","text":"<pre><code>-- Track failures across task executions\nlocal service_name = \"payment_service\"\nlocal failure_key = \"failures:\" .. service_name\n\nlocal function make_payment_call()\n    local success = make_api_call()\n\n    if success then\n        -- Reset failure count on success\n        state.set(failure_key, \"0\")\n        return true\n    else\n        -- Increment failure counter\n        local failures = state.increment(failure_key, 1)\n\n        -- Circuit break if too many failures\n        if failures &gt;= 5 then\n            return nil, \"Service circuit opened - too many failures\"\n        end\n\n        return nil, \"Temporary service failure\"\n    end\nend\n\n-- Use with retry\nlocal result = reliability.retry(3, 2, make_payment_call)\n</code></pre>"},{"location":"modules/reliability/#distributed-lock-with-retry","title":"Distributed Lock with Retry","text":"<pre><code>-- Combine distributed locking with retry logic\nlocal retry_config = {\n    max_attempts = 5,\n    initial_delay = 0.5,\n    strategy = reliability.strategy.LINEAR_BACKOFF\n}\n\nlocal result = reliability.retry_with_config(retry_config, function()\n    -- Try to acquire distributed lock\n    if not state.try_lock(\"critical_resource\", 10) then\n        return nil, \"Could not acquire lock\"\n    end\n\n    -- Do critical work\n    local work_result = perform_critical_operation()\n\n    -- Release lock\n    state.unlock(\"critical_resource\")\n\n    return work_result\nend)\n</code></pre>"},{"location":"modules/reliability/#advanced-patterns","title":"\ud83d\udcca Advanced Patterns","text":""},{"location":"modules/reliability/#combine-multiple-patterns","title":"Combine Multiple Patterns","text":"<pre><code>-- Deployment with circuit breaker, retry, and state tracking\nlocal deployment_steps = {\"validate\", \"backup\", \"deploy\", \"verify\"}\n\nfor _, step in ipairs(deployment_steps) do\n    local step_result = reliability.retry_with_config({\n        max_attempts = 3,\n        initial_delay = 1,\n        strategy = reliability.strategy.EXPONENTIAL_BACKOFF,\n        on_retry = function(attempt, delay, error)\n            state.append(\"deployment_log\", \n                step .. \" retry \" .. attempt .. \": \" .. error, \"\\n\")\n        end\n    }, function()\n        return reliability.circuit_breaker(\"deployment_service\", {\n            max_failures = 2,\n            timeout = 30,\n            on_state_change = function(from, to)\n                state.set(\"deployment_cb_state\", to)\n            end\n        }, function()\n            return execute_deployment_step(step)\n        end)\n    end)\n\n    if not step_result then\n        state.set(\"deployment_status\", \"failed_at_\" .. step)\n        return false, \"Deployment failed at: \" .. step\n    end\n\n    -- Update progress\n    local progress = math.floor((step_index / #deployment_steps) * 100)\n    state.set(\"deployment_progress\", progress)\nend\n\nstate.set(\"deployment_status\", \"completed\")\n</code></pre>"},{"location":"modules/reliability/#health-check-with-backoff","title":"Health Check with Backoff","text":"<pre><code>-- Health check with exponential backoff\nlocal health_config = {\n    max_attempts = 10,\n    initial_delay = 1,\n    max_delay = 60,\n    strategy = reliability.strategy.EXPONENTIAL_BACKOFF,\n    multiplier = 1.5,\n    jitter = true\n}\n\nlocal health_status = reliability.retry_with_config(health_config, function()\n    local response = http.get(\"http://localhost:8080/health\")\n\n    if response.status == 200 then\n        return response.body\n    else\n        return nil, \"Health check failed: \" .. response.status\n    end\nend)\n</code></pre>"},{"location":"modules/reliability/#configuration-reference","title":"\ud83c\udf9b\ufe0f Configuration Reference","text":""},{"location":"modules/reliability/#retry-configuration","title":"Retry Configuration","text":"<pre><code>{\n    max_attempts = 3,           -- Maximum retry attempts\n    initial_delay = 1,          -- Initial delay in seconds\n    max_delay = 30,             -- Maximum delay in seconds  \n    strategy = \"exponential\",   -- Retry strategy\n    multiplier = 2.0,           -- Backoff multiplier\n    jitter = true,              -- Add random jitter\n    on_retry = function(attempt, delay, error)\n        -- Retry callback\n    end\n}\n</code></pre>"},{"location":"modules/reliability/#circuit-breaker-configuration","title":"Circuit Breaker Configuration","text":"<pre><code>{\n    max_failures = 5,           -- Failures before opening\n    timeout = 60,               -- Seconds before half-open\n    success_threshold = 1,      -- Successes needed to close\n    on_state_change = function(from, to)\n        -- State change callback  \n    end\n}\n</code></pre>"},{"location":"modules/reliability/#error-handling","title":"\ud83d\udea8 Error Handling","text":""},{"location":"modules/reliability/#custom-error-predicates","title":"Custom Error Predicates","text":"<pre><code>-- Retry only on specific errors\nlocal config = {\n    max_attempts = 3,\n    should_retry = function(error)\n        -- Only retry on network errors\n        return string.find(error, \"network\") or string.find(error, \"timeout\")\n    end\n}\n</code></pre>"},{"location":"modules/reliability/#error-types","title":"Error Types","text":"<ul> <li>RetryableError: Explicitly marked as retryable</li> <li>NonRetryableError: Should not be retried</li> <li>CircuitBreakerError: Circuit is open, don't retry immediately</li> </ul>"},{"location":"modules/reliability/#monitoring-and-observability","title":"\ud83d\udcc8 Monitoring and Observability","text":""},{"location":"modules/reliability/#metrics-collection","title":"Metrics Collection","text":"<pre><code>-- Circuit breaker metrics\nlocal cb_stats = reliability.get_circuit_stats(\"service_name\")\n-- Returns: requests, total_success, total_failures, consecutive_success, \n--          consecutive_failures, state, last_success_time, last_failure_time\n\n-- State-based metrics\nlocal failure_count = tonumber(state.get(\"service_failures\", \"0\"))\nlocal success_rate = calculate_success_rate()\n\n-- Log metrics\nlog.info(\"Service metrics\", {\n    circuit_state = cb_stats.state,\n    failure_count = failure_count,\n    success_rate = success_rate\n})\n</code></pre> <p>The reliability module provides the foundation for building resilient, fault-tolerant automation workflows that can handle failures gracefully and recover automatically.</p>"},{"location":"modules/salt/","title":"Salt Module","text":"<p>The <code>salt</code> module provides a fluent API to interact with SaltStack, allowing you to run remote execution commands and manage configurations from your <code>sloth-runner</code> workflows.</p>"},{"location":"modules/salt/#saltclientoptions","title":"<code>salt.client([options])</code>","text":"<p>Creates a Salt client object.</p> <ul> <li>Parameters:<ul> <li><code>options</code> (table, optional): A table of options.<ul> <li><code>config_path</code> (string): Path to the Salt master configuration file.</li> </ul> </li> </ul> </li> <li>Returns:<ul> <li><code>client</code> (object): A <code>SaltClient</code> object.</li> </ul> </li> </ul>"},{"location":"modules/salt/#the-saltclient-object","title":"The <code>SaltClient</code> Object","text":"<p>This object represents a client for a Salt master and provides methods for targeting minions.</p>"},{"location":"modules/salt/#clienttargettarget_string-expr_form","title":"<code>client:target(target_string, [expr_form])</code>","text":"<p>Specifies the minion(s) to target for a command.</p> <ul> <li>Parameters:<ul> <li><code>target_string</code> (string): The target expression (e.g., <code>\"*\"</code> for all minions, <code>\"web-server-1\"</code>, or a grain value).</li> <li><code>expr_form</code> (string, optional): The type of targeting to use (e.g., <code>\"glob\"</code>, <code>\"grain\"</code>, <code>\"list\"</code>). Defaults to glob.</li> </ul> </li> <li>Returns:<ul> <li><code>target</code> (object): A <code>SaltTarget</code> object.</li> </ul> </li> </ul>"},{"location":"modules/salt/#the-salttarget-object","title":"The <code>SaltTarget</code> Object","text":"<p>This object represents a specific target and provides chainable methods for executing Salt functions.</p>"},{"location":"modules/salt/#targetcmdfunction-arg1-arg2","title":"<code>target:cmd(function, [arg1, arg2, ...])</code>","text":"<p>Executes a Salt execution module function on the target.</p> <ul> <li>Parameters:<ul> <li><code>function</code> (string): The name of the function to run (e.g., <code>\"test.ping\"</code>, <code>\"state.apply\"</code>, <code>\"cmd.run\"</code>).</li> <li><code>arg1</code>, <code>arg2</code>, ... (any): Additional arguments to pass to the Salt function.</li> </ul> </li> <li>Returns:<ul> <li><code>result</code> (table): A table containing <code>success</code> (boolean), <code>stdout</code> (string or table), and <code>stderr</code> (string). If the Salt command returns JSON, <code>stdout</code> will be a parsed Lua table.</li> </ul> </li> </ul>"},{"location":"modules/salt/#example","title":"Example","text":"<p>This example demonstrates targeting minions to ping them and apply a Salt state.</p> <pre><code>command = function()\n  local salt = require(\"salt\")\n\n  -- 1. Create a Salt client\n  local client = salt.client()\n\n  -- 2. Target all minions and ping them\n  log.info(\"Pinging all minions...\")\n  local ping_result = client:target(\"*\"):cmd(\"test.ping\")\n  if not ping_result.success then\n    return false, \"Failed to ping minions: \" .. ping_result.stderr\n  end\n  print(\"Ping Results:\")\n  print(data.to_yaml(ping_result.stdout)) -- stdout is a table\n\n  -- 3. Target a specific web server and apply a state\n  log.info(\"Applying 'nginx' state to web-server-1...\")\n  local apply_result = client:target(\"web-server-1\", \"glob\"):cmd(\"state.apply\", \"nginx\")\n  if not apply_result.success then\n    return false, \"Failed to apply state: \" .. apply_result.stderr\n  end\n\n  log.info(\"State applied successfully.\")\n  return true, \"Salt operations complete.\"\nend\n</code></pre>"},{"location":"modules/state/","title":"\ud83d\udcbe State Management Module","text":"<p>The State Management module provides powerful persistent state capabilities with atomic operations, distributed locks, and TTL (Time To Live) functionality. All data is stored locally using SQLite with WAL mode for maximum performance and reliability.</p>"},{"location":"modules/state/#key-features","title":"\ud83d\ude80 Key Features","text":"<ul> <li>SQLite Persistence: Reliable storage with WAL mode</li> <li>Atomic Operations: Thread-safe increment, compare-and-swap, append</li> <li>Distributed Locks: Critical sections with automatic timeout</li> <li>TTL (Time To Live): Automatic key expiration</li> <li>Data Types: String, number, boolean, table, list</li> <li>Pattern Matching: Wildcard key searches</li> <li>Auto Cleanup: Background cleanup of expired data</li> <li>Statistics: Usage and performance metrics</li> </ul>"},{"location":"modules/state/#basic-usage","title":"\ud83d\udccb Basic Usage","text":""},{"location":"modules/state/#setting-and-getting-values","title":"Setting and Getting Values","text":"<pre><code>-- Set values\nstate.set(\"app_version\", \"v1.2.3\")\nstate.set(\"user_count\", 1000)\nstate.set(\"config\", {\n    debug = true,\n    max_connections = 100\n})\n\n-- Get values\nlocal version = state.get(\"app_version\")\nlocal count = state.get(\"user_count\")\nlocal config = state.get(\"config\")\n\n-- Get with default value\nlocal theme = state.get(\"ui_theme\", \"dark\")\n\n-- Check existence\nif state.exists(\"app_version\") then\n    log.info(\"App version is configured\")\nend\n\n-- Delete key\nstate.delete(\"old_key\")\n</code></pre>"},{"location":"modules/state/#ttl-time-to-live","title":"TTL (Time To Live)","text":"<pre><code>-- Set with TTL (60 seconds)\nstate.set(\"session_token\", \"abc123\", 60)\n\n-- Set TTL for existing key\nstate.set_ttl(\"user_session\", 300) -- 5 minutes\n\n-- Check remaining TTL\nlocal ttl = state.get_ttl(\"session_token\")\nlog.info(\"Token expires in \" .. ttl .. \" seconds\")\n</code></pre>"},{"location":"modules/state/#atomic-operations","title":"Atomic Operations","text":"<pre><code>-- Atomic increment\nlocal counter = state.increment(\"page_views\", 1)\nlocal bulk_counter = state.increment(\"downloads\", 50)\n\n-- Atomic decrement  \nlocal remaining = state.decrement(\"inventory\", 5)\n\n-- String append\nstate.set(\"log_messages\", \"Starting application\")\nlocal new_length = state.append(\"log_messages\", \" -&gt; Connecting to database\")\n\n-- Atomic compare-and-swap\nlocal old_version = state.get(\"config_version\")\nlocal success = state.compare_swap(\"config_version\", old_version, old_version + 1)\nif success then\n    log.info(\"Configuration updated safely\")\nend\n</code></pre>"},{"location":"modules/state/#list-operations","title":"List Operations","text":"<pre><code>-- Add items to list\nstate.list_push(\"deployment_queue\", {\n    app = \"frontend\",\n    version = \"v2.1.0\",\n    environment = \"staging\"\n})\n\n-- Check list size\nlocal queue_size = state.list_length(\"deployment_queue\")\nlog.info(\"Items in queue: \" .. queue_size)\n\n-- Process list (pop removes last item)\nwhile state.list_length(\"deployment_queue\") &gt; 0 do\n    local deployment = state.list_pop(\"deployment_queue\")\n    log.info(\"Processing deployment: \" .. deployment.app)\n    -- Process deployment...\nend\n</code></pre>"},{"location":"modules/state/#distributed-locks-and-critical-sections","title":"Distributed Locks and Critical Sections","text":"<pre><code>-- Try to acquire lock (no waiting)\nlocal lock_acquired = state.try_lock(\"deployment_lock\", 30) -- 30 seconds TTL\nif lock_acquired then\n    -- Critical work\n    state.unlock(\"deployment_lock\")\nend\n\n-- Lock with wait and timeout\nlocal acquired = state.lock(\"database_migration\", 60) -- wait up to 60s\nif acquired then\n    -- Execute migration\n    state.unlock(\"database_migration\")\nend\n\n-- Critical section with automatic lock management\nstate.with_lock(\"critical_section\", function()\n    log.info(\"Executing critical operation...\")\n\n    -- Update global counter\n    local counter = state.increment(\"global_counter\", 1)\n\n    -- Update timestamp\n    state.set(\"last_operation\", os.time())\n\n    log.info(\"Critical operation completed - counter: \" .. counter)\n\n    -- Lock is automatically released when function returns\n    return \"operation_success\"\nend, 15) -- 15 second timeout\n</code></pre>"},{"location":"modules/state/#api-reference","title":"\ud83d\udd0d API Reference","text":""},{"location":"modules/state/#basic-operations","title":"Basic Operations","text":"Function Parameters Return Description <code>state.set(key, value, ttl?)</code> key: string, value: any, ttl?: number success: boolean Set a value with optional TTL <code>state.get(key, default?)</code> key: string, default?: any value: any Get a value or return default <code>state.delete(key)</code> key: string success: boolean Remove a key <code>state.exists(key)</code> key: string exists: boolean Check if key exists <code>state.clear(pattern?)</code> pattern?: string success: boolean Remove keys by pattern"},{"location":"modules/state/#ttl-operations","title":"TTL Operations","text":"Function Parameters Return Description <code>state.set_ttl(key, seconds)</code> key: string, seconds: number success: boolean Set TTL for existing key <code>state.get_ttl(key)</code> key: string ttl: number Get remaining TTL (-1 = no TTL, -2 = not exists)"},{"location":"modules/state/#atomic-operations_1","title":"Atomic Operations","text":"Function Parameters Return Description <code>state.increment(key, delta?)</code> key: string, delta?: number new_value: number Atomically increment value <code>state.decrement(key, delta?)</code> key: string, delta?: number new_value: number Atomically decrement value <code>state.append(key, value)</code> key: string, value: string new_length: number Atomically append string <code>state.compare_swap(key, old, new)</code> key: string, old: any, new: any success: boolean Atomic compare-and-swap"},{"location":"modules/state/#list-operations_1","title":"List Operations","text":"Function Parameters Return Description <code>state.list_push(key, item)</code> key: string, item: any length: number Add item to end of list <code>state.list_pop(key)</code> key: string item: any | nil Remove and return last item <code>state.list_length(key)</code> key: string length: number Get list length"},{"location":"modules/state/#distributed-locks","title":"Distributed Locks","text":"Function Parameters Return Description <code>state.try_lock(name, ttl)</code> name: string, ttl: number success: boolean Try to acquire lock without waiting <code>state.lock(name, timeout?)</code> name: string, timeout?: number success: boolean Acquire lock with timeout <code>state.unlock(name)</code> name: string success: boolean Release lock <code>state.with_lock(name, fn, timeout?)</code> name: string, fn: function, timeout?: number result: any Execute function with automatic lock"},{"location":"modules/state/#utilities","title":"Utilities","text":"Function Parameters Return Description <code>state.keys(pattern?)</code> pattern?: string keys: table List keys by pattern <code>state.stats()</code> - stats: table Get system statistics"},{"location":"modules/state/#practical-use-cases","title":"\ud83d\udca1 Practical Use Cases","text":""},{"location":"modules/state/#1-deployment-version-control","title":"1. Deployment Version Control","text":"<pre><code>Modern DSLs = {\n    deployment_pipeline = {\n        tasks = {\n            prepare_deploy = {\n                command = function()\n                    -- Check last deployed version\n                    local last_version = state.get(\"last_deployed_version\", \"v0.0.0\")\n                    local new_version = \"v1.2.3\"\n\n                    -- Check if already deployed\n                    if last_version == new_version then\n                        log.warn(\"Version \" .. new_version .. \" already deployed\")\n                        return false, \"Version already deployed\"\n                    end\n\n                    -- Register deployment start\n                    state.set(\"deploy_status\", \"in_progress\")\n                    state.set(\"deploy_start_time\", os.time())\n                    state.increment(\"total_deploys\", 1)\n\n                    return true, \"Deploy preparation completed\"\n                end\n            },\n\n            execute_deploy = {\n                depends_on = \"prepare_deploy\",\n                command = function()\n                    -- Critical section for deployment\n                    return state.with_lock(\"deployment_lock\", function()\n                        log.info(\"Executing deployment with lock...\")\n\n                        -- Simulate deployment\n                        exec.run(\"sleep 5\")\n\n                        -- Update state\n                        state.set(\"last_deployed_version\", \"v1.2.3\")\n                        state.set(\"deploy_status\", \"completed\")\n                        state.set(\"deploy_end_time\", os.time())\n\n                        -- Record history\n                        state.list_push(\"deploy_history\", {\n                            version = \"v1.2.3\",\n                            timestamp = os.time(),\n                            duration = state.get(\"deploy_end_time\") - state.get(\"deploy_start_time\")\n                        })\n\n                        return true, \"Deploy completed successfully\"\n                    end, 300) -- 5 minutes timeout\n                end\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"modules/state/#2-intelligent-caching-with-ttl","title":"2. Intelligent Caching with TTL","text":"<pre><code>-- Helper function for caching\nfunction get_cached_data(cache_key, fetch_function, ttl)\n    local cached = state.get(cache_key)\n    if cached then\n        log.info(\"Cache hit: \" .. cache_key)\n        return cached\n    end\n\n    log.info(\"Cache miss: \" .. cache_key .. \" - fetching...\")\n    local data = fetch_function()\n    state.set(cache_key, data, ttl or 300) -- 5 minutes default\n    return data\nend\n\n-- Usage in tasks\nModern DSLs = {\n    data_processing = {\n        tasks = {\n            fetch_user_data = {\n                command = function()\n                    local user_data = get_cached_data(\"user:123:profile\", function()\n                        -- Simulate expensive fetch\n                        return {\n                            name = \"Alice\",\n                            email = \"alice@example.com\",\n                            preferences = {\"dark_mode\", \"notifications\"}\n                        }\n                    end, 600) -- Cache for 10 minutes\n\n                    log.info(\"User data: \" .. data.to_json(user_data))\n                    return true, \"User data retrieved\"\n                end\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"modules/state/#3-rate-limiting","title":"3. Rate Limiting","text":"<pre><code>function check_rate_limit(identifier, max_requests, window_seconds)\n    local key = \"rate_limit:\" .. identifier\n    local current_count = state.get(key, 0)\n\n    if current_count &gt;= max_requests then\n        return false, \"Rate limit exceeded\"\n    end\n\n    -- Increment counter\n    if current_count == 0 then\n        -- First request in window\n        state.set(key, 1, window_seconds)\n    else\n        -- Increment existing counter\n        state.increment(key, 1)\n    end\n\n    return true, \"Request allowed\"\nend\n\n-- Usage in tasks\nModern DSLs = {\n    api_tasks = {\n        tasks = {\n            make_api_call = {\n                command = function()\n                    local allowed, msg = check_rate_limit(\"api_calls\", 100, 3600) -- 100 calls/hour\n\n                    if not allowed then\n                        log.error(msg)\n                        return false, msg\n                    end\n\n                    -- Make API call\n                    log.info(\"Making API call...\")\n                    return true, \"API call completed\"\n                end\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"modules/state/#configuration-and-storage","title":"\u2699\ufe0f Configuration and Storage","text":""},{"location":"modules/state/#database-location","title":"Database Location","text":"<p>By default, the SQLite database is created at: - Linux/macOS: <code>~/.sloth-runner/state.db</code> - Windows: <code>%USERPROFILE%\\.sloth-runner\\state.db</code></p>"},{"location":"modules/state/#technical-characteristics","title":"Technical Characteristics","text":"<ul> <li>Engine: SQLite 3 with WAL mode</li> <li>Concurrent Access: Support for multiple simultaneous connections</li> <li>Auto-cleanup: Automatic cleanup of expired data every 5 minutes</li> <li>Lock Timeout: Expired locks are cleaned automatically</li> <li>Serialization: JSON for complex objects, native format for simple types</li> </ul>"},{"location":"modules/state/#limitations","title":"Limitations","text":"<ul> <li>Local Scope: State is persisted only on local machine</li> <li>Concurrency: Locks are effective only within local process</li> <li>Size: Suitable for small to medium datasets (&lt; 1GB)</li> </ul>"},{"location":"modules/state/#best-practices","title":"\ud83d\udd04 Best Practices","text":"<ol> <li>Use TTL for temporary data to prevent storage bloat</li> <li>Use locks for critical sections to avoid race conditions  </li> <li>Use patterns for bulk operations to manage related keys</li> <li>Monitor storage size using <code>state.stats()</code> </li> <li>Use atomic operations instead of read-modify-write patterns</li> <li>Clean up expired keys regularly with <code>state.clear(pattern)</code></li> </ol> <p>The State Management module transforms sloth-runner into a stateful, reliable platform for complex task orchestration! \ud83d\ude80</p>"},{"location":"modules/systemd/","title":"\u2699\ufe0f Systemd Module","text":"<p>The <code>systemd</code> module provides comprehensive systemd service management functionality for Linux systems. It allows you to create, manage, and monitor systemd services programmatically.</p>"},{"location":"modules/systemd/#overview","title":"\ud83c\udfaf Overview","text":"<p>The systemd module enables you to: - Create and configure systemd service files - Start, stop, restart, and reload services - Enable and disable services - Check service status and activity - List all services - Manage systemd daemon configuration</p>"},{"location":"modules/systemd/#functions-overview","title":"\ud83d\udcda Functions Overview","text":"Function Description <code>systemd.create_service(name, config)</code> Create a new systemd service <code>systemd.start(service)</code> Start a service <code>systemd.stop(service)</code> Stop a service <code>systemd.restart(service)</code> Restart a service <code>systemd.reload(service)</code> Reload a service <code>systemd.enable(service)</code> Enable service at boot <code>systemd.disable(service)</code> Disable service at boot <code>systemd.status(service)</code> Get service status <code>systemd.is_active(service)</code> Check if service is active <code>systemd.is_enabled(service)</code> Check if service is enabled <code>systemd.daemon_reload()</code> Reload systemd daemon <code>systemd.remove_service(service)</code> Remove a service <code>systemd.list_services(opts)</code> List all services <code>systemd.show(service)</code> Show detailed service info"},{"location":"modules/systemd/#detailed-documentation","title":"\ud83d\udcd6 Detailed Documentation","text":""},{"location":"modules/systemd/#service-creation","title":"Service Creation","text":""},{"location":"modules/systemd/#systemdcreate_servicename-config","title":"<code>systemd.create_service(name, config)</code>","text":"<p>Creates a new systemd service file at <code>/etc/systemd/system/{name}.service</code>.</p> <p>Parameters: - <code>name</code> (string): Service name (without .service extension) - <code>config</code> (table): Service configuration</p> <p>Configuration Options:</p> <pre><code>{\n    -- [Unit] section\n    description = \"Service description\",\n    after = \"network.target\",\n    wants = \"other.service\",\n    requires = \"required.service\",\n\n    -- [Service] section (required)\n    exec_start = \"/path/to/executable\",\n    exec_stop = \"/path/to/stop/script\",\n    exec_reload = \"/path/to/reload/script\",\n    type = \"simple\",  -- simple, forking, oneshot, dbus, notify, idle\n    user = \"username\",\n    group = \"groupname\",\n    working_directory = \"/path/to/workdir\",\n    restart = \"always\",  -- no, on-success, on-failure, on-abnormal, on-abort, always\n    restart_sec = \"5s\",\n    environment = {\n        VAR1 = \"value1\",\n        VAR2 = \"value2\"\n    },\n\n    -- [Install] section\n    wanted_by = \"multi-user.target\"\n}\n</code></pre> <p>Returns: - <code>success</code> (boolean): <code>true</code> if service was created - <code>message</code> (string): Result message</p> <p>Examples:</p> Modern DSLWith delegate_to <pre><code>local systemd = require(\"systemd\")\n\nlocal create_web_service = task(\"create_web_service\")\n    :description(\"Create web application service\")\n    :command(function(this, params)\n        log.info(\"Creating web service...\")\n\n        local config = {\n            description = \"Web Application Server\",\n            after = \"network.target\",\n            exec_start = \"/usr/bin/node /app/server.js\",\n            type = \"simple\",\n            user = \"webapp\",\n            working_directory = \"/app\",\n            restart = \"always\",\n            restart_sec = \"10s\",\n            environment = {\n                NODE_ENV = \"production\",\n                PORT = \"3000\"\n            }\n        }\n\n        local success, msg = systemd.create_service(\"webapp\", config)\n\n        if success then\n            log.info(\"\u2705 Service created!\")\n            -- Reload daemon and enable\n            systemd.daemon_reload()\n            systemd.enable(\"webapp\")\n            systemd.start(\"webapp\")\n            return true, \"Service deployed\"\n        else\n            log.error(\"\u274c Failed: \" .. msg)\n            return false, msg\n        end\n    end)\n    :timeout(\"60s\")\n    :build()\n\nworkflow.define(\"deploy_service\")\n    :tasks({ create_web_service })\n</code></pre> <pre><code>local systemd = require(\"systemd\")\n\nlocal deploy_remote_service = task(\"deploy_remote_service\")\n    :description(\"Deploy service on remote agent\")\n    :command(function(this, params)\n        local config = {\n            description = \"Remote Monitoring Agent\",\n            after = \"network.target\",\n            exec_start = \"/opt/monitor/agent\",\n            type = \"simple\",\n            user = \"monitor\",\n            restart = \"always\"\n        }\n\n        local success, msg = systemd.create_service(\"monitor-agent\", config)\n\n        if success then\n            systemd.daemon_reload()\n            systemd.enable(\"monitor-agent\")\n            systemd.start(\"monitor-agent\")\n            log.info(\"\u2705 Deployed on \" .. (this.agent or \"local\"))\n            return true, \"OK\"\n        end\n\n        return false, \"Failed\"\n    end)\n    :delegate_to(\"production-server\")\n    :timeout(\"60s\")\n    :build()\n\nworkflow.define(\"remote_deploy\")\n    :tasks({ deploy_remote_service })\n</code></pre>"},{"location":"modules/systemd/#service-control","title":"Service Control","text":""},{"location":"modules/systemd/#systemdstartservice","title":"<code>systemd.start(service)</code>","text":"<p>Starts a systemd service.</p> <p>Parameters: - <code>service</code> (string): Service name</p> <p>Returns: - <code>success</code> (boolean), <code>output</code> (string)</p> <p>Example: <pre><code>local success, output = systemd.start(\"nginx\")\nif success then\n    log.info(\"\u2705 Nginx started\")\nend\n</code></pre></p>"},{"location":"modules/systemd/#systemdstopservice","title":"<code>systemd.stop(service)</code>","text":"<p>Stops a systemd service.</p> <p>Example: <pre><code>local success, output = systemd.stop(\"nginx\")\n</code></pre></p>"},{"location":"modules/systemd/#systemdrestartservice","title":"<code>systemd.restart(service)</code>","text":"<p>Restarts a systemd service.</p> <p>Example: <pre><code>local success, output = systemd.restart(\"nginx\")\n</code></pre></p>"},{"location":"modules/systemd/#systemdreloadservice","title":"<code>systemd.reload(service)</code>","text":"<p>Reloads a systemd service configuration without restarting.</p> <p>Example: <pre><code>local success, output = systemd.reload(\"nginx\")\n</code></pre></p>"},{"location":"modules/systemd/#service-status","title":"Service Status","text":""},{"location":"modules/systemd/#systemdstatusservice","title":"<code>systemd.status(service)</code>","text":"<p>Gets detailed status of a service.</p> <p>Returns: - <code>status</code> (string): Status output - <code>error</code> (string): Error message if any</p> <p>Example: <pre><code>local status, err = systemd.status(\"nginx\")\nlog.info(\"Status:\\n\" .. status)\n</code></pre></p>"},{"location":"modules/systemd/#systemdis_activeservice","title":"<code>systemd.is_active(service)</code>","text":"<p>Checks if a service is currently active/running.</p> <p>Returns: - <code>active</code> (boolean): <code>true</code> if active - <code>state</code> (string): Service state</p> <p>Example: <pre><code>local active, state = systemd.is_active(\"nginx\")\nif active then\n    log.info(\"\u2705 Service is running\")\nelse\n    log.warn(\"\u274c Service is \" .. state)\nend\n</code></pre></p>"},{"location":"modules/systemd/#systemdis_enabledservice","title":"<code>systemd.is_enabled(service)</code>","text":"<p>Checks if a service is enabled to start at boot.</p> <p>Returns: - <code>enabled</code> (boolean): <code>true</code> if enabled - <code>state</code> (string): Enable state</p> <p>Example: <pre><code>local enabled, state = systemd.is_enabled(\"nginx\")\n</code></pre></p>"},{"location":"modules/systemd/#service-management","title":"Service Management","text":""},{"location":"modules/systemd/#systemdenableservice","title":"<code>systemd.enable(service)</code>","text":"<p>Enables a service to start automatically at boot.</p> <p>Example: <pre><code>local success, output = systemd.enable(\"nginx\")\n</code></pre></p>"},{"location":"modules/systemd/#systemddisableservice","title":"<code>systemd.disable(service)</code>","text":"<p>Disables a service from starting at boot.</p> <p>Example: <pre><code>local success, output = systemd.disable(\"nginx\")\n</code></pre></p>"},{"location":"modules/systemd/#systemddaemon_reload","title":"<code>systemd.daemon_reload()</code>","text":"<p>Reloads systemd daemon configuration. Required after creating or modifying service files.</p> <p>Example: <pre><code>local success, output = systemd.daemon_reload()\n</code></pre></p>"},{"location":"modules/systemd/#systemdremove_serviceservice","title":"<code>systemd.remove_service(service)</code>","text":"<p>Removes a systemd service completely (stops, disables, and deletes the service file).</p> <p>Example: <pre><code>local success, msg = systemd.remove_service(\"old-service\")\n</code></pre></p>"},{"location":"modules/systemd/#service-information","title":"Service Information","text":""},{"location":"modules/systemd/#systemdlist_servicesoptions","title":"<code>systemd.list_services(options)</code>","text":"<p>Lists systemd services with optional filters.</p> <p>Parameters: - <code>options</code> (table, optional): Filter options   - <code>state</code>: Filter by state (e.g., \"active\", \"failed\", \"inactive\")   - <code>no_header</code>: Boolean, exclude header in output</p> <p>Returns: - <code>list</code> (string): Service list - <code>error</code> (string): Error if any</p> <p>Example: <pre><code>-- List all services\nlocal list, err = systemd.list_services()\nlog.info(list)\n\n-- List only active services\nlocal active, err = systemd.list_services({ state = \"active\" })\n\n-- List failed services without header\nlocal failed, err = systemd.list_services({ \n    state = \"failed\", \n    no_header = true \n})\n</code></pre></p>"},{"location":"modules/systemd/#systemdshowservice","title":"<code>systemd.show(service)</code>","text":"<p>Shows detailed properties of a service.</p> <p>Returns: - <code>info</code> (string): Detailed service information - <code>error</code> (string): Error if any</p> <p>Example: <pre><code>local info, err = systemd.show(\"nginx\")\nlog.info(\"Service details:\\n\" .. info)\n</code></pre></p>"},{"location":"modules/systemd/#complete-examples","title":"\ud83c\udfaf Complete Examples","text":""},{"location":"modules/systemd/#web-application-deployment","title":"Web Application Deployment","text":"<pre><code>local systemd = require(\"systemd\")\n\nlocal deploy_webapp = task(\"deploy_webapp\")\n    :description(\"Deploy and configure web application\")\n    :command(function(this, params)\n        log.info(\"\ud83d\ude80 Deploying web application...\")\n\n        -- Create service\n        local config = {\n            description = \"Node.js Web Application\",\n            after = \"network.target postgresql.service\",\n            requires = \"postgresql.service\",\n            exec_start = \"/usr/bin/node /var/www/app/server.js\",\n            exec_reload = \"/bin/kill -HUP $MAINPID\",\n            type = \"simple\",\n            user = \"webapp\",\n            group = \"webapp\",\n            working_directory = \"/var/www/app\",\n            restart = \"always\",\n            restart_sec = \"10s\",\n            environment = {\n                NODE_ENV = \"production\",\n                PORT = \"3000\",\n                DB_HOST = \"localhost\"\n            },\n            wanted_by = \"multi-user.target\"\n        }\n\n        local success, msg = systemd.create_service(\"webapp\", config)\n        if not success then\n            return false, \"Failed to create service: \" .. msg\n        end\n\n        log.info(\"\u2705 Service file created\")\n\n        -- Reload daemon\n        systemd.daemon_reload()\n        log.info(\"\u2705 Daemon reloaded\")\n\n        -- Enable and start\n        systemd.enable(\"webapp\")\n        log.info(\"\u2705 Service enabled\")\n\n        systemd.start(\"webapp\")\n        log.info(\"\u2705 Service started\")\n\n        -- Verify it's running\n        local active, state = systemd.is_active(\"webapp\")\n        if active then\n            log.info(\"\u2705 Service is running!\")\n            return true, \"Deployment successful\"\n        else\n            log.error(\"\u274c Service failed to start: \" .. state)\n            return false, \"Service not running\"\n        end\n    end)\n    :timeout(\"120s\")\n    :build()\n\nworkflow.define(\"deploy\")\n    :tasks({ deploy_webapp })\n</code></pre>"},{"location":"modules/systemd/#service-health-check","title":"Service Health Check","text":"<pre><code>local systemd = require(\"systemd\")\n\nlocal health_check = task(\"health_check\")\n    :description(\"Check critical services health\")\n    :command(function(this, params)\n        log.info(\"\ud83d\udd0d Health Check Starting...\")\n        log.info(string.rep(\"=\", 60))\n\n        local services = {\n            \"nginx\",\n            \"postgresql\",\n            \"redis\",\n            \"webapp\"\n        }\n\n        local all_healthy = true\n\n        for _, service in ipairs(services) do\n            local active, state = systemd.is_active(service)\n            local enabled, enable_state = systemd.is_enabled(service)\n\n            log.info(\"\\n\ud83d\udce6 \" .. service .. \":\")\n            log.info(\"  Active: \" .. (active and \"\u2705 YES\" or \"\u274c NO (\" .. state .. \")\"))\n            log.info(\"  Enabled: \" .. (enabled and \"\u2705 YES\" or \"\u26a0\ufe0f  NO\"))\n\n            if not active then\n                all_healthy = false\n                log.warn(\"  \u26a0\ufe0f  Service is not running!\")\n            end\n        end\n\n        log.info(\"\\n\" .. string.rep(\"=\", 60))\n\n        if all_healthy then\n            log.info(\"\u2705 All services healthy\")\n            return true, \"All OK\"\n        else\n            log.error(\"\u274c Some services are down\")\n            return false, \"Services down\"\n        end\n    end)\n    :timeout(\"60s\")\n    :build()\n\nworkflow.define(\"health_check\")\n    :tasks({ health_check })\n</code></pre>"},{"location":"modules/systemd/#distributed-service-management","title":"Distributed Service Management","text":"<pre><code>local systemd = require(\"systemd\")\n\nlocal restart_all_servers = task(\"restart_nginx\")\n    :description(\"Restart nginx on all servers\")\n    :command(function(this, params)\n        log.info(\"\ud83d\udd04 Restarting nginx...\")\n\n        local success, output = systemd.restart(\"nginx\")\n\n        if success then\n            -- Wait a bit for restart\n            os.execute(\"sleep 2\")\n\n            -- Verify it's running\n            local active, state = systemd.is_active(\"nginx\")\n            if active then\n                log.info(\"\u2705 Nginx restarted on \" .. (this.agent or \"local\"))\n                return true, \"OK\"\n            else\n                log.error(\"\u274c Nginx failed to start: \" .. state)\n                return false, \"Failed\"\n            end\n        end\n\n        return false, \"Restart failed\"\n    end)\n    :delegate_to(\"web-server-1\")\n    :timeout(\"60s\")\n    :build()\n\nworkflow.define(\"rolling_restart\")\n    :tasks({ restart_all_servers })\n</code></pre>"},{"location":"modules/systemd/#service-monitoring","title":"Service Monitoring","text":"<pre><code>local systemd = require(\"systemd\")\n\nlocal monitor_services = task(\"monitor_services\")\n    :description(\"Monitor and report service status\")\n    :command(function(this, params)\n        log.info(\"\ud83d\udcca Service Monitoring Report\")\n        log.info(string.rep(\"=\", 60))\n\n        -- List all failed services\n        local failed, _ = systemd.list_services({ \n            state = \"failed\",\n            no_header = true \n        })\n\n        if failed and failed ~= \"\" then\n            log.warn(\"\\n\u26a0\ufe0f  Failed Services:\")\n            log.warn(failed)\n        else\n            log.info(\"\\n\u2705 No failed services\")\n        end\n\n        -- List active services count\n        local active, _ = systemd.list_services({ \n            state = \"active\",\n            no_header = true \n        })\n\n        if active then\n            local count = 0\n            for _ in active:gmatch(\"[^\\r\\n]+\") do\n                count = count + 1\n            end\n            log.info(\"\\n\ud83d\udcca Active services: \" .. count)\n        end\n\n        log.info(\"\\n\" .. string.rep(\"=\", 60))\n        return true, \"Report complete\"\n    end)\n    :timeout(\"60s\")\n    :build()\n\nworkflow.define(\"monitor\")\n    :tasks({ monitor_services })\n</code></pre>"},{"location":"modules/systemd/#service-update-workflow","title":"Service Update Workflow","text":"<pre><code>local systemd = require(\"systemd\")\n\nlocal update_service = task(\"update_service\")\n    :description(\"Update service configuration\")\n    :command(function(this, params)\n        local service_name = \"webapp\"\n\n        log.info(\"\ud83d\udd04 Updating \" .. service_name .. \"...\")\n\n        -- Check if running\n        local was_active, _ = systemd.is_active(service_name)\n\n        -- Stop if running\n        if was_active then\n            log.info(\"Stopping service...\")\n            systemd.stop(service_name)\n        end\n\n        -- Update service configuration\n        local new_config = {\n            description = \"Updated Web Application\",\n            after = \"network.target\",\n            exec_start = \"/usr/bin/node /app/server.js\",\n            type = \"simple\",\n            user = \"webapp\",\n            working_directory = \"/app\",\n            restart = \"always\",\n            environment = {\n                NODE_ENV = \"production\",\n                PORT = \"3000\",\n                VERSION = \"2.0\"  -- New version\n            }\n        }\n\n        systemd.create_service(service_name, new_config)\n        systemd.daemon_reload()\n\n        -- Start if it was running before\n        if was_active then\n            log.info(\"Starting service...\")\n            systemd.start(service_name)\n\n            -- Verify\n            local active, _ = systemd.is_active(service_name)\n            if active then\n                log.info(\"\u2705 Service updated and running\")\n                return true, \"Updated\"\n            end\n        end\n\n        return true, \"Configuration updated\"\n    end)\n    :timeout(\"120s\")\n    :build()\n\nworkflow.define(\"update\")\n    :tasks({ update_service })\n</code></pre>"},{"location":"modules/systemd/#best-practices","title":"\ud83d\ude80 Best Practices","text":"<ol> <li> <p>Always reload daemon after creating/modifying services: <pre><code>systemd.create_service(\"myservice\", config)\nsystemd.daemon_reload()\n</code></pre></p> </li> <li> <p>Verify service started successfully: <pre><code>systemd.start(\"myservice\")\nlocal active, state = systemd.is_active(\"myservice\")\nif not active then\n    log.error(\"Service failed: \" .. state)\nend\n</code></pre></p> </li> <li> <p>Enable services for persistence: <pre><code>systemd.enable(\"myservice\")  -- Start at boot\n</code></pre></p> </li> <li> <p>Use proper service types:</p> </li> <li><code>simple</code>: Default, process doesn't fork</li> <li><code>forking</code>: Process forks and parent exits</li> <li><code>oneshot</code>: Process exits before systemd continues</li> <li> <p><code>notify</code>: Process sends notification when ready</p> </li> <li> <p>Set restart policies: <pre><code>restart = \"always\"  -- Always restart\nrestart_sec = \"10s\"  -- Wait 10s between restarts\n</code></pre></p> </li> <li> <p>Use delegate_to for distributed management: <pre><code>:delegate_to(\"server-name\")\n</code></pre></p> </li> </ol>"},{"location":"modules/systemd/#security-considerations","title":"\u26a0\ufe0f Security Considerations","text":"<ul> <li>Service files are created in <code>/etc/systemd/system/</code> (requires root/sudo)</li> <li>Always specify <code>user</code> and <code>group</code> to avoid running as root</li> <li>Use <code>WorkingDirectory</code> to isolate service environment</li> <li>Validate environment variables before setting them</li> <li>Use proper file permissions (0644 for service files)</li> </ul>"},{"location":"modules/systemd/#platform-support","title":"\ud83d\udc27 Platform Support","text":"<ul> <li>Linux: Full support (systemd-based distributions)</li> <li>Ubuntu/Debian: \u2705 Supported</li> <li>CentOS/RHEL: \u2705 Supported</li> <li>Fedora: \u2705 Supported</li> <li>Arch Linux: \u2705 Supported</li> <li>macOS: \u274c Not supported (use launchd instead)</li> <li>Windows: \u274c Not supported (use sc.exe or nssm)</li> </ul>"},{"location":"modules/systemd/#see-also","title":"\ud83d\udd17 See Also","text":"<ul> <li>exec Module - For running custom systemctl commands</li> <li>Modern DSL Guide - DSL syntax reference</li> <li>Distributed Agents - Remote execution with delegate_to</li> <li>Official systemd documentation</li> </ul>"},{"location":"modules/terraform/","title":"Terraform Module","text":"<p>The <code>terraform</code> module provides a high-level interface for orchestrating <code>terraform</code> CLI commands, allowing you to manage your infrastructure lifecycle directly from within a Sloth-Runner pipeline.</p>"},{"location":"modules/terraform/#configuration","title":"Configuration","text":"<p>This module requires the <code>terraform</code> CLI to be installed and available in the system's PATH. All commands must be executed within a specific <code>workdir</code> where your <code>.tf</code> files are located.</p>"},{"location":"modules/terraform/#functions","title":"Functions","text":""},{"location":"modules/terraform/#terraforminitparams","title":"<code>terraform.init(params)</code>","text":"<p>Initializes a Terraform working directory.</p> <ul> <li><code>params</code> (table):<ul> <li><code>workdir</code> (string): Required. The path to the directory containing the Terraform files.</li> </ul> </li> <li>Returns: A result table with <code>success</code>, <code>stdout</code>, <code>stderr</code>, and <code>exit_code</code>.</li> </ul>"},{"location":"modules/terraform/#terraformplanparams","title":"<code>terraform.plan(params)</code>","text":"<p>Creates a Terraform execution plan.</p> <ul> <li><code>params</code> (table):<ul> <li><code>workdir</code> (string): Required. The path to the directory.</li> <li><code>out</code> (string): Optional. The filename to save the generated plan to.</li> </ul> </li> <li>Returns: A result table.</li> </ul>"},{"location":"modules/terraform/#terraformapplyparams","title":"<code>terraform.apply(params)</code>","text":"<p>Applies a Terraform plan.</p> <ul> <li><code>params</code> (table):<ul> <li><code>workdir</code> (string): Required. The path to the directory.</li> <li><code>plan</code> (string): Optional. The path to a plan file to apply.</li> <li><code>auto_approve</code> (boolean): Optional. If <code>true</code>, applies changes without interactive approval.</li> </ul> </li> <li>Returns: A result table.</li> </ul>"},{"location":"modules/terraform/#terraformdestroyparams","title":"<code>terraform.destroy(params)</code>","text":"<p>Destroys Terraform-managed infrastructure.</p> <ul> <li><code>params</code> (table):<ul> <li><code>workdir</code> (string): Required. The path to the directory.</li> <li><code>auto_approve</code> (boolean): Optional. If <code>true</code>, destroys resources without interactive approval.</li> </ul> </li> <li>Returns: A result table.</li> </ul>"},{"location":"modules/terraform/#terraformoutputparams","title":"<code>terraform.output(params)</code>","text":"<p>Reads an output variable from a Terraform state file.</p> <ul> <li><code>params</code> (table):<ul> <li><code>workdir</code> (string): Required. The path to the directory.</li> <li><code>name</code> (string): Optional. The name of a specific output to read. If omitted, all outputs are returned as a table.</li> </ul> </li> <li>Returns:<ul> <li>On success: The parsed JSON value of the output (can be a string, table, etc.).</li> <li>On failure: <code>nil, error_message</code>.</li> </ul> </li> </ul>"},{"location":"modules/terraform/#full-lifecycle-example","title":"Full Lifecycle Example","text":"<pre><code>local tf_workdir = \"./examples/terraform\"\n\n-- Task 1: Init\nlocal result_init = terraform.init({workdir = tf_workdir})\nif not result_init.success then return false, \"Init failed\" end\n\n-- Task 2: Plan\nlocal result_plan = terraform.plan({workdir = tf_workdir})\nif not result_plan.success then return false, \"Plan failed\" end\n\n-- Task 3: Apply\nlocal result_apply = terraform.apply({workdir = tf_workdir, auto_approve = true})\nif not result_apply.success then return false, \"Apply failed\" end\n\n-- Task 4: Get Output\nlocal filename, err = terraform.output({workdir = tf_workdir, name = \"report_filename\"})\nif not filename then return false, \"Output failed: \" .. err end\nlog.info(\"Terraform created file: \" .. filename)\n\n-- Task 5: Destroy\nlocal result_destroy = terraform.destroy({workdir = tf_workdir, auto_approve = true})\nif not result_destroy.success then return false, \"Destroy failed\" end\n</code></pre>"},{"location":"pt/","title":"Documenta\u00e7\u00e3o do Sloth-Runner","text":"<p>Bem-vindo \u00e0 documenta\u00e7\u00e3o completa do Sloth-Runner, sua ferramenta flex\u00edvel para automa\u00e7\u00e3o de tarefas e orquestra\u00e7\u00e3o de fluxos de trabalho usando scripts Lua.</p> <p>Aqui voc\u00ea encontrar\u00e1 guias detalhados, refer\u00eancias de API e exemplos pr\u00e1ticos para aproveitar ao m\u00e1ximo o poder do Sloth-Runner.</p>"},{"location":"pt/#indice","title":"\u00cdndice","text":"<ul> <li>Agendador de Tarefas</li> <li>In\u00edcio R\u00e1pido</li> <li>Conceitos Essenciais</li> <li>Exemplos Pr\u00e1ticos</li> <li>Funcionalidades Avan\u00e7adas</li> <li>REPL Interativo</li> <li>M\u00f3dulos Built-in:<ul> <li>M\u00f3dulo AWS</li> <li>M\u00f3dulo Azure</li> <li>M\u00f3dulo DigitalOcean</li> <li>M\u00f3dulo Docker</li> <li>M\u00f3dulo Git</li> <li>M\u00f3dulo Pulumi</li> <li>M\u00f3dulo Salt</li> <li>M\u00f3dulo Terraform</li> </ul> </li> <li>Exemplos Avan\u00e7ados</li> </ul>"},{"location":"pt/CLI/","title":"\ud83d\ude80 Sloth Runner CLI Reference","text":"<p>Complete command-line interface reference for Sloth Runner - the AI-powered GitOps task orchestration platform.</p>"},{"location":"pt/CLI/#overview","title":"Overview","text":"<p>Sloth Runner provides a comprehensive CLI for task execution, agent management, scheduling, and workflow orchestration.</p> <p>Main Commands:</p> <pre><code>sloth-runner [command] [flags]\n</code></pre> Command Description <code>run</code> Execute tasks from workflow files <code>agent</code> Manage distributed agents <code>master</code> Start the master coordination server <code>scheduler</code> Manage scheduled tasks <code>stack</code> Manage workflow stacks and state <code>ui</code> Start the web dashboard <code>workflow</code> Create and manage workflows <code>list</code> List tasks from workflow files <code>version</code> Show version information"},{"location":"pt/CLI/#sloth-runner-run","title":"<code>sloth-runner run</code>","text":"<p>Execute tasks defined in <code>.sloth</code> workflow files with multiple output formats and state persistence.</p>"},{"location":"pt/CLI/#usage","title":"Usage","text":"<pre><code>sloth-runner run [file.sloth|stack-name] [flags]\n</code></pre>"},{"location":"pt/CLI/#flags","title":"Flags","text":"Flag Type Description <code>-f, --file</code> string Path to the Lua/Sloth task file <code>-o, --output</code> string Output style: <code>basic</code>, <code>enhanced</code>, <code>rich</code>, <code>modern</code>, <code>json</code> (default: <code>basic</code>) <code>-v, --values</code> string Path to values file (YAML/JSON) for parameterization <code>--interactive</code> bool Run in interactive mode with prompts <code>--yes</code> bool Skip confirmation prompts"},{"location":"pt/CLI/#output-styles","title":"Output Styles","text":"<ul> <li>basic: Simple text output</li> <li>enhanced: Colored output with icons</li> <li>rich: Detailed output with progress bars</li> <li>modern: Modern UI with animations</li> <li>json: Machine-readable JSON output</li> </ul>"},{"location":"pt/CLI/#examples","title":"Examples","text":"<pre><code># Run with modern output style\nsloth-runner run -f deploy.sloth -o modern\n\n# Run with values file\nsloth-runner run -f infra.sloth -v prod-values.yaml\n\n# Run from stack\nsloth-runner run prod-stack --yes\n\n# Interactive mode\nsloth-runner run -f tasks.sloth --interactive\n\n# JSON output for CI/CD\nsloth-runner run -f ci.sloth -o json\n</code></pre>"},{"location":"pt/CLI/#sloth-runner-agent","title":"<code>sloth-runner agent</code>","text":"<p>Manage distributed agents for remote task execution.</p>"},{"location":"pt/CLI/#subcommands","title":"Subcommands","text":""},{"location":"pt/CLI/#agent-start","title":"<code>agent start</code>","text":"<p>Start an agent in agent mode to accept tasks from master server.</p> <pre><code>sloth-runner agent start [flags]\n</code></pre> <p>Flags: - <code>--master string</code>: Master server address (default: <code>localhost:50053</code>) - <code>--name string</code>: Agent name identifier - <code>--tags string</code>: Comma-separated tags for agent capabilities - <code>--daemon</code>: Run as background daemon</p> <p>Example: <pre><code># Start agent with tags\nsloth-runner agent start --master master.example.com:50053 \\\n  --name prod-agent-1 \\\n  --tags linux,docker,aws\n\n# Start as daemon\nsloth-runner agent start --daemon --name bg-agent\n</code></pre></p>"},{"location":"pt/CLI/#agent-list","title":"<code>agent list</code>","text":"<p>List all registered agents with their status.</p> <pre><code>sloth-runner agent list [flags]\n</code></pre> <p>Flags: - <code>--master string</code>: Master server address</p> <p>Example: <pre><code>sloth-runner agent list --master master.example.com:50053\n</code></pre></p>"},{"location":"pt/CLI/#agent-run","title":"<code>agent run</code>","text":"<p>Execute a command on a remote agent.</p> <pre><code>sloth-runner agent run [flags]\n</code></pre> <p>Flags: - <code>--agent string</code>: Target agent name - <code>--command string</code>: Command to execute - <code>--master string</code>: Master server address</p> <p>Example: <pre><code>sloth-runner agent run --agent prod-agent-1 \\\n  --command \"docker ps\" \\\n  --master master.example.com:50053\n</code></pre></p>"},{"location":"pt/CLI/#agent-stop","title":"<code>agent stop</code>","text":"<p>Stop a remote agent gracefully.</p> <pre><code>sloth-runner agent stop [flags]\n</code></pre> <p>Flags: - <code>--agent string</code>: Agent name to stop - <code>--master string</code>: Master server address</p>"},{"location":"pt/CLI/#agent-delete","title":"<code>agent delete</code>","text":"<p>Delete an agent from the registry.</p> <pre><code>sloth-runner agent delete [flags]\n</code></pre>"},{"location":"pt/CLI/#sloth-runner-master","title":"<code>sloth-runner master</code>","text":"<p>Start the master coordination server for managing distributed agents.</p>"},{"location":"pt/CLI/#usage_1","title":"Usage","text":"<pre><code>sloth-runner master [flags]\n</code></pre>"},{"location":"pt/CLI/#flags_1","title":"Flags","text":"Flag Type Description <code>-p, --port</code> int Port to listen on (default: <code>50053</code>) <code>--daemon</code> bool Run as background daemon <code>--debug</code> bool Enable debug logging"},{"location":"pt/CLI/#examples_1","title":"Examples","text":"<pre><code># Start master server\nsloth-runner master --port 50053\n\n# Start as daemon with debug\nsloth-runner master --daemon --debug\n\n# Custom port\nsloth-runner master --port 9000\n</code></pre>"},{"location":"pt/CLI/#sloth-runner-scheduler","title":"<code>sloth-runner scheduler</code>","text":"<p>Manage scheduled tasks for automated execution.</p>"},{"location":"pt/CLI/#subcommands_1","title":"Subcommands","text":""},{"location":"pt/CLI/#scheduler-enable","title":"<code>scheduler enable</code>","text":"<p>Enable the scheduler service.</p> <pre><code>sloth-runner scheduler enable\n</code></pre>"},{"location":"pt/CLI/#scheduler-disable","title":"<code>scheduler disable</code>","text":"<p>Disable the scheduler service.</p> <pre><code>sloth-runner scheduler disable\n</code></pre>"},{"location":"pt/CLI/#scheduler-list","title":"<code>scheduler list</code>","text":"<p>List all scheduled tasks with their configuration.</p> <pre><code>sloth-runner scheduler list [flags]\n</code></pre> <p>Output: - Task name - Schedule (cron expression) - Next run time - Status (enabled/disabled)</p> <p>Example: <pre><code>sloth-runner scheduler list\n</code></pre></p>"},{"location":"pt/CLI/#scheduler-delete","title":"<code>scheduler delete</code>","text":"<p>Delete a scheduled task.</p> <pre><code>sloth-runner scheduler delete [task-name]\n</code></pre>"},{"location":"pt/CLI/#sloth-runner-stack","title":"<code>sloth-runner stack</code>","text":"<p>Manage workflow stacks for state persistence and environment isolation.</p>"},{"location":"pt/CLI/#subcommands_2","title":"Subcommands","text":""},{"location":"pt/CLI/#stack-new","title":"<code>stack new</code>","text":"<p>Create a new workflow stack.</p> <pre><code>sloth-runner stack new [stack-name] [flags]\n</code></pre> <p>Flags: - <code>-f, --file string</code>: Workflow file to associate - <code>--description string</code>: Stack description</p> <p>Example: <pre><code>sloth-runner stack new prod-infra \\\n  -f infrastructure.sloth \\\n  --description \"Production infrastructure stack\"\n</code></pre></p>"},{"location":"pt/CLI/#stack-list","title":"<code>stack list</code>","text":"<p>List all workflow stacks.</p> <pre><code>sloth-runner stack list\n</code></pre> <p>Output: - Stack name - Workflow file - State status - Last updated</p>"},{"location":"pt/CLI/#stack-show","title":"<code>stack show</code>","text":"<p>Show detailed information about a stack.</p> <pre><code>sloth-runner stack show [stack-name]\n</code></pre> <p>Output: - Stack configuration - State variables - Execution history - Associated resources</p>"},{"location":"pt/CLI/#stack-delete","title":"<code>stack delete</code>","text":"<p>Delete a workflow stack and its state.</p> <pre><code>sloth-runner stack delete [stack-name] [flags]\n</code></pre> <p>Flags: - <code>--force</code>: Force deletion without confirmation</p>"},{"location":"pt/CLI/#sloth-runner-ui","title":"<code>sloth-runner ui</code>","text":"<p>Start the web-based dashboard for visual management.</p>"},{"location":"pt/CLI/#usage_2","title":"Usage","text":"<pre><code>sloth-runner ui [flags]\n</code></pre>"},{"location":"pt/CLI/#flags_2","title":"Flags","text":"Flag Type Description <code>-p, --port</code> int Port for UI server (default: <code>8080</code>) <code>--daemon</code> bool Run as background daemon <code>--debug</code> bool Enable debug logging"},{"location":"pt/CLI/#features","title":"Features","text":"<ul> <li>\ud83d\udcca Real-time task monitoring</li> <li>\ud83e\udd16 Agent health dashboard</li> <li>\ud83d\udcc5 Scheduler management</li> <li>\ud83d\udce6 Stack browser</li> <li>\ud83d\udcc8 Metrics and analytics</li> </ul>"},{"location":"pt/CLI/#examples_2","title":"Examples","text":"<pre><code># Start UI on default port\nsloth-runner ui\n\n# Custom port\nsloth-runner ui --port 3000\n\n# Run as daemon\nsloth-runner ui --daemon --port 8080\n</code></pre> <p>Access at: <code>http://localhost:8080</code></p>"},{"location":"pt/CLI/#sloth-runner-workflow","title":"<code>sloth-runner workflow</code>","text":"<p>Create and manage workflow projects with scaffolding.</p>"},{"location":"pt/CLI/#subcommands_3","title":"Subcommands","text":""},{"location":"pt/CLI/#workflow-init","title":"<code>workflow init</code>","text":"<p>Initialize a new workflow project with templates.</p> <pre><code>sloth-runner workflow init [project-name] [flags]\n</code></pre> <p>Flags: - <code>--template string</code>: Template to use (default: <code>basic</code>) - <code>--path string</code>: Target directory</p> <p>Available Templates: - <code>basic</code>: Simple task workflow - <code>cicd</code>: CI/CD pipeline - <code>infra</code>: Infrastructure automation - <code>gitops</code>: GitOps deployment</p> <p>Example: <pre><code># Create CI/CD project\nsloth-runner workflow init my-pipeline --template cicd\n\n# Custom path\nsloth-runner workflow init my-project --template infra --path ./projects/\n</code></pre></p>"},{"location":"pt/CLI/#workflow-list-templates","title":"<code>workflow list-templates</code>","text":"<p>List all available workflow templates.</p> <pre><code>sloth-runner workflow list-templates\n</code></pre>"},{"location":"pt/CLI/#sloth-runner-list","title":"<code>sloth-runner list</code>","text":"<p>List tasks and task groups from a workflow file without execution.</p>"},{"location":"pt/CLI/#usage_3","title":"Usage","text":"<pre><code>sloth-runner list [flags]\nsloth-runner list [flags]\n</code></pre> <p>Flags:</p> <ul> <li><code>-f, --file string</code>: (Required) Path to the Lua task configuration file.</li> <li><code>-v, --values string</code>: Path to a YAML values file, in case your task definitions depend on it.</li> </ul>"},{"location":"pt/CLI/#sloth-runner-new","title":"<code>sloth-runner new</code>","text":"<p>Generates a new boilerplate Lua task definition file from a template.</p> <p>Usage: <pre><code>sloth-runner new &lt;group-name&gt; [flags]\n</code></pre></p> <p>Arguments:</p> <ul> <li><code>&lt;group-name&gt;</code>: The name of the main task group to be created in the file.</li> </ul> <p>Flags:</p> <ul> <li><code>-t, --template string</code>: The template to use. Default is <code>simple</code>. Run <code>sloth-runner template list</code> to see all available options.</li> <li><code>-o, --output string</code>: The path to the output file. If not provided, the generated content will be printed to stdout.</li> </ul> <pre><code>sloth-runner list [flags]\n</code></pre>"},{"location":"pt/CLI/#flags_3","title":"Flags","text":"Flag Type Description <code>-f, --file</code> string Path to workflow file"},{"location":"pt/CLI/#output","title":"Output","text":"<ul> <li>Task groups</li> <li>Task names</li> <li>Descriptions</li> <li>Dependencies</li> <li>Conditions</li> </ul>"},{"location":"pt/CLI/#example","title":"Example","text":"<pre><code>sloth-runner list -f deploy.sloth\n</code></pre>"},{"location":"pt/CLI/#sloth-runner-version","title":"<code>sloth-runner version</code>","text":"<p>Display version and build information.</p>"},{"location":"pt/CLI/#usage_4","title":"Usage","text":"<pre><code>sloth-runner version\n</code></pre>"},{"location":"pt/CLI/#output_1","title":"Output","text":"<ul> <li>Version number</li> <li>Git commit hash</li> <li>Build date</li> <li>Go version</li> </ul>"},{"location":"pt/CLI/#global-flags","title":"Global Flags","text":"<p>Available for all commands:</p> Flag Description <code>-h, --help</code> Show command help <code>--debug</code> Enable debug output <code>--config string</code> Config file path (default: <code>~/.sloth-runner/config.yaml</code>)"},{"location":"pt/CLI/#configuration-file","title":"Configuration File","text":"<p>Sloth Runner supports configuration via <code>~/.sloth-runner/config.yaml</code>:</p> <pre><code># Master server settings\nmaster:\n  host: localhost\n  port: 50053\n\n# Agent settings\nagent:\n  name: my-agent\n  tags:\n    - linux\n    - docker\n  reconnect: true\n\n# UI settings\nui:\n  port: 8080\n  theme: dark\n\n# Scheduler settings\nscheduler:\n  enabled: true\n  timezone: UTC\n</code></pre>"},{"location":"pt/CLI/#environment-variables","title":"Environment Variables","text":"<p>Override configuration with environment variables:</p> Variable Description <code>SLOTH_MASTER_HOST</code> Master server host <code>SLOTH_MASTER_PORT</code> Master server port <code>SLOTH_AGENT_NAME</code> Agent identifier <code>SLOTH_UI_PORT</code> UI server port <code>SLOTH_DEBUG</code> Enable debug mode"},{"location":"pt/CLI/#exit-codes","title":"Exit Codes","text":"Code Meaning <code>0</code> Success <code>1</code> General error <code>2</code> Task execution failed <code>3</code> Configuration error <code>4</code> Network/connection error <code>5</code> State management error"},{"location":"pt/CLI/#examples_3","title":"Examples","text":""},{"location":"pt/CLI/#complete-cicd-pipeline","title":"Complete CI/CD Pipeline","text":"<pre><code># Initialize project\nsloth-runner workflow init my-app --template cicd\n\n# Run tests\nsloth-runner run -f my-app/.sloth/test.sloth -o rich\n\n# Deploy to staging\nsloth-runner run staging-stack --yes\n\n# Check agent status\nsloth-runner agent list --master ci-master:50053\n\n# Schedule nightly builds\nsloth-runner scheduler add nightly-build \\\n  --cron \"0 0 * * *\" \\\n  --workflow build.sloth\n</code></pre>"},{"location":"pt/CLI/#infrastructure-automation","title":"Infrastructure Automation","text":"<pre><code># Create infrastructure stack\nsloth-runner stack new prod-infra -f infrastructure.sloth\n\n# Apply with modern output\nsloth-runner run prod-infra -o modern\n\n# Show stack state\nsloth-runner stack show prod-infra\n\n# Teardown\nsloth-runner stack delete prod-infra --force\n</code></pre>"},{"location":"pt/CLI/#distributed-task-execution","title":"Distributed Task Execution","text":"<pre><code># Start master server\nsloth-runner master --port 50053 --daemon\n\n# Start agents on different servers\nsloth-runner agent start --master master:50053 --name web-1 --tags web,nginx\nsloth-runner agent start --master master:50053 --name db-1 --tags database,postgres\n\n# Execute on specific agent\nsloth-runner agent run --agent web-1 --command \"systemctl status nginx\"\n\n# Start UI for monitoring\nsloth-runner ui --port 8080\n</code></pre>"},{"location":"pt/CLI/#best-practices","title":"Best Practices","text":""},{"location":"pt/CLI/#1-use-stacks-for-state-management","title":"1. Use Stacks for State Management","text":"<pre><code># Don't: Run without state\nsloth-runner run -f deploy.sloth\n\n# Do: Use stacks for persistence\nsloth-runner stack new prod\nsloth-runner run prod\n</code></pre>"},{"location":"pt/CLI/#2-specify-output-format-for-cicd","title":"2. Specify Output Format for CI/CD","text":"<pre><code># JSON for parsing\nsloth-runner run -f ci.sloth -o json &gt; results.json\n\n# Rich for interactive\nsloth-runner run -f deploy.sloth -o rich\n</code></pre>"},{"location":"pt/CLI/#3-use-values-files-for-environments","title":"3. Use Values Files for Environments","text":"<pre><code># Development\nsloth-runner run -f app.sloth -v dev-values.yaml\n\n# Production\nsloth-runner run -f app.sloth -v prod-values.yaml\n</code></pre>"},{"location":"pt/CLI/#4-tag-agents-appropriately","title":"4. Tag Agents Appropriately","text":"<pre><code># Specific capabilities\nsloth-runner agent start --tags \"linux,docker,aws,x86_64\"\n\n# Environment-based\nsloth-runner agent start --tags \"prod,us-east-1\"\n</code></pre>"},{"location":"pt/CLI/#troubleshooting","title":"Troubleshooting","text":""},{"location":"pt/CLI/#connection-issues","title":"Connection Issues","text":"<pre><code># Test master connectivity\ncurl http://master:50053/health\n\n# Check agent logs\nsloth-runner agent start --debug\n</code></pre>"},{"location":"pt/CLI/#task-execution-failures","title":"Task Execution Failures","text":"<pre><code># Run with debug output\nsloth-runner run -f task.sloth --debug\n\n# Interactive mode for troubleshooting\nsloth-runner run -f task.sloth --interactive\n</code></pre>"},{"location":"pt/CLI/#state-issues","title":"State Issues","text":"<pre><code># View stack state\nsloth-runner stack show my-stack\n\n# Reset stack (careful!)\nsloth-runner stack delete my-stack\nsloth-runner stack new my-stack -f workflow.sloth\n</code></pre>"},{"location":"pt/CLI/#related-documentation","title":"Related Documentation","text":"<ul> <li>Getting Started</li> <li>Core Concepts</li> <li>Agent Architecture</li> <li>Scheduler Guide</li> <li>Web Dashboard</li> <li>Stack Management</li> </ul>"},{"location":"pt/CLI/#see-also","title":"See Also","text":"<ul> <li>REPL Interactive Shell</li> <li>Modern DSL Syntax</li> <li>Module Reference</li> <li>Examples Repository</li> </ul> <p>Need more help? Run <code>sloth-runner [command] --help</code> for detailed information about any command.</p>"},{"location":"pt/CLI/#sloth-runner-version_1","title":"<code>sloth-runner version</code>","text":"<p>Displays the current version of <code>sloth-runner</code>.</p> <pre><code>sloth-runner version\n</code></pre>"},{"location":"pt/CLI/#sloth-runner-scheduler_1","title":"<code>sloth-runner scheduler</code>","text":"<p>Manages the <code>sloth-runner</code> task scheduler, allowing you to enable, disable, list, and delete scheduled tasks.</p> <p>For detailed information on scheduler commands and configuration, refer to the Task Scheduler documentation.</p> <p>Subcommands:</p> <ul> <li><code>sloth-runner scheduler enable</code>: Starts the scheduler as a background process.</li> <li><code>sloth-runner scheduler disable</code>: Stops the running scheduler process.</li> <li><code>sloth-runner scheduler list</code>: Lists all configured scheduled tasks.</li> <li><code>sloth-runner scheduler delete &lt;task_name&gt;</code>: Deletes a specific scheduled task.</li> </ul>"},{"location":"pt/advanced-examples/","title":"Exemplos Avan\u00e7ados","text":"<p>Esta se\u00e7\u00e3o apresenta exemplos mais complexos e cen\u00e1rios de uso que combinam m\u00faltiplos m\u00f3dulos do Sloth-Runner para automa\u00e7\u00e3o de ponta a ponta.</p>"},{"location":"pt/advanced-examples/#exemplo-completo-pipeline-de-cicd-end-to-end","title":"Exemplo Completo: Pipeline de CI/CD End-to-End","text":"<p>Este tutorial demonstra como construir um pipeline de CI/CD completo usando os m\u00f3dulos <code>git</code>, <code>pulumi</code> e <code>salt</code> para versionar c\u00f3digo, provisionar infraestrutura e implantar uma aplica\u00e7\u00e3o.</p>"},{"location":"pt/advanced-examples/#cenario","title":"Cen\u00e1rio","text":"<p>Imagine que voc\u00ea tem um projeto de infraestrutura Pulumi e um projeto de aplica\u00e7\u00e3o. Voc\u00ea quer automatizar o seguinte fluxo:</p> <ol> <li>Clonar o reposit\u00f3rio da infraestrutura.</li> <li>Atualizar um arquivo de vers\u00e3o dentro do reposit\u00f3rio.</li> <li>Committar e empurrar essa altera\u00e7\u00e3o para o Git.</li> <li>Executar <code>pulumi up</code> para provisionar ou atualizar a infraestrutura (por exemplo, um ambiente de staging).</li> <li>Usar o Salt para configurar os servidores provisionados e implantar a aplica\u00e7\u00e3o.</li> </ol>"},{"location":"pt/advanced-examples/#script-lua-examplespulumi_git_combined_examplesloth","title":"Script Lua (<code>examples/pulumi_git_combined_example.sloth</code>)","text":"<pre><code>-- examples/pulumi_git_combined_example.sloth\n\ncommand = function(params)\n    log.info(\"Iniciando exemplo combinado Pulumi e Git...\")\n\n    local pulumi_repo_url = \"https://github.com/my-org/my-pulumi-infra.git\" -- Exemplo de repo Pulumi\n    local pulumi_repo_path = \"./pulumi-infra-checkout\"\n    local new_infra_version = params.infra_version or \"v1.0.0-infra\"\n    local pulumi_project_workdir = pulumi_repo_path .. \"/my-vpc-project\" -- Subdiret\u00f3rio dentro do repo clonado\n    local repo\n\n    -- 1. Clonar ou abrir o reposit\u00f3rio Pulumi\n    log.info(\"Step 1: Cloning or opening Pulumi repository...\")\n    if not fs.exists(pulumi_repo_path) then\n        log.info(\"Cloning Pulumi repository: \" .. pulumi_repo_url)\n        local cloned_repo, clone_err = git.clone(pulumi_repo_url, pulumi_repo_path)\n        if clone_err then\n            log.error(\"Failed to clone Pulumi repository: \" .. clone_err)\n            return false, \"Git clone failed.\"\n        end\n        repo = cloned_repo\n    else\n        log.info(\"Pulumi repository already exists, opening local reference.\")\n        local opened_repo, open_err = git.repo(pulumi_repo_path)\n        if open_err then\n            log.error(\"Failed to open Pulumi repository: \" .. open_err)\n            return false, \"Git repo open failed.\"\n        end\n        repo = opened_repo\n    end\n\n    if not repo then\n        return false, \"Failed to get Pulumi repository reference.\"\n    end\n\n    -- 2. Atualizar o reposit\u00f3rio (pull)\n    log.info(\"Step 2: Pulling latest changes from Pulumi repository...\")\n    repo:checkout(\"main\"):pull(\"origin\", \"main\")\n    local pull_result = repo:result()\n    if not pull_result.success then\n        log.error(\"Failed to pull Pulumi repository: \" .. pull_result.stderr)\n        return false, \"Git pull failed.\"\n    end\n    log.info(\"Pulumi repository updated. Stdout: \" .. pull_result.stdout)\n\n    -- 3. Simular uma altera\u00e7\u00e3o no c\u00f3digo Pulumi (e.g., atualizar um arquivo de vers\u00e3o)\n    log.info(\"Step 3: Simulating a change in Pulumi code (updating version file)...\")\n    local infra_version_file = pulumi_repo_path .. \"/INFRA_VERSION\"\n    fs.write(infra_version_file, new_infra_version)\n    log.info(\"Updated INFRA_VERSION file to: \" .. new_infra_version)\n\n    -- 4. Commitar e empurrar as mudan\u00e7as\n    log.info(\"Step 4: Committing and pushing infrastructure version change...\")\n    local commit_message = \"ci: Bump infrastructure version to \" .. new_infra_version\n    repo:add(infra_version_file)\n        :commit(commit_message)\n        :push(\"origin\", \"main\") -- Sem follow_tags aqui, apenas o commit\n\n    local push_result = repo:result()\n    if not push_result.success then\n        log.error(\"Failed to push infrastructure changes: \" .. push_result.stderr)\n        return false, \"Git push failed for infra changes.\"\n    end\n    log.info(\"Infrastructure version change pushed. Stdout: \" .. push_result.stdout)\n\n    -- 5. Executar 'pulumi up' para o projeto\n    log.info(\"Step 5: Running pulumi up for the infrastructure project...\")\n    local infra_stack = pulumi.stack(\"my-org/my-infra/dev\", {\n        workdir = pulumi_project_workdir -- Usar o subdiret\u00f3rio do projeto Pulumi\n    })\n\n    local pulumi_up_result = infra_stack:up({ non_interactive = true })\n\n    if not pulumi_up_result.success then\n        log.error(\"Pulumi up failed: \" .. pulumi_up_result.stderr)\n        return false, \"Pulumi up failed.\"\n    end\n    log.info(\"Pulumi up completed successfully. Stdout: \" .. pulumi_up_result.stdout)\n\n    -- 6. Configurar e implantar a aplica\u00e7\u00e3o usando Salt (Exemplo)\n    log.info(\"Step 6: Configuring and deploying application using Salt...\")\n    -- Assumindo que o Pulumi up forneceu o IP ou hostname do servidor\n    -- Para este exemplo, vamos usar um IP fict\u00edcio\n    local server_ip = \"192.168.1.100\" -- Substitua pelo output real do Pulumi, se houver\n    local salt_target = salt.target(server_ip)\n\n    log.info(\"Running Salt test.ping on \" .. server_ip .. \"...\")\n    salt_target:ping()\n    local ping_result = salt_target:result()\n    if not ping_result.success then\n        log.error(\"Salt ping failed for \" .. server_ip .. \": \" .. ping_result.stderr)\n        return false, \"Salt ping failed.\"\n    end\n    log.info(\"Salt ping successful. Stdout: \" .. data.to_json(ping_result.stdout)) -- Assumindo que ping retorna JSON\n\n    log.info(\"Applying Salt state 'app.install' on \" .. server_ip .. \"...\")\n    salt_target:cmd('state.apply', 'app.install')\n    local salt_apply_result = salt_target:result()\n    if not salt_apply_result.success then\n        log.error(\"Salt state.apply failed for \" .. server_ip .. \": \" .. salt_apply_result.stderr)\n        return false, \"Salt state.apply failed.\"\n    end\n    log.info(\"Salt state.apply successful. Stdout: \" .. data.to_json(salt_apply_result.stdout))\n\n    log.info(\"Exemplo combinado Pulumi e Git conclu\u00eddo com sucesso.\")\n    return true, \"Combined Pulumi and Git example finished.\"\nend\n\nModern DSLs = {\n    pulumi_git_combined_example = {\n        description = \"Demonstrates combined usage of 'pulumi' and 'git' modules for CI/CD pipeline.\",\n        tasks = {\n            {\n                name = \"run_combined_example\",\n                command = command,\n                params = {\n                    infra_version = \"v1.0.0-test-combined\"\n                }\n            }\n        }\n    }\n}\n</code></pre> <p>English | Portugu\u00eas | \u4e2d\u6587</p>"},{"location":"pt/advanced-features/","title":"Funcionalidades Avan\u00e7adas","text":"<p>Este documento aborda algumas das funcionalidades mais avan\u00e7adas do <code>sloth-runner</code>, projetadas para aprimorar seus fluxos de trabalho de desenvolvimento, depura\u00e7\u00e3o e configura\u00e7\u00e3o.</p>"},{"location":"pt/advanced-features/#executor-de-tarefas-interativo","title":"Executor de Tarefas Interativo","text":"<p>Para fluxos de trabalho complexos, pode ser \u00fatil percorrer as tarefas uma a uma, inspecionar suas sa\u00eddas e decidir se deve prosseguir, pular ou tentar novamente uma tarefa. O executor de tarefas interativo fornece uma maneira poderosa de depurar e desenvolver seus pipelines de tarefas.</p> <p>Para usar o executor interativo, adicione a flag <code>--interactive</code> ao comando <code>sloth-runner run</code>:</p> <pre><code>sloth-runner run -f examples/basic_pipeline.sloth --yes --interactive\n</code></pre> <p>Quando habilitado, o executor pausar\u00e1 antes de executar cada tarefa e solicitar\u00e1 uma a\u00e7\u00e3o:</p> <pre><code>? Tarefa: fetch_data (Simula a busca de dados brutos)\n&gt; executar\n  pular\n  abortar\n  continuar\n</code></pre> <p>A\u00e7\u00f5es:</p> <ul> <li>executar: (Padr\u00e3o) Prossegue com a execu\u00e7\u00e3o da tarefa atual.</li> <li>pular: Pula a tarefa atual e passa para a pr\u00f3xima na ordem de execu\u00e7\u00e3o.</li> <li>abortar: Aborta imediatamente toda a execu\u00e7\u00e3o da tarefa.</li> <li>continuar: Executa a tarefa atual e todas as subsequentes sem mais prompts, desativando efetivamente o modo interativo para o resto da execu\u00e7\u00e3o.</li> </ul>"},{"location":"pt/advanced-features/#modelagem-aprimorada-de-valuesyaml","title":"Modelagem Aprimorada de <code>values.yaml</code>","text":"<p>Voc\u00ea pode tornar seus arquivos <code>values.yaml</code> mais din\u00e2micos usando a sintaxe de modelo Go para injetar vari\u00e1veis de ambiente. Isso \u00e9 particularmente \u00fatil para fornecer informa\u00e7\u00f5es sens\u00edveis (como tokens ou chaves) ou configura\u00e7\u00f5es espec\u00edficas do ambiente sem codific\u00e1-las.</p> <p>O <code>sloth-runner</code> processa o <code>values.yaml</code> como um modelo Go, disponibilizando quaisquer vari\u00e1veis de ambiente no mapa <code>.Env</code>.</p> <p>Exemplo:</p> <ol> <li> <p>Crie um arquivo <code>values.yaml</code> com um placeholder de modelo:</p> <p><pre><code># values.yaml\napi_key: \"{{ .Env.MY_API_KEY }}\"\nregion: \"{{ .Env.AWS_REGION | default \"us-east-1\" }}\"\n</code></pre> Nota: Voc\u00ea pode usar <code>default</code> para fornecer um valor de fallback se a vari\u00e1vel de ambiente n\u00e3o estiver definida.</p> </li> <li> <p>Crie uma tarefa Lua que use esses valores:</p> <pre><code>-- my_task.sloth\nModern DSLs = {\n  my_group = {\n    tasks = {\n      {\n        name = \"deploy\",\n        command = function()\n          log.info(\"Implantando na regi\u00e3o: \" .. values.region)\n          log.info(\"Usando a chave de API (primeiros 5 caracteres): \" .. string.sub(values.api_key, 1, 5) .. \"...\")\n          return true, \"Implanta\u00e7\u00e3o bem-sucedida.\"\n        end\n      }\n    }\n  }\n}\n</code></pre> </li> <li> <p>Execute a tarefa com as vari\u00e1veis de ambiente definidas:</p> <pre><code>export MY_API_KEY=\"supersecretkey12345\"\nexport AWS_REGION=\"us-west-2\"\n\nsloth-runner run -f my_task.sloth -v values.yaml --yes\n</code></pre> </li> </ol> <p>Sa\u00edda:</p> <p>A sa\u00edda mostrar\u00e1 que os valores das vari\u00e1veis de ambiente foram substitu\u00eddos corretamente:</p> <pre><code>INFO Implantando na regi\u00e3o: us-west-2\nINFO Usando a chave de API (primeiros 5 caracteres): super...\n</code></pre>"},{"location":"pt/agent-improvements/","title":"\ud83d\ude80 Melhorias dos Agentes","text":"<p>Para documenta\u00e7\u00e3o completa sobre melhorias dos agentes, consulte:</p>"},{"location":"pt/agent-improvements/#melhorias-implementadas","title":"Melhorias Implementadas","text":""},{"location":"pt/agent-improvements/#saida-aprimorada","title":"\ud83d\udcca Sa\u00edda Aprimorada","text":"<p>Veja: Sa\u00edda Aprimorada dos Agentes</p>"},{"location":"pt/agent-improvements/#arquitetura","title":"\ud83c\udfd7\ufe0f Arquitetura","text":"<p>Veja: Arquitetura Master-Agent</p>"},{"location":"pt/agent-improvements/#sistema-distribuido","title":"\ud83c\udf10 Sistema Distribu\u00eddo","text":"<p>Veja: Sistema Distribu\u00eddo</p>"},{"location":"pt/agent-improvements/#recursos-principais","title":"Recursos Principais","text":"<ul> <li>\u2705 Comunica\u00e7\u00e3o aprimorada entre master e agentes</li> <li>\u2705 Sa\u00edda formatada com cores e emojis</li> <li>\u2705 Monitoramento em tempo real</li> <li>\u2705 Retry autom\u00e1tico</li> <li>\u2705 Health checks</li> <li>\u2705 Logs estruturados</li> </ul>"},{"location":"pt/agent-improvements/#exemplos","title":"Exemplos","text":"<p>Veja Exemplos Avan\u00e7ados para casos pr\u00e1ticos.</p>"},{"location":"pt/contributing/","title":"\ud83e\udd1d Contribuindo para o Sloth Runner","text":"<p>Obrigado pelo seu interesse em contribuir para o Sloth Runner!</p> <p>Acolhemos contribui\u00e7\u00f5es de desenvolvedores de todos os n\u00edveis de habilidade. Seja corrigindo bugs, adicionando recursos, melhorando a documenta\u00e7\u00e3o ou criando plugins, sua ajuda torna o Sloth Runner melhor para todos.</p>"},{"location":"pt/contributing/#inicio-rapido","title":"\ud83d\ude80 In\u00edcio R\u00e1pido","text":""},{"location":"pt/contributing/#pre-requisitos","title":"Pr\u00e9-requisitos","text":"<ul> <li>Go 1.21+ para desenvolvimento principal</li> <li>Node.js 18+ para desenvolvimento de UI  </li> <li>Lua 5.4+ para desenvolvimento DSL</li> <li>Git para controle de vers\u00e3o</li> </ul>"},{"location":"pt/contributing/#configuracao-de-desenvolvimento","title":"Configura\u00e7\u00e3o de Desenvolvimento","text":"<pre><code># Clonar o reposit\u00f3rio\ngit clone https://github.com/chalkan3-sloth/sloth-runner.git\ncd sloth-runner\n\n# Instalar depend\u00eancias\ngo mod download\nnpm install  # para componentes UI\n\n# Executar testes\nmake test\n\n# Construir o projeto\nmake build\n</code></pre>"},{"location":"pt/contributing/#formas-de-contribuir","title":"\ud83d\udccb Formas de Contribuir","text":""},{"location":"pt/contributing/#relatorios-de-bug","title":"\ud83d\udc1b Relat\u00f3rios de Bug","text":"<p>Encontrou um bug? Por favor, nos ajude a corrigi-lo:</p> <ol> <li>Pesquise issues existentes para evitar duplicatas</li> <li>Use nosso template de relat\u00f3rio de bug com:</li> <li>Vers\u00e3o do Sloth Runner</li> <li>Sistema operacional</li> <li>Passos para reproduzir</li> <li>Comportamento esperado vs real</li> <li>Logs de erro (se houver)</li> </ol>"},{"location":"pt/contributing/#solicitacoes-de-recurso","title":"\ud83d\udca1 Solicita\u00e7\u00f5es de Recurso","text":"<p>Tem uma ideia para melhoria?</p> <ol> <li>Verifique o roadmap para recursos planejados</li> <li>Abra uma solicita\u00e7\u00e3o de recurso com:</li> <li>Descri\u00e7\u00e3o clara do recurso</li> <li>Casos de uso e benef\u00edcios</li> <li>Poss\u00edvel abordagem de implementa\u00e7\u00e3o</li> </ol>"},{"location":"pt/contributing/#contribuicoes-de-codigo","title":"\ud83d\udd27 Contribui\u00e7\u00f5es de C\u00f3digo","text":"<p>Pronto para programar? Aqui est\u00e1 como:</p> <ol> <li>Fa\u00e7a fork do reposit\u00f3rio</li> <li>Crie uma branch de recurso (<code>git checkout -b feature/recurso-incrivel</code>)</li> <li>Fa\u00e7a suas altera\u00e7\u00f5es seguindo nossos padr\u00f5es de c\u00f3digo</li> <li>Adicione testes para nova funcionalidade</li> <li>Atualize documenta\u00e7\u00e3o se necess\u00e1rio</li> <li>Commit com mensagens claras</li> <li>Push e crie um Pull Request</li> </ol>"},{"location":"pt/contributing/#documentacao","title":"\ud83d\udcda Documenta\u00e7\u00e3o","text":"<p>Ajude a melhorar nossa documenta\u00e7\u00e3o:</p> <ul> <li>Corrija erros de digita\u00e7\u00e3o e explica\u00e7\u00f5es confusas</li> <li>Adicione exemplos e tutoriais</li> <li>Traduza conte\u00fado para outros idiomas</li> <li>Atualize documenta\u00e7\u00e3o da API</li> </ul>"},{"location":"pt/contributing/#desenvolvimento-de-plugin","title":"\ud83d\udd0c Desenvolvimento de Plugin","text":"<p>Crie plugins para a comunidade:</p> <ul> <li>Siga nosso Guia de Desenvolvimento de Plugin</li> <li>Submeta ao registro de plugins</li> <li>Mantenha compatibilidade com vers\u00f5es principais</li> </ul>"},{"location":"pt/contributing/#diretrizes-de-desenvolvimento","title":"\ud83d\udcd0 Diretrizes de Desenvolvimento","text":""},{"location":"pt/contributing/#estilo-de-codigo","title":"Estilo de C\u00f3digo","text":""},{"location":"pt/contributing/#codigo-go","title":"C\u00f3digo Go","text":"<p>Siga conven\u00e7\u00f5es padr\u00e3o do Go:</p> <pre><code>// Bom: Nomes de fun\u00e7\u00e3o claros e coment\u00e1rios\nfunc ProcessWorkflowTasks(ctx context.Context, workflow *Workflow) error {\n    if workflow == nil {\n        return fmt.Errorf(\"workflow n\u00e3o pode ser nil\")\n    }\n\n    for _, task := range workflow.Tasks {\n        if err := processTask(ctx, task); err != nil {\n            return fmt.Errorf(\"falhou ao processar tarefa %s: %w\", task.ID, err)\n        }\n    }\n\n    return nil\n}\n</code></pre>"},{"location":"pt/contributing/#dsl-lua","title":"DSL Lua","text":"<p>Mantenha c\u00f3digo DSL limpo e leg\u00edvel:</p> <pre><code>-- Bom: Defini\u00e7\u00e3o clara de tarefa com encadeamento adequado\nlocal tarefa_deploy = task(\"deploy_aplicacao\")\n    :description(\"Fazer deploy da aplica\u00e7\u00e3o para produ\u00e7\u00e3o\")\n    :command(function(params, deps)\n        local resultado = exec.run(\"kubectl apply -f deployment.yaml\")\n        if not resultado.success then\n            log.error(\"Deploy falhou: \" .. resultado.stderr)\n            return false\n        end\n        return true\n    end)\n    :timeout(300)\n    :retries(3)\n    :build()\n</code></pre>"},{"location":"pt/contributing/#padroes-de-teste","title":"Padr\u00f5es de Teste","text":""},{"location":"pt/contributing/#testes-unitarios","title":"Testes Unit\u00e1rios","text":"<p>Escreva testes para toda nova funcionalidade:</p> <pre><code>func TestProcessWorkflowTasks(t *testing.T) {\n    tests := []struct {\n        name     string\n        workflow *Workflow\n        wantErr  bool\n    }{\n        {\n            name:     \"workflow nil deve retornar erro\",\n            workflow: nil,\n            wantErr:  true,\n        },\n        {\n            name: \"workflow v\u00e1lido deve processar com sucesso\",\n            workflow: &amp;Workflow{\n                Tasks: []*Task{{ID: \"test-task\"}},\n            },\n            wantErr: false,\n        },\n    }\n\n    for _, tt := range tests {\n        t.Run(tt.name, func(t *testing.T) {\n            err := ProcessWorkflowTasks(context.Background(), tt.workflow)\n            if (err != nil) != tt.wantErr {\n                t.Errorf(\"ProcessWorkflowTasks() error = %v, wantErr %v\", err, tt.wantErr)\n            }\n        })\n    }\n}\n</code></pre>"},{"location":"pt/contributing/#padroes-de-documentacao","title":"Padr\u00f5es de Documenta\u00e7\u00e3o","text":"<ul> <li>Mantenha simples - Use linguagem clara e concisa</li> <li>Inclua exemplos - Mostre, n\u00e3o apenas diga</li> <li>Atualize com mudan\u00e7as - Mantenha docs sincronizados com c\u00f3digo</li> <li>Teste exemplos - Garanta que todos os exemplos de c\u00f3digo funcionem</li> </ul>"},{"location":"pt/contributing/#processo-de-pull-request","title":"\ud83d\udd04 Processo de Pull Request","text":""},{"location":"pt/contributing/#antes-de-submeter","title":"Antes de Submeter","text":"<ul> <li> Execute testes - <code>make test</code></li> <li> Execute linting - <code>make lint</code></li> <li> Atualize docs - Se adicionando/alterando recursos</li> <li> Adicione entrada no changelog - Em <code>CHANGELOG.md</code></li> <li> Verifique compatibilidade - Com recursos existentes</li> </ul>"},{"location":"pt/contributing/#template-de-pr","title":"Template de PR","text":"<p>Use nosso template de pull request:</p> <pre><code>## Descri\u00e7\u00e3o\nBreve descri\u00e7\u00e3o das altera\u00e7\u00f5es\n\n## Tipo de Mudan\u00e7a\n- [ ] Corre\u00e7\u00e3o de bug\n- [ ] Novo recurso\n- [ ] Mudan\u00e7a disruptiva\n- [ ] Atualiza\u00e7\u00e3o de documenta\u00e7\u00e3o\n\n## Testes\n- [ ] Testes unit\u00e1rios adicionados/atualizados\n- [ ] Testes de integra\u00e7\u00e3o passam\n- [ ] Teste manual completado\n\n## Checklist\n- [ ] C\u00f3digo segue diretrizes de estilo\n- [ ] Documenta\u00e7\u00e3o atualizada\n- [ ] Changelog atualizado\n</code></pre>"},{"location":"pt/contributing/#estrutura-do-projeto","title":"\ud83c\udfd7\ufe0f Estrutura do Projeto","text":"<p>Compreendendo a base de c\u00f3digo:</p> <pre><code>sloth-runner/\n\u251c\u2500\u2500 cmd/                    # Comandos CLI\n\u251c\u2500\u2500 internal/              # Pacotes internos\n\u2502   \u251c\u2500\u2500 core/             # L\u00f3gica de neg\u00f3cio principal\n\u2502   \u251c\u2500\u2500 dsl/              # Implementa\u00e7\u00e3o DSL\n\u2502   \u251c\u2500\u2500 execution/        # Motor de execu\u00e7\u00e3o de tarefas\n\u2502   \u2514\u2500\u2500 plugins/          # Sistema de plugins\n\u251c\u2500\u2500 pkg/                   # Pacotes p\u00fablicos\n\u251c\u2500\u2500 plugins/              # Plugins integrados\n\u251c\u2500\u2500 docs/                 # Documenta\u00e7\u00e3o\n\u251c\u2500\u2500 web/                  # Componentes de UI web\n\u2514\u2500\u2500 examples/             # Workflows de exemplo\n</code></pre>"},{"location":"pt/contributing/#areas-de-contribuicao","title":"\ud83c\udfaf \u00c1reas de Contribui\u00e7\u00e3o","text":""},{"location":"pt/contributing/#alta-prioridade","title":"Alta Prioridade","text":"<ul> <li>\ud83d\udc1b Corre\u00e7\u00f5es de bug - Sempre bem-vindas</li> <li>\ud83d\udcc8 Melhorias de performance - Oportunidades de otimiza\u00e7\u00e3o</li> <li>\ud83e\uddea Cobertura de teste - Aumentar cobertura de teste</li> <li>\ud83d\udcda Documenta\u00e7\u00e3o - Manter docs abrangentes</li> </ul>"},{"location":"pt/contributing/#media-prioridade","title":"M\u00e9dia Prioridade","text":"<ul> <li>\u2728 Novos recursos - Seguindo prioridades do roadmap</li> <li>\ud83d\udd0c Ecossistema de plugin - Mais plugins e integra\u00e7\u00f5es</li> <li>\ud83c\udfa8 Melhorias de UI - Melhor experi\u00eancia do usu\u00e1rio</li> </ul>"},{"location":"pt/contributing/#reconhecimento","title":"\ud83c\udfc6 Reconhecimento","text":"<p>Contribuidores s\u00e3o reconhecidos em:</p> <ul> <li>CONTRIBUTORS.md - Todos os contribuidores listados</li> <li>Notas de release - Contribui\u00e7\u00f5es importantes destacadas</li> <li>Showcase da comunidade - Contribui\u00e7\u00f5es em destaque</li> <li>Badges de contribuidor - Reconhecimento no perfil GitHub</li> </ul>"},{"location":"pt/contributing/#obtendo-ajuda","title":"\ud83d\udcde Obtendo Ajuda","text":""},{"location":"pt/contributing/#questoes-de-desenvolvimento","title":"Quest\u00f5es de Desenvolvimento","text":"<ul> <li>\ud83d\udcac Discord - canal <code>#development</code></li> <li>\ud83d\udce7 Lista de Email - dev@sloth-runner.io</li> <li>\ud83d\udcd6 Wiki - Guias de desenvolvimento e FAQs</li> </ul>"},{"location":"pt/contributing/#mentoria","title":"Mentoria","text":"<p>Novo em open source? Oferecemos mentoria:</p> <ul> <li>\ud83d\udc65 Pareamento de mentor - Pareado com contribuidores experientes</li> <li>\ud83d\udcda Recursos de aprendizado - Materiais de aprendizado curados</li> <li>\ud83c\udfaf Contribui\u00e7\u00f5es guiadas - Issues amig\u00e1veis para iniciantes</li> </ul>"},{"location":"pt/contributing/#codigo-de-conduta","title":"\ud83d\udcdc C\u00f3digo de Conduta","text":"<p>Estamos comprometidos em fornecer um ambiente acolhedor e inclusivo. Por favor, leia nosso C\u00f3digo de Conduta.</p>"},{"location":"pt/contributing/#nossos-padroes","title":"Nossos Padr\u00f5es","text":"<ul> <li>\ud83e\udd1d Seja respeitoso - Trate todos com respeito</li> <li>\ud83d\udca1 Seja construtivo - Forne\u00e7a feedback \u00fatil</li> <li>\ud83c\udf0d Seja inclusivo - Acolha perspectivas diversas</li> <li>\ud83d\udcda Seja paciente - Ajude outros a aprender e crescer</li> </ul> <p>Pronto para contribuir?</p> <p>Comece explorando nossas Good First Issues ou junte-se \u00e0 nossa comunidade Discord para se apresentar!</p> <p>Obrigado por ajudar a tornar o Sloth Runner melhor! \ud83e\udda5\u2728</p>"},{"location":"pt/core-concepts/","title":"Conceitos Essenciais - Modern DSL","text":"<p>Este documento explica os conceitos fundamentais do <code>sloth-runner</code> usando a Modern DSL, ajudando voc\u00ea a entender como definir e orquestrar fluxos de trabalho complexos com a nova API fluente.</p>"},{"location":"pt/core-concepts/#visao-geral-da-modern-dsl","title":"Vis\u00e3o Geral da Modern DSL","text":"<p>A Modern DSL substitui a abordagem legada <code>Modern DSLs</code> por uma API mais intuitiva e fluente para definir fluxos de trabalho. Em vez de grandes estruturas de tabela, voc\u00ea agora usa m\u00e9todos encade\u00e1veis para construir tarefas e definir fluxos de trabalho de forma declarativa.</p> <pre><code>-- meu_pipeline.sloth - Modern DSL\nlocal minha_tarefa = task(\"nome_da_tarefa\")\n    :description(\"Descri\u00e7\u00e3o da tarefa\")\n    :command(function() ... end)\n    :build()\n\nworkflow.define(\"nome_do_workflow\", {\n    description = \"Descri\u00e7\u00e3o do workflow - Modern DSL\",\n    tasks = { minha_tarefa }\n})\n</code></pre>"},{"location":"pt/core-concepts/#definicao-de-tarefa-com-modern-dsl","title":"Defini\u00e7\u00e3o de Tarefa com Modern DSL","text":"<p>As tarefas agora s\u00e3o definidas usando a fun\u00e7\u00e3o <code>task()</code> e m\u00e9todos da API fluente:</p>"},{"location":"pt/core-concepts/#estrutura-basica-de-tarefa","title":"Estrutura B\u00e1sica de Tarefa","text":"<pre><code>local minha_tarefa = task(\"nome_da_tarefa\")\n    :description(\"O que esta tarefa faz\")\n    :command(function(params, deps)\n        -- L\u00f3gica da tarefa aqui\n        return true, \"Mensagem de sucesso\", { dados_de_saida = \"valor\" }\n    end)\n    :timeout(\"5m\")\n    :retries(3, \"exponential\")\n    :build()\n</code></pre>"},{"location":"pt/core-concepts/#metodos-do-task-builder","title":"M\u00e9todos do Task Builder","text":"<p>Propriedades Principais: *   <code>:description(string)</code> - Descri\u00e7\u00e3o leg\u00edvel da tarefa *   <code>:command(function|string)</code> - L\u00f3gica de execu\u00e7\u00e3o da tarefa *   <code>:timeout(string)</code> - Tempo m\u00e1ximo de execu\u00e7\u00e3o (ex: \"10s\", \"5m\", \"1h\") *   <code>:retries(number, strategy)</code> - Configura\u00e7\u00e3o de retry com estrat\u00e9gia (\"exponential\", \"linear\", \"fixed\") *   <code>:depends_on(array)</code> - Array de nomes de tarefas das quais esta tarefa depende</p> <p>Recursos Avan\u00e7ados: *   <code>:async(boolean)</code> - Habilitar execu\u00e7\u00e3o ass\u00edncrona *   <code>:artifacts(array)</code> - Arquivos para salvar ap\u00f3s execu\u00e7\u00e3o bem-sucedida *   <code>:consumes(array)</code> - Artefatos de outras tarefas para usar *   <code>:run_if(function|string)</code> - L\u00f3gica de execu\u00e7\u00e3o condicional *   <code>:abort_if(function|string)</code> - Condi\u00e7\u00e3o para abortar todo o workflow</p> <p>Hooks de Ciclo de Vida: *   <code>:on_success(function)</code> - Executar quando a tarefa for bem-sucedida *   <code>:on_failure(function)</code> - Executar quando a tarefa falhar *   <code>:on_timeout(function)</code> - Executar quando a tarefa atingir timeout *   <code>:pre_hook(function)</code> - Executar antes do comando principal *   <code>:post_hook(function)</code> - Executar ap\u00f3s o comando principal</p> <p>Exemplo: <pre><code>Modern DSLs = {\n  meu_grupo = {\n    description = \"Um grupo que gerencia seu pr\u00f3prio diret\u00f3rio tempor\u00e1rio.\",\n    create_workdir_before_run = true,\n    clean_workdir_after_run = function(result)\n      if not result.success then\n        log.warn(\"O grupo falhou. O diret\u00f3rio de trabalho ser\u00e1 mantido para depura\u00e7\u00e3o.\")\n      end\n      return result.success -- Limpa apenas se tudo foi bem-sucedido\n    end,\n    tasks = {\n      -- Tarefas aqui\n    }\n  }\n}\n</code></pre></p>"},{"location":"pt/core-concepts/#tarefas-individuais","title":"Tarefas Individuais","text":"<p>Uma tarefa \u00e9 uma \u00fanica unidade de trabalho. \u00c9 definida como uma tabela com v\u00e1rias propriedades dispon\u00edveis para controlar seu comportamento.</p>"},{"location":"pt/core-concepts/#propriedades-basicas","title":"Propriedades B\u00e1sicas","text":"<ul> <li><code>name</code> (string): O nome \u00fanico da tarefa dentro de seu grupo.</li> <li><code>description</code> (string): Uma breve descri\u00e7\u00e3o do que a tarefa faz.</li> <li><code>command</code> (string ou fun\u00e7\u00e3o): A a\u00e7\u00e3o principal da tarefa.<ul> <li>Como string: \u00c9 executada como um comando de shell.</li> <li>Como fun\u00e7\u00e3o: A fun\u00e7\u00e3o Lua \u00e9 executada. Ela recebe dois argumentos: <code>params</code> (uma tabela com seus par\u00e2metros) e <code>deps</code> (uma tabela contendo os outputs de suas depend\u00eancias). A fun\u00e7\u00e3o deve retornar:<ol> <li><code>booleano</code>: <code>true</code> para sucesso, <code>false</code> para falha.</li> <li><code>string</code>: Uma mensagem descrevendo o resultado.</li> <li><code>tabela</code> (opcional): Uma tabela de outputs da qual outras tarefas podem depender.</li> </ol> </li> </ul> </li> </ul>"},{"location":"pt/core-concepts/#dependencia-e-fluxo-de-execucao","title":"Depend\u00eancia e Fluxo de Execu\u00e7\u00e3o","text":"<ul> <li><code>depends_on</code> (string ou tabela): Uma lista de nomes de tarefas que devem ser conclu\u00eddas com sucesso antes que esta tarefa possa ser executada.</li> <li><code>next_if_fail</code> (string ou tabela): Uma lista de nomes de tarefas a serem executadas apenas se esta tarefa falhar. \u00datil para tarefas de limpeza ou notifica\u00e7\u00e3o.</li> <li><code>async</code> (booleano): Se <code>true</code>, a tarefa \u00e9 executada em segundo plano, e o runner n\u00e3o espera que ela termine para iniciar a pr\u00f3xima tarefa na ordem de execu\u00e7\u00e3o.</li> </ul>"},{"location":"pt/core-concepts/#tratamento-de-erros-e-robustez","title":"Tratamento de Erros e Robustez","text":"<ul> <li><code>retries</code> (n\u00famero): O n\u00famero de vezes que uma tarefa ser\u00e1 tentada novamente se falhar. O padr\u00e3o \u00e9 <code>0</code>.</li> <li><code>timeout</code> (string): Uma dura\u00e7\u00e3o (ex: <code>\"10s\"</code>, <code>\"1m\"</code>) ap\u00f3s a qual a tarefa ser\u00e1 encerrada se ainda estiver em execu\u00e7\u00e3o.</li> </ul>"},{"location":"pt/core-concepts/#execucao-condicional","title":"Execu\u00e7\u00e3o Condicional","text":"<ul> <li><code>run_if</code> (string ou fun\u00e7\u00e3o): A tarefa ser\u00e1 pulada a menos que esta condi\u00e7\u00e3o seja atendida.<ul> <li>Como string: Um comando de shell. Um c\u00f3digo de sa\u00edda <code>0</code> significa que a condi\u00e7\u00e3o foi atendida.</li> <li>Como fun\u00e7\u00e3o: Uma fun\u00e7\u00e3o Lua que retorna <code>true</code> se a tarefa deve ser executada.</li> </ul> </li> <li><code>abort_if</code> (string ou fun\u00e7\u00e3o): Todo o fluxo de trabalho ser\u00e1 abortado se esta condi\u00e7\u00e3o for atendida.<ul> <li>Como string: Um comando de shell. Um c\u00f3digo de sa\u00edda <code>0</code> significa abortar.</li> <li>Como fun\u00e7\u00e3o: Uma fun\u00e7\u00e3o Lua que retorna <code>true</code> para abortar.</li> </ul> </li> </ul>"},{"location":"pt/core-concepts/#hooks-de-ciclo-de-vida","title":"Hooks de Ciclo de Vida","text":"<ul> <li><code>pre_exec</code> (fun\u00e7\u00e3o): Uma fun\u00e7\u00e3o Lua que \u00e9 executada antes do <code>command</code> principal.</li> <li><code>post_exec</code> (fun\u00e7\u00e3o): Uma fun\u00e7\u00e3o Lua que \u00e9 executada ap\u00f3s o <code>command</code> principal ter sido conclu\u00eddo com sucesso.</li> </ul>"},{"location":"pt/core-concepts/#reutilizacao","title":"Reutiliza\u00e7\u00e3o","text":"<ul> <li><code>uses</code> (tabela): Especifica uma tarefa pr\u00e9-definida de outro arquivo (carregado via <code>import</code>) para usar como base. A defini\u00e7\u00e3o da tarefa atual pode ent\u00e3o sobrescrever propriedades como <code>params</code> ou <code>description</code>.</li> <li><code>params</code> (tabela): Um dicion\u00e1rio de pares chave-valor que podem ser passados para a fun\u00e7\u00e3o <code>command</code> da tarefa.</li> <li><code>artifacts</code> (string ou tabela): Um padr\u00e3o de arquivo (glob) ou uma lista de padr\u00f5es que especificam quais arquivos do <code>workdir</code> da tarefa devem ser salvos como artefatos ap\u00f3s uma execu\u00e7\u00e3o bem-sucedida.</li> <li><code>consumes</code> (string ou tabela): O nome de um artefato (ou uma lista de nomes) de uma tarefa anterior que deve ser copiado para o <code>workdir</code> desta tarefa antes que ela seja executada.</li> </ul>"},{"location":"pt/core-concepts/#gerenciamento-de-artefatos","title":"Gerenciamento de Artefatos","text":"<p>O Sloth-Runner permite que as tarefas compartilhem arquivos entre si atrav\u00e9s de um mecanismo de artefatos. Uma tarefa pode \"produzir\" um ou mais arquivos como artefatos, e tarefas subsequentes podem \"consumir\" esses artefatos.</p> <p>Isso \u00e9 \u00fatil para pipelines de CI/CD, onde uma etapa de compila\u00e7\u00e3o pode gerar um bin\u00e1rio (o artefato), que \u00e9 ent\u00e3o usado por uma etapa de teste ou de implanta\u00e7\u00e3o.</p>"},{"location":"pt/core-concepts/#como-funciona","title":"Como Funciona","text":"<ol> <li> <p>Produzindo Artefatos: Adicione a chave <code>artifacts</code> \u00e0 sua defini\u00e7\u00e3o de tarefa. O valor pode ser um \u00fanico padr\u00e3o de arquivo (ex: <code>\"report.txt\"</code>) ou uma lista (ex: <code>{\"*.log\", \"app.bin\"}</code>). Ap\u00f3s a tarefa ser executada com sucesso, o runner procurar\u00e1 por arquivos no <code>workdir</code> da tarefa que correspondam a esses padr\u00f5es e os copiar\u00e1 para um armazenamento de artefatos compartilhado para a pipeline.</p> </li> <li> <p>Consumindo Artefatos: Adicione a chave <code>consumes</code> \u00e0 defini\u00e7\u00e3o de outra tarefa (que normalmente <code>depends_on</code> da tarefa produtora). O valor deve ser o nome do arquivo do artefato que voc\u00ea deseja usar (ex: <code>\"report.txt\"</code>). Antes que esta tarefa seja executada, o runner copiar\u00e1 o artefato nomeado do armazenamento compartilhado para o <code>workdir</code> desta tarefa, tornando-o dispon\u00edvel para o <code>command</code>.</p> </li> </ol>"},{"location":"pt/core-concepts/#exemplo-de-artefatos","title":"Exemplo de Artefatos","text":"<pre><code>Modern DSLs = {\n  [\"ci-pipeline\"] = {\n    description = \"Demonstra o uso de artefatos.\",\n    create_workdir_before_run = true,\n    tasks = {\n      {\n        name = \"build\",\n        description = \"Cria um bin\u00e1rio e o declara como um artefato.\",\n        command = \"echo 'conteudo_binario' &gt; app.bin\",\n        artifacts = {\"app.bin\"}\n      },\n      {\n        name = \"test\",\n        description = \"Consome o bin\u00e1rio para executar testes.\",\n        depends_on = \"build\",\n        consumes = {\"app.bin\"},\n        command = function(params)\n          -- Neste ponto, 'app.bin' existe no workdir desta tarefa\n          local content, err = fs.read(params.workdir .. \"/app.bin\")\n          if content == \"conteudo_binario\" then\n            log.info(\"Artefato consumido com sucesso!\")\n            return true\n          else\n            return false, \"Conte\u00fado do artefato incorreto!\"\n          end\n        end\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"pt/core-concepts/#funcoes-globais","title":"Fun\u00e7\u00f5es Globais","text":"<p>O <code>sloth-runner</code> fornece fun\u00e7\u00f5es globais no ambiente Lua para ajudar a orquestrar os fluxos de trabalho.</p>"},{"location":"pt/core-concepts/#importpath","title":"<code>import(path)</code>","text":"<p>Carrega outro arquivo Lua e retorna o valor que ele retorna. Este \u00e9 o principal mecanismo para criar m\u00f3dulos de tarefas reutiliz\u00e1veis. O caminho \u00e9 relativo ao arquivo que chama <code>import</code>.</p> <p>Exemplo (<code>reusable_tasks.sloth</code>): <pre><code>-- Importa um m\u00f3dulo que retorna uma tabela de defini\u00e7\u00f5es de tarefas\nlocal docker_tasks = import(\"shared/docker.sloth\")\n\nModern DSLs = {\n  main = {\n    tasks = {\n      {\n        -- Usa a tarefa 'build' do m\u00f3dulo importado\n        uses = docker_tasks.build,\n        params = { image_name = \"my-app\" }\n      }\n    }\n  }\n}\n</code></pre></p>"},{"location":"pt/core-concepts/#paralleltasks","title":"<code>parallel(tasks)</code>","text":"<p>Executa uma lista de tarefas concorrentemente e espera que todas terminem.</p> <ul> <li><code>tasks</code> (tabela): Uma lista de tabelas de tarefas para executar em paralelo.</li> </ul> <p>Exemplo: <pre><code>command = function()\n  log.info(\"Iniciando 3 tarefas em paralelo...\")\n  local results, err = parallel({\n    { name = \"short_task\", command = \"sleep 1\" },\n    { name = \"medium_task\", command = \"sleep 2\" },\n    { name = \"long_task\", command = \"sleep 3\" }\n  })\n  if err then\n    return false, \"Execu\u00e7\u00e3o paralela falhou\"\n  end\n  return true, \"Todas as tarefas paralelas terminaram.\"\nend\n</code></pre></p>"},{"location":"pt/core-concepts/#exporttable","title":"<code>export(table)</code>","text":"<p>Exporta dados de qualquer ponto de um script para a CLI. Quando a flag <code>--return</code> \u00e9 usada, todas as tabelas exportadas s\u00e3o mescladas com o output da tarefa final em um \u00fanico objeto JSON.</p> <ul> <li><code>table</code>: Uma tabela Lua a ser exportada.</li> </ul> <p>Exemplo: <pre><code>command = function()\n  export({ valor_importante = \"dado do meio da tarefa\" })\n  return true, \"Tarefa conclu\u00edda\", { output_final = \"algum resultado\" }\nend\n</code></pre> Executar com <code>--return</code> produziria: <pre><code>{\n  \"valor_importante\": \"dado do meio da tarefa\",\n  \"output_final\": \"algum resultado\"\n}\n</code></pre></p>"},{"location":"pt/distributed/","title":"Execu\u00e7\u00e3o de Tarefas Distribu\u00eddas","text":"<p><code>sloth-runner</code> suporta a execu\u00e7\u00e3o de tarefas distribu\u00eddas, permitindo que voc\u00ea execute tarefas em agentes remotos. Isso possibilita fluxos de trabalho escal\u00e1veis e distribu\u00eddos, onde diferentes partes do seu pipeline podem ser executadas em m\u00e1quinas distintas.</p>"},{"location":"pt/distributed/#como-funciona","title":"Como Funciona","text":"<p>O modelo de execu\u00e7\u00e3o distribu\u00edda no <code>sloth-runner</code> segue uma arquitetura mestre-agente:</p> <ol> <li>Mestre: A inst\u00e2ncia principal do <code>sloth-runner</code> atua como o mestre. Ela analisa a defini\u00e7\u00e3o do fluxo de trabalho, identifica as tarefas configuradas para serem executadas em agentes remotos e as despacha.</li> <li>Agente: Uma inst\u00e2ncia do <code>sloth-runner</code> executando no modo <code>agent</code> em uma m\u00e1quina remota. Ela escuta as solicita\u00e7\u00f5es de execu\u00e7\u00e3o de tarefas recebidas do mestre, executa as tarefas e envia os resultados de volta.</li> </ol>"},{"location":"pt/distributed/#configurando-tarefas-remotas","title":"Configurando Tarefas Remotas","text":"<p>Para executar uma tarefa em um agente remoto, voc\u00ea precisa especificar o campo <code>delegate_to</code> no grupo de tarefas ou na defini\u00e7\u00e3o da tarefa individual.</p>"},{"location":"pt/distributed/#1-delegar-a-um-agente-no-nivel-do-grupo-de-tarefas","title":"1. Delegar a um Agente no N\u00edvel do Grupo de Tarefas","text":"<p>Voc\u00ea pode definir o agente diretamente dentro do seu grupo <code>Modern DSLs</code> usando o campo <code>delegate_to</code>. Todas as tarefas dentro deste grupo ser\u00e3o ent\u00e3o delegadas a este agente, a menos que sejam substitu\u00eddas por um <code>delegate_to</code> espec\u00edfico da tarefa.</p> <pre><code>Modern DSLs = {\n  my_distributed_group = {\n    description = \"Um grupo de tarefas com tarefas distribu\u00eddas.\",\n    delegate_to = { address = \"localhost:50051\" }, -- Define o agente para todo o grupo\n    tasks = {\n      {\n        name = \"remote_hello\",\n        description = \"Executa uma tarefa hello world em um agente remoto.\",\n        -- N\u00e3o \u00e9 necess\u00e1rio o campo 'delegate_to' aqui, ele herda do grupo\n        command = function(params)\n          log.info(\"Ol\u00e1 do agente remoto!\")\n          return true, \"Tarefa remota executada.\"\n        end\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"pt/distributed/#2-delegar-a-um-agente-no-nivel-da-tarefa","title":"2. Delegar a um Agente no N\u00edvel da Tarefa","text":"<p>Alternativamente, voc\u00ea pode especificar o campo <code>delegate_to</code> diretamente em uma tarefa individual. Isso substituir\u00e1 qualquer delega\u00e7\u00e3o em n\u00edvel de grupo ou permitir\u00e1 a execu\u00e7\u00e3o remota ad-hoc.</p> <pre><code>Modern DSLs = {\n  my_group = {\n    description = \"Um grupo de tarefas com uma tarefa remota espec\u00edfica.\",\n    tasks = {\n      {\n        name = \"specific_remote_task\",\n        description = \"Executa esta tarefa em um agente remoto espec\u00edfico.\",\n        delegate_to = { address = \"192.168.1.100:50051\" }, -- Define o agente apenas para esta tarefa\n        command = function(params)\n          log.info(\"Ol\u00e1 de um agente remoto espec\u00edfico!\")\n          return true, \"Tarefa remota espec\u00edfica executada.\"\n        end\n      },\n      {\n        name = \"local_task\",\n        description = \"Esta tarefa \u00e9 executada localmente.\",\n        command = \"echo 'Ol\u00e1 da m\u00e1quina local!'\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"pt/distributed/#executando-um-agente","title":"Executando um Agente","text":"<p>Para iniciar uma inst\u00e2ncia do <code>sloth-runner</code> no modo agente, use o comando <code>agent</code>:</p> <pre><code>sloth-runner agent -p 50051\n</code></pre> <ul> <li><code>-p, --port</code>: Especifica a porta em que o agente deve escutar. O padr\u00e3o \u00e9 <code>50051</code>.</li> </ul> <p>Quando um agente \u00e9 iniciado, ele escutar\u00e1 as solicita\u00e7\u00f5es gRPC recebidas da inst\u00e2ncia mestre do <code>sloth-runner</code>. Ao receber uma tarefa, ele a executar\u00e1 em seu ambiente local e retornar\u00e1 o resultado, juntamente com quaisquer arquivos de espa\u00e7o de trabalho atualizados, de volta ao mestre.</p>"},{"location":"pt/distributed/#sincronizacao-do-espaco-de-trabalho","title":"Sincroniza\u00e7\u00e3o do Espa\u00e7o de Trabalho","text":"<p>Quando uma tarefa \u00e9 despachada para um agente remoto, o <code>sloth-runner</code> lida automaticamente com a sincroniza\u00e7\u00e3o do espa\u00e7o de trabalho da tarefa:</p> <ol> <li>Mestre para Agente: O mestre cria um tarball do diret\u00f3rio de trabalho atual da tarefa e o envia para o agente.</li> <li>Execu\u00e7\u00e3o do Agente: O agente extrai o tarball para um diret\u00f3rio tempor\u00e1rio, executa a tarefa dentro desse diret\u00f3rio e quaisquer altera\u00e7\u00f5es feitas nos arquivos no diret\u00f3rio tempor\u00e1rio s\u00e3o capturadas.</li> <li>Agente para Mestre: Ap\u00f3s a conclus\u00e3o da tarefa, o agente cria um tarball do diret\u00f3rio tempor\u00e1rio modificado e o envia de volta ao mestre. O mestre ent\u00e3o extrai esse tarball, atualizando seu espa\u00e7o de trabalho local com quaisquer altera\u00e7\u00f5es feitas pela tarefa remota.</li> </ol>"},{"location":"pt/getting-started/","title":"In\u00edcio R\u00e1pido","text":"<p>Bem-vindo ao Sloth-Runner! Este guia o ajudar\u00e1 a come\u00e7ar a usar a ferramenta rapidamente.</p> <p>\ud83d\udcdd Nota Importante: A partir da vers\u00e3o atual, os arquivos de workflow do Sloth Runner usam a extens\u00e3o <code>.sloth</code> em vez de <code>.sloth</code>. A sintaxe Lua permanece a mesma - apenas a extens\u00e3o do arquivo mudou para melhor identifica\u00e7\u00e3o dos arquivos DSL do Sloth Runner.</p>"},{"location":"pt/getting-started/#instalacao","title":"Instala\u00e7\u00e3o","text":"<p>Para instalar o <code>sloth-runner</code> em seu sistema, voc\u00ea pode usar o script <code>install.sh</code> fornecido. Este script detecta automaticamente seu sistema operacional e arquitetura, baixa a vers\u00e3o mais recente do GitHub e coloca o execut\u00e1vel <code>sloth-runner</code> em <code>/usr/local/bin</code>.</p> <pre><code>bash &lt;(curl -sL https://raw.githubusercontent.com/chalkan3-sloth/sloth-runner/master/install.sh)\n</code></pre> <p>Nota: O script <code>install.sh</code> requer privil\u00e9gios de <code>sudo</code> para mover o execut\u00e1vel para <code>/usr/local/bin</code>.</p>"},{"location":"pt/getting-started/#uso-basico","title":"Uso B\u00e1sico","text":""},{"location":"pt/getting-started/#gerenciamento-de-stacks","title":"Gerenciamento de Stacks","text":"<pre><code># Criar um novo stack\nsloth-runner stack new my-app --description \"Stack de deployment da aplica\u00e7\u00e3o\"\n\n# Executar workflows em stacks\nsloth-runner run my-app -f examples/basic_pipeline.sloth\n\n# Listar todos os stacks\nsloth-runner stack list\n\n# Ver detalhes do stack\nsloth-runner stack show my-app\n</code></pre>"},{"location":"pt/getting-started/#execucao-direta-de-workflow","title":"Execu\u00e7\u00e3o Direta de Workflow","text":"<p>Para executar um arquivo de workflow diretamente:</p> <pre><code>sloth-runner run -f examples/basic_pipeline.sloth\n</code></pre> <p>Para listar as tarefas em um arquivo:</p> <pre><code>sloth-runner list -f examples/basic_pipeline.sloth\n</code></pre>"},{"location":"pt/getting-started/#agendador-de-tarefas-novo","title":"Agendador de Tarefas (Novo!)","text":"<p>O Sloth-Runner agora inclui um poderoso agendador de tarefas que permite automatizar a execu\u00e7\u00e3o de seus fluxos de trabalho em segundo plano usando sintaxe cron. Para mais detalhes sobre como configurar e usar o agendador, consulte a documenta\u00e7\u00e3o completa em Agendador de Tarefas.</p>"},{"location":"pt/getting-started/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<p>Agora que voc\u00ea tem o Sloth-Runner instalado e funcionando, explore os Conceitos Essenciais para entender como definir suas tarefas, ou mergulhe diretamente nos novos M\u00f3dulos Built-in para automa\u00e7\u00e3o avan\u00e7ada com Git, Pulumi e Salt.</p> <p>English | Portugu\u00eas | \u4e2d\u6587</p>"},{"location":"pt/nvim-plugin/","title":"\ud83e\udda5 Plugin Neovim","text":"<p>Suporte completo para Sloth Runner DSL no Neovim/LunarVim</p> <p>O plugin Neovim do Sloth Runner oferece recursos completos de IDE para trabalhar com arquivos de workflow <code>.sloth</code>, incluindo syntax highlighting, autocompletar e execu\u00e7\u00e3o integrada de tarefas.</p>"},{"location":"pt/nvim-plugin/#recursos","title":"\u2728 Recursos","text":""},{"location":"pt/nvim-plugin/#syntax-highlighting-avancado","title":"\ud83c\udfa8 Syntax Highlighting Avan\u00e7ado","text":"<ul> <li>Cores customizadas para palavras-chave DSL, m\u00e9todos e m\u00f3dulos</li> <li>Interpola\u00e7\u00e3o de strings destacada com sintaxe <code>${variavel}</code></li> <li>Detec\u00e7\u00e3o de caminhos para arquivos de script e configura\u00e7\u00e3o</li> <li>Vari\u00e1veis de ambiente em destaque</li> <li>Suporte a coment\u00e1rios com verifica\u00e7\u00e3o ortogr\u00e1fica</li> </ul>"},{"location":"pt/nvim-plugin/#deteccao-inteligente-de-arquivos","title":"\ud83d\udcc1 Detec\u00e7\u00e3o Inteligente de Arquivos","text":"<ul> <li>Auto-detecta arquivos <code>.sloth</code> e aplica highlighting adequado</li> <li>Compatibilidade com extens\u00e3o <code>.lua</code> para retrocompatibilidade</li> <li>\u00cdcones personalizados (\ud83e\udda5) em exploradores de arquivo</li> </ul>"},{"location":"pt/nvim-plugin/#autocompletar-de-codigo","title":"\u26a1 Autocompletar de C\u00f3digo","text":"<ul> <li>Completion inteligente para m\u00e9todos DSL: <code>command</code>, <code>description</code>, <code>timeout</code>, etc.</li> <li>Completion de m\u00f3dulos para m\u00f3dulos internos: <code>exec</code>, <code>fs</code>, <code>net</code>, <code>aws</code>, etc.</li> <li>Completion de fun\u00e7\u00f5es para padr\u00f5es comuns: <code>task()</code>, <code>workflow.define()</code></li> </ul>"},{"location":"pt/nvim-plugin/#executor-integrado","title":"\ud83d\udd27 Executor Integrado","text":"<ul> <li>Executar workflows diretamente do Neovim com <code>&lt;leader&gt;sr</code></li> <li>Listar tarefas no arquivo atual com <code>&lt;leader&gt;sl</code></li> <li>Suporte a dry-run para testar workflows</li> </ul>"},{"location":"pt/nvim-plugin/#snippets-templates-de-codigo","title":"\ud83d\udccb Snippets &amp; Templates de C\u00f3digo","text":"<ul> <li>Cria\u00e7\u00e3o r\u00e1pida de tarefas com abrevia\u00e7\u00e3o <code>_task</code></li> <li>Templates de workflow com abrevia\u00e7\u00e3o <code>_workflow</code></li> <li>Templates de fun\u00e7\u00e3o com abrevia\u00e7\u00e3o <code>_cmd</code></li> <li>Templates auto-gerados para novos arquivos <code>.sloth</code></li> </ul>"},{"location":"pt/nvim-plugin/#text-objects-navegacao","title":"\ud83c\udfaf Text Objects &amp; Navega\u00e7\u00e3o","text":"<ul> <li>Selecionar blocos de tarefa com <code>vit</code> (visual in task)</li> <li>Selecionar blocos de workflow com <code>viw</code> (visual in workflow)</li> <li>Dobramento inteligente para se\u00e7\u00f5es de c\u00f3digo recolh\u00edveis</li> <li>Indenta\u00e7\u00e3o inteligente para encadeamento DSL</li> </ul>"},{"location":"pt/nvim-plugin/#configuracao-rapida","title":"\ud83d\ude80 Configura\u00e7\u00e3o R\u00e1pida","text":""},{"location":"pt/nvim-plugin/#para-usuarios-do-lunarvim","title":"Para Usu\u00e1rios do LunarVim","text":"<p>Adicione ao seu <code>~/.config/lvim/config.lua</code>:</p> <pre><code>-- Desabilitar formata\u00e7\u00e3o autom\u00e1tica (recomendado)\nlvim.format_on_save.enabled = false\n\n-- Configurar \u00edcones de arquivos sloth\nrequire('nvim-web-devicons').setup {\n  override_by_extension = {\n    [\"sloth\"] = {\n      icon = \"\ud83e\udda5\",\n      color = \"#8B4513\",\n      name = \"SlothDSL\"\n    }\n  }\n}\n\n-- Mapeamentos de teclas para sloth runner\nlvim.keys.normal_mode[\"&lt;leader&gt;sr\"] = function()\n  local file = vim.api.nvim_buf_get_name(0)\n  if file:match(\"%.sloth$\") then\n    vim.cmd(\"split | terminal sloth-runner run -f \" .. vim.fn.shellescape(file))\n  end\nend\n\nlvim.keys.normal_mode[\"&lt;leader&gt;sl\"] = function()\n  local file = vim.api.nvim_buf_get_name(0)\n  if file:match(\"%.sloth$\") then\n    vim.cmd(\"split | terminal sloth-runner list -f \" .. vim.fn.shellescape(file))\n  end\nend\n\n-- Comando de formata\u00e7\u00e3o manual\nlvim.keys.normal_mode[\"&lt;leader&gt;sf\"] = \":SlothFormat&lt;CR&gt;\"\n</code></pre>"},{"location":"pt/nvim-plugin/#para-neovim-padrao","title":"Para Neovim Padr\u00e3o","text":"<p>Usando lazy.nvim:</p> <pre><code>{\n  dir = \"/caminho/para/sloth-runner/nvim-plugin\",\n  name = \"sloth-runner\",\n  ft = { \"sloth\" },\n  config = function()\n    require(\"sloth-runner\").setup({\n      runner = {\n        command = \"sloth-runner\",\n        keymaps = {\n          run_file = \"&lt;leader&gt;sr\",\n          list_tasks = \"&lt;leader&gt;sl\",\n          dry_run = \"&lt;leader&gt;st\",\n          debug = \"&lt;leader&gt;sd\",\n        }\n      },\n      completion = {\n        enable = true,\n        snippets = true,\n      },\n      folding = {\n        enable = true,\n        auto_close = false,\n      }\n    })\n  end,\n}\n</code></pre>"},{"location":"pt/nvim-plugin/#mapeamentos-de-teclas","title":"\ud83d\udcdd Mapeamentos de Teclas","text":"Tecla A\u00e7\u00e3o Descri\u00e7\u00e3o <code>&lt;leader&gt;sr</code> Executar Arquivo Executa o workflow <code>.sloth</code> atual <code>&lt;leader&gt;sl</code> Listar Tarefas Mostra todas as tarefas no arquivo atual <code>&lt;leader&gt;st</code> Dry Run Testa workflow sem execu\u00e7\u00e3o <code>&lt;leader&gt;sd</code> Debug Executa com sa\u00edda de debug <code>&lt;leader&gt;sf</code> Formatar Formata arquivo atual (manual)"},{"location":"pt/nvim-plugin/#snippets-de-codigo","title":"\ud83c\udfa8 Snippets de C\u00f3digo","text":""},{"location":"pt/nvim-plugin/#criacao-rapida-de-tarefa","title":"Cria\u00e7\u00e3o R\u00e1pida de Tarefa","text":"<p>Digite <code>_task</code> e pressione Tab:</p> <pre><code>local nome_tarefa = task(\"\")\n    :description(\"\")\n    :command(function(params, deps)\n        -- TODO: implementar\n        return true\n    end)\n    :build()\n</code></pre>"},{"location":"pt/nvim-plugin/#criacao-rapida-de-workflow","title":"Cria\u00e7\u00e3o R\u00e1pida de Workflow","text":"<p>Digite <code>_workflow</code> e pressione Tab:</p> <pre><code>workflow.define(\"\", {\n    description = \"\",\n    version = \"1.0.0\",\n    tasks = {\n        -- tarefas aqui\n    }\n})\n</code></pre>"},{"location":"pt/nvim-plugin/#funcao-de-comando-rapida","title":"Fun\u00e7\u00e3o de Comando R\u00e1pida","text":"<p>Digite <code>_cmd</code> e pressione Tab:</p> <pre><code>:command(function(params, deps)\n    -- TODO: implementar\n    return true\nend)\n</code></pre>"},{"location":"pt/nvim-plugin/#configuracao-avancada","title":"\ud83d\udd27 Configura\u00e7\u00e3o Avan\u00e7ada","text":""},{"location":"pt/nvim-plugin/#syntax-highlighting-personalizado","title":"Syntax Highlighting Personalizado","text":"<p>O plugin fornece grupos de highlight personalizados:</p> <pre><code>-- Personalizar cores (adicione \u00e0 sua config)\nvim.api.nvim_create_autocmd(\"ColorScheme\", {\n  pattern = \"*\",\n  callback = function()\n    vim.api.nvim_set_hl(0, \"slothDSLKeyword\", { fg = '#8B4513', bold = true })\n    vim.api.nvim_set_hl(0, \"slothModule\", { fg = '#228B22', bold = true })\n    vim.api.nvim_set_hl(0, \"slothMethod\", { fg = '#4682B4' })\n    vim.api.nvim_set_hl(0, \"slothFunction\", { fg = '#DAA520' })\n    vim.api.nvim_set_hl(0, \"slothEnvVar\", { fg = '#DC143C', bold = true })\n    vim.api.nvim_set_hl(0, \"slothPath\", { fg = '#20B2AA' })\n  end\n})\n</code></pre>"},{"location":"pt/nvim-plugin/#integracao-com-arvore-de-arquivos","title":"Integra\u00e7\u00e3o com \u00c1rvore de Arquivos","text":"<p>Para usu\u00e1rios do nvim-tree:</p> <pre><code>require(\"nvim-tree\").setup({\n  renderer = {\n    icons = {\n      glyphs = {\n        extension = {\n          sloth = \"\ud83e\udda5\"\n        }\n      }\n    }\n  }\n})\n</code></pre>"},{"location":"pt/nvim-plugin/#instalacao-manual","title":"\ud83d\udee0\ufe0f Instala\u00e7\u00e3o Manual","text":"<ol> <li> <p>Clone ou copie os arquivos do plugin: <pre><code>cp -r /caminho/para/sloth-runner/nvim-plugin ~/.config/nvim/\n</code></pre></p> </li> <li> <p>Adicione \u00e0 sua configura\u00e7\u00e3o do Neovim: <pre><code>-- Adicione ao init.lua ou init.vim\nvim.opt.runtimepath:append(\"~/.config/nvim/nvim-plugin\")\n</code></pre></p> </li> <li> <p>Reinicie o Neovim e abra um arquivo <code>.sloth</code></p> </li> </ol>"},{"location":"pt/nvim-plugin/#solucao-de-problemas","title":"\ud83d\udc1b Solu\u00e7\u00e3o de Problemas","text":""},{"location":"pt/nvim-plugin/#syntax-highlighting-nao-funciona","title":"Syntax Highlighting N\u00e3o Funciona","text":"<ul> <li>Certifique-se de que o arquivo tem extens\u00e3o <code>.sloth</code></li> <li>Execute <code>:set filetype=sloth</code> manualmente se necess\u00e1rio</li> <li>Verifique se os arquivos do plugin est\u00e3o no local correto</li> </ul>"},{"location":"pt/nvim-plugin/#mapeamentos-de-teclas-nao-funcionam","title":"Mapeamentos de Teclas N\u00e3o Funcionam","text":"<ul> <li>Verifique se <code>sloth-runner</code> est\u00e1 no seu PATH</li> <li>Verifique se as teclas est\u00e3o conflitando com outros plugins</li> <li>Use <code>:map &lt;leader&gt;sr</code> para verificar se o mapeamento existe</li> </ul>"},{"location":"pt/nvim-plugin/#autocompletar-nao-aparece","title":"Autocompletar N\u00e3o Aparece","text":"<ul> <li>Certifique-se de que completion est\u00e1 habilitado: <code>:set completeopt=menu,menuone,noselect</code></li> <li>Tente disparar manualmente com <code>&lt;C-x&gt;&lt;C-o&gt;</code></li> <li>Verifique se omnifunc est\u00e1 definido: <code>:set omnifunc?</code></li> </ul>"},{"location":"pt/nvim-plugin/#problemas-de-formatacao","title":"Problemas de Formata\u00e7\u00e3o","text":"<ul> <li>Formata\u00e7\u00e3o autom\u00e1tica est\u00e1 desabilitada por padr\u00e3o para evitar conflitos</li> <li>Use formata\u00e7\u00e3o manual: <code>&lt;leader&gt;sf</code> ou <code>:SlothFormat</code></li> <li>Para formata\u00e7\u00e3o com stylua, certifique-se de que est\u00e1 instalado e configurado</li> </ul>"},{"location":"pt/nvim-plugin/#exemplos","title":"\ud83d\udcd6 Exemplos","text":""},{"location":"pt/nvim-plugin/#arquivo-de-workflow-basico","title":"Arquivo de Workflow B\u00e1sico","text":"<pre><code>-- deployment.sloth\nlocal tarefa_deploy = task(\"deploy_app\")\n    :description(\"Deploy da aplica\u00e7\u00e3o para produ\u00e7\u00e3o\")\n    :command(function(params, deps)\n        local resultado = exec.run(\"kubectl apply -f deployment.yaml\")\n        if not resultado.success then\n            log.error(\"Deploy falhou: \" .. resultado.stderr)\n            return false\n        end\n\n        log.info(\"\ud83d\ude80 Deploy realizado com sucesso!\")\n        return true\n    end)\n    :timeout(300)\n    :retries(3)\n    :build()\n\nworkflow.define(\"deployment_producao\", {\n    description = \"Workflow de deploy para produ\u00e7\u00e3o\",\n    version = \"1.0.0\",\n    tasks = { tarefa_deploy }\n})\n</code></pre> <p>Com o plugin instalado, este arquivo ter\u00e1: - Syntax highlighting para palavras-chave, fun\u00e7\u00f5es e strings - Autocompletar ao digitar nomes de m\u00e9todos - Execu\u00e7\u00e3o r\u00e1pida com <code>&lt;leader&gt;sr</code> - Listagem de tarefas com <code>&lt;leader&gt;sl</code></p>"},{"location":"pt/nvim-plugin/#proximos-passos","title":"\ud83d\ude80 Pr\u00f3ximos Passos","text":"<ul> <li>Aprenda a DSL: Veja Conceitos Fundamentais</li> <li>Teste Exemplos: Consulte Guia de Exemplos</li> <li>Recursos Avan\u00e7ados: Explore Recursos Avan\u00e7ados</li> <li>Refer\u00eancia da API: Leia Documenta\u00e7\u00e3o da API Lua</li> </ul> <p>O plugin Neovim torna a cria\u00e7\u00e3o de workflows Sloth muito mais f\u00e1cil com suporte completo de IDE. Comece a criar automa\u00e7\u00f5es poderosas com confian\u00e7a! \ud83e\udda5\u2728</p>"},{"location":"pt/plugin-development/","title":"\ud83d\udd0c Desenvolvimento de Plugins","text":"<p>Construindo Extens\u00f5es para a Plataforma Sloth Runner</p> <p>O Sloth Runner fornece um sistema de plugins poderoso que permite aos desenvolvedores estender a plataforma com funcionalidades personalizadas. Este guia cobre tudo que voc\u00ea precisa saber para desenvolver seus pr\u00f3prios plugins.</p>"},{"location":"pt/plugin-development/#arquitetura-de-plugins","title":"\ud83c\udfd7\ufe0f Arquitetura de Plugins","text":""},{"location":"pt/plugin-development/#tipos-de-plugins","title":"Tipos de Plugins","text":"<p>O Sloth Runner suporta v\u00e1rios tipos de plugins:</p> <ol> <li>\ud83c\udf19 M\u00f3dulos Lua - Estendem a DSL com novas fun\u00e7\u00f5es e capacidades</li> <li>\u26a1 Processadores de Comando - Adicionam novos comandos CLI e opera\u00e7\u00f5es</li> <li>\ud83c\udfa8 Extens\u00f5es de UI - Melhoram o dashboard web e interface</li> <li>\ud83d\udd17 Integra\u00e7\u00f5es - Conectam com ferramentas e servi\u00e7os externos</li> <li>\ud83e\udda5 Plugins de Editor - Extens\u00f5es para IDE/Editor (como nosso plugin Neovim)</li> </ol>"},{"location":"pt/plugin-development/#componentes-principais","title":"Componentes Principais","text":"<pre><code>sloth-runner/\n\u251c\u2500\u2500 plugins/\n\u2502   \u251c\u2500\u2500 lua-modules/       # Extens\u00f5es DSL Lua\n\u2502   \u251c\u2500\u2500 commands/          # Plugins de comando CLI\n\u2502   \u251c\u2500\u2500 ui/               # Extens\u00f5es de UI web\n\u2502   \u251c\u2500\u2500 integrations/     # Integra\u00e7\u00f5es de terceiros\n\u2502   \u2514\u2500\u2500 editors/          # Plugins de editor/IDE\n\u2514\u2500\u2500 internal/\n    \u2514\u2500\u2500 plugin/           # Core do sistema de plugins\n</code></pre>"},{"location":"pt/plugin-development/#desenvolvendo-plugins-de-modulo-lua","title":"\ud83c\udf19 Desenvolvendo Plugins de M\u00f3dulo Lua","text":""},{"location":"pt/plugin-development/#estrutura-basica","title":"Estrutura B\u00e1sica","text":"<p>Crie um novo m\u00f3dulo Lua que estende a DSL:</p> <pre><code>-- plugins/lua-modules/meu-modulo/init.lua\nlocal M = {}\n\n-- Metadados do m\u00f3dulo\nM._NAME = \"meu-modulo\"\nM._VERSION = \"1.0.0\"\nM._DESCRIPTION = \"Funcionalidade customizada para Sloth Runner\"\n\n-- API P\u00fablica\nfunction M.ola(nome)\n    return string.format(\"Ol\u00e1, %s do meu m\u00f3dulo customizado!\", nome or \"Mundo\")\nend\n\nfunction M.tarefa_customizada(config)\n    return {\n        execute = function(params)\n            log.info(\"\ud83d\udd0c Executando tarefa customizada: \" .. config.name)\n            -- L\u00f3gica da tarefa customizada aqui\n            return true\n        end,\n        validate = function()\n            return config.name ~= nil\n        end\n    }\nend\n\n-- Registrar fun\u00e7\u00f5es do m\u00f3dulo\nfunction M.register()\n    -- Tornar fun\u00e7\u00f5es dispon\u00edveis na DSL\n    _G.meu_modulo = M\n\n    -- Registrar tipo de tarefa customizada\n    task.register_type(\"customizada\", M.tarefa_customizada)\nend\n\nreturn M\n</code></pre>"},{"location":"pt/plugin-development/#usando-modulos-customizados-em-workflows","title":"Usando M\u00f3dulos Customizados em Workflows","text":"<pre><code>-- workflow.sloth\nlocal minha_tarefa = task(\"teste_customizado\")\n    :type(\"customizada\", { name = \"teste\" })\n    :description(\"Testando plugin customizado\")\n    :build()\n\n-- Uso direto do m\u00f3dulo\nlocal saudacao = meu_modulo.ola(\"Desenvolvedor\")\nlog.info(saudacao)\n\nworkflow.define(\"teste_plugin\", {\n    description = \"Testando plugin customizado\",\n    tasks = { minha_tarefa }\n})\n</code></pre>"},{"location":"pt/plugin-development/#registro-de-plugin","title":"Registro de Plugin","text":"<p>Crie um manifesto de plugin:</p> <pre><code># plugins/lua-modules/meu-modulo/plugin.yaml\nname: meu-modulo\nversion: 1.0.0\ndescription: Funcionalidade customizada para Sloth Runner\ntype: lua-module\nauthor: Seu Nome\nlicense: MIT\n\nentry_point: init.lua\ndependencies:\n  - sloth-runner: \"&gt;=1.0.0\"\n\npermissions:\n  - filesystem.read\n  - network.http\n  - system.exec\n\nconfiguration:\n  settings:\n    api_key:\n      type: string\n      required: false\n      description: \"Chave da API para servi\u00e7o externo\"\n</code></pre>"},{"location":"pt/plugin-development/#desenvolvimento-de-plugin-de-comando","title":"\u26a1 Desenvolvimento de Plugin de Comando","text":""},{"location":"pt/plugin-development/#estrutura-de-comando-cli","title":"Estrutura de Comando CLI","text":"<pre><code>// plugins/commands/meu-comando/main.go\npackage main\n\nimport (\n    \"github.com/spf13/cobra\"\n    \"github.com/chalkan3-sloth/sloth-runner/pkg/plugin\"\n)\n\ntype MeuComandoPlugin struct {\n    config *MinhaConfig\n}\n\ntype MinhaConfig struct {\n    Configuracao1 string `json:\"configuracao1\"`\n    Configuracao2 int    `json:\"configuracao2\"`\n}\n\nfunc (p *MeuComandoPlugin) Name() string {\n    return \"meu-comando\"\n}\n\nfunc (p *MeuComandoPlugin) Command() *cobra.Command {\n    cmd := &amp;cobra.Command{\n        Use:   \"meu-comando\",\n        Short: \"Funcionalidade de comando customizado\",\n        Long:  \"Descri\u00e7\u00e3o estendida do comando customizado\",\n        RunE:  p.execute,\n    }\n\n    cmd.Flags().StringVar(&amp;p.config.Configuracao1, \"config1\", \"\", \"Configura\u00e7\u00e3o customizada\")\n    cmd.Flags().IntVar(&amp;p.config.Configuracao2, \"config2\", 0, \"Outra configura\u00e7\u00e3o\")\n\n    return cmd\n}\n\nfunc (p *MeuComandoPlugin) execute(cmd *cobra.Command, args []string) error {\n    log.Info(\"\ud83d\udd0c Executando comando customizado com configura\u00e7\u00f5es:\", \n        \"config1\", p.config.Configuracao1,\n        \"config2\", p.config.Configuracao2)\n\n    // L\u00f3gica do comando customizado aqui\n    return nil\n}\n\nfunc main() {\n    plugin := &amp;MeuComandoPlugin{\n        config: &amp;MinhaConfig{},\n    }\n\n    plugin.Register()\n}\n</code></pre>"},{"location":"pt/plugin-development/#ferramentas-de-desenvolvimento-de-plugin","title":"\ud83d\udee0\ufe0f Ferramentas de Desenvolvimento de Plugin","text":""},{"location":"pt/plugin-development/#gerador-de-plugin","title":"Gerador de Plugin","text":"<p>Crie novos plugins rapidamente com o gerador:</p> <pre><code># Gerar um novo plugin de m\u00f3dulo Lua\nsloth-runner plugin generate --type=lua-module --name=meu-modulo\n\n# Gerar um plugin de comando CLI\nsloth-runner plugin generate --type=command --name=meu-comando\n\n# Gerar uma extens\u00e3o de UI\nsloth-runner plugin generate --type=ui --name=meu-dashboard\n</code></pre>"},{"location":"pt/plugin-development/#ambiente-de-desenvolvimento","title":"Ambiente de Desenvolvimento","text":"<pre><code># Iniciar servidor de desenvolvimento com hot-reload de plugin\nsloth-runner dev --plugins-dir=./plugins\n\n# Testar plugin localmente\nsloth-runner plugin test ./plugins/meu-plugin\n\n# Construir plugin para distribui\u00e7\u00e3o\nsloth-runner plugin build ./plugins/meu-plugin --output=dist/\n</code></pre>"},{"location":"pt/plugin-development/#teste-de-plugin","title":"Teste de Plugin","text":"<pre><code>// plugins/meu-plugin/plugin_test.go\npackage main\n\nimport (\n    \"testing\"\n    \"github.com/chalkan3-sloth/sloth-runner/pkg/plugin/testing\"\n)\n\nfunc TestMeuPlugin(t *testing.T) {\n    // Criar ambiente de teste\n    env := plugintest.NewEnvironment(t)\n\n    // Carregar plugin\n    plugin, err := env.LoadPlugin(\"./\")\n    if err != nil {\n        t.Fatal(err)\n    }\n\n    // Testar funcionalidade do plugin\n    result, err := plugin.Execute(map[string]interface{}{\n        \"parametro_teste\": \"valor\",\n    })\n\n    if err != nil {\n        t.Fatal(err)\n    }\n\n    // Verificar resultados\n    if result.Status != \"success\" {\n        t.Errorf(\"Esperado sucesso, obtido %s\", result.Status)\n    }\n}\n</code></pre>"},{"location":"pt/plugin-development/#distribuicao-de-plugin","title":"\ud83d\udce6 Distribui\u00e7\u00e3o de Plugin","text":""},{"location":"pt/plugin-development/#registro-de-plugin_1","title":"Registro de Plugin","text":"<p>Publique seu plugin no registro de plugins do Sloth Runner:</p> <pre><code># Login no registro\nsloth-runner registry login\n\n# Publicar plugin\nsloth-runner plugin publish ./meu-plugin\n\n# Instalar plugin publicado\nsloth-runner plugin install meu-usuario/meu-plugin\n</code></pre>"},{"location":"pt/plugin-development/#marketplace-de-plugin","title":"Marketplace de Plugin","text":"<p>Navegue e descubra plugins:</p> <pre><code># Buscar plugins\nsloth-runner plugin search \"kubernetes\"\n\n# Obter informa\u00e7\u00f5es do plugin\nsloth-runner plugin info kubernetes-operator\n\n# Instalar do marketplace\nsloth-runner plugin install --marketplace kubernetes-operator\n</code></pre>"},{"location":"pt/plugin-development/#seguranca-e-melhores-praticas","title":"\ud83d\udd12 Seguran\u00e7a e Melhores Pr\u00e1ticas","text":""},{"location":"pt/plugin-development/#diretrizes-de-seguranca","title":"Diretrizes de Seguran\u00e7a","text":"<ol> <li>\ud83d\udee1\ufe0f Princ\u00edpio do Menor Privil\u00e9gio - Solicite apenas as permiss\u00f5es necess\u00e1rias</li> <li>\ud83d\udd10 Valida\u00e7\u00e3o de Entrada - Sempre valide entrada do usu\u00e1rio e configura\u00e7\u00e3o</li> <li>\ud83d\udeab Evitar Estado Global - Mantenha o estado do plugin isolado</li> <li>\ud83d\udcdd Tratamento de Erros - Forne\u00e7a mensagens de erro claras e logging</li> <li>\ud83e\uddea Testes - Escreva testes abrangentes para toda a funcionalidade</li> </ol>"},{"location":"pt/plugin-development/#qualidade-de-codigo","title":"Qualidade de C\u00f3digo","text":"<pre><code>// Bom: Tratamento claro de erros\nfunc (p *MeuPlugin) Execute(params map[string]interface{}) (*Result, error) {\n    value, ok := params[\"parametro_obrigatorio\"].(string)\n    if !ok {\n        return nil, fmt.Errorf(\"parametro_obrigatorio deve ser uma string\")\n    }\n\n    if value == \"\" {\n        return nil, fmt.Errorf(\"parametro_obrigatorio n\u00e3o pode estar vazio\")\n    }\n\n    // Processar com entrada validada\n    result := p.process(value)\n    return result, nil\n}\n</code></pre>"},{"location":"pt/plugin-development/#padroes-de-documentacao","title":"Padr\u00f5es de Documenta\u00e7\u00e3o","text":"<p>Cada plugin deve incluir:</p> <ul> <li>\ud83d\udccb README.md - Instru\u00e7\u00f5es de instala\u00e7\u00e3o e uso</li> <li>\ud83d\udcda Documenta\u00e7\u00e3o da API - Documenta\u00e7\u00e3o de fun\u00e7\u00e3o/m\u00e9todo</li> <li>\ud83d\udcd6 Exemplos - Exemplos de c\u00f3digo funcionais</li> <li>\ud83e\uddea Testes - Testes unit\u00e1rios e de integra\u00e7\u00e3o</li> <li>\ud83d\udcc4 Licen\u00e7a - Informa\u00e7\u00f5es claras de licenciamento</li> </ul>"},{"location":"pt/plugin-development/#exemplos-e-templates","title":"\ud83d\udcda Exemplos e Templates","text":""},{"location":"pt/plugin-development/#exemplo-completo-de-plugin","title":"Exemplo Completo de Plugin","text":"<p>Confira estes plugins de exemplo:</p> <ul> <li>Plugin Kubernetes Operator - Gerenciar recursos K8s</li> <li>Plugin Integra\u00e7\u00e3o Slack - Enviar notifica\u00e7\u00f5es</li> <li>Plugin Dashboard Monitoramento - UI de m\u00e9tricas customizadas</li> </ul>"},{"location":"pt/plugin-development/#templates-de-plugin","title":"Templates de Plugin","text":"<p>Use templates oficiais para in\u00edcio r\u00e1pido:</p> <pre><code># Usar template\nsloth-runner plugin init --template=lua-module meu-plugin\nsloth-runner plugin init --template=go-command meu-comando\nsloth-runner plugin init --template=react-ui meu-dashboard\n</code></pre>"},{"location":"pt/plugin-development/#comunidade-e-suporte","title":"\ud83d\udcac Comunidade e Suporte","text":""},{"location":"pt/plugin-development/#obtendo-ajuda","title":"Obtendo Ajuda","text":"<ul> <li>\ud83d\udcd6 Documenta\u00e7\u00e3o da API de Plugin</li> <li>\ud83d\udcac Comunidade Discord - #plugin-development</li> <li>\ud83d\udc1b Issues do GitHub - Relat\u00f3rios de bug e solicita\u00e7\u00f5es de recurso</li> <li>\ud83d\udce7 Lista de Email de Plugin - Discuss\u00f5es de desenvolvimento</li> </ul>"},{"location":"pt/plugin-development/#contribuindo","title":"Contribuindo","text":"<p>Recebemos contribui\u00e7\u00f5es de plugin! Veja nosso Guia de Contribui\u00e7\u00e3o para detalhes sobre:</p> <ul> <li>Processo de submiss\u00e3o de plugin</li> <li>Diretrizes de revis\u00e3o de c\u00f3digo</li> <li>Requisitos de documenta\u00e7\u00e3o</li> <li>Padr\u00f5es de teste</li> </ul> <p>Comece a construir plugins incr\u00edveis para o Sloth Runner hoje! A arquitetura extens\u00edvel da plataforma torna f\u00e1cil adicionar exatamente a funcionalidade que voc\u00ea precisa. \ud83d\udd0c\u2728</p>"},{"location":"pt/quick-start/","title":"\u26a1 Tutorial R\u00e1pido","text":"<p>Para documenta\u00e7\u00e3o completa em portugu\u00eas, visite:</p>"},{"location":"pt/quick-start/#inicio-rapido","title":"\ud83d\ude80 In\u00edcio R\u00e1pido","text":""},{"location":"pt/quick-start/#instalacao","title":"Instala\u00e7\u00e3o","text":"<pre><code># Download\ncurl -sSL https://raw.githubusercontent.com/chalkan3-sloth/sloth-runner/master/install.sh | bash\n\n# Ou via Go\ngo install github.com/chalkan3-sloth/sloth-runner/cmd/sloth-runner@latest\n</code></pre>"},{"location":"pt/quick-start/#primeiro-workflow","title":"Primeiro Workflow","text":"<p>Crie um arquivo <code>hello.sloth</code>:</p> <pre><code>local hello_task = task(\"hello\")\n    :description(\"Minha primeira task\")\n    :command(function()\n        print(\"\ud83e\udda5 Ol\u00e1 do Sloth Runner!\")\n        return true\n    end)\n    :build()\n\nworkflow.define(\"hello_world\", {\n    description = \"Meu primeiro workflow\",\n    tasks = { hello_task }\n})\n</code></pre> <p>Execute:</p> <pre><code>sloth-runner run -f hello.sloth\n</code></pre>"},{"location":"pt/quick-start/#proximos-passos","title":"\ud83d\udcda Pr\u00f3ximos Passos","text":"<ul> <li>Conceitos Fundamentais</li> <li>Exemplos Avan\u00e7ados</li> <li>Recursos Avan\u00e7ados</li> </ul> <p>Para o tutorial completo, veja: Tutorial Principal</p>"},{"location":"pt/repl/","title":"REPL Interativo","text":"<p>O comando <code>sloth-runner repl</code> inicia uma sess\u00e3o interativa de Read-Eval-Print Loop (REPL). Esta \u00e9 uma ferramenta poderosa para depura\u00e7\u00e3o, explora\u00e7\u00e3o e experimenta\u00e7\u00e3o r\u00e1pida com os m\u00f3dulos do sloth-runner.</p>"},{"location":"pt/repl/#iniciando-o-repl","title":"Iniciando o REPL","text":"<p>Para iniciar uma sess\u00e3o, simplesmente execute: <pre><code>sloth-runner repl\n</code></pre></p> <p>Voc\u00ea tamb\u00e9m pode pr\u00e9-carregar um arquivo de workflow para ter suas <code>Modern DSLs</code> e quaisquer fun\u00e7\u00f5es auxiliares dispon\u00edveis na sess\u00e3o. Isso \u00e9 incrivelmente \u00fatil para depurar uma pipeline existente.</p> <pre><code>sloth-runner repl -f /caminho/para/sua/pipeline.sloth\n</code></pre>"},{"location":"pt/repl/#funcionalidades","title":"Funcionalidades","text":""},{"location":"pt/repl/#ambiente-ao-vivo","title":"Ambiente ao Vivo","text":"<p>O REPL fornece um ambiente Lua ao vivo onde voc\u00ea pode executar qualquer c\u00f3digo Lua. Todos os m\u00f3dulos embutidos do sloth-runner (<code>aws</code>, <code>docker</code>, <code>fs</code>, <code>log</code>, etc.) s\u00e3o pr\u00e9-carregados e prontos para uso.</p> <pre><code>sloth&gt; log.info(\"Ol\u00e1 do REPL!\")\nsloth&gt; resultado = fs.read(\"README.md\")\nsloth&gt; print(string.sub(resultado, 1, 50))\n</code></pre>"},{"location":"pt/repl/#autocompletar","title":"Autocompletar","text":"<p>O REPL possui um sistema sofisticado de autocompletar. - Comece a digitar o nome de uma vari\u00e1vel global ou m\u00f3dulo (ex: <code>aws</code>) e pressione <code>Tab</code> para ver as sugest\u00f5es. - Digite o nome de um m\u00f3dulo seguido por um ponto (ex: <code>docker.</code>) e pressione <code>Tab</code> para ver todas as fun\u00e7\u00f5es dispon\u00edveis naquele m\u00f3dulo.</p>"},{"location":"pt/repl/#historico","title":"Hist\u00f3rico","text":"<p>O REPL mant\u00e9m um hist\u00f3rico de seus comandos. Use as setas para cima e para baixo para navegar pelos comandos anteriores.</p>"},{"location":"pt/repl/#exemplo-de-sessao","title":"Exemplo de Sess\u00e3o","text":"<p>Aqui est\u00e1 um exemplo de uso do REPL para depurar um comando Docker.</p> <pre><code>$ sloth-runner repl\nSloth-Runner Interactive REPL\nDigite 'exit' ou 'quit' para sair.\nsloth&gt; resultado = docker.exec({\"ps\", \"-a\"})\nsloth&gt; print(resultado.stdout)\nCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES\nsloth&gt; -- Agora vamos tentar construir uma imagem\nsloth&gt; resultado_build = docker.build({tag=\"meu-teste\", path=\"./examples/docker\"})\nsloth&gt; print(resultado_build.success)\ntrue\nsloth&gt; exit\nTchau!\n</code></pre>"},{"location":"pt/scheduler/","title":"Agendador de Tarefas","text":"<p>O <code>sloth-runner</code> agora inclui um agendador de tarefas integrado, permitindo automatizar a execu\u00e7\u00e3o de suas tarefas definidas em Lua em intervalos espec\u00edficos usando a sintaxe cron.</p>"},{"location":"pt/scheduler/#funcionalidades","title":"Funcionalidades","text":"<ul> <li>Processo em Segundo Plano: O agendador \u00e9 executado como um processo persistente em segundo plano, independente da sua sess\u00e3o de terminal.</li> <li>Agendamento Baseado em Cron: Defina agendamentos de tarefas usando strings cron flex\u00edveis.</li> <li>Persist\u00eancia: As tarefas agendadas s\u00e3o carregadas de um arquivo de configura\u00e7\u00e3o, garantindo que sejam retomadas ap\u00f3s rein\u00edcios.</li> <li>Integra\u00e7\u00e3o com Tarefas Existentes: O agendador utiliza o comando <code>sloth-runner run</code> existente para executar suas tarefas.</li> </ul>"},{"location":"pt/scheduler/#configuracao-scheduleryaml","title":"Configura\u00e7\u00e3o: <code>scheduler.yaml</code>","text":"<p>As tarefas agendadas s\u00e3o definidas em um arquivo YAML, tipicamente chamado <code>scheduler.yaml</code>. Este arquivo especifica as tarefas a serem executadas, seu agendamento e o arquivo Lua, grupo e nome da tarefa.</p> <pre><code>scheduled_tasks:\n  - name: \"my_daily_backup\"\n    schedule: \"0 0 * * *\" # Todo dia \u00e0 meia-noite\n    task_file: \"examples/my_workflow.sloth\"\n    task_group: \"backup_group\"\n    task_name: \"perform_backup\"\n  - name: \"hourly_report_generation\"\n    schedule: \"0 * * * *\" # Toda hora\n    task_file: \"examples/reporting.sloth\"\n    task_group: \"reports\"\n    task_name: \"generate_report\"\n</code></pre> <p>Campos:</p> <ul> <li><code>name</code> (string, obrigat\u00f3rio): Um nome \u00fanico para a tarefa agendada.</li> <li><code>schedule</code> (string, obrigat\u00f3rio): A string cron que define quando a tarefa deve ser executada. Suporta a sintaxe cron padr\u00e3o e alguns agendamentos predefinidos (ex: <code>@every 1h</code>, <code>@daily</code>). Consulte a documenta\u00e7\u00e3o do robfig/cron para detalhes.</li> <li><code>task_file</code> (string, obrigat\u00f3rio): O caminho para o arquivo de defini\u00e7\u00e3o da tarefa Lua.</li> <li><code>task_group</code> (string, obrigat\u00f3rio): O nome do grupo de tarefas dentro do arquivo Lua.</li> <li><code>task_name</code> (string, obrigat\u00f3rio): O nome da tarefa espec\u00edfica a ser executada dentro do grupo de tarefas.</li> </ul>"},{"location":"pt/scheduler/#comandos-cli","title":"Comandos CLI","text":""},{"location":"pt/scheduler/#sloth-runner-scheduler-enable","title":"<code>sloth-runner scheduler enable</code>","text":"<p>Inicia o agendador do <code>sloth-runner</code> como um processo em segundo plano. Este comando garante que o agendador esteja em execu\u00e7\u00e3o e pronto para processar tarefas agendadas.</p> <pre><code>sloth-runner scheduler enable --scheduler-config scheduler.yaml\n</code></pre> <ul> <li><code>--scheduler-config</code> (ou <code>-c</code>): Especifica o caminho para o seu arquivo de configura\u00e7\u00e3o <code>scheduler.yaml</code>. O padr\u00e3o \u00e9 <code>scheduler.yaml</code> no diret\u00f3rio atual.</li> </ul> <p>Ap\u00f3s a execu\u00e7\u00e3o, o comando imprimir\u00e1 o PID do processo do agendador em segundo plano. O agendador continuar\u00e1 a ser executado mesmo que sua sess\u00e3o de terminal seja fechada.</p>"},{"location":"pt/scheduler/#sloth-runner-scheduler-disable","title":"<code>sloth-runner scheduler disable</code>","text":"<p>Para o processo em segundo plano do agendador do <code>sloth-runner</code> em execu\u00e7\u00e3o.</p> <pre><code>sloth-runner scheduler disable\n</code></pre> <p>Este comando tentar\u00e1 encerrar o processo do agendador de forma graciosa. Se bem-sucedido, ele remover\u00e1 o arquivo PID criado pelo comando <code>enable</code>.</p>"},{"location":"pt/scheduler/#sloth-runner-scheduler-list","title":"<code>sloth-runner scheduler list</code>","text":"<p>Lista todas as tarefas agendadas definidas no arquivo de configura\u00e7\u00e3o <code>scheduler.yaml</code>. Este comando fornece uma vis\u00e3o geral de suas tarefas configuradas, seus agendamentos e detalhes da tarefa Lua associada.</p> <pre><code>sloth-runner scheduler list --scheduler-config scheduler.yaml\n</code></pre> <ul> <li><code>--scheduler-config</code> (ou <code>-c</code>): Especifica o caminho para o seu arquivo de configura\u00e7\u00e3o <code>scheduler.yaml</code>. O padr\u00e3o \u00e9 <code>scheduler.yaml</code> no diret\u00f3rio atual.</li> </ul> <p>Exemplo de Sa\u00edda:</p> <pre><code># Configured Scheduled Tasks\n\nNAME                     | SCHEDULE    | FILE                     | GROUP        | TASK\nmy_daily_backup          | 0 0 * * *   | examples/my_workflow.sloth | backup_group | perform_backup\nhourly_report_generation | 0 * * * *   | examples/reporting.sloth   | reports      | generate_report\n</code></pre>"},{"location":"pt/scheduler/#sloth-runner-scheduler-delete-task_name","title":"<code>sloth-runner scheduler delete &lt;task_name&gt;</code>","text":"<p>Exclui uma tarefa agendada espec\u00edfica do arquivo de configura\u00e7\u00e3o <code>scheduler.yaml</code>. Este comando remove a defini\u00e7\u00e3o da tarefa, e o agendador n\u00e3o a executar\u00e1 mais.</p> <pre><code>sloth-runner scheduler delete my_daily_backup --scheduler-config scheduler.yaml\n</code></pre> <ul> <li><code>&lt;task_name&gt;</code> (string, obrigat\u00f3rio): O nome \u00fanico da tarefa agendada a ser exclu\u00edda.</li> <li><code>--scheduler-config</code> (ou <code>-c</code>): Especifica o caminho para o seu arquivo de configura\u00e7\u00e3o <code>scheduler.yaml</code>. O padr\u00e3o \u00e9 <code>scheduler.yaml</code> no diret\u00f3rio atual.</li> </ul> <p>Importante: Este comando modifica seu arquivo <code>scheduler.yaml</code>. Certifique-se de ter um backup, se necess\u00e1rio. Se o agendador estiver em execu\u00e7\u00e3o, pode ser necess\u00e1rio desativ\u00e1-lo e reativ\u00e1-lo para que as altera\u00e7\u00f5es entrem em vigor imediatamente.</p>"},{"location":"pt/scheduler/#registro-e-tratamento-de-erros","title":"Registro e Tratamento de Erros","text":"<p>O agendador registra suas atividades e o status de execu\u00e7\u00e3o das tarefas agendadas na sa\u00edda padr\u00e3o e no erro padr\u00e3o. Recomenda-se redirecionar essas sa\u00eddas para um arquivo de log ao executar em um ambiente de produ\u00e7\u00e3o.</p> <p>Se uma tarefa agendada falhar, o agendador registrar\u00e1 o erro e continuar\u00e1 com outras tarefas agendadas. Ele n\u00e3o ser\u00e1 interrompido devido a falhas de tarefas individuais.</p>"},{"location":"pt/scheduler/#exemplo","title":"Exemplo","text":"<ol> <li> <p>Crie um arquivo <code>scheduler.yaml</code>:</p> <pre><code>scheduled_tasks:\n  - name: \"my_test_task\"\n    schedule: \"@every 1m\"\n    task_file: \"examples/basic_pipeline.sloth\"\n    task_group: \"basic_pipeline\"\n    task_name: \"fetch_data\"\n</code></pre> </li> <li> <p>Habilite o agendador:</p> <pre><code>sloth-runner scheduler enable --scheduler-config scheduler.yaml\n</code></pre> </li> <li> <p>Observe a sa\u00edda. A cada minuto, voc\u00ea dever\u00e1 ver mensagens indicando a execu\u00e7\u00e3o de <code>my_test_task</code>.</p> </li> <li> <p>Para parar o agendador:</p> <pre><code>sloth-runner scheduler disable\n</code></pre> </li> </ol>"},{"location":"pt/testing/","title":"Testando Workflows","text":"<p>O sloth-runner inclui um framework de testes embutido que permite escrever testes unit\u00e1rios e de integra\u00e7\u00e3o para seus workflows de tarefas. Escrever testes para sua automa\u00e7\u00e3o \u00e9 crucial para garantir a confiabilidade, prevenir regress\u00f5es e ter confian\u00e7a ao fazer altera\u00e7\u00f5es.</p>"},{"location":"pt/testing/#o-comando-test","title":"O Comando <code>test</code>","text":"<p>Voc\u00ea pode executar um arquivo de teste usando o comando <code>sloth-runner test</code>. Ele requer dois arquivos principais: o workflow que voc\u00ea quer testar e o pr\u00f3prio script de teste.</p> <pre><code>sloth-runner test -w &lt;caminho_para_workflow.sloth&gt; -f &lt;caminho_para_arquivo_de_teste.sloth&gt;\n</code></pre> <ul> <li><code>-w, --workflow</code>: Especifica o caminho para o arquivo principal de <code>Modern DSLs</code> que voc\u00ea quer testar.</li> <li><code>-f, --file</code>: Especifica o caminho para o seu arquivo de teste.</li> </ul>"},{"location":"pt/testing/#escrevendo-testes","title":"Escrevendo Testes","text":"<p>Os testes s\u00e3o escritos em Lua e usam dois novos m\u00f3dulos globais fornecidos pelo executor de testes: <code>test</code> e <code>assert</code>.</p>"},{"location":"pt/testing/#o-modulo-test","title":"O M\u00f3dulo <code>test</code>","text":"<p>O m\u00f3dulo <code>test</code> \u00e9 usado para estruturar seus testes e para executar tarefas espec\u00edficas do seu workflow.</p> <ul> <li><code>test.describe(suite_name, function)</code>: Agrupa testes relacionados em uma \"su\u00edte\". Serve para organiza\u00e7\u00e3o.</li> <li><code>test.it(function)</code>: Define um caso de teste individual. A descri\u00e7\u00e3o do teste deve ser inclu\u00edda nas mensagens de asser\u00e7\u00e3o dentro desta fun\u00e7\u00e3o.</li> <li><code>test.run_task(task_name)</code>: Esta \u00e9 a fun\u00e7\u00e3o principal do framework de testes. Ela executa uma \u00fanica tarefa pelo seu nome a partir do arquivo de workflow carregado. Ela retorna uma tabela de <code>result</code> contendo os detalhes da execu\u00e7\u00e3o.</li> </ul> <p>A tabela <code>result</code> retornada por <code>run_task</code> tem a seguinte estrutura:</p> <pre><code>{\n  success = true, -- booleano: true se a tarefa foi bem-sucedida, false caso contr\u00e1rio\n  message = \"Tarefa executada com sucesso\", -- string: A mensagem retornada pela tarefa\n  duration = \"1.23ms\", -- string: A dura\u00e7\u00e3o da execu\u00e7\u00e3o\n  output = { ... }, -- tabela: A tabela de output retornada pela tarefa\n  error = nil -- string: A mensagem de erro se a tarefa falhou\n}\n</code></pre>"},{"location":"pt/testing/#o-modulo-assert","title":"O M\u00f3dulo <code>assert</code>","text":"<p>O m\u00f3dulo <code>assert</code> fornece fun\u00e7\u00f5es para verificar os resultados das execu\u00e7\u00f5es de suas tarefas.</p> <ul> <li><code>assert.is_true(value, message)</code>: Verifica se o <code>value</code> \u00e9 verdadeiro.</li> <li><code>assert.equals(actual, expected, message)</code>: Verifica se o valor <code>actual</code> \u00e9 igual ao valor <code>expected</code>.</li> </ul>"},{"location":"pt/testing/#mocking-de-modulos","title":"Mocking de M\u00f3dulos","text":"<p>Para testar a l\u00f3gica de suas pipelines sem fazer chamadas externas reais (ex: para AWS, Docker ou Terraform), o framework de testes inclui um poderoso recurso de mocking.</p>"},{"location":"pt/testing/#politica-de-mocking-estrito","title":"Pol\u00edtica de Mocking Estrito","text":"<p>O executor de testes imp\u00f5e uma pol\u00edtica de mocking estrito. Ao rodar em modo de teste, qualquer chamada a uma fun\u00e7\u00e3o de m\u00f3dulo (como <code>aws.exec</code> ou <code>docker.build</code>) que n\u00e3o tenha sido explicitamente mockada far\u00e1 com que o teste falhe imediatamente. Isso garante que seus testes sejam totalmente autocontidos, determin\u00edsticos e n\u00e3o tenham efeitos colaterais indesejados.</p>"},{"location":"pt/testing/#testmockfunction_name-mock_definition","title":"<code>test.mock(function_name, mock_definition)</code>","text":"<p>Esta fun\u00e7\u00e3o permite que voc\u00ea defina um valor de retorno falso para qualquer fun\u00e7\u00e3o de m\u00f3dulo que possa ser mockada.</p> <ul> <li><code>function_name</code> (string): O nome completo da fun\u00e7\u00e3o a ser mockada (ex: <code>\"aws.s3.sync\"</code>, <code>\"docker.build\"</code>).</li> <li><code>mock_definition</code> (tabela): Uma tabela que define o que a fun\u00e7\u00e3o mockada deve retornar. Ela deve conter uma chave <code>returns</code>, que \u00e9 uma lista dos valores que a fun\u00e7\u00e3o retornar\u00e1.</li> </ul> <p>A lista <code>returns</code> \u00e9 crucial porque fun\u00e7\u00f5es Lua podem retornar m\u00faltiplos valores.</p> <p>Exemplo:</p> <pre><code>-- Mock de uma fun\u00e7\u00e3o que retorna uma \u00fanica tabela de resultado\ntest.mock(\"docker.build\", {\n  returns = {\n    { success = true, stdout = \"Imagem constru\u00edda com sucesso\" }\n  }\n})\n\n-- Mock de uma fun\u00e7\u00e3o que retorna dois valores (ex: um valor e um erro)\n-- Isto simula uma chamada bem-sucedida a terraform.output\ntest.mock(\"terraform.output\", {\n  returns = { \"meu_arquivo.txt\", nil }\n})\n\n-- Isto simula uma chamada com falha\ntest.mock(\"terraform.output\", {\n  returns = { nil, \"output n\u00e3o encontrado\" }\n})\n</code></pre>"},{"location":"pt/testing/#exemplo-completo-de-mocking","title":"Exemplo Completo de Mocking","text":"<p>Digamos que voc\u00ea tenha uma tarefa que chama <code>aws.exec</code> e possui uma l\u00f3gica que depende do resultado.</p> <p>Tarefa em <code>meu_workflow.sloth</code>: <pre><code>-- ...\n{\n  name = \"verificar-conta\",\n  command = function()\n    local result = aws.exec({\"sts\", \"get-caller-identity\"})\n    local data = data.parse_json(result.stdout)\n    if data.Account == \"123456789012\" then\n      return true, \"Conta correta.\"\n    else\n      return false, \"Conta errada.\"\n    end\n  end\n}\n-- ...\n</code></pre></p> <p>Teste em <code>meu_teste.sloth</code>: <pre><code>test.describe(\"L\u00f3gica de Verifica\u00e7\u00e3o de Conta\", function()\n  test.it(function()\n    -- Mock do valor de retorno de aws.exec\n    test.mock(\"aws.exec\", {\n      returns = {\n        {\n          success = true,\n          stdout = '{\"Account\": \"123456789012\"}'\n        }\n      }\n    })\n\n    -- Executa a tarefa que usa o mock\n    local result = test.run_task(\"verificar-conta\")\n\n    -- Afirma que a l\u00f3gica da tarefa funcionou corretamente com os dados mockados\n    assert.is_true(result.success, \"A tarefa deve ser bem-sucedida com o ID de conta correto\")\n    assert.equals(result.message, \"Conta correta.\", \"A mensagem deve ser correta\")\n  end)\nend)\n</code></pre></p>"},{"location":"pt/modules/aws/","title":"M\u00f3dulo AWS","text":"<p>O m\u00f3dulo <code>aws</code> fornece uma interface abrangente para interagir com a Amazon Web Services usando o AWS CLI. Ele foi projetado para funcionar perfeitamente com as cadeias de credenciais padr\u00e3o da AWS e tamb\u00e9m possui suporte de primeira classe para o <code>aws-vault</code> para maior seguran\u00e7a.</p>"},{"location":"pt/modules/aws/#configuracao","title":"Configura\u00e7\u00e3o","text":"<p>Nenhuma configura\u00e7\u00e3o espec\u00edfica no <code>values.yaml</code> \u00e9 necess\u00e1ria. O m\u00f3dulo depende de seu ambiente estar configurado para interagir com a AWS. Isso pode ser alcan\u00e7ado atrav\u00e9s de: - Perfis IAM para inst\u00e2ncias EC2 ou tarefas ECS/EKS. - Vari\u00e1veis de ambiente padr\u00e3o (<code>AWS_ACCESS_KEY_ID</code>, <code>AWS_SECRET_ACCESS_KEY</code>, etc.). - Um arquivo <code>~/.aws/credentials</code> configurado. - Usando o <code>aws-vault</code> com um perfil nomeado.</p>"},{"location":"pt/modules/aws/#executor-generico","title":"Executor Gen\u00e9rico","text":""},{"location":"pt/modules/aws/#awsexecargs-opts","title":"<code>aws.exec(args, opts)</code>","text":"<p>Esta \u00e9 a fun\u00e7\u00e3o principal do m\u00f3dulo. Ela executa qualquer comando do AWS CLI e retorna o resultado.</p> <p>Par\u00e2metros:</p> <ul> <li><code>args</code> (tabela): Obrigat\u00f3rio. Uma tabela de strings representando o comando e os argumentos a serem passados para o AWS CLI (ex: <code>{\"s3\", \"ls\", \"--recursive\"}</code>).</li> <li><code>opts</code> (tabela): Opcional. Uma tabela de op\u00e7\u00f5es para a execu\u00e7\u00e3o.<ul> <li><code>profile</code> (string): Se fornecido, o comando ser\u00e1 executado usando <code>aws-vault exec &lt;profile&gt; -- aws ...</code>. Se omitido, ele executar\u00e1 <code>aws ...</code> diretamente.</li> </ul> </li> </ul> <p>Retornos:</p> <p>Uma tabela contendo os seguintes campos: - <code>stdout</code> (string): A sa\u00edda padr\u00e3o do comando. - <code>stderr</code> (string): O erro padr\u00e3o do comando. - <code>exit_code</code> (n\u00famero): O c\u00f3digo de sa\u00edda do comando. <code>0</code> normalmente indica sucesso.</p> <p>Exemplo:</p> <pre><code>-- Usando credenciais padr\u00e3o\nlocal result = aws.exec({\"sts\", \"get-caller-identity\"})\nif result.exit_code == 0 then\n  print(result.stdout)\nend\n\n-- Usando um perfil do aws-vault\nlocal result_with_profile = aws.exec({\"ec2\", \"describe-instances\"}, {profile = \"meu-perfil-prod\"})\n</code></pre>"},{"location":"pt/modules/aws/#ajudantes-do-s3","title":"Ajudantes do S3","text":""},{"location":"pt/modules/aws/#awss3syncparams","title":"<code>aws.s3.sync(params)</code>","text":"<p>Um wrapper de alto n\u00edvel para o comando <code>aws s3 sync</code>, \u00fatil para sincronizar diret\u00f3rios com o S3.</p> <p>Par\u00e2metros:</p> <ul> <li><code>params</code> (tabela): Uma tabela contendo os seguintes campos:<ul> <li><code>source</code> (string): Obrigat\u00f3rio. O diret\u00f3rio de origem ou caminho S3.</li> <li><code>destination</code> (string): Obrigat\u00f3rio. O diret\u00f3rio de destino ou caminho S3.</li> <li><code>profile</code> (string): Opcional. O perfil do <code>aws-vault</code> a ser usado.</li> <li><code>delete</code> (boolean): Opcional. Se <code>true</code>, adiciona a flag <code>--delete</code> ao comando de sincroniza\u00e7\u00e3o.</li> </ul> </li> </ul> <p>Retornos:</p> <ul> <li><code>true</code> em caso de sucesso.</li> <li><code>false, error_message</code> em caso de falha.</li> </ul> <p>Exemplo:</p> <pre><code>local ok, err = aws.s3.sync({\n  source = \"./build\",\n  destination = \"s3://meu-bucket-app/static\",\n  profile = \"perfil-deploy\",\n  delete = true\n})\nif not ok then\n  log.error(\"Falha na sincroniza\u00e7\u00e3o com o S3: \" .. err)\nend\n</code></pre>"},{"location":"pt/modules/aws/#ajudantes-do-secrets-manager","title":"Ajudantes do Secrets Manager","text":""},{"location":"pt/modules/aws/#awssecretsmanagerget_secretparams","title":"<code>aws.secretsmanager.get_secret(params)</code>","text":"<p>Recupera o valor de um segredo do AWS Secrets Manager. Esta fun\u00e7\u00e3o simplifica o processo, retornando diretamente a <code>SecretString</code>.</p> <p>Par\u00e2metros:</p> <ul> <li><code>params</code> (tabela): Uma tabela contendo os seguintes campos:<ul> <li><code>secret_id</code> (string): Obrigat\u00f3rio. O nome ou ARN do segredo a ser recuperado.</li> <li><code>profile</code> (string): Opcional. O perfil do <code>aws-vault</code> a ser usado.</li> </ul> </li> </ul> <p>Retornos:</p> <ul> <li><code>secret_string</code> (string) em caso de sucesso.</li> <li><code>nil, error_message</code> em caso de falha.</li> </ul> <p>Exemplo:</p> <pre><code>local db_password, err = aws.secretsmanager.get_secret({\n  secret_id = \"producao/database/password\",\n  profile = \"meu-perfil-app\"\n})\n\nif not db_password then\n  log.error(\"Falha ao obter o segredo: \" .. err)\n  return false, \"Configura\u00e7\u00e3o falhou.\"\nend\n\n-- Agora voc\u00ea pode usar a vari\u00e1vel db_password\n</code></pre>"},{"location":"pt/modules/azure/","title":"M\u00f3dulo Azure","text":"<p>O m\u00f3dulo <code>azure</code> fornece uma interface para interagir com o Microsoft Azure usando a ferramenta de linha de comando <code>az</code>.</p>"},{"location":"pt/modules/azure/#configuracao","title":"Configura\u00e7\u00e3o","text":"<p>Este m\u00f3dulo requer que o CLI <code>az</code> esteja instalado e autenticado. Antes de executar pipelines que usam este m\u00f3dulo, voc\u00ea deve fazer login em sua conta do Azure:</p> <pre><code>az login\n</code></pre> <p>O m\u00f3dulo usar\u00e1 suas credenciais de login para todos os comandos.</p>"},{"location":"pt/modules/azure/#executor-generico","title":"Executor Gen\u00e9rico","text":""},{"location":"pt/modules/azure/#azureexecargs","title":"<code>azure.exec(args)</code>","text":"<p>Executa qualquer comando <code>az</code>. Esta fun\u00e7\u00e3o adiciona automaticamente a flag <code>--output json</code> (se ainda n\u00e3o estiver presente) para garantir que a sa\u00edda seja analis\u00e1vel por m\u00e1quina.</p> <p>Par\u00e2metros:</p> <ul> <li><code>args</code> (tabela): Obrigat\u00f3rio. Uma tabela de strings representando o comando e os argumentos a serem passados para o <code>az</code> (ex: <code>{\"group\", \"list\", \"--location\", \"eastus\"}</code>).</li> </ul> <p>Retornos:</p> <p>Uma tabela contendo os seguintes campos: - <code>stdout</code> (string): A sa\u00edda padr\u00e3o do comando (como uma string JSON). - <code>stderr</code> (string): O erro padr\u00e3o do comando. - <code>exit_code</code> (n\u00famero): O c\u00f3digo de sa\u00edda do comando. <code>0</code> normalmente indica sucesso.</p> <p>Exemplo:</p> <pre><code>local result = azure.exec({\"account\", \"show\"})\nif result.exit_code == 0 then\n  local account_info, err = data.parse_json(result.stdout)\n  if account_info then\n    log.info(\"Logado como: \" .. account_info.user.name)\n  end\nend\n</code></pre>"},{"location":"pt/modules/azure/#ajudantes-de-grupo-de-recursos-rg","title":"Ajudantes de Grupo de Recursos (RG)","text":""},{"location":"pt/modules/azure/#azurergdeleteparams","title":"<code>azure.rg.delete(params)</code>","text":"<p>Exclui um grupo de recursos.</p> <p>Par\u00e2metros:</p> <ul> <li><code>params</code> (tabela): Uma tabela contendo os seguintes campos:<ul> <li><code>name</code> (string): Obrigat\u00f3rio. O nome do grupo de recursos a ser exclu\u00eddo.</li> <li><code>yes</code> (boolean): Opcional. Se <code>true</code>, adiciona a flag <code>--yes</code> para ignorar a solicita\u00e7\u00e3o de confirma\u00e7\u00e3o.</li> </ul> </li> </ul> <p>Retornos:</p> <ul> <li><code>true</code> em caso de sucesso.</li> <li><code>false, error_message</code> em caso de falha.</li> </ul> <p>Exemplo:</p> <pre><code>local ok, err = azure.rg.delete({\n  name = \"meu-rg-de-teste\",\n  yes = true\n})\nif not ok then\n  log.error(\"Falha ao excluir o grupo de recursos: \" .. err)\nend\n</code></pre>"},{"location":"pt/modules/azure/#ajudantes-de-maquina-virtual-vm","title":"Ajudantes de M\u00e1quina Virtual (VM)","text":""},{"location":"pt/modules/azure/#azurevmlistparams","title":"<code>azure.vm.list(params)</code>","text":"<p>Lista m\u00e1quinas virtuais.</p> <p>Par\u00e2metros:</p> <ul> <li><code>params</code> (tabela): Opcional. Uma tabela contendo os seguintes campos:<ul> <li><code>resource_group</code> (string): O nome de um grupo de recursos para limitar a lista. Se omitido, lista as VMs em toda a assinatura.</li> </ul> </li> </ul> <p>Retornos:</p> <ul> <li><code>vms</code> (tabela) em caso de sucesso, onde a tabela \u00e9 um array JSON analisado de seus objetos VM.</li> <li><code>nil, error_message</code> em caso de falha.</li> </ul> <p>Exemplo:</p> <pre><code>-- Lista todas as VMs na assinatura\nlocal all_vms, err1 = azure.vm.list()\n\n-- Lista VMs em um grupo de recursos espec\u00edfico\nlocal specific_vms, err2 = azure.vm.list({resource_group = \"meu-rg-de-producao\"})\nif specific_vms then\n  for _, vm in ipairs(specific_vms) do\n    print(\"VM encontrada: \" .. vm.name)\n  end\nend\n</code></pre>"},{"location":"pt/modules/data/","title":"M\u00f3dulo Data","text":"<p>O m\u00f3dulo <code>data</code> fornece fun\u00e7\u00f5es para analisar (parse) e serializar dados entre tabelas Lua e formatos de dados comuns como JSON e YAML.</p> <p>---\\n</p>"},{"location":"pt/modules/data/#dataparse_jsonjson_string","title":"<code>data.parse_json(json_string)</code>","text":"<p>Analisa uma string JSON e a converte em uma tabela Lua.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>json_string</code> (string): A string formatada em JSON para analisar.</li> </ul> </li> <li>Retorna:<ul> <li><code>tabela</code>: A tabela Lua resultante.</li> <li><code>error</code>: Um objeto de erro se a an\u00e1lise falhar.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"pt/modules/data/#datato_jsonlua_table","title":"<code>data.to_json(lua_table)</code>","text":"<p>Serializa uma tabela Lua em uma string JSON.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>lua_table</code> (tabela): A tabela Lua a ser serializada.</li> </ul> </li> <li>Retorna:<ul> <li><code>string</code>: A string JSON resultante.</li> <li><code>error</code>: Um objeto de erro se a serializa\u00e7\u00e3o falhar.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"pt/modules/data/#dataparse_yamlyaml_string","title":"<code>data.parse_yaml(yaml_string)</code>","text":"<p>Analisa uma string YAML e a converte em uma tabela Lua.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>yaml_string</code> (string): A string formatada em YAML para analisar.</li> </ul> </li> <li>Retorna:<ul> <li><code>tabela</code>: A tabela Lua resultante.</li> <li><code>error</code>: Um objeto de erro se a an\u00e1lise falhar.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"pt/modules/data/#datato_yamllua_table","title":"<code>data.to_yaml(lua_table)</code>","text":"<p>Serializa uma tabela Lua em uma string YAML.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>lua_table</code> (tabela): A tabela Lua a ser serializada.</li> </ul> </li> <li>Retorna:<ul> <li><code>string</code>: A string YAML resultante.</li> <li><code>error</code>: Um objeto de erro se a serializa\u00e7\u00e3o falhar.</li> </ul> </li> </ul>"},{"location":"pt/modules/data/#exemplo","title":"Exemplo","text":"<pre><code>command = function()\n  local data = require(\"data\")\n\n  -- Exemplo JSON\n  log.info(\"Testando serializa\u00e7\u00e3o JSON...\")\n  local minha_tabela = { name = \"sloth-runner\", version = 1.0, features = { \"tasks\", \"lua\" } }\n  local json_str, err = data.to_json(minha_tabela)\n  if err then\n    return false, \"Falha ao serializar para JSON: \" .. err\n  end\n  print(\"JSON Serializado: \" .. json_str)\n\n  log.info(\"Testando an\u00e1lise de JSON...\")\n  local tabela_parseada, err = data.parse_json(json_str)\n  if err then\n    return false, \"Falha ao analisar JSON: \" .. err\n  end\n  log.info(\"Nome extra\u00eddo do JSON: \" .. tabela_parseada.name)\n\n  -- Exemplo YAML\n  log.info(\"Testando serializa\u00e7\u00e3o YAML...\")\n  local yaml_str, err = data.to_yaml(minha_tabela)\n  if err then\n    return false, \"Falha ao serializar para YAML: \" .. err\n  end\n  print(\"YAML Serializado:\\n\" .. yaml_str)\n\n  log.info(\"Testando an\u00e1lise de YAML...\")\n  tabela_parseada, err = data.parse_yaml(yaml_str)\n  if err then\n    return false, \"Falha ao analisar YAML: \" .. err\n  end\n  log.info(\"Vers\u00e3o extra\u00edda do YAML: \" .. tabela_parseada.version)\n\n  return true, \"Opera\u00e7\u00f5es do m\u00f3dulo Data bem-sucedidas.\"\nend\n</code></pre> <p>```</p>"},{"location":"pt/modules/digitalocean/","title":"M\u00f3dulo DigitalOcean","text":"<p>O m\u00f3dulo <code>digitalocean</code> fornece uma interface para interagir com seus recursos da DigitalOcean usando a ferramenta de linha de comando <code>doctl</code>.</p>"},{"location":"pt/modules/digitalocean/#configuracao","title":"Configura\u00e7\u00e3o","text":"<p>Este m\u00f3dulo requer que o CLI <code>doctl</code> esteja instalado e autenticado. A maneira padr\u00e3o de fazer isso \u00e9 gerar um token de acesso pessoal em seu painel de controle da DigitalOcean e defini-lo como a vari\u00e1vel de ambiente <code>DIGITALOCEAN_ACCESS_TOKEN</code>.</p> <pre><code>export DIGITALOCEAN_ACCESS_TOKEN=\"seu_token_de_api_da_do_aqui\"\n</code></pre> <p>O m\u00f3dulo usar\u00e1 automaticamente este token para todos os comandos.</p>"},{"location":"pt/modules/digitalocean/#executor-generico","title":"Executor Gen\u00e9rico","text":""},{"location":"pt/modules/digitalocean/#digitaloceanexecargs","title":"<code>digitalocean.exec(args)</code>","text":"<p>Executa qualquer comando <code>doctl</code>. Esta fun\u00e7\u00e3o adiciona automaticamente a flag <code>--output json</code> para garantir que a sa\u00edda seja analis\u00e1vel por m\u00e1quina.</p> <p>Par\u00e2metros:</p> <ul> <li><code>args</code> (tabela): Obrigat\u00f3rio. Uma tabela de strings representando o comando e os argumentos a serem passados para o <code>doctl</code> (ex: <code>{\"compute\", \"droplet\", \"list\"}</code>).</li> </ul> <p>Retornos:</p> <p>Uma tabela contendo os seguintes campos: - <code>stdout</code> (string): A sa\u00edda padr\u00e3o do comando (como uma string JSON). - <code>stderr</code> (string): O erro padr\u00e3o do comando. - <code>exit_code</code> (n\u00famero): O c\u00f3digo de sa\u00edda do comando. <code>0</code> normalmente indica sucesso.</p> <p>Exemplo:</p> <pre><code>local result = digitalocean.exec({\"account\", \"get\"})\nif result.exit_code == 0 then\n  local account_info, err = data.parse_json(result.stdout)\n  if account_info then\n    log.info(\"Status da conta: \" .. account_info.status)\n  end\nend\n</code></pre>"},{"location":"pt/modules/digitalocean/#ajudantes-de-droplets","title":"Ajudantes de Droplets","text":""},{"location":"pt/modules/digitalocean/#digitaloceandropletslist","title":"<code>digitalocean.droplets.list()</code>","text":"<p>Um wrapper de alto n\u00edvel para listar todos os Droplets em sua conta.</p> <p>Retornos:</p> <ul> <li><code>droplets</code> (tabela) em caso de sucesso, onde a tabela \u00e9 um array JSON analisado de seus objetos Droplet.</li> <li><code>nil, error_message</code> em caso de falha.</li> </ul> <p>Exemplo:</p> <pre><code>local droplets, err = digitalocean.droplets.list()\nif droplets then\n  for _, droplet in ipairs(droplets) do\n    print(\"Droplet encontrado: \" .. droplet.name)\n  end\nend\n</code></pre>"},{"location":"pt/modules/digitalocean/#digitaloceandropletsdeleteparams","title":"<code>digitalocean.droplets.delete(params)</code>","text":"<p>Exclui um Droplet espec\u00edfico pelo seu ID.</p> <p>Par\u00e2metros:</p> <ul> <li><code>params</code> (tabela): Uma tabela contendo os seguintes campos:<ul> <li><code>id</code> (string): Obrigat\u00f3rio. O ID do Droplet a ser exclu\u00eddo.</li> <li><code>force</code> (boolean): Opcional. Se <code>true</code>, adiciona a flag <code>--force</code> para ignorar a solicita\u00e7\u00e3o de confirma\u00e7\u00e3o. O padr\u00e3o \u00e9 <code>false</code>.</li> </ul> </li> </ul> <p>Retornos:</p> <ul> <li><code>true</code> em caso de sucesso.</li> <li><code>false, error_message</code> em caso de falha.</li> </ul> <p>Exemplo:</p> <pre><code>local ok, err = digitalocean.droplets.delete({\n  id = \"123456789\",\n  force = true\n})\nif not ok then\n  log.error(\"Falha ao excluir o droplet: \" .. err)\nend\n</code></pre>"},{"location":"pt/modules/docker/","title":"M\u00f3dulo Docker","text":"<p>O m\u00f3dulo <code>docker</code> fornece uma interface conveniente para interagir com o daemon do Docker, permitindo que voc\u00ea construa, execute e envie imagens Docker como parte de suas pipelines.</p>"},{"location":"pt/modules/docker/#configuracao","title":"Configura\u00e7\u00e3o","text":"<p>Este m\u00f3dulo requer que a CLI <code>docker</code> esteja instalada e que o daemon do Docker esteja em execu\u00e7\u00e3o e acess\u00edvel.</p>"},{"location":"pt/modules/docker/#funcoes","title":"Fun\u00e7\u00f5es","text":""},{"location":"pt/modules/docker/#dockerexecargs","title":"<code>docker.exec(args)</code>","text":"<p>Executa qualquer comando <code>docker</code> bruto.</p> <ul> <li><code>args</code> (tabela): Obrigat\u00f3rio. Uma lista de argumentos a serem passados para o comando <code>docker</code> (ex: <code>{\"ps\", \"-a\"}</code>).</li> <li>Retorna: Uma tabela de resultados com <code>success</code>, <code>stdout</code>, <code>stderr</code> e <code>exit_code</code>.</li> </ul>"},{"location":"pt/modules/docker/#dockerbuildparams","title":"<code>docker.build(params)</code>","text":"<p>Constr\u00f3i uma imagem Docker usando <code>docker build</code>.</p> <ul> <li><code>params</code> (tabela):<ul> <li><code>tag</code> (string): Obrigat\u00f3rio. A tag para a imagem (ex: <code>meu-app:latest</code>).</li> <li><code>path</code> (string): Obrigat\u00f3rio. O caminho do contexto de constru\u00e7\u00e3o.</li> <li><code>dockerfile</code> (string): Opcional. O caminho para o Dockerfile.</li> <li><code>build_args</code> (tabela): Opcional. Uma tabela de argumentos de constru\u00e7\u00e3o (ex: <code>{VERSION = \"1.0\"}</code>).</li> </ul> </li> <li>Retorna: Uma tabela de resultados.</li> </ul>"},{"location":"pt/modules/docker/#dockerpushparams","title":"<code>docker.push(params)</code>","text":"<p>Envia uma imagem Docker para um registro usando <code>docker push</code>.</p> <ul> <li><code>params</code> (tabela):<ul> <li><code>tag</code> (string): Obrigat\u00f3rio. A tag da imagem a ser enviada.</li> </ul> </li> <li>Retorna: Uma tabela de resultados.</li> </ul>"},{"location":"pt/modules/docker/#dockerrunparams","title":"<code>docker.run(params)</code>","text":"<p>Executa um cont\u00eainer Docker usando <code>docker run</code>.</p> <ul> <li><code>params</code> (tabela):<ul> <li><code>image</code> (string): Obrigat\u00f3rio. A imagem a ser executada.</li> <li><code>name</code> (string): Opcional. O nome para o cont\u00eainer.</li> <li><code>detach</code> (booleano): Opcional. Se <code>true</code>, executa o cont\u00eainer em segundo plano (<code>-d</code>).</li> <li><code>ports</code> (tabela): Opcional. Uma lista de mapeamentos de portas (ex: <code>{\"8080:80\"}</code>).</li> <li><code>env</code> (tabela): Opcional. Uma tabela de vari\u00e1veis de ambiente (ex: <code>{MINHA_VAR = \"valor\"}</code>).</li> </ul> </li> <li>Retorna: Uma tabela de resultados.</li> </ul>"},{"location":"pt/modules/docker/#exemplo","title":"Exemplo","text":"<pre><code>local image_tag = \"minha-imagem-teste:latest\"\n\n-- Tarefa 1: Build\nlocal result_build = docker.build({\n  tag = image_tag,\n  path = \"./app\"\n})\nif not result_build.success then return false, \"Build falhou\" end\n\n-- Tarefa 2: Run\nlocal result_run = docker.run({\n  image = image_tag,\n  name = \"meu-container-teste\",\n  ports = {\"8080:80\"}\n})\nif not result_run.success then return false, \"Run falhou\" end\n\n-- Tarefa 3: Push (ap\u00f3s teste bem-sucedido)\nlocal result_push = docker.push({tag = image_tag})\nif not result_push.success then return false, \"Push falhou\" end\n</code></pre>"},{"location":"pt/modules/exec/","title":"M\u00f3dulo Exec","text":"<p>O m\u00f3dulo <code>exec</code> \u00e9 um dos m\u00f3dulos mais fundamentais do <code>sloth-runner</code>. Ele fornece uma fun\u00e7\u00e3o poderosa para executar comandos de shell arbitr\u00e1rios, dando a voc\u00ea controle total sobre o ambiente de execu\u00e7\u00e3o.</p>"},{"location":"pt/modules/exec/#execruncommand-options","title":"<code>exec.run(command, [options])</code>","text":"<p>Executa um comando de shell usando <code>bash -c</code>.</p>"},{"location":"pt/modules/exec/#parametros","title":"Par\u00e2metros","text":"<ul> <li><code>command</code> (string): O comando de shell a ser executado.</li> <li><code>options</code> (tabela, opcional): Uma tabela de op\u00e7\u00f5es para controlar a execu\u00e7\u00e3o.<ul> <li><code>workdir</code> (string): O diret\u00f3rio de trabalho onde o comando deve ser executado. Se n\u00e3o for fornecido, ele \u00e9 executado no diret\u00f3rio tempor\u00e1rio do grupo de tarefas (se dispon\u00edvel) ou no diret\u00f3rio atual.</li> <li><code>env</code> (tabela): Um dicion\u00e1rio de vari\u00e1veis de ambiente (pares chave-valor) a serem definidas para a execu\u00e7\u00e3o do comando. Elas s\u00e3o adicionadas ao ambiente existente.</li> </ul> </li> </ul>"},{"location":"pt/modules/exec/#retorna","title":"Retorna","text":"<p>Uma tabela contendo o resultado da execu\u00e7\u00e3o do comando:</p> <ul> <li><code>success</code> (booleano): <code>true</code> se o comando saiu com o c\u00f3digo <code>0</code>, caso contr\u00e1rio <code>false</code>.</li> <li><code>stdout</code> (string): A sa\u00edda padr\u00e3o do comando.</li> <li><code>stderr</code> (string): A sa\u00edda de erro padr\u00e3o do comando.</li> </ul>"},{"location":"pt/modules/exec/#exemplo","title":"Exemplo","text":"<p>Este exemplo demonstra como usar <code>exec.run</code> com um diret\u00f3rio de trabalho e vari\u00e1veis de ambiente personalizados.</p> <pre><code>-- examples/exec_module_example.sloth\n\nModern DSLs = {\n  main = {\n    description = \"Uma tarefa para demonstrar o m\u00f3dulo exec.\",\n    tasks = {\n      {\n        name = \"run-with-options\",\n        description = \"Executa um comando com um workdir e ambiente personalizados.\",\n        command = function()\n          log.info(\"Preparando para executar um comando personalizado...\")\n\n          local exec = require(\"exec\")\n\n          -- Cria um diret\u00f3rio tempor\u00e1rio para o exemplo\n          local temp_dir = \"/tmp/sloth-exec-test\"\n          fs.mkdir(temp_dir)\n          fs.write(temp_dir .. \"/test.txt\", \"ol\u00e1 do arquivo de teste\")\n\n          -- Define as op\u00e7\u00f5es\n          local options = {\n            workdir = temp_dir,\n            env = {\n              MINHA_VAR = \"SlothRunner\",\n              OUTRA_VAR = \"e_incrivel\"\n            }\n          }\n\n          -- Executa o comando\n          local result = exec.run(\"echo 'MINHA_VAR \u00e9 $MINHA_VAR' &amp;&amp; ls -l &amp;&amp; cat test.txt\", options)\n\n          -- Limpa o diret\u00f3rio tempor\u00e1rio\n          fs.rm_r(temp_dir)\n\n          if result.success then\n            log.info(\"Comando executado com sucesso!\")\n            print(\"--- STDOUT ---\")\n            print(result.stdout)\n            print(\"--------------\")\n            return true, \"Comando exec bem-sucedido.\"\n          else\n            log.error(\"Comando exec falhou.\")\n            log.error(\"Stderr: \" .. result.stderr)\n            return false, \"Comando exec falhou.\"\n          end\n        end\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"pt/modules/fs/","title":"M\u00f3dulo FS","text":"<p>O m\u00f3dulo <code>fs</code> fornece fun\u00e7\u00f5es essenciais para interagir com o sistema de arquivos diretamente de seus scripts Lua.</p> <p>---\\n</p>"},{"location":"pt/modules/fs/#fsreadpath","title":"<code>fs.read(path)</code>","text":"<p>L\u00ea todo o conte\u00fado de um arquivo.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>path</code> (string): O caminho para o arquivo.</li> </ul> </li> <li>Retorna:<ul> <li><code>string</code>: O conte\u00fado do arquivo.</li> <li><code>error</code>: Um objeto de erro se a leitura falhar.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"pt/modules/fs/#fswritepath-content","title":"<code>fs.write(path, content)</code>","text":"<p>Escreve conte\u00fado em um arquivo, sobrescrevendo-o se ele j\u00e1 existir.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>path</code> (string): O caminho para o arquivo.</li> <li><code>content</code> (string): O conte\u00fado a ser escrito.</li> </ul> </li> <li>Retorna:<ul> <li><code>error</code>: Um objeto de erro se a escrita falhar.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"pt/modules/fs/#fsappendpath-content","title":"<code>fs.append(path, content)</code>","text":"<p>Adiciona conte\u00fado ao final de um arquivo. Cria o arquivo se ele n\u00e3o existir.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>path</code> (string): O caminho para o arquivo.</li> <li><code>content</code> (string): O conte\u00fado a ser adicionado.</li> </ul> </li> <li>Retorna:<ul> <li><code>error</code>: Um objeto de erro se a opera\u00e7\u00e3o falhar.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"pt/modules/fs/#fsexistspath","title":"<code>fs.exists(path)</code>","text":"<p>Verifica se um arquivo ou diret\u00f3rio existe no caminho fornecido.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>path</code> (string): O caminho a ser verificado.</li> </ul> </li> <li>Retorna:<ul> <li><code>boolean</code>: <code>true</code> se o caminho existir, <code>false</code> caso contr\u00e1rio.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"pt/modules/fs/#fsmkdirpath","title":"<code>fs.mkdir(path)</code>","text":"<p>Cria um diret\u00f3rio no caminho fornecido, incluindo quaisquer diret\u00f3rios pais necess\u00e1rios (como <code>mkdir -p</code>).</p> <ul> <li>Par\u00e2metros:<ul> <li><code>path</code> (string): O caminho do diret\u00f3rio a ser criado.</li> </ul> </li> <li>Retorna:<ul> <li><code>error</code>: Um objeto de erro se a cria\u00e7\u00e3o falhar.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"pt/modules/fs/#fsrmpath","title":"<code>fs.rm(path)</code>","text":"<p>Remove um \u00fanico arquivo.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>path</code> (string): O caminho para o arquivo a ser removido.</li> </ul> </li> <li>Retorna:<ul> <li><code>error</code>: Um objeto de erro se a remo\u00e7\u00e3o falhar.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"pt/modules/fs/#fsrm_rpath","title":"<code>fs.rm_r(path)</code>","text":"<p>Remove um arquivo ou diret\u00f3rio recursivamente (como <code>rm -rf</code>).</p> <ul> <li>Par\u00e2metros:<ul> <li><code>path</code> (string): O caminho a ser removido.</li> </ul> </li> <li>Retorna:<ul> <li><code>error</code>: Um objeto de erro se a remo\u00e7\u00e3o falhar.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"pt/modules/fs/#fslspath","title":"<code>fs.ls(path)</code>","text":"<p>Lista o conte\u00fado de um diret\u00f3rio.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>path</code> (string): O caminho para o diret\u00f3rio.</li> </ul> </li> <li>Retorna:<ul> <li><code>tabela</code>: Uma tabela contendo os nomes dos arquivos e subdiret\u00f3rios.</li> <li><code>error</code>: Um objeto de erro se a listagem falhar.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"pt/modules/fs/#fstmpname","title":"<code>fs.tmpname()</code>","text":"<p>Gera um caminho de diret\u00f3rio tempor\u00e1rio \u00fanico. Nota: Esta fun\u00e7\u00e3o apenas retorna o nome; ela n\u00e3o cria o diret\u00f3rio.</p> <ul> <li>Retorna:<ul> <li><code>string</code>: Um caminho \u00fanico adequado para um diret\u00f3rio tempor\u00e1rio.</li> <li><code>error</code>: Um objeto de erro se um nome n\u00e3o puder ser gerado.</li> </ul> </li> </ul>"},{"location":"pt/modules/fs/#exemplo","title":"Exemplo","text":"<pre><code>command = function()\n  local fs = require(\"fs\")\n\n  local tmp_dir = \"/tmp/fs-example\"\n  log.info(\"Criando diret\u00f3rio: \" .. tmp_dir)\n  fs.mkdir(tmp_dir)\n\n  local file_path = tmp_dir .. \"/meu_arquivo.txt\"\n  log.info(\"Escrevendo no arquivo: \" .. file_path)\n  fs.write(file_path, \"Ol\u00e1, Sloth Runner!\\n\")\n\n  log.info(\"Adicionando ao arquivo...\")\n  fs.append(file_path, \"Esta \u00e9 uma nova linha.\")\n\n  if fs.exists(file_path) then\n    log.info(\"Conte\u00fado do arquivo: \" .. fs.read(file_path))\n  end\n\n  log.info(\"Listando conte\u00fado de \" .. tmp_dir)\n  local contents = fs.ls(tmp_dir)\n  for i, name in ipairs(contents) do\n    print(\"- \" .. name)\n  end\n\n  log.info(\"Limpando...\")\n  fs.rm_r(tmp_dir)\n\n  return true, \"Opera\u00e7\u00f5es do m\u00f3dulo FS bem-sucedidas.\"\nend\n</code></pre> <p>```</p>"},{"location":"pt/modules/gcp/","title":"M\u00f3dulo GCP","text":"<p>O m\u00f3dulo <code>gcp</code> fornece uma interface simples para executar comandos da CLI do Google Cloud (<code>gcloud</code>) de dentro de uma tarefa do <code>sloth-runner</code>.</p>"},{"location":"pt/modules/gcp/#gcpexecargs","title":"<code>gcp.exec(args)</code>","text":"<p>Executa um comando <code>gcloud</code> com os argumentos especificados.</p>"},{"location":"pt/modules/gcp/#parametros","title":"Par\u00e2metros","text":"<ul> <li><code>args</code> (tabela): Uma tabela Lua (array) de strings representando os argumentos a serem passados para o comando <code>gcloud</code>. Por exemplo, <code>{\"compute\", \"instances\", \"list\"}</code>.</li> </ul>"},{"location":"pt/modules/gcp/#retorna","title":"Retorna","text":"<p>Uma tabela contendo o resultado da execu\u00e7\u00e3o do comando com as seguintes chaves:</p> <ul> <li><code>stdout</code> (string): A sa\u00edda padr\u00e3o do comando.</li> <li><code>stderr</code> (string): A sa\u00edda de erro padr\u00e3o do comando.</li> <li><code>exit_code</code> (n\u00famero): O c\u00f3digo de sa\u00edda do comando. Um c\u00f3digo de sa\u00edda <code>0</code> geralmente indica sucesso.</li> </ul>"},{"location":"pt/modules/gcp/#exemplo","title":"Exemplo","text":"<p>Este exemplo define uma tarefa que lista todas as inst\u00e2ncias do Compute Engine na regi\u00e3o <code>us-central1</code> para um projeto espec\u00edfico.</p> <pre><code>-- examples/gcp_cli_example.sloth\n\nModern DSLs = {\n  main = {\n    description = \"Uma tarefa para listar inst\u00e2ncias de computa\u00e7\u00e3o do GCP.\",\n    tasks = {\n      {\n        name = \"list-instances\",\n        description = \"Lista inst\u00e2ncias do GCE em us-central1.\",\n        command = function()\n          log.info(\"Listando inst\u00e2ncias do GCP...\")\n\n          -- Requer o m\u00f3dulo gcp para torn\u00e1-lo dispon\u00edvel\n          local gcp = require(\"gcp\")\n\n          -- Executa o comando gcloud\n          local result = gcp.exec({\n            \"compute\", \n            \"instances\", \n            \"list\", \n            \"--project\", \"meu-projeto-gcp-id\",\n            \"--zones\", \"us-central1-a,us-central1-b\"\n          })\n\n          -- Verifica o resultado\n          if result and result.exit_code == 0 then\n            log.info(\"Inst\u00e2ncias listadas com sucesso.\")\n            print(\"--- LISTA DE INST\u00c2NCIAS ---\")\n            print(result.stdout)\n            print(\"-------------------------\")\n            return true, \"Comando GCP bem-sucedido.\"\n          else\n            log.error(\"Falha ao listar inst\u00e2ncias do GCP.\")\n            if result then\n              log.error(\"Stderr: \" .. result.stderr)\n            end\n            return false, \"Comando GCP falhou.\"\n          end\n        end\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"pt/modules/git/","title":"M\u00f3dulo Git","text":"<p>O m\u00f3dulo <code>git</code> fornece uma API fluente para interagir com reposit\u00f3rios Git, permitindo que voc\u00ea automatize opera\u00e7\u00f5es comuns de controle de vers\u00e3o como clonar, commitar e enviar (push).</p>"},{"location":"pt/modules/git/#gitcloneurl-path","title":"<code>git.clone(url, path)</code>","text":"<p>Clona um reposit\u00f3rio Git para um caminho local.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>url</code> (string): A URL do reposit\u00f3rio a ser clonado.</li> <li><code>path</code> (string): O diret\u00f3rio local para onde clonar.</li> </ul> </li> <li>Retorna:<ul> <li><code>repo</code> (objeto): Um objeto <code>GitRepo</code> em caso de sucesso.</li> <li><code>error</code>: Um objeto de erro se a clonagem falhar.</li> </ul> </li> </ul>"},{"location":"pt/modules/git/#gitrepopath","title":"<code>git.repo(path)</code>","text":"<p>Abre um reposit\u00f3rio Git local existente.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>path</code> (string): O caminho para o reposit\u00f3rio local existente.</li> </ul> </li> <li>Retorna:<ul> <li><code>repo</code> (objeto): Um objeto <code>GitRepo</code> em caso de sucesso.</li> <li><code>error</code>: Um objeto de erro se o caminho n\u00e3o for um reposit\u00f3rio Git v\u00e1lido.</li> </ul> </li> </ul>"},{"location":"pt/modules/git/#o-objeto-gitrepo","title":"O Objeto <code>GitRepo</code>","text":"<p>Este objeto representa um reposit\u00f3rio local e fornece m\u00e9todos encade\u00e1veis para realizar opera\u00e7\u00f5es Git.</p>"},{"location":"pt/modules/git/#repocheckoutref","title":"<code>repo:checkout(ref)</code>","text":"<p>Faz checkout de um branch, tag ou commit espec\u00edfico.</p> <ul> <li>Par\u00e2metros: <code>ref</code> (string).</li> </ul>"},{"location":"pt/modules/git/#repopullremote-branch","title":"<code>repo:pull(remote, branch)</code>","text":"<p>Puxa (pull) as altera\u00e7\u00f5es de um reposit\u00f3rio remoto.</p> <ul> <li>Par\u00e2metros: <code>remote</code> (string), <code>branch</code> (string).</li> </ul>"},{"location":"pt/modules/git/#repoaddpattern","title":"<code>repo:add(pattern)</code>","text":"<p>Adiciona arquivos \u00e0 \u00e1rea de prepara\u00e7\u00e3o (staging) para um commit.</p> <ul> <li>Par\u00e2metros: <code>pattern</code> (string), ex: <code>\".\"</code> ou <code>\"caminho/para/arquivo.txt\"</code>.</li> </ul>"},{"location":"pt/modules/git/#repocommitmessage","title":"<code>repo:commit(message)</code>","text":"<p>Cria um commit.</p> <ul> <li>Par\u00e2metros: <code>message</code> (string).</li> </ul>"},{"location":"pt/modules/git/#repotagname-message","title":"<code>repo:tag(name, [message])</code>","text":"<p>Cria uma nova tag.</p> <ul> <li>Par\u00e2metros: <code>name</code> (string), <code>message</code> (string, opcional).</li> </ul>"},{"location":"pt/modules/git/#repopushremote-branch-options","title":"<code>repo:push(remote, branch, [options])</code>","text":"<p>Envia (push) commits para um reposit\u00f3rio remoto.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>remote</code> (string).</li> <li><code>branch</code> (string).</li> <li><code>options</code> (tabela, opcional): ex: <code>{ follow_tags = true }</code>.</li> </ul> </li> </ul>"},{"location":"pt/modules/git/#reporesult","title":"<code>repo:result()</code>","text":"<p>Este m\u00e9todo \u00e9 chamado no final de uma cadeia para obter o resultado da \u00faltima opera\u00e7\u00e3o.</p> <ul> <li>Retorna:<ul> <li><code>result</code> (tabela): Uma tabela contendo <code>success</code> (booleano), <code>stdout</code> (string) e <code>stderr</code> (string).</li> </ul> </li> </ul>"},{"location":"pt/modules/git/#exemplo","title":"Exemplo","text":"<p>Este exemplo demonstra um fluxo de trabalho completo semelhante a CI/CD: clonar, criar um arquivo de vers\u00e3o, adicionar, commitar, criar uma tag e enviar (push).</p> <pre><code>command = function()\n  local git = require(\"git\")\n  local repo_path = \"/tmp/git-example-repo\"\n\n  -- Limpa execu\u00e7\u00f5es anteriores\n  fs.rm_r(repo_path)\n\n  -- 1. Clona o reposit\u00f3rio\n  log.info(\"Clonando reposit\u00f3rio...\")\n  local repo, err = git.clone(\"https://github.com/chalkan3-sloth/sloth-runner.git\", repo_path)\n  if err then\n    return false, \"Falha ao clonar: \" .. err\n  end\n\n  -- 2. Cria e escreve um arquivo de vers\u00e3o\n  fs.write(repo_path .. \"/VERSION\", \"1.2.3\")\n\n  -- 3. Encadear comandos Git: add -&gt; commit -&gt; tag -&gt; push\n  log.info(\"Adicionando, commitando, criando tag e enviando...\")\n  repo:add(\".\"):commit(\"ci: Bump version to 1.2.3\"):tag(\"v1.2.3\"):push(\"origin\", \"main\", { follow_tags = true })\n\n  -- 4. Obt\u00e9m o resultado da opera\u00e7\u00e3o final (push)\n  local result = repo:result()\n\n  if not result.success then\n    log.error(\"O push do Git falhou: \" .. result.stderr)\n    return false, \"O push do Git falhou.\"\n  end\n\n  log.info(\"Tag da nova vers\u00e3o enviada com sucesso.\")\n  return true, \"Opera\u00e7\u00f5es Git bem-sucedidas.\"\nend\n</code></pre>"},{"location":"pt/modules/log/","title":"M\u00f3dulo Log","text":"<p>O m\u00f3dulo <code>log</code> fornece uma interface simples e essencial para registrar mensagens de seus scripts Lua no console do <code>sloth-runner</code>. Usar este m\u00f3dulo \u00e9 a maneira padr\u00e3o de fornecer feedback e informa\u00e7\u00f5es de depura\u00e7\u00e3o durante a execu\u00e7\u00e3o de uma tarefa.</p>"},{"location":"pt/modules/log/#loginfomessage","title":"<code>log.info(message)</code>","text":"<p>Registra uma mensagem no n\u00edvel INFO. Este \u00e9 o n\u00edvel padr\u00e3o para mensagens gerais e informativas.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>message</code> (string): A mensagem a ser registrada.</li> </ul> </li> </ul>"},{"location":"pt/modules/log/#logwarnmessage","title":"<code>log.warn(message)</code>","text":"<p>Registra uma mensagem no n\u00edvel WARN. \u00c9 adequado para problemas n\u00e3o cr\u00edticos que devem ser levados \u00e0 aten\u00e7\u00e3o do usu\u00e1rio.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>message</code> (string): A mensagem a ser registrada.</li> </ul> </li> </ul>"},{"location":"pt/modules/log/#logerrormessage","title":"<code>log.error(message)</code>","text":"<p>Registra uma mensagem no n\u00edvel ERROR. Deve ser usado para erros significativos que podem fazer com que uma tarefa falhe.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>message</code> (string): A mensagem a ser registrada.</li> </ul> </li> </ul>"},{"location":"pt/modules/log/#logdebugmessage","title":"<code>log.debug(message)</code>","text":"<p>Registra uma mensagem no n\u00edvel DEBUG. Essas mensagens geralmente ficam ocultas, a menos que o runner esteja em modo detalhado ou de depura\u00e7\u00e3o. S\u00e3o \u00fateis para informa\u00e7\u00f5es de diagn\u00f3stico detalhadas.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>message</code> (string): A mensagem a ser registrada.</li> </ul> </li> </ul>"},{"location":"pt/modules/log/#exemplo","title":"Exemplo","text":"<pre><code>command = function()\n  -- O m\u00f3dulo log est\u00e1 dispon\u00edvel globalmente e n\u00e3o precisa ser requerido.\n\n  log.info(\"Iniciando a tarefa de exemplo de log.\")\n\n  local user_name = \"Sloth\"\n  log.debug(\"O usu\u00e1rio atual \u00e9: \" .. user_name)\n\n  if user_name ~= \"Sloth\" then\n    log.warn(\"O usu\u00e1rio n\u00e3o \u00e9 o esperado.\")\n  end\n\n  log.info(\"A tarefa est\u00e1 executando sua a\u00e7\u00e3o principal...\")\n\n  local success = true -- Simula uma opera\u00e7\u00e3o bem-sucedida\n  if not success then\n    log.error(\"A a\u00e7\u00e3o principal falhou inesperadamente!\")\n    return false, \"A\u00e7\u00e3o principal falhou\"\n  end\n\n  log.info(\"Tarefa de exemplo de log conclu\u00edda com sucesso.\")\n  return true, \"Log demonstrado.\"\nend\n</code></pre>"},{"location":"pt/modules/metrics/","title":"\ud83d\udcca M\u00f3dulo de M\u00e9tricas e Monitoramento","text":"<p>O m\u00f3dulo M\u00e9tricas e Monitoramento fornece capacidades abrangentes de monitoramento do sistema, coleta de m\u00e9tricas customizadas e verifica\u00e7\u00e3o de sa\u00fade. Ele habilita observabilidade em tempo real tanto dos recursos do sistema quanto da performance da aplica\u00e7\u00e3o.</p>"},{"location":"pt/modules/metrics/#recursos-principais","title":"\ud83d\ude80 Recursos Principais","text":"<ul> <li>M\u00e9tricas do Sistema: Coleta autom\u00e1tica de m\u00e9tricas de CPU, mem\u00f3ria, disco e rede</li> <li>M\u00e9tricas de Runtime: Informa\u00e7\u00f5es do runtime Go (goroutines, heap, GC)</li> <li>M\u00e9tricas Customizadas: Gauges, contadores, histogramas e timers</li> <li>Verifica\u00e7\u00f5es de Sa\u00fade: Monitoramento autom\u00e1tico da sa\u00fade do sistema</li> <li>Endpoints HTTP: Export de m\u00e9tricas compat\u00edvel com Prometheus</li> <li>Sistema de Alertas: Alertas baseados em thresholds</li> <li>API JSON: Dados completos de m\u00e9tricas para integra\u00e7\u00f5es</li> </ul>"},{"location":"pt/modules/metrics/#metricas-do-sistema","title":"\ud83d\udcca M\u00e9tricas do Sistema","text":""},{"location":"pt/modules/metrics/#monitoramento-de-cpu-memoria-e-disco","title":"Monitoramento de CPU, Mem\u00f3ria e Disco","text":"<pre><code>-- Obter uso atual de CPU\nlocal uso_cpu = metrics.system_cpu()\nlog.info(\"Uso de CPU: \" .. string.format(\"%.1f%%\", uso_cpu))\n\n-- Obter informa\u00e7\u00f5es de mem\u00f3ria\nlocal info_memoria = metrics.system_memory()\nlog.info(\"Mem\u00f3ria: \" .. string.format(\"%.1f%% (%.0f/%.0f MB)\", \n    info_memoria.percent, info_memoria.used_mb, info_memoria.total_mb))\n\n-- Obter uso de disco\nlocal info_disco = metrics.system_disk(\"/\")\nlog.info(\"Disco: \" .. string.format(\"%.1f%% (%.1f/%.1f GB)\", \n    info_disco.percent, info_disco.used_gb, info_disco.total_gb))\n\n-- Verificar caminho espec\u00edfico do disco\nlocal disco_var = metrics.system_disk(\"/var\")\nlog.info(\"Uso do disco /var: \" .. string.format(\"%.1f%%\", disco_var.percent))\n</code></pre>"},{"location":"pt/modules/metrics/#informacoes-de-runtime","title":"Informa\u00e7\u00f5es de Runtime","text":"<pre><code>-- Obter m\u00e9tricas do runtime Go\nlocal runtime = metrics.runtime_info()\nlog.info(\"Informa\u00e7\u00f5es de Runtime:\")\nlog.info(\"  Goroutines: \" .. runtime.goroutines)\nlog.info(\"  N\u00facleos de CPU: \" .. runtime.num_cpu)\nlog.info(\"  Heap alocado: \" .. string.format(\"%.1f MB\", runtime.heap_alloc_mb))\nlog.info(\"  Heap do sistema: \" .. string.format(\"%.1f MB\", runtime.heap_sys_mb))\nlog.info(\"  Ciclos de GC: \" .. runtime.num_gc)\nlog.info(\"  Vers\u00e3o do Go: \" .. runtime.go_version)\n</code></pre>"},{"location":"pt/modules/metrics/#metricas-customizadas","title":"\ud83d\udcc8 M\u00e9tricas Customizadas","text":""},{"location":"pt/modules/metrics/#metricas-gauge-valores-atuais","title":"M\u00e9tricas Gauge (Valores Atuais)","text":"<pre><code>-- Definir valores simples de gauge\nmetrics.gauge(\"temperatura_cpu\", 65.4)\nmetrics.gauge(\"conexoes_ativas\", 142)\nmetrics.gauge(\"tamanho_fila\", 23)\n\n-- Definir gauge com tags\nmetrics.gauge(\"uso_memoria\", percentual_memoria, {\n    servidor = \"web-01\",\n    ambiente = \"producao\",\n    regiao = \"us-east-1\"\n})\n\n-- Atualizar status de deployment\nmetrics.gauge(\"progresso_deployment\", 75.5, {\n    app = \"frontend\",\n    versao = \"v2.1.0\"\n})\n</code></pre>"},{"location":"pt/modules/metrics/#metricas-counter-valores-incrementais","title":"M\u00e9tricas Counter (Valores Incrementais)","text":"<pre><code>-- Incrementar contadores\nlocal total_requisicoes = metrics.counter(\"requisicoes_http_total\", 1)\nlocal contador_erros = metrics.counter(\"erros_http_total\", 1, {\n    codigo_status = \"500\",\n    endpoint = \"/api/usuarios\"\n})\n\n-- Incremento em lote\nlocal processados = metrics.counter(\"mensagens_processadas\", 50, {\n    fila = \"notificacoes_usuario\",\n    prioridade = \"alta\"\n})\n\nlog.info(\"Total de requisi\u00e7\u00f5es processadas: \" .. total_requisicoes)\n</code></pre>"},{"location":"pt/modules/metrics/#metricas-histogram-distribuicao-de-valores","title":"M\u00e9tricas Histogram (Distribui\u00e7\u00e3o de Valores)","text":"<pre><code>-- Registrar tempos de resposta\nmetrics.histogram(\"tempo_resposta_ms\", 245.6, {\n    endpoint = \"/api/usuarios\",\n    metodo = \"GET\"\n})\n\n-- Registrar tamanhos de payload\nmetrics.histogram(\"tamanho_payload_bytes\", 1024, {\n    tipo_conteudo = \"application/json\"\n})\n\n-- Registrar tamanhos de lote\nmetrics.histogram(\"tamanho_lote\", 150, {\n    operacao = \"insercao_lote\",\n    tabela = \"eventos_usuario\"\n})\n</code></pre>"},{"location":"pt/modules/metrics/#metricas-timer-tempo-de-execucao-de-funcoes","title":"M\u00e9tricas Timer (Tempo de Execu\u00e7\u00e3o de Fun\u00e7\u00f5es)","text":"<pre><code>-- Cronometrar execu\u00e7\u00e3o de fun\u00e7\u00e3o automaticamente\nlocal duracao = metrics.timer(\"consulta_banco\", function()\n    -- Simular consulta ao banco\n    local resultado = exec.run(\"sleep 0.1\")\n    return resultado\nend, {\n    tipo_consulta = \"select\",\n    tabela = \"usuarios\"\n})\n\nlog.info(\"Consulta ao banco levou: \" .. string.format(\"%.2f ms\", duracao))\n\n-- Cronometrar opera\u00e7\u00f5es complexas\nlocal tempo_processamento = metrics.timer(\"processamento_dados\", function()\n    -- Processar dataset grande\n    local dados = {}\n    for i = 1, 100000 do\n        dados[i] = math.sqrt(i) * 2.5\n    end\n    return #dados\nend, {\n    operacao = \"computacao_matematica\",\n    tamanho = \"grande\"\n})\n\nlog.info(\"Processamento de dados conclu\u00eddo em: \" .. string.format(\"%.2f ms\", tempo_processamento))\n</code></pre>"},{"location":"pt/modules/metrics/#monitoramento-de-saude","title":"\ud83c\udfe5 Monitoramento de Sa\u00fade","text":""},{"location":"pt/modules/metrics/#status-de-saude-automatico","title":"Status de Sa\u00fade Autom\u00e1tico","text":"<pre><code>-- Obter status abrangente de sa\u00fade\nlocal saude = metrics.health_status()\nlog.info(\"Status Geral de Sa\u00fade: \" .. saude.overall)\n\n-- Verificar componentes individuais\nlocal componentes = {\"cpu\", \"memory\", \"disk\"}\nfor _, componente in ipairs(componentes) do\n    local info_comp = saude[componente]\n    if info_comp then\n        local icone_status = \"\u2705\"\n        if info_comp.status == \"warning\" then\n            icone_status = \"\u26a0\ufe0f\"\n        elseif info_comp.status == \"critical\" then\n            icone_status = \"\u274c\"\n        end\n\n        log.info(string.format(\"  %s %s: %.1f%% (%s)\", \n            icone_status, componente:upper(), info_comp.usage, info_comp.status))\n    end\nend\n</code></pre>"},{"location":"pt/modules/metrics/#verificacoes-de-saude-customizadas","title":"Verifica\u00e7\u00f5es de Sa\u00fade Customizadas","text":"<pre><code>-- Criar fun\u00e7\u00e3o de verifica\u00e7\u00e3o de sa\u00fade\nfunction verificar_saude_aplicacao()\n    local pontuacao_saude = 100\n    local problemas = {}\n\n    -- Verificar conectividade do banco\n    local resultado_bd = exec.run(\"pg_isready -h localhost -p 5432\")\n    if resultado_bd ~= \"\" then\n        pontuacao_saude = pontuacao_saude - 20\n        table.insert(problemas, \"Falha na conex\u00e3o com o banco de dados\")\n    end\n\n    -- Verificar espa\u00e7o em disco\n    local disco = metrics.system_disk(\"/\")\n    if disco.percent &gt; 90 then\n        pontuacao_saude = pontuacao_saude - 30\n        table.insert(problemas, \"Espa\u00e7o em disco cr\u00edtico: \" .. string.format(\"%.1f%%\", disco.percent))\n    end\n\n    -- Verificar uso de mem\u00f3ria\n    local memoria = metrics.system_memory()\n    if memoria.percent &gt; 85 then\n        pontuacao_saude = pontuacao_saude - 25\n        table.insert(problemas, \"Uso de mem\u00f3ria alto: \" .. string.format(\"%.1f%%\", memoria.percent))\n    end\n\n    -- Registrar pontua\u00e7\u00e3o de sa\u00fade\n    metrics.gauge(\"pontuacao_saude_aplicacao\", pontuacao_saude)\n\n    if pontuacao_saude &lt; 70 then\n        metrics.alert(\"saude_aplicacao\", {\n            level = \"warning\",\n            message = \"Sa\u00fade da aplica\u00e7\u00e3o degradada: \" .. table.concat(problemas, \", \"),\n            pontuacao = pontuacao_saude\n        })\n    end\n\n    return pontuacao_saude &gt;= 70\nend\n\n-- Usar em tasks\nModern DSLs = {\n    monitoramento_saude = {\n        tasks = {\n            verificacao_saude = {\n                command = function()\n                    local saudavel = verificar_saude_aplicacao()\n                    return saudavel, saudavel and \"Sistema saud\u00e1vel\" or \"Problemas de sa\u00fade detectados\"\n                end\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"pt/modules/metrics/#sistema-de-alertas","title":"\ud83d\udea8 Sistema de Alertas","text":""},{"location":"pt/modules/metrics/#criando-alertas","title":"Criando Alertas","text":"<pre><code>-- Alerta simples por threshold\nlocal cpu = metrics.system_cpu()\nif cpu &gt; 80 then\n    metrics.alert(\"uso_alto_cpu\", {\n        level = \"warning\",\n        message = \"Uso de CPU est\u00e1 alto: \" .. string.format(\"%.1f%%\", cpu),\n        threshold = 80,\n        value = cpu,\n        severidade = \"media\"\n    })\nend\n\n-- Alerta complexo com m\u00faltiplas condi\u00e7\u00f5es\nlocal memoria = metrics.system_memory()\nlocal disco = metrics.system_disk()\n\nif memoria.percent &gt; 90 and disco.percent &gt; 85 then\n    metrics.alert(\"esgotamento_recursos\", {\n        level = \"critical\",\n        message = string.format(\"Uso cr\u00edtico de recursos - Mem\u00f3ria: %.1f%%, Disco: %.1f%%\", \n            memoria.percent, disco.percent),\n        uso_memoria = memoria.percent,\n        uso_disco = disco.percent,\n        acao_recomendada = \"Escalar recursos imediatamente\"\n    })\nend\n\n-- Alertas espec\u00edficos da aplica\u00e7\u00e3o\nlocal tamanho_fila = state.get(\"tamanho_fila_tarefas\", 0)\nif tamanho_fila &gt; 1000 then\n    metrics.alert(\"acumulo_fila\", {\n        level = \"warning\", \n        message = \"Ac\u00famulo detectado na fila de tarefas: \" .. tamanho_fila .. \" itens\",\n        tamanho_fila = tamanho_fila,\n        tempo_processamento_estimado = tamanho_fila * 2 .. \" segundos\"\n    })\nend\n</code></pre>"},{"location":"pt/modules/metrics/#gerenciamento-de-metricas","title":"\ud83d\udd0d Gerenciamento de M\u00e9tricas","text":""},{"location":"pt/modules/metrics/#recuperando-metricas-customizadas","title":"Recuperando M\u00e9tricas Customizadas","text":"<pre><code>-- Obter m\u00e9trica customizada espec\u00edfica\nlocal metrica_cpu = metrics.get_custom(\"temperatura_cpu\")\nif metrica_cpu then\n    log.info(\"M\u00e9trica de temperatura da CPU: \" .. data.to_json(metrica_cpu))\nend\n\n-- Listar todas as m\u00e9tricas customizadas\nlocal todas_metricas = metrics.list_custom()\nlog.info(\"Total de m\u00e9tricas customizadas: \" .. #todas_metricas)\nfor i, nome_metrica in ipairs(todas_metricas) do\n    log.info(\"  \" .. i .. \". \" .. nome_metrica)\nend\n</code></pre>"},{"location":"pt/modules/metrics/#exemplo-de-monitoramento-de-performance","title":"Exemplo de Monitoramento de Performance","text":"<pre><code>Modern DSLs = {\n    monitoramento_performance = {\n        tasks = {\n            monitorar_performance_api = {\n                command = function()\n                    -- Iniciar sess\u00e3o de monitoramento\n                    log.info(\"Iniciando monitoramento de performance da API...\")\n\n                    -- Simular chamadas de API e medir performance\n                    for i = 1, 10 do\n                        local tempo_api = metrics.timer(\"chamada_api_\" .. i, function()\n                            -- Simular chamada de API\n                            exec.run(\"curl -s -o /dev/null -w '%{time_total}' https://api.exemplo.com/health\")\n                        end, {\n                            endpoint = \"health\",\n                            numero_chamada = tostring(i)\n                        })\n\n                        -- Registrar tempo de resposta\n                        metrics.histogram(\"tempo_resposta_api\", tempo_api, {\n                            endpoint = \"health\"\n                        })\n\n                        -- Verificar se o tempo de resposta \u00e9 aceit\u00e1vel\n                        if tempo_api &gt; 1000 then -- 1 segundo\n                            metrics.counter(\"chamadas_api_lentas\", 1, {\n                                endpoint = \"health\"\n                            })\n\n                            metrics.alert(\"resposta_api_lenta\", {\n                                level = \"warning\",\n                                message = string.format(\"Resposta lenta da API: %.2f ms\", tempo_api),\n                                tempo_resposta = tempo_api,\n                                threshold = 1000\n                            })\n                        end\n\n                        -- Breve atraso entre chamadas\n                        exec.run(\"sleep 0.1\")\n                    end\n\n                    -- Obter estat\u00edsticas resumidas\n                    local saude_sistema = metrics.health_status()\n                    log.info(\"Sa\u00fade do sistema ap\u00f3s testes da API: \" .. saude_sistema.overall)\n\n                    return true, \"Monitoramento de performance da API conclu\u00eddo\"\n                end\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"pt/modules/metrics/#endpoints-http","title":"\ud83c\udf10 Endpoints HTTP","text":"<p>O m\u00f3dulo de m\u00e9tricas exp\u00f5e automaticamente endpoints HTTP para sistemas de monitoramento externos:</p>"},{"location":"pt/modules/metrics/#formato-prometheus-metrics","title":"Formato Prometheus (<code>/metrics</code>)","text":"<pre><code># Acessar m\u00e9tricas compat\u00edveis com Prometheus\ncurl http://agente:8080/metrics\n\n# Exemplo de sa\u00edda:\n# sloth_agent_cpu_usage_percent 15.4\n# sloth_agent_memory_usage_mb 2048.5\n# sloth_agent_disk_usage_percent 67.2\n# sloth_agent_tasks_total 142\n</code></pre>"},{"location":"pt/modules/metrics/#formato-json-metricsjson","title":"Formato JSON (<code>/metrics/json</code>)","text":"<pre><code># Obter m\u00e9tricas completas em formato JSON\ncurl http://agente:8080/metrics/json\n\n# Exemplo de resposta:\n{\n  \"agent_name\": \"meuagente1\",\n  \"timestamp\": \"2024-01-15T10:30:00Z\",\n  \"system\": {\n    \"cpu_usage_percent\": 15.4,\n    \"memory_usage_mb\": 2048.5,\n    \"disk_usage_percent\": 67.2\n  },\n  \"runtime\": {\n    \"num_goroutines\": 25,\n    \"heap_alloc_mb\": 45.2\n  },\n  \"custom\": {\n    \"tempo_resposta_api\": {...},\n    \"progresso_deployment\": 85.5\n  }\n}\n</code></pre>"},{"location":"pt/modules/metrics/#verificacao-de-saude-health","title":"Verifica\u00e7\u00e3o de Sa\u00fade (<code>/health</code>)","text":"<pre><code># Verificar status de sa\u00fade do agente\ncurl http://agente:8080/health\n\n# Exemplo de resposta:\n{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2024-01-15T10:30:00Z\",\n  \"checks\": {\n    \"cpu\": {\"usage\": 15.4, \"status\": \"healthy\"},\n    \"memory\": {\"usage\": 45.8, \"status\": \"healthy\"},\n    \"disk\": {\"usage\": 67.2, \"status\": \"healthy\"}\n  }\n}\n</code></pre>"},{"location":"pt/modules/metrics/#referencia-da-api","title":"\ud83d\udccb Refer\u00eancia da API","text":""},{"location":"pt/modules/metrics/#metricas-do-sistema_1","title":"M\u00e9tricas do Sistema","text":"Fun\u00e7\u00e3o Par\u00e2metros Retorno Descri\u00e7\u00e3o <code>metrics.system_cpu()</code> - uso: number Obter percentual atual de uso de CPU <code>metrics.system_memory()</code> - info: table Obter informa\u00e7\u00f5es de uso de mem\u00f3ria <code>metrics.system_disk(caminho?)</code> caminho?: string info: table Obter uso de disco para caminho (padr\u00e3o: \"/\") <code>metrics.runtime_info()</code> - info: table Obter informa\u00e7\u00f5es do runtime Go"},{"location":"pt/modules/metrics/#metricas-customizadas_1","title":"M\u00e9tricas Customizadas","text":"Fun\u00e7\u00e3o Par\u00e2metros Retorno Descri\u00e7\u00e3o <code>metrics.gauge(nome, valor, tags?)</code> nome: string, valor: number, tags?: table sucesso: boolean Definir m\u00e9trica gauge <code>metrics.counter(nome, incremento?, tags?)</code> nome: string, incremento?: number, tags?: table novo_valor: number Incrementar contador <code>metrics.histogram(nome, valor, tags?)</code> nome: string, valor: number, tags?: table sucesso: boolean Registrar valor de histograma <code>metrics.timer(nome, funcao, tags?)</code> nome: string, funcao: function, tags?: table duracao: number Cronometrar execu\u00e7\u00e3o de fun\u00e7\u00e3o"},{"location":"pt/modules/metrics/#saude-e-monitoramento","title":"Sa\u00fade e Monitoramento","text":"Fun\u00e7\u00e3o Par\u00e2metros Retorno Descri\u00e7\u00e3o <code>metrics.health_status()</code> - status: table Obter status abrangente de sa\u00fade <code>metrics.alert(nome, dados)</code> nome: string, dados: table sucesso: boolean Criar alerta"},{"location":"pt/modules/metrics/#utilitarios","title":"Utilit\u00e1rios","text":"Fun\u00e7\u00e3o Par\u00e2metros Retorno Descri\u00e7\u00e3o <code>metrics.get_custom(nome)</code> nome: string metrica: table | nil Obter m\u00e9trica customizada por nome <code>metrics.list_custom()</code> - nomes: table Listar todos os nomes de m\u00e9tricas customizadas"},{"location":"pt/modules/metrics/#melhores-praticas","title":"\ud83c\udfaf Melhores Pr\u00e1ticas","text":"<ol> <li>Use tipos apropriados de m\u00e9tricas - gauges para valores atuais, contadores para totais, histogramas para distribui\u00e7\u00f5es</li> <li>Adicione tags significativas para categorizar e filtrar m\u00e9tricas</li> <li>Defina thresholds razo\u00e1veis para alertas para evitar fadiga de alertas</li> <li>Monitore o impacto na performance da coleta extensiva de m\u00e9tricas</li> <li>Use timers para opera\u00e7\u00f5es cr\u00edticas para identificar gargalos</li> <li>Implemente health checks para todos os componentes cr\u00edticos do sistema</li> <li>Exporte m\u00e9tricas para sistemas externos como Prometheus para armazenamento de longo prazo</li> </ol> <p>O m\u00f3dulo M\u00e9tricas e Monitoramento fornece observabilidade abrangente para seu ambiente distribu\u00eddo sloth-runner! \ud83d\udcca\ud83d\ude80</p>"},{"location":"pt/modules/net/","title":"M\u00f3dulo Net","text":"<p>O m\u00f3dulo <code>net</code> fornece fun\u00e7\u00f5es para fazer requisi\u00e7\u00f5es HTTP e baixar arquivos, permitindo que suas tarefas interajam com servi\u00e7os web e recursos remotos.</p>"},{"location":"pt/modules/net/#nethttp_geturl","title":"<code>net.http_get(url)</code>","text":"<p>Realiza uma requisi\u00e7\u00e3o HTTP GET para a URL especificada.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>url</code> (string): A URL para a qual enviar a requisi\u00e7\u00e3o GET.</li> </ul> </li> <li>Retorna:<ul> <li><code>body</code> (string): O corpo da resposta como uma string.</li> <li><code>status_code</code> (n\u00famero): O c\u00f3digo de status HTTP da resposta.</li> <li><code>headers</code> (tabela): Uma tabela contendo os cabe\u00e7alhos da resposta.</li> <li><code>error</code> (string): Uma mensagem de erro se a requisi\u00e7\u00e3o falhar.</li> </ul> </li> </ul>"},{"location":"pt/modules/net/#nethttp_posturl-body-headers","title":"<code>net.http_post(url, body, [headers])</code>","text":"<p>Realiza uma requisi\u00e7\u00e3o HTTP POST para a URL especificada.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>url</code> (string): A URL para a qual enviar a requisi\u00e7\u00e3o POST.</li> <li><code>body</code> (string): O corpo da requisi\u00e7\u00e3o a ser enviado.</li> <li><code>headers</code> (tabela, opcional): Uma tabela de cabe\u00e7alhos de requisi\u00e7\u00e3o a serem definidos.</li> </ul> </li> <li>Retorna:<ul> <li><code>body</code> (string): O corpo da resposta como uma string.</li> <li><code>status_code</code> (n\u00famero): O c\u00f3digo de status HTTP da resposta.</li> <li><code>headers</code> (tabela): Uma tabela contendo os cabe\u00e7alhos da resposta.</li> <li><code>error</code> (string): Uma mensagem de erro se a requisi\u00e7\u00e3o falhar.</li> </ul> </li> </ul>"},{"location":"pt/modules/net/#netdownloadurl-destination_path","title":"<code>net.download(url, destination_path)</code>","text":"<p>Baixa um arquivo de uma URL e o salva em um caminho local.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>url</code> (string): A URL do arquivo a ser baixado.</li> <li><code>destination_path</code> (string): O caminho do arquivo local para salvar o conte\u00fado baixado.</li> </ul> </li> <li>Retorna:<ul> <li><code>error</code>: Um objeto de erro se o download falhar.</li> </ul> </li> </ul>"},{"location":"pt/modules/net/#exemplo","title":"Exemplo","text":"<pre><code>command = function()\n  local net = require(\"net\")\n\n  -- Exemplo de requisi\u00e7\u00e3o GET\n  log.info(\"Realizando requisi\u00e7\u00e3o GET para httpbin.org...\")\n  local body, status, headers, err = net.http_get(\"https://httpbin.org/get\")\n  if err then\n    log.error(\"Requisi\u00e7\u00e3o GET falhou: \" .. err)\n    return false, \"Requisi\u00e7\u00e3o GET falhou\"\n  end\n  log.info(\"Requisi\u00e7\u00e3o GET bem-sucedida! Status: \" .. status)\n  -- print(\"Corpo da Resposta: \" .. body)\n\n  -- Exemplo de requisi\u00e7\u00e3o POST\n  log.info(\"Realizando requisi\u00e7\u00e3o POST para httpbin.org...\")\n  local post_body = '{\"name\": \"sloth-runner\", \"awesome\": true}'\n  local post_headers = { [\"Content-Type\"] = \"application/json\" }\n  body, status, headers, err = net.http_post(\"https://httpbin.org/post\", post_body, post_headers)\n  if err then\n    log.error(\"Requisi\u00e7\u00e3o POST falhou: \" .. err)\n    return false, \"Requisi\u00e7\u00e3o POST falhou\"\n  end\n  log.info(\"Requisi\u00e7\u00e3o POST bem-sucedida! Status: \" .. status)\n  -- print(\"Corpo da Resposta: \" .. body)\n\n  -- Exemplo de Download\n  local download_path = \"/tmp/sloth-runner-logo.svg\"\n  log.info(\"Baixando arquivo para \" .. download_path)\n  local err = net.download(\"https://raw.githubusercontent.com/chalkan3-sloth/sloth-runner/master/assets/sloth-runner-logo.svg\", download_path)\n  if err then\n    log.error(\"Download falhou: \" .. err)\n    return false, \"Download falhou\"\n  end\n  log.info(\"Arquivo baixado com sucesso.\")\n  fs.rm(download_path) -- Limpeza\n\n  return true, \"Opera\u00e7\u00f5es do m\u00f3dulo Net bem-sucedidas.\"\nend\n</code></pre>"},{"location":"pt/modules/notifications/","title":"M\u00f3dulo de Notifica\u00e7\u00f5es","text":"<p>O m\u00f3dulo <code>notifications</code> fornece uma maneira simples de enviar mensagens para v\u00e1rios servi\u00e7os de notifica\u00e7\u00e3o a partir de suas pipelines. Isso \u00e9 particularmente \u00fatil para relatar o sucesso ou a falha de um fluxo de trabalho de CI/CD.</p> <p>Atualmente, os seguintes servi\u00e7os s\u00e3o suportados: - Slack - ntfy</p>"},{"location":"pt/modules/notifications/#configuracao","title":"Configura\u00e7\u00e3o","text":"<p>Antes de usar o m\u00f3dulo, voc\u00ea precisa adicionar as credenciais ou URLs necess\u00e1rias ao seu arquivo <code>configs/values.yaml</code>. O m\u00f3dulo ler\u00e1 esses valores em tempo de execu\u00e7\u00e3o.</p> <pre><code># configs/values.yaml\n\nnotifications:\n  slack:\n    # Sua URL de Webhook de Entrada do Slack\n    webhook_url: \"https://hooks.slack.com/services/...\"\n  ntfy:\n    # O servidor ntfy a ser usado. Pode ser o p\u00fablico ou auto-hospedado.\n    server: \"https://ntfy.sh\"\n    # O t\u00f3pico para publicar a notifica\u00e7\u00e3o.\n    topic: \"seu-topico-sloth-runner\"\n</code></pre>"},{"location":"pt/modules/notifications/#slack","title":"Slack","text":""},{"location":"pt/modules/notifications/#notificationsslacksendparams","title":"<code>notifications.slack.send(params)</code>","text":"<p>Envia uma mensagem para um canal do Slack atrav\u00e9s de um Webhook de Entrada.</p> <p>Par\u00e2metros:</p> <ul> <li><code>params</code> (tabela): Uma tabela contendo os seguintes campos:<ul> <li><code>webhook_url</code> (string): Obrigat\u00f3rio. A URL do Webhook de Entrada do Slack. Recomenda-se obter isso do m\u00f3dulo <code>values</code>.</li> <li><code>message</code> (string): Obrigat\u00f3rio. O texto principal da mensagem.</li> <li><code>pipeline</code> (string): Opcional. O nome da pipeline, que ser\u00e1 exibido no anexo da mensagem para contexto.</li> <li><code>error_details</code> (string): Opcional. Quaisquer detalhes de erro a serem inclu\u00eddos no anexo da mensagem. Isso \u00e9 \u00fatil para notifica\u00e7\u00f5es de falha.</li> </ul> </li> </ul> <p>Retornos:</p> <ul> <li><code>true</code> em caso de sucesso.</li> <li><code>false, error_message</code> em caso de falha.</li> </ul> <p>Exemplo:</p> <pre><code>local values = require(\"values\")\n\nlocal slack_webhook = values.get(\"notifications.slack.webhook_url\")\n\nif slack_webhook and slack_webhook ~= \"\" then\n  -- Em caso de sucesso\n  notifications.slack.send({\n    webhook_url = slack_webhook,\n    message = \"\u2705 Pipeline executada com sucesso!\",\n    pipeline = \"minha-pipeline-incrivel\"\n  })\n\n  -- Em caso de falha\n  notifications.slack.send({\n    webhook_url = slack_webhook,\n    message = \"\u274c Falha na execu\u00e7\u00e3o da pipeline!\",\n    pipeline = \"minha-pipeline-incrivel\",\n    error_details = \"N\u00e3o foi poss\u00edvel conectar ao banco de dados.\"\n  })\nend\n</code></pre>"},{"location":"pt/modules/notifications/#ntfy","title":"ntfy","text":""},{"location":"pt/modules/notifications/#notificationsntfysendparams","title":"<code>notifications.ntfy.send(params)</code>","text":"<p>Envia uma mensagem para um t\u00f3pico do ntfy.sh.</p> <p>Par\u00e2metros:</p> <ul> <li><code>params</code> (tabela): Uma tabela contendo os seguintes campos:<ul> <li><code>server</code> (string): Obrigat\u00f3rio. A URL do servidor ntfy.</li> <li><code>topic</code> (string): Obrigat\u00f3rio. O t\u00f3pico para o qual a mensagem ser\u00e1 enviada.</li> <li><code>message</code> (string): Obrigat\u00f3rio. O corpo da notifica\u00e7\u00e3o.</li> <li><code>title</code> (string): Opcional. O t\u00edtulo da notifica\u00e7\u00e3o.</li> <li><code>priority</code> (string): Opcional. Prioridade da notifica\u00e7\u00e3o (ex: <code>high</code>, <code>default</code>, <code>low</code>).</li> <li><code>tags</code> (tabela): Opcional. Uma lista de tags (emojis) para adicionar \u00e0 notifica\u00e7\u00e3o.</li> </ul> </li> </ul> <p>Retornos:</p> <ul> <li><code>true</code> em caso de sucesso.</li> <li><code>false, error_message</code> em caso de falha.</li> </ul> <p>Exemplo:</p> <pre><code>local values = require(\"values\")\n\nlocal ntfy_server = values.get(\"notifications.ntfy.server\")\nlocal ntfy_topic = values.get(\"notifications.ntfy.topic\")\n\nif ntfy_topic and ntfy_topic ~= \"\" then\n  -- Em caso de sucesso\n  notifications.ntfy.send({\n    server = ntfy_server,\n    topic = ntfy_topic,\n    title = \"Pipeline com Sucesso\",\n    message = \"A pipeline terminou sem erros.\",\n    priority = \"default\",\n    tags = {\"tada\"}\n  })\n\n  -- Em caso de falha\n  notifications.ntfy.send({\n    server = ntfy_server,\n    topic = ntfy_topic,\n    title = \"Pipeline Falhou!\",\n    message = \"A pipeline falhou com um erro.\",\n    priority = \"high\",\n    tags = {\"skull\", \"warning\"}\n  })\nend\n</code></pre>"},{"location":"pt/modules/pkg/","title":"\ud83d\udce6 M\u00f3dulo de Gerenciamento de Pacotes","text":"<p>O m\u00f3dulo <code>pkg</code> fornece funcionalidades abrangentes de gerenciamento de pacotes multiplataforma. Ele detecta automaticamente o gerenciador de pacotes do sistema e fornece uma interface unificada.</p>"},{"location":"pt/modules/pkg/#gerenciadores-suportados","title":"\ud83c\udfaf Gerenciadores Suportados","text":"<ul> <li>apt / apt-get (Debian/Ubuntu)</li> <li>yum / dnf (RHEL/CentOS/Fedora)</li> <li>pacman (Arch Linux)</li> <li>zypper (openSUSE)</li> <li>brew (macOS - Homebrew)</li> </ul>"},{"location":"pt/modules/pkg/#visao-geral-das-funcoes","title":"\ud83d\udcda Vis\u00e3o Geral das Fun\u00e7\u00f5es","text":"Fun\u00e7\u00e3o Descri\u00e7\u00e3o <code>pkg.install(pacotes)</code> Instalar um ou mais pacotes <code>pkg.remove(pacotes)</code> Remover um ou mais pacotes <code>pkg.update()</code> Atualizar cache de pacotes <code>pkg.upgrade()</code> Atualizar todos os pacotes <code>pkg.search(query)</code> Buscar pacotes <code>pkg.info(pacote)</code> Obter informa\u00e7\u00f5es do pacote <code>pkg.list()</code> Listar pacotes instalados <code>pkg.is_installed(pacote)</code> Verificar se est\u00e1 instalado <code>pkg.get_manager()</code> Obter gerenciador detectado <code>pkg.clean()</code> Limpar cache <code>pkg.autoremove()</code> Remover depend\u00eancias n\u00e3o usadas <code>pkg.which(executavel)</code> Encontrar caminho do execut\u00e1vel <code>pkg.version(pacote)</code> Obter vers\u00e3o do pacote <code>pkg.deps(pacote)</code> Listar depend\u00eancias <code>pkg.install_local(arquivo)</code> Instalar de arquivo local"},{"location":"pt/modules/pkg/#documentacao-detalhada","title":"\ud83d\udcd6 Documenta\u00e7\u00e3o Detalhada","text":""},{"location":"pt/modules/pkg/#instalacao-e-remocao","title":"Instala\u00e7\u00e3o e Remo\u00e7\u00e3o","text":""},{"location":"pt/modules/pkg/#pkginstallpacotes","title":"<code>pkg.install(pacotes)</code>","text":"<p>Instala um ou mais pacotes.</p> <p>Par\u00e2metros: - <code>pacotes</code>: String (pacote \u00fanico) ou Tabela (m\u00faltiplos pacotes)</p> <p>Retorna: - <code>sucesso</code> (boolean): <code>true</code> em caso de sucesso - <code>saida</code> (string): Sa\u00edda do comando</p> <p>Exemplos:</p> DSL ModernoCom delegate_to <pre><code>local pkg = require(\"pkg\")\n\nlocal instalar_ferramentas = task(\"instalar_ferramentas\")\n    :description(\"Instalar ferramentas de desenvolvimento\")\n    :command(function(this, params)\n        log.info(\"Instalando ferramentas...\")\n\n        -- Instalar m\u00faltiplos pacotes\n        local ferramentas = {\"git\", \"curl\", \"wget\", \"vim\"}\n        local sucesso, saida = pkg.install(ferramentas)\n\n        if sucesso then\n            log.info(\"\u2705 Ferramentas instaladas com sucesso!\")\n            return true, \"Instalado\"\n        else\n            log.error(\"\u274c Falha: \" .. saida)\n            return false, \"Falhou\"\n        end\n    end)\n    :timeout(\"300s\")\n    :build()\n\nworkflow.define(\"configurar\")\n    :tasks({ instalar_ferramentas })\n</code></pre> <pre><code>local pkg = require(\"pkg\")\n\nlocal instalar_no_agente = task(\"instalar_no_agente\")\n    :description(\"Instalar pacotes no agente remoto\")\n    :command(function(this, params)\n        log.info(\"Instalando no agente remoto...\")\n\n        local sucesso, saida = pkg.install({\"htop\", \"ncdu\"})\n\n        if sucesso then\n            log.info(\"\u2705 Instalado no agente!\")\n            return true, \"OK\"\n        else\n            return false, \"Falhou\"\n        end\n    end)\n    :delegate_to(\"servidor-producao\")\n    :timeout(\"300s\")\n    :build()\n\nworkflow.define(\"instalacao_remota\")\n    :tasks({ instalar_no_agente })\n</code></pre>"},{"location":"pt/modules/pkg/#pkgremovepacotes","title":"<code>pkg.remove(pacotes)</code>","text":"<p>Remove um ou mais pacotes.</p> <p>Exemplo:</p> <pre><code>local pkg = require(\"pkg\")\n\nlocal limpeza = task(\"limpeza\")\n    :description(\"Remover pacotes desnecess\u00e1rios\")\n    :command(function(this, params)\n        local pacotes = {\"pacote1\", \"pacote2\"}\n        local sucesso, saida = pkg.remove(pacotes)\n\n        if sucesso then\n            log.info(\"\u2705 Pacotes removidos\")\n            return true, \"Removido\"\n        end\n        return false, \"Falhou\"\n    end)\n    :timeout(\"180s\")\n    :build()\n</code></pre>"},{"location":"pt/modules/pkg/#informacoes-de-pacotes","title":"Informa\u00e7\u00f5es de Pacotes","text":""},{"location":"pt/modules/pkg/#pkgsearchquery","title":"<code>pkg.search(query)</code>","text":"<p>Busca pacotes.</p> <p>Exemplo:</p> <pre><code>local pkg = require(\"pkg\")\n\nlocal buscar_python = task(\"buscar_python\")\n    :description(\"Buscar pacotes Python\")\n    :command(function(this, params)\n        local sucesso, resultados = pkg.search(\"python3\")\n\n        if sucesso then\n            log.info(\"Resultados da busca:\")\n            local contador = 0\n            for linha in resultados:gmatch(\"[^\\r\\n]+\") do\n                if contador &lt; 10 then\n                    log.info(\"  \u2022 \" .. linha)\n                end\n                contador = contador + 1\n            end\n            return true, contador .. \" resultados\"\n        end\n        return false, \"Busca falhou\"\n    end)\n    :timeout(\"60s\")\n    :build()\n</code></pre>"},{"location":"pt/modules/pkg/#pkginfopacote","title":"<code>pkg.info(pacote)</code>","text":"<p>Obt\u00e9m informa\u00e7\u00f5es do pacote.</p> <pre><code>local sucesso, info = pkg.info(\"curl\")\nif sucesso then\n    log.info(\"Info do pacote:\\n\" .. info)\nend\n</code></pre>"},{"location":"pt/modules/pkg/#pkglist","title":"<code>pkg.list()</code>","text":"<p>Lista pacotes instalados.</p> <p>Retorna: <code>sucesso</code> (boolean), <code>pacotes</code> (tabela)</p> <pre><code>local sucesso, pacotes = pkg.list()\nif sucesso and type(pacotes) == \"table\" then\n    local contador = 0\n    for _ in pairs(pacotes) do contador = contador + 1 end\n    log.info(\"\ud83d\udce6 Total: \" .. contador .. \" pacotes\")\nend\n</code></pre>"},{"location":"pt/modules/pkg/#manutencao-do-sistema","title":"Manuten\u00e7\u00e3o do Sistema","text":""},{"location":"pt/modules/pkg/#pkgupdate","title":"<code>pkg.update()</code>","text":"<p>Atualiza cache de pacotes.</p> <pre><code>local atualizar_cache = task(\"atualizar_cache\")\n    :description(\"Atualizar cache de pacotes\")\n    :command(function(this, params)\n        log.info(\"Atualizando...\")\n        return pkg.update()\n    end)\n    :timeout(\"120s\")\n    :build()\n</code></pre>"},{"location":"pt/modules/pkg/#pkgupgrade","title":"<code>pkg.upgrade()</code>","text":"<p>Atualiza todos os pacotes.</p>"},{"location":"pt/modules/pkg/#pkgclean","title":"<code>pkg.clean()</code>","text":"<p>Limpa cache de pacotes.</p>"},{"location":"pt/modules/pkg/#pkgautoremove","title":"<code>pkg.autoremove()</code>","text":"<p>Remove depend\u00eancias n\u00e3o utilizadas.</p> <p>Exemplo:</p> <pre><code>local manutencao = task(\"manutencao\")\n    :description(\"Manuten\u00e7\u00e3o do sistema\")\n    :command(function(this, params)\n        -- Atualizar\n        pkg.update()\n\n        -- Fazer upgrade\n        pkg.upgrade()\n\n        -- Limpar\n        pkg.clean()\n        pkg.autoremove()\n\n        return true, \"Manuten\u00e7\u00e3o completa\"\n    end)\n    :timeout(\"600s\")\n    :build()\n</code></pre>"},{"location":"pt/modules/pkg/#funcoes-avancadas","title":"Fun\u00e7\u00f5es Avan\u00e7adas","text":""},{"location":"pt/modules/pkg/#pkgis_installedpacote","title":"<code>pkg.is_installed(pacote)</code>","text":"<p>Verifica se est\u00e1 instalado.</p> <pre><code>local pkg = require(\"pkg\")\n\nlocal verificar_requisitos = task(\"verificar_requisitos\")\n    :description(\"Verificar pacotes necess\u00e1rios\")\n    :command(function(this, params)\n        local necessarios = {\"git\", \"curl\", \"wget\"}\n        local faltando = {}\n\n        for _, nome_pkg in ipairs(necessarios) do\n            local instalado, _ = pkg.is_installed(nome_pkg)\n            if not instalado then\n                table.insert(faltando, nome_pkg)\n            end\n        end\n\n        if #faltando &gt; 0 then\n            return false, \"Faltando: \" .. table.concat(faltando, \", \")\n        end\n\n        return true, \"Tudo OK\"\n    end)\n    :build()\n</code></pre>"},{"location":"pt/modules/pkg/#pkgget_manager","title":"<code>pkg.get_manager()</code>","text":"<p>Retorna nome do gerenciador.</p> <pre><code>local gerenciador, err = pkg.get_manager()\nlog.info(\"Gerenciador: \" .. (gerenciador or \"desconhecido\"))\n</code></pre>"},{"location":"pt/modules/pkg/#pkgwhichexecutavel","title":"<code>pkg.which(executavel)</code>","text":"<p>Encontra caminho do execut\u00e1vel.</p> <pre><code>local caminho, err = pkg.which(\"git\")\nif caminho then\n    log.info(\"Git em: \" .. caminho)\nend\n</code></pre>"},{"location":"pt/modules/pkg/#exemplos-completos","title":"\ud83c\udfaf Exemplos Completos","text":""},{"location":"pt/modules/pkg/#configuracao-de-ambiente-de-desenvolvimento","title":"Configura\u00e7\u00e3o de Ambiente de Desenvolvimento","text":"<pre><code>local pkg = require(\"pkg\")\n\nlocal atualizar = task(\"atualizar\")\n    :command(function() return pkg.update() end)\n    :build()\n\nlocal instalar_ferramentas = task(\"instalar_ferramentas\")\n    :command(function()\n        local ferramentas = {\"git\", \"curl\", \"wget\", \"vim\", \"htop\"}\n        return pkg.install(ferramentas)\n    end)\n    :depends_on({\"atualizar\"})\n    :build()\n\nlocal verificar = task(\"verificar\")\n    :command(function()\n        for _, ferramenta in ipairs({\"git\", \"curl\"}) do\n            if pkg.is_installed(ferramenta) then\n                local caminho = pkg.which(ferramenta)\n                log.info(\"\u2705 \" .. ferramenta .. \" (\" .. caminho .. \")\")\n            end\n        end\n        return true, \"OK\"\n    end)\n    :depends_on({\"instalar_ferramentas\"})\n    :build()\n\nworkflow.define(\"configurar_dev\")\n    :tasks({ atualizar, instalar_ferramentas, verificar })\n</code></pre>"},{"location":"pt/modules/pkg/#gerenciamento-distribuido","title":"Gerenciamento Distribu\u00eddo","text":"<pre><code>local pkg = require(\"pkg\")\n\nlocal atualizar_servidores = task(\"atualizar_servidores\")\n    :command(function() return pkg.update() end)\n    :delegate_to(\"servidor-prod-1\")\n    :build()\n\nlocal instalar_monitoramento = task(\"instalar_monitoramento\")\n    :command(function()\n        return pkg.install({\"htop\", \"iotop\", \"nethogs\"})\n    end)\n    :delegate_to(\"servidor-prod-1\")\n    :depends_on({\"atualizar_servidores\"})\n    :build()\n\nworkflow.define(\"configurar_monitoramento\")\n    :tasks({ atualizar_servidores, instalar_monitoramento })\n</code></pre>"},{"location":"pt/modules/pkg/#auditoria-do-sistema","title":"Auditoria do Sistema","text":"<pre><code>local pkg = require(\"pkg\")\n\nlocal auditoria = task(\"auditoria\")\n    :command(function()\n        log.info(\"\ud83d\udcca Auditoria do Sistema\")\n        log.info(string.rep(\"=\", 60))\n\n        local gerenciador = pkg.get_manager()\n        log.info(\"Gerenciador: \" .. gerenciador)\n\n        local _, pacotes = pkg.list()\n        local contador = 0\n        for _ in pairs(pacotes) do contador = contador + 1 end\n        log.info(\"Pacotes: \" .. contador)\n\n        local criticos = {\"openssl\", \"curl\"}\n        for _, p in ipairs(criticos) do\n            local instalado = pkg.is_installed(p)\n            log.info((instalado and \"\u2705\" or \"\u274c\") .. \" \" .. p)\n        end\n\n        return true, \"OK\"\n    end)\n    :build()\n\nworkflow.define(\"auditoria\")\n    :tasks({ auditoria })\n</code></pre>"},{"location":"pt/modules/pkg/#melhores-praticas","title":"\ud83d\ude80 Melhores Pr\u00e1ticas","text":"<ol> <li> <p>Atualizar antes de instalar: <pre><code>pkg.update()\npkg.install(\"pacote\")\n</code></pre></p> </li> <li> <p>Verificar antes de instalar: <pre><code>if not pkg.is_installed(\"git\") then\n    pkg.install(\"git\")\nend\n</code></pre></p> </li> <li> <p>Limpar ap\u00f3s opera\u00e7\u00f5es: <pre><code>pkg.clean()\npkg.autoremove()\n</code></pre></p> </li> <li> <p>Usar delegate_to para remoto: <pre><code>:delegate_to(\"nome-servidor\")\n</code></pre></p> </li> </ol>"},{"location":"pt/modules/pkg/#notas-de-plataforma","title":"\u26a0\ufe0f Notas de Plataforma","text":"<ul> <li>Linux: Requer sudo</li> <li>macOS: Homebrew n\u00e3o precisa de sudo</li> <li>Arch: Usa sintaxe do pacman</li> <li>openSUSE: Usa zypper</li> </ul>"},{"location":"pt/modules/pkg/#veja-tambem","title":"\ud83d\udd17 Veja Tamb\u00e9m","text":"<ul> <li>M\u00f3dulo exec</li> <li>Guia DSL Moderno</li> <li>Agentes Distribu\u00eddos</li> </ul>"},{"location":"pt/modules/pulumi/","title":"M\u00f3dulo Pulumi","text":"<p>O m\u00f3dulo <code>pulumi</code> fornece uma API fluente para orquestrar stacks do Pulumi, permitindo que voc\u00ea gerencie seus fluxos de trabalho de Infraestrutura como C\u00f3digo (IaC) diretamente do <code>sloth-runner</code>.</p>"},{"location":"pt/modules/pulumi/#pulumistackname-options","title":"<code>pulumi.stack(name, options)</code>","text":"<p>Cria um objeto de stack do Pulumi.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>name</code> (string): O nome completo da stack (ex: <code>\"minha-org/meu-projeto/dev\"</code>).</li> <li><code>options</code> (tabela): Uma tabela de op\u00e7\u00f5es.<ul> <li><code>workdir</code> (string): (Obrigat\u00f3rio) O caminho para o diret\u00f3rio do projeto Pulumi.</li> </ul> </li> </ul> </li> <li>Retorna:<ul> <li><code>stack</code> (objeto): Um objeto <code>PulumiStack</code>.</li> <li><code>error</code>: Um objeto de erro se a stack n\u00e3o puder ser inicializada.</li> </ul> </li> </ul>"},{"location":"pt/modules/pulumi/#o-objeto-pulumistack","title":"O Objeto <code>PulumiStack</code>","text":"<p>Este objeto representa uma stack espec\u00edfica do Pulumi e fornece m\u00e9todos para intera\u00e7\u00e3o.</p>"},{"location":"pt/modules/pulumi/#stackupoptions","title":"<code>stack:up([options])</code>","text":"<p>Cria ou atualiza os recursos da stack executando <code>pulumi up</code>.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>options</code> (tabela, opcional):<ul> <li><code>yes</code> (booleano): Se <code>true</code>, passa <code>--yes</code> para aprovar a atualiza\u00e7\u00e3o automaticamente.</li> <li><code>config</code> (tabela): Um dicion\u00e1rio de valores de configura\u00e7\u00e3o a serem passados para a stack.</li> <li><code>args</code> (tabela): Uma lista de argumentos de string adicionais a serem passados para o comando.</li> </ul> </li> </ul> </li> <li>Retorna:<ul> <li><code>result</code> (tabela): Uma tabela contendo <code>success</code> (booleano), <code>stdout</code> (string) e <code>stderr</code> (string).</li> </ul> </li> </ul>"},{"location":"pt/modules/pulumi/#stackpreviewoptions","title":"<code>stack:preview([options])</code>","text":"<p>Pr\u00e9-visualiza as altera\u00e7\u00f5es que seriam feitas por uma atualiza\u00e7\u00e3o executando <code>pulumi preview</code>.</p> <ul> <li>Par\u00e2metros: Os mesmos de <code>stack:up</code>.</li> <li>Retorna: O mesmo de <code>stack:up</code>.</li> </ul>"},{"location":"pt/modules/pulumi/#stackrefreshoptions","title":"<code>stack:refresh([options])</code>","text":"<p>Atualiza o estado da stack executando <code>pulumi refresh</code>.</p> <ul> <li>Par\u00e2metros: Os mesmos de <code>stack:up</code>.</li> <li>Retorna: O mesmo de <code>stack:up</code>.</li> </ul>"},{"location":"pt/modules/pulumi/#stackdestroyoptions","title":"<code>stack:destroy([options])</code>","text":"<p>Destr\u00f3i todos os recursos na stack executando <code>pulumi destroy</code>.</p> <ul> <li>Par\u00e2metros: Os mesmos de <code>stack:up</code>.</li> <li>Retorna: O mesmo de <code>stack:up</code>.</li> </ul>"},{"location":"pt/modules/pulumi/#stackoutputs","title":"<code>stack:outputs()</code>","text":"<p>Recupera os outputs de uma stack implantada.</p> <ul> <li>Retorna:<ul> <li><code>outputs</code> (tabela): Uma tabela Lua com os outputs da stack.</li> <li><code>error</code>: Um objeto de erro se a busca dos outputs falhar.</li> </ul> </li> </ul>"},{"location":"pt/modules/pulumi/#exemplo","title":"Exemplo","text":"<p>Este exemplo mostra um padr\u00e3o comum: implantar uma stack de rede (VPC) e, em seguida, usar seu output (<code>vpcId</code>) para configurar e implantar uma stack de aplica\u00e7\u00e3o.</p> <pre><code>command = function()\n  local pulumi = require(\"pulumi\")\n\n  -- 1. Define a stack da VPC\n  local vpc_stack = pulumi.stack(\"minha-org/vpc/prod\", { workdir = \"./pulumi/vpc\" })\n\n  -- 2. Implanta a VPC\n  log.info(\"Implantando a stack da VPC...\")\n  local vpc_result = vpc_stack:up({ yes = true })\n  if not vpc_result.success then\n    return false, \"A implanta\u00e7\u00e3o da VPC falhou: \" .. vpc_result.stderr\n  end\n\n  -- 3. Obt\u00e9m o ID da VPC de seus outputs\n  log.info(\"Buscando outputs da VPC...\")\n  local vpc_outputs, err = vpc_stack:outputs()\n  if err then\n    return false, \"Falha ao obter os outputs da VPC: \" .. err\n  end\n  local vpc_id = vpc_outputs.vpcId\n\n  -- 4. Define a stack da Aplica\u00e7\u00e3o\n  local app_stack = pulumi.stack(\"minha-org/app/prod\", { workdir = \"./pulumi/app\" })\n\n  -- 5. Implanta a Aplica\u00e7\u00e3o, passando o vpcId como configura\u00e7\u00e3o\n  log.info(\"Implantando a stack da Aplica\u00e7\u00e3o na VPC: \" .. vpc_id)\n  local app_result = app_stack:up({\n    yes = true,\n    config = { [\"my-app:vpcId\"] = vpc_id }\n  })\n  if not app_result.success then\n    return false, \"A implanta\u00e7\u00e3o da Aplica\u00e7\u00e3o falhou: \" .. app_result.stderr\n  end\n\n  log.info(\"Todas as stacks foram implantadas com sucesso.\")\n  return true, \"Orquestra\u00e7\u00e3o com Pulumi completa.\"\nend\n</code></pre>"},{"location":"pt/modules/python/","title":"M\u00f3dulo Python","text":"<p>O m\u00f3dulo <code>python</code> fornece uma maneira conveniente de gerenciar ambientes virtuais Python (<code>venv</code>) e executar scripts de dentro de suas tarefas do <code>sloth-runner</code>. Isso \u00e9 particularmente \u00fatil para fluxos de trabalho que envolvem ferramentas ou scripts baseados em Python.</p>"},{"location":"pt/modules/python/#pythonvenvpath","title":"<code>python.venv(path)</code>","text":"<p>Cria um objeto de ambiente virtual Python. Note que isso apenas cria o objeto em Lua; o ambiente em si n\u00e3o \u00e9 criado no sistema de arquivos at\u00e9 que voc\u00ea chame <code>:create()</code>.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>path</code> (string): O caminho no sistema de arquivos onde o ambiente virtual deve ser criado (ex: <code>./.venv</code>).</li> </ul> </li> <li>Retorna:<ul> <li><code>venv</code> (objeto): Um objeto de ambiente virtual com m\u00e9todos para interagir com ele.</li> </ul> </li> </ul>"},{"location":"pt/modules/python/#venvcreate","title":"<code>venv:create()</code>","text":"<p>Cria o ambiente virtual no sistema de arquivos no caminho especificado.</p> <ul> <li>Retorna:<ul> <li><code>error</code>: Um objeto de erro se a cria\u00e7\u00e3o falhar.</li> </ul> </li> </ul>"},{"location":"pt/modules/python/#venvpipcommand","title":"<code>venv:pip(command)</code>","text":"<p>Executa um comando <code>pip</code> dentro do contexto do ambiente virtual.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>command</code> (string): Os argumentos a serem passados para o <code>pip</code> (ex: <code>install -r requirements.txt</code>).</li> </ul> </li> <li>Retorna:<ul> <li><code>result</code> (tabela): Uma tabela contendo <code>stdout</code>, <code>stderr</code> e <code>exit_code</code> do comando <code>pip</code>.</li> </ul> </li> </ul>"},{"location":"pt/modules/python/#venvexecscript_path","title":"<code>venv:exec(script_path)</code>","text":"<p>Executa um script Python usando o interpretador Python do ambiente virtual.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>script_path</code> (string): O caminho para o script Python a ser executado.</li> </ul> </li> <li>Retorna:<ul> <li><code>result</code> (tabela): Uma tabela contendo <code>stdout</code>, <code>stderr</code> e <code>exit_code</code> da execu\u00e7\u00e3o do script.</li> </ul> </li> </ul>"},{"location":"pt/modules/python/#exemplo","title":"Exemplo","text":"<p>Este exemplo demonstra um ciclo de vida completo: criar um ambiente virtual, instalar depend\u00eancias de um arquivo <code>requirements.txt</code> e executar um script Python.</p> <pre><code>-- examples/python_venv_lifecycle_example.sloth\n\nModern DSLs = {\n  main = {\n    description = \"Uma tarefa para demonstrar o ciclo de vida de um venv Python.\",\n    create_workdir_before_run = true, -- Usa um diret\u00f3rio de trabalho tempor\u00e1rio\n    tasks = {\n      {\n        name = \"run-python-script\",\n        description = \"Cria um venv, instala depend\u00eancias e executa um script.\",\n        command = function(params)\n          local python = require(\"python\")\n          local workdir = params.workdir -- Obt\u00e9m o diret\u00f3rio de trabalho tempor\u00e1rio do grupo\n\n          -- 1. Escreve nosso script Python e depend\u00eancias no workdir\n          fs.write(workdir .. \"/requirements.txt\", \"requests==2.28.1\")\n          fs.write(workdir .. \"/main.py\", \"import requests\\nprint(f'Ol\u00e1 do Python! Usando a vers\u00e3o do requests: {requests.__version__}')\")\n\n          -- 2. Cria um objeto venv\n          local venv_path = workdir .. \"/.venv\"\n          log.info(\"Configurando ambiente virtual em: \" .. venv_path)\n          local venv = python.venv(venv_path)\n\n          -- 3. Cria o venv no sistema de arquivos\n          venv:create()\n\n          -- 4. Instala as depend\u00eancias usando pip\n          log.info(\"Instalando depend\u00eancias do requirements.txt...\")\n          local pip_result = venv:pip(\"install -r \" .. workdir .. \"/requirements.txt\")\n          if pip_result.exit_code ~= 0 then\n            log.error(\"A instala\u00e7\u00e3o com pip falhou: \" .. pip_result.stderr)\n            return false, \"Falha ao instalar depend\u00eancias Python.\"\n          end\n\n          -- 5. Executa o script\n          log.info(\"Executando o script Python...\")\n          local exec_result = venv:exec(workdir .. \"/main.py\")\n          if exec_result.exit_code ~= 0 then\n            log.error(\"O script Python falhou: \" .. exec_result.stderr)\n            return false, \"A execu\u00e7\u00e3o do script Python falhou.\"\n          end\n\n          log.info(\"Script Python executado com sucesso.\")\n          print(\"--- Sa\u00edda do Script Python ---\")\n          print(exec_result.stdout)\n          print(\"----------------------------\")\n\n          return true, \"Ciclo de vida do venv Python completo.\"\n        end\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"pt/modules/salt/","title":"M\u00f3dulo Salt - Completo e Abrangente","text":"<p>O m\u00f3dulo <code>salt</code> fornece uma API completa e abrangente para interagir com o SaltStack, cobrindo 100% das funcionalidades do Salt. Este m\u00f3dulo oferece mais de 200 fun\u00e7\u00f5es que abrangem todas as \u00e1reas principais do SaltStack, desde opera\u00e7\u00f5es b\u00e1sicas at\u00e9 recursos empresariais avan\u00e7ados.</p>"},{"location":"pt/modules/salt/#funcionalidades-principais","title":"\ud83d\ude80 Funcionalidades Principais","text":""},{"location":"pt/modules/salt/#1-execucao-basica-e-controle","title":"1. Execu\u00e7\u00e3o B\u00e1sica e Controle","text":"<ul> <li><code>salt.cmd()</code> - Execu\u00e7\u00e3o de comandos b\u00e1sicos</li> <li><code>salt.run()</code> - Execu\u00e7\u00e3o de runners</li> <li><code>salt.execute()</code> - Execu\u00e7\u00e3o gen\u00e9rica</li> <li><code>salt.batch()</code> - Execu\u00e7\u00e3o em lotes</li> <li><code>salt.async()</code> - Execu\u00e7\u00e3o ass\u00edncrona</li> </ul>"},{"location":"pt/modules/salt/#2-conectividade-e-testes","title":"2. Conectividade e Testes","text":"<ul> <li><code>salt.ping()</code> - Teste de conectividade</li> <li><code>salt.test()</code> - M\u00f3dulo de testes</li> <li><code>salt.version()</code> - Informa\u00e7\u00f5es de vers\u00e3o</li> <li><code>salt.status()</code> - Status do sistema</li> </ul>"},{"location":"pt/modules/salt/#3-gerenciamento-de-chaves","title":"3. Gerenciamento de Chaves","text":"<ul> <li><code>salt.key_list()</code> - Listar chaves</li> <li><code>salt.key_accept()</code> - Aceitar chaves</li> <li><code>salt.key_reject()</code> - Rejeitar chaves</li> <li><code>salt.key_delete()</code> - Deletar chaves</li> <li><code>salt.key_finger()</code> - Impress\u00f5es digitais</li> <li><code>salt.key_gen()</code> - Gerar chaves</li> </ul>"},{"location":"pt/modules/salt/#4-gerenciamento-de-estados","title":"4. Gerenciamento de Estados","text":"<ul> <li><code>salt.state_apply()</code> - Aplicar estados</li> <li><code>salt.state_highstate()</code> - Execu\u00e7\u00e3o completa de estados</li> <li><code>salt.state_test()</code> - Teste de estados</li> <li><code>salt.state_show_sls()</code> - Mostrar SLS</li> <li><code>salt.state_show_top()</code> - Mostrar TOP</li> <li><code>salt.state_show_lowstate()</code> - Mostrar lowstate</li> <li><code>salt.state_single()</code> - Estado \u00fanico</li> <li><code>salt.state_template()</code> - Templates de estado</li> </ul>"},{"location":"pt/modules/salt/#5-gerenciamento-de-grains","title":"5. Gerenciamento de Grains","text":"<ul> <li><code>salt.grains_get()</code> - Obter grains</li> <li><code>salt.grains_set()</code> - Definir grains</li> <li><code>salt.grains_append()</code> - Adicionar a grains</li> <li><code>salt.grains_remove()</code> - Remover de grains</li> <li><code>salt.grains_delkey()</code> - Deletar chave de grain</li> <li><code>salt.grains_items()</code> - Todos os grains</li> </ul>"},{"location":"pt/modules/salt/#6-gerenciamento-de-pillar","title":"6. Gerenciamento de Pillar","text":"<ul> <li><code>salt.pillar_get()</code> - Obter dados do pillar</li> <li><code>salt.pillar_items()</code> - Todos os dados do pillar</li> <li><code>salt.pillar_show()</code> - Mostrar compila\u00e7\u00e3o do pillar</li> <li><code>salt.pillar_refresh()</code> - Atualizar pillar</li> </ul>"},{"location":"pt/modules/salt/#7-operacoes-de-arquivo","title":"7. Opera\u00e7\u00f5es de Arquivo","text":"<ul> <li><code>salt.file_copy()</code> - Copiar arquivos</li> <li><code>salt.file_get()</code> - Obter arquivos</li> <li><code>salt.file_list()</code> - Listar arquivos</li> <li><code>salt.file_manage()</code> - Gerenciar arquivos</li> <li><code>salt.file_recurse()</code> - Opera\u00e7\u00f5es recursivas</li> <li><code>salt.file_touch()</code> - Criar/tocar arquivos</li> <li><code>salt.file_stats()</code> - Estat\u00edsticas de arquivo</li> <li><code>salt.file_find()</code> - Buscar arquivos</li> <li><code>salt.file_replace()</code> - Substituir conte\u00fado</li> <li><code>salt.file_check_hash()</code> - Verificar hash</li> </ul>"},{"location":"pt/modules/salt/#8-gerenciamento-de-pacotes","title":"8. Gerenciamento de Pacotes","text":"<ul> <li><code>salt.pkg_install()</code> - Instalar pacotes</li> <li><code>salt.pkg_remove()</code> - Remover pacotes</li> <li><code>salt.pkg_upgrade()</code> - Atualizar pacotes</li> <li><code>salt.pkg_refresh()</code> - Atualizar reposit\u00f3rios</li> <li><code>salt.pkg_list()</code> - Listar pacotes</li> <li><code>salt.pkg_version()</code> - Vers\u00e3o de pacote</li> <li><code>salt.pkg_available()</code> - Pacotes dispon\u00edveis</li> <li><code>salt.pkg_info()</code> - Informa\u00e7\u00f5es de pacote</li> <li><code>salt.pkg_hold()</code> - Segurar pacote</li> <li><code>salt.pkg_unhold()</code> - Liberar pacote</li> </ul>"},{"location":"pt/modules/salt/#9-gerenciamento-de-servicos","title":"9. Gerenciamento de Servi\u00e7os","text":"<ul> <li><code>salt.service_start()</code> - Iniciar servi\u00e7o</li> <li><code>salt.service_stop()</code> - Parar servi\u00e7o</li> <li><code>salt.service_restart()</code> - Reiniciar servi\u00e7o</li> <li><code>salt.service_reload()</code> - Recarregar servi\u00e7o</li> <li><code>salt.service_status()</code> - Status do servi\u00e7o</li> <li><code>salt.service_enable()</code> - Habilitar servi\u00e7o</li> <li><code>salt.service_disable()</code> - Desabilitar servi\u00e7o</li> <li><code>salt.service_list()</code> - Listar servi\u00e7os</li> </ul>"},{"location":"pt/modules/salt/#10-gerenciamento-de-usuarios","title":"10. Gerenciamento de Usu\u00e1rios","text":"<ul> <li><code>salt.user_add()</code> - Adicionar usu\u00e1rio</li> <li><code>salt.user_delete()</code> - Deletar usu\u00e1rio</li> <li><code>salt.user_info()</code> - Informa\u00e7\u00f5es do usu\u00e1rio</li> <li><code>salt.user_list()</code> - Listar usu\u00e1rios</li> <li><code>salt.user_chuid()</code> - Alterar UID</li> <li><code>salt.user_chgid()</code> - Alterar GID</li> <li><code>salt.user_chshell()</code> - Alterar shell</li> <li><code>salt.user_chhome()</code> - Alterar home</li> <li><code>salt.user_primary_group()</code> - Alterar grupo prim\u00e1rio</li> </ul>"},{"location":"pt/modules/salt/#11-gerenciamento-de-grupos","title":"11. Gerenciamento de Grupos","text":"<ul> <li><code>salt.group_add()</code> - Adicionar grupo</li> <li><code>salt.group_delete()</code> - Deletar grupo</li> <li><code>salt.group_info()</code> - Informa\u00e7\u00f5es do grupo</li> <li><code>salt.group_list()</code> - Listar grupos</li> <li><code>salt.group_adduser()</code> - Adicionar usu\u00e1rio ao grupo</li> <li><code>salt.group_deluser()</code> - Remover usu\u00e1rio do grupo</li> <li><code>salt.group_members()</code> - Membros do grupo</li> </ul>"},{"location":"pt/modules/salt/#12-gerenciamento-de-rede","title":"12. Gerenciamento de Rede","text":"<ul> <li><code>salt.network_interface()</code> - Interface espec\u00edfica</li> <li><code>salt.network_interfaces()</code> - Todas as interfaces</li> <li><code>salt.network_ping()</code> - Ping de rede</li> <li><code>salt.network_traceroute()</code> - Traceroute</li> <li><code>salt.network_netstat()</code> - Estat\u00edsticas de rede</li> <li><code>salt.network_arp()</code> - Tabela ARP</li> </ul>"},{"location":"pt/modules/salt/#13-informacoes-do-sistema","title":"13. Informa\u00e7\u00f5es do Sistema","text":"<ul> <li><code>salt.system_info()</code> - Informa\u00e7\u00f5es completas</li> <li><code>salt.system_uptime()</code> - Tempo de atividade</li> <li><code>salt.system_reboot()</code> - Reiniciar sistema</li> <li><code>salt.system_shutdown()</code> - Desligar sistema</li> <li><code>salt.system_halt()</code> - Parar sistema</li> <li><code>salt.system_hostname()</code> - Nome do host</li> <li><code>salt.system_set_hostname()</code> - Definir hostname</li> </ul>"},{"location":"pt/modules/salt/#14-gerenciamento-de-disco-e-montagem","title":"14. Gerenciamento de Disco e Montagem","text":"<ul> <li><code>salt.disk_usage()</code> - Uso do disco</li> <li><code>salt.disk_stats()</code> - Estat\u00edsticas do disco</li> <li><code>salt.mount_active()</code> - Montagens ativas</li> <li><code>salt.mount_fstab()</code> - Configura\u00e7\u00e3o fstab</li> <li><code>salt.mount_mount()</code> - Montar filesystem</li> <li><code>salt.mount_umount()</code> - Desmontar filesystem</li> <li><code>salt.mount_remount()</code> - Remontar filesystem</li> </ul>"},{"location":"pt/modules/salt/#15-gerenciamento-de-processos","title":"15. Gerenciamento de Processos","text":"<ul> <li><code>salt.process_list()</code> - Listar processos</li> <li><code>salt.process_info()</code> - Informa\u00e7\u00f5es do processo</li> <li><code>salt.process_kill()</code> - Matar processo</li> <li><code>salt.process_killall()</code> - Matar por nome</li> <li><code>salt.process_pkill()</code> - Matar por padr\u00e3o</li> </ul>"},{"location":"pt/modules/salt/#16-gerenciamento-de-cron","title":"16. Gerenciamento de Cron","text":"<ul> <li><code>salt.cron_list()</code> - Listar tarefas cron</li> <li><code>salt.cron_set()</code> - Definir tarefa cron</li> <li><code>salt.cron_delete()</code> - Deletar tarefa cron</li> <li><code>salt.cron_raw_cron()</code> - Cron bruto</li> </ul>"},{"location":"pt/modules/salt/#17-operacoes-de-arquivo","title":"17. Opera\u00e7\u00f5es de Arquivo","text":"<ul> <li><code>salt.archive_gunzip()</code> - Descompactar gzip</li> <li><code>salt.archive_gzip()</code> - Compactar gzip</li> <li><code>salt.archive_tar()</code> - Criar tar</li> <li><code>salt.archive_untar()</code> - Extrair tar</li> <li><code>salt.archive_unzip()</code> - Extrair zip</li> <li><code>salt.archive_zip()</code> - Criar zip</li> </ul>"},{"location":"pt/modules/salt/#18-integracao-salt-cloud","title":"18. Integra\u00e7\u00e3o Salt Cloud","text":"<ul> <li><code>salt.cloud_list_nodes()</code> - Listar n\u00f3s na nuvem</li> <li><code>salt.cloud_create()</code> - Criar inst\u00e2ncia</li> <li><code>salt.cloud_destroy()</code> - Destruir inst\u00e2ncia</li> <li><code>salt.cloud_action()</code> - A\u00e7\u00f5es na nuvem</li> <li><code>salt.cloud_function()</code> - Fun\u00e7\u00f5es da nuvem</li> <li><code>salt.cloud_map()</code> - Mapeamento de nuvem</li> <li><code>salt.cloud_profile()</code> - Perfis de nuvem</li> <li><code>salt.cloud_provider()</code> - Provedores de nuvem</li> </ul>"},{"location":"pt/modules/salt/#19-sistema-de-eventos","title":"19. Sistema de Eventos","text":"<ul> <li><code>salt.event_send()</code> - Enviar evento</li> <li><code>salt.event_listen()</code> - Escutar eventos</li> <li><code>salt.event_fire()</code> - Disparar evento</li> <li><code>salt.event_fire_master()</code> - Evento no master</li> </ul>"},{"location":"pt/modules/salt/#20-orquestracao","title":"20. Orquestra\u00e7\u00e3o","text":"<ul> <li><code>salt.orchestrate()</code> - Orquestra\u00e7\u00e3o de estados</li> <li><code>salt.runner()</code> - Executar runner</li> <li><code>salt.wheel()</code> - M\u00f3dulos wheel</li> </ul>"},{"location":"pt/modules/salt/#21-operacoes-mine","title":"21. Opera\u00e7\u00f5es Mine","text":"<ul> <li><code>salt.mine_get()</code> - Obter dados mine</li> <li><code>salt.mine_send()</code> - Enviar para mine</li> <li><code>salt.mine_update()</code> - Atualizar mine</li> <li><code>salt.mine_delete()</code> - Deletar do mine</li> <li><code>salt.mine_flush()</code> - Limpar mine</li> <li><code>salt.mine_valid()</code> - Validar mine</li> </ul>"},{"location":"pt/modules/salt/#22-gerenciamento-de-jobs","title":"22. Gerenciamento de Jobs","text":"<ul> <li><code>salt.job_active()</code> - Jobs ativos</li> <li><code>salt.job_list()</code> - Listar jobs</li> <li><code>salt.job_lookup()</code> - Buscar job</li> <li><code>salt.job_exit_success()</code> - Sucesso do job</li> <li><code>salt.job_print()</code> - Imprimir job</li> </ul>"},{"location":"pt/modules/salt/#23-integracao-docker","title":"23. Integra\u00e7\u00e3o Docker","text":"<ul> <li><code>salt.docker_ps()</code> - Listar containers</li> <li><code>salt.docker_run()</code> - Executar container</li> <li><code>salt.docker_stop()</code> - Parar container</li> <li><code>salt.docker_start()</code> - Iniciar container</li> <li><code>salt.docker_restart()</code> - Reiniciar container</li> <li><code>salt.docker_build()</code> - Construir imagem</li> <li><code>salt.docker_pull()</code> - Baixar imagem</li> <li><code>salt.docker_push()</code> - Enviar imagem</li> <li><code>salt.docker_images()</code> - Listar imagens</li> <li><code>salt.docker_remove()</code> - Remover container</li> <li><code>salt.docker_inspect()</code> - Inspecionar container</li> <li><code>salt.docker_logs()</code> - Logs do container</li> <li><code>salt.docker_exec()</code> - Executar no container</li> </ul>"},{"location":"pt/modules/salt/#24-operacoes-git","title":"24. Opera\u00e7\u00f5es Git","text":"<ul> <li><code>salt.git_clone()</code> - Clonar reposit\u00f3rio</li> <li><code>salt.git_pull()</code> - Puxar altera\u00e7\u00f5es</li> <li><code>salt.git_checkout()</code> - Checkout branch</li> <li><code>salt.git_add()</code> - Adicionar arquivos</li> <li><code>salt.git_commit()</code> - Fazer commit</li> <li><code>salt.git_push()</code> - Enviar altera\u00e7\u00f5es</li> <li><code>salt.git_status()</code> - Status do reposit\u00f3rio</li> <li><code>salt.git_log()</code> - Log de commits</li> <li><code>salt.git_reset()</code> - Reset do reposit\u00f3rio</li> <li><code>salt.git_remote_get()</code> - Obter remote</li> <li><code>salt.git_remote_set()</code> - Definir remote</li> </ul>"},{"location":"pt/modules/salt/#25-operacoes-de-banco-de-dados","title":"25. Opera\u00e7\u00f5es de Banco de Dados","text":""},{"location":"pt/modules/salt/#mysql","title":"MySQL:","text":"<ul> <li><code>salt.mysql_query()</code> - Executar query</li> <li><code>salt.mysql_db_create()</code> - Criar banco</li> <li><code>salt.mysql_db_remove()</code> - Remover banco</li> <li><code>salt.mysql_user_create()</code> - Criar usu\u00e1rio</li> <li><code>salt.mysql_user_remove()</code> - Remover usu\u00e1rio</li> <li><code>salt.mysql_grant_add()</code> - Adicionar permiss\u00e3o</li> <li><code>salt.mysql_grant_revoke()</code> - Revogar permiss\u00e3o</li> </ul>"},{"location":"pt/modules/salt/#postgresql","title":"PostgreSQL:","text":"<ul> <li><code>salt.postgres_query()</code> - Executar query</li> <li><code>salt.postgres_db_create()</code> - Criar banco</li> <li><code>salt.postgres_db_remove()</code> - Remover banco</li> <li><code>salt.postgres_user_create()</code> - Criar usu\u00e1rio</li> <li><code>salt.postgres_user_remove()</code> - Remover usu\u00e1rio</li> </ul>"},{"location":"pt/modules/salt/#26-monitoramento-e-metricas","title":"26. Monitoramento e M\u00e9tricas","text":"<ul> <li><code>salt.status_loadavg()</code> - Carga m\u00e9dia</li> <li><code>salt.status_cpuinfo()</code> - Informa\u00e7\u00f5es CPU</li> <li><code>salt.status_meminfo()</code> - Informa\u00e7\u00f5es mem\u00f3ria</li> <li><code>salt.status_diskusage()</code> - Uso de disco</li> <li><code>salt.status_netdev()</code> - Dispositivos de rede</li> <li><code>salt.status_w()</code> - Usu\u00e1rios logados</li> <li><code>salt.status_uptime()</code> - Tempo de atividade</li> </ul>"},{"location":"pt/modules/salt/#27-gerenciamento-de-configuracao","title":"27. Gerenciamento de Configura\u00e7\u00e3o","text":"<ul> <li><code>salt.config_get()</code> - Obter configura\u00e7\u00e3o</li> <li><code>salt.config_option()</code> - Op\u00e7\u00f5es de configura\u00e7\u00e3o</li> <li><code>salt.config_valid_fileproto()</code> - Validar protocolo</li> <li><code>salt.config_backup_mode()</code> - Modo de backup</li> </ul>"},{"location":"pt/modules/salt/#28-api-e-integracao-rest","title":"28. API e Integra\u00e7\u00e3o REST","text":"<ul> <li><code>salt.api_client()</code> - Cliente API</li> <li><code>salt.api_login()</code> - Login API</li> <li><code>salt.api_logout()</code> - Logout API</li> <li><code>salt.api_minions()</code> - Minions via API</li> <li><code>salt.api_jobs()</code> - Jobs via API</li> <li><code>salt.api_stats()</code> - Estat\u00edsticas API</li> <li><code>salt.api_events()</code> - Eventos API</li> <li><code>salt.api_hook()</code> - Hooks API</li> </ul>"},{"location":"pt/modules/salt/#29-engines-de-template","title":"29. Engines de Template","text":"<ul> <li><code>salt.template_jinja()</code> - Template Jinja2</li> <li><code>salt.template_yaml()</code> - Template YAML</li> <li><code>salt.template_json()</code> - Template JSON</li> <li><code>salt.template_mako()</code> - Template Mako</li> <li><code>salt.template_py()</code> - Template Python</li> <li><code>salt.template_wempy()</code> - Template Wempy</li> </ul>"},{"location":"pt/modules/salt/#30-logging-e-debug","title":"30. Logging e Debug","text":"<ul> <li><code>salt.log_error()</code> - Log de erro</li> <li><code>salt.log_warning()</code> - Log de aviso</li> <li><code>salt.log_info()</code> - Log informativo</li> <li><code>salt.log_debug()</code> - Log de debug</li> <li><code>salt.debug_mode()</code> - Modo debug</li> <li><code>salt.debug_profile()</code> - Perfil de debug</li> </ul>"},{"location":"pt/modules/salt/#31-suporte-multi-master","title":"31. Suporte Multi-Master","text":"<ul> <li><code>salt.multi_master_setup()</code> - Configurar multi-master</li> <li><code>salt.multi_master_failover()</code> - Failover autom\u00e1tico</li> <li><code>salt.multi_master_status()</code> - Status multi-master</li> </ul>"},{"location":"pt/modules/salt/#32-performance-e-otimizacao","title":"32. Performance e Otimiza\u00e7\u00e3o","text":"<ul> <li><code>salt.performance_profile()</code> - Perfil de performance</li> <li><code>salt.performance_test()</code> - Teste de performance</li> <li><code>salt.performance_benchmark()</code> - Benchmark</li> <li><code>salt.cache_performance()</code> - Performance do cache</li> </ul>"},{"location":"pt/modules/salt/#33-gerenciamento-de-beacons","title":"33. Gerenciamento de Beacons","text":"<ul> <li><code>salt.beacon_list()</code> - Listar beacons</li> <li><code>salt.beacon_add()</code> - Adicionar beacon</li> <li><code>salt.beacon_modify()</code> - Modificar beacon</li> <li><code>salt.beacon_delete()</code> - Deletar beacon</li> <li><code>salt.beacon_enable()</code> - Habilitar beacon</li> <li><code>salt.beacon_disable()</code> - Desabilitar beacon</li> <li><code>salt.beacon_save()</code> - Salvar beacons</li> <li><code>salt.beacon_reset()</code> - Reset beacons</li> </ul>"},{"location":"pt/modules/salt/#34-gerenciamento-de-schedule","title":"34. Gerenciamento de Schedule","text":"<ul> <li><code>salt.schedule_list()</code> - Listar agendamentos</li> <li><code>salt.schedule_add()</code> - Adicionar agendamento</li> <li><code>salt.schedule_modify()</code> - Modificar agendamento</li> <li><code>salt.schedule_delete()</code> - Deletar agendamento</li> <li><code>salt.schedule_enable()</code> - Habilitar schedule</li> <li><code>salt.schedule_disable()</code> - Desabilitar schedule</li> <li><code>salt.schedule_run_job()</code> - Executar job agendado</li> <li><code>salt.schedule_save()</code> - Salvar schedule</li> <li><code>salt.schedule_reload()</code> - Recarregar schedule</li> </ul>"},{"location":"pt/modules/salt/#35-funcionalidades-avancadas","title":"35. Funcionalidades Avan\u00e7adas","text":"<ul> <li>SSH operations (salt-ssh)</li> <li>Proxy minion management</li> <li>Security operations (X.509, Vault)</li> <li>Cache management</li> <li>Reactor system</li> <li>Syndic management</li> <li>Roster management</li> <li>Fileserver operations</li> </ul>"},{"location":"pt/modules/salt/#exemplos-de-uso","title":"\ud83d\udcd6 Exemplos de Uso","text":""},{"location":"pt/modules/salt/#exemplo-basico-conectividade","title":"Exemplo B\u00e1sico - Conectividade","text":"<pre><code>local salt = require(\"salt\")\n\n-- Testar conectividade com todos os minions\nlocal ping_result = salt.ping(\"*\", {timeout = 30})\nif ping_result.success then\n    print(\"Todos os minions est\u00e3o respondendo\")\n    for minion, response in pairs(ping_result.returns) do\n        print(\"Minion:\", minion, \"Status:\", response)\n    end\nend\n</code></pre>"},{"location":"pt/modules/salt/#exemplo-avancado-aplicacao-de-estado","title":"Exemplo Avan\u00e7ado - Aplica\u00e7\u00e3o de Estado","text":"<pre><code>local salt = require(\"salt\")\n\n-- Aplicar estado nginx com configura\u00e7\u00e3o espec\u00edfica\nlocal result = salt.state_apply(\"web*\", \"nginx\", {\n    test = true,  -- Modo de teste\n    pillar = {\n        nginx = {\n            worker_processes = 4,\n            worker_connections = 1024,\n            server_name = \"example.com\"\n        }\n    }\n})\n\nif result.success then\n    print(\"Estado aplicado com sucesso\")\n    print(\"Dura\u00e7\u00e3o:\", result.duration_ms .. \"ms\")\nelse\n    print(\"Erro:\", result.error)\nend\n</code></pre>"},{"location":"pt/modules/salt/#exemplo-enterprise-orquestracao","title":"Exemplo Enterprise - Orquestra\u00e7\u00e3o","text":"<pre><code>local salt = require(\"salt\")\n\n-- Orquestra\u00e7\u00e3o complexa com m\u00faltiplos ambientes\nlocal orchestration = salt.orchestrate(\"deploy.application\", {\n    pillar = {\n        app_version = \"v2.1.0\",\n        environment = \"production\",\n        rollback_version = \"v2.0.5\",\n        health_check_enabled = true,\n        notification_webhook = \"https://hooks.slack.com/...\"\n    }\n})\n\nif orchestration.success then\n    print(\"Orquestra\u00e7\u00e3o completada com sucesso\")\n    -- Verificar jobs relacionados\n    local job_status = salt.job_lookup(orchestration.jid)\n    if job_status.success then\n        print(\"Status detalhado dispon\u00edvel\")\n    end\nelse\n    print(\"Falha na orquestra\u00e7\u00e3o:\", orchestration.error)\nend\n</code></pre>"},{"location":"pt/modules/salt/#exemplo-cloud-gerenciamento-de-infraestrutura","title":"Exemplo Cloud - Gerenciamento de Infraestrutura","text":"<pre><code>local salt = require(\"salt\")\n\n-- Criar inst\u00e2ncias na nuvem\nlocal cloud_result = salt.cloud_create(\"web-profile\", \"web-server-03\")\nif cloud_result.success then\n    print(\"Inst\u00e2ncia criada na nuvem\")\n\n    -- Aguardar minion ficar online\n    time.sleep(30)\n\n    -- Aplicar configura\u00e7\u00e3o inicial\n    local config_result = salt.state_highstate(\"web-server-03\")\n    if config_result.success then\n        print(\"Configura\u00e7\u00e3o inicial aplicada\")\n    end\nend\n</code></pre>"},{"location":"pt/modules/salt/#exemplo-docker-gerenciamento-de-containers","title":"Exemplo Docker - Gerenciamento de Containers","text":"<pre><code>local salt = require(\"salt\")\n\n-- Gerenciamento completo de containers Docker\nlocal docker_ops = {\n    -- Baixar imagem\n    salt.docker_pull(\"docker*\", \"nginx:latest\"),\n\n    -- Executar container\n    salt.docker_run(\"docker*\", \"nginx:latest\", {\n        name = \"web-server\",\n        ports = \"80:80\",\n        detach = true\n    }),\n\n    -- Verificar status\n    salt.docker_ps(\"docker*\"),\n\n    -- Obter logs\n    salt.docker_logs(\"docker*\", \"web-server\")\n}\n\nfor _, result in ipairs(docker_ops) do\n    if result.success then\n        print(\"Opera\u00e7\u00e3o Docker executada com sucesso\")\n    end\nend\n</code></pre>"},{"location":"pt/modules/salt/#recursos-empresariais","title":"\ud83c\udfaf Recursos Empresariais","text":""},{"location":"pt/modules/salt/#high-availability","title":"High Availability","text":"<ul> <li>Multi-master configuration</li> <li>Automatic failover</li> <li>Load balancing</li> <li>Geographic distribution</li> </ul>"},{"location":"pt/modules/salt/#security","title":"Security","text":"<ul> <li>X.509 certificate management</li> <li>Vault integration for secrets</li> <li>Encrypted communication</li> <li>Role-based access control</li> </ul>"},{"location":"pt/modules/salt/#monitoring-observability","title":"Monitoring &amp; Observability","text":"<ul> <li>Real-time metrics collection</li> <li>Performance profiling</li> <li>Event-driven monitoring</li> <li>Custom dashboards</li> </ul>"},{"location":"pt/modules/salt/#automation","title":"Automation","text":"<ul> <li>Event-driven reactions</li> <li>Scheduled tasks</li> <li>Complex orchestration</li> <li>Workflow management</li> </ul>"},{"location":"pt/modules/salt/#cloud-integration","title":"Cloud Integration","text":"<ul> <li>Multi-cloud support</li> <li>Auto-scaling</li> <li>Infrastructure as Code</li> <li>Cost optimization</li> </ul>"},{"location":"pt/modules/salt/#caracteristicas-de-performance","title":"\ud83d\ude80 Caracter\u00edsticas de Performance","text":"<ul> <li>Timeout Management: Controle avan\u00e7ado de timeout por opera\u00e7\u00e3o</li> <li>Retry Logic: Retry exponencial com backoff autom\u00e1tico</li> <li>Batch Processing: Execu\u00e7\u00e3o em lotes para opera\u00e7\u00f5es em larga escala</li> <li>Async Operations: Suporte completo para opera\u00e7\u00f5es ass\u00edncronas</li> <li>Connection Pooling: Pool de conex\u00f5es para melhor performance</li> <li>Caching: Cache inteligente para otimiza\u00e7\u00e3o</li> <li>JSON Parsing: Parse autom\u00e1tico de sa\u00eddas JSON</li> </ul>"},{"location":"pt/modules/salt/#estatisticas-do-modulo","title":"\ud83d\udcca Estat\u00edsticas do M\u00f3dulo","text":"<ul> <li>200+ Fun\u00e7\u00f5es: Cobertura completa de todas as funcionalidades Salt</li> <li>35+ \u00c1reas Funcionais: Desde b\u00e1sico at\u00e9 recursos empresariais avan\u00e7ados</li> <li>100% Compatibilidade: Com todas as vers\u00f5es do SaltStack</li> <li>Enterprise Ready: Recursos para ambiente de produ\u00e7\u00e3o</li> <li>High Performance: Otimizado para opera\u00e7\u00f5es em larga escala</li> <li>Error Resilient: Tratamento abrangente de erros</li> <li>Extensible: F\u00e1cil de estender com novas funcionalidades</li> </ul> <p>Este m\u00f3dulo Salt abrangente fornece todas as ferramentas necess\u00e1rias para gerenciar infraestrutura em qualquer escala, desde pequenos deployments at\u00e9 ambientes empresariais complexos com milhares de minions.</p>"},{"location":"pt/modules/state/","title":"\ud83d\udcbe M\u00f3dulo de Gerenciamento de Estado","text":"<p>O m\u00f3dulo Gerenciamento de Estado fornece capacidades poderosas de estado persistente com opera\u00e7\u00f5es at\u00f4micas, locks distribu\u00eddos e funcionalidade TTL (Time To Live). Todos os dados s\u00e3o armazenados localmente usando SQLite com modo WAL para m\u00e1xima performance e confiabilidade.</p>"},{"location":"pt/modules/state/#recursos-principais","title":"\ud83d\ude80 Recursos Principais","text":"<ul> <li>Persist\u00eancia SQLite: Armazenamento confi\u00e1vel com modo WAL</li> <li>Opera\u00e7\u00f5es At\u00f4micas: Increment, compare-and-swap, append thread-safe</li> <li>Locks Distribu\u00eddos: Se\u00e7\u00f5es cr\u00edticas com timeout autom\u00e1tico</li> <li>TTL (Time To Live): Expira\u00e7\u00e3o autom\u00e1tica de chaves</li> <li>Tipos de Dados: String, number, boolean, table, list</li> <li>Pattern Matching: Busca de chaves com wildcards</li> <li>Limpeza Autom\u00e1tica: Cleanup em background de dados expirados</li> <li>Estat\u00edsticas: M\u00e9tricas de uso e performance</li> </ul>"},{"location":"pt/modules/state/#uso-basico","title":"\ud83d\udccb Uso B\u00e1sico","text":""},{"location":"pt/modules/state/#definindo-e-obtendo-valores","title":"Definindo e Obtendo Valores","text":"<pre><code>-- Definir valores\nstate.set(\"versao_app\", \"v1.2.3\")\nstate.set(\"contador_usuarios\", 1000)\nstate.set(\"configuracao\", {\n    debug = true,\n    max_conexoes = 100\n})\n\n-- Obter valores\nlocal versao = state.get(\"versao_app\")\nlocal contador = state.get(\"contador_usuarios\")\nlocal config = state.get(\"configuracao\")\n\n-- Obter com valor padr\u00e3o\nlocal tema = state.get(\"tema_ui\", \"escuro\")\n\n-- Verificar exist\u00eancia\nif state.exists(\"versao_app\") then\n    log.info(\"Vers\u00e3o da aplica\u00e7\u00e3o est\u00e1 configurada\")\nend\n\n-- Deletar chave\nstate.delete(\"chave_antiga\")\n</code></pre>"},{"location":"pt/modules/state/#ttl-time-to-live","title":"TTL (Time To Live)","text":"<pre><code>-- Definir com TTL (60 segundos)\nstate.set(\"token_sessao\", \"abc123\", 60)\n\n-- Definir TTL para chave existente\nstate.set_ttl(\"sessao_usuario\", 300) -- 5 minutos\n\n-- Verificar TTL restante\nlocal ttl = state.get_ttl(\"token_sessao\")\nlog.info(\"Token expira em \" .. ttl .. \" segundos\")\n</code></pre>"},{"location":"pt/modules/state/#operacoes-atomicas","title":"Opera\u00e7\u00f5es At\u00f4micas","text":"<pre><code>-- Incremento at\u00f4mico\nlocal contador = state.increment(\"visualizacoes_pagina\", 1)\nlocal contador_bulk = state.increment(\"downloads\", 50)\n\n-- Decremento at\u00f4mico  \nlocal restante = state.decrement(\"estoque\", 5)\n\n-- Append de string\nstate.set(\"mensagens_log\", \"Iniciando aplica\u00e7\u00e3o\")\nlocal novo_tamanho = state.append(\"mensagens_log\", \" -&gt; Conectando ao banco\")\n\n-- Compare-and-swap at\u00f4mico\nlocal versao_antiga = state.get(\"versao_config\")\nlocal sucesso = state.compare_swap(\"versao_config\", versao_antiga, versao_antiga + 1)\nif sucesso then\n    log.info(\"Configura\u00e7\u00e3o atualizada com seguran\u00e7a\")\nend\n</code></pre>"},{"location":"pt/modules/state/#operacoes-de-lista","title":"Opera\u00e7\u00f5es de Lista","text":"<pre><code>-- Adicionar itens \u00e0 lista\nstate.list_push(\"fila_deployment\", {\n    app = \"frontend\",\n    versao = \"v2.1.0\",\n    ambiente = \"staging\"\n})\n\n-- Verificar tamanho da lista\nlocal tamanho_fila = state.list_length(\"fila_deployment\")\nlog.info(\"Itens na fila: \" .. tamanho_fila)\n\n-- Processar lista (pop remove \u00faltimo item)\nwhile state.list_length(\"fila_deployment\") &gt; 0 do\n    local deployment = state.list_pop(\"fila_deployment\")\n    log.info(\"Processando deployment: \" .. deployment.app)\n    -- Processar deployment...\nend\n</code></pre>"},{"location":"pt/modules/state/#locks-distribuidos-e-secoes-criticas","title":"Locks Distribu\u00eddos e Se\u00e7\u00f5es Cr\u00edticas","text":"<pre><code>-- Tentar adquirir lock (sem esperar)\nlocal lock_adquirido = state.try_lock(\"lock_deployment\", 30) -- 30 segundos TTL\nif lock_adquirido then\n    -- Trabalho cr\u00edtico\n    state.unlock(\"lock_deployment\")\nend\n\n-- Lock com espera e timeout\nlocal adquirido = state.lock(\"migracao_banco\", 60) -- esperar at\u00e9 60s\nif adquirido then\n    -- Executar migra\u00e7\u00e3o\n    state.unlock(\"migracao_banco\")\nend\n\n-- Se\u00e7\u00e3o cr\u00edtica com gerenciamento autom\u00e1tico de lock\nstate.with_lock(\"secao_critica\", function()\n    log.info(\"Executando opera\u00e7\u00e3o cr\u00edtica...\")\n\n    -- Atualizar contador global\n    local contador = state.increment(\"contador_global\", 1)\n\n    -- Atualizar timestamp\n    state.set(\"ultima_operacao\", os.time())\n\n    log.info(\"Opera\u00e7\u00e3o cr\u00edtica conclu\u00edda - contador: \" .. contador)\n\n    -- Lock \u00e9 liberado automaticamente quando a fun\u00e7\u00e3o retorna\n    return \"operacao_sucesso\"\nend, 15) -- timeout de 15 segundos\n</code></pre>"},{"location":"pt/modules/state/#referencia-da-api","title":"\ud83d\udd0d Refer\u00eancia da API","text":""},{"location":"pt/modules/state/#operacoes-basicas","title":"Opera\u00e7\u00f5es B\u00e1sicas","text":"Fun\u00e7\u00e3o Par\u00e2metros Retorno Descri\u00e7\u00e3o <code>state.set(chave, valor, ttl?)</code> chave: string, valor: any, ttl?: number sucesso: boolean Define um valor com TTL opcional <code>state.get(chave, padrao?)</code> chave: string, padrao?: any valor: any Obt\u00e9m um valor ou retorna o padr\u00e3o <code>state.delete(chave)</code> chave: string sucesso: boolean Remove uma chave <code>state.exists(chave)</code> chave: string existe: boolean Verifica se a chave existe <code>state.clear(padrao?)</code> padrao?: string sucesso: boolean Remove chaves por padr\u00e3o"},{"location":"pt/modules/state/#operacoes-ttl","title":"Opera\u00e7\u00f5es TTL","text":"Fun\u00e7\u00e3o Par\u00e2metros Retorno Descri\u00e7\u00e3o <code>state.set_ttl(chave, segundos)</code> chave: string, segundos: number sucesso: boolean Define TTL para chave existente <code>state.get_ttl(chave)</code> chave: string ttl: number Obt\u00e9m TTL restante (-1 = sem TTL, -2 = n\u00e3o existe)"},{"location":"pt/modules/state/#operacoes-atomicas_1","title":"Opera\u00e7\u00f5es At\u00f4micas","text":"Fun\u00e7\u00e3o Par\u00e2metros Retorno Descri\u00e7\u00e3o <code>state.increment(chave, delta?)</code> chave: string, delta?: number novo_valor: number Incrementa valor atomicamente <code>state.decrement(chave, delta?)</code> chave: string, delta?: number novo_valor: number Decrementa valor atomicamente <code>state.append(chave, valor)</code> chave: string, valor: string novo_tamanho: number Anexa string atomicamente <code>state.compare_swap(chave, antigo, novo)</code> chave: string, antigo: any, novo: any sucesso: boolean Compare-and-swap at\u00f4mico"},{"location":"pt/modules/state/#operacoes-de-lista_1","title":"Opera\u00e7\u00f5es de Lista","text":"Fun\u00e7\u00e3o Par\u00e2metros Retorno Descri\u00e7\u00e3o <code>state.list_push(chave, item)</code> chave: string, item: any tamanho: number Adiciona item ao final da lista <code>state.list_pop(chave)</code> chave: string item: any | nil Remove e retorna \u00faltimo item <code>state.list_length(chave)</code> chave: string tamanho: number Obt\u00e9m tamanho da lista"},{"location":"pt/modules/state/#locks-distribuidos","title":"Locks Distribu\u00eddos","text":"Fun\u00e7\u00e3o Par\u00e2metros Retorno Descri\u00e7\u00e3o <code>state.try_lock(nome, ttl)</code> nome: string, ttl: number sucesso: boolean Tenta adquirir lock sem esperar <code>state.lock(nome, timeout?)</code> nome: string, timeout?: number sucesso: boolean Adquire lock com timeout <code>state.unlock(nome)</code> nome: string sucesso: boolean Libera lock <code>state.with_lock(nome, funcao, timeout?)</code> nome: string, funcao: function, timeout?: number resultado: any Executa fun\u00e7\u00e3o com lock autom\u00e1tico"},{"location":"pt/modules/state/#utilitarios","title":"Utilit\u00e1rios","text":"Fun\u00e7\u00e3o Par\u00e2metros Retorno Descri\u00e7\u00e3o <code>state.keys(padrao?)</code> padrao?: string chaves: table Lista chaves por padr\u00e3o <code>state.stats()</code> - stats: table Obt\u00e9m estat\u00edsticas do sistema"},{"location":"pt/modules/state/#casos-de-uso-praticos","title":"\ud83d\udca1 Casos de Uso Pr\u00e1ticos","text":""},{"location":"pt/modules/state/#1-controle-de-versao-de-deploy","title":"1. Controle de Vers\u00e3o de Deploy","text":"<pre><code>Modern DSLs = {\n    pipeline_deployment = {\n        tasks = {\n            preparar_deploy = {\n                command = function()\n                    -- Verificar \u00faltima vers\u00e3o deployada\n                    local ultima_versao = state.get(\"ultima_versao_deployada\", \"v0.0.0\")\n                    local nova_versao = \"v1.2.3\"\n\n                    -- Verificar se j\u00e1 foi deployada\n                    if ultima_versao == nova_versao then\n                        log.warn(\"Vers\u00e3o \" .. nova_versao .. \" j\u00e1 foi deployada\")\n                        return false, \"Vers\u00e3o j\u00e1 deployada\"\n                    end\n\n                    -- Registrar in\u00edcio do deploy\n                    state.set(\"status_deploy\", \"em_progresso\")\n                    state.set(\"inicio_deploy\", os.time())\n                    state.increment(\"total_deploys\", 1)\n\n                    return true, \"Prepara\u00e7\u00e3o do deploy conclu\u00edda\"\n                end\n            },\n\n            executar_deploy = {\n                depends_on = \"preparar_deploy\",\n                command = function()\n                    -- Se\u00e7\u00e3o cr\u00edtica para deployment\n                    return state.with_lock(\"lock_deployment\", function()\n                        log.info(\"Executando deployment com lock...\")\n\n                        -- Simular deployment\n                        exec.run(\"sleep 5\")\n\n                        -- Atualizar estado\n                        state.set(\"ultima_versao_deployada\", \"v1.2.3\")\n                        state.set(\"status_deploy\", \"concluido\")\n                        state.set(\"fim_deploy\", os.time())\n\n                        -- Registrar hist\u00f3rico\n                        state.list_push(\"historico_deploy\", {\n                            versao = \"v1.2.3\",\n                            timestamp = os.time(),\n                            duracao = state.get(\"fim_deploy\") - state.get(\"inicio_deploy\")\n                        })\n\n                        return true, \"Deploy conclu\u00eddo com sucesso\"\n                    end, 300) -- timeout de 5 minutos\n                end\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"pt/modules/state/#2-cache-inteligente-com-ttl","title":"2. Cache Inteligente com TTL","text":"<pre><code>-- Fun\u00e7\u00e3o helper para cache\nfunction obter_dados_cached(chave_cache, funcao_busca, ttl)\n    local cached = state.get(chave_cache)\n    if cached then\n        log.info(\"Cache hit: \" .. chave_cache)\n        return cached\n    end\n\n    log.info(\"Cache miss: \" .. chave_cache .. \" - buscando...\")\n    local dados = funcao_busca()\n    state.set(chave_cache, dados, ttl or 300) -- 5 minutos padr\u00e3o\n    return dados\nend\n\n-- Uso em tasks\nModern DSLs = {\n    processamento_dados = {\n        tasks = {\n            buscar_dados_usuario = {\n                command = function()\n                    local dados_usuario = obter_dados_cached(\"usuario:123:perfil\", function()\n                        -- Simular busca custosa\n                        return {\n                            nome = \"Alice\",\n                            email = \"alice@exemplo.com\",\n                            preferencias = {\"modo_escuro\", \"notificacoes\"}\n                        }\n                    end, 600) -- Cache por 10 minutos\n\n                    log.info(\"Dados do usu\u00e1rio: \" .. data.to_json(dados_usuario))\n                    return true, \"Dados do usu\u00e1rio obtidos\"\n                end\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"pt/modules/state/#3-rate-limiting","title":"3. Rate Limiting","text":"<pre><code>function verificar_rate_limit(identificador, max_requisicoes, janela_segundos)\n    local chave = \"rate_limit:\" .. identificador\n    local contador_atual = state.get(chave, 0)\n\n    if contador_atual &gt;= max_requisicoes then\n        return false, \"Rate limit excedido\"\n    end\n\n    -- Incrementar contador\n    if contador_atual == 0 then\n        -- Primeira requisi\u00e7\u00e3o na janela\n        state.set(chave, 1, janela_segundos)\n    else\n        -- Incrementar contador existente\n        state.increment(chave, 1)\n    end\n\n    return true, \"Requisi\u00e7\u00e3o permitida\"\nend\n\n-- Uso em tasks\nModern DSLs = {\n    tarefas_api = {\n        tasks = {\n            fazer_chamada_api = {\n                command = function()\n                    local permitido, msg = verificar_rate_limit(\"chamadas_api\", 100, 3600) -- 100 chamadas/hora\n\n                    if not permitido then\n                        log.error(msg)\n                        return false, msg\n                    end\n\n                    -- Fazer chamada da API\n                    log.info(\"Fazendo chamada da API...\")\n                    return true, \"Chamada da API conclu\u00edda\"\n                end\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"pt/modules/state/#configuracao-e-armazenamento","title":"\u2699\ufe0f Configura\u00e7\u00e3o e Armazenamento","text":""},{"location":"pt/modules/state/#localizacao-do-banco-de-dados","title":"Localiza\u00e7\u00e3o do Banco de Dados","text":"<p>Por padr\u00e3o, o banco de dados SQLite \u00e9 criado em: - Linux/macOS: <code>~/.sloth-runner/state.db</code> - Windows: <code>%USERPROFILE%\\.sloth-runner\\state.db</code></p>"},{"location":"pt/modules/state/#caracteristicas-tecnicas","title":"Caracter\u00edsticas T\u00e9cnicas","text":"<ul> <li>Engine: SQLite 3 com modo WAL</li> <li>Acesso Concorrente: Suporte a m\u00faltiplas conex\u00f5es simult\u00e2neas</li> <li>Limpeza Autom\u00e1tica: Limpeza autom\u00e1tica de dados expirados a cada 5 minutos</li> <li>Timeout de Lock: Locks expirados s\u00e3o limpos automaticamente</li> <li>Serializa\u00e7\u00e3o: JSON para objetos complexos, formato nativo para tipos simples</li> </ul>"},{"location":"pt/modules/state/#limitacoes","title":"Limita\u00e7\u00f5es","text":"<ul> <li>Escopo Local: Estado \u00e9 persistido apenas na m\u00e1quina local</li> <li>Concorr\u00eancia: Locks s\u00e3o efetivos apenas no processo local</li> <li>Tamanho: Adequado para datasets pequenos a m\u00e9dios (&lt; 1GB)</li> </ul>"},{"location":"pt/modules/state/#melhores-praticas","title":"\ud83d\udd04 Melhores Pr\u00e1ticas","text":"<ol> <li>Use TTL para dados tempor\u00e1rios para evitar crescimento desnecess\u00e1rio</li> <li>Use locks para se\u00e7\u00f5es cr\u00edticas para evitar condi\u00e7\u00f5es de corrida</li> <li>Use padr\u00f5es para opera\u00e7\u00f5es em lote para gerenciar chaves relacionadas</li> <li>Monitore o tamanho do armazenamento usando <code>state.stats()</code></li> <li>Use opera\u00e7\u00f5es at\u00f4micas em vez de padr\u00f5es read-modify-write</li> <li>Limpe chaves expiradas regularmente com <code>state.clear(padrao)</code></li> </ol> <p>O m\u00f3dulo Gerenciamento de Estado transforma o sloth-runner em uma plataforma stateful e confi\u00e1vel para orquestra\u00e7\u00e3o complexa de tarefas! \ud83d\ude80</p>"},{"location":"pt/modules/systemd/","title":"\u2699\ufe0f M\u00f3dulo Systemd","text":"<p>O m\u00f3dulo <code>systemd</code> fornece funcionalidades abrangentes de gerenciamento de servi\u00e7os systemd para sistemas Linux. Permite criar, gerenciar e monitorar servi\u00e7os systemd programaticamente.</p>"},{"location":"pt/modules/systemd/#visao-geral","title":"\ud83c\udfaf Vis\u00e3o Geral","text":"<p>O m\u00f3dulo systemd permite: - Criar e configurar arquivos de servi\u00e7o systemd - Iniciar, parar, reiniciar e recarregar servi\u00e7os - Habilitar e desabilitar servi\u00e7os - Verificar status e atividade de servi\u00e7os - Listar todos os servi\u00e7os - Gerenciar configura\u00e7\u00e3o do daemon systemd</p>"},{"location":"pt/modules/systemd/#visao-geral-das-funcoes","title":"\ud83d\udcda Vis\u00e3o Geral das Fun\u00e7\u00f5es","text":"Fun\u00e7\u00e3o Descri\u00e7\u00e3o <code>systemd.create_service(nome, config)</code> Criar novo servi\u00e7o systemd <code>systemd.start(servico)</code> Iniciar um servi\u00e7o <code>systemd.stop(servico)</code> Parar um servi\u00e7o <code>systemd.restart(servico)</code> Reiniciar um servi\u00e7o <code>systemd.reload(servico)</code> Recarregar um servi\u00e7o <code>systemd.enable(servico)</code> Habilitar no boot <code>systemd.disable(servico)</code> Desabilitar do boot <code>systemd.status(servico)</code> Obter status do servi\u00e7o <code>systemd.is_active(servico)</code> Verificar se est\u00e1 ativo <code>systemd.is_enabled(servico)</code> Verificar se est\u00e1 habilitado <code>systemd.daemon_reload()</code> Recarregar daemon <code>systemd.remove_service(servico)</code> Remover um servi\u00e7o <code>systemd.list_services(opts)</code> Listar todos os servi\u00e7os <code>systemd.show(servico)</code> Mostrar info detalhada"},{"location":"pt/modules/systemd/#documentacao-detalhada","title":"\ud83d\udcd6 Documenta\u00e7\u00e3o Detalhada","text":""},{"location":"pt/modules/systemd/#criacao-de-servicos","title":"Cria\u00e7\u00e3o de Servi\u00e7os","text":""},{"location":"pt/modules/systemd/#systemdcreate_servicenome-config","title":"<code>systemd.create_service(nome, config)</code>","text":"<p>Cria um novo arquivo de servi\u00e7o systemd em <code>/etc/systemd/system/{nome}.service</code>.</p> <p>Par\u00e2metros: - <code>nome</code> (string): Nome do servi\u00e7o (sem extens\u00e3o .service) - <code>config</code> (table): Configura\u00e7\u00e3o do servi\u00e7o</p> <p>Op\u00e7\u00f5es de Configura\u00e7\u00e3o:</p> <pre><code>{\n    -- Se\u00e7\u00e3o [Unit]\n    description = \"Descri\u00e7\u00e3o do servi\u00e7o\",\n    after = \"network.target\",\n    wants = \"outro.service\",\n    requires = \"necessario.service\",\n\n    -- Se\u00e7\u00e3o [Service] (obrigat\u00f3rio)\n    exec_start = \"/caminho/para/executavel\",\n    exec_stop = \"/caminho/para/script/parada\",\n    exec_reload = \"/caminho/para/script/recarga\",\n    type = \"simple\",  -- simple, forking, oneshot, dbus, notify, idle\n    user = \"usuario\",\n    group = \"grupo\",\n    working_directory = \"/caminho/para/diretorio\",\n    restart = \"always\",  -- no, on-success, on-failure, on-abnormal, on-abort, always\n    restart_sec = \"5s\",\n    environment = {\n        VAR1 = \"valor1\",\n        VAR2 = \"valor2\"\n    },\n\n    -- Se\u00e7\u00e3o [Install]\n    wanted_by = \"multi-user.target\"\n}\n</code></pre> <p>Retorna: - <code>sucesso</code> (boolean): <code>true</code> se o servi\u00e7o foi criado - <code>mensagem</code> (string): Mensagem de resultado</p> <p>Exemplos:</p> DSL ModernoCom delegate_to <pre><code>local systemd = require(\"systemd\")\n\nlocal criar_servico_web = task(\"criar_servico_web\")\n    :description(\"Criar servi\u00e7o de aplica\u00e7\u00e3o web\")\n    :command(function(this, params)\n        log.info(\"Criando servi\u00e7o web...\")\n\n        local config = {\n            description = \"Servidor de Aplica\u00e7\u00e3o Web\",\n            after = \"network.target\",\n            exec_start = \"/usr/bin/node /app/server.js\",\n            type = \"simple\",\n            user = \"webapp\",\n            working_directory = \"/app\",\n            restart = \"always\",\n            restart_sec = \"10s\",\n            environment = {\n                NODE_ENV = \"production\",\n                PORT = \"3000\"\n            }\n        }\n\n        local sucesso, msg = systemd.create_service(\"webapp\", config)\n\n        if sucesso then\n            log.info(\"\u2705 Servi\u00e7o criado!\")\n            systemd.daemon_reload()\n            systemd.enable(\"webapp\")\n            systemd.start(\"webapp\")\n            return true, \"Servi\u00e7o implantado\"\n        else\n            log.error(\"\u274c Falha: \" .. msg)\n            return false, msg\n        end\n    end)\n    :timeout(\"60s\")\n    :build()\n\nworkflow.define(\"implantar_servico\")\n    :tasks({ criar_servico_web })\n</code></pre> <pre><code>local systemd = require(\"systemd\")\n\nlocal implantar_servico_remoto = task(\"implantar_servico_remoto\")\n    :description(\"Implantar servi\u00e7o no agente remoto\")\n    :command(function(this, params)\n        local config = {\n            description = \"Agente de Monitoramento Remoto\",\n            after = \"network.target\",\n            exec_start = \"/opt/monitor/agent\",\n            type = \"simple\",\n            user = \"monitor\",\n            restart = \"always\"\n        }\n\n        local sucesso, msg = systemd.create_service(\"monitor-agent\", config)\n\n        if sucesso then\n            systemd.daemon_reload()\n            systemd.enable(\"monitor-agent\")\n            systemd.start(\"monitor-agent\")\n            log.info(\"\u2705 Implantado em \" .. (this.agent or \"local\"))\n            return true, \"OK\"\n        end\n\n        return false, \"Falhou\"\n    end)\n    :delegate_to(\"servidor-producao\")\n    :timeout(\"60s\")\n    :build()\n\nworkflow.define(\"implantacao_remota\")\n    :tasks({ implantar_servico_remoto })\n</code></pre>"},{"location":"pt/modules/systemd/#controle-de-servicos","title":"Controle de Servi\u00e7os","text":""},{"location":"pt/modules/systemd/#systemdstartservico","title":"<code>systemd.start(servico)</code>","text":"<p>Inicia um servi\u00e7o systemd.</p> <p>Exemplo: <pre><code>local sucesso, saida = systemd.start(\"nginx\")\nif sucesso then\n    log.info(\"\u2705 Nginx iniciado\")\nend\n</code></pre></p>"},{"location":"pt/modules/systemd/#systemdstopservico","title":"<code>systemd.stop(servico)</code>","text":"<p>Para um servi\u00e7o systemd.</p>"},{"location":"pt/modules/systemd/#systemdrestartservico","title":"<code>systemd.restart(servico)</code>","text":"<p>Reinicia um servi\u00e7o systemd.</p>"},{"location":"pt/modules/systemd/#systemdreloadservico","title":"<code>systemd.reload(servico)</code>","text":"<p>Recarrega configura\u00e7\u00e3o sem reiniciar.</p>"},{"location":"pt/modules/systemd/#status-do-servico","title":"Status do Servi\u00e7o","text":""},{"location":"pt/modules/systemd/#systemdstatusservico","title":"<code>systemd.status(servico)</code>","text":"<p>Obt\u00e9m status detalhado de um servi\u00e7o.</p> <p>Exemplo: <pre><code>local status, err = systemd.status(\"nginx\")\nlog.info(\"Status:\\n\" .. status)\n</code></pre></p>"},{"location":"pt/modules/systemd/#systemdis_activeservico","title":"<code>systemd.is_active(servico)</code>","text":"<p>Verifica se um servi\u00e7o est\u00e1 ativo/rodando.</p> <p>Retorna: - <code>ativo</code> (boolean): <code>true</code> se ativo - <code>estado</code> (string): Estado do servi\u00e7o</p> <p>Exemplo: <pre><code>local ativo, estado = systemd.is_active(\"nginx\")\nif ativo then\n    log.info(\"\u2705 Servi\u00e7o est\u00e1 rodando\")\nelse\n    log.warn(\"\u274c Servi\u00e7o est\u00e1 \" .. estado)\nend\n</code></pre></p>"},{"location":"pt/modules/systemd/#systemdis_enabledservico","title":"<code>systemd.is_enabled(servico)</code>","text":"<p>Verifica se um servi\u00e7o est\u00e1 habilitado para iniciar no boot.</p> <p>Exemplo: <pre><code>local habilitado, estado = systemd.is_enabled(\"nginx\")\n</code></pre></p>"},{"location":"pt/modules/systemd/#gerenciamento-de-servicos","title":"Gerenciamento de Servi\u00e7os","text":""},{"location":"pt/modules/systemd/#systemdenableservico","title":"<code>systemd.enable(servico)</code>","text":"<p>Habilita um servi\u00e7o para iniciar automaticamente no boot.</p>"},{"location":"pt/modules/systemd/#systemddisableservico","title":"<code>systemd.disable(servico)</code>","text":"<p>Desabilita um servi\u00e7o do boot.</p>"},{"location":"pt/modules/systemd/#systemddaemon_reload","title":"<code>systemd.daemon_reload()</code>","text":"<p>Recarrega configura\u00e7\u00e3o do daemon. Necess\u00e1rio ap\u00f3s criar ou modificar arquivos de servi\u00e7o.</p>"},{"location":"pt/modules/systemd/#systemdremove_serviceservico","title":"<code>systemd.remove_service(servico)</code>","text":"<p>Remove completamente um servi\u00e7o (para, desabilita e deleta o arquivo).</p>"},{"location":"pt/modules/systemd/#informacoes-de-servicos","title":"Informa\u00e7\u00f5es de Servi\u00e7os","text":""},{"location":"pt/modules/systemd/#systemdlist_servicesopcoes","title":"<code>systemd.list_services(opcoes)</code>","text":"<p>Lista servi\u00e7os systemd com filtros opcionais.</p> <p>Par\u00e2metros: - <code>opcoes</code> (table, opcional): Op\u00e7\u00f5es de filtro   - <code>state</code>: Filtrar por estado (ex: \"active\", \"failed\", \"inactive\")   - <code>no_header</code>: Boolean, excluir cabe\u00e7alho</p> <p>Exemplo: <pre><code>-- Listar todos os servi\u00e7os\nlocal lista, err = systemd.list_services()\n\n-- Listar apenas ativos\nlocal ativos, err = systemd.list_services({ state = \"active\" })\n\n-- Listar falhados sem cabe\u00e7alho\nlocal falhados, err = systemd.list_services({ \n    state = \"failed\", \n    no_header = true \n})\n</code></pre></p>"},{"location":"pt/modules/systemd/#systemdshowservico","title":"<code>systemd.show(servico)</code>","text":"<p>Mostra propriedades detalhadas de um servi\u00e7o.</p>"},{"location":"pt/modules/systemd/#exemplos-completos","title":"\ud83c\udfaf Exemplos Completos","text":""},{"location":"pt/modules/systemd/#implantacao-de-aplicacao-web","title":"Implanta\u00e7\u00e3o de Aplica\u00e7\u00e3o Web","text":"<pre><code>local systemd = require(\"systemd\")\n\nlocal implantar_webapp = task(\"implantar_webapp\")\n    :description(\"Implantar e configurar aplica\u00e7\u00e3o web\")\n    :command(function(this, params)\n        log.info(\"\ud83d\ude80 Implantando aplica\u00e7\u00e3o web...\")\n\n        local config = {\n            description = \"Aplica\u00e7\u00e3o Web Node.js\",\n            after = \"network.target postgresql.service\",\n            requires = \"postgresql.service\",\n            exec_start = \"/usr/bin/node /var/www/app/server.js\",\n            type = \"simple\",\n            user = \"webapp\",\n            working_directory = \"/var/www/app\",\n            restart = \"always\",\n            environment = {\n                NODE_ENV = \"production\",\n                PORT = \"3000\"\n            }\n        }\n\n        local sucesso, msg = systemd.create_service(\"webapp\", config)\n        if not sucesso then\n            return false, \"Falha ao criar servi\u00e7o: \" .. msg\n        end\n\n        systemd.daemon_reload()\n        systemd.enable(\"webapp\")\n        systemd.start(\"webapp\")\n\n        local ativo, estado = systemd.is_active(\"webapp\")\n        if ativo then\n            log.info(\"\u2705 Servi\u00e7o rodando!\")\n            return true, \"Implanta\u00e7\u00e3o bem-sucedida\"\n        else\n            return false, \"Servi\u00e7o n\u00e3o iniciou\"\n        end\n    end)\n    :timeout(\"120s\")\n    :build()\n\nworkflow.define(\"implantar\")\n    :tasks({ implantar_webapp })\n</code></pre>"},{"location":"pt/modules/systemd/#verificacao-de-saude","title":"Verifica\u00e7\u00e3o de Sa\u00fade","text":"<pre><code>local systemd = require(\"systemd\")\n\nlocal verificacao_saude = task(\"verificacao_saude\")\n    :description(\"Verificar sa\u00fade dos servi\u00e7os cr\u00edticos\")\n    :command(function(this, params)\n        log.info(\"\ud83d\udd0d Verifica\u00e7\u00e3o de Sa\u00fade...\")\n\n        local servicos = {\"nginx\", \"postgresql\", \"redis\"}\n        local todos_saudaveis = true\n\n        for _, servico in ipairs(servicos) do\n            local ativo, estado = systemd.is_active(servico)\n\n            log.info(\"\\n\ud83d\udce6 \" .. servico .. \":\")\n            log.info(\"  Ativo: \" .. (ativo and \"\u2705 SIM\" or \"\u274c N\u00c3O\"))\n\n            if not ativo then\n                todos_saudaveis = false\n            end\n        end\n\n        if todos_saudaveis then\n            return true, \"Todos OK\"\n        else\n            return false, \"Servi\u00e7os inoperantes\"\n        end\n    end)\n    :timeout(\"60s\")\n    :build()\n\nworkflow.define(\"verificar_saude\")\n    :tasks({ verificacao_saude })\n</code></pre>"},{"location":"pt/modules/systemd/#gerenciamento-distribuido","title":"Gerenciamento Distribu\u00eddo","text":"<pre><code>local systemd = require(\"systemd\")\n\nlocal reiniciar_todos_servidores = task(\"reiniciar_nginx\")\n    :description(\"Reiniciar nginx em todos os servidores\")\n    :command(function(this, params)\n        log.info(\"\ud83d\udd04 Reiniciando nginx...\")\n\n        local sucesso, saida = systemd.restart(\"nginx\")\n\n        if sucesso then\n            local ativo, estado = systemd.is_active(\"nginx\")\n            if ativo then\n                log.info(\"\u2705 Nginx reiniciado\")\n                return true, \"OK\"\n            end\n        end\n\n        return false, \"Falha\"\n    end)\n    :delegate_to(\"servidor-web-1\")\n    :timeout(\"60s\")\n    :build()\n\nworkflow.define(\"reinicio_escalonado\")\n    :tasks({ reiniciar_todos_servidores })\n</code></pre>"},{"location":"pt/modules/systemd/#melhores-praticas","title":"\ud83d\ude80 Melhores Pr\u00e1ticas","text":"<ol> <li> <p>Sempre recarregue daemon ap\u00f3s criar/modificar: <pre><code>systemd.create_service(\"meuservico\", config)\nsystemd.daemon_reload()\n</code></pre></p> </li> <li> <p>Verifique se iniciou com sucesso: <pre><code>systemd.start(\"meuservico\")\nlocal ativo, estado = systemd.is_active(\"meuservico\")\n</code></pre></p> </li> <li> <p>Habilite servi\u00e7os para persist\u00eancia: <pre><code>systemd.enable(\"meuservico\")\n</code></pre></p> </li> <li> <p>Use tipos de servi\u00e7o apropriados:</p> </li> <li><code>simple</code>: Padr\u00e3o, processo n\u00e3o faz fork</li> <li><code>forking</code>: Processo faz fork e pai sai</li> <li> <p><code>oneshot</code>: Processo sai antes do systemd continuar</p> </li> <li> <p>Configure pol\u00edticas de rein\u00edcio: <pre><code>restart = \"always\"\nrestart_sec = \"10s\"\n</code></pre></p> </li> </ol>"},{"location":"pt/modules/systemd/#consideracoes-de-seguranca","title":"\u26a0\ufe0f Considera\u00e7\u00f5es de Seguran\u00e7a","text":"<ul> <li>Arquivos criados em <code>/etc/systemd/system/</code> (requer root/sudo)</li> <li>Sempre especifique <code>user</code> e <code>group</code></li> <li>Use <code>WorkingDirectory</code> para isolar ambiente</li> <li>Valide vari\u00e1veis de ambiente</li> <li>Use permiss\u00f5es apropriadas (0644)</li> </ul>"},{"location":"pt/modules/systemd/#suporte-de-plataforma","title":"\ud83d\udc27 Suporte de Plataforma","text":"<ul> <li>Linux: \u2705 Suporte completo</li> <li>Ubuntu/Debian: \u2705 Suportado</li> <li>CentOS/RHEL: \u2705 Suportado</li> <li>Fedora: \u2705 Suportado</li> <li>Arch Linux: \u2705 Suportado</li> <li>macOS: \u274c N\u00e3o suportado</li> <li>Windows: \u274c N\u00e3o suportado</li> </ul>"},{"location":"pt/modules/systemd/#veja-tambem","title":"\ud83d\udd17 Veja Tamb\u00e9m","text":"<ul> <li>M\u00f3dulo exec</li> <li>Guia DSL Moderno</li> <li>Agentes Distribu\u00eddos</li> </ul>"},{"location":"pt/modules/terraform/","title":"M\u00f3dulo Terraform","text":"<p>O m\u00f3dulo <code>terraform</code> fornece uma interface de alto n\u00edvel para orquestrar comandos da CLI <code>terraform</code>, permitindo que voc\u00ea gerencie o ciclo de vida de sua infraestrutura diretamente de dentro de uma pipeline do Sloth-Runner.</p>"},{"location":"pt/modules/terraform/#configuracao","title":"Configura\u00e7\u00e3o","text":"<p>Este m\u00f3dulo requer que a CLI <code>terraform</code> esteja instalada e dispon\u00edvel no PATH do sistema. Todos os comandos devem ser executados dentro de um <code>workdir</code> espec\u00edfico onde seus arquivos <code>.tf</code> est\u00e3o localizados.</p>"},{"location":"pt/modules/terraform/#funcoes","title":"Fun\u00e7\u00f5es","text":""},{"location":"pt/modules/terraform/#terraforminitparams","title":"<code>terraform.init(params)</code>","text":"<p>Inicializa um diret\u00f3rio de trabalho do Terraform.</p> <ul> <li><code>params</code> (tabela):<ul> <li><code>workdir</code> (string): Obrigat\u00f3rio. O caminho para o diret\u00f3rio que cont\u00e9m os arquivos do Terraform.</li> </ul> </li> <li>Retorna: Uma tabela de resultados com <code>success</code>, <code>stdout</code>, <code>stderr</code> e <code>exit_code</code>.</li> </ul>"},{"location":"pt/modules/terraform/#terraformplanparams","title":"<code>terraform.plan(params)</code>","text":"<p>Cria um plano de execu\u00e7\u00e3o do Terraform.</p> <ul> <li><code>params</code> (tabela):<ul> <li><code>workdir</code> (string): Obrigat\u00f3rio. O caminho para o diret\u00f3rio.</li> <li><code>out</code> (string): Opcional. O nome do arquivo para salvar o plano gerado.</li> </ul> </li> <li>Retorna: Uma tabela de resultados.</li> </ul>"},{"location":"pt/modules/terraform/#terraformapplyparams","title":"<code>terraform.apply(params)</code>","text":"<p>Aplica um plano do Terraform.</p> <ul> <li><code>params</code> (tabela):<ul> <li><code>workdir</code> (string): Obrigat\u00f3rio. O caminho para o diret\u00f3rio.</li> <li><code>plan</code> (string): Opcional. O caminho para um arquivo de plano a ser aplicado.</li> <li><code>auto_approve</code> (boolean): Opcional. Se <code>true</code>, aplica as altera\u00e7\u00f5es sem aprova\u00e7\u00e3o interativa.</li> </ul> </li> <li>Retorna: Uma tabela de resultados.</li> </ul>"},{"location":"pt/modules/terraform/#terraformdestroyparams","title":"<code>terraform.destroy(params)</code>","text":"<p>Destr\u00f3i a infraestrutura gerenciada pelo Terraform.</p> <ul> <li><code>params</code> (tabela):<ul> <li><code>workdir</code> (string): Obrigat\u00f3rio. O caminho para o diret\u00f3rio.</li> <li><code>auto_approve</code> (boolean): Opcional. Se <code>true</code>, destr\u00f3i os recursos sem aprova\u00e7\u00e3o interativa.</li> </ul> </li> <li>Retorna: Uma tabela de resultados.</li> </ul>"},{"location":"pt/modules/terraform/#terraformoutputparams","title":"<code>terraform.output(params)</code>","text":"<p>L\u00ea uma vari\u00e1vel de sa\u00edda de um arquivo de estado do Terraform.</p> <ul> <li><code>params</code> (tabela):<ul> <li><code>workdir</code> (string): Obrigat\u00f3rio. O caminho para o diret\u00f3rio.</li> <li><code>name</code> (string): Opcional. O nome de uma sa\u00edda espec\u00edfica para ler. Se omitido, todas as sa\u00eddas s\u00e3o retornadas como uma tabela.</li> </ul> </li> <li>Retorna:<ul> <li>Em caso de sucesso: O valor JSON analisado da sa\u00edda (pode ser uma string, tabela, etc.).</li> <li>Em caso de falha: <code>nil, error_message</code>.</li> </ul> </li> </ul>"},{"location":"pt/modules/terraform/#exemplo-de-ciclo-de-vida-completo","title":"Exemplo de Ciclo de Vida Completo","text":"<pre><code>local tf_workdir = \"./examples/terraform\"\n\n-- Tarefa 1: Init\nlocal result_init = terraform.init({workdir = tf_workdir})\nif not result_init.success then return false, \"Init falhou\" end\n\n-- Tarefa 2: Plan\nlocal result_plan = terraform.plan({workdir = tf_workdir})\nif not result_plan.success then return false, \"Plan falhou\" end\n\n-- Tarefa 3: Apply\nlocal result_apply = terraform.apply({workdir = tf_workdir, auto_approve = true})\nif not result_apply.success then return false, \"Apply falhou\" end\n\n-- Tarefa 4: Get Output\nlocal filename, err = terraform.output({workdir = tf_workdir, name = \"report_filename\"})\nif not filename then return false, \"Output falhou: \" .. err end\nlog.info(\"Arquivo criado pelo Terraform: \" .. filename)\n\n-- Tarefa 5: Destroy\nlocal result_destroy = terraform.destroy({workdir = tf_workdir, auto_approve = true})\nif not result_destroy.success then return false, \"Destroy falhou\" end\n</code></pre>"},{"location":"zh/","title":"Sloth-Runner \u6587\u6863","text":"<p>\u6b22\u8fce\u6765\u5230 Sloth-Runner \u7684\u5b8c\u6574\u6587\u6863\uff0c\u8fd9\u662f\u4e00\u4e2a\u7075\u6d3b\u7684\u5de5\u5177\uff0c\u7528\u4e8e\u4f7f\u7528 Lua \u811a\u672c\u8fdb\u884c\u4efb\u52a1\u81ea\u52a8\u5316\u548c\u5de5\u4f5c\u6d41\u7f16\u6392\u3002</p> <p>\u5728\u8fd9\u91cc\uff0c\u60a8\u5c06\u627e\u5230\u8be6\u7ec6\u7684\u6307\u5357\u3001API \u53c2\u8003\u548c\u5b9e\u7528\u793a\u4f8b\uff0c\u4ee5\u5e2e\u52a9\u60a8\u5145\u5206\u5229\u7528 Sloth-Runner \u7684\u5f3a\u5927\u529f\u80fd\u3002</p>"},{"location":"zh/#_1","title":"\u76ee\u5f55","text":"<ul> <li>\u4efb\u52a1\u8c03\u5ea6\u5668</li> <li>\u5feb\u901f\u5165\u95e8</li> <li>\u6838\u5fc3\u6982\u5ff5</li> <li>\u5206\u5e03\u5f0f\u4efb\u52a1\u6267\u884c</li> <li>CLI \u547d\u4ee4</li> <li>\u4ea4\u4e92\u5f0f REPL</li> <li>\u5185\u7f6e\u6a21\u5757\uff1a<ul> <li>AWS \u6a21\u5757</li> <li>Azure \u6a21\u5757</li> <li>Data \u6a21\u5757</li> <li>DigitalOcean \u6a21\u5757</li> <li>Docker \u6a21\u5757</li> <li>Exec \u6a21\u5757</li> <li>FS \u6a21\u5757</li> <li>GCP \u6a21\u5757</li> <li>Git \u6a21\u5757</li> <li>Log \u6a21\u5757</li> <li>Net \u6a21\u5757</li> <li>\u901a\u77e5\u6a21\u5757</li> <li>Pulumi \u6a21\u5757</li> <li>Python \u6a21\u5757</li> <li>Salt \u6a21\u5757</li> <li>Terraform \u6a21\u5757</li> </ul> </li> <li>\u9ad8\u7ea7\u793a\u4f8b</li> <li>\u9ad8\u7ea7\u529f\u80fd</li> </ul> <p>English | Portugu\u00eas | \u4e2d\u6587</p>"},{"location":"zh/CLI/","title":"\ud83d\ude80 Sloth Runner CLI Reference","text":"<p>Complete command-line interface reference for Sloth Runner - the AI-powered GitOps task orchestration platform.</p>"},{"location":"zh/CLI/#overview","title":"Overview","text":"<p>Sloth Runner provides a comprehensive CLI for task execution, agent management, scheduling, and workflow orchestration.</p> <p>Main Commands:</p> <pre><code>sloth-runner [command] [flags]\n</code></pre> Command Description <code>run</code> Execute tasks from workflow files <code>agent</code> Manage distributed agents <code>master</code> Start the master coordination server <code>scheduler</code> Manage scheduled tasks <code>stack</code> Manage workflow stacks and state <code>ui</code> Start the web dashboard <code>workflow</code> Create and manage workflows <code>list</code> List tasks from workflow files <code>version</code> Show version information"},{"location":"zh/CLI/#sloth-runner-run","title":"<code>sloth-runner run</code>","text":"<p>Execute tasks defined in <code>.sloth</code> workflow files with multiple output formats and state persistence.</p>"},{"location":"zh/CLI/#usage","title":"Usage","text":"<pre><code>sloth-runner run [file.sloth|stack-name] [flags]\n</code></pre>"},{"location":"zh/CLI/#flags","title":"Flags","text":"Flag Type Description <code>-f, --file</code> string Path to the Lua/Sloth task file <code>-o, --output</code> string Output style: <code>basic</code>, <code>enhanced</code>, <code>rich</code>, <code>modern</code>, <code>json</code> (default: <code>basic</code>) <code>-v, --values</code> string Path to values file (YAML/JSON) for parameterization <code>--interactive</code> bool Run in interactive mode with prompts <code>--yes</code> bool Skip confirmation prompts"},{"location":"zh/CLI/#output-styles","title":"Output Styles","text":"<ul> <li>basic: Simple text output</li> <li>enhanced: Colored output with icons</li> <li>rich: Detailed output with progress bars</li> <li>modern: Modern UI with animations</li> <li>json: Machine-readable JSON output</li> </ul>"},{"location":"zh/CLI/#examples","title":"Examples","text":"<pre><code># Run with modern output style\nsloth-runner run -f deploy.sloth -o modern\n\n# Run with values file\nsloth-runner run -f infra.sloth -v prod-values.yaml\n\n# Run from stack\nsloth-runner run prod-stack --yes\n\n# Interactive mode\nsloth-runner run -f tasks.sloth --interactive\n\n# JSON output for CI/CD\nsloth-runner run -f ci.sloth -o json\n</code></pre>"},{"location":"zh/CLI/#sloth-runner-agent","title":"<code>sloth-runner agent</code>","text":"<p>Manage distributed agents for remote task execution.</p>"},{"location":"zh/CLI/#subcommands","title":"Subcommands","text":""},{"location":"zh/CLI/#agent-start","title":"<code>agent start</code>","text":"<p>Start an agent in agent mode to accept tasks from master server.</p> <pre><code>sloth-runner agent start [flags]\n</code></pre> <p>Flags: - <code>--master string</code>: Master server address (default: <code>localhost:50053</code>) - <code>--name string</code>: Agent name identifier - <code>--tags string</code>: Comma-separated tags for agent capabilities - <code>--daemon</code>: Run as background daemon</p> <p>Example: <pre><code># Start agent with tags\nsloth-runner agent start --master master.example.com:50053 \\\n  --name prod-agent-1 \\\n  --tags linux,docker,aws\n\n# Start as daemon\nsloth-runner agent start --daemon --name bg-agent\n</code></pre></p>"},{"location":"zh/CLI/#agent-list","title":"<code>agent list</code>","text":"<p>List all registered agents with their status.</p> <pre><code>sloth-runner agent list [flags]\n</code></pre> <p>Flags: - <code>--master string</code>: Master server address</p> <p>Example: <pre><code>sloth-runner agent list --master master.example.com:50053\n</code></pre></p>"},{"location":"zh/CLI/#agent-run","title":"<code>agent run</code>","text":"<p>Execute a command on a remote agent.</p> <pre><code>sloth-runner agent run [flags]\n</code></pre> <p>Flags: - <code>--agent string</code>: Target agent name - <code>--command string</code>: Command to execute - <code>--master string</code>: Master server address</p> <p>Example: <pre><code>sloth-runner agent run --agent prod-agent-1 \\\n  --command \"docker ps\" \\\n  --master master.example.com:50053\n</code></pre></p>"},{"location":"zh/CLI/#agent-stop","title":"<code>agent stop</code>","text":"<p>Stop a remote agent gracefully.</p> <pre><code>sloth-runner agent stop [flags]\n</code></pre> <p>Flags: - <code>--agent string</code>: Agent name to stop - <code>--master string</code>: Master server address</p>"},{"location":"zh/CLI/#agent-delete","title":"<code>agent delete</code>","text":"<p>Delete an agent from the registry.</p> <pre><code>sloth-runner agent delete [flags]\n</code></pre>"},{"location":"zh/CLI/#sloth-runner-master","title":"<code>sloth-runner master</code>","text":"<p>Start the master coordination server for managing distributed agents.</p>"},{"location":"zh/CLI/#usage_1","title":"Usage","text":"<pre><code>sloth-runner master [flags]\n</code></pre>"},{"location":"zh/CLI/#flags_1","title":"Flags","text":"Flag Type Description <code>-p, --port</code> int Port to listen on (default: <code>50053</code>) <code>--daemon</code> bool Run as background daemon <code>--debug</code> bool Enable debug logging"},{"location":"zh/CLI/#examples_1","title":"Examples","text":"<pre><code># Start master server\nsloth-runner master --port 50053\n\n# Start as daemon with debug\nsloth-runner master --daemon --debug\n\n# Custom port\nsloth-runner master --port 9000\n</code></pre>"},{"location":"zh/CLI/#sloth-runner-scheduler","title":"<code>sloth-runner scheduler</code>","text":"<p>Manage scheduled tasks for automated execution.</p>"},{"location":"zh/CLI/#subcommands_1","title":"Subcommands","text":""},{"location":"zh/CLI/#scheduler-enable","title":"<code>scheduler enable</code>","text":"<p>Enable the scheduler service.</p> <pre><code>sloth-runner scheduler enable\n</code></pre>"},{"location":"zh/CLI/#scheduler-disable","title":"<code>scheduler disable</code>","text":"<p>Disable the scheduler service.</p> <pre><code>sloth-runner scheduler disable\n</code></pre>"},{"location":"zh/CLI/#scheduler-list","title":"<code>scheduler list</code>","text":"<p>List all scheduled tasks with their configuration.</p> <pre><code>sloth-runner scheduler list [flags]\n</code></pre> <p>Output: - Task name - Schedule (cron expression) - Next run time - Status (enabled/disabled)</p> <p>Example: <pre><code>sloth-runner scheduler list\n</code></pre></p>"},{"location":"zh/CLI/#scheduler-delete","title":"<code>scheduler delete</code>","text":"<p>Delete a scheduled task.</p> <pre><code>sloth-runner scheduler delete [task-name]\n</code></pre>"},{"location":"zh/CLI/#sloth-runner-stack","title":"<code>sloth-runner stack</code>","text":"<p>Manage workflow stacks for state persistence and environment isolation.</p>"},{"location":"zh/CLI/#subcommands_2","title":"Subcommands","text":""},{"location":"zh/CLI/#stack-new","title":"<code>stack new</code>","text":"<p>Create a new workflow stack.</p> <pre><code>sloth-runner stack new [stack-name] [flags]\n</code></pre> <p>Flags: - <code>-f, --file string</code>: Workflow file to associate - <code>--description string</code>: Stack description</p> <p>Example: <pre><code>sloth-runner stack new prod-infra \\\n  -f infrastructure.sloth \\\n  --description \"Production infrastructure stack\"\n</code></pre></p>"},{"location":"zh/CLI/#stack-list","title":"<code>stack list</code>","text":"<p>List all workflow stacks.</p> <pre><code>sloth-runner stack list\n</code></pre> <p>Output: - Stack name - Workflow file - State status - Last updated</p>"},{"location":"zh/CLI/#stack-show","title":"<code>stack show</code>","text":"<p>Show detailed information about a stack.</p> <pre><code>sloth-runner stack show [stack-name]\n</code></pre> <p>Output: - Stack configuration - State variables - Execution history - Associated resources</p>"},{"location":"zh/CLI/#stack-delete","title":"<code>stack delete</code>","text":"<p>Delete a workflow stack and its state.</p> <pre><code>sloth-runner stack delete [stack-name] [flags]\n</code></pre> <p>Flags: - <code>--force</code>: Force deletion without confirmation</p>"},{"location":"zh/CLI/#sloth-runner-ui","title":"<code>sloth-runner ui</code>","text":"<p>Start the web-based dashboard for visual management.</p>"},{"location":"zh/CLI/#usage_2","title":"Usage","text":"<pre><code>sloth-runner ui [flags]\n</code></pre>"},{"location":"zh/CLI/#flags_2","title":"Flags","text":"Flag Type Description <code>-p, --port</code> int Port for UI server (default: <code>8080</code>) <code>--daemon</code> bool Run as background daemon <code>--debug</code> bool Enable debug logging"},{"location":"zh/CLI/#features","title":"Features","text":"<ul> <li>\ud83d\udcca Real-time task monitoring</li> <li>\ud83e\udd16 Agent health dashboard</li> <li>\ud83d\udcc5 Scheduler management</li> <li>\ud83d\udce6 Stack browser</li> <li>\ud83d\udcc8 Metrics and analytics</li> </ul>"},{"location":"zh/CLI/#examples_2","title":"Examples","text":"<pre><code># Start UI on default port\nsloth-runner ui\n\n# Custom port\nsloth-runner ui --port 3000\n\n# Run as daemon\nsloth-runner ui --daemon --port 8080\n</code></pre> <p>Access at: <code>http://localhost:8080</code></p>"},{"location":"zh/CLI/#sloth-runner-workflow","title":"<code>sloth-runner workflow</code>","text":"<p>Create and manage workflow projects with scaffolding.</p>"},{"location":"zh/CLI/#subcommands_3","title":"Subcommands","text":""},{"location":"zh/CLI/#workflow-init","title":"<code>workflow init</code>","text":"<p>Initialize a new workflow project with templates.</p> <pre><code>sloth-runner workflow init [project-name] [flags]\n</code></pre> <p>Flags: - <code>--template string</code>: Template to use (default: <code>basic</code>) - <code>--path string</code>: Target directory</p> <p>Available Templates: - <code>basic</code>: Simple task workflow - <code>cicd</code>: CI/CD pipeline - <code>infra</code>: Infrastructure automation - <code>gitops</code>: GitOps deployment</p> <p>Example: <pre><code># Create CI/CD project\nsloth-runner workflow init my-pipeline --template cicd\n\n# Custom path\nsloth-runner workflow init my-project --template infra --path ./projects/\n</code></pre></p>"},{"location":"zh/CLI/#workflow-list-templates","title":"<code>workflow list-templates</code>","text":"<p>List all available workflow templates.</p> <pre><code>sloth-runner workflow list-templates\n</code></pre>"},{"location":"zh/CLI/#sloth-runner-list","title":"<code>sloth-runner list</code>","text":"<p>List tasks and task groups from a workflow file without execution.</p>"},{"location":"zh/CLI/#usage_3","title":"Usage","text":"<pre><code>sloth-runner list [flags]\nsloth-runner list [flags]\n</code></pre> <p>Flags:</p> <ul> <li><code>-f, --file string</code>: (Required) Path to the Lua task configuration file.</li> <li><code>-v, --values string</code>: Path to a YAML values file, in case your task definitions depend on it.</li> </ul>"},{"location":"zh/CLI/#sloth-runner-new","title":"<code>sloth-runner new</code>","text":"<p>Generates a new boilerplate Lua task definition file from a template.</p> <p>Usage: <pre><code>sloth-runner new &lt;group-name&gt; [flags]\n</code></pre></p> <p>Arguments:</p> <ul> <li><code>&lt;group-name&gt;</code>: The name of the main task group to be created in the file.</li> </ul> <p>Flags:</p> <ul> <li><code>-t, --template string</code>: The template to use. Default is <code>simple</code>. Run <code>sloth-runner template list</code> to see all available options.</li> <li><code>-o, --output string</code>: The path to the output file. If not provided, the generated content will be printed to stdout.</li> </ul> <pre><code>sloth-runner list [flags]\n</code></pre>"},{"location":"zh/CLI/#flags_3","title":"Flags","text":"Flag Type Description <code>-f, --file</code> string Path to workflow file"},{"location":"zh/CLI/#output","title":"Output","text":"<ul> <li>Task groups</li> <li>Task names</li> <li>Descriptions</li> <li>Dependencies</li> <li>Conditions</li> </ul>"},{"location":"zh/CLI/#example","title":"Example","text":"<pre><code>sloth-runner list -f deploy.sloth\n</code></pre>"},{"location":"zh/CLI/#sloth-runner-version","title":"<code>sloth-runner version</code>","text":"<p>Display version and build information.</p>"},{"location":"zh/CLI/#usage_4","title":"Usage","text":"<pre><code>sloth-runner version\n</code></pre>"},{"location":"zh/CLI/#output_1","title":"Output","text":"<ul> <li>Version number</li> <li>Git commit hash</li> <li>Build date</li> <li>Go version</li> </ul>"},{"location":"zh/CLI/#global-flags","title":"Global Flags","text":"<p>Available for all commands:</p> Flag Description <code>-h, --help</code> Show command help <code>--debug</code> Enable debug output <code>--config string</code> Config file path (default: <code>~/.sloth-runner/config.yaml</code>)"},{"location":"zh/CLI/#configuration-file","title":"Configuration File","text":"<p>Sloth Runner supports configuration via <code>~/.sloth-runner/config.yaml</code>:</p> <pre><code># Master server settings\nmaster:\n  host: localhost\n  port: 50053\n\n# Agent settings\nagent:\n  name: my-agent\n  tags:\n    - linux\n    - docker\n  reconnect: true\n\n# UI settings\nui:\n  port: 8080\n  theme: dark\n\n# Scheduler settings\nscheduler:\n  enabled: true\n  timezone: UTC\n</code></pre>"},{"location":"zh/CLI/#environment-variables","title":"Environment Variables","text":"<p>Override configuration with environment variables:</p> Variable Description <code>SLOTH_MASTER_HOST</code> Master server host <code>SLOTH_MASTER_PORT</code> Master server port <code>SLOTH_AGENT_NAME</code> Agent identifier <code>SLOTH_UI_PORT</code> UI server port <code>SLOTH_DEBUG</code> Enable debug mode"},{"location":"zh/CLI/#exit-codes","title":"Exit Codes","text":"Code Meaning <code>0</code> Success <code>1</code> General error <code>2</code> Task execution failed <code>3</code> Configuration error <code>4</code> Network/connection error <code>5</code> State management error"},{"location":"zh/CLI/#examples_3","title":"Examples","text":""},{"location":"zh/CLI/#complete-cicd-pipeline","title":"Complete CI/CD Pipeline","text":"<pre><code># Initialize project\nsloth-runner workflow init my-app --template cicd\n\n# Run tests\nsloth-runner run -f my-app/.sloth/test.sloth -o rich\n\n# Deploy to staging\nsloth-runner run staging-stack --yes\n\n# Check agent status\nsloth-runner agent list --master ci-master:50053\n\n# Schedule nightly builds\nsloth-runner scheduler add nightly-build \\\n  --cron \"0 0 * * *\" \\\n  --workflow build.sloth\n</code></pre>"},{"location":"zh/CLI/#infrastructure-automation","title":"Infrastructure Automation","text":"<pre><code># Create infrastructure stack\nsloth-runner stack new prod-infra -f infrastructure.sloth\n\n# Apply with modern output\nsloth-runner run prod-infra -o modern\n\n# Show stack state\nsloth-runner stack show prod-infra\n\n# Teardown\nsloth-runner stack delete prod-infra --force\n</code></pre>"},{"location":"zh/CLI/#distributed-task-execution","title":"Distributed Task Execution","text":"<pre><code># Start master server\nsloth-runner master --port 50053 --daemon\n\n# Start agents on different servers\nsloth-runner agent start --master master:50053 --name web-1 --tags web,nginx\nsloth-runner agent start --master master:50053 --name db-1 --tags database,postgres\n\n# Execute on specific agent\nsloth-runner agent run --agent web-1 --command \"systemctl status nginx\"\n\n# Start UI for monitoring\nsloth-runner ui --port 8080\n</code></pre>"},{"location":"zh/CLI/#best-practices","title":"Best Practices","text":""},{"location":"zh/CLI/#1-use-stacks-for-state-management","title":"1. Use Stacks for State Management","text":"<pre><code># Don't: Run without state\nsloth-runner run -f deploy.sloth\n\n# Do: Use stacks for persistence\nsloth-runner stack new prod\nsloth-runner run prod\n</code></pre>"},{"location":"zh/CLI/#2-specify-output-format-for-cicd","title":"2. Specify Output Format for CI/CD","text":"<pre><code># JSON for parsing\nsloth-runner run -f ci.sloth -o json &gt; results.json\n\n# Rich for interactive\nsloth-runner run -f deploy.sloth -o rich\n</code></pre>"},{"location":"zh/CLI/#3-use-values-files-for-environments","title":"3. Use Values Files for Environments","text":"<pre><code># Development\nsloth-runner run -f app.sloth -v dev-values.yaml\n\n# Production\nsloth-runner run -f app.sloth -v prod-values.yaml\n</code></pre>"},{"location":"zh/CLI/#4-tag-agents-appropriately","title":"4. Tag Agents Appropriately","text":"<pre><code># Specific capabilities\nsloth-runner agent start --tags \"linux,docker,aws,x86_64\"\n\n# Environment-based\nsloth-runner agent start --tags \"prod,us-east-1\"\n</code></pre>"},{"location":"zh/CLI/#troubleshooting","title":"Troubleshooting","text":""},{"location":"zh/CLI/#connection-issues","title":"Connection Issues","text":"<pre><code># Test master connectivity\ncurl http://master:50053/health\n\n# Check agent logs\nsloth-runner agent start --debug\n</code></pre>"},{"location":"zh/CLI/#task-execution-failures","title":"Task Execution Failures","text":"<pre><code># Run with debug output\nsloth-runner run -f task.sloth --debug\n\n# Interactive mode for troubleshooting\nsloth-runner run -f task.sloth --interactive\n</code></pre>"},{"location":"zh/CLI/#state-issues","title":"State Issues","text":"<pre><code># View stack state\nsloth-runner stack show my-stack\n\n# Reset stack (careful!)\nsloth-runner stack delete my-stack\nsloth-runner stack new my-stack -f workflow.sloth\n</code></pre>"},{"location":"zh/CLI/#related-documentation","title":"Related Documentation","text":"<ul> <li>Getting Started</li> <li>Core Concepts</li> <li>Agent Architecture</li> <li>Scheduler Guide</li> <li>Web Dashboard</li> <li>Stack Management</li> </ul>"},{"location":"zh/CLI/#see-also","title":"See Also","text":"<ul> <li>REPL Interactive Shell</li> <li>Modern DSL Syntax</li> <li>Module Reference</li> <li>Examples Repository</li> </ul> <p>Need more help? Run <code>sloth-runner [command] --help</code> for detailed information about any command.</p>"},{"location":"zh/CLI/#sloth-runner-version_1","title":"<code>sloth-runner version</code>","text":"<p>Displays the current version of <code>sloth-runner</code>.</p> <pre><code>sloth-runner version\n</code></pre>"},{"location":"zh/CLI/#sloth-runner-scheduler_1","title":"<code>sloth-runner scheduler</code>","text":"<p>Manages the <code>sloth-runner</code> task scheduler, allowing you to enable, disable, list, and delete scheduled tasks.</p> <p>For detailed information on scheduler commands and configuration, refer to the Task Scheduler documentation.</p> <p>Subcommands:</p> <ul> <li><code>sloth-runner scheduler enable</code>: Starts the scheduler as a background process.</li> <li><code>sloth-runner scheduler disable</code>: Stops the running scheduler process.</li> <li><code>sloth-runner scheduler list</code>: Lists all configured scheduled tasks.</li> <li><code>sloth-runner scheduler delete &lt;task_name&gt;</code>: Deletes a specific scheduled task.</li> </ul>"},{"location":"zh/advanced-examples/","title":"\u9ad8\u7ea7\u793a\u4f8b","text":"<p>\u672c\u8282\u4ecb\u7ecd\u4e86\u66f4\u590d\u6742\u7684\u793a\u4f8b\u548c\u7528\u4f8b\uff0c\u5b83\u4eec\u7ed3\u5408\u4e86\u591a\u4e2a Sloth-Runner \u6a21\u5757\u4ee5\u5b9e\u73b0\u7aef\u5230\u7aef\u81ea\u52a8\u5316\u3002</p>"},{"location":"zh/advanced-examples/#cicd","title":"\u5b8c\u6574\u793a\u4f8b\uff1a\u7aef\u5230\u7aef CI/CD \u6d41\u6c34\u7ebf","text":"<p>\u672c\u6559\u7a0b\u6f14\u793a\u4e86\u5982\u4f55\u4f7f\u7528 <code>git</code>\u3001<code>pulumi</code> \u548c <code>salt</code> \u6a21\u5757\u6784\u5efa\u5b8c\u6574\u7684 CI/CD \u6d41\u6c34\u7ebf\uff0c\u4ee5\u7248\u672c\u5316\u4ee3\u7801\u3001\u9884\u7f6e\u57fa\u7840\u8bbe\u65bd\u548c\u90e8\u7f72\u5e94\u7528\u7a0b\u5e8f\u3002</p>"},{"location":"zh/advanced-examples/#_2","title":"\u573a\u666f","text":"<p>\u5047\u8bbe\u60a8\u6709\u4e00\u4e2a Pulumi \u57fa\u7840\u8bbe\u65bd\u9879\u76ee\u548c\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u9879\u76ee\u3002\u60a8\u5e0c\u671b\u81ea\u52a8\u5316\u4ee5\u4e0b\u6d41\u7a0b\uff1a</p> <ol> <li>\u514b\u9686\u57fa\u7840\u8bbe\u65bd\u5b58\u50a8\u5e93\u3002</li> <li>\u66f4\u65b0\u5b58\u50a8\u5e93\u4e2d\u7684\u7248\u672c\u6587\u4ef6\u3002</li> <li>\u63d0\u4ea4\u5e76\u5c06\u6b64\u66f4\u6539\u63a8\u9001\u5230 Git\u3002</li> <li>\u6267\u884c <code>pulumi up</code> \u4ee5\u9884\u7f6e\u6216\u66f4\u65b0\u57fa\u7840\u8bbe\u65bd\uff08\u4f8b\u5982\uff0c\u6682\u5b58\u73af\u5883\uff09\u3002</li> <li>\u4f7f\u7528 Salt \u914d\u7f6e\u9884\u7f6e\u7684\u670d\u52a1\u5668\u5e76\u90e8\u7f72\u5e94\u7528\u7a0b\u5e8f\u3002</li> </ol>"},{"location":"zh/advanced-examples/#lua-examplespulumi_git_combined_examplesloth","title":"Lua \u811a\u672c (<code>examples/pulumi_git_combined_example.sloth</code>)","text":"<pre><code>-- examples/pulumi_git_combined_example.sloth\n\ncommand = function(params)\n    log.info(\"Starting combined Pulumi and Git example...\")\n\n    local pulumi_repo_url = \"https://github.com/my-org/my-pulumi-infra.git\" -- Example Pulumi repo\n    local pulumi_repo_path = \"./pulumi-infra-checkout\"\n    local new_infra_version = params.infra_version or \"v1.0.0-infra\"\n    local pulumi_project_workdir = pulumi_repo_path .. \"/my-vpc-project\" -- Subdirectory within the cloned repo\n    local repo\n\n    -- 1. Clone or open the Pulumi repository\n    log.info(\"Step 1: Cloning or opening Pulumi repository...\")\n    if not fs.exists(pulumi_repo_path) then\n        log.info(\"Cloning Pulumi repository: \" .. pulumi_repo_url)\n        local cloned_repo, clone_err = git.clone(pulumi_repo_url, pulumi_repo_path)\n        if clone_err then\n            log.error(\"Failed to clone Pulumi repository: \" .. clone_err)\n            return false, \"Git clone failed.\"\n        end\n        repo = cloned_repo\n    else\n        log.info(\"Pulumi repository already exists, opening local reference.\")\n        local opened_repo, open_err = git.repo(pulumi_repo_path)\n        if open_err then\n            log.error(\"Failed to open Pulumi repository: \" .. open_err)\n            return false, \"Git repo open failed.\"\n        end\n        repo = opened_repo\n    end\n\n    if not repo then\n        return false, \"Failed to get Pulumi repository reference.\"\n    end\n\n    -- 2. Update the repository (pull)\n    log.info(\"Step 2: Pulling latest changes from Pulumi repository...\")\n    repo:checkout(\"main\"):pull(\"origin\", \"main\")\n    local pull_result = repo:result()\n    if not pull_result.success then\n        log.error(\"Failed to pull Pulumi repository: \" .. pull_result.stderr)\n        return false, \"Git pull failed.\"\n    end\n    log.info(\"Pulumi repository updated. Stdout: \" .. pull_result.stdout)\n\n    -- 3. Simulate a change in the Pulumi code (e.g., update a version file)\n    log.info(\"Step 3: Simulating a change in Pulumi code (updating version file)...\")\n    local infra_version_file = pulumi_repo_path .. \"/INFRA_VERSION\"\n    fs.write(infra_version_file, new_infra_version)\n    log.info(\"Updated INFRA_VERSION file to: \" .. new_infra_version)\n\n    -- 4. Commit and push the changes\n    log.info(\"Step 4: Committing and pushing infrastructure version change...\")\n    local commit_message = \"ci: Bump infrastructure version to \" .. new_infra_version\n    repo:add(infra_version_file)\n        :commit(commit_message)\n        :push(\"origin\", \"main\") -- No follow_tags here, just the commit\n\n    local push_result = repo:result()\n    if not push_result.success then\n        log.error(\"Failed to push infrastructure changes: \" .. push_result.stderr)\n        return false, \"Git push failed for infra changes.\"\n    end\n    log.info(\"Infrastructure version change pushed. Stdout: \" .. push_result.stdout)\n\n    -- 5. Execute 'pulumi up' for the project\n    log.info(\"Step 5: Running pulumi up for the infrastructure project...\")\n    local infra_stack = pulumi.stack(\"my-org/my-infra/dev\", {\n        workdir = pulumi_project_workdir -- Use the subdirectory of the Pulumi project\n    })\n\n    local pulumi_up_result = infra_stack:up({ non_interactive = true })\n\n    if not pulumi_up_result.success then\n        log.error(\"Pulumi up failed: \" .. pulumi_up_result.stderr)\n        return false, \"Pulumi up failed.\"\n    end\n    log.info(\"Pulumi up completed successfully. Stdout: \" .. pulumi_up_result.stdout)\n\n    -- 6. Configure and deploy application using Salt (Example)\n    log.info(\"Step 6: Configuring and deploying application using Salt...\")\n    -- Assuming Pulumi up provided the server IP or hostname\n    -- For this example, we'll use a fictitious IP\n    local server_ip = \"192.168.1.100\" -- Replace with actual output from Pulumi, if any\n    local salt_target = salt.target(server_ip)\n\n    log.info(\"Running Salt test.ping on \" .. server_ip .. \"...\")\n    salt_target:ping()\n    local ping_result = salt_target:result()\n    if not ping_result.success then\n        log.error(\"Salt ping failed for \" .. server_ip .. \": \" .. ping_result.stderr)\n        return false, \"Salt ping failed.\"\n    end\n    log.info(\"Salt ping successful. Stdout: \" .. data.to_json(ping_result.stdout)) -- Assuming ping returns JSON\n\n    log.info(\"Applying Salt state 'app.install' on \" .. server_ip .. \"...\")\n    salt_target:cmd('state.apply', 'app.install')\n    local salt_apply_result = salt_target:result()\n    if not salt_apply_result.success then\n        log.error(\"Salt state.apply failed for \" .. server_ip .. \": \" .. salt_apply_result.stderr)\n        return false, \"Salt state.apply failed.\"\n    end\n    log.info(\"Salt state.apply successful. Stdout: \" .. data.to_json(salt_apply_result.stdout))\n\n    log.info(\"Combined Pulumi and Git example finished successfully.\")\n    return true, \"Combined Pulumi and Git example finished.\"\nend\n\nModern DSLs = {\n    pulumi_git_combined_example = {\n        description = \"Demonstrates combined usage of 'pulumi' and 'git' modules for CI/CD pipeline.\",\n        tasks = {\n            {\n                name = \"run_combined_example\",\n                command = command,\n                params = {\n                    infra_version = \"v1.0.0-test-combined\"\n                }\n            }\n        }\n    }\n}\n</code></pre> <p>English | Portugu\u00eas | \u4e2d\u6587</p>"},{"location":"zh/advanced-features/","title":"\u9ad8\u7ea7\u529f\u80fd","text":"<p>\u672c\u6587\u6863\u4ecb\u7ecd <code>sloth-runner</code> \u7684\u4e00\u4e9b\u66f4\u9ad8\u7ea7\u7684\u529f\u80fd\uff0c\u65e8\u5728\u589e\u5f3a\u60a8\u7684\u5f00\u53d1\u3001\u8c03\u8bd5\u548c\u914d\u7f6e\u5de5\u4f5c\u6d41\u3002</p>"},{"location":"zh/advanced-features/#_2","title":"\u4ea4\u4e92\u5f0f\u4efb\u52a1\u8fd0\u884c\u5668","text":"<p>\u5bf9\u4e8e\u590d\u6742\u7684\u5de5\u4f5c\u6d41\uff0c\u9010\u4e2a\u6267\u884c\u4efb\u52a1\u3001\u68c0\u67e5\u5176\u8f93\u51fa\u5e76\u51b3\u5b9a\u662f\u7ee7\u7eed\u3001\u8df3\u8fc7\u8fd8\u662f\u91cd\u8bd5\u4efb\u52a1\u53ef\u80fd\u5f88\u6709\u7528\u3002\u4ea4\u4e92\u5f0f\u4efb\u52a1\u8fd0\u884c\u5668\u4e3a\u8c03\u8bd5\u548c\u5f00\u53d1\u4efb\u52a1\u7ba1\u9053\u63d0\u4f9b\u4e86\u4e00\u79cd\u5f3a\u5927\u7684\u65b9\u6cd5\u3002</p> <p>\u8981\u4f7f\u7528\u4ea4\u4e92\u5f0f\u8fd0\u884c\u5668\uff0c\u8bf7\u5c06 <code>--interactive</code> \u6807\u5fd7\u6dfb\u52a0\u5230 <code>sloth-runner run</code> \u547d\u4ee4\u4e2d\uff1a</p> <pre><code>sloth-runner run -f examples/basic_pipeline.sloth --yes --interactive\n</code></pre> <p>\u542f\u7528\u540e\uff0c\u8fd0\u884c\u5668\u5c06\u5728\u6267\u884c\u6bcf\u4e2a\u4efb\u52a1\u4e4b\u524d\u6682\u505c\u5e76\u63d0\u793a\u60a8\u6267\u884c\u64cd\u4f5c\uff1a</p> <pre><code>? \u4efb\u52a1: fetch_data (\u6a21\u62df\u83b7\u53d6\u539f\u59cb\u6570\u636e)\n&gt; \u8fd0\u884c\n  \u8df3\u8fc7\n  \u4e2d\u6b62\n  \u7ee7\u7eed\n</code></pre> <p>\u64cd\u4f5c:</p> <ul> <li>\u8fd0\u884c: (\u9ed8\u8ba4) \u7ee7\u7eed\u6267\u884c\u5f53\u524d\u4efb\u52a1\u3002</li> <li>\u8df3\u8fc7: \u8df3\u8fc7\u5f53\u524d\u4efb\u52a1\u5e76\u8f6c\u5230\u6267\u884c\u987a\u5e8f\u4e2d\u7684\u4e0b\u4e00\u4e2a\u4efb\u52a1\u3002</li> <li>\u4e2d\u6b62: \u7acb\u5373\u4e2d\u6b62\u6574\u4e2a\u4efb\u52a1\u6267\u884c\u3002</li> <li>\u7ee7\u7eed: \u6267\u884c\u5f53\u524d\u4efb\u52a1\u548c\u6240\u6709\u540e\u7eed\u4efb\u52a1\uff0c\u4e0d\u518d\u63d0\u793a\uff0c\u4ece\u800c\u6709\u6548\u5730\u4e3a\u4f59\u4e0b\u7684\u8fd0\u884c\u7981\u7528\u4ea4\u4e92\u6a21\u5f0f\u3002</li> </ul>"},{"location":"zh/advanced-features/#valuesyaml","title":"\u589e\u5f3a\u7684 <code>values.yaml</code> \u6a21\u677f","text":"<p>\u60a8\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 Go \u6a21\u677f\u8bed\u6cd5\u6ce8\u5165\u73af\u5883\u53d8\u91cf\u6765\u4f7f <code>values.yaml</code> \u6587\u4ef6\u66f4\u52a0\u52a8\u6001\u3002\u8fd9\u5bf9\u4e8e\u63d0\u4f9b\u654f\u611f\u4fe1\u606f\uff08\u5982\u4ee4\u724c\u6216\u5bc6\u94a5\uff09\u6216\u7279\u5b9a\u4e8e\u73af\u5883\u7684\u914d\u7f6e\u7279\u522b\u6709\u7528\uff0c\u800c\u65e0\u9700\u5bf9\u5176\u8fdb\u884c\u786c\u7f16\u7801\u3002</p> <p><code>sloth-runner</code> \u5c06 <code>values.yaml</code> \u4f5c\u4e3a Go \u6a21\u677f\u5904\u7406\uff0c\u4f7f\u4efb\u4f55\u73af\u5883\u53d8\u91cf\u90fd\u53ef\u4ee5\u5728 <code>.Env</code> \u6620\u5c04\u4e0b\u4f7f\u7528\u3002</p> <p>\u793a\u4f8b:</p> <ol> <li> <p>\u521b\u5efa\u4e00\u4e2a\u5e26\u6709\u6a21\u677f\u5360\u4f4d\u7b26\u7684 <code>values.yaml</code> \u6587\u4ef6\uff1a</p> <p><pre><code># values.yaml\napi_key: \"{{ .Env.MY_API_KEY }}\"\nregion: \"{{ .Env.AWS_REGION | default \"us-east-1\" }}\"\n</code></pre> \u6ce8\u610f\uff1a\u5982\u679c\u672a\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 <code>default</code> \u63d0\u4f9b\u5907\u7528\u503c\u3002</p> </li> <li> <p>\u521b\u5efa\u4e00\u4e2a\u4f7f\u7528\u8fd9\u4e9b\u503c\u7684 Lua \u4efb\u52a1\uff1a</p> <pre><code>-- my_task.sloth\nModern DSLs = {\n  my_group = {\n    tasks = {\n      {\n        name = \"deploy\",\n        command = function()\n          log.info(\"\u90e8\u7f72\u5230\u533a\u57df: \" .. values.region)\n          log.info(\"\u4f7f\u7528 API \u5bc6\u94a5 (\u524d 5 \u4e2a\u5b57\u7b26): \" .. string.sub(values.api_key, 1, 5) .. \"...\")\n          return true, \"\u90e8\u7f72\u6210\u529f\u3002\"\n        end\n      }\n    }\n  }\n}\n</code></pre> </li> <li> <p>\u5728\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\u7684\u60c5\u51b5\u4e0b\u8fd0\u884c\u4efb\u52a1\uff1a</p> <pre><code>export MY_API_KEY=\"supersecretkey12345\"\nexport AWS_REGION=\"us-west-2\"\n\nsloth-runner run -f my_task.sloth -v values.yaml --yes\n</code></pre> </li> </ol> <p>\u8f93\u51fa:</p> <p>\u8f93\u51fa\u5c06\u663e\u793a\u73af\u5883\u53d8\u91cf\u4e2d\u7684\u503c\u5df2\u6b63\u786e\u66ff\u6362\uff1a</p> <pre><code>INFO \u90e8\u7f72\u5230\u533a\u57df: us-west-2\nINFO \u4f7f\u7528 API \u5bc6\u94a5 (\u524d 5 \u4e2a\u5b57\u7b26): super...\n</code></pre>"},{"location":"zh/agent-improvements/","title":"\ud83d\ude80 \u4ee3\u7406\u6539\u8fdb","text":"<p>\u6709\u5173\u4ee3\u7406\u6539\u8fdb\u7684\u5b8c\u6574\u6587\u6863\uff0c\u8bf7\u53c2\u9605\uff1a</p>"},{"location":"zh/agent-improvements/#_2","title":"\u5df2\u5b9e\u73b0\u7684\u6539\u8fdb","text":""},{"location":"zh/agent-improvements/#_3","title":"\ud83d\udcca \u589e\u5f3a\u8f93\u51fa","text":"<p>\u53c2\u89c1\uff1a\u589e\u5f3a\u4ee3\u7406\u8f93\u51fa</p>"},{"location":"zh/agent-improvements/#_4","title":"\ud83c\udfd7\ufe0f \u67b6\u6784","text":"<p>\u53c2\u89c1\uff1aMaster-Agent \u67b6\u6784</p>"},{"location":"zh/agent-improvements/#_5","title":"\ud83c\udf10 \u5206\u5e03\u5f0f\u7cfb\u7edf","text":"<p>\u53c2\u89c1\uff1a\u5206\u5e03\u5f0f\u7cfb\u7edf</p>"},{"location":"zh/agent-improvements/#_6","title":"\u4e3b\u8981\u529f\u80fd","text":"<ul> <li>\u2705 \u6539\u8fdb\u7684 master \u548c agent \u4e4b\u95f4\u7684\u901a\u4fe1</li> <li>\u2705 \u5e26\u989c\u8272\u548c\u8868\u60c5\u7b26\u53f7\u7684\u683c\u5f0f\u5316\u8f93\u51fa</li> <li>\u2705 \u5b9e\u65f6\u76d1\u63a7</li> <li>\u2705 \u81ea\u52a8\u91cd\u8bd5</li> <li>\u2705 \u5065\u5eb7\u68c0\u67e5</li> <li>\u2705 \u7ed3\u6784\u5316\u65e5\u5fd7</li> </ul>"},{"location":"zh/agent-improvements/#_7","title":"\u793a\u4f8b","text":"<p>\u6709\u5173\u5b9e\u9645\u6848\u4f8b\uff0c\u8bf7\u53c2\u9605\u9ad8\u7ea7\u793a\u4f8b\u3002</p>"},{"location":"zh/contributing/","title":"\ud83e\udd1d \u8d21\u732e Sloth Runner","text":"<p>\u611f\u8c22\u60a8\u5bf9\u8d21\u732e Sloth Runner \u7684\u5174\u8da3\uff01</p> <p>\u6211\u4eec\u6b22\u8fce\u6240\u6709\u6280\u80fd\u6c34\u5e73\u7684\u5f00\u53d1\u8005\u7684\u8d21\u732e\u3002\u65e0\u8bba\u60a8\u662f\u4fee\u590d\u9519\u8bef\u3001\u6dfb\u52a0\u529f\u80fd\u3001\u6539\u8fdb\u6587\u6863\u8fd8\u662f\u521b\u5efa\u63d2\u4ef6\uff0c\u60a8\u7684\u5e2e\u52a9\u90fd\u4f1a\u8ba9 Sloth Runner \u53d8\u5f97\u66f4\u597d\u3002</p>"},{"location":"zh/contributing/#_1","title":"\ud83d\ude80 \u5feb\u901f\u5f00\u59cb","text":""},{"location":"zh/contributing/#_2","title":"\u524d\u7f6e\u6761\u4ef6","text":"<ul> <li>Go 1.21+ \u7528\u4e8e\u6838\u5fc3\u5f00\u53d1</li> <li>Node.js 18+ \u7528\u4e8e UI \u5f00\u53d1  </li> <li>Lua 5.4+ \u7528\u4e8e DSL \u5f00\u53d1</li> <li>Git \u7528\u4e8e\u7248\u672c\u63a7\u5236</li> </ul>"},{"location":"zh/contributing/#_3","title":"\u5f00\u53d1\u73af\u5883\u8bbe\u7f6e","text":"<pre><code># \u514b\u9686\u4ed3\u5e93\ngit clone https://github.com/chalkan3-sloth/sloth-runner.git\ncd sloth-runner\n\n# \u5b89\u88c5\u4f9d\u8d56\ngo mod download\nnpm install  # \u7528\u4e8e UI \u7ec4\u4ef6\n\n# \u8fd0\u884c\u6d4b\u8bd5\nmake test\n\n# \u6784\u5efa\u9879\u76ee\nmake build\n</code></pre>"},{"location":"zh/contributing/#_4","title":"\ud83d\udccb \u8d21\u732e\u65b9\u5f0f","text":""},{"location":"zh/contributing/#_5","title":"\ud83d\udc1b \u9519\u8bef\u62a5\u544a","text":"<p>\u53d1\u73b0\u4e86\u9519\u8bef\uff1f\u8bf7\u5e2e\u52a9\u6211\u4eec\u4fee\u590d\uff1a</p> <ol> <li>\u641c\u7d22\u73b0\u6709 issue \u4ee5\u907f\u514d\u91cd\u590d</li> <li>\u4f7f\u7528\u6211\u4eec\u7684\u9519\u8bef\u62a5\u544a\u6a21\u677f\uff0c\u5305\u542b\uff1a</li> <li>Sloth Runner \u7248\u672c</li> <li>\u64cd\u4f5c\u7cfb\u7edf</li> <li>\u91cd\u73b0\u6b65\u9aa4</li> <li>\u9884\u671f\u884c\u4e3a vs \u5b9e\u9645\u884c\u4e3a</li> <li>\u9519\u8bef\u65e5\u5fd7\uff08\u5982\u679c\u6709\uff09</li> </ol>"},{"location":"zh/contributing/#_6","title":"\ud83d\udca1 \u529f\u80fd\u8bf7\u6c42","text":"<p>\u6709\u6539\u8fdb\u60f3\u6cd5\uff1f</p> <ol> <li>\u68c0\u67e5\u8def\u7ebf\u56fe \u67e5\u770b\u8ba1\u5212\u7684\u529f\u80fd</li> <li>\u5f00\u542f\u529f\u80fd\u8bf7\u6c42\uff0c\u5305\u542b\uff1a</li> <li>\u529f\u80fd\u7684\u6e05\u6670\u63cf\u8ff0</li> <li>\u7528\u4f8b\u548c\u597d\u5904</li> <li>\u53ef\u80fd\u7684\u5b9e\u73b0\u65b9\u6cd5</li> </ol>"},{"location":"zh/contributing/#_7","title":"\ud83d\udd27 \u4ee3\u7801\u8d21\u732e","text":"<p>\u51c6\u5907\u7f16\u7801\uff1f\u4ee5\u4e0b\u662f\u6b65\u9aa4\uff1a</p> <ol> <li>Fork \u4ed3\u5e93</li> <li>\u521b\u5efa\u529f\u80fd\u5206\u652f (<code>git checkout -b feature/amazing-feature</code>)</li> <li>\u8fdb\u884c\u66f4\u6539 \u9075\u5faa\u6211\u4eec\u7684\u7f16\u7801\u6807\u51c6</li> <li>\u4e3a\u65b0\u529f\u80fd\u6dfb\u52a0\u6d4b\u8bd5</li> <li>\u5982\u9700\u8981\u66f4\u65b0\u6587\u6863</li> <li>\u4f7f\u7528\u6e05\u6670\u7684\u6d88\u606f\u63d0\u4ea4</li> <li>\u63a8\u9001\u5e76\u521b\u5efa Pull Request</li> </ol>"},{"location":"zh/contributing/#_8","title":"\ud83d\udcda \u6587\u6863","text":"<p>\u5e2e\u52a9\u6539\u8fdb\u6211\u4eec\u7684\u6587\u6863\uff1a</p> <ul> <li>\u4fee\u590d\u62fc\u5199\u9519\u8bef\u548c\u4e0d\u6e05\u695a\u7684\u8bf4\u660e</li> <li>\u6dfb\u52a0\u793a\u4f8b\u548c\u6559\u7a0b</li> <li>\u5c06\u5185\u5bb9\u7ffb\u8bd1\u6210\u5176\u4ed6\u8bed\u8a00</li> <li>\u66f4\u65b0 API \u6587\u6863</li> </ul>"},{"location":"zh/contributing/#_9","title":"\ud83d\udd0c \u63d2\u4ef6\u5f00\u53d1","text":"<p>\u4e3a\u793e\u533a\u521b\u5efa\u63d2\u4ef6\uff1a</p> <ul> <li>\u9075\u5faa\u6211\u4eec\u7684\u63d2\u4ef6\u5f00\u53d1\u6307\u5357</li> <li>\u63d0\u4ea4\u5230\u63d2\u4ef6\u6ce8\u518c\u8868</li> <li>\u4fdd\u6301\u4e0e\u6838\u5fc3\u7248\u672c\u7684\u517c\u5bb9\u6027</li> </ul>"},{"location":"zh/contributing/#_10","title":"\ud83d\udcd0 \u5f00\u53d1\u6307\u5357","text":""},{"location":"zh/contributing/#_11","title":"\u4ee3\u7801\u98ce\u683c","text":""},{"location":"zh/contributing/#go","title":"Go \u4ee3\u7801","text":"<p>\u9075\u5faa\u6807\u51c6 Go \u7ea6\u5b9a\uff1a</p> <pre><code>// \u597d\u7684\uff1a\u6e05\u6670\u7684\u51fd\u6570\u540d\u548c\u6ce8\u91ca\nfunc ProcessWorkflowTasks(ctx context.Context, workflow *Workflow) error {\n    if workflow == nil {\n        return fmt.Errorf(\"workflow \u4e0d\u80fd\u4e3a nil\")\n    }\n\n    for _, task := range workflow.Tasks {\n        if err := processTask(ctx, task); err != nil {\n            return fmt.Errorf(\"\u5904\u7406\u4efb\u52a1 %s \u5931\u8d25: %w\", task.ID, err)\n        }\n    }\n\n    return nil\n}\n</code></pre>"},{"location":"zh/contributing/#lua-dsl","title":"Lua DSL","text":"<p>\u4fdd\u6301 DSL \u4ee3\u7801\u6e05\u6d01\u53ef\u8bfb\uff1a</p> <pre><code>-- \u597d\u7684\uff1a\u6e05\u6670\u7684\u4efb\u52a1\u5b9a\u4e49\uff0c\u9002\u5f53\u7684\u94fe\u5f0f\u8c03\u7528\nlocal deploy_task = task(\"deploy_application\")\n    :description(\"\u5c06\u5e94\u7528\u90e8\u7f72\u5230\u751f\u4ea7\u73af\u5883\")\n    :command(function(params, deps)\n        local result = exec.run(\"kubectl apply -f deployment.yaml\")\n        if not result.success then\n            log.error(\"\u90e8\u7f72\u5931\u8d25: \" .. result.stderr)\n            return false\n        end\n        return true\n    end)\n    :timeout(300)\n    :retries(3)\n    :build()\n</code></pre>"},{"location":"zh/contributing/#_12","title":"\u6d4b\u8bd5\u6807\u51c6","text":""},{"location":"zh/contributing/#_13","title":"\u5355\u5143\u6d4b\u8bd5","text":"<p>\u4e3a\u6240\u6709\u65b0\u529f\u80fd\u7f16\u5199\u6d4b\u8bd5\uff1a</p> <pre><code>func TestProcessWorkflowTasks(t *testing.T) {\n    tests := []struct {\n        name     string\n        workflow *Workflow\n        wantErr  bool\n    }{\n        {\n            name:     \"nil workflow \u5e94\u8be5\u8fd4\u56de\u9519\u8bef\",\n            workflow: nil,\n            wantErr:  true,\n        },\n        {\n            name: \"\u6709\u6548 workflow \u5e94\u8be5\u6210\u529f\u5904\u7406\",\n            workflow: &amp;Workflow{\n                Tasks: []*Task{{ID: \"test-task\"}},\n            },\n            wantErr: false,\n        },\n    }\n\n    for _, tt := range tests {\n        t.Run(tt.name, func(t *testing.T) {\n            err := ProcessWorkflowTasks(context.Background(), tt.workflow)\n            if (err != nil) != tt.wantErr {\n                t.Errorf(\"ProcessWorkflowTasks() error = %v, wantErr %v\", err, tt.wantErr)\n            }\n        })\n    }\n}\n</code></pre>"},{"location":"zh/contributing/#_14","title":"\u6587\u6863\u6807\u51c6","text":"<ul> <li>\u4fdd\u6301\u7b80\u5355 - \u4f7f\u7528\u6e05\u6670\u3001\u7b80\u6d01\u7684\u8bed\u8a00</li> <li>\u5305\u542b\u793a\u4f8b - \u5c55\u793a\u800c\u4e0d\u4ec5\u4ec5\u662f\u544a\u8bc9</li> <li>\u968f\u66f4\u6539\u66f4\u65b0 - \u4fdd\u6301\u6587\u6863\u4e0e\u4ee3\u7801\u540c\u6b65</li> <li>\u6d4b\u8bd5\u793a\u4f8b - \u786e\u4fdd\u6240\u6709\u4ee3\u7801\u793a\u4f8b\u90fd\u80fd\u5de5\u4f5c</li> </ul>"},{"location":"zh/contributing/#pull-request","title":"\ud83d\udd04 Pull Request \u6d41\u7a0b","text":""},{"location":"zh/contributing/#_15","title":"\u63d0\u4ea4\u524d","text":"<ul> <li> \u8fd0\u884c\u6d4b\u8bd5 - <code>make test</code></li> <li> \u8fd0\u884c\u4ee3\u7801\u68c0\u67e5 - <code>make lint</code></li> <li> \u66f4\u65b0\u6587\u6863 - \u5982\u679c\u6dfb\u52a0/\u66f4\u6539\u529f\u80fd</li> <li> \u6dfb\u52a0\u66f4\u65b0\u65e5\u5fd7\u6761\u76ee - \u5728 <code>CHANGELOG.md</code> \u4e2d</li> <li> \u68c0\u67e5\u517c\u5bb9\u6027 - \u4e0e\u73b0\u6709\u529f\u80fd</li> </ul>"},{"location":"zh/contributing/#pr","title":"PR \u6a21\u677f","text":"<p>\u4f7f\u7528\u6211\u4eec\u7684 pull request \u6a21\u677f\uff1a</p> <pre><code>## \u63cf\u8ff0\n\u66f4\u6539\u7684\u7b80\u8981\u63cf\u8ff0\n\n## \u66f4\u6539\u7c7b\u578b\n- [ ] \u9519\u8bef\u4fee\u590d\n- [ ] \u65b0\u529f\u80fd\n- [ ] \u7834\u574f\u6027\u66f4\u6539\n- [ ] \u6587\u6863\u66f4\u65b0\n\n## \u6d4b\u8bd5\n- [ ] \u5355\u5143\u6d4b\u8bd5\u5df2\u6dfb\u52a0/\u66f4\u65b0\n- [ ] \u96c6\u6210\u6d4b\u8bd5\u901a\u8fc7\n- [ ] \u624b\u52a8\u6d4b\u8bd5\u5b8c\u6210\n\n## \u68c0\u67e5\u6e05\u5355\n- [ ] \u4ee3\u7801\u9075\u5faa\u6837\u5f0f\u6307\u5357\n- [ ] \u6587\u6863\u5df2\u66f4\u65b0\n- [ ] \u66f4\u65b0\u65e5\u5fd7\u5df2\u66f4\u65b0\n</code></pre>"},{"location":"zh/contributing/#_16","title":"\ud83c\udfd7\ufe0f \u9879\u76ee\u7ed3\u6784","text":"<p>\u7406\u89e3\u4ee3\u7801\u5e93\uff1a</p> <pre><code>sloth-runner/\n\u251c\u2500\u2500 cmd/                    # CLI \u547d\u4ee4\n\u251c\u2500\u2500 internal/              # \u5185\u90e8\u5305\n\u2502   \u251c\u2500\u2500 core/             # \u6838\u5fc3\u4e1a\u52a1\u903b\u8f91\n\u2502   \u251c\u2500\u2500 dsl/              # DSL \u5b9e\u73b0\n\u2502   \u251c\u2500\u2500 execution/        # \u4efb\u52a1\u6267\u884c\u5f15\u64ce\n\u2502   \u2514\u2500\u2500 plugins/          # \u63d2\u4ef6\u7cfb\u7edf\n\u251c\u2500\u2500 pkg/                   # \u516c\u5171\u5305\n\u251c\u2500\u2500 plugins/              # \u5185\u7f6e\u63d2\u4ef6\n\u251c\u2500\u2500 docs/                 # \u6587\u6863\n\u251c\u2500\u2500 web/                  # Web UI \u7ec4\u4ef6\n\u2514\u2500\u2500 examples/             # \u793a\u4f8b\u5de5\u4f5c\u6d41\n</code></pre>"},{"location":"zh/contributing/#_17","title":"\ud83c\udfaf \u8d21\u732e\u9886\u57df","text":""},{"location":"zh/contributing/#_18","title":"\u9ad8\u4f18\u5148\u7ea7","text":"<ul> <li>\ud83d\udc1b \u9519\u8bef\u4fee\u590d - \u603b\u662f\u6b22\u8fce</li> <li>\ud83d\udcc8 \u6027\u80fd\u6539\u8fdb - \u4f18\u5316\u673a\u4f1a</li> <li>\ud83e\uddea \u6d4b\u8bd5\u8986\u76d6\u7387 - \u589e\u52a0\u6d4b\u8bd5\u8986\u76d6\u7387</li> <li>\ud83d\udcda \u6587\u6863 - \u4fdd\u6301\u6587\u6863\u5168\u9762</li> </ul>"},{"location":"zh/contributing/#_19","title":"\u4e2d\u7b49\u4f18\u5148\u7ea7","text":"<ul> <li>\u2728 \u65b0\u529f\u80fd - \u9075\u5faa\u8def\u7ebf\u56fe\u4f18\u5148\u7ea7</li> <li>\ud83d\udd0c \u63d2\u4ef6\u751f\u6001\u7cfb\u7edf - \u66f4\u591a\u63d2\u4ef6\u548c\u96c6\u6210</li> <li>\ud83c\udfa8 UI \u6539\u8fdb - \u66f4\u597d\u7684\u7528\u6237\u4f53\u9a8c</li> </ul>"},{"location":"zh/contributing/#_20","title":"\ud83c\udfc6 \u8ba4\u53ef","text":"<p>\u8d21\u732e\u8005\u5728\u4ee5\u4e0b\u65b9\u9762\u5f97\u5230\u8ba4\u53ef\uff1a</p> <ul> <li>CONTRIBUTORS.md - \u5217\u51fa\u6240\u6709\u8d21\u732e\u8005</li> <li>\u53d1\u5e03\u8bf4\u660e - \u7a81\u51fa\u663e\u793a\u4e3b\u8981\u8d21\u732e</li> <li>\u793e\u533a\u5c55\u793a - \u7279\u8272\u8d21\u732e</li> <li>\u8d21\u732e\u8005\u5fbd\u7ae0 - GitHub \u4e2a\u4eba\u8d44\u6599\u8ba4\u53ef</li> </ul>"},{"location":"zh/contributing/#_21","title":"\ud83d\udcde \u83b7\u53d6\u5e2e\u52a9","text":""},{"location":"zh/contributing/#_22","title":"\u5f00\u53d1\u95ee\u9898","text":"<ul> <li>\ud83d\udcac Discord - <code>#development</code> \u9891\u9053</li> <li>\ud83d\udce7 \u90ae\u4ef6\u5217\u8868 - dev@sloth-runner.io</li> <li>\ud83d\udcd6 Wiki - \u5f00\u53d1\u6307\u5357\u548c\u5e38\u89c1\u95ee\u9898</li> </ul>"},{"location":"zh/contributing/#_23","title":"\u6307\u5bfc","text":"<p>\u521d\u6b21\u63a5\u89e6\u5f00\u6e90\uff1f\u6211\u4eec\u63d0\u4f9b\u6307\u5bfc\uff1a</p> <ul> <li>\ud83d\udc65 \u5bfc\u5e08\u5339\u914d - \u4e0e\u6709\u7ecf\u9a8c\u7684\u8d21\u732e\u8005\u914d\u5bf9</li> <li>\ud83d\udcda \u5b66\u4e60\u8d44\u6e90 - \u7b56\u5212\u7684\u5b66\u4e60\u6750\u6599</li> <li>\ud83c\udfaf \u5f15\u5bfc\u8d21\u732e - \u9002\u5408\u521d\u5b66\u8005\u7684 issue</li> </ul>"},{"location":"zh/contributing/#_24","title":"\ud83d\udcdc \u884c\u4e3a\u51c6\u5219","text":"<p>\u6211\u4eec\u81f4\u529b\u4e8e\u63d0\u4f9b\u4e00\u4e2a\u6b22\u8fce\u548c\u5305\u5bb9\u7684\u73af\u5883\u3002\u8bf7\u9605\u8bfb\u6211\u4eec\u7684\u884c\u4e3a\u51c6\u5219\u3002</p>"},{"location":"zh/contributing/#_25","title":"\u6211\u4eec\u7684\u6807\u51c6","text":"<ul> <li>\ud83e\udd1d \u4e92\u76f8\u5c0a\u91cd - \u5c0a\u91cd\u5bf9\u5f85\u6bcf\u4e2a\u4eba</li> <li>\ud83d\udca1 \u5efa\u8bbe\u6027 - \u63d0\u4f9b\u6709\u7528\u7684\u53cd\u9988</li> <li>\ud83c\udf0d \u5305\u5bb9\u6027 - \u6b22\u8fce\u591a\u5143\u5316\u7684\u89c2\u70b9</li> <li>\ud83d\udcda \u8010\u5fc3 - \u5e2e\u52a9\u4ed6\u4eba\u5b66\u4e60\u548c\u6210\u957f</li> </ul> <p>\u51c6\u5907\u8d21\u732e\uff1f</p> <p>\u4ece\u63a2\u7d22\u6211\u4eec\u7684\u65b0\u624b\u53cb\u597d\u7684 Issues \u5f00\u59cb\uff0c\u6216\u52a0\u5165\u6211\u4eec\u7684 Discord \u793e\u533a \u4ecb\u7ecd\u81ea\u5df1\uff01</p> <p>\u611f\u8c22\u60a8\u5e2e\u52a9\u8ba9 Sloth Runner \u53d8\u5f97\u66f4\u597d\uff01\ud83e\udda5\u2728</p>"},{"location":"zh/core-concepts/","title":"\u6838\u5fc3\u6982\u5ff5","text":"<p>\u672c\u6587\u6863\u89e3\u91ca\u4e86 <code>sloth-runner</code> \u7684\u57fa\u672c\u6982\u5ff5\uff0c\u5e2e\u52a9\u60a8\u7406\u89e3\u5982\u4f55\u5b9a\u4e49\u548c\u7f16\u6392\u590d\u6742\u7684\u5de5\u4f5c\u6d41\u3002</p>"},{"location":"zh/core-concepts/#modern-dsls","title":"<code>Modern DSLs</code> \u8868","text":"<p>\u4efb\u4f55 <code>sloth-runner</code> \u5de5\u4f5c\u6d41\u7684\u5165\u53e3\u70b9\u90fd\u662f\u4e00\u4e2a\u8fd4\u56de\u540d\u4e3a <code>Modern DSLs</code> \u7684\u5168\u5c40 Lua \u8868\u7684 Lua \u6587\u4ef6\u3002\u6b64\u8868\u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u5176\u4e2d\u6bcf\u4e2a\u952e\u90fd\u662f\u4e00\u4e2a \u4efb\u52a1\u7ec4 \u540d\u79f0\u3002</p> <pre><code>-- my_pipeline.sloth\nModern DSLs = {\n  -- \u5728\u6b64\u5904\u5b9a\u4e49\u4efb\u52a1\u7ec4\n}\n</code></pre>"},{"location":"zh/core-concepts/#_2","title":"\u4efb\u52a1\u7ec4","text":"<p>\u4efb\u52a1\u7ec4\u662f\u76f8\u5173\u4efb\u52a1\u7684\u96c6\u5408\u3002\u5b83\u8fd8\u53ef\u4ee5\u5b9a\u4e49\u5f71\u54cd\u5176\u4e2d\u6240\u6709\u4efb\u52a1\u7684\u5c5e\u6027\u3002</p> <p>\u7ec4\u5c5e\u6027:</p> <ul> <li><code>description</code> (string): \u7ec4\u529f\u80fd\u7684\u63cf\u8ff0\u3002</li> <li><code>tasks</code> (table): \u5355\u4e2a\u4efb\u52a1\u8868\u7684\u5217\u8868\u3002</li> <li><code>create_workdir_before_run</code> (boolean): \u5982\u679c\u4e3a <code>true</code>\uff0c\u5219\u5728\u4efb\u4f55\u4efb\u52a1\u8fd0\u884c\u4e4b\u524d\u4e3a\u8be5\u7ec4\u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u5de5\u4f5c\u76ee\u5f55\u3002\u6b64\u76ee\u5f55\u4f1a\u4f20\u9012\u7ed9\u6bcf\u4e2a\u4efb\u52a1\u3002</li> <li><code>clean_workdir_after_run</code> (function): \u4e00\u4e2a Lua \u51fd\u6570\uff0c\u7528\u4e8e\u51b3\u5b9a\u5728\u7ec4\u5b8c\u6210\u540e\u662f\u5426\u5e94\u5220\u9664\u4e34\u65f6\u5de5\u4f5c\u76ee\u5f55\u3002\u5b83\u63a5\u6536\u7ec4\u7684\u6700\u7ec8\u7ed3\u679c (<code>{success = true/false, ...}</code>)\u3002\u8fd4\u56de <code>true</code> \u5c06\u5220\u9664\u76ee\u5f55\u3002</li> </ul> <p>\u793a\u4f8b: <pre><code>Modern DSLs = {\n  my_group = {\n    description = \"\u4e00\u4e2a\u7ba1\u7406\u81ea\u5df1\u4e34\u65f6\u76ee\u5f55\u7684\u7ec4\u3002\",\n    create_workdir_before_run = true,\n    clean_workdir_after_run = function(result)\n      if not result.success then\n        log.warn(\"\u7ec4\u5931\u8d25\u3002\u5de5\u4f5c\u76ee\u5f55\u5c06\u4fdd\u7559\u7528\u4e8e\u8c03\u8bd5\u3002\")\n      end\n      return result.success -- \u4ec5\u5728\u4e00\u5207\u6210\u529f\u65f6\u6e05\u7406\n    end,\n    tasks = {\n      -- \u4efb\u52a1\u5728\u6b64\u5904\u5b9a\u4e49\n    }\n  }\n}\n</code></pre></p>"},{"location":"zh/core-concepts/#_3","title":"\u5355\u4e2a\u4efb\u52a1","text":"<p>\u4efb\u52a1\u662f\u5de5\u4f5c\u7684\u5355\u4e2a\u5355\u5143\u3002\u5b83\u88ab\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u5177\u6709\u591a\u4e2a\u53ef\u7528\u5c5e\u6027\u4ee5\u63a7\u5236\u5176\u884c\u4e3a\u7684\u8868\u3002</p>"},{"location":"zh/core-concepts/#_4","title":"\u57fa\u672c\u5c5e\u6027","text":"<ul> <li><code>name</code> (string): \u4efb\u52a1\u5728\u5176\u7ec4\u4e2d\u7684\u552f\u4e00\u540d\u79f0\u3002</li> <li><code>description</code> (string): \u4efb\u52a1\u529f\u80fd\u7684\u7b80\u8981\u63cf\u8ff0\u3002</li> <li><code>command</code> (string \u6216 function): \u4efb\u52a1\u7684\u6838\u5fc3\u64cd\u4f5c\u3002<ul> <li>\u4f5c\u4e3a\u5b57\u7b26\u4e32: \u4f5c\u4e3a shell \u547d\u4ee4\u6267\u884c\u3002</li> <li>\u4f5c\u4e3a\u51fd\u6570: \u6267\u884c Lua \u51fd\u6570\u3002\u5b83\u63a5\u6536\u4e24\u4e2a\u53c2\u6570\uff1a<code>params</code> (\u5176\u53c2\u6570\u8868) \u548c <code>deps</code> (\u5176\u4f9d\u8d56\u9879\u7684\u8f93\u51fa\u8868)\u3002\u8be5\u51fd\u6570\u5fc5\u987b\u8fd4\u56de\uff1a<ol> <li><code>boolean</code>: <code>true</code> \u8868\u793a\u6210\u529f\uff0c<code>false</code> \u8868\u793a\u5931\u8d25\u3002</li> <li><code>string</code>: \u63cf\u8ff0\u7ed3\u679c\u7684\u6d88\u606f\u3002</li> <li><code>table</code> (\u53ef\u9009): \u5176\u4ed6\u4efb\u52a1\u53ef\u4ee5\u4f9d\u8d56\u7684\u8f93\u51fa\u8868\u3002</li> </ol> </li> </ul> </li> </ul>"},{"location":"zh/core-concepts/#_5","title":"\u4f9d\u8d56\u4e0e\u6267\u884c\u6d41\u7a0b","text":"<ul> <li><code>depends_on</code> (string \u6216 table): \u5728\u6b64\u4efb\u52a1\u8fd0\u884c\u4e4b\u524d\u5fc5\u987b\u6210\u529f\u5b8c\u6210\u7684\u4efb\u52a1\u540d\u79f0\u5217\u8868\u3002</li> <li><code>next_if_fail</code> (string \u6216 table): \u4ec5\u5f53 \u6b64\u4efb\u52a1\u5931\u8d25\u65f6\u624d\u8fd0\u884c\u7684\u4efb\u52a1\u540d\u79f0\u5217\u8868\u3002\u8fd9\u5bf9\u4e8e\u6e05\u7406\u6216\u901a\u77e5\u4efb\u52a1\u5f88\u6709\u7528\u3002</li> <li><code>async</code> (boolean): \u5982\u679c\u4e3a <code>true</code>\uff0c\u4efb\u52a1\u5c06\u5728\u540e\u53f0\u8fd0\u884c\uff0c\u8fd0\u884c\u5668\u4e0d\u4f1a\u7b49\u5f85\u5b83\u5b8c\u6210\u518d\u5f00\u59cb\u6267\u884c\u987a\u5e8f\u4e2d\u7684\u4e0b\u4e00\u4e2a\u4efb\u52a1\u3002</li> </ul>"},{"location":"zh/core-concepts/#_6","title":"\u9519\u8bef\u5904\u7406\u4e0e\u7a33\u5065\u6027","text":"<ul> <li><code>retries</code> (number): \u5982\u679c\u4efb\u52a1\u5931\u8d25\uff0c\u91cd\u8bd5\u7684\u6b21\u6570\u3002\u9ed8\u8ba4\u4e3a <code>0</code>\u3002</li> <li><code>timeout</code> (string): \u4e00\u4e2a\u6301\u7eed\u65f6\u95f4 (\u4f8b\u5982 <code>\"10s\"</code>, <code>\"1m\"</code>), \u5982\u679c\u4efb\u52a1\u4ecd\u5728\u8fd0\u884c\uff0c\u5219\u5728\u6b64\u65f6\u95f4\u540e\u7ec8\u6b62\u3002</li> </ul>"},{"location":"zh/core-concepts/#_7","title":"\u6761\u4ef6\u6267\u884c","text":"<ul> <li><code>run_if</code> (string \u6216 function): \u9664\u975e\u6ee1\u8db3\u6b64\u6761\u4ef6\uff0c\u5426\u5219\u5c06\u8df3\u8fc7\u8be5\u4efb\u52a1\u3002<ul> <li>\u4f5c\u4e3a\u5b57\u7b26\u4e32: \u4e00\u4e2a shell \u547d\u4ee4\u3002\u9000\u51fa\u4ee3\u7801 <code>0</code> \u8868\u793a\u6761\u4ef6\u6ee1\u8db3\u3002</li> <li>\u4f5c\u4e3a\u51fd\u6570: \u4e00\u4e2a\u8fd4\u56de <code>true</code> \u8868\u793a\u4efb\u52a1\u5e94\u8fd0\u884c\u7684 Lua \u51fd\u6570\u3002</li> </ul> </li> <li><code>abort_if</code> (string \u6216 function): \u5982\u679c\u6ee1\u8db3\u6b64\u6761\u4ef6\uff0c\u6574\u4e2a\u5de5\u4f5c\u6d41\u5c06\u88ab\u4e2d\u6b62\u3002<ul> <li>\u4f5c\u4e3a\u5b57\u7b26\u4e32: \u4e00\u4e2a shell \u547d\u4ee4\u3002\u9000\u51fa\u4ee3\u7801 <code>0</code> \u8868\u793a\u4e2d\u6b62\u3002</li> <li>\u4f5c\u4e3a\u51fd\u6570: \u4e00\u4e2a\u8fd4\u56de <code>true</code> \u8868\u793a\u4e2d\u6b62\u7684 Lua \u51fd\u6570\u3002</li> </ul> </li> </ul>"},{"location":"zh/core-concepts/#_8","title":"\u751f\u547d\u5468\u671f\u94a9\u5b50","text":"<ul> <li><code>pre_exec</code> (function): \u5728\u4e3b <code>command</code> \u4e4b\u524d \u8fd0\u884c\u7684 Lua \u51fd\u6570\u3002</li> <li><code>post_exec</code> (function): \u5728\u4e3b <code>command</code> \u6210\u529f\u5b8c\u6210 \u4e4b\u540e \u8fd0\u884c\u7684 Lua \u51fd\u6570\u3002</li> </ul>"},{"location":"zh/core-concepts/#_9","title":"\u53ef\u91cd\u7528\u6027","text":"<ul> <li><code>uses</code> (table): \u6307\u5b9a\u4ece\u53e6\u4e00\u4e2a\u6587\u4ef6\uff08\u901a\u8fc7 <code>import</code> \u52a0\u8f7d\uff09\u7684\u9884\u5b9a\u4e49\u4efb\u52a1\u4f5c\u4e3a\u57fa\u7840\u3002\u7136\u540e\uff0c\u5f53\u524d\u4efb\u52a1\u5b9a\u4e49\u53ef\u4ee5\u8986\u76d6 <code>params</code> \u6216 <code>description</code> \u7b49\u5c5e\u6027\u3002</li> <li><code>params</code> (table): \u53ef\u4ee5\u4f20\u9012\u7ed9\u4efb\u52a1\u7684 <code>command</code> \u51fd\u6570\u7684\u952e\u503c\u5bf9\u5b57\u5178\u3002</li> <li><code>artifacts</code> (string \u6216 table): \u4e00\u4e2a\u6587\u4ef6\u6a21\u5f0f (glob) \u6216\u6a21\u5f0f\u5217\u8868\uff0c\u6307\u5b9a\u6210\u529f\u8fd0\u884c\u540e\u5e94\u5c06\u4efb\u52a1 <code>workdir</code> \u4e2d\u7684\u54ea\u4e9b\u6587\u4ef6\u4fdd\u5b58\u4e3a\u5de5\u4ef6\u3002</li> <li><code>consumes</code> (string \u6216 table): \u524d\u4e00\u4e2a\u4efb\u52a1\u7684\u5de5\u4ef6\u540d\u79f0\uff08\u6216\u540d\u79f0\u5217\u8868\uff09\uff0c\u5728\u8fd0\u884c\u6b64\u4efb\u52a1\u4e4b\u524d\u5e94\u5c06\u5176\u590d\u5236\u5230\u6b64\u4efb\u52a1\u7684 <code>workdir</code> \u4e2d\u3002</li> </ul>"},{"location":"zh/core-concepts/#_10","title":"\u5de5\u4ef6\u7ba1\u7406","text":"<p>Sloth-Runner \u5141\u8bb8\u4efb\u52a1\u901a\u8fc7\u5de5\u4ef6\u673a\u5236\u76f8\u4e92\u5171\u4eab\u6587\u4ef6\u3002\u4e00\u4e2a\u4efb\u52a1\u53ef\u4ee5\u201c\u751f\u4ea7\u201d\u4e00\u4e2a\u6216\u591a\u4e2a\u6587\u4ef6\u4f5c\u4e3a\u5de5\u4ef6\uff0c\u540e\u7eed\u4efb\u52a1\u53ef\u4ee5\u201c\u6d88\u8d39\u201d\u8fd9\u4e9b\u5de5\u4ef6\u3002</p> <p>\u8fd9\u5bf9\u4e8e CI/CD \u7ba1\u9053\u975e\u5e38\u6709\u7528\uff0c\u5176\u4e2d\u6784\u5efa\u6b65\u9aa4\u53ef\u80fd\u4f1a\u751f\u6210\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\uff08\u5de5\u4ef6\uff09\uff0c\u7136\u540e\u7531\u6d4b\u8bd5\u6216\u90e8\u7f72\u6b65\u9aa4\u4f7f\u7528\u3002</p>"},{"location":"zh/core-concepts/#_11","title":"\u5de5\u4f5c\u539f\u7406","text":"<ol> <li> <p>\u751f\u4ea7\u5de5\u4ef6: \u5c06 <code>artifacts</code> \u952e\u6dfb\u52a0\u5230\u60a8\u7684\u4efb\u52a1\u5b9a\u4e49\u4e2d\u3002\u8be5\u503c\u53ef\u4ee5\u662f\u5355\u4e2a\u6587\u4ef6\u6a21\u5f0f (\u4f8b\u5982 <code>\"report.txt\"</code>) \u6216\u5217\u8868 (\u4f8b\u5982 <code>{\"*.log\", \"app.bin\"}</code>)\u3002\u4efb\u52a1\u6210\u529f\u8fd0\u884c\u540e\uff0c\u8fd0\u884c\u5668\u5c06\u5728\u4efb\u52a1\u7684 <code>workdir</code> \u4e2d\u67e5\u627e\u4e0e\u8fd9\u4e9b\u6a21\u5f0f\u5339\u914d\u7684\u6587\u4ef6\uff0c\u5e76\u5c06\u5b83\u4eec\u590d\u5236\u5230\u7ba1\u9053\u7684\u5171\u4eab\u5de5\u4ef6\u5b58\u50a8\u4e2d\u3002</p> </li> <li> <p>\u6d88\u8d39\u5de5\u4ef6: \u5c06 <code>consumes</code> \u952e\u6dfb\u52a0\u5230\u53e6\u4e00\u4e2a\u4efb\u52a1\u7684\u5b9a\u4e49\u4e2d\uff08\u901a\u5e38 <code>depends_on</code> \u751f\u4ea7\u8005\u4efb\u52a1\uff09\u3002\u8be5\u503c\u5e94\u8be5\u662f\u60a8\u8981\u4f7f\u7528\u7684\u5de5\u4ef6\u7684\u6587\u4ef6\u540d (\u4f8b\u5982 <code>\"report.txt\"</code>)\u3002\u5728\u6b64\u4efb\u52a1\u8fd0\u884c\u4e4b\u524d\uff0c\u8fd0\u884c\u5668\u4f1a\u5c06\u6307\u5b9a\u7684\u5de5\u4ef6\u4ece\u5171\u4eab\u5b58\u50a8\u590d\u5236\u5230\u6b64\u4efb\u52a1\u7684 <code>workdir</code> \u4e2d\uff0c\u4f7f\u5176\u53ef\u7528\u4e8e <code>command</code>\u3002</p> </li> </ol>"},{"location":"zh/core-concepts/#_12","title":"\u5de5\u4ef6\u793a\u4f8b","text":"<pre><code>Modern DSLs = {\n  [\"ci-pipeline\"] = {\n    description = \"\u6f14\u793a\u5de5\u4ef6\u7684\u4f7f\u7528\u3002\",\n    create_workdir_before_run = true,\n    tasks = {\n      {\n        name = \"build\",\n        description = \"\u521b\u5efa\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\u5e76\u5c06\u5176\u58f0\u660e\u4e3a\u5de5\u4ef6\u3002\",\n        command = \"echo 'binary_content' &gt; app.bin\",\n        artifacts = {\"app.bin\"}\n      },\n      {\n        name = \"test\",\n        description = \"\u6d88\u8d39\u4e8c\u8fdb\u5236\u6587\u4ef6\u4ee5\u8fd0\u884c\u6d4b\u8bd5\u3002\",\n        depends_on = \"build\",\n        consumes = {\"app.bin\"},\n        command = function(params)\n          -- \u6b64\u65f6, 'app.bin' \u5b58\u5728\u4e8e\u6b64\u4efb\u52a1\u7684 workdir \u4e2d\n          local content, err = fs.read(params.workdir .. \"/app.bin\")\n          if content == \"binary_content\" then\n            log.info(\"\u6210\u529f\u6d88\u8d39\u5de5\u4ef6\uff01\")\n            return true\n          else\n            return false, \"\u5de5\u4ef6\u5185\u5bb9\u4e0d\u6b63\u786e\uff01\"\n          end\n        end\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"zh/core-concepts/#_13","title":"\u5168\u5c40\u51fd\u6570","text":"<p><code>sloth-runner</code> \u5728 Lua \u73af\u5883\u4e2d\u63d0\u4f9b\u5168\u5c40\u51fd\u6570\u4ee5\u5e2e\u52a9\u7f16\u6392\u5de5\u4f5c\u6d41\u3002</p>"},{"location":"zh/core-concepts/#importpath","title":"<code>import(path)</code>","text":"<p>\u52a0\u8f7d\u53e6\u4e00\u4e2a Lua \u6587\u4ef6\u5e76\u8fd4\u56de\u5176\u8fd4\u56de\u7684\u503c\u3002\u8fd9\u662f\u521b\u5efa\u53ef\u91cd\u7528\u4efb\u52a1\u6a21\u5757\u7684\u4e3b\u8981\u673a\u5236\u3002\u8def\u5f84\u662f\u76f8\u5bf9\u4e8e\u8c03\u7528 <code>import</code> \u7684\u6587\u4ef6\u7684\u3002</p> <p>\u793a\u4f8b (<code>reusable_tasks.sloth</code>): <pre><code>-- \u5bfc\u5165\u4e00\u4e2a\u8fd4\u56de\u4efb\u52a1\u5b9a\u4e49\u8868\u7684\u6a21\u5757\nlocal docker_tasks = import(\"shared/docker.sloth\")\n\nModern DSLs = {\n  main = {\n    tasks = {\n      {\n        -- \u4f7f\u7528\u5bfc\u5165\u6a21\u5757\u4e2d\u7684 'build' \u4efb\u52a1\n        uses = docker_tasks.build,\n        params = { image_name = \"my-app\" }\n      }\n    }\n  }\n}\n</code></pre></p>"},{"location":"zh/core-concepts/#paralleltasks","title":"<code>parallel(tasks)</code>","text":"<p>\u5e76\u53d1\u6267\u884c\u4efb\u52a1\u5217\u8868\uff0c\u5e76\u7b49\u5f85\u6240\u6709\u4efb\u52a1\u5b8c\u6210\u3002</p> <ul> <li><code>tasks</code> (table): \u8981\u5e76\u884c\u8fd0\u884c\u7684\u4efb\u52a1\u8868\u5217\u8868\u3002</li> </ul> <p>\u793a\u4f8b: <pre><code>command = function()\n  log.info(\"\u5e76\u884c\u542f\u52a83\u4e2a\u4efb\u52a1...\")\n  local results, err = parallel({\n    { name = \"short_task\", command = \"sleep 1\" },\n    { name = \"medium_task\", command = \"sleep 2\" },\n    { name = \"long_task\", command = \"sleep 3\" }\n  })\n  if err then\n    return false, \"\u5e76\u884c\u6267\u884c\u5931\u8d25\"\n  end\n  return true, \"\u6240\u6709\u5e76\u884c\u4efb\u52a1\u5df2\u5b8c\u6210\u3002\"\nend\n</code></pre></p>"},{"location":"zh/core-concepts/#exporttable","title":"<code>export(table)</code>","text":"<p>\u5c06\u6570\u636e\u4ece\u811a\u672c\u7684\u4efb\u4f55\u4f4d\u7f6e\u5bfc\u51fa\u5230 CLI\u3002\u5f53\u4f7f\u7528 <code>--return</code> \u6807\u5fd7\u65f6\uff0c\u6240\u6709\u5bfc\u51fa\u7684\u8868\u90fd\u4f1a\u4e0e\u6700\u7ec8\u4efb\u52a1\u7684\u8f93\u51fa\u5408\u5e76\u6210\u4e00\u4e2a JSON \u5bf9\u8c61\u3002</p> <ul> <li><code>table</code>: \u8981\u5bfc\u51fa\u7684 Lua \u8868\u3002</li> </ul> <p>\u793a\u4f8b: <pre><code>command = function()\n  export({ important_value = \"\u6765\u81ea\u4efb\u52a1\u4e2d\u95f4\u7684\u6570\u636e\" })\n  return true, \"\u4efb\u52a1\u5b8c\u6210\", { final_output = \"\u4e00\u4e9b\u7ed3\u679c\" }\nend\n</code></pre> \u4f7f\u7528 <code>--return</code> \u8fd0\u884c\u5c06\u4ea7\u751f\uff1a <pre><code>{\n  \"important_value\": \"\u6765\u81ea\u4efb\u52a1\u4e2d\u95f4\u7684\u6570\u636e\",\n  \"final_output\": \"\u4e00\u4e9b\u7ed3\u679c\"\n}\n</code></pre></p>"},{"location":"zh/distributed/","title":"\u5206\u5e03\u5f0f\u4efb\u52a1\u6267\u884c","text":"<p><code>sloth-runner</code> \u652f\u6301\u5206\u5e03\u5f0f\u4efb\u52a1\u6267\u884c\uff0c\u5141\u8bb8\u60a8\u5728\u8fdc\u7a0b\u4ee3\u7406\u4e0a\u8fd0\u884c\u4efb\u52a1\u3002\u8fd9\u4f7f\u5f97\u53ef\u6269\u5c55\u7684\u5206\u5e03\u5f0f\u5de5\u4f5c\u6d41\u6210\u4e3a\u53ef\u80fd\uff0c\u5176\u4e2d\u7ba1\u9053\u7684\u4e0d\u540c\u90e8\u5206\u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u673a\u5668\u4e0a\u6267\u884c\u3002</p>"},{"location":"zh/distributed/#_2","title":"\u5de5\u4f5c\u539f\u7406","text":"<p><code>sloth-runner</code> \u4e2d\u7684\u5206\u5e03\u5f0f\u6267\u884c\u6a21\u578b\u9075\u5faa\u4e3b\u4ece\u67b6\u6784\uff1a</p> <ol> <li>\u4e3b\u8282\u70b9\uff1a \u4e3b\u8981\u7684 <code>sloth-runner</code> \u5b9e\u4f8b\u5145\u5f53\u4e3b\u8282\u70b9\u3002\u5b83\u89e3\u6790\u5de5\u4f5c\u6d41\u5b9a\u4e49\uff0c\u8bc6\u522b\u914d\u7f6e\u4e3a\u5728\u8fdc\u7a0b\u4ee3\u7406\u4e0a\u8fd0\u884c\u7684\u4efb\u52a1\uff0c\u5e76\u5206\u6d3e\u5b83\u4eec\u3002</li> <li>\u4ee3\u7406\uff1a \u5728\u8fdc\u7a0b\u673a\u5668\u4e0a\u4ee5 <code>agent</code> \u6a21\u5f0f\u8fd0\u884c\u7684 <code>sloth-runner</code> \u5b9e\u4f8b\u3002\u5b83\u4fa6\u542c\u6765\u81ea\u4e3b\u8282\u70b9\u7684\u4f20\u5165\u4efb\u52a1\u6267\u884c\u8bf7\u6c42\uff0c\u6267\u884c\u4efb\u52a1\uff0c\u5e76\u5c06\u7ed3\u679c\u53d1\u56de\u3002</li> </ol>"},{"location":"zh/distributed/#_3","title":"\u914d\u7f6e\u8fdc\u7a0b\u4efb\u52a1","text":"<p>\u8981\u5728\u8fdc\u7a0b\u4ee3\u7406\u4e0a\u8fd0\u884c\u4efb\u52a1\uff0c\u60a8\u9700\u8981\u5728\u4efb\u52a1\u7ec4\u6216\u5355\u4e2a\u4efb\u52a1\u5b9a\u4e49\u4e2d\u6307\u5b9a <code>delegate_to</code> \u5b57\u6bb5\u3002</p>"},{"location":"zh/distributed/#1","title":"1. \u5728\u4efb\u52a1\u7ec4\u7ea7\u522b\u59d4\u6258\u7ed9\u4ee3\u7406","text":"<p>\u60a8\u53ef\u4ee5\u4f7f\u7528 <code>delegate_to</code> \u5b57\u6bb5\u76f4\u63a5\u5728 <code>Modern DSLs</code> \u7ec4\u4e2d\u5b9a\u4e49\u4ee3\u7406\u3002\u6b64\u7ec4\u4e2d\u7684\u6240\u6709\u4efb\u52a1\u90fd\u5c06\u59d4\u6258\u7ed9\u6b64\u4ee3\u7406\uff0c\u9664\u975e\u88ab\u4efb\u52a1\u7279\u5b9a\u7684 <code>delegate_to</code> \u8986\u76d6\u3002</p> <pre><code>Modern DSLs = {\n  my_distributed_group = {\n    description = \"\u4e00\u4e2a\u5305\u542b\u5206\u5e03\u5f0f\u4efb\u52a1\u7684\u4efb\u52a1\u7ec4\u3002\",\n    delegate_to = { address = \"localhost:50051\" }, -- \u4e3a\u6574\u4e2a\u7ec4\u5b9a\u4e49\u4ee3\u7406\n    tasks = {\n      {\n        name = \"remote_hello\",\n        description = \"\u5728\u8fdc\u7a0b\u4ee3\u7406\u4e0a\u8fd0\u884c hello world \u4efb\u52a1\u3002\",\n        -- \u6b64\u5904\u4e0d\u9700\u8981 'delegate_to' \u5b57\u6bb5\uff0c\u5b83\u7ee7\u627f\u81ea\u7ec4\n        command = function(params)\n          log.info(\"\u6765\u81ea\u8fdc\u7a0b\u4ee3\u7406\u7684\u95ee\u5019\uff01\")\n          return true, \"\u8fdc\u7a0b\u4efb\u52a1\u5df2\u6267\u884c\u3002\"\n        end\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"zh/distributed/#2","title":"2. \u5728\u4efb\u52a1\u7ea7\u522b\u59d4\u6258\u7ed9\u4ee3\u7406","text":"<p>\u6216\u8005\uff0c\u60a8\u53ef\u4ee5\u76f4\u63a5\u5728\u5355\u4e2a\u4efb\u52a1\u4e0a\u6307\u5b9a <code>delegate_to</code> \u5b57\u6bb5\u3002\u8fd9\u5c06\u8986\u76d6\u4efb\u4f55\u7ec4\u7ea7\u522b\u7684\u59d4\u6258\u6216\u5141\u8bb8\u5373\u5e2d\u8fdc\u7a0b\u6267\u884c\u3002</p> <pre><code>Modern DSLs = {\n  my_group = {\n    description = \"\u4e00\u4e2a\u5305\u542b\u7279\u5b9a\u8fdc\u7a0b\u4efb\u52a1\u7684\u4efb\u52a1\u7ec4\u3002\",\n    tasks = {\n      {\n        name = \"specific_remote_task\",\n        description = \"\u5728\u7279\u5b9a\u8fdc\u7a0b\u4ee3\u7406\u4e0a\u8fd0\u884c\u6b64\u4efb\u52a1\u3002\",\n        delegate_to = { address = \"192.168.1.100:50051\" }, -- \u4ec5\u4e3a\u6b64\u4efb\u52a1\u5b9a\u4e49\u4ee3\u7406\n        command = function(params)\n          log.info(\"\u6765\u81ea\u7279\u5b9a\u8fdc\u7a0b\u4ee3\u7406\u7684\u95ee\u5019\uff01\")\n          return true, \"\u7279\u5b9a\u8fdc\u7a0b\u4efb\u52a1\u5df2\u6267\u884c\u3002\"\n        end\n      },\n      {\n        name = \"local_task\",\n        description = \"\u6b64\u4efb\u52a1\u5728\u672c\u5730\u8fd0\u884c\u3002\",\n        command = \"echo '\u6765\u81ea\u672c\u5730\u673a\u5668\u7684\u95ee\u5019\uff01'\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"zh/distributed/#_4","title":"\u8fd0\u884c\u4ee3\u7406","text":"<p>\u8981\u4ee5\u4ee3\u7406\u6a21\u5f0f\u542f\u52a8 <code>sloth-runner</code> \u5b9e\u4f8b\uff0c\u8bf7\u4f7f\u7528 <code>agent</code> \u547d\u4ee4\uff1a</p> <pre><code>sloth-runner agent -p 50051\n</code></pre> <ul> <li><code>-p, --port</code>\uff1a\u6307\u5b9a\u4ee3\u7406\u5e94\u4fa6\u542c\u7684\u7aef\u53e3\u3002\u9ed8\u8ba4\u4e3a <code>50051</code>\u3002</li> </ul> <p>\u5f53\u4ee3\u7406\u542f\u52a8\u65f6\uff0c\u5b83\u5c06\u4fa6\u542c\u6765\u81ea\u4e3b <code>sloth-runner</code> \u5b9e\u4f8b\u7684\u4f20\u5165 gRPC \u8bf7\u6c42\u3002\u6536\u5230\u4efb\u52a1\u540e\uff0c\u5b83\u5c06\u5728\u5176\u672c\u5730\u73af\u5883\u4e2d\u6267\u884c\u4efb\u52a1\uff0c\u5e76\u5c06\u7ed3\u679c\u4ee5\u53ca\u4efb\u4f55\u66f4\u65b0\u7684\u5de5\u4f5c\u533a\u6587\u4ef6\u8fd4\u56de\u7ed9\u4e3b\u8282\u70b9\u3002</p>"},{"location":"zh/distributed/#_5","title":"\u5de5\u4f5c\u533a\u540c\u6b65","text":"<p>\u5f53\u4efb\u52a1\u5206\u6d3e\u5230\u8fdc\u7a0b\u4ee3\u7406\u65f6\uff0c<code>sloth-runner</code> \u4f1a\u81ea\u52a8\u5904\u7406\u4efb\u52a1\u5de5\u4f5c\u533a\u7684\u540c\u6b65\uff1a</p> <ol> <li>\u4e3b\u8282\u70b9\u5230\u4ee3\u7406\uff1a \u4e3b\u8282\u70b9\u521b\u5efa\u5f53\u524d\u4efb\u52a1\u5de5\u4f5c\u76ee\u5f55\u7684 tarball\uff0c\u5e76\u5c06\u5176\u53d1\u9001\u5230\u4ee3\u7406\u3002</li> <li>\u4ee3\u7406\u6267\u884c\uff1a \u4ee3\u7406\u5c06 tarball \u89e3\u538b\u7f29\u5230\u4e34\u65f6\u76ee\u5f55\u4e2d\uff0c\u5728\u8be5\u76ee\u5f55\u4e2d\u6267\u884c\u4efb\u52a1\uff0c\u5e76\u6355\u83b7\u5bf9\u4e34\u65f6\u76ee\u5f55\u4e2d\u6587\u4ef6\u6240\u505a\u7684\u4efb\u4f55\u66f4\u6539\u3002</li> <li>\u4ee3\u7406\u5230\u4e3b\u8282\u70b9\uff1a \u4efb\u52a1\u5b8c\u6210\u540e\uff0c\u4ee3\u7406\u521b\u5efa\u4fee\u6539\u540e\u7684\u4e34\u65f6\u76ee\u5f55\u7684 tarball\uff0c\u5e76\u5c06\u5176\u53d1\u56de\u7ed9\u4e3b\u8282\u70b9\u3002\u7136\u540e\uff0c\u4e3b\u8282\u70b9\u89e3\u538b\u7f29\u6b64 tarball\uff0c\u7528\u8fdc\u7a0b\u4efb\u52a1\u6240\u505a\u7684\u4efb\u4f55\u66f4\u6539\u66f4\u65b0\u5176\u672c\u5730\u5de5\u4f5c\u533a\u3002</li> </ol>"},{"location":"zh/getting-started/","title":"\u5feb\u901f\u5165\u95e8","text":"<p>\u6b22\u8fce\u4f7f\u7528 Sloth-Runner\uff01\u672c\u6307\u5357\u5c06\u5e2e\u52a9\u60a8\u5feb\u901f\u5f00\u59cb\u4f7f\u7528\u8be5\u5de5\u5177\u3002</p> <p>\ud83d\udcdd \u91cd\u8981\u8bf4\u660e\uff1a \u4ece\u5f53\u524d\u7248\u672c\u5f00\u59cb\uff0cSloth Runner \u5de5\u4f5c\u6d41\u6587\u4ef6\u4f7f\u7528 <code>.sloth</code> \u6269\u5c55\u540d\u800c\u4e0d\u662f <code>.sloth</code>\u3002Lua \u8bed\u6cd5\u4fdd\u6301\u4e0d\u53d8 - \u53ea\u662f\u6587\u4ef6\u6269\u5c55\u540d\u66f4\u6539\u4e3a\u66f4\u597d\u5730\u8bc6\u522b Sloth Runner DSL \u6587\u4ef6\u3002</p>"},{"location":"zh/getting-started/#_2","title":"\u5b89\u88c5","text":"<p>\u8981\u5728\u60a8\u7684\u7cfb\u7edf\u4e0a\u5b89\u88c5 <code>sloth-runner</code>\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u63d0\u4f9b\u7684 <code>install.sh</code> \u811a\u672c\u3002\u6b64\u811a\u672c\u4f1a\u81ea\u52a8\u68c0\u6d4b\u60a8\u7684\u64cd\u4f5c\u7cfb\u7edf\u548c\u67b6\u6784\uff0c\u4ece GitHub \u4e0b\u8f7d\u6700\u65b0\u7248\u672c\uff0c\u5e76\u5c06 <code>sloth-runner</code> \u53ef\u6267\u884c\u6587\u4ef6\u653e\u7f6e\u5728 <code>/usr/local/bin</code> \u4e2d\u3002</p> <pre><code>bash &lt;(curl -sL https://raw.githubusercontent.com/chalkan3-sloth/sloth-runner/master/install.sh)\n</code></pre> <p>\u6ce8\u610f\uff1a <code>install.sh</code> \u811a\u672c\u9700\u8981 <code>sudo</code> \u6743\u9650\u624d\u80fd\u5c06\u53ef\u6267\u884c\u6587\u4ef6\u79fb\u52a8\u5230 <code>/usr/local/bin</code>\u3002</p>"},{"location":"zh/getting-started/#_3","title":"\u57fa\u672c\u7528\u6cd5","text":""},{"location":"zh/getting-started/#_4","title":"\u5806\u6808\u7ba1\u7406","text":"<pre><code># \u521b\u5efa\u65b0\u5806\u6808\nsloth-runner stack new my-app --description \"\u5e94\u7528\u7a0b\u5e8f\u90e8\u7f72\u5806\u6808\"\n\n# \u5728\u5806\u6808\u4e0a\u8fd0\u884c\u5de5\u4f5c\u6d41\nsloth-runner run my-app -f examples/basic_pipeline.sloth\n\n# \u5217\u51fa\u6240\u6709\u5806\u6808\nsloth-runner stack list\n\n# \u67e5\u770b\u5806\u6808\u8be6\u60c5\nsloth-runner stack show my-app\n</code></pre>"},{"location":"zh/getting-started/#_5","title":"\u76f4\u63a5\u5de5\u4f5c\u6d41\u6267\u884c","text":"<p>\u8981\u76f4\u63a5\u8fd0\u884c\u5de5\u4f5c\u6d41\u6587\u4ef6\uff1a</p> <pre><code>sloth-runner run -f examples/basic_pipeline.sloth\n</code></pre> <p>\u8981\u5217\u51fa\u6587\u4ef6\u4e2d\u7684\u4efb\u52a1\uff1a</p> <pre><code>sloth-runner list -f examples/basic_pipeline.sloth\n</code></pre>"},{"location":"zh/getting-started/#_6","title":"\u4e0b\u4e00\u6b65","text":"<p>\u73b0\u5728\u60a8\u5df2\u7ecf\u5b89\u88c5\u5e76\u8fd0\u884c\u4e86 Sloth-Runner\uff0c\u8bf7\u63a2\u7d22\u6838\u5fc3\u6982\u5ff5\u4ee5\u4e86\u89e3\u5982\u4f55\u5b9a\u4e49\u4efb\u52a1\uff0c\u6216\u8005\u76f4\u63a5\u6df1\u5165\u4e86\u89e3\u65b0\u7684\u5185\u7f6e\u6a21\u5757\u4ee5\u4f7f\u7528 Git\u3001Pulumi \u548c Salt \u8fdb\u884c\u9ad8\u7ea7\u81ea\u52a8\u5316\u3002</p> <p>English | Portugu\u00eas | \u4e2d\u6587</p>"},{"location":"zh/nvim-plugin/","title":"\ud83e\udda5 Neovim \u63d2\u4ef6","text":"<p>\u4e3a Neovim/LunarVim \u63d0\u4f9b\u5b8c\u6574\u7684 Sloth Runner DSL \u652f\u6301</p> <p>Sloth Runner Neovim \u63d2\u4ef6\u4e3a\u5904\u7406 <code>.sloth</code> \u5de5\u4f5c\u6d41\u6587\u4ef6\u63d0\u4f9b\u5168\u9762\u7684 IDE \u529f\u80fd\uff0c\u5305\u62ec\u8bed\u6cd5\u9ad8\u4eae\u3001\u4ee3\u7801\u8865\u5168\u548c\u96c6\u6210\u4efb\u52a1\u6267\u884c\u3002</p>"},{"location":"zh/nvim-plugin/#_1","title":"\u2728 \u529f\u80fd\u7279\u6027","text":""},{"location":"zh/nvim-plugin/#_2","title":"\ud83c\udfa8 \u4e30\u5bcc\u7684\u8bed\u6cd5\u9ad8\u4eae","text":"<ul> <li>\u81ea\u5b9a\u4e49\u989c\u8272 \u7528\u4e8e DSL \u5173\u952e\u5b57\u3001\u65b9\u6cd5\u548c\u6a21\u5757</li> <li>\u5b57\u7b26\u4e32\u63d2\u503c \u9ad8\u4eae\u663e\u793a <code>${variable}</code> \u8bed\u6cd5</li> <li>\u6587\u4ef6\u8def\u5f84\u68c0\u6d4b \u7528\u4e8e\u811a\u672c\u548c\u914d\u7f6e\u6587\u4ef6</li> <li>\u73af\u5883\u53d8\u91cf \u9ad8\u4eae\u663e\u793a</li> <li>\u6ce8\u91ca\u652f\u6301 \u5e26\u6709\u62fc\u5199\u68c0\u67e5</li> </ul>"},{"location":"zh/nvim-plugin/#_3","title":"\ud83d\udcc1 \u667a\u80fd\u6587\u4ef6\u68c0\u6d4b","text":"<ul> <li>\u81ea\u52a8\u68c0\u6d4b <code>.sloth</code> \u6587\u4ef6\u5e76\u5e94\u7528\u9002\u5f53\u7684\u9ad8\u4eae</li> <li>\u5411\u540e\u517c\u5bb9 <code>.lua</code> \u6269\u5c55\u540d</li> <li>\u6587\u4ef6\u6d4f\u89c8\u5668\u4e2d\u7684\u81ea\u5b9a\u4e49\u6587\u4ef6\u56fe\u6807 (\ud83e\udda5)</li> </ul>"},{"location":"zh/nvim-plugin/#_4","title":"\u26a1 \u4ee3\u7801\u8865\u5168","text":"<ul> <li>\u667a\u80fd\u8865\u5168 DSL \u65b9\u6cd5\uff1a<code>command</code>\u3001<code>description</code>\u3001<code>timeout</code> \u7b49</li> <li>\u6a21\u5757\u8865\u5168 \u5185\u7f6e\u6a21\u5757\uff1a<code>exec</code>\u3001<code>fs</code>\u3001<code>net</code>\u3001<code>aws</code> \u7b49</li> <li>\u51fd\u6570\u8865\u5168 \u5e38\u7528\u6a21\u5f0f\uff1a<code>task()</code>\u3001<code>workflow.define()</code></li> </ul>"},{"location":"zh/nvim-plugin/#_5","title":"\ud83d\udd27 \u96c6\u6210\u6267\u884c\u5668","text":"<ul> <li>\u8fd0\u884c\u5de5\u4f5c\u6d41 \u76f4\u63a5\u5728 Neovim \u4e2d\u4f7f\u7528 <code>&lt;leader&gt;sr</code></li> <li>\u5217\u51fa\u4efb\u52a1 \u5f53\u524d\u6587\u4ef6\u4e2d\u7684\u4efb\u52a1\u4f7f\u7528 <code>&lt;leader&gt;sl</code></li> <li>\u8bd5\u8fd0\u884c\u652f\u6301 \u7528\u4e8e\u6d4b\u8bd5\u5de5\u4f5c\u6d41</li> </ul>"},{"location":"zh/nvim-plugin/#_6","title":"\ud83d\udccb \u4ee3\u7801\u7247\u6bb5\u548c\u6a21\u677f","text":"<ul> <li>\u5feb\u901f\u4efb\u52a1\u521b\u5efa \u4f7f\u7528 <code>_task</code> \u7f29\u5199</li> <li>\u5de5\u4f5c\u6d41\u6a21\u677f \u4f7f\u7528 <code>_workflow</code> \u7f29\u5199</li> <li>\u51fd\u6570\u6a21\u677f \u4f7f\u7528 <code>_cmd</code> \u7f29\u5199</li> <li>\u81ea\u52a8\u751f\u6210\u6a21\u677f \u7528\u4e8e\u65b0\u7684 <code>.sloth</code> \u6587\u4ef6</li> </ul>"},{"location":"zh/nvim-plugin/#_7","title":"\ud83c\udfaf \u6587\u672c\u5bf9\u8c61\u548c\u5bfc\u822a","text":"<ul> <li>\u9009\u62e9\u4efb\u52a1\u5757 \u4f7f\u7528 <code>vit</code> (visual in task)</li> <li>\u9009\u62e9\u5de5\u4f5c\u6d41\u5757 \u4f7f\u7528 <code>viw</code> (visual in workflow)</li> <li>\u667a\u80fd\u6298\u53e0 \u53ef\u6298\u53e0\u7684\u4ee3\u7801\u6bb5</li> <li>\u667a\u80fd\u7f29\u8fdb \u7528\u4e8e DSL \u94fe\u5f0f\u8c03\u7528</li> </ul>"},{"location":"zh/nvim-plugin/#_8","title":"\ud83d\ude80 \u5feb\u901f\u8bbe\u7f6e","text":""},{"location":"zh/nvim-plugin/#lunarvim","title":"LunarVim \u7528\u6237","text":"<p>\u6dfb\u52a0\u5230\u4f60\u7684 <code>~/.config/lvim/config.lua</code>\uff1a</p> <pre><code>-- \u7981\u7528\u81ea\u52a8\u683c\u5f0f\u5316\uff08\u63a8\u8350\uff09\nlvim.format_on_save.enabled = false\n\n-- \u914d\u7f6e sloth \u6587\u4ef6\u56fe\u6807\nrequire('nvim-web-devicons').setup {\n  override_by_extension = {\n    [\"sloth\"] = {\n      icon = \"\ud83e\udda5\",\n      color = \"#8B4513\",\n      name = \"SlothDSL\"\n    }\n  }\n}\n\n-- sloth runner \u6309\u952e\u6620\u5c04\nlvim.keys.normal_mode[\"&lt;leader&gt;sr\"] = function()\n  local file = vim.api.nvim_buf_get_name(0)\n  if file:match(\"%.sloth$\") then\n    vim.cmd(\"split | terminal sloth-runner run -f \" .. vim.fn.shellescape(file))\n  end\nend\n\nlvim.keys.normal_mode[\"&lt;leader&gt;sl\"] = function()\n  local file = vim.api.nvim_buf_get_name(0)\n  if file:match(\"%.sloth$\") then\n    vim.cmd(\"split | terminal sloth-runner list -f \" .. vim.fn.shellescape(file))\n  end\nend\n\n-- \u624b\u52a8\u683c\u5f0f\u5316\u547d\u4ee4\nlvim.keys.normal_mode[\"&lt;leader&gt;sf\"] = \":SlothFormat&lt;CR&gt;\"\n</code></pre>"},{"location":"zh/nvim-plugin/#neovim_1","title":"\u6807\u51c6 Neovim","text":"<p>\u4f7f\u7528 lazy.nvim\uff1a</p> <pre><code>{\n  dir = \"/path/to/sloth-runner/nvim-plugin\",\n  name = \"sloth-runner\",\n  ft = { \"sloth\" },\n  config = function()\n    require(\"sloth-runner\").setup({\n      runner = {\n        command = \"sloth-runner\",\n        keymaps = {\n          run_file = \"&lt;leader&gt;sr\",\n          list_tasks = \"&lt;leader&gt;sl\",\n          dry_run = \"&lt;leader&gt;st\",\n          debug = \"&lt;leader&gt;sd\",\n        }\n      },\n      completion = {\n        enable = true,\n        snippets = true,\n      },\n      folding = {\n        enable = true,\n        auto_close = false,\n      }\n    })\n  end,\n}\n</code></pre>"},{"location":"zh/nvim-plugin/#_9","title":"\ud83d\udcdd \u6309\u952e\u6620\u5c04","text":"\u6309\u952e \u52a8\u4f5c \u63cf\u8ff0 <code>&lt;leader&gt;sr</code> \u8fd0\u884c\u6587\u4ef6 \u6267\u884c\u5f53\u524d <code>.sloth</code> \u5de5\u4f5c\u6d41 <code>&lt;leader&gt;sl</code> \u5217\u51fa\u4efb\u52a1 \u663e\u793a\u5f53\u524d\u6587\u4ef6\u4e2d\u7684\u6240\u6709\u4efb\u52a1 <code>&lt;leader&gt;st</code> \u8bd5\u8fd0\u884c \u6d4b\u8bd5\u5de5\u4f5c\u6d41\u800c\u4e0d\u6267\u884c <code>&lt;leader&gt;sd</code> \u8c03\u8bd5 \u8fd0\u884c\u5e76\u8f93\u51fa\u8c03\u8bd5\u4fe1\u606f <code>&lt;leader&gt;sf</code> \u683c\u5f0f\u5316 \u683c\u5f0f\u5316\u5f53\u524d\u6587\u4ef6\uff08\u624b\u52a8\uff09"},{"location":"zh/nvim-plugin/#_10","title":"\ud83c\udfa8 \u4ee3\u7801\u7247\u6bb5","text":""},{"location":"zh/nvim-plugin/#_11","title":"\u5feb\u901f\u4efb\u52a1\u521b\u5efa","text":"<p>\u8f93\u5165 <code>_task</code> \u5e76\u6309 Tab\uff1a</p> <pre><code>local task_name = task(\"\")\n    :description(\"\")\n    :command(function(params, deps)\n        -- TODO: \u5b9e\u73b0\n        return true\n    end)\n    :build()\n</code></pre>"},{"location":"zh/nvim-plugin/#_12","title":"\u5feb\u901f\u5de5\u4f5c\u6d41\u521b\u5efa","text":"<p>\u8f93\u5165 <code>_workflow</code> \u5e76\u6309 Tab\uff1a</p> <pre><code>workflow.define(\"\", {\n    description = \"\",\n    version = \"1.0.0\",\n    tasks = {\n        -- \u4efb\u52a1\u5728\u8fd9\u91cc\n    }\n})\n</code></pre>"},{"location":"zh/nvim-plugin/#_13","title":"\u5feb\u901f\u547d\u4ee4\u51fd\u6570","text":"<p>\u8f93\u5165 <code>_cmd</code> \u5e76\u6309 Tab\uff1a</p> <pre><code>:command(function(params, deps)\n    -- TODO: \u5b9e\u73b0\n    return true\nend)\n</code></pre>"},{"location":"zh/nvim-plugin/#_14","title":"\ud83d\udee0\ufe0f \u624b\u52a8\u5b89\u88c5","text":"<ol> <li> <p>\u514b\u9686\u6216\u590d\u5236\u63d2\u4ef6\u6587\u4ef6\uff1a <pre><code>cp -r /path/to/sloth-runner/nvim-plugin ~/.config/nvim/\n</code></pre></p> </li> <li> <p>\u6dfb\u52a0\u5230\u4f60\u7684 Neovim \u914d\u7f6e\uff1a <pre><code>-- \u6dfb\u52a0\u5230 init.lua \u6216 init.vim\nvim.opt.runtimepath:append(\"~/.config/nvim/nvim-plugin\")\n</code></pre></p> </li> <li> <p>\u91cd\u542f Neovim \u5e76\u6253\u5f00 <code>.sloth</code> \u6587\u4ef6</p> </li> </ol>"},{"location":"zh/nvim-plugin/#_15","title":"\ud83d\udc1b \u6545\u969c\u6392\u9664","text":""},{"location":"zh/nvim-plugin/#_16","title":"\u8bed\u6cd5\u9ad8\u4eae\u4e0d\u5de5\u4f5c","text":"<ul> <li>\u786e\u4fdd\u6587\u4ef6\u6709 <code>.sloth</code> \u6269\u5c55\u540d</li> <li>\u5982\u679c\u9700\u8981\uff0c\u624b\u52a8\u8fd0\u884c <code>:set filetype=sloth</code></li> <li>\u68c0\u67e5\u63d2\u4ef6\u6587\u4ef6\u662f\u5426\u5728\u6b63\u786e\u4f4d\u7f6e</li> </ul>"},{"location":"zh/nvim-plugin/#_17","title":"\u6309\u952e\u6620\u5c04\u4e0d\u5de5\u4f5c","text":"<ul> <li>\u9a8c\u8bc1 <code>sloth-runner</code> \u5728\u4f60\u7684 PATH \u4e2d</li> <li>\u68c0\u67e5\u6309\u952e\u662f\u5426\u4e0e\u5176\u4ed6\u63d2\u4ef6\u51b2\u7a81</li> <li>\u4f7f\u7528 <code>:map &lt;leader&gt;sr</code> \u9a8c\u8bc1\u6620\u5c04\u662f\u5426\u5b58\u5728</li> </ul>"},{"location":"zh/nvim-plugin/#_18","title":"\u4ee3\u7801\u8865\u5168\u4e0d\u663e\u793a","text":"<ul> <li>\u786e\u4fdd\u8865\u5168\u5df2\u542f\u7528\uff1a<code>:set completeopt=menu,menuone,noselect</code></li> <li>\u5c1d\u8bd5\u624b\u52a8\u89e6\u53d1 <code>&lt;C-x&gt;&lt;C-o&gt;</code></li> <li>\u68c0\u67e5 omnifunc \u662f\u5426\u5df2\u8bbe\u7f6e\uff1a<code>:set omnifunc?</code></li> </ul>"},{"location":"zh/nvim-plugin/#_19","title":"\ud83d\udcd6 \u793a\u4f8b","text":""},{"location":"zh/nvim-plugin/#_20","title":"\u57fa\u672c\u5de5\u4f5c\u6d41\u6587\u4ef6","text":"<pre><code>-- deployment.sloth\nlocal deploy_task = task(\"deploy_app\")\n    :description(\"\u90e8\u7f72\u5e94\u7528\u5230\u751f\u4ea7\u73af\u5883\")\n    :command(function(params, deps)\n        local result = exec.run(\"kubectl apply -f deployment.yaml\")\n        if not result.success then\n            log.error(\"\u90e8\u7f72\u5931\u8d25: \" .. result.stderr)\n            return false\n        end\n\n        log.info(\"\ud83d\ude80 \u90e8\u7f72\u6210\u529f!\")\n        return true\n    end)\n    :timeout(300)\n    :retries(3)\n    :build()\n\nworkflow.define(\"production_deployment\", {\n    description = \"\u751f\u4ea7\u73af\u5883\u90e8\u7f72\u5de5\u4f5c\u6d41\",\n    version = \"1.0.0\",\n    tasks = { deploy_task }\n})\n</code></pre> <p>\u5b89\u88c5\u63d2\u4ef6\u540e\uff0c\u6b64\u6587\u4ef6\u5c06\u5177\u6709\uff1a - \u8bed\u6cd5\u9ad8\u4eae \u7528\u4e8e\u5173\u952e\u5b57\u3001\u51fd\u6570\u548c\u5b57\u7b26\u4e32 - \u4ee3\u7801\u8865\u5168 \u5728\u8f93\u5165\u65b9\u6cd5\u540d\u65f6 - \u5feb\u901f\u6267\u884c \u4f7f\u7528 <code>&lt;leader&gt;sr</code> - \u4efb\u52a1\u5217\u8868 \u4f7f\u7528 <code>&lt;leader&gt;sl</code></p>"},{"location":"zh/nvim-plugin/#_21","title":"\ud83d\ude80 \u4e0b\u4e00\u6b65","text":"<ul> <li>\u5b66\u4e60 DSL\uff1a \u67e5\u770b \u6838\u5fc3\u6982\u5ff5</li> <li>\u5c1d\u8bd5\u793a\u4f8b\uff1a \u53c2\u89c1 \u793a\u4f8b\u6307\u5357</li> <li>\u9ad8\u7ea7\u529f\u80fd\uff1a \u63a2\u7d22 \u9ad8\u7ea7\u529f\u80fd</li> <li>API \u53c2\u8003\uff1a \u9605\u8bfb Lua API \u6587\u6863</li> </ul> <p>Neovim \u63d2\u4ef6\u8ba9\u7f16\u5199 Sloth \u5de5\u4f5c\u6d41\u53d8\u5f97\u8f7b\u800c\u6613\u4e3e\uff0c\u63d0\u4f9b\u5b8c\u6574\u7684 IDE \u652f\u6301\u3002\u5f00\u59cb\u81ea\u4fe1\u5730\u521b\u5efa\u5f3a\u5927\u7684\u81ea\u52a8\u5316\u5de5\u4f5c\u6d41\uff01\ud83e\udda5\u2728</p>"},{"location":"zh/plugin-development/","title":"\ud83d\udd0c \u63d2\u4ef6\u5f00\u53d1","text":"<p>\u4e3a Sloth Runner \u5e73\u53f0\u6784\u5efa\u6269\u5c55</p> <p>Sloth Runner \u63d0\u4f9b\u4e86\u5f3a\u5927\u7684\u63d2\u4ef6\u7cfb\u7edf\uff0c\u5141\u8bb8\u5f00\u53d1\u8005\u4f7f\u7528\u81ea\u5b9a\u4e49\u529f\u80fd\u6269\u5c55\u5e73\u53f0\u3002\u672c\u6307\u5357\u6db5\u76d6\u4e86\u5f00\u53d1\u81ea\u5df1\u7684\u63d2\u4ef6\u6240\u9700\u4e86\u89e3\u7684\u4e00\u5207\u3002</p>"},{"location":"zh/plugin-development/#_2","title":"\ud83c\udfd7\ufe0f \u63d2\u4ef6\u67b6\u6784","text":""},{"location":"zh/plugin-development/#_3","title":"\u63d2\u4ef6\u7c7b\u578b","text":"<p>Sloth Runner \u652f\u6301\u591a\u79cd\u7c7b\u578b\u7684\u63d2\u4ef6\uff1a</p> <ol> <li>\ud83c\udf19 Lua \u6a21\u5757 - \u4f7f\u7528\u65b0\u529f\u80fd\u548c\u80fd\u529b\u6269\u5c55 DSL</li> <li>\u26a1 \u547d\u4ee4\u5904\u7406\u5668 - \u6dfb\u52a0\u65b0\u7684 CLI \u547d\u4ee4\u548c\u64cd\u4f5c</li> <li>\ud83c\udfa8 UI \u6269\u5c55 - \u589e\u5f3a Web \u4eea\u8868\u677f\u548c\u754c\u9762</li> <li>\ud83d\udd17 \u96c6\u6210 - \u8fde\u63a5\u5916\u90e8\u5de5\u5177\u548c\u670d\u52a1</li> <li>\ud83e\udda5 \u7f16\u8f91\u5668\u63d2\u4ef6 - IDE/\u7f16\u8f91\u5668\u6269\u5c55\uff08\u5982\u6211\u4eec\u7684 Neovim \u63d2\u4ef6\uff09</li> </ol>"},{"location":"zh/plugin-development/#_4","title":"\u6838\u5fc3\u7ec4\u4ef6","text":"<pre><code>sloth-runner/\n\u251c\u2500\u2500 plugins/\n\u2502   \u251c\u2500\u2500 lua-modules/       # Lua DSL \u6269\u5c55\n\u2502   \u251c\u2500\u2500 commands/          # CLI \u547d\u4ee4\u63d2\u4ef6\n\u2502   \u251c\u2500\u2500 ui/               # Web UI \u6269\u5c55\n\u2502   \u251c\u2500\u2500 integrations/     # \u7b2c\u4e09\u65b9\u96c6\u6210\n\u2502   \u2514\u2500\u2500 editors/          # \u7f16\u8f91\u5668/IDE \u63d2\u4ef6\n\u2514\u2500\u2500 internal/\n    \u2514\u2500\u2500 plugin/           # \u63d2\u4ef6\u7cfb\u7edf\u6838\u5fc3\n</code></pre>"},{"location":"zh/plugin-development/#lua","title":"\ud83c\udf19 \u5f00\u53d1 Lua \u6a21\u5757\u63d2\u4ef6","text":""},{"location":"zh/plugin-development/#_5","title":"\u57fa\u672c\u7ed3\u6784","text":"<p>\u521b\u5efa\u4e00\u4e2a\u6269\u5c55 DSL \u7684\u65b0 Lua \u6a21\u5757\uff1a</p> <pre><code>-- plugins/lua-modules/my-module/init.lua\nlocal M = {}\n\n-- \u6a21\u5757\u5143\u6570\u636e\nM._NAME = \"my-module\"\nM._VERSION = \"1.0.0\"\nM._DESCRIPTION = \"Sloth Runner \u7684\u81ea\u5b9a\u4e49\u529f\u80fd\"\n\n-- \u516c\u5171 API\nfunction M.hello(name)\n    return string.format(\"\u4f60\u597d\uff0c%s \u6765\u81ea\u6211\u7684\u81ea\u5b9a\u4e49\u6a21\u5757\uff01\", name or \"\u4e16\u754c\")\nend\n\nfunction M.custom_task(config)\n    return {\n        execute = function(params)\n            log.info(\"\ud83d\udd0c \u6267\u884c\u81ea\u5b9a\u4e49\u4efb\u52a1: \" .. config.name)\n            -- \u81ea\u5b9a\u4e49\u4efb\u52a1\u903b\u8f91\n            return true\n        end,\n        validate = function()\n            return config.name ~= nil\n        end\n    }\nend\n\n-- \u6ce8\u518c\u6a21\u5757\u51fd\u6570\nfunction M.register()\n    -- \u4f7f\u51fd\u6570\u5728 DSL \u4e2d\u53ef\u7528\n    _G.my_module = M\n\n    -- \u6ce8\u518c\u81ea\u5b9a\u4e49\u4efb\u52a1\u7c7b\u578b\n    task.register_type(\"custom\", M.custom_task)\nend\n\nreturn M\n</code></pre>"},{"location":"zh/plugin-development/#_6","title":"\u5728\u5de5\u4f5c\u6d41\u4e2d\u4f7f\u7528\u81ea\u5b9a\u4e49\u6a21\u5757","text":"<pre><code>-- workflow.sloth\nlocal my_task = task(\"test_custom\")\n    :type(\"custom\", { name = \"test\" })\n    :description(\"\u6d4b\u8bd5\u81ea\u5b9a\u4e49\u63d2\u4ef6\")\n    :build()\n\n-- \u76f4\u63a5\u4f7f\u7528\u6a21\u5757\nlocal greeting = my_module.hello(\"\u5f00\u53d1\u8005\")\nlog.info(greeting)\n\nworkflow.define(\"plugin_test\", {\n    description = \"\u6d4b\u8bd5\u81ea\u5b9a\u4e49\u63d2\u4ef6\",\n    tasks = { my_task }\n})\n</code></pre>"},{"location":"zh/plugin-development/#_7","title":"\u63d2\u4ef6\u6ce8\u518c","text":"<p>\u521b\u5efa\u63d2\u4ef6\u6e05\u5355\uff1a</p> <pre><code># plugins/lua-modules/my-module/plugin.yaml\nname: my-module\nversion: 1.0.0\ndescription: Sloth Runner \u7684\u81ea\u5b9a\u4e49\u529f\u80fd\ntype: lua-module\nauthor: \u60a8\u7684\u59d3\u540d\nlicense: MIT\n\nentry_point: init.lua\ndependencies:\n  - sloth-runner: \"&gt;=1.0.0\"\n\npermissions:\n  - filesystem.read\n  - network.http\n  - system.exec\n\nconfiguration:\n  settings:\n    api_key:\n      type: string\n      required: false\n      description: \"\u5916\u90e8\u670d\u52a1\u7684 API \u5bc6\u94a5\"\n</code></pre>"},{"location":"zh/plugin-development/#_8","title":"\u26a1 \u547d\u4ee4\u63d2\u4ef6\u5f00\u53d1","text":""},{"location":"zh/plugin-development/#cli","title":"CLI \u547d\u4ee4\u7ed3\u6784","text":"<pre><code>// plugins/commands/my-command/main.go\npackage main\n\nimport (\n    \"github.com/spf13/cobra\"\n    \"github.com/chalkan3-sloth/sloth-runner/pkg/plugin\"\n)\n\ntype MyCommandPlugin struct {\n    config *MyConfig\n}\n\ntype MyConfig struct {\n    Setting1 string `json:\"setting1\"`\n    Setting2 int    `json:\"setting2\"`\n}\n\nfunc (p *MyCommandPlugin) Name() string {\n    return \"my-command\"\n}\n\nfunc (p *MyCommandPlugin) Command() *cobra.Command {\n    cmd := &amp;cobra.Command{\n        Use:   \"my-command\",\n        Short: \"\u81ea\u5b9a\u4e49\u547d\u4ee4\u529f\u80fd\",\n        Long:  \"\u81ea\u5b9a\u4e49\u547d\u4ee4\u7684\u6269\u5c55\u63cf\u8ff0\",\n        RunE:  p.execute,\n    }\n\n    cmd.Flags().StringVar(&amp;p.config.Setting1, \"setting1\", \"\", \"\u81ea\u5b9a\u4e49\u8bbe\u7f6e\")\n    cmd.Flags().IntVar(&amp;p.config.Setting2, \"setting2\", 0, \"\u53e6\u4e00\u4e2a\u8bbe\u7f6e\")\n\n    return cmd\n}\n\nfunc (p *MyCommandPlugin) execute(cmd *cobra.Command, args []string) error {\n    log.Info(\"\ud83d\udd0c \u6267\u884c\u81ea\u5b9a\u4e49\u547d\u4ee4\uff0c\u8bbe\u7f6e:\", \n        \"setting1\", p.config.Setting1,\n        \"setting2\", p.config.Setting2)\n\n    // \u81ea\u5b9a\u4e49\u547d\u4ee4\u903b\u8f91\n    return nil\n}\n\nfunc main() {\n    plugin := &amp;MyCommandPlugin{\n        config: &amp;MyConfig{},\n    }\n\n    plugin.Register()\n}\n</code></pre>"},{"location":"zh/plugin-development/#_9","title":"\ud83d\udee0\ufe0f \u63d2\u4ef6\u5f00\u53d1\u5de5\u5177","text":""},{"location":"zh/plugin-development/#_10","title":"\u63d2\u4ef6\u751f\u6210\u5668","text":"<p>\u4f7f\u7528\u751f\u6210\u5668\u5feb\u901f\u521b\u5efa\u65b0\u63d2\u4ef6\uff1a</p> <pre><code># \u751f\u6210\u65b0\u7684 Lua \u6a21\u5757\u63d2\u4ef6\nsloth-runner plugin generate --type=lua-module --name=my-module\n\n# \u751f\u6210 CLI \u547d\u4ee4\u63d2\u4ef6\nsloth-runner plugin generate --type=command --name=my-command\n\n# \u751f\u6210 UI \u6269\u5c55\nsloth-runner plugin generate --type=ui --name=my-dashboard\n</code></pre>"},{"location":"zh/plugin-development/#_11","title":"\u5f00\u53d1\u73af\u5883","text":"<pre><code># \u542f\u52a8\u5f00\u53d1\u670d\u52a1\u5668\uff0c\u652f\u6301\u63d2\u4ef6\u70ed\u91cd\u8f7d\nsloth-runner dev --plugins-dir=./plugins\n\n# \u672c\u5730\u6d4b\u8bd5\u63d2\u4ef6\nsloth-runner plugin test ./plugins/my-plugin\n\n# \u6784\u5efa\u63d2\u4ef6\u7528\u4e8e\u5206\u53d1\nsloth-runner plugin build ./plugins/my-plugin --output=dist/\n</code></pre>"},{"location":"zh/plugin-development/#_12","title":"\u63d2\u4ef6\u6d4b\u8bd5","text":"<pre><code>// plugins/my-plugin/plugin_test.go\npackage main\n\nimport (\n    \"testing\"\n    \"github.com/chalkan3-sloth/sloth-runner/pkg/plugin/testing\"\n)\n\nfunc TestMyPlugin(t *testing.T) {\n    // \u521b\u5efa\u6d4b\u8bd5\u73af\u5883\n    env := plugintest.NewEnvironment(t)\n\n    // \u52a0\u8f7d\u63d2\u4ef6\n    plugin, err := env.LoadPlugin(\"./\")\n    if err != nil {\n        t.Fatal(err)\n    }\n\n    // \u6d4b\u8bd5\u63d2\u4ef6\u529f\u80fd\n    result, err := plugin.Execute(map[string]interface{}{\n        \"test_param\": \"value\",\n    })\n\n    if err != nil {\n        t.Fatal(err)\n    }\n\n    // \u9a8c\u8bc1\u7ed3\u679c\n    if result.Status != \"success\" {\n        t.Errorf(\"\u671f\u671b\u6210\u529f\uff0c\u5f97\u5230 %s\", result.Status)\n    }\n}\n</code></pre>"},{"location":"zh/plugin-development/#_13","title":"\ud83d\udce6 \u63d2\u4ef6\u5206\u53d1","text":""},{"location":"zh/plugin-development/#_14","title":"\u63d2\u4ef6\u6ce8\u518c\u8868","text":"<p>\u5c06\u60a8\u7684\u63d2\u4ef6\u53d1\u5e03\u5230 Sloth Runner \u63d2\u4ef6\u6ce8\u518c\u8868\uff1a</p> <pre><code># \u767b\u5f55\u6ce8\u518c\u8868\nsloth-runner registry login\n\n# \u53d1\u5e03\u63d2\u4ef6\nsloth-runner plugin publish ./my-plugin\n\n# \u5b89\u88c5\u5df2\u53d1\u5e03\u7684\u63d2\u4ef6\nsloth-runner plugin install my-username/my-plugin\n</code></pre>"},{"location":"zh/plugin-development/#_15","title":"\u63d2\u4ef6\u5e02\u573a","text":"<p>\u6d4f\u89c8\u548c\u53d1\u73b0\u63d2\u4ef6\uff1a</p> <pre><code># \u641c\u7d22\u63d2\u4ef6\nsloth-runner plugin search \"kubernetes\"\n\n# \u83b7\u53d6\u63d2\u4ef6\u4fe1\u606f\nsloth-runner plugin info kubernetes-operator\n\n# \u4ece\u5e02\u573a\u5b89\u88c5\nsloth-runner plugin install --marketplace kubernetes-operator\n</code></pre>"},{"location":"zh/plugin-development/#_16","title":"\ud83d\udd12 \u5b89\u5168\u6027\u548c\u6700\u4f73\u5b9e\u8df5","text":""},{"location":"zh/plugin-development/#_17","title":"\u5b89\u5168\u6307\u5357","text":"<ol> <li>\ud83d\udee1\ufe0f \u6700\u5c0f\u6743\u9650\u539f\u5219 - \u53ea\u8bf7\u6c42\u5fc5\u8981\u7684\u6743\u9650</li> <li>\ud83d\udd10 \u8f93\u5165\u9a8c\u8bc1 - \u59cb\u7ec8\u9a8c\u8bc1\u7528\u6237\u8f93\u5165\u548c\u914d\u7f6e</li> <li>\ud83d\udeab \u907f\u514d\u5168\u5c40\u72b6\u6001 - \u4fdd\u6301\u63d2\u4ef6\u72b6\u6001\u9694\u79bb</li> <li>\ud83d\udcdd \u9519\u8bef\u5904\u7406 - \u63d0\u4f9b\u6e05\u6670\u7684\u9519\u8bef\u6d88\u606f\u548c\u65e5\u5fd7\u8bb0\u5f55</li> <li>\ud83e\uddea \u6d4b\u8bd5 - \u4e3a\u6240\u6709\u529f\u80fd\u7f16\u5199\u5168\u9762\u7684\u6d4b\u8bd5</li> </ol>"},{"location":"zh/plugin-development/#_18","title":"\u4ee3\u7801\u8d28\u91cf","text":"<pre><code>// \u597d\u7684\uff1a\u6e05\u6670\u7684\u9519\u8bef\u5904\u7406\nfunc (p *MyPlugin) Execute(params map[string]interface{}) (*Result, error) {\n    value, ok := params[\"required_param\"].(string)\n    if !ok {\n        return nil, fmt.Errorf(\"required_param \u5fc5\u987b\u662f\u5b57\u7b26\u4e32\")\n    }\n\n    if value == \"\" {\n        return nil, fmt.Errorf(\"required_param \u4e0d\u80fd\u4e3a\u7a7a\")\n    }\n\n    // \u4f7f\u7528\u9a8c\u8bc1\u7684\u8f93\u5165\u8fdb\u884c\u5904\u7406\n    result := p.process(value)\n    return result, nil\n}\n</code></pre>"},{"location":"zh/plugin-development/#_19","title":"\u6587\u6863\u6807\u51c6","text":"<p>\u6bcf\u4e2a\u63d2\u4ef6\u90fd\u5e94\u5305\u62ec\uff1a</p> <ul> <li>\ud83d\udccb README.md - \u5b89\u88c5\u548c\u4f7f\u7528\u8bf4\u660e</li> <li>\ud83d\udcda API \u6587\u6863 - \u51fd\u6570/\u65b9\u6cd5\u6587\u6863</li> <li>\ud83d\udcd6 \u793a\u4f8b - \u5de5\u4f5c\u4ee3\u7801\u793a\u4f8b</li> <li>\ud83e\uddea \u6d4b\u8bd5 - \u5355\u5143\u6d4b\u8bd5\u548c\u96c6\u6210\u6d4b\u8bd5</li> <li>\ud83d\udcc4 \u8bb8\u53ef\u8bc1 - \u6e05\u6670\u7684\u8bb8\u53ef\u4fe1\u606f</li> </ul>"},{"location":"zh/plugin-development/#_20","title":"\ud83d\udcda \u793a\u4f8b\u548c\u6a21\u677f","text":""},{"location":"zh/plugin-development/#_21","title":"\u5b8c\u6574\u63d2\u4ef6\u793a\u4f8b","text":"<p>\u67e5\u770b\u8fd9\u4e9b\u793a\u4f8b\u63d2\u4ef6\uff1a</p> <ul> <li>Kubernetes Operator Plugin - \u7ba1\u7406 K8s \u8d44\u6e90</li> <li>Slack Integration Plugin - \u53d1\u9001\u901a\u77e5</li> <li>Monitoring Dashboard Plugin - \u81ea\u5b9a\u4e49\u6307\u6807 UI</li> </ul>"},{"location":"zh/plugin-development/#_22","title":"\u63d2\u4ef6\u6a21\u677f","text":"<p>\u4f7f\u7528\u5b98\u65b9\u6a21\u677f\u5feb\u901f\u5f00\u59cb\uff1a</p> <pre><code># \u4f7f\u7528\u6a21\u677f\nsloth-runner plugin init --template=lua-module my-plugin\nsloth-runner plugin init --template=go-command my-command\nsloth-runner plugin init --template=react-ui my-dashboard\n</code></pre>"},{"location":"zh/plugin-development/#_23","title":"\ud83d\udcac \u793e\u533a\u548c\u652f\u6301","text":""},{"location":"zh/plugin-development/#_24","title":"\u83b7\u53d6\u5e2e\u52a9","text":"<ul> <li>\ud83d\udcd6 \u63d2\u4ef6 API \u6587\u6863</li> <li>\ud83d\udcac Discord \u793e\u533a - #plugin-development</li> <li>\ud83d\udc1b GitHub Issues - \u9519\u8bef\u62a5\u544a\u548c\u529f\u80fd\u8bf7\u6c42</li> <li>\ud83d\udce7 \u63d2\u4ef6\u90ae\u4ef6\u5217\u8868 - \u5f00\u53d1\u8ba8\u8bba</li> </ul>"},{"location":"zh/plugin-development/#_25","title":"\u8d21\u732e","text":"<p>\u6211\u4eec\u6b22\u8fce\u63d2\u4ef6\u8d21\u732e\uff01\u8bf7\u53c2\u9605\u6211\u4eec\u7684\u8d21\u732e\u6307\u5357\u4e86\u89e3\u4ee5\u4e0b\u8be6\u60c5\uff1a</p> <ul> <li>\u63d2\u4ef6\u63d0\u4ea4\u6d41\u7a0b</li> <li>\u4ee3\u7801\u5ba1\u67e5\u6307\u5357</li> <li>\u6587\u6863\u8981\u6c42</li> <li>\u6d4b\u8bd5\u6807\u51c6</li> </ul> <p>\u4eca\u5929\u5c31\u5f00\u59cb\u4e3a Sloth Runner \u6784\u5efa\u51fa\u8272\u7684\u63d2\u4ef6\uff01\u5e73\u53f0\u7684\u53ef\u6269\u5c55\u67b6\u6784\u4f7f\u6dfb\u52a0\u60a8\u9700\u8981\u7684\u786e\u5207\u529f\u80fd\u53d8\u5f97\u7b80\u5355\u3002\ud83d\udd0c\u2728</p>"},{"location":"zh/quick-start/","title":"\u26a1 \u5feb\u901f\u6559\u7a0b","text":"<p>\u5b8c\u6574\u7684\u4e2d\u6587\u6587\u6863\uff0c\u8bf7\u8bbf\u95ee\uff1a</p>"},{"location":"zh/quick-start/#_2","title":"\ud83d\ude80 \u5feb\u901f\u5f00\u59cb","text":""},{"location":"zh/quick-start/#_3","title":"\u5b89\u88c5","text":"<pre><code># \u4e0b\u8f7d\ncurl -sSL https://raw.githubusercontent.com/chalkan3-sloth/sloth-runner/master/install.sh | bash\n\n# \u6216\u901a\u8fc7 Go\ngo install github.com/chalkan3-sloth/sloth-runner/cmd/sloth-runner@latest\n</code></pre>"},{"location":"zh/quick-start/#_4","title":"\u7b2c\u4e00\u4e2a\u5de5\u4f5c\u6d41","text":"<p>\u521b\u5efa\u6587\u4ef6 <code>hello.sloth</code>:</p> <pre><code>local hello_task = task(\"hello\")\n    :description(\"\u6211\u7684\u7b2c\u4e00\u4e2a\u4efb\u52a1\")\n    :command(function()\n        print(\"\ud83e\udda5 \u4f60\u597d\uff0c\u6765\u81ea Sloth Runner!\")\n        return true\n    end)\n    :build()\n\nworkflow.define(\"hello_world\", {\n    description = \"\u6211\u7684\u7b2c\u4e00\u4e2a\u5de5\u4f5c\u6d41\",\n    tasks = { hello_task }\n})\n</code></pre> <p>\u8fd0\u884c:</p> <pre><code>sloth-runner run -f hello.sloth\n</code></pre>"},{"location":"zh/quick-start/#_5","title":"\ud83d\udcda \u4e0b\u4e00\u6b65","text":"<ul> <li>\u6838\u5fc3\u6982\u5ff5</li> <li>\u9ad8\u7ea7\u793a\u4f8b</li> <li>\u9ad8\u7ea7\u529f\u80fd</li> </ul> <p>\u5b8c\u6574\u6559\u7a0b\uff0c\u8bf7\u53c2\u9605\uff1a\u4e3b\u6559\u7a0b</p>"},{"location":"zh/repl/","title":"\u4ea4\u4e92\u5f0f REPL","text":"<p><code>sloth-runner repl</code> \u547d\u4ee4\u5c06\u60a8\u5e26\u5165\u4e00\u4e2a\u4ea4\u4e92\u5f0f\u7684 Read-Eval-Print Loop (REPL) \u4f1a\u8bdd\u3002\u8fd9\u662f\u4e00\u4e2a\u5f3a\u5927\u7684\u5de5\u5177\uff0c\u7528\u4e8e\u8c03\u8bd5\u3001\u63a2\u7d22\u548c\u5feb\u901f\u5b9e\u9a8c sloth-runner \u6a21\u5757\u3002</p>"},{"location":"zh/repl/#repl_1","title":"\u542f\u52a8 REPL","text":"<p>\u8981\u542f\u52a8\u4f1a\u8bdd\uff0c\u53ea\u9700\u8fd0\u884c\uff1a <pre><code>sloth-runner repl\n</code></pre></p> <p>\u60a8\u8fd8\u53ef\u4ee5\u9884\u52a0\u8f7d\u4e00\u4e2a\u5de5\u4f5c\u6d41\u6587\u4ef6\uff0c\u4ee5\u4f7f\u5176 <code>Modern DSLs</code> \u548c\u4efb\u4f55\u8f85\u52a9\u51fd\u6570\u5728\u4f1a\u8bdd\u4e2d\u53ef\u7528\u3002\u8fd9\u5bf9\u4e8e\u8c03\u8bd5\u73b0\u6709\u7684\u7ba1\u9053\u975e\u5e38\u6709\u7528\u3002</p> <pre><code>sloth-runner repl -f /path/to/your/pipeline.sloth\n</code></pre>"},{"location":"zh/repl/#_1","title":"\u529f\u80fd","text":""},{"location":"zh/repl/#_2","title":"\u5b9e\u65f6\u73af\u5883","text":"<p>REPL \u63d0\u4f9b\u4e86\u4e00\u4e2a\u5b9e\u65f6\u7684 Lua \u73af\u5883\uff0c\u60a8\u53ef\u4ee5\u5728\u5176\u4e2d\u6267\u884c\u4efb\u4f55 Lua \u4ee3\u7801\u3002\u6240\u6709\u5185\u7f6e\u7684 sloth-runner \u6a21\u5757\uff08<code>aws</code>\u3001<code>docker</code>\u3001<code>fs</code>\u3001<code>log</code> \u7b49\uff09\u90fd\u5df2\u9884\u52a0\u8f7d\u5e76\u53ef\u4f9b\u4f7f\u7528\u3002</p> <pre><code>sloth&gt; log.info(\"\u6765\u81ea REPL \u7684\u4f60\u597d\uff01\")\nsloth&gt; result = fs.read(\"README.md\")\nsloth&gt; print(string.sub(result, 1, 50))\n</code></pre>"},{"location":"zh/repl/#_3","title":"\u81ea\u52a8\u8865\u5168","text":"<p>REPL \u6709\u4e00\u4e2a\u590d\u6742\u7684\u81ea\u52a8\u8865\u5168\u7cfb\u7edf\u3002 - \u5f00\u59cb\u8f93\u5165\u5168\u5c40\u53d8\u91cf\u6216\u6a21\u5757\u7684\u540d\u79f0\uff08\u4f8b\u5982 <code>aws</code>\uff09\u5e76\u6309 <code>Tab</code> \u67e5\u770b\u5efa\u8bae\u3002 - \u8f93\u5165\u6a21\u5757\u540d\u79f0\u540e\u8ddf\u4e00\u4e2a\u70b9\uff08\u4f8b\u5982 <code>docker.</code>\uff09\u5e76\u6309 <code>Tab</code> \u67e5\u770b\u8be5\u6a21\u5757\u4e2d\u6240\u6709\u53ef\u7528\u7684\u51fd\u6570\u3002</p>"},{"location":"zh/repl/#_4","title":"\u5386\u53f2\u8bb0\u5f55","text":"<p>REPL \u4f1a\u4fdd\u7559\u60a8\u7684\u547d\u4ee4\u5386\u53f2\u8bb0\u5f55\u3002\u4f7f\u7528\u5411\u4e0a\u548c\u5411\u4e0b\u7bad\u5934\u952e\u6d4f\u89c8\u4ee5\u524d\u7684\u547d\u4ee4\u3002</p>"},{"location":"zh/repl/#_5","title":"\u4f1a\u8bdd\u793a\u4f8b","text":"<p>\u4ee5\u4e0b\u662f\u4f7f\u7528 REPL \u8c03\u8bd5 Docker \u547d\u4ee4\u7684\u793a\u4f8b\u3002</p> <pre><code>$ sloth-runner repl\nSloth-Runner Interactive REPL\n\u8f93\u5165 'exit' \u6216 'quit' \u79bb\u5f00\u3002\nsloth&gt; result = docker.exec({\"ps\", \"-a\"})\nsloth&gt; print(result.stdout)\nCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES\nsloth&gt; -- \u73b0\u5728\u8ba9\u6211\u4eec\u5c1d\u8bd5\u6784\u5efa\u4e00\u4e2a\u955c\u50cf\nsloth&gt; build_result = docker.build({tag=\"my-test\", path=\"./examples/docker\"})\nsloth&gt; print(build_result.success)\ntrue\nsloth&gt; exit\n\u518d\u89c1\uff01\n</code></pre>"},{"location":"zh/scheduler/","title":"\u4efb\u52a1\u8c03\u5ea6\u5668","text":"<p><code>sloth-runner</code> \u73b0\u5728\u5305\u542b\u4e00\u4e2a\u5185\u7f6e\u7684\u4efb\u52a1\u8c03\u5ea6\u5668\uff0c\u5141\u8bb8\u60a8\u4f7f\u7528 cron \u8bed\u6cd5\u5728\u6307\u5b9a\u7684\u65f6\u95f4\u95f4\u9694\u81ea\u52a8\u6267\u884c\u60a8\u7684 Lua \u5b9a\u4e49\u4efb\u52a1\u3002</p>"},{"location":"zh/scheduler/#_2","title":"\u529f\u80fd","text":"<ul> <li>\u540e\u53f0\u8fdb\u7a0b: \u8c03\u5ea6\u5668\u4f5c\u4e3a\u6301\u4e45\u7684\u540e\u53f0\u8fdb\u7a0b\u8fd0\u884c\uff0c\u72ec\u7acb\u4e8e\u60a8\u7684\u7ec8\u7aef\u4f1a\u8bdd\u3002</li> <li>\u57fa\u4e8e Cron \u7684\u8c03\u5ea6: \u4f7f\u7528\u7075\u6d3b\u7684 cron \u5b57\u7b26\u4e32\u5b9a\u4e49\u4efb\u52a1\u8c03\u5ea6\u3002</li> <li>\u6301\u4e45\u6027: \u8c03\u5ea6\u4efb\u52a1\u4ece\u914d\u7f6e\u6587\u4ef6\u52a0\u8f7d\uff0c\u786e\u4fdd\u5728\u91cd\u542f\u540e\u6062\u590d\u3002</li> <li>\u4e0e\u73b0\u6709\u4efb\u52a1\u96c6\u6210: \u8c03\u5ea6\u5668\u5229\u7528\u73b0\u6709\u7684 <code>sloth-runner run</code> \u547d\u4ee4\u6765\u6267\u884c\u60a8\u7684\u4efb\u52a1\u3002</li> </ul>"},{"location":"zh/scheduler/#scheduleryaml","title":"\u914d\u7f6e: <code>scheduler.yaml</code>","text":"<p>\u8c03\u5ea6\u4efb\u52a1\u5728 YAML \u6587\u4ef6\u4e2d\u5b9a\u4e49\uff0c\u901a\u5e38\u547d\u540d\u4e3a <code>scheduler.yaml</code>\u3002\u6b64\u6587\u4ef6\u6307\u5b9a\u8981\u8fd0\u884c\u7684\u4efb\u52a1\u3001\u5b83\u4eec\u7684\u8c03\u5ea6\u4ee5\u53ca Lua \u6587\u4ef6\u3001\u7ec4\u548c\u4efb\u52a1\u540d\u79f0\u3002</p> <pre><code>scheduled_tasks:\n  - name: \"my_daily_backup\"\n    schedule: \"0 0 * * *\" # \u6bcf\u5929\u5348\u591c\n    task_file: \"examples/my_workflow.sloth\"\n    task_group: \"backup_group\"\n    task_name: \"perform_backup\"\n  - name: \"hourly_report_generation\"\n    schedule: \"0 * * * *\" # \u6bcf\u5c0f\u65f6\n    task_file: \"examples/reporting.sloth\"\n    task_group: \"reports\"\n    task_name: \"generate_report\"\n</code></pre> <p>\u5b57\u6bb5:</p> <ul> <li><code>name</code> (\u5b57\u7b26\u4e32, \u5fc5\u586b): \u8c03\u5ea6\u4efb\u52a1\u7684\u552f\u4e00\u540d\u79f0\u3002</li> <li><code>schedule</code> (\u5b57\u7b26\u4e32, \u5fc5\u586b): \u5b9a\u4e49\u4efb\u52a1\u4f55\u65f6\u8fd0\u884c\u7684 cron \u5b57\u7b26\u4e32\u3002\u652f\u6301\u6807\u51c6 cron \u8bed\u6cd5\u548c\u4e00\u4e9b\u9884\u5b9a\u4e49\u8c03\u5ea6 (\u4f8b\u5982, <code>@every 1h</code>, <code>@daily</code>)\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 robfig/cron \u6587\u6863\u3002</li> <li><code>task_file</code> (\u5b57\u7b26\u4e32, \u5fc5\u586b): Lua \u4efb\u52a1\u5b9a\u4e49\u6587\u4ef6\u7684\u8def\u5f84\u3002</li> <li><code>task_group</code> (\u5b57\u7b26\u4e32, \u5fc5\u586b): Lua \u6587\u4ef6\u4e2d\u7684\u4efb\u52a1\u7ec4\u540d\u79f0\u3002</li> <li><code>task_name</code> (\u5b57\u7b26\u4e32, \u5fc5\u586b): \u5728\u4efb\u52a1\u7ec4\u4e2d\u6267\u884c\u7684\u7279\u5b9a\u4efb\u52a1\u540d\u79f0\u3002</li> </ul>"},{"location":"zh/scheduler/#cli","title":"CLI \u547d\u4ee4","text":""},{"location":"zh/scheduler/#sloth-runner-scheduler-enable","title":"<code>sloth-runner scheduler enable</code>","text":"<p>\u5c06 <code>sloth-runner</code> \u8c03\u5ea6\u5668\u4f5c\u4e3a\u540e\u53f0\u8fdb\u7a0b\u542f\u52a8\u3002\u6b64\u547d\u4ee4\u786e\u4fdd\u8c03\u5ea6\u5668\u6b63\u5728\u8fd0\u884c\u5e76\u51c6\u5907\u597d\u5904\u7406\u8c03\u5ea6\u4efb\u52a1\u3002</p> <pre><code>sloth-runner scheduler enable --scheduler-config scheduler.yaml\n</code></pre> <ul> <li><code>--scheduler-config</code> (\u6216 <code>-c</code>): \u6307\u5b9a <code>scheduler.yaml</code> \u914d\u7f6e\u6587\u4ef6\u7684\u8def\u5f84\u3002\u9ed8\u8ba4\u4e3a\u5f53\u524d\u76ee\u5f55\u4e2d\u7684 <code>scheduler.yaml</code>\u3002</li> </ul> <p>\u6267\u884c\u540e\uff0c\u547d\u4ee4\u5c06\u6253\u5370\u540e\u53f0\u8c03\u5ea6\u5668\u8fdb\u7a0b\u7684 PID\u3002\u5373\u4f7f\u60a8\u7684\u7ec8\u7aef\u4f1a\u8bdd\u5173\u95ed\uff0c\u8c03\u5ea6\u5668\u4e5f\u5c06\u7ee7\u7eed\u8fd0\u884c\u3002</p>"},{"location":"zh/scheduler/#sloth-runner-scheduler-disable","title":"<code>sloth-runner scheduler disable</code>","text":"<p>\u505c\u6b62\u6b63\u5728\u8fd0\u884c\u7684 <code>sloth-runner</code> \u8c03\u5ea6\u5668\u540e\u53f0\u8fdb\u7a0b\u3002</p> <pre><code>sloth-runner scheduler disable\n</code></pre> <p>\u6b64\u547d\u4ee4\u5c06\u5c1d\u8bd5\u4f18\u96c5\u5730\u7ec8\u6b62\u8c03\u5ea6\u5668\u8fdb\u7a0b\u3002\u5982\u679c\u6210\u529f\uff0c\u5b83\u5c06\u5220\u9664\u7531 <code>enable</code> \u547d\u4ee4\u521b\u5efa\u7684 PID \u6587\u4ef6\u3002</p>"},{"location":"zh/scheduler/#sloth-runner-scheduler-list","title":"<code>sloth-runner scheduler list</code>","text":"<p>\u5217\u51fa <code>scheduler.yaml</code> \u914d\u7f6e\u6587\u4ef6\u4e2d\u5b9a\u4e49\u7684\u6240\u6709\u8c03\u5ea6\u4efb\u52a1\u3002\u6b64\u547d\u4ee4\u63d0\u4f9b\u5df2\u914d\u7f6e\u4efb\u52a1\u3001\u5176\u8c03\u5ea6\u548c\u76f8\u5173 Lua \u4efb\u52a1\u8be6\u7ec6\u4fe1\u606f\u7684\u6982\u8ff0\u3002</p> <pre><code>sloth-runner scheduler list --scheduler-config scheduler.yaml\n</code></pre> <ul> <li><code>--scheduler-config</code> (\u6216 <code>-c</code>): \u6307\u5b9a <code>scheduler.yaml</code> \u914d\u7f6e\u6587\u4ef6\u7684\u8def\u5f84\u3002\u9ed8\u8ba4\u4e3a\u5f53\u524d\u76ee\u5f55\u4e2d\u7684 <code>scheduler.yaml</code>\u3002</li> </ul> <p>\u793a\u4f8b\u8f93\u51fa:</p> <pre><code># Configured Scheduled Tasks\n\nNAME                     | SCHEDULE    | FILE                     | GROUP        | TASK\nmy_daily_backup          | 0 0 * * *   | examples/my_workflow.sloth | backup_group | perform_backup\nhourly_report_generation | 0 * * * *   | examples/reporting.sloth   | reports      | generate_report\n</code></pre>"},{"location":"zh/scheduler/#sloth-runner-scheduler-delete-task_name","title":"<code>sloth-runner scheduler delete &lt;task_name&gt;</code>","text":"<p>\u4ece <code>scheduler.yaml</code> \u914d\u7f6e\u6587\u4ef6\u4e2d\u5220\u9664\u7279\u5b9a\u7684\u8c03\u5ea6\u4efb\u52a1\u3002\u6b64\u547d\u4ee4\u5c06\u5220\u9664\u4efb\u52a1\u5b9a\u4e49\uff0c\u8c03\u5ea6\u5668\u5c06\u4e0d\u518d\u6267\u884c\u5b83\u3002</p> <pre><code>sloth-runner scheduler delete my_daily_backup --scheduler-config scheduler.yaml\n</code></pre> <ul> <li><code>&lt;task_name&gt;</code> (\u5b57\u7b26\u4e32, \u5fc5\u586b): \u8981\u5220\u9664\u7684\u8c03\u5ea6\u4efb\u52a1\u7684\u552f\u4e00\u540d\u79f0\u3002</li> <li><code>--scheduler-config</code> (\u6216 <code>-c</code>): \u6307\u5b9a <code>scheduler.yaml</code> \u914d\u7f6e\u6587\u4ef6\u7684\u8def\u5f84\u3002\u9ed8\u8ba4\u4e3a\u5f53\u524d\u76ee\u5f55\u4e2d\u7684 <code>scheduler.yaml</code>\u3002</li> </ul> <p>\u91cd\u8981: \u6b64\u547d\u4ee4\u4f1a\u4fee\u6539\u60a8\u7684 <code>scheduler.yaml</code> \u6587\u4ef6\u3002\u5982\u6709\u5fc5\u8981\uff0c\u8bf7\u786e\u4fdd\u60a8\u6709\u5907\u4efd\u3002\u5982\u679c\u8c03\u5ea6\u5668\u5f53\u524d\u6b63\u5728\u8fd0\u884c\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u7981\u7528\u5e76\u91cd\u65b0\u542f\u7528\u5b83\u624d\u80fd\u4f7f\u66f4\u6539\u7acb\u5373\u751f\u6548\u3002</p>"},{"location":"zh/scheduler/#_3","title":"\u65e5\u5fd7\u548c\u9519\u8bef\u5904\u7406","text":"<p>\u8c03\u5ea6\u5668\u5c06\u5176\u6d3b\u52a8\u548c\u8c03\u5ea6\u4efb\u52a1\u7684\u6267\u884c\u72b6\u6001\u8bb0\u5f55\u5230\u6807\u51c6\u8f93\u51fa\u548c\u6807\u51c6\u9519\u8bef\u3002\u5efa\u8bae\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u8fd0\u884c\u65f6\u5c06\u8fd9\u4e9b\u8f93\u51fa\u91cd\u5b9a\u5411\u5230\u65e5\u5fd7\u6587\u4ef6\u3002</p> <p>\u5982\u679c\u8c03\u5ea6\u4efb\u52a1\u5931\u8d25\uff0c\u8c03\u5ea6\u5668\u5c06\u8bb0\u5f55\u9519\u8bef\u5e76\u7ee7\u7eed\u6267\u884c\u5176\u4ed6\u8c03\u5ea6\u4efb\u52a1\u3002\u5b83\u4e0d\u4f1a\u56e0\u5355\u4e2a\u4efb\u52a1\u5931\u8d25\u800c\u505c\u6b62\u3002</p>"},{"location":"zh/scheduler/#_4","title":"\u793a\u4f8b","text":"<ol> <li> <p>\u521b\u5efa <code>scheduler.yaml</code> \u6587\u4ef6:</p> <pre><code>scheduled_tasks:\n  - name: \"my_test_task\"\n    schedule: \"@every 1m\"\n    task_file: \"examples/basic_pipeline.sloth\"\n    task_group: \"basic_pipeline\"\n    task_name: \"fetch_data\"\n</code></pre> </li> <li> <p>\u542f\u7528\u8c03\u5ea6\u5668:</p> <pre><code>sloth-runner scheduler enable --scheduler-config scheduler.yaml\n</code></pre> </li> <li> <p>\u89c2\u5bdf\u8f93\u51fa\u3002\u6bcf\u5206\u949f\uff0c\u60a8\u5e94\u8be5\u4f1a\u770b\u5230\u6307\u793a <code>my_test_task</code> \u6267\u884c\u7684\u6d88\u606f\u3002</p> </li> <li> <p>\u505c\u6b62\u8c03\u5ea6\u5668:</p> <pre><code>sloth-runner scheduler disable\n</code></pre> </li> </ol>"},{"location":"zh/testing/","title":"\u6d4b\u8bd5\u5de5\u4f5c\u6d41","text":"<p>sloth-runner \u5305\u542b\u4e00\u4e2a\u5185\u7f6e\u7684\u6d4b\u8bd5\u6846\u67b6\uff0c\u5141\u8bb8\u60a8\u4e3a\u4efb\u52a1\u5de5\u4f5c\u6d41\u7f16\u5199\u5355\u5143\u548c\u96c6\u6210\u6d4b\u8bd5\u3002\u4e3a\u60a8\u7684\u81ea\u52a8\u5316\u7f16\u5199\u6d4b\u8bd5\u5bf9\u4e8e\u786e\u4fdd\u53ef\u9760\u6027\u3001\u9632\u6b62\u56de\u5f52\u4ee5\u53ca\u5728\u8fdb\u884c\u66f4\u6539\u65f6\u5145\u6ee1\u4fe1\u5fc3\u81f3\u5173\u91cd\u8981\u3002</p>"},{"location":"zh/testing/#test","title":"<code>test</code> \u547d\u4ee4","text":"<p>\u60a8\u53ef\u4ee5\u4f7f\u7528 <code>sloth-runner test</code> \u547d\u4ee4\u8fd0\u884c\u6d4b\u8bd5\u6587\u4ef6\u3002\u5b83\u9700\u8981\u4e24\u4e2a\u4e3b\u8981\u6587\u4ef6\uff1a\u60a8\u8981\u6d4b\u8bd5\u7684\u5de5\u4f5c\u6d41\u548c\u6d4b\u8bd5\u811a\u672c\u672c\u8eab\u3002</p> <pre><code>sloth-runner test -w &lt;\u5de5\u4f5c\u6d41\u8def\u5f84.sloth&gt; -f &lt;\u6d4b\u8bd5\u6587\u4ef6\u8def\u5f84.sloth&gt;\n</code></pre> <ul> <li><code>-w, --workflow</code>: \u6307\u5b9a\u8981\u6d4b\u8bd5\u7684\u4e3b <code>Modern DSLs</code> \u6587\u4ef6\u7684\u8def\u5f84\u3002</li> <li><code>-f, --file</code>: \u6307\u5b9a\u60a8\u7684\u6d4b\u8bd5\u6587\u4ef6\u7684\u8def\u5f84\u3002</li> </ul>"},{"location":"zh/testing/#_2","title":"\u7f16\u5199\u6d4b\u8bd5","text":"<p>\u6d4b\u8bd5\u662f\u7528 Lua \u7f16\u5199\u7684\uff0c\u5e76\u4f7f\u7528\u6d4b\u8bd5\u8fd0\u884c\u5668\u63d0\u4f9b\u7684\u4e24\u4e2a\u65b0\u7684\u5168\u5c40\u6a21\u5757\uff1a<code>test</code> \u548c <code>assert</code>\u3002</p>"},{"location":"zh/testing/#test_1","title":"<code>test</code> \u6a21\u5757","text":"<p><code>test</code> \u6a21\u5757\u7528\u4e8e\u6784\u5efa\u60a8\u7684\u6d4b\u8bd5\u5e76\u8fd0\u884c\u5de5\u4f5c\u6d41\u4e2d\u7684\u7279\u5b9a\u4efb\u52a1\u3002</p> <ul> <li><code>test.describe(suite_name, function)</code>: \u5c06\u76f8\u5173\u6d4b\u8bd5\u5206\u7ec4\u5230\u4e00\u4e2a\u201c\u5957\u4ef6\u201d\u4e2d\u3002\u8fd9\u7528\u4e8e\u7ec4\u7ec7\u3002</li> <li><code>test.it(function)</code>: \u5b9a\u4e49\u5355\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u3002\u6d4b\u8bd5\u7684\u63cf\u8ff0\u5e94\u5305\u542b\u5728\u6b64\u51fd\u6570\u5185\u7684\u65ad\u8a00\u6d88\u606f\u4e2d\u3002</li> <li><code>test.run_task(task_name)</code>: \u8fd9\u662f\u6d4b\u8bd5\u6846\u67b6\u7684\u6838\u5fc3\u529f\u80fd\u3002\u5b83\u4ece\u52a0\u8f7d\u7684\u5de5\u4f5c\u6d41\u6587\u4ef6\u4e2d\u6309\u540d\u79f0\u6267\u884c\u5355\u4e2a\u4efb\u52a1\u3002\u5b83\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u6267\u884c\u8be6\u7ec6\u4fe1\u606f\u7684 <code>result</code> \u8868\u3002</li> </ul> <p><code>run_task</code> \u8fd4\u56de\u7684 <code>result</code> \u8868\u5177\u6709\u4ee5\u4e0b\u7ed3\u6784\uff1a</p> <pre><code>{\n  success = true, -- \u5e03\u5c14\u503c\uff1a\u5982\u679c\u4efb\u52a1\u6210\u529f\u5219\u4e3a true\uff0c\u5426\u5219\u4e3a false\n  message = \"\u4efb\u52a1\u6267\u884c\u6210\u529f\", -- \u5b57\u7b26\u4e32\uff1a\u4efb\u52a1\u8fd4\u56de\u7684\u6d88\u606f\n  duration = \"1.23ms\", -- \u5b57\u7b26\u4e32\uff1a\u6267\u884c\u6301\u7eed\u65f6\u95f4\n  output = { ... }, -- \u8868\uff1a\u4efb\u52a1\u8fd4\u56de\u7684\u8f93\u51fa\u8868\n  error = nil -- \u5b57\u7b26\u4e32\uff1a\u5982\u679c\u4efb\u52a1\u5931\u8d25\uff0c\u5219\u4e3a\u9519\u8bef\u6d88\u606f\n}\n</code></pre>"},{"location":"zh/testing/#assert","title":"<code>assert</code> \u6a21\u5757","text":"<p><code>assert</code> \u6a21\u5757\u63d0\u4f9b\u7528\u4e8e\u68c0\u67e5\u4efb\u52a1\u6267\u884c\u7ed3\u679c\u7684\u51fd\u6570\u3002</p> <ul> <li><code>assert.is_true(value, message)</code>: \u68c0\u67e5 <code>value</code> \u662f\u5426\u4e3a true\u3002</li> <li><code>assert.equals(actual, expected, message)</code>: \u68c0\u67e5 <code>actual</code> \u503c\u662f\u5426\u7b49\u4e8e <code>expected</code> \u503c\u3002</li> </ul>"},{"location":"zh/testing/#mocking","title":"\u6a21\u5757\u6a21\u62df (Mocking)","text":"<p>\u4e3a\u4e86\u6d4b\u8bd5\u60a8\u7684\u7ba1\u9053\u903b\u8f91\u800c\u65e0\u9700\u8fdb\u884c\u5b9e\u9645\u7684\u5916\u90e8\u8c03\u7528\uff08\u4f8b\u5982\uff0c\u5bf9 AWS\u3001Docker \u6216 Terraform\uff09\uff0c\u6d4b\u8bd5\u6846\u67b6\u5305\u542b\u4e86\u4e00\u4e2a\u5f3a\u5927\u7684\u6a21\u62df\u529f\u80fd\u3002</p>"},{"location":"zh/testing/#_3","title":"\u4e25\u683c\u6a21\u62df\u7b56\u7565","text":"<p>\u6d4b\u8bd5\u8fd0\u884c\u5668\u5f3a\u5236\u6267\u884c \u4e25\u683c\u7684\u6a21\u62df\u7b56\u7565\u3002\u5728\u6d4b\u8bd5\u6a21\u5f0f\u4e0b\u8fd0\u884c\u65f6\uff0c\u4efb\u4f55\u5bf9\u6a21\u5757\u51fd\u6570\uff08\u5982 <code>aws.exec</code> \u6216 <code>docker.build</code>\uff09\u7684\u8c03\u7528\u5982\u679c \u6ca1\u6709 \u88ab\u660e\u786e\u6a21\u62df\uff0c\u5c06\u5bfc\u81f4\u6d4b\u8bd5\u7acb\u5373\u5931\u8d25\u3002\u8fd9\u53ef\u786e\u4fdd\u60a8\u7684\u6d4b\u8bd5\u662f\u5b8c\u5168\u81ea\u5305\u542b\u7684\u3001\u786e\u5b9a\u6027\u7684\uff0c\u5e76\u4e14\u6ca1\u6709\u610f\u5916\u7684\u526f\u4f5c\u7528\u3002</p>"},{"location":"zh/testing/#testmockfunction_name-mock_definition","title":"<code>test.mock(function_name, mock_definition)</code>","text":"<p>\u6b64\u51fd\u6570\u5141\u8bb8\u60a8\u4e3a\u4efb\u4f55\u53ef\u6a21\u62df\u7684\u6a21\u5757\u51fd\u6570\u5b9a\u4e49\u4e00\u4e2a\u4f2a\u9020\u7684\u8fd4\u56de\u503c\u3002</p> <ul> <li><code>function_name</code> (string): \u8981\u6a21\u62df\u7684\u51fd\u6570\u7684\u5168\u540d\uff08\u4f8b\u5982 <code>\"aws.s3.sync\"</code>, <code>\"docker.build\"</code>\uff09\u3002</li> <li><code>mock_definition</code> (table): \u4e00\u4e2a\u5b9a\u4e49\u6a21\u62df\u51fd\u6570\u5e94\u8fd4\u56de\u4ec0\u4e48\u7684\u8868\u3002\u5b83 \u5fc5\u987b \u5305\u542b\u4e00\u4e2a <code>returns</code> \u952e\uff0c\u8be5\u952e\u662f\u4e00\u4e2a\u51fd\u6570\u5c06\u8fd4\u56de\u7684\u503c\u7684\u5217\u8868\u3002</li> </ul> <p><code>returns</code> \u5217\u8868\u81f3\u5173\u91cd\u8981\uff0c\u56e0\u4e3a Lua \u51fd\u6570\u53ef\u4ee5\u8fd4\u56de\u591a\u4e2a\u503c\u3002</p> <p>\u793a\u4f8b:</p> <pre><code>-- \u6a21\u62df\u4e00\u4e2a\u8fd4\u56de\u5355\u4e2a\u7ed3\u679c\u8868\u7684\u51fd\u6570\ntest.mock(\"docker.build\", {\n  returns = {\n    { success = true, stdout = \"\u6210\u529f\u6784\u5efa\u955c\u50cf\" }\n  }\n})\n\n-- \u6a21\u62df\u4e00\u4e2a\u8fd4\u56de\u4e24\u4e2a\u503c\u7684\u51fd\u6570\uff08\u4f8b\u5982\uff0c\u4e00\u4e2a\u503c\u548c\u4e00\u4e2a\u9519\u8bef\uff09\n-- \u8fd9\u6a21\u62df\u4e86\u5bf9 terraform.output \u7684\u6210\u529f\u8c03\u7528\ntest.mock(\"terraform.output\", {\n  returns = { \"my_file.txt\", nil }\n})\n\n-- \u8fd9\u6a21\u62df\u4e86\u5931\u8d25\u7684\u8c03\u7528\ntest.mock(\"terraform.output\", {\n  returns = { nil, \"\u672a\u627e\u5230\u8f93\u51fa\" }\n})\n</code></pre>"},{"location":"zh/testing/#_4","title":"\u5b8c\u6574\u7684\u6a21\u62df\u793a\u4f8b","text":"<p>\u5047\u8bbe\u60a8\u6709\u4e00\u4e2a\u8c03\u7528 <code>aws.exec</code> \u7684\u4efb\u52a1\uff0c\u5e76\u4e14\u5176\u903b\u8f91\u53d6\u51b3\u4e8e\u8f93\u51fa\u3002</p> <p><code>my_workflow.sloth</code> \u4e2d\u7684\u4efb\u52a1: <pre><code>-- ...\n{\n  name = \"check-account\",\n  command = function()\n    local result = aws.exec({\"sts\", \"get-caller-identity\"})\n    local data = data.parse_json(result.stdout)\n    if data.Account == \"123456789012\" then\n      return true, \"\u6b63\u786e\u7684\u5e10\u6237\u3002\"\n    else\n      return false, \"\u9519\u8bef\u7684\u5e10\u6237\u3002\"\n    end\n  end\n}\n-- ...\n</code></pre></p> <p><code>my_test.sloth</code> \u4e2d\u7684\u6d4b\u8bd5: <pre><code>test.describe(\"\u5e10\u6237\u68c0\u67e5\u903b\u8f91\", function()\n  test.it(function()\n    -- \u6a21\u62df aws.exec \u7684\u8fd4\u56de\u503c\n    test.mock(\"aws.exec\", {\n      returns = {\n        {\n          success = true,\n          stdout = '{\"Account\": \"123456789012\"}'\n        }\n      }\n    })\n\n    -- \u8fd0\u884c\u4f7f\u7528\u6a21\u62df\u7684\u4efb\u52a1\n    local result = test.run_task(\"check-account\")\n\n    -- \u65ad\u8a00\u4efb\u52a1\u7684\u903b\u8f91\u5728\u6a21\u62df\u6570\u636e\u4e0b\u662f\u5426\u6b63\u5e38\u5de5\u4f5c\n    assert.is_true(result.success, \"\u4f7f\u7528\u6b63\u786e\u7684\u5e10\u6237 ID\uff0c\u4efb\u52a1\u5e94\u8be5\u6210\u529f\")\n    assert.equals(result.message, \"\u6b63\u786e\u7684\u5e10\u6237\u3002\", \"\u6d88\u606f\u5e94\u8be5\u662f\u6b63\u786e\u7684\")\n  end)\nend)\n</code></pre></p>"},{"location":"zh/modules/aws/","title":"AWS \u6a21\u5757","text":"<p><code>aws</code> \u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5168\u9762\u7684\u754c\u9762\uff0c\u7528\u4e8e\u4f7f\u7528 AWS CLI \u4e0e\u4e9a\u9a6c\u900a\u7f51\u7edc\u670d\u52a1\u8fdb\u884c\u4ea4\u4e92\u3002\u5b83\u65e8\u5728\u4e0e\u6807\u51c6\u7684 AWS \u51ed\u8bc1\u94fe\u65e0\u7f1d\u534f\u4f5c\uff0c\u5e76\u4e3a <code>aws-vault</code> \u63d0\u4f9b\u4e00\u6d41\u7684\u652f\u6301\u4ee5\u589e\u5f3a\u5b89\u5168\u6027\u3002</p>"},{"location":"zh/modules/aws/#_1","title":"\u914d\u7f6e","text":"<p><code>values.yaml</code> \u4e2d\u65e0\u9700\u7279\u5b9a\u914d\u7f6e\u3002\u8be5\u6a21\u5757\u4f9d\u8d56\u4e8e\u60a8\u7684\u73af\u5883\u914d\u7f6e\u4e3a\u53ef\u4e0e AWS \u4ea4\u4e92\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u5b9e\u73b0\uff1a - EC2 \u5b9e\u4f8b\u6216 ECS/EKS \u4efb\u52a1\u7684 IAM \u89d2\u8272\u3002 - \u6807\u51c6\u73af\u5883\u53d8\u91cf\uff08<code>AWS_ACCESS_KEY_ID</code>\u3001<code>AWS_SECRET_ACCESS_KEY</code> \u7b49\uff09\u3002 - \u5df2\u914d\u7f6e\u7684 <code>~/.aws/credentials</code> \u6587\u4ef6\u3002 - \u4f7f\u7528\u5e26\u6709\u547d\u540d\u914d\u7f6e\u6587\u4ef6\u7684 <code>aws-vault</code>\u3002</p>"},{"location":"zh/modules/aws/#_2","title":"\u901a\u7528\u6267\u884c\u5668","text":""},{"location":"zh/modules/aws/#awsexecargs-opts","title":"<code>aws.exec(args, opts)</code>","text":"<p>\u8fd9\u662f\u8be5\u6a21\u5757\u7684\u6838\u5fc3\u529f\u80fd\u3002\u5b83\u6267\u884c\u4efb\u4f55 AWS CLI \u547d\u4ee4\u5e76\u8fd4\u56de\u7ed3\u679c\u3002</p> <p>\u53c2\u6570:</p> <ul> <li><code>args</code> (table): \u5fc5\u9700\u3002 \u4e00\u4e2a\u5b57\u7b26\u4e32\u8868\uff0c\u8868\u793a\u8981\u4f20\u9012\u7ed9 AWS CLI \u7684\u547d\u4ee4\u548c\u53c2\u6570\uff08\u4f8b\u5982 <code>{\"s3\", \"ls\", \"--recursive\"}</code>\uff09\u3002</li> <li><code>opts</code> (table): \u53ef\u9009\u3002 \u4e00\u4e2a\u6267\u884c\u9009\u9879\u8868\u3002<ul> <li><code>profile</code> (string): \u5982\u679c\u63d0\u4f9b\uff0c\u5c06\u4f7f\u7528 <code>aws-vault exec &lt;profile&gt; -- aws ...</code> \u6267\u884c\u547d\u4ee4\u3002\u5982\u679c\u7701\u7565\uff0c\u5c06\u76f4\u63a5\u8fd0\u884c <code>aws ...</code>\u3002</li> </ul> </li> </ul> <p>\u8fd4\u56de:</p> <p>\u4e00\u4e2a\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\u7684\u8868\uff1a - <code>stdout</code> (string): \u547d\u4ee4\u7684\u6807\u51c6\u8f93\u51fa\u3002 - <code>stderr</code> (string): \u547d\u4ee4\u7684\u6807\u51c6\u9519\u8bef\u3002 - <code>exit_code</code> (number): \u547d\u4ee4\u7684\u9000\u51fa\u4ee3\u7801\u3002<code>0</code> \u901a\u5e38\u8868\u793a\u6210\u529f\u3002</p> <p>\u793a\u4f8b:</p> <pre><code>-- \u4f7f\u7528\u9ed8\u8ba4\u51ed\u8bc1\nlocal result = aws.exec({\"sts\", \"get-caller-identity\"})\nif result.exit_code == 0 then\n  print(result.stdout)\nend\n\n-- \u4f7f\u7528 aws-vault \u914d\u7f6e\u6587\u4ef6\nlocal result_with_profile = aws.exec({\"ec2\", \"describe-instances\"}, {profile = \"my-prod-profile\"})\n</code></pre>"},{"location":"zh/modules/aws/#s3","title":"S3 \u8f85\u52a9\u51fd\u6570","text":""},{"location":"zh/modules/aws/#awss3syncparams","title":"<code>aws.s3.sync(params)</code>","text":"<p><code>aws s3 sync</code> \u547d\u4ee4\u7684\u9ad8\u7ea7\u5305\u88c5\u5668\uff0c\u7528\u4e8e\u5c06\u76ee\u5f55\u4e0e S3 \u540c\u6b65\u3002</p> <p>\u53c2\u6570:</p> <ul> <li><code>params</code> (table): \u4e00\u4e2a\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\u7684\u8868\uff1a<ul> <li><code>source</code> (string): \u5fc5\u9700\u3002 \u6e90\u76ee\u5f55\u6216 S3 \u8def\u5f84\u3002</li> <li><code>destination</code> (string): \u5fc5\u9700\u3002 \u76ee\u6807\u76ee\u5f55\u6216 S3 \u8def\u5f84\u3002</li> <li><code>profile</code> (string): \u53ef\u9009\u3002 \u8981\u4f7f\u7528\u7684 <code>aws-vault</code> \u914d\u7f6e\u6587\u4ef6\u3002</li> <li><code>delete</code> (boolean): \u53ef\u9009\u3002 \u5982\u679c\u4e3a <code>true</code>\uff0c\u5219\u5411\u540c\u6b65\u547d\u4ee4\u6dfb\u52a0 <code>--delete</code> \u6807\u5fd7\u3002</li> </ul> </li> </ul> <p>\u8fd4\u56de:</p> <ul> <li>\u6210\u529f\u65f6\u8fd4\u56de <code>true</code>\u3002</li> <li>\u5931\u8d25\u65f6\u8fd4\u56de <code>false, error_message</code>\u3002</li> </ul> <p>\u793a\u4f8b:</p> <pre><code>local ok, err = aws.s3.sync({\n  source = \"./build\",\n  destination = \"s3://my-app-bucket/static\",\n  profile = \"deployment-profile\",\n  delete = true\n})\nif not ok then\n  log.error(\"S3 \u540c\u6b65\u5931\u8d25: \" .. err)\nend\n</code></pre>"},{"location":"zh/modules/aws/#secrets-manager","title":"Secrets Manager \u8f85\u52a9\u51fd\u6570","text":""},{"location":"zh/modules/aws/#awssecretsmanagerget_secretparams","title":"<code>aws.secretsmanager.get_secret(params)</code>","text":"<p>\u4ece AWS Secrets Manager \u68c0\u7d22\u5bc6\u94a5\u7684\u503c\u3002\u6b64\u51fd\u6570\u901a\u8fc7\u76f4\u63a5\u8fd4\u56de <code>SecretString</code> \u6765\u7b80\u5316\u8be5\u8fc7\u7a0b\u3002</p> <p>\u53c2\u6570:</p> <ul> <li><code>params</code> (table): \u4e00\u4e2a\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\u7684\u8868\uff1a<ul> <li><code>secret_id</code> (string): \u5fc5\u9700\u3002 \u8981\u68c0\u7d22\u7684\u5bc6\u94a5\u7684\u540d\u79f0\u6216 ARN\u3002</li> <li><code>profile</code> (string): \u53ef\u9009\u3002 \u8981\u4f7f\u7528\u7684 <code>aws-vault</code> \u914d\u7f6e\u6587\u4ef6\u3002</li> </ul> </li> </ul> <p>\u8fd4\u56de:</p> <ul> <li>\u6210\u529f\u65f6\u8fd4\u56de <code>secret_string</code> (string)\u3002</li> <li>\u5931\u8d25\u65f6\u8fd4\u56de <code>nil, error_message</code>\u3002</li> </ul> <p>\u793a\u4f8b:</p> <pre><code>local db_password, err = aws.secretsmanager.get_secret({\n  secret_id = \"production/database/password\",\n  profile = \"my-app-profile\"\n})\n\nif not db_password then\n  log.error(\"\u83b7\u53d6\u5bc6\u94a5\u5931\u8d25: \" .. err)\n  return false, \"\u914d\u7f6e\u5931\u8d25\u3002\"\nend\n\n-- \u73b0\u5728\u60a8\u53ef\u4ee5\u4f7f\u7528 db_password \u53d8\u91cf\n</code></pre>"},{"location":"zh/modules/azure/","title":"Azure \u6a21\u5757","text":"<p><code>azure</code> \u6a21\u5757\u63d0\u4f9b\u4e86\u4f7f\u7528 <code>az</code> \u547d\u4ee4\u884c\u5de5\u5177\u4e0e Microsoft Azure \u8fdb\u884c\u4ea4\u4e92\u7684\u754c\u9762\u3002</p>"},{"location":"zh/modules/azure/#_1","title":"\u914d\u7f6e","text":"<p>\u6b64\u6a21\u5757\u9700\u8981\u5b89\u88c5\u5e76\u9a8c\u8bc1 <code>az</code> CLI\u3002\u5728\u4f7f\u7528\u6b64\u6a21\u5757\u7684\u7ba1\u9053\u8fd0\u884c\u4e4b\u524d\uff0c\u60a8\u5fc5\u987b\u767b\u5f55\u5230\u60a8\u7684 Azure \u5e10\u6237\uff1a</p> <pre><code>az login\n</code></pre> <p>\u8be5\u6a21\u5757\u5c06\u4f7f\u7528\u60a8\u767b\u5f55\u7684\u51ed\u636e\u6267\u884c\u6240\u6709\u547d\u4ee4\u3002</p>"},{"location":"zh/modules/azure/#_2","title":"\u901a\u7528\u6267\u884c\u5668","text":""},{"location":"zh/modules/azure/#azureexecargs","title":"<code>azure.exec(args)</code>","text":"<p>\u6267\u884c\u4efb\u4f55 <code>az</code> \u547d\u4ee4\u3002\u6b64\u51fd\u6570\u4f1a\u81ea\u52a8\u6dfb\u52a0 <code>--output json</code> \u6807\u5fd7\uff08\u5982\u679c\u5c1a\u4e0d\u5b58\u5728\uff09\uff0c\u4ee5\u786e\u4fdd\u8f93\u51fa\u662f\u673a\u5668\u53ef\u89e3\u6790\u7684\u3002</p> <p>\u53c2\u6570:</p> <ul> <li><code>args</code> (table): \u5fc5\u9700\u3002 \u4e00\u4e2a\u5b57\u7b26\u4e32\u8868\uff0c\u8868\u793a\u8981\u4f20\u9012\u7ed9 <code>az</code> \u7684\u547d\u4ee4\u548c\u53c2\u6570\uff08\u4f8b\u5982 <code>{\"group\", \"list\", \"--location\", \"eastus\"}</code>\uff09\u3002</li> </ul> <p>\u8fd4\u56de:</p> <p>\u4e00\u4e2a\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\u7684\u8868\uff1a - <code>stdout</code> (string): \u547d\u4ee4\u7684\u6807\u51c6\u8f93\u51fa\uff08\u4f5c\u4e3a JSON \u5b57\u7b26\u4e32\uff09\u3002 - <code>stderr</code> (string): \u547d\u4ee4\u7684\u6807\u51c6\u9519\u8bef\u3002 - <code>exit_code</code> (number): \u547d\u4ee4\u7684\u9000\u51fa\u4ee3\u7801\u3002<code>0</code> \u901a\u5e38\u8868\u793a\u6210\u529f\u3002</p> <p>\u793a\u4f8b:</p> <pre><code>local result = azure.exec({\"account\", \"show\"})\nif result.exit_code == 0 then\n  local account_info, err = data.parse_json(result.stdout)\n  if account_info then\n    log.info(\"\u767b\u5f55\u4e3a: \" .. account_info.user.name)\n  end\nend\n</code></pre>"},{"location":"zh/modules/azure/#rg","title":"\u8d44\u6e90\u7ec4 (RG) \u8f85\u52a9\u51fd\u6570","text":""},{"location":"zh/modules/azure/#azurergdeleteparams","title":"<code>azure.rg.delete(params)</code>","text":"<p>\u5220\u9664\u8d44\u6e90\u7ec4\u3002</p> <p>\u53c2\u6570:</p> <ul> <li><code>params</code> (table): \u4e00\u4e2a\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\u7684\u8868\uff1a<ul> <li><code>name</code> (string): \u5fc5\u9700\u3002 \u8981\u5220\u9664\u7684\u8d44\u6e90\u7ec4\u7684\u540d\u79f0\u3002</li> <li><code>yes</code> (boolean): \u53ef\u9009\u3002 \u5982\u679c\u4e3a <code>true</code>\uff0c\u5219\u6dfb\u52a0 <code>--yes</code> \u6807\u5fd7\u4ee5\u7ed5\u8fc7\u786e\u8ba4\u63d0\u793a\u3002</li> </ul> </li> </ul> <p>\u8fd4\u56de:</p> <ul> <li>\u6210\u529f\u65f6\u8fd4\u56de <code>true</code>\u3002</li> <li>\u5931\u8d25\u65f6\u8fd4\u56de <code>false, error_message</code>\u3002</li> </ul> <p>\u793a\u4f8b:</p> <pre><code>local ok, err = azure.rg.delete({\n  name = \"my-test-rg\",\n  yes = true\n})\nif not ok then\n  log.error(\"\u5220\u9664\u8d44\u6e90\u7ec4\u5931\u8d25: \" .. err)\nend\n</code></pre>"},{"location":"zh/modules/azure/#vm","title":"\u865a\u62df\u673a (VM) \u8f85\u52a9\u51fd\u6570","text":""},{"location":"zh/modules/azure/#azurevmlistparams","title":"<code>azure.vm.list(params)</code>","text":"<p>\u5217\u51fa\u865a\u62df\u673a\u3002</p> <p>\u53c2\u6570:</p> <ul> <li><code>params</code> (table): \u53ef\u9009\u3002 \u4e00\u4e2a\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\u7684\u8868\uff1a<ul> <li><code>resource_group</code> (string): \u7528\u4e8e\u5c06\u5217\u8868\u8303\u56f4\u9650\u5b9a\u4e3a\u7684\u8d44\u6e90\u7ec4\u7684\u540d\u79f0\u3002\u5982\u679c\u7701\u7565\uff0c\u5219\u5217\u51fa\u6574\u4e2a\u8ba2\u9605\u4e2d\u7684 VM\u3002</li> </ul> </li> </ul> <p>\u8fd4\u56de:</p> <ul> <li>\u6210\u529f\u65f6\u8fd4\u56de <code>vms</code> (table)\uff0c\u8be5\u8868\u662f\u60a8\u7684 VM \u5bf9\u8c61\u7684\u5df2\u89e3\u6790 JSON \u6570\u7ec4\u3002</li> <li>\u5931\u8d25\u65f6\u8fd4\u56de <code>nil, error_message</code>\u3002</li> </ul> <p>\u793a\u4f8b:</p> <pre><code>-- \u5217\u51fa\u8ba2\u9605\u4e2d\u7684\u6240\u6709 VM\nlocal all_vms, err1 = azure.vm.list()\n\n-- \u5217\u51fa\u7279\u5b9a\u8d44\u6e90\u7ec4\u4e2d\u7684 VM\nlocal specific_vms, err2 = azure.vm.list({resource_group = \"my-production-rg\"})\nif specific_vms then\n  for _, vm in ipairs(specific_vms) do\n    print(\"\u627e\u5230 VM: \" .. vm.name)\n  end\nend\n</code></pre>"},{"location":"zh/modules/data/","title":"Data \u6a21\u5757","text":"<p><code>data</code> \u6a21\u5757\u63d0\u4f9b\u4e86\u5728 Lua \u8868\u548c\u5e38\u89c1\u6570\u636e\u683c\u5f0f\uff08\u5982 JSON \u548c YAML\uff09\u4e4b\u95f4\u89e3\u6790\u548c\u5e8f\u5217\u5316\u6570\u636e\u7684\u529f\u80fd\u3002</p>"},{"location":"zh/modules/data/#dataparse_jsonjson_string","title":"<code>data.parse_json(json_string)</code>","text":"<p>\u5c06 JSON \u5b57\u7b26\u4e32\u89e3\u6790\u4e3a Lua \u8868\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>json_string</code> (string): \u8981\u89e3\u6790\u7684 JSON \u683c\u5f0f\u5b57\u7b26\u4e32\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>table</code>: \u751f\u6210\u7684 Lua \u8868\u3002</li> <li><code>error</code>: \u5982\u679c\u89e3\u6790\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/data/#datato_jsonlua_table","title":"<code>data.to_json(lua_table)</code>","text":"<p>\u5c06 Lua \u8868\u5e8f\u5217\u5316\u4e3a JSON \u5b57\u7b26\u4e32\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>lua_table</code> (table): \u8981\u5e8f\u5217\u5316\u7684 Lua \u8868\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>string</code>: \u751f\u6210\u7684 JSON \u5b57\u7b26\u4e32\u3002</li> <li><code>error</code>: \u5982\u679c\u5e8f\u5217\u5316\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/data/#dataparse_yamlyaml_string","title":"<code>data.parse_yaml(yaml_string)</code>","text":"<p>\u5c06 YAML \u5b57\u7b26\u4e32\u89e3\u6790\u4e3a Lua \u8868\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>yaml_string</code> (string): \u8981\u89e3\u6790\u7684 YAML \u683c\u5f0f\u5b57\u7b26\u4e32\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>table</code>: \u751f\u6210\u7684 Lua \u8868\u3002</li> <li><code>error</code>: \u5982\u679c\u89e3\u6790\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/data/#datato_yamllua_table","title":"<code>data.to_yaml(lua_table)</code>","text":"<p>\u5c06 Lua \u8868\u5e8f\u5217\u5316\u4e3a YAML \u5b57\u7b26\u4e32\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>lua_table</code> (table): \u8981\u5e8f\u5217\u5316\u7684 Lua \u8868\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>string</code>: \u751f\u6210\u7684 YAML \u5b57\u7b26\u4e32\u3002</li> <li><code>error</code>: \u5982\u679c\u5e8f\u5217\u5316\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/data/#_1","title":"\u793a\u4f8b","text":"<pre><code>command = function()\n  local data = require(\"data\")\n\n  -- JSON \u793a\u4f8b\n  log.info(\"\u6d4b\u8bd5 JSON \u5e8f\u5217\u5316...\")\n  local my_table = { name = \"sloth-runner\", version = 1.0, features = { \"tasks\", \"lua\" } }\n  local json_str, err = data.to_json(my_table)\n  if err then\n    return false, \"\u5e8f\u5217\u5316\u5230 JSON \u5931\u8d25: \" .. err\n  end\n  print(\"\u5e8f\u5217\u5316\u7684 JSON: \" .. json_str)\n\n  log.info(\"\u6d4b\u8bd5 JSON \u89e3\u6790...\")\n  local parsed_table, err = data.parse_json(json_str)\n  if err then\n    return false, \"\u89e3\u6790 JSON \u5931\u8d25: \" .. err\n  end\n  log.info(\"\u4ece JSON \u89e3\u6790\u7684\u540d\u79f0: \" .. parsed_table.name)\n\n  -- YAML \u793a\u4f8b\n  log.info(\"\u6d4b\u8bd5 YAML \u5e8f\u5217\u5316...\")\n  local yaml_str, err = data.to_yaml(my_table)\n  if err then\n    return false, \"\u5e8f\u5217\u5316\u5230 YAML \u5931\u8d25: \" .. err\n  end\n  print(\"\u5e8f\u5217\u5316\u7684 YAML:\\n\" .. yaml_str)\n\n  log.info(\"\u6d4b\u8bd5 YAML \u89e3\u6790...\")\n  parsed_table, err = data.parse_yaml(yaml_str)\n  if err then\n    return false, \"\u89e3\u6790 YAML \u5931\u8d25: \" .. err\n  end\n  log.info(\"\u4ece YAML \u89e3\u6790\u7684\u7248\u672c: \" .. parsed_table.version)\n\n  return true, \"Data \u6a21\u5757\u64cd\u4f5c\u6210\u529f\u3002\"\nend\n</code></pre> <p>```</p>"},{"location":"zh/modules/digitalocean/","title":"DigitalOcean \u6a21\u5757","text":"<p><code>digitalocean</code> \u6a21\u5757\u63d0\u4f9b\u4e86\u4f7f\u7528 <code>doctl</code> \u547d\u4ee4\u884c\u5de5\u5177\u4e0e\u60a8\u7684 DigitalOcean \u8d44\u6e90\u8fdb\u884c\u4ea4\u4e92\u7684\u754c\u9762\u3002</p>"},{"location":"zh/modules/digitalocean/#_1","title":"\u914d\u7f6e","text":"<p>\u6b64\u6a21\u5757\u9700\u8981\u5b89\u88c5\u5e76\u9a8c\u8bc1 <code>doctl</code> CLI\u3002\u6807\u51c6\u65b9\u6cd5\u662f\u5728\u60a8\u7684 DigitalOcean \u63a7\u5236\u9762\u677f\u4e2d\u751f\u6210\u4e2a\u4eba\u8bbf\u95ee\u4ee4\u724c\uff0c\u5e76\u5c06\u5176\u8bbe\u7f6e\u4e3a <code>DIGITALOCEAN_ACCESS_TOKEN</code> \u73af\u5883\u53d8\u91cf\u3002</p> <pre><code>export DIGITALOCEAN_ACCESS_TOKEN=\"your_do_api_token_here\"\n</code></pre> <p>\u8be5\u6a21\u5757\u5c06\u81ea\u52a8\u5c06\u6b64\u4ee4\u724c\u7528\u4e8e\u6240\u6709\u547d\u4ee4\u3002</p>"},{"location":"zh/modules/digitalocean/#_2","title":"\u901a\u7528\u6267\u884c\u5668","text":""},{"location":"zh/modules/digitalocean/#digitaloceanexecargs","title":"<code>digitalocean.exec(args)</code>","text":"<p>\u6267\u884c\u4efb\u4f55 <code>doctl</code> \u547d\u4ee4\u3002\u6b64\u51fd\u6570\u4f1a\u81ea\u52a8\u6dfb\u52a0 <code>--output json</code> \u6807\u5fd7\uff0c\u4ee5\u786e\u4fdd\u8f93\u51fa\u662f\u673a\u5668\u53ef\u89e3\u6790\u7684\u3002</p> <p>\u53c2\u6570:</p> <ul> <li><code>args</code> (table): \u5fc5\u9700\u3002 \u4e00\u4e2a\u5b57\u7b26\u4e32\u8868\uff0c\u8868\u793a\u8981\u4f20\u9012\u7ed9 <code>doctl</code> \u7684\u547d\u4ee4\u548c\u53c2\u6570\uff08\u4f8b\u5982 <code>{\"compute\", \"droplet\", \"list\"}</code>\uff09\u3002</li> </ul> <p>\u8fd4\u56de:</p> <p>\u4e00\u4e2a\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\u7684\u8868\uff1a - <code>stdout</code> (string): \u547d\u4ee4\u7684\u6807\u51c6\u8f93\u51fa\uff08\u4f5c\u4e3a JSON \u5b57\u7b26\u4e32\uff09\u3002 - <code>stderr</code> (string): \u547d\u4ee4\u7684\u6807\u51c6\u9519\u8bef\u3002 - <code>exit_code</code> (number): \u547d\u4ee4\u7684\u9000\u51fa\u4ee3\u7801\u3002<code>0</code> \u901a\u5e38\u8868\u793a\u6210\u529f\u3002</p> <p>\u793a\u4f8b:</p> <pre><code>local result = digitalocean.exec({\"account\", \"get\"})\nif result.exit_code == 0 then\n  local account_info, err = data.parse_json(result.stdout)\n  if account_info then\n    log.info(\"\u5e10\u6237\u72b6\u6001: \" .. account_info.status)\n  end\nend\n</code></pre>"},{"location":"zh/modules/digitalocean/#droplets","title":"Droplets \u8f85\u52a9\u51fd\u6570","text":""},{"location":"zh/modules/digitalocean/#digitaloceandropletslist","title":"<code>digitalocean.droplets.list()</code>","text":"<p>\u4e00\u4e2a\u9ad8\u7ea7\u5305\u88c5\u5668\uff0c\u7528\u4e8e\u5217\u51fa\u60a8\u5e10\u6237\u4e2d\u7684\u6240\u6709 Droplet\u3002</p> <p>\u8fd4\u56de:</p> <ul> <li>\u6210\u529f\u65f6\u8fd4\u56de <code>droplets</code> (table)\uff0c\u8be5\u8868\u662f\u60a8\u7684 Droplet \u5bf9\u8c61\u7684\u5df2\u89e3\u6790 JSON \u6570\u7ec4\u3002</li> <li>\u5931\u8d25\u65f6\u8fd4\u56de <code>nil, error_message</code>\u3002</li> </ul> <p>\u793a\u4f8b:</p> <pre><code>local droplets, err = digitalocean.droplets.list()\nif droplets then\n  for _, droplet in ipairs(droplets) do\n    print(\"\u627e\u5230 Droplet: \" .. droplet.name)\n  end\nend\n</code></pre>"},{"location":"zh/modules/digitalocean/#digitaloceandropletsdeleteparams","title":"<code>digitalocean.droplets.delete(params)</code>","text":"<p>\u6309 ID \u5220\u9664\u7279\u5b9a\u7684 Droplet\u3002</p> <p>\u53c2\u6570:</p> <ul> <li><code>params</code> (table): \u4e00\u4e2a\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\u7684\u8868\uff1a<ul> <li><code>id</code> (string): \u5fc5\u9700\u3002 \u8981\u5220\u9664\u7684 Droplet \u7684 ID\u3002</li> <li><code>force</code> (boolean): \u53ef\u9009\u3002 \u5982\u679c\u4e3a <code>true</code>\uff0c\u5219\u6dfb\u52a0 <code>--force</code> \u6807\u5fd7\u4ee5\u7ed5\u8fc7\u786e\u8ba4\u63d0\u793a\u3002\u9ed8\u8ba4\u4e3a <code>false</code>\u3002</li> </ul> </li> </ul> <p>\u8fd4\u56de:</p> <ul> <li>\u6210\u529f\u65f6\u8fd4\u56de <code>true</code>\u3002</li> <li>\u5931\u8d25\u65f6\u8fd4\u56de <code>false, error_message</code>\u3002</li> </ul> <p>\u793a\u4f8b:</p> <pre><code>local ok, err = digitalocean.droplets.delete({\n  id = \"123456789\",\n  force = true\n})\nif not ok then\n  log.error(\"\u5220\u9664 droplet \u5931\u8d25: \" .. err)\nend\n</code></pre>"},{"location":"zh/modules/docker/","title":"Docker \u6a21\u5757","text":"<p><code>docker</code> \u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a\u65b9\u4fbf\u7684\u754c\u9762\uff0c\u7528\u4e8e\u4e0e Docker \u5b88\u62a4\u8fdb\u7a0b\u4ea4\u4e92\uff0c\u5141\u8bb8\u60a8\u5728\u7ba1\u9053\u4e2d\u6784\u5efa\u3001\u8fd0\u884c\u548c\u63a8\u9001 Docker \u955c\u50cf\u3002</p>"},{"location":"zh/modules/docker/#_1","title":"\u914d\u7f6e","text":"<p>\u6b64\u6a21\u5757\u9700\u8981\u5b89\u88c5 <code>docker</code> CLI\uff0c\u5e76\u4e14 Docker \u5b88\u62a4\u8fdb\u7a0b\u6b63\u5728\u8fd0\u884c\u4e14\u53ef\u8bbf\u95ee\u3002</p>"},{"location":"zh/modules/docker/#_2","title":"\u51fd\u6570","text":""},{"location":"zh/modules/docker/#dockerexecargs","title":"<code>docker.exec(args)</code>","text":"<p>\u6267\u884c\u4efb\u4f55\u539f\u59cb\u7684 <code>docker</code> \u547d\u4ee4\u3002</p> <ul> <li><code>args</code> (table): \u5fc5\u9700\u3002 \u8981\u4f20\u9012\u7ed9 <code>docker</code> \u547d\u4ee4\u7684\u53c2\u6570\u5217\u8868\uff08\u4f8b\u5982 <code>{\"ps\", \"-a\"}</code>\uff09\u3002</li> <li>\u8fd4\u56de: \u5305\u542b <code>success</code>\u3001<code>stdout</code>\u3001<code>stderr</code> \u548c <code>exit_code</code> \u7684\u7ed3\u679c\u8868\u3002</li> </ul>"},{"location":"zh/modules/docker/#dockerbuildparams","title":"<code>docker.build(params)</code>","text":"<p>\u4f7f\u7528 <code>docker build</code> \u6784\u5efa Docker \u955c\u50cf\u3002</p> <ul> <li><code>params</code> (table):<ul> <li><code>tag</code> (string): \u5fc5\u9700\u3002 \u955c\u50cf\u7684\u6807\u7b7e\uff08\u4f8b\u5982 <code>my-app:latest</code>\uff09\u3002</li> <li><code>path</code> (string): \u5fc5\u9700\u3002 \u6784\u5efa\u4e0a\u4e0b\u6587\u8def\u5f84\u3002</li> <li><code>dockerfile</code> (string): \u53ef\u9009\u3002 Dockerfile \u7684\u8def\u5f84\u3002</li> <li><code>build_args</code> (table): \u53ef\u9009\u3002 \u6784\u5efa\u53c2\u6570\u8868\uff08\u4f8b\u5982 <code>{VERSION = \"1.0\"}</code>\uff09\u3002</li> </ul> </li> <li>\u8fd4\u56de: \u7ed3\u679c\u8868\u3002</li> </ul>"},{"location":"zh/modules/docker/#dockerpushparams","title":"<code>docker.push(params)</code>","text":"<p>\u4f7f\u7528 <code>docker push</code> \u5c06 Docker \u955c\u50cf\u63a8\u9001\u5230\u6ce8\u518c\u8868\u3002</p> <ul> <li><code>params</code> (table):<ul> <li><code>tag</code> (string): \u5fc5\u9700\u3002 \u8981\u63a8\u9001\u7684\u955c\u50cf\u7684\u6807\u7b7e\u3002</li> </ul> </li> <li>\u8fd4\u56de: \u7ed3\u679c\u8868\u3002</li> </ul>"},{"location":"zh/modules/docker/#dockerrunparams","title":"<code>docker.run(params)</code>","text":"<p>\u4f7f\u7528 <code>docker run</code> \u8fd0\u884c Docker \u5bb9\u5668\u3002</p> <ul> <li><code>params</code> (table):<ul> <li><code>image</code> (string): \u5fc5\u9700\u3002 \u8981\u8fd0\u884c\u7684\u955c\u50cf\u3002</li> <li><code>name</code> (string): \u53ef\u9009\u3002 \u5bb9\u5668\u7684\u540d\u79f0\u3002</li> <li><code>detach</code> (boolean): \u53ef\u9009\u3002 \u5982\u679c\u4e3a <code>true</code>\uff0c\u5219\u5728\u540e\u53f0\u8fd0\u884c\u5bb9\u5668 (<code>-d</code>)\u3002</li> <li><code>ports</code> (table): \u53ef\u9009\u3002 \u7aef\u53e3\u6620\u5c04\u5217\u8868\uff08\u4f8b\u5982 <code>{\"8080:80\"}</code>\uff09\u3002</li> <li><code>env</code> (table): \u53ef\u9009\u3002 \u73af\u5883\u53d8\u91cf\u8868\uff08\u4f8b\u5982 <code>{MY_VAR = \"value\"}</code>\uff09\u3002</li> </ul> </li> <li>\u8fd4\u56de: \u7ed3\u679c\u8868\u3002</li> </ul>"},{"location":"zh/modules/docker/#_3","title":"\u793a\u4f8b","text":"<pre><code>local image_tag = \"my-test-image:latest\"\n\n-- \u4efb\u52a1 1: Build\nlocal result_build = docker.build({\n  tag = image_tag,\n  path = \"./app\"\n})\nif not result_build.success then return false, \"\u6784\u5efa\u5931\u8d25\" end\n\n-- \u4efb\u52a1 2: Run\nlocal result_run = docker.run({\n  image = image_tag,\n  name = \"my-test-container\",\n  ports = {\"8080:80\"}\n})\nif not result_run.success then return false, \"\u8fd0\u884c\u5931\u8d25\" end\n\n-- \u4efb\u52a1 3: Push (\u6d4b\u8bd5\u6210\u529f\u540e)\nlocal result_push = docker.push({tag = image_tag})\nif not result_push.success then return false, \"\u63a8\u9001\u5931\u8d25\" end\n</code></pre>"},{"location":"zh/modules/exec/","title":"Exec \u6a21\u5757","text":"<p><code>exec</code> \u6a21\u5757\u662f <code>sloth-runner</code> \u4e2d\u6700\u57fa\u672c\u7684\u6a21\u5757\u4e4b\u4e00\u3002\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5f3a\u5927\u7684\u51fd\u6570\u6765\u6267\u884c\u4efb\u610f\u7684 shell \u547d\u4ee4\uff0c\u8ba9\u60a8\u53ef\u4ee5\u5b8c\u5168\u63a7\u5236\u6267\u884c\u73af\u5883\u3002</p>"},{"location":"zh/modules/exec/#execruncommand-options","title":"<code>exec.run(command, [options])</code>","text":"<p>\u4f7f\u7528 <code>bash -c</code> \u6267\u884c\u4e00\u4e2a shell \u547d\u4ee4\u3002</p>"},{"location":"zh/modules/exec/#_1","title":"\u53c2\u6570","text":"<ul> <li><code>command</code> (string): \u8981\u6267\u884c\u7684 shell \u547d\u4ee4\u3002</li> <li><code>options</code> (table, \u53ef\u9009): \u7528\u4e8e\u63a7\u5236\u6267\u884c\u7684\u9009\u9879\u8868\u3002<ul> <li><code>workdir</code> (string): \u547d\u4ee4\u5e94\u5728\u5176\u4e2d\u6267\u884c\u7684\u5de5\u4f5c\u76ee\u5f55\u3002\u5982\u679c\u672a\u63d0\u4f9b\uff0c\u5b83\u5c06\u5728\u4efb\u52a1\u7ec4\u7684\u4e34\u65f6\u76ee\u5f55\uff08\u5982\u679c\u53ef\u7528\uff09\u6216\u5f53\u524d\u76ee\u5f55\u4e2d\u8fd0\u884c\u3002</li> <li><code>env</code> (table): \u4e3a\u547d\u4ee4\u6267\u884c\u8bbe\u7f6e\u7684\u73af\u5883\u53d8\u91cf\u5b57\u5178\uff08\u952e\u503c\u5bf9\uff09\u3002\u8fd9\u4e9b\u53d8\u91cf\u4f1a\u6dfb\u52a0\u5230\u73b0\u6709\u73af\u5883\u4e2d\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/exec/#_2","title":"\u8fd4\u56de","text":"<p>\u4e00\u4e2a\u5305\u542b\u547d\u4ee4\u6267\u884c\u7ed3\u679c\u7684\u8868\uff1a</p> <ul> <li><code>success</code> (boolean): \u5982\u679c\u547d\u4ee4\u4ee5\u4ee3\u7801 <code>0</code> \u9000\u51fa\uff0c\u5219\u4e3a <code>true</code>\uff0c\u5426\u5219\u4e3a <code>false</code>\u3002</li> <li><code>stdout</code> (string): \u547d\u4ee4\u7684\u6807\u51c6\u8f93\u51fa\u3002</li> <li><code>stderr</code> (string): \u547d\u4ee4\u7684\u6807\u51c6\u9519\u8bef\u8f93\u51fa\u3002</li> </ul>"},{"location":"zh/modules/exec/#_3","title":"\u793a\u4f8b","text":"<p>\u6b64\u793a\u4f8b\u6f14\u793a\u5982\u4f55\u4f7f\u7528\u5e26\u6709\u81ea\u5b9a\u4e49\u5de5\u4f5c\u76ee\u5f55\u548c\u73af\u5883\u53d8\u91cf\u7684 <code>exec.run</code>\u3002</p> <pre><code>-- examples/exec_module_example.sloth\n\nModern DSLs = {\n  main = {\n    description = \"\u4e00\u4e2a\u6f14\u793a exec \u6a21\u5757\u7684\u4efb\u52a1\u3002\",\n    tasks = {\n      {\n        name = \"run-with-options\",\n        description = \"\u4f7f\u7528\u81ea\u5b9a\u4e49\u5de5\u4f5c\u76ee\u5f55\u548c\u73af\u5883\u6267\u884c\u547d\u4ee4\u3002\",\n        command = function()\n          log.info(\"\u51c6\u5907\u8fd0\u884c\u81ea\u5b9a\u4e49\u547d\u4ee4...\")\n\n          local exec = require(\"exec\")\n\n          -- \u4e3a\u793a\u4f8b\u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u76ee\u5f55\n          local temp_dir = \"/tmp/sloth-exec-test\"\n          fs.mkdir(temp_dir)\n          fs.write(temp_dir .. \"/test.txt\", \"\u6765\u81ea\u6d4b\u8bd5\u6587\u4ef6\u7684\u95ee\u5019\")\n\n          -- \u5b9a\u4e49\u9009\u9879\n          local options = {\n            workdir = temp_dir,\n            env = {\n              MY_VAR = \"SlothRunner\",\n              ANOTHER_VAR = \"is_awesome\"\n            }\n          }\n\n          -- \u6267\u884c\u547d\u4ee4\n          local result = exec.run(\"echo 'MY_VAR is $MY_VAR' &amp;&amp; ls -l &amp;&amp; cat test.txt\", options)\n\n          -- \u6e05\u7406\u4e34\u65f6\u76ee\u5f55\n          fs.rm_r(temp_dir)\n\n          if result.success then\n            log.info(\"\u547d\u4ee4\u6210\u529f\u6267\u884c\uff01\")\n            print(\"--- STDOUT ---\")\n            print(result.stdout)\n            print(\"--------------\")\n            return true, \"Exec \u547d\u4ee4\u6210\u529f\u3002\"\n          else\n            log.error(\"Exec \u547d\u4ee4\u5931\u8d25\u3002\")\n            log.error(\"Stderr: \" .. result.stderr)\n            return false, \"Exec \u547d\u4ee4\u5931\u8d25\u3002\"\n          end\n        end\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"zh/modules/fs/","title":"FS \u6a21\u5757","text":"<p><code>fs</code> \u6a21\u5757\u63d0\u4f9b\u4e86\u4ece\u60a8\u7684 Lua \u811a\u672c\u76f4\u63a5\u4e0e\u6587\u4ef6\u7cfb\u7edf\u4ea4\u4e92\u7684\u57fa\u672c\u529f\u80fd\u3002</p> <p>---\\n</p>"},{"location":"zh/modules/fs/#fsreadpath","title":"<code>fs.read(path)</code>","text":"<p>\u8bfb\u53d6\u6587\u4ef6\u7684\u5168\u90e8\u5185\u5bb9\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>path</code> (string): \u6587\u4ef6\u8def\u5f84\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>string</code>: \u6587\u4ef6\u5185\u5bb9\u3002</li> <li><code>error</code>: \u5982\u679c\u8bfb\u53d6\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"zh/modules/fs/#fswritepath-content","title":"<code>fs.write(path, content)</code>","text":"<p>\u5c06\u5185\u5bb9\u5199\u5165\u6587\u4ef6\uff0c\u5982\u679c\u6587\u4ef6\u5df2\u5b58\u5728\u5219\u8986\u76d6\u5b83\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>path</code> (string): \u6587\u4ef6\u8def\u5f84\u3002</li> <li><code>content</code> (string): \u8981\u5199\u5165\u7684\u5185\u5bb9\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>error</code>: \u5982\u679c\u5199\u5165\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"zh/modules/fs/#fsappendpath-content","title":"<code>fs.append(path, content)</code>","text":"<p>\u5c06\u5185\u5bb9\u8ffd\u52a0\u5230\u6587\u4ef6\u672b\u5c3e\u3002\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u5219\u521b\u5efa\u5b83\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>path</code> (string): \u6587\u4ef6\u8def\u5f84\u3002</li> <li><code>content</code> (string): \u8981\u8ffd\u52a0\u7684\u5185\u5bb9\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>error</code>: \u5982\u679c\u8ffd\u52a0\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"zh/modules/fs/#fsexistspath","title":"<code>fs.exists(path)</code>","text":"<p>\u68c0\u67e5\u7ed9\u5b9a\u8def\u5f84\u7684\u6587\u4ef6\u6216\u76ee\u5f55\u662f\u5426\u5b58\u5728\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>path</code> (string): \u8981\u68c0\u67e5\u7684\u8def\u5f84\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>boolean</code>: \u5982\u679c\u8def\u5f84\u5b58\u5728\uff0c\u5219\u4e3a <code>true</code>\uff0c\u5426\u5219\u4e3a <code>false</code>\u3002</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"zh/modules/fs/#fsmkdirpath","title":"<code>fs.mkdir(path)</code>","text":"<p>\u5728\u7ed9\u5b9a\u8def\u5f84\u521b\u5efa\u4e00\u4e2a\u76ee\u5f55\uff0c\u5305\u62ec\u4efb\u4f55\u5fc5\u8981\u7684\u7236\u76ee\u5f55 (\u7c7b\u4f3c\u4e8e <code>mkdir -p</code>)\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>path</code> (string): \u8981\u521b\u5efa\u7684\u76ee\u5f55\u8def\u5f84\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>error</code>: \u5982\u679c\u521b\u5efa\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"zh/modules/fs/#fsrmpath","title":"<code>fs.rm(path)</code>","text":"<p>\u5220\u9664\u5355\u4e2a\u6587\u4ef6\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>path</code> (string): \u8981\u5220\u9664\u7684\u6587\u4ef6\u7684\u8def\u5f84\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>error</code>: \u5982\u679c\u5220\u9664\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"zh/modules/fs/#fsrm_rpath","title":"<code>fs.rm_r(path)</code>","text":"<p>\u9012\u5f52\u5730\u5220\u9664\u6587\u4ef6\u6216\u76ee\u5f55 (\u7c7b\u4f3c\u4e8e <code>rm -rf</code>)\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>path</code> (string): \u8981\u5220\u9664\u7684\u8def\u5f84\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>error</code>: \u5982\u679c\u5220\u9664\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"zh/modules/fs/#fslspath","title":"<code>fs.ls(path)</code>","text":"<p>\u5217\u51fa\u76ee\u5f55\u7684\u5185\u5bb9\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>path</code> (string): \u76ee\u5f55\u7684\u8def\u5f84\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>table</code>: \u5305\u542b\u6587\u4ef6\u548c\u5b50\u76ee\u5f55\u540d\u79f0\u7684\u8868\u3002</li> <li><code>error</code>: \u5982\u679c\u5217\u51fa\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"zh/modules/fs/#fstmpname","title":"<code>fs.tmpname()</code>","text":"<p>\u751f\u6210\u4e00\u4e2a\u552f\u4e00\u7684\u4e34\u65f6\u76ee\u5f55\u8def\u5f84\u3002\u6ce8\u610f\uff1a\u6b64\u51fd\u6570\u4ec5\u8fd4\u56de\u540d\u79f0\uff0c\u4e0d\u521b\u5efa\u76ee\u5f55\u3002</p> <ul> <li>\u8fd4\u56de:<ul> <li><code>string</code>: \u9002\u5408\u7528\u4f5c\u4e34\u65f6\u76ee\u5f55\u7684\u552f\u4e00\u8def\u5f84\u3002</li> <li><code>error</code>: \u5982\u679c\u65e0\u6cd5\u751f\u6210\u540d\u79f0\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/fs/#_1","title":"\u793a\u4f8b","text":"<pre><code>command = function()\n  local fs = require(\"fs\")\n\n  local tmp_dir = \"/tmp/fs-example\"\n  log.info(\"\u6b63\u5728\u521b\u5efa\u76ee\u5f55: \" .. tmp_dir)\n  fs.mkdir(tmp_dir)\n\n  local file_path = tmp_dir .. \"/my_file.txt\"\n  log.info(\"\u6b63\u5728\u5199\u5165\u6587\u4ef6: \" .. file_path)\n  fs.write(file_path, \"\u4f60\u597d, Sloth Runner!\\n\")\n\n  log.info(\"\u6b63\u5728\u8ffd\u52a0\u5230\u6587\u4ef6...\")\n  fs.append(file_path, \"\u8fd9\u662f\u4e00\u4e2a\u65b0\u884c\u3002\")\n\n  if fs.exists(file_path) then\n    log.info(\"\u6587\u4ef6\u5185\u5bb9: \" .. fs.read(file_path))\n  end\n\n  log.info(\"\u6b63\u5728\u5217\u51fa \" .. tmp_dir .. \" \u7684\u5185\u5bb9\")\n  local contents = fs.ls(tmp_dir)\n  for i, name in ipairs(contents) do\n    print(\"- \" .. name)\n  end\n\n  log.info(\"\u6b63\u5728\u6e05\u7406...\")\n  fs.rm_r(tmp_dir)\n\n  return true, \"FS \u6a21\u5757\u64cd\u4f5c\u6210\u529f\u3002\"\nend\n</code></pre> <p>```</p>"},{"location":"zh/modules/gcp/","title":"GCP \u6a21\u5757","text":"<p><code>gcp</code> \u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u754c\u9762\uff0c\u7528\u4e8e\u4ece <code>sloth-runner</code> \u4efb\u52a1\u5185\u90e8\u6267\u884c\u8c37\u6b4c\u4e91\u547d\u4ee4\u884c\u754c\u9762 (<code>gcloud</code>) \u547d\u4ee4\u3002</p>"},{"location":"zh/modules/gcp/#gcpexecargs","title":"<code>gcp.exec(args)</code>","text":"<p>\u4f7f\u7528\u6307\u5b9a\u7684\u53c2\u6570\u6267\u884c <code>gcloud</code> \u547d\u4ee4\u3002</p>"},{"location":"zh/modules/gcp/#_1","title":"\u53c2\u6570","text":"<ul> <li><code>args</code> (table): \u4e00\u4e2a Lua \u8868\uff08\u6570\u7ec4\uff09\uff0c\u5305\u542b\u8981\u4f20\u9012\u7ed9 <code>gcloud</code> \u547d\u4ee4\u7684\u5b57\u7b26\u4e32\u53c2\u6570\u3002\u4f8b\u5982\uff0c<code>{\"compute\", \"instances\", \"list\"}</code>\u3002</li> </ul>"},{"location":"zh/modules/gcp/#_2","title":"\u8fd4\u56de","text":"<p>\u4e00\u4e2a\u5305\u542b\u547d\u4ee4\u6267\u884c\u7ed3\u679c\u7684\u8868\uff0c\u5176\u4e2d\u5305\u542b\u4ee5\u4e0b\u952e\uff1a</p> <ul> <li><code>stdout</code> (string): \u547d\u4ee4\u7684\u6807\u51c6\u8f93\u51fa\u3002</li> <li><code>stderr</code> (string): \u547d\u4ee4\u7684\u6807\u51c6\u9519\u8bef\u8f93\u51fa\u3002</li> <li><code>exit_code</code> (number): \u547d\u4ee4\u7684\u9000\u51fa\u4ee3\u7801\u3002\u9000\u51fa\u4ee3\u7801 <code>0</code> \u901a\u5e38\u8868\u793a\u6210\u529f\u3002</li> </ul>"},{"location":"zh/modules/gcp/#_3","title":"\u793a\u4f8b","text":"<p>\u6b64\u793a\u4f8b\u5b9a\u4e49\u4e86\u4e00\u4e2a\u4efb\u52a1\uff0c\u7528\u4e8e\u5217\u51fa\u7279\u5b9a\u9879\u76ee\u5728 <code>us-central1</code> \u533a\u57df\u4e2d\u7684\u6240\u6709 Compute Engine \u5b9e\u4f8b\u3002</p> <pre><code>-- examples/gcp_cli_example.sloth\n\nModern DSLs = {\n  main = {\n    description = \"\u4e00\u4e2a\u5217\u51fa GCP \u8ba1\u7b97\u5b9e\u4f8b\u7684\u4efb\u52a1\u3002\",\n    tasks = {\n      {\n        name = \"list-instances\",\n        description = \"\u5217\u51fa us-central1 \u4e2d\u7684 GCE \u5b9e\u4f8b\u3002\",\n        command = function()\n          log.info(\"\u6b63\u5728\u5217\u51fa GCP \u5b9e\u4f8b...\")\n\n          -- \u9700\u8981 gcp \u6a21\u5757\u4f7f\u5176\u53ef\u7528\n          local gcp = require(\"gcp\")\n\n          -- \u6267\u884c gcloud \u547d\u4ee4\n          local result = gcp.exec({\n            \"compute\", \n            \"instances\", \n            \"list\", \n            \"--project\", \"my-gcp-project-id\",\n            \"--zones\", \"us-central1-a,us-central1-b\"\n          })\n\n          -- \u68c0\u67e5\u7ed3\u679c\n          if result and result.exit_code == 0 then\n            log.info(\"\u6210\u529f\u5217\u51fa\u5b9e\u4f8b\u3002\")\n            print(\"--- \u5b9e\u4f8b\u5217\u8868 ---\")\n            print(result.stdout)\n            print(\"---------------------\")\n            return true, \"GCP \u547d\u4ee4\u6210\u529f\u3002\"\n          else\n            log.error(\"\u672a\u80fd\u5217\u51fa GCP \u5b9e\u4f8b\u3002\")\n            if result then\n              log.error(\"Stderr: \" .. result.stderr)\n            end\n            return false, \"GCP \u547d\u4ee4\u5931\u8d25\u3002\"\n          end\n        end\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"zh/modules/git/","title":"Git \u6a21\u5757","text":"<p><code>git</code> \u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6d41\u7545\u7684 API \u6765\u4e0e Git \u5b58\u50a8\u5e93\u8fdb\u884c\u4ea4\u4e92\uff0c\u5141\u8bb8\u60a8\u81ea\u52a8\u5316\u5e38\u89c1\u7684\u7248\u672c\u63a7\u5236\u64cd\u4f5c\uff0c\u5982\u514b\u9686\u3001\u63d0\u4ea4\u548c\u63a8\u9001\u3002</p>"},{"location":"zh/modules/git/#gitcloneurl-path","title":"<code>git.clone(url, path)</code>","text":"<p>\u5c06 Git \u5b58\u50a8\u5e93\u514b\u9686\u5230\u672c\u5730\u8def\u5f84\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>url</code> (string): \u8981\u514b\u9686\u7684\u5b58\u50a8\u5e93\u7684 URL\u3002</li> <li><code>path</code> (string): \u8981\u514b\u9686\u5230\u7684\u672c\u5730\u76ee\u5f55\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>repo</code> (object): \u6210\u529f\u65f6\u8fd4\u56de\u4e00\u4e2a <code>GitRepo</code> \u5bf9\u8c61\u3002</li> <li><code>error</code>: \u5982\u679c\u514b\u9686\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/git/#gitrepopath","title":"<code>git.repo(path)</code>","text":"<p>\u6253\u5f00\u4e00\u4e2a\u73b0\u6709\u7684\u672c\u5730 Git \u5b58\u50a8\u5e93\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>path</code> (string): \u73b0\u6709\u672c\u5730\u5b58\u50a8\u5e93\u7684\u8def\u5f84\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>repo</code> (object): \u6210\u529f\u65f6\u8fd4\u56de\u4e00\u4e2a <code>GitRepo</code> \u5bf9\u8c61\u3002</li> <li><code>error</code>: \u5982\u679c\u8def\u5f84\u4e0d\u662f\u6709\u6548\u7684 Git \u5b58\u50a8\u5e93\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/git/#gitrepo","title":"<code>GitRepo</code> \u5bf9\u8c61","text":"<p>\u6b64\u5bf9\u8c61\u8868\u793a\u4e00\u4e2a\u672c\u5730\u5b58\u50a8\u5e93\uff0c\u5e76\u63d0\u4f9b\u53ef\u94fe\u63a5\u7684\u65b9\u6cd5\u6765\u6267\u884c Git \u64cd\u4f5c\u3002</p>"},{"location":"zh/modules/git/#repocheckoutref","title":"<code>repo:checkout(ref)</code>","text":"<p>\u68c0\u51fa\u7279\u5b9a\u7684\u5206\u652f\u3001\u6807\u7b7e\u6216\u63d0\u4ea4\u3002</p> <ul> <li>\u53c2\u6570: <code>ref</code> (string)\u3002</li> </ul>"},{"location":"zh/modules/git/#repopullremote-branch","title":"<code>repo:pull(remote, branch)</code>","text":"<p>\u4ece\u8fdc\u7a0b\u62c9\u53d6\u66f4\u6539\u3002</p> <ul> <li>\u53c2\u6570: <code>remote</code> (string), <code>branch</code> (string)\u3002</li> </ul>"},{"location":"zh/modules/git/#repoaddpattern","title":"<code>repo:add(pattern)</code>","text":"<p>\u5c06\u6587\u4ef6\u6682\u5b58\u4ee5\u8fdb\u884c\u63d0\u4ea4\u3002</p> <ul> <li>\u53c2\u6570: <code>pattern</code> (string), \u4f8b\u5982 <code>\".\"</code> \u6216 <code>\"path/to/file.txt\"</code>\u3002</li> </ul>"},{"location":"zh/modules/git/#repocommitmessage","title":"<code>repo:commit(message)</code>","text":"<p>\u521b\u5efa\u4e00\u4e2a\u63d0\u4ea4\u3002</p> <ul> <li>\u53c2\u6570: <code>message</code> (string)\u3002</li> </ul>"},{"location":"zh/modules/git/#repotagname-message","title":"<code>repo:tag(name, [message])</code>","text":"<p>\u521b\u5efa\u4e00\u4e2a\u65b0\u6807\u7b7e\u3002</p> <ul> <li>\u53c2\u6570: <code>name</code> (string), <code>message</code> (string, \u53ef\u9009)\u3002</li> </ul>"},{"location":"zh/modules/git/#repopushremote-branch-options","title":"<code>repo:push(remote, branch, [options])</code>","text":"<p>\u5c06\u63d0\u4ea4\u63a8\u9001\u5230\u8fdc\u7a0b\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>remote</code> (string)\u3002</li> <li><code>branch</code> (string)\u3002</li> <li><code>options</code> (table, \u53ef\u9009): \u4f8b\u5982 <code>{ follow_tags = true }</code>\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/git/#reporesult","title":"<code>repo:result()</code>","text":"<p>\u6b64\u65b9\u6cd5\u5728\u94fe\u7684\u672b\u5c3e\u8c03\u7528\uff0c\u4ee5\u83b7\u53d6\u6700\u540e\u4e00\u4e2a\u64cd\u4f5c\u7684\u7ed3\u679c\u3002</p> <ul> <li>\u8fd4\u56de:<ul> <li><code>result</code> (table): \u4e00\u4e2a\u5305\u542b <code>success</code> (boolean)\u3001<code>stdout</code> (string) \u548c <code>stderr</code> (string) \u7684\u8868\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/git/#_1","title":"\u793a\u4f8b","text":"<p>\u6b64\u793a\u4f8b\u6f14\u793a\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684\u7c7b\u4f3c CI/CD \u7684\u5de5\u4f5c\u6d41\uff1a\u514b\u9686\u3001\u521b\u5efa\u7248\u672c\u6587\u4ef6\u3001\u6dfb\u52a0\u3001\u63d0\u4ea4\u3001\u6253\u6807\u7b7e\u548c\u63a8\u9001\u3002</p> <pre><code>command = function()\n  local git = require(\"git\")\n  local repo_path = \"/tmp/git-example-repo\"\n\n  -- \u6e05\u7406\u4ee5\u524d\u7684\u8fd0\u884c\n  fs.rm_r(repo_path)\n\n  -- 1. \u514b\u9686\u5b58\u50a8\u5e93\n  log.info(\"\u6b63\u5728\u514b\u9686\u5b58\u50a8\u5e93...\")\n  local repo, err = git.clone(\"https://github.com/chalkan3-sloth/sloth-runner.git\", repo_path)\n  if err then\n    return false, \"\u514b\u9686\u5931\u8d25: \" .. err\n  end\n\n  -- 2. \u521b\u5efa\u5e76\u5199\u5165\u7248\u672c\u6587\u4ef6\n  fs.write(repo_path .. \"/VERSION\", \"1.2.3\")\n\n  -- 3. \u94fe\u63a5 Git \u547d\u4ee4: add -&gt; commit -&gt; tag -&gt; push\n  log.info(\"\u6b63\u5728\u6dfb\u52a0\u3001\u63d0\u4ea4\u3001\u6253\u6807\u7b7e\u548c\u63a8\u9001...\")\n  repo:add(\".\"):commit(\"ci: Bump version to 1.2.3\"):tag(\"v1.2.3\"):push(\"origin\", \"main\", { follow_tags = true })\n\n  -- 4. \u83b7\u53d6\u6700\u7ec8\u64cd\u4f5c (push) \u7684\u7ed3\u679c\n  local result = repo:result()\n\n  if not result.success then\n    log.error(\"Git \u63a8\u9001\u5931\u8d25: \" .. result.stderr)\n    return false, \"Git \u63a8\u9001\u5931\u8d25\u3002\"\n  end\n\n  log.info(\"\u6210\u529f\u63a8\u9001\u65b0\u7248\u672c\u6807\u7b7e\u3002\")\n  return true, \"Git \u64cd\u4f5c\u6210\u529f\u3002\"\nend\n</code></pre>"},{"location":"zh/modules/log/","title":"Log \u6a21\u5757","text":"<p><code>log</code> \u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u800c\u5fc5\u8981\u7684\u63a5\u53e3\uff0c\u7528\u4e8e\u4ece\u60a8\u7684 Lua \u811a\u672c\u4e2d\u5c06\u6d88\u606f\u8bb0\u5f55\u5230 <code>sloth-runner</code> \u63a7\u5236\u53f0\u3002\u5728\u4efb\u52a1\u6267\u884c\u671f\u95f4\uff0c\u4f7f\u7528\u6b64\u6a21\u5757\u662f\u63d0\u4f9b\u53cd\u9988\u548c\u8c03\u8bd5\u4fe1\u606f\u7684\u6807\u51c6\u65b9\u5f0f\u3002</p>"},{"location":"zh/modules/log/#loginfomessage","title":"<code>log.info(message)</code>","text":"<p>\u4ee5 INFO \u7ea7\u522b\u8bb0\u5f55\u4e00\u6761\u6d88\u606f\u3002\u8fd9\u662f\u7528\u4e8e\u4e00\u822c\u4fe1\u606f\u6027\u6d88\u606f\u7684\u6807\u51c6\u7ea7\u522b\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>message</code> (string): \u8981\u8bb0\u5f55\u7684\u6d88\u606f\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/log/#logwarnmessage","title":"<code>log.warn(message)</code>","text":"<p>\u4ee5 WARN \u7ea7\u522b\u8bb0\u5f55\u4e00\u6761\u6d88\u606f\u3002\u8fd9\u9002\u7528\u4e8e\u5e94\u5f15\u8d77\u7528\u6237\u6ce8\u610f\u7684\u975e\u5173\u952e\u95ee\u9898\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>message</code> (string): \u8981\u8bb0\u5f55\u7684\u6d88\u606f\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/log/#logerrormessage","title":"<code>log.error(message)</code>","text":"<p>\u4ee5 ERROR \u7ea7\u522b\u8bb0\u5f55\u4e00\u6761\u6d88\u606f\u3002\u8fd9\u5e94\u7528\u4e8e\u53ef\u80fd\u5bfc\u81f4\u4efb\u52a1\u5931\u8d25\u7684\u91cd\u5927\u9519\u8bef\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>message</code> (string): \u8981\u8bb0\u5f55\u7684\u6d88\u606f\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/log/#logdebugmessage","title":"<code>log.debug(message)</code>","text":"<p>\u4ee5 DEBUG \u7ea7\u522b\u8bb0\u5f55\u4e00\u6761\u6d88\u606f\u3002\u9664\u975e\u8fd0\u884c\u5668\u5904\u4e8e\u8be6\u7ec6\u6216\u8c03\u8bd5\u6a21\u5f0f\uff0c\u5426\u5219\u8fd9\u4e9b\u6d88\u606f\u901a\u5e38\u662f\u9690\u85cf\u7684\u3002\u5b83\u4eec\u5bf9\u4e8e\u8be6\u7ec6\u7684\u8bca\u65ad\u4fe1\u606f\u5f88\u6709\u7528\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>message</code> (string): \u8981\u8bb0\u5f55\u7684\u6d88\u606f\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/log/#_1","title":"\u793a\u4f8b","text":"<pre><code>command = function()\n  -- log \u6a21\u5757\u662f\u5168\u5c40\u53ef\u7528\u7684\uff0c\u4e0d\u9700\u8981 require\u3002\n\n  log.info(\"\u542f\u52a8\u65e5\u5fd7\u8bb0\u5f55\u793a\u4f8b\u4efb\u52a1\u3002\")\n\n  local user_name = \"Sloth\"\n  log.debug(\"\u5f53\u524d\u7528\u6237\u662f: \" .. user_name)\n\n  if user_name ~= \"Sloth\" then\n    log.warn(\"\u7528\u6237\u4e0d\u662f\u9884\u671f\u7684\u7528\u6237\u3002\")\n  end\n\n  log.info(\"\u4efb\u52a1\u6b63\u5728\u6267\u884c\u5176\u4e3b\u8981\u64cd\u4f5c...\")\n\n  local success = true -- \u6a21\u62df\u4e00\u6b21\u6210\u529f\u7684\u64cd\u4f5c\n  if not success then\n    log.error(\"\u4e3b\u8981\u64cd\u4f5c\u610f\u5916\u5931\u8d25\uff01\")\n    return false, \"\u4e3b\u8981\u64cd\u4f5c\u5931\u8d25\"\n  end\n\n  log.info(\"\u65e5\u5fd7\u8bb0\u5f55\u793a\u4f8b\u4efb\u52a1\u6210\u529f\u5b8c\u6210\u3002\")\n  return true, \"\u65e5\u5fd7\u8bb0\u5f55\u5df2\u6f14\u793a\u3002\"\nend\n</code></pre>"},{"location":"zh/modules/metrics/","title":"\ud83d\udcca \u6307\u6807\u548c\u76d1\u63a7\u6a21\u5757","text":"<p>\u6307\u6807\u548c\u76d1\u63a7\u6a21\u5757\u63d0\u4f9b\u5168\u9762\u7684\u7cfb\u7edf\u76d1\u63a7\u3001\u81ea\u5b9a\u4e49\u6307\u6807\u6536\u96c6\u548c\u5065\u5eb7\u68c0\u67e5\u529f\u80fd\u3002\u5b83\u5b9e\u73b0\u4e86\u5bf9\u7cfb\u7edf\u8d44\u6e90\u548c\u5e94\u7528\u7a0b\u5e8f\u6027\u80fd\u7684\u5b9e\u65f6\u89c2\u5bdf\u80fd\u529b\u3002</p>"},{"location":"zh/modules/metrics/#_2","title":"\ud83d\ude80 \u6838\u5fc3\u7279\u6027","text":"<ul> <li>\u7cfb\u7edf\u6307\u6807: \u81ea\u52a8\u6536\u96c6CPU\u3001\u5185\u5b58\u3001\u78c1\u76d8\u548c\u7f51\u7edc\u6307\u6807</li> <li>\u8fd0\u884c\u65f6\u6307\u6807: Go\u8fd0\u884c\u65f6\u4fe1\u606f\uff08\u534f\u7a0b\u3001\u5806\u3001GC\uff09</li> <li>\u81ea\u5b9a\u4e49\u6307\u6807: \u8ba1\u91cf\u5668\u3001\u8ba1\u6570\u5668\u3001\u76f4\u65b9\u56fe\u548c\u8ba1\u65f6\u5668</li> <li>\u5065\u5eb7\u68c0\u67e5: \u81ea\u52a8\u7cfb\u7edf\u5065\u5eb7\u76d1\u63a7</li> <li>HTTP\u7aef\u70b9: \u517c\u5bb9Prometheus\u7684\u6307\u6807\u5bfc\u51fa</li> <li>\u544a\u8b66\u7cfb\u7edf: \u57fa\u4e8e\u9608\u503c\u7684\u544a\u8b66</li> <li>JSON API: \u5b8c\u6574\u7684\u6307\u6807\u6570\u636e\u7528\u4e8e\u96c6\u6210</li> </ul>"},{"location":"zh/modules/metrics/#_3","title":"\ud83d\udcca \u7cfb\u7edf\u6307\u6807","text":""},{"location":"zh/modules/metrics/#cpu","title":"CPU\u3001\u5185\u5b58\u548c\u78c1\u76d8\u76d1\u63a7","text":"<pre><code>-- \u83b7\u53d6\u5f53\u524dCPU\u4f7f\u7528\u7387\nlocal cpu_usage = metrics.system_cpu()\nlog.info(\"CPU\u4f7f\u7528\u7387: \" .. string.format(\"%.1f%%\", cpu_usage))\n\n-- \u83b7\u53d6\u5185\u5b58\u4fe1\u606f\nlocal memory_info = metrics.system_memory()\nlog.info(\"\u5185\u5b58: \" .. string.format(\"%.1f%% (%.0f/%.0f MB)\", \n    memory_info.percent, memory_info.used_mb, memory_info.total_mb))\n\n-- \u83b7\u53d6\u78c1\u76d8\u4f7f\u7528\u60c5\u51b5\nlocal disk_info = metrics.system_disk(\"/\")\nlog.info(\"\u78c1\u76d8: \" .. string.format(\"%.1f%% (%.1f/%.1f GB)\", \n    disk_info.percent, disk_info.used_gb, disk_info.total_gb))\n\n-- \u68c0\u67e5\u7279\u5b9a\u78c1\u76d8\u8def\u5f84\nlocal var_disk = metrics.system_disk(\"/var\")\nlog.info(\"/var \u78c1\u76d8\u4f7f\u7528\u7387: \" .. string.format(\"%.1f%%\", var_disk.percent))\n</code></pre>"},{"location":"zh/modules/metrics/#_4","title":"\u8fd0\u884c\u65f6\u4fe1\u606f","text":"<pre><code>-- \u83b7\u53d6Go\u8fd0\u884c\u65f6\u6307\u6807\nlocal runtime = metrics.runtime_info()\nlog.info(\"\u8fd0\u884c\u65f6\u4fe1\u606f:\")\nlog.info(\"  \u534f\u7a0b\u6570: \" .. runtime.goroutines)\nlog.info(\"  CPU\u6838\u5fc3: \" .. runtime.num_cpu)\nlog.info(\"  \u5806\u5df2\u5206\u914d: \" .. string.format(\"%.1f MB\", runtime.heap_alloc_mb))\nlog.info(\"  \u5806\u7cfb\u7edf: \" .. string.format(\"%.1f MB\", runtime.heap_sys_mb))\nlog.info(\"  GC\u6b21\u6570: \" .. runtime.num_gc)\nlog.info(\"  Go\u7248\u672c: \" .. runtime.go_version)\n</code></pre>"},{"location":"zh/modules/metrics/#_5","title":"\ud83d\udcc8 \u81ea\u5b9a\u4e49\u6307\u6807","text":""},{"location":"zh/modules/metrics/#_6","title":"\u8ba1\u91cf\u5668\u6307\u6807\uff08\u5f53\u524d\u503c\uff09","text":"<pre><code>-- \u8bbe\u7f6e\u7b80\u5355\u7684\u8ba1\u91cf\u5668\u503c\nmetrics.gauge(\"cpu_temperature\", 65.4)\nmetrics.gauge(\"active_connections\", 142)\nmetrics.gauge(\"queue_size\", 23)\n\n-- \u5e26\u6807\u7b7e\u8bbe\u7f6e\u8ba1\u91cf\u5668\nmetrics.gauge(\"memory_usage\", memory_percent, {\n    server = \"web-01\",\n    environment = \"production\",\n    region = \"us-east-1\"\n})\n\n-- \u66f4\u65b0\u90e8\u7f72\u72b6\u6001\nmetrics.gauge(\"deployment_progress\", 75.5, {\n    app = \"frontend\",\n    version = \"v2.1.0\"\n})\n</code></pre>"},{"location":"zh/modules/metrics/#_7","title":"\u8ba1\u6570\u5668\u6307\u6807\uff08\u589e\u91cf\u503c\uff09","text":"<pre><code>-- \u589e\u91cf\u8ba1\u6570\u5668\nlocal total_requests = metrics.counter(\"http_requests_total\", 1)\nlocal error_count = metrics.counter(\"http_errors_total\", 1, {\n    status_code = \"500\",\n    endpoint = \"/api/users\"\n})\n\n-- \u6279\u91cf\u589e\u91cf\nlocal processed = metrics.counter(\"messages_processed\", 50, {\n    queue = \"user_notifications\",\n    priority = \"high\"\n})\n\nlog.info(\"\u5904\u7406\u7684\u603b\u8bf7\u6c42\u6570: \" .. total_requests)\n</code></pre>"},{"location":"zh/modules/metrics/#_8","title":"\u76f4\u65b9\u56fe\u6307\u6807\uff08\u503c\u5206\u5e03\uff09","text":"<pre><code>-- \u8bb0\u5f55\u54cd\u5e94\u65f6\u95f4\nmetrics.histogram(\"response_time_ms\", 245.6, {\n    endpoint = \"/api/users\",\n    method = \"GET\"\n})\n\n-- \u8bb0\u5f55\u8d1f\u8f7d\u5927\u5c0f\nmetrics.histogram(\"payload_size_bytes\", 1024, {\n    content_type = \"application/json\"\n})\n\n-- \u8bb0\u5f55\u6279\u5904\u7406\u5927\u5c0f\nmetrics.histogram(\"batch_size\", 150, {\n    operation = \"bulk_insert\",\n    table = \"user_events\"\n})\n</code></pre>"},{"location":"zh/modules/metrics/#_9","title":"\u8ba1\u65f6\u5668\u6307\u6807\uff08\u51fd\u6570\u6267\u884c\u65f6\u95f4\uff09","text":"<pre><code>-- \u81ea\u52a8\u8ba1\u65f6\u51fd\u6570\u6267\u884c\nlocal duration = metrics.timer(\"database_query\", function()\n    -- \u6a21\u62df\u6570\u636e\u5e93\u67e5\u8be2\n    local result = exec.run(\"sleep 0.1\")\n    return result\nend, {\n    query_type = \"select\",\n    table = \"users\"\n})\n\nlog.info(\"\u6570\u636e\u5e93\u67e5\u8be2\u8017\u65f6: \" .. string.format(\"%.2f ms\", duration))\n\n-- \u8ba1\u65f6\u590d\u6742\u64cd\u4f5c\nlocal processing_time = metrics.timer(\"data_processing\", function()\n    -- \u5904\u7406\u5927\u6570\u636e\u96c6\n    local data = {}\n    for i = 1, 100000 do\n        data[i] = math.sqrt(i) * 2.5\n    end\n    return #data\nend, {\n    operation = \"mathematical_computation\",\n    size = \"large\"\n})\n\nlog.info(\"\u6570\u636e\u5904\u7406\u5b8c\u6210\u7528\u65f6: \" .. string.format(\"%.2f ms\", processing_time))\n</code></pre>"},{"location":"zh/modules/metrics/#_10","title":"\ud83c\udfe5 \u5065\u5eb7\u76d1\u63a7","text":""},{"location":"zh/modules/metrics/#_11","title":"\u81ea\u52a8\u5065\u5eb7\u72b6\u6001","text":"<pre><code>-- \u83b7\u53d6\u5168\u9762\u7684\u5065\u5eb7\u72b6\u6001\nlocal health = metrics.health_status()\nlog.info(\"\u6574\u4f53\u5065\u5eb7\u72b6\u6001: \" .. health.overall)\n\n-- \u68c0\u67e5\u5404\u4e2a\u7ec4\u4ef6\nlocal components = {\"cpu\", \"memory\", \"disk\"}\nfor _, component in ipairs(components) do\n    local comp_info = health[component]\n    if comp_info then\n        local status_icon = \"\u2705\"\n        if comp_info.status == \"warning\" then\n            status_icon = \"\u26a0\ufe0f\"\n        elseif comp_info.status == \"critical\" then\n            status_icon = \"\u274c\"\n        end\n\n        log.info(string.format(\"  %s %s: %.1f%% (%s)\", \n            status_icon, component:upper(), comp_info.usage, comp_info.status))\n    end\nend\n</code></pre>"},{"location":"zh/modules/metrics/#_12","title":"\u81ea\u5b9a\u4e49\u5065\u5eb7\u68c0\u67e5","text":"<pre><code>-- \u521b\u5efa\u5e94\u7528\u5065\u5eb7\u68c0\u67e5\u51fd\u6570\nfunction check_application_health()\n    local health_score = 100\n    local issues = {}\n\n    -- \u68c0\u67e5\u6570\u636e\u5e93\u8fde\u901a\u6027\n    local db_result = exec.run(\"pg_isready -h localhost -p 5432\")\n    if db_result ~= \"\" then\n        health_score = health_score - 20\n        table.insert(issues, \"\u6570\u636e\u5e93\u8fde\u63a5\u5931\u8d25\")\n    end\n\n    -- \u68c0\u67e5\u78c1\u76d8\u7a7a\u95f4\n    local disk = metrics.system_disk(\"/\")\n    if disk.percent &gt; 90 then\n        health_score = health_score - 30\n        table.insert(issues, \"\u78c1\u76d8\u7a7a\u95f4\u4e25\u91cd\u4e0d\u8db3: \" .. string.format(\"%.1f%%\", disk.percent))\n    end\n\n    -- \u68c0\u67e5\u5185\u5b58\u4f7f\u7528\n    local memory = metrics.system_memory()\n    if memory.percent &gt; 85 then\n        health_score = health_score - 25\n        table.insert(issues, \"\u5185\u5b58\u4f7f\u7528\u7387\u9ad8: \" .. string.format(\"%.1f%%\", memory.percent))\n    end\n\n    -- \u8bb0\u5f55\u5065\u5eb7\u5f97\u5206\n    metrics.gauge(\"application_health_score\", health_score)\n\n    if health_score &lt; 70 then\n        metrics.alert(\"application_health\", {\n            level = \"warning\",\n            message = \"\u5e94\u7528\u5065\u5eb7\u72b6\u51b5\u4e0b\u964d: \" .. table.concat(issues, \", \"),\n            score = health_score\n        })\n    end\n\n    return health_score &gt;= 70\nend\n\n-- \u5728\u4efb\u52a1\u4e2d\u4f7f\u7528\nModern DSLs = {\n    health_monitoring = {\n        tasks = {\n            health_check = {\n                command = function()\n                    local healthy = check_application_health()\n                    return healthy, healthy and \"\u7cfb\u7edf\u5065\u5eb7\" or \"\u68c0\u6d4b\u5230\u7cfb\u7edf\u5065\u5eb7\u95ee\u9898\"\n                end\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"zh/modules/metrics/#_13","title":"\ud83d\udea8 \u544a\u8b66\u7cfb\u7edf","text":""},{"location":"zh/modules/metrics/#_14","title":"\u521b\u5efa\u544a\u8b66","text":"<pre><code>-- \u7b80\u5355\u9608\u503c\u544a\u8b66\nlocal cpu = metrics.system_cpu()\nif cpu &gt; 80 then\n    metrics.alert(\"high_cpu_usage\", {\n        level = \"warning\",\n        message = \"CPU\u4f7f\u7528\u7387\u8fc7\u9ad8: \" .. string.format(\"%.1f%%\", cpu),\n        threshold = 80,\n        value = cpu,\n        severity = \"medium\"\n    })\nend\n\n-- \u591a\u6761\u4ef6\u590d\u6742\u544a\u8b66\nlocal memory = metrics.system_memory()\nlocal disk = metrics.system_disk()\n\nif memory.percent &gt; 90 and disk.percent &gt; 85 then\n    metrics.alert(\"resource_exhaustion\", {\n        level = \"critical\",\n        message = string.format(\"\u8d44\u6e90\u4f7f\u7528\u4e25\u91cd - \u5185\u5b58: %.1f%%, \u78c1\u76d8: %.1f%%\", \n            memory.percent, disk.percent),\n        memory_usage = memory.percent,\n        disk_usage = disk.percent,\n        recommended_action = \"\u7acb\u5373\u6269\u5c55\u8d44\u6e90\"\n    })\nend\n\n-- \u5e94\u7528\u7279\u5b9a\u544a\u8b66\nlocal queue_size = state.get(\"task_queue_size\", 0)\nif queue_size &gt; 1000 then\n    metrics.alert(\"queue_backlog\", {\n        level = \"warning\", \n        message = \"\u68c0\u6d4b\u5230\u4efb\u52a1\u961f\u5217\u79ef\u538b: \" .. queue_size .. \" \u4e2a\u9879\u76ee\",\n        queue_size = queue_size,\n        estimated_processing_time = queue_size * 2 .. \" \u79d2\"\n    })\nend\n</code></pre>"},{"location":"zh/modules/metrics/#_15","title":"\ud83d\udd0d \u6307\u6807\u7ba1\u7406","text":""},{"location":"zh/modules/metrics/#_16","title":"\u68c0\u7d22\u81ea\u5b9a\u4e49\u6307\u6807","text":"<pre><code>-- \u83b7\u53d6\u7279\u5b9a\u81ea\u5b9a\u4e49\u6307\u6807\nlocal cpu_metric = metrics.get_custom(\"cpu_temperature\")\nif cpu_metric then\n    log.info(\"CPU\u6e29\u5ea6\u6307\u6807: \" .. data.to_json(cpu_metric))\nend\n\n-- \u5217\u51fa\u6240\u6709\u81ea\u5b9a\u4e49\u6307\u6807\nlocal all_metrics = metrics.list_custom()\nlog.info(\"\u81ea\u5b9a\u4e49\u6307\u6807\u603b\u6570: \" .. #all_metrics)\nfor i, metric_name in ipairs(all_metrics) do\n    log.info(\"  \" .. i .. \". \" .. metric_name)\nend\n</code></pre>"},{"location":"zh/modules/metrics/#_17","title":"\u6027\u80fd\u76d1\u63a7\u793a\u4f8b","text":"<pre><code>Modern DSLs = {\n    performance_monitoring = {\n        tasks = {\n            monitor_api_performance = {\n                command = function()\n                    -- \u5f00\u59cb\u76d1\u63a7\u4f1a\u8bdd\n                    log.info(\"\u5f00\u59cbAPI\u6027\u80fd\u76d1\u63a7...\")\n\n                    -- \u6a21\u62dfAPI\u8c03\u7528\u5e76\u6d4b\u91cf\u6027\u80fd\n                    for i = 1, 10 do\n                        local api_time = metrics.timer(\"api_call_\" .. i, function()\n                            -- \u6a21\u62dfAPI\u8c03\u7528\n                            exec.run(\"curl -s -o /dev/null -w '%{time_total}' https://api.example.com/health\")\n                        end, {\n                            endpoint = \"health\",\n                            call_number = tostring(i)\n                        })\n\n                        -- \u8bb0\u5f55\u54cd\u5e94\u65f6\u95f4\n                        metrics.histogram(\"api_response_time\", api_time, {\n                            endpoint = \"health\"\n                        })\n\n                        -- \u68c0\u67e5\u54cd\u5e94\u65f6\u95f4\u662f\u5426\u53ef\u63a5\u53d7\n                        if api_time &gt; 1000 then -- 1\u79d2\n                            metrics.counter(\"slow_api_calls\", 1, {\n                                endpoint = \"health\"\n                            })\n\n                            metrics.alert(\"slow_api_response\", {\n                                level = \"warning\",\n                                message = string.format(\"API\u54cd\u5e94\u6162: %.2f ms\", api_time),\n                                response_time = api_time,\n                                threshold = 1000\n                            })\n                        end\n\n                        -- \u8c03\u7528\u95f4\u77ed\u6682\u5ef6\u8fdf\n                        exec.run(\"sleep 0.1\")\n                    end\n\n                    -- \u83b7\u53d6\u6c47\u603b\u7edf\u8ba1\n                    local system_health = metrics.health_status()\n                    log.info(\"API\u6d4b\u8bd5\u540e\u7cfb\u7edf\u5065\u5eb7: \" .. system_health.overall)\n\n                    return true, \"API\u6027\u80fd\u76d1\u63a7\u5b8c\u6210\"\n                end\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"zh/modules/metrics/#http","title":"\ud83c\udf10 HTTP\u7aef\u70b9","text":"<p>\u6307\u6807\u6a21\u5757\u81ea\u52a8\u4e3a\u5916\u90e8\u76d1\u63a7\u7cfb\u7edf\u516c\u5f00HTTP\u7aef\u70b9\uff1a</p>"},{"location":"zh/modules/metrics/#prometheus-metrics","title":"Prometheus\u683c\u5f0f (<code>/metrics</code>)","text":"<pre><code># \u8bbf\u95ee\u517c\u5bb9Prometheus\u7684\u6307\u6807\ncurl http://agent:8080/metrics\n\n# \u793a\u4f8b\u8f93\u51fa:\n# sloth_agent_cpu_usage_percent 15.4\n# sloth_agent_memory_usage_mb 2048.5\n# sloth_agent_disk_usage_percent 67.2\n# sloth_agent_tasks_total 142\n</code></pre>"},{"location":"zh/modules/metrics/#json-metricsjson","title":"JSON\u683c\u5f0f (<code>/metrics/json</code>)","text":"<pre><code># \u83b7\u53d6JSON\u683c\u5f0f\u7684\u5b8c\u6574\u6307\u6807\ncurl http://agent:8080/metrics/json\n\n# \u793a\u4f8b\u54cd\u5e94:\n{\n  \"agent_name\": \"myagent1\",\n  \"timestamp\": \"2024-01-15T10:30:00Z\",\n  \"system\": {\n    \"cpu_usage_percent\": 15.4,\n    \"memory_usage_mb\": 2048.5,\n    \"disk_usage_percent\": 67.2\n  },\n  \"runtime\": {\n    \"num_goroutines\": 25,\n    \"heap_alloc_mb\": 45.2\n  },\n  \"custom\": {\n    \"api_response_time\": {...},\n    \"deployment_progress\": 85.5\n  }\n}\n</code></pre>"},{"location":"zh/modules/metrics/#health","title":"\u5065\u5eb7\u68c0\u67e5 (<code>/health</code>)","text":"<pre><code># \u68c0\u67e5\u4ee3\u7406\u5065\u5eb7\u72b6\u6001\ncurl http://agent:8080/health\n\n# \u793a\u4f8b\u54cd\u5e94:\n{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2024-01-15T10:30:00Z\",\n  \"checks\": {\n    \"cpu\": {\"usage\": 15.4, \"status\": \"healthy\"},\n    \"memory\": {\"usage\": 45.8, \"status\": \"healthy\"},\n    \"disk\": {\"usage\": 67.2, \"status\": \"healthy\"}\n  }\n}\n</code></pre>"},{"location":"zh/modules/metrics/#api","title":"\ud83d\udccb API\u53c2\u8003","text":""},{"location":"zh/modules/metrics/#_18","title":"\u7cfb\u7edf\u6307\u6807","text":"\u51fd\u6570 \u53c2\u6570 \u8fd4\u56de\u503c \u63cf\u8ff0 <code>metrics.system_cpu()</code> - usage: number \u83b7\u53d6\u5f53\u524dCPU\u4f7f\u7528\u767e\u5206\u6bd4 <code>metrics.system_memory()</code> - info: table \u83b7\u53d6\u5185\u5b58\u4f7f\u7528\u4fe1\u606f <code>metrics.system_disk(path?)</code> path?: string info: table \u83b7\u53d6\u8def\u5f84\u7684\u78c1\u76d8\u4f7f\u7528\u60c5\u51b5 (\u9ed8\u8ba4: \"/\") <code>metrics.runtime_info()</code> - info: table \u83b7\u53d6Go\u8fd0\u884c\u65f6\u4fe1\u606f"},{"location":"zh/modules/metrics/#_19","title":"\u81ea\u5b9a\u4e49\u6307\u6807","text":"\u51fd\u6570 \u53c2\u6570 \u8fd4\u56de\u503c \u63cf\u8ff0 <code>metrics.gauge(name, value, tags?)</code> name: string, value: number, tags?: table success: boolean \u8bbe\u7f6e\u8ba1\u91cf\u5668\u6307\u6807 <code>metrics.counter(name, increment?, tags?)</code> name: string, increment?: number, tags?: table new_value: number \u589e\u91cf\u8ba1\u6570\u5668 <code>metrics.histogram(name, value, tags?)</code> name: string, value: number, tags?: table success: boolean \u8bb0\u5f55\u76f4\u65b9\u56fe\u503c <code>metrics.timer(name, function, tags?)</code> name: string, func: function, tags?: table duration: number \u8ba1\u65f6\u51fd\u6570\u6267\u884c"},{"location":"zh/modules/metrics/#_20","title":"\u5065\u5eb7\u548c\u76d1\u63a7","text":"\u51fd\u6570 \u53c2\u6570 \u8fd4\u56de\u503c \u63cf\u8ff0 <code>metrics.health_status()</code> - status: table \u83b7\u53d6\u5168\u9762\u5065\u5eb7\u72b6\u6001 <code>metrics.alert(name, data)</code> name: string, data: table success: boolean \u521b\u5efa\u544a\u8b66"},{"location":"zh/modules/metrics/#_21","title":"\u5b9e\u7528\u5de5\u5177","text":"\u51fd\u6570 \u53c2\u6570 \u8fd4\u56de\u503c \u63cf\u8ff0 <code>metrics.get_custom(name)</code> name: string metric: table | nil \u6309\u540d\u79f0\u83b7\u53d6\u81ea\u5b9a\u4e49\u6307\u6807 <code>metrics.list_custom()</code> - names: table \u5217\u51fa\u6240\u6709\u81ea\u5b9a\u4e49\u6307\u6807\u540d\u79f0"},{"location":"zh/modules/metrics/#_22","title":"\ud83c\udfaf \u6700\u4f73\u5b9e\u8df5","text":"<ol> <li>\u4f7f\u7528\u5408\u9002\u7684\u6307\u6807\u7c7b\u578b - \u8ba1\u91cf\u5668\u7528\u4e8e\u5f53\u524d\u503c\uff0c\u8ba1\u6570\u5668\u7528\u4e8e\u603b\u8ba1\uff0c\u76f4\u65b9\u56fe\u7528\u4e8e\u5206\u5e03</li> <li>\u6dfb\u52a0\u6709\u610f\u4e49\u7684\u6807\u7b7e \u6765\u5206\u7c7b\u548c\u8fc7\u6ee4\u6307\u6807</li> <li>\u8bbe\u7f6e\u5408\u7406\u7684\u544a\u8b66\u9608\u503c \u4ee5\u907f\u514d\u544a\u8b66\u75b2\u52b3</li> <li>\u76d1\u63a7\u5e7f\u6cdb\u6307\u6807\u6536\u96c6\u7684\u6027\u80fd\u5f71\u54cd</li> <li>\u5bf9\u6027\u80fd\u5173\u952e\u64cd\u4f5c\u4f7f\u7528\u8ba1\u65f6\u5668 \u6765\u8bc6\u522b\u74f6\u9888</li> <li>\u4e3a\u6240\u6709\u5173\u952e\u7cfb\u7edf\u7ec4\u4ef6\u5b9e\u65bd\u5065\u5eb7\u68c0\u67e5</li> <li>\u5c06\u6307\u6807\u5bfc\u51fa\u5230\u5916\u90e8\u7cfb\u7edf \u5982Prometheus\u8fdb\u884c\u957f\u671f\u5b58\u50a8</li> </ol> <p>\u6307\u6807\u548c\u76d1\u63a7\u6a21\u5757\u4e3a\u60a8\u7684\u5206\u5e03\u5f0fsloth-runner\u73af\u5883\u63d0\u4f9b\u5168\u9762\u7684\u53ef\u89c2\u6d4b\u6027! \ud83d\udcca\ud83d\ude80</p>"},{"location":"zh/modules/net/","title":"Net \u6a21\u5757","text":"<p><code>net</code> \u6a21\u5757\u63d0\u4f9b\u4e86\u53d1\u51fa HTTP \u8bf7\u6c42\u548c\u4e0b\u8f7d\u6587\u4ef6\u7684\u529f\u80fd\uff0c\u5141\u8bb8\u60a8\u7684\u4efb\u52a1\u4e0e Web \u670d\u52a1\u548c\u8fdc\u7a0b\u8d44\u6e90\u8fdb\u884c\u4ea4\u4e92\u3002</p>"},{"location":"zh/modules/net/#nethttp_geturl","title":"<code>net.http_get(url)</code>","text":"<p>\u5411\u6307\u5b9a\u7684 URL \u6267\u884c HTTP GET \u8bf7\u6c42\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>url</code> (string): \u8981\u53d1\u9001 GET \u8bf7\u6c42\u7684 URL\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>body</code> (string): \u4f5c\u4e3a\u5b57\u7b26\u4e32\u7684\u54cd\u5e94\u4f53\u3002</li> <li><code>status_code</code> (number): \u54cd\u5e94\u7684 HTTP \u72b6\u6001\u7801\u3002</li> <li><code>headers</code> (table): \u5305\u542b\u54cd\u5e94\u5934\u7684\u8868\u3002</li> <li><code>error</code> (string): \u5982\u679c\u8bf7\u6c42\u5931\u8d25\uff0c\u5219\u4e3a\u9519\u8bef\u6d88\u606f\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/net/#nethttp_posturl-body-headers","title":"<code>net.http_post(url, body, [headers])</code>","text":"<p>\u5411\u6307\u5b9a\u7684 URL \u6267\u884c HTTP POST \u8bf7\u6c42\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>url</code> (string): \u8981\u53d1\u9001 POST \u8bf7\u6c42\u7684 URL\u3002</li> <li><code>body</code> (string): \u8981\u53d1\u9001\u7684\u8bf7\u6c42\u4f53\u3002</li> <li><code>headers</code> (table, \u53ef\u9009): \u8981\u8bbe\u7f6e\u7684\u8bf7\u6c42\u5934\u8868\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>body</code> (string): \u4f5c\u4e3a\u5b57\u7b26\u4e32\u7684\u54cd\u5e94\u4f53\u3002</li> <li><code>status_code</code> (number): \u54cd\u5e94\u7684 HTTP \u72b6\u6001\u7801\u3002</li> <li><code>headers</code> (table): \u5305\u542b\u54cd\u5e94\u5934\u7684\u8868\u3002</li> <li><code>error</code> (string): \u5982\u679c\u8bf7\u6c42\u5931\u8d25\uff0c\u5219\u4e3a\u9519\u8bef\u6d88\u606f\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/net/#netdownloadurl-destination_path","title":"<code>net.download(url, destination_path)</code>","text":"<p>\u4ece URL \u4e0b\u8f7d\u6587\u4ef6\u5e76\u5c06\u5176\u4fdd\u5b58\u5230\u672c\u5730\u8def\u5f84\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>url</code> (string): \u8981\u4e0b\u8f7d\u7684\u6587\u4ef6\u7684 URL\u3002</li> <li><code>destination_path</code> (string): \u7528\u4e8e\u4fdd\u5b58\u4e0b\u8f7d\u5185\u5bb9\u7684\u672c\u5730\u6587\u4ef6\u8def\u5f84\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>error</code>: \u5982\u679c\u4e0b\u8f7d\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/net/#_1","title":"\u793a\u4f8b","text":"<pre><code>command = function()\n  local net = require(\"net\")\n\n  -- GET \u8bf7\u6c42\u793a\u4f8b\n  log.info(\"\u6b63\u5728\u5411 httpbin.org \u6267\u884c GET \u8bf7\u6c42...\")\n  local body, status, headers, err = net.http_get(\"https://httpbin.org/get\")\n  if err then\n    log.error(\"GET \u8bf7\u6c42\u5931\u8d25: \" .. err)\n    return false, \"GET \u8bf7\u6c42\u5931\u8d25\"\n  end\n  log.info(\"GET \u8bf7\u6c42\u6210\u529f\uff01\u72b6\u6001: \" .. status)\n  -- print(\"\u54cd\u5e94\u4f53: \" .. body)\n\n  -- POST \u8bf7\u6c42\u793a\u4f8b\n  log.info(\"\u6b63\u5728\u5411 httpbin.org \u6267\u884c POST \u8bf7\u6c42...\")\n  local post_body = '{\"name\": \"sloth-runner\", \"awesome\": true}'\n  local post_headers = { [\"Content-Type\"] = \"application/json\" }\n  body, status, headers, err = net.http_post(\"https://httpbin.org/post\", post_body, post_headers)\n  if err then\n    log.error(\"POST \u8bf7\u6c42\u5931\u8d25: \" .. err)\n    return false, \"POST \u8bf7\u6c42\u5931\u8d25\"\n  end\n  log.info(\"POST \u8bf7\u6c42\u6210\u529f\uff01\u72b6\u6001: \" .. status)\n  -- print(\"\u54cd\u5e94\u4f53: \" .. body)\n\n  -- \u4e0b\u8f7d\u793a\u4f8b\n  local download_path = \"/tmp/sloth-runner-logo.svg\"\n  log.info(\"\u6b63\u5728\u4e0b\u8f7d\u6587\u4ef6\u5230 \" .. download_path)\n  local err = net.download(\"https://raw.githubusercontent.com/chalkan3-sloth/sloth-runner/master/assets/sloth-runner-logo.svg\", download_path)\n  if err then\n    log.error(\"\u4e0b\u8f7d\u5931\u8d25: \" .. err)\n    return false, \"\u4e0b\u8f7d\u5931\u8d25\"\n  end\n  log.info(\"\u6587\u4ef6\u4e0b\u8f7d\u6210\u529f\u3002\")\n  fs.rm(download_path) -- \u6e05\u7406\n\n  return true, \"Net \u6a21\u5757\u64cd\u4f5c\u6210\u529f\u3002\"\nend\n</code></pre>"},{"location":"zh/modules/notifications/","title":"\u901a\u77e5\u6a21\u5757","text":"<p><code>notifications</code> \u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u79cd\u4ece\u60a8\u7684\u7ba1\u9053\u5411\u5404\u79cd\u901a\u77e5\u670d\u52a1\u53d1\u9001\u6d88\u606f\u7684\u7b80\u5355\u65b9\u6cd5\u3002\u8fd9\u5bf9\u4e8e\u62a5\u544a CI/CD \u5de5\u4f5c\u6d41\u7684\u6210\u529f\u6216\u5931\u8d25\u7279\u522b\u6709\u7528\u3002</p> <p>\u76ee\u524d\u652f\u6301\u4ee5\u4e0b\u670d\u52a1\uff1a - Slack - ntfy</p>"},{"location":"zh/modules/notifications/#_2","title":"\u914d\u7f6e","text":"<p>\u5728\u4f7f\u7528\u8be5\u6a21\u5757\u4e4b\u524d\uff0c\u60a8\u9700\u8981\u5c06\u6240\u9700\u7684\u51ed\u636e\u6216 URL \u6dfb\u52a0\u5230\u60a8\u7684 <code>configs/values.yaml</code> \u6587\u4ef6\u4e2d\u3002\u8be5\u6a21\u5757\u5c06\u5728\u8fd0\u884c\u65f6\u8bfb\u53d6\u8fd9\u4e9b\u503c\u3002</p> <pre><code># configs/values.yaml\n\nnotifications:\n  slack:\n    # \u60a8\u7684 Slack Incoming Webhook URL\n    webhook_url: \"https://hooks.slack.com/services/...\"\n  ntfy:\n    # \u8981\u4f7f\u7528\u7684 ntfy \u670d\u52a1\u5668\u3002\u53ef\u4ee5\u662f\u516c\u5171\u670d\u52a1\u5668\u6216\u81ea\u6258\u7ba1\u670d\u52a1\u5668\u3002\n    server: \"https://ntfy.sh\"\n    # \u7528\u4e8e\u53d1\u5e03\u901a\u77e5\u7684\u4e3b\u9898\u3002\n    topic: \"your-sloth-runner-topic\"\n</code></pre>"},{"location":"zh/modules/notifications/#slack","title":"Slack","text":""},{"location":"zh/modules/notifications/#notificationsslacksendparams","title":"<code>notifications.slack.send(params)</code>","text":"<p>\u901a\u8fc7 Incoming Webhook \u5411 Slack \u9891\u9053\u53d1\u9001\u6d88\u606f\u3002</p> <p>\u53c2\u6570:</p> <ul> <li><code>params</code> (table): \u4e00\u4e2a\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\u7684\u8868\uff1a<ul> <li><code>webhook_url</code> (string): \u5fc5\u9700\u3002 Slack Incoming Webhook URL\u3002\u5efa\u8bae\u4ece <code>values</code> \u6a21\u5757\u83b7\u53d6\u3002</li> <li><code>message</code> (string): \u5fc5\u9700\u3002 \u6d88\u606f\u7684\u4e3b\u8981\u6587\u672c\u3002</li> <li><code>pipeline</code> (string): \u53ef\u9009\u3002 \u7ba1\u9053\u7684\u540d\u79f0\uff0c\u5c06\u663e\u793a\u5728\u6d88\u606f\u9644\u4ef6\u4e2d\u4ee5\u63d0\u4f9b\u4e0a\u4e0b\u6587\u3002</li> <li><code>error_details</code> (string): \u53ef\u9009\u3002 \u8981\u5305\u542b\u5728\u6d88\u606f\u9644\u4ef6\u4e2d\u7684\u4efb\u4f55\u9519\u8bef\u8be6\u7ec6\u4fe1\u606f\u3002\u8fd9\u5bf9\u4e8e\u5931\u8d25\u901a\u77e5\u5f88\u6709\u7528\u3002</li> </ul> </li> </ul> <p>\u8fd4\u56de:</p> <ul> <li>\u6210\u529f\u65f6\u8fd4\u56de <code>true</code>\u3002</li> <li>\u5931\u8d25\u65f6\u8fd4\u56de <code>false, error_message</code>\u3002</li> </ul> <p>\u793a\u4f8b:</p> <pre><code>local values = require(\"values\")\n\nlocal slack_webhook = values.get(\"notifications.slack.webhook_url\")\n\nif slack_webhook and slack_webhook ~= \"\" then\n  -- \u6210\u529f\u65f6\n  notifications.slack.send({\n    webhook_url = slack_webhook,\n    message = \"\u2705 \u7ba1\u9053\u6210\u529f\u6267\u884c\uff01\",\n    pipeline = \"my-awesome-pipeline\"\n  })\n\n  -- \u5931\u8d25\u65f6\n  notifications.slack.send({\n    webhook_url = slack_webhook,\n    message = \"\u274c \u7ba1\u9053\u6267\u884c\u5931\u8d25\uff01\",\n    pipeline = \"my-awesome-pipeline\",\n    error_details = \"\u65e0\u6cd5\u8fde\u63a5\u5230\u6570\u636e\u5e93\u3002\"\n  })\nend\n</code></pre>"},{"location":"zh/modules/notifications/#ntfy","title":"ntfy","text":""},{"location":"zh/modules/notifications/#notificationsntfysendparams","title":"<code>notifications.ntfy.send(params)</code>","text":"<p>\u5411 ntfy.sh \u4e3b\u9898\u53d1\u9001\u6d88\u606f\u3002</p> <p>\u53c2\u6570:</p> <ul> <li><code>params</code> (table): \u4e00\u4e2a\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\u7684\u8868\uff1a<ul> <li><code>server</code> (string): \u5fc5\u9700\u3002 ntfy \u670d\u52a1\u5668 URL\u3002</li> <li><code>topic</code> (string): \u5fc5\u9700\u3002 \u8981\u53d1\u9001\u6d88\u606f\u7684\u4e3b\u9898\u3002</li> <li><code>message</code> (string): \u5fc5\u9700\u3002 \u901a\u77e5\u7684\u6b63\u6587\u3002</li> <li><code>title</code> (string): \u53ef\u9009\u3002 \u901a\u77e5\u7684\u6807\u9898\u3002</li> <li><code>priority</code> (string): \u53ef\u9009\u3002 \u901a\u77e5\u4f18\u5148\u7ea7\uff08\u4f8b\u5982 <code>high</code>, <code>default</code>, <code>low</code>\uff09\u3002</li> <li><code>tags</code> (table): \u53ef\u9009\u3002 \u8981\u6dfb\u52a0\u5230\u901a\u77e5\u4e2d\u7684\u6807\u7b7e\uff08\u8868\u60c5\u7b26\u53f7\uff09\u5217\u8868\u3002</li> </ul> </li> </ul> <p>\u8fd4\u56de:</p> <ul> <li>\u6210\u529f\u65f6\u8fd4\u56de <code>true</code>\u3002</li> <li>\u5931\u8d25\u65f6\u8fd4\u56de <code>false, error_message</code>\u3002</li> </ul> <p>\u793a\u4f8b:</p> <pre><code>local values = require(\"values\")\n\nlocal ntfy_server = values.get(\"notifications.ntfy.server\")\nlocal ntfy_topic = values.get(\"notifications.ntfy.topic\")\n\nif ntfy_topic and ntfy_topic ~= \"\" then\n  -- \u6210\u529f\u65f6\n  notifications.ntfy.send({\n    server = ntfy_server,\n    topic = ntfy_topic,\n    title = \"\u7ba1\u9053\u6210\u529f\",\n    message = \"\u7ba1\u9053\u65e0\u9519\u8bef\u5b8c\u6210\u3002\",\n    priority = \"default\",\n    tags = {\"tada\"}\n  })\n\n  -- \u5931\u8d25\u65f6\n  notifications.ntfy.send({\n    server = ntfy_server,\n    topic = ntfy_topic,\n    title = \"\u7ba1\u9053\u5931\u8d25\uff01\",\n    message = \"\u7ba1\u9053\u56e0\u9519\u8bef\u800c\u5931\u8d25\u3002\",\n    priority = \"high\",\n    tags = {\"skull\", \"warning\"}\n  })\nend\n</code></pre>"},{"location":"zh/modules/pulumi/","title":"Pulumi \u6a21\u5757","text":"<p><code>pulumi</code> \u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6d41\u7545\u7684 API \u6765\u7f16\u6392 Pulumi \u5806\u6808\uff0c\u4f7f\u60a8\u80fd\u591f\u76f4\u63a5\u4ece <code>sloth-runner</code> \u7ba1\u7406\u60a8\u7684\u57fa\u7840\u8bbe\u65bd\u5373\u4ee3\u7801 (IaC) \u5de5\u4f5c\u6d41\u3002</p>"},{"location":"zh/modules/pulumi/#pulumistackname-options","title":"<code>pulumi.stack(name, options)</code>","text":"<p>\u521b\u5efa\u4e00\u4e2a Pulumi \u5806\u6808\u5bf9\u8c61\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>name</code> (string): \u5806\u6808\u7684\u5168\u540d (\u4f8b\u5982, <code>\"my-org/my-project/dev\"</code>)\u3002</li> <li><code>options</code> (table): \u4e00\u4e2a\u9009\u9879\u8868\u3002<ul> <li><code>workdir</code> (string): (\u5fc5\u9700) Pulumi \u9879\u76ee\u76ee\u5f55\u7684\u8def\u5f84\u3002</li> </ul> </li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>stack</code> (object): \u4e00\u4e2a <code>PulumiStack</code> \u5bf9\u8c61\u3002</li> <li><code>error</code>: \u5982\u679c\u65e0\u6cd5\u521d\u59cb\u5316\u5806\u6808\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/pulumi/#pulumistack","title":"<code>PulumiStack</code> \u5bf9\u8c61","text":"<p>\u6b64\u5bf9\u8c61\u8868\u793a\u4e00\u4e2a\u7279\u5b9a\u7684 Pulumi \u5806\u6808\uff0c\u5e76\u63d0\u4f9b\u7528\u4e8e\u4ea4\u4e92\u7684\u65b9\u6cd5\u3002</p>"},{"location":"zh/modules/pulumi/#stackupoptions","title":"<code>stack:up([options])</code>","text":"<p>\u901a\u8fc7\u8fd0\u884c <code>pulumi up</code> \u521b\u5efa\u6216\u66f4\u65b0\u5806\u6808\u7684\u8d44\u6e90\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>options</code> (table, \u53ef\u9009):<ul> <li><code>yes</code> (boolean): \u5982\u679c\u4e3a <code>true</code>\uff0c\u5219\u4f20\u9012 <code>--yes</code> \u4ee5\u81ea\u52a8\u6279\u51c6\u66f4\u65b0\u3002</li> <li><code>config</code> (table): \u8981\u4f20\u9012\u7ed9\u5806\u6808\u7684\u914d\u7f6e\u503c\u5b57\u5178\u3002</li> <li><code>args</code> (table): \u8981\u4f20\u9012\u7ed9\u547d\u4ee4\u7684\u9644\u52a0\u5b57\u7b26\u4e32\u53c2\u6570\u5217\u8868\u3002</li> </ul> </li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>result</code> (table): \u4e00\u4e2a\u5305\u542b <code>success</code> (boolean)\u3001<code>stdout</code> (string) \u548c <code>stderr</code> (string) \u7684\u8868\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/pulumi/#stackpreviewoptions","title":"<code>stack:preview([options])</code>","text":"<p>\u901a\u8fc7\u8fd0\u884c <code>pulumi preview</code> \u9884\u89c8\u66f4\u65b0\u5c06\u8fdb\u884c\u7684\u66f4\u6539\u3002</p> <ul> <li>\u53c2\u6570: \u4e0e <code>stack:up</code> \u76f8\u540c\u3002</li> <li>\u8fd4\u56de: \u4e0e <code>stack:up</code> \u76f8\u540c\u3002</li> </ul>"},{"location":"zh/modules/pulumi/#stackrefreshoptions","title":"<code>stack:refresh([options])</code>","text":"<p>\u901a\u8fc7\u8fd0\u884c <code>pulumi refresh</code> \u5237\u65b0\u5806\u6808\u7684\u72b6\u6001\u3002</p> <ul> <li>\u53c2\u6570: \u4e0e <code>stack:up</code> \u76f8\u540c\u3002</li> <li>\u8fd4\u56de: \u4e0e <code>stack:up</code> \u76f8\u540c\u3002</li> </ul>"},{"location":"zh/modules/pulumi/#stackdestroyoptions","title":"<code>stack:destroy([options])</code>","text":"<p>\u901a\u8fc7\u8fd0\u884c <code>pulumi destroy</code> \u9500\u6bc1\u5806\u6808\u4e2d\u7684\u6240\u6709\u8d44\u6e90\u3002</p> <ul> <li>\u53c2\u6570: \u4e0e <code>stack:up</code> \u76f8\u540c\u3002</li> <li>\u8fd4\u56de: \u4e0e <code>stack:up</code> \u76f8\u540c\u3002</li> </ul>"},{"location":"zh/modules/pulumi/#stackoutputs","title":"<code>stack:outputs()</code>","text":"<p>\u68c0\u7d22\u5df2\u90e8\u7f72\u5806\u6808\u7684\u8f93\u51fa\u3002</p> <ul> <li>\u8fd4\u56de:<ul> <li><code>outputs</code> (table): \u5806\u6808\u8f93\u51fa\u7684 Lua \u8868\u3002</li> <li><code>error</code>: \u5982\u679c\u83b7\u53d6\u8f93\u51fa\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/pulumi/#_1","title":"\u793a\u4f8b","text":"<p>\u6b64\u793a\u4f8b\u663e\u793a\u4e86\u4e00\u4e2a\u5e38\u89c1\u6a21\u5f0f\uff1a\u90e8\u7f72\u4e00\u4e2a\u7f51\u7edc\u5806\u6808 (VPC)\uff0c\u7136\u540e\u4f7f\u7528\u5176\u8f93\u51fa (<code>vpcId</code>) \u6765\u914d\u7f6e\u548c\u90e8\u7f72\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5806\u6808\u3002</p> <pre><code>command = function()\n  local pulumi = require(\"pulumi\")\n\n  -- 1. \u5b9a\u4e49 VPC \u5806\u6808\n  local vpc_stack = pulumi.stack(\"my-org/vpc/prod\", { workdir = \"./pulumi/vpc\" })\n\n  -- 2. \u90e8\u7f72 VPC\n  log.info(\"\u6b63\u5728\u90e8\u7f72 VPC \u5806\u6808...\")\n  local vpc_result = vpc_stack:up({ yes = true })\n  if not vpc_result.success then\n    return false, \"VPC \u90e8\u7f72\u5931\u8d25: \" .. vpc_result.stderr\n  end\n\n  -- 3. \u4ece\u5176\u8f93\u51fa\u4e2d\u83b7\u53d6 VPC ID\n  log.info(\"\u6b63\u5728\u83b7\u53d6 VPC \u8f93\u51fa...\")\n  local vpc_outputs, err = vpc_stack:outputs()\n  if err then\n    return false, \"\u83b7\u53d6 VPC \u8f93\u51fa\u5931\u8d25: \" .. err\n  end\n  local vpc_id = vpc_outputs.vpcId\n\n  -- 4. \u5b9a\u4e49\u5e94\u7528\u7a0b\u5e8f\u5806\u6808\n  local app_stack = pulumi.stack(\"my-org/app/prod\", { workdir = \"./pulumi/app\" })\n\n  -- 5. \u90e8\u7f72\u5e94\u7528\u7a0b\u5e8f\uff0c\u5c06 vpcId \u4f5c\u4e3a\u914d\u7f6e\u4f20\u9012\n  log.info(\"\u6b63\u5728\u5c06\u5e94\u7528\u7a0b\u5e8f\u5806\u6808\u90e8\u7f72\u5230 VPC: \" .. vpc_id)\n  local app_result = app_stack:up({\n    yes = true,\n    config = { [\"my-app:vpcId\"] = vpc_id }\n  })\n  if not app_result.success then\n    return false, \"\u5e94\u7528\u7a0b\u5e8f\u90e8\u7f72\u5931\u8d25: \" .. app_result.stderr\n  end\n\n  log.info(\"\u6240\u6709\u5806\u6808\u5747\u5df2\u6210\u529f\u90e8\u7f72\u3002\")\n  return true, \"Pulumi \u7f16\u6392\u5b8c\u6210\u3002\"\nend\n</code></pre>"},{"location":"zh/modules/python/","title":"Python \u6a21\u5757","text":"<p><code>python</code> \u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u79cd\u65b9\u4fbf\u7684\u65b9\u5f0f\u6765\u7ba1\u7406 Python \u865a\u62df\u73af\u5883 (<code>venv</code>) \u5e76\u4ece\u60a8\u7684 <code>sloth-runner</code> \u4efb\u52a1\u4e2d\u6267\u884c\u811a\u672c\u3002\u8fd9\u5bf9\u4e8e\u6d89\u53ca\u57fa\u4e8e Python \u7684\u5de5\u5177\u6216\u811a\u672c\u7684\u5de5\u4f5c\u6d41\u7279\u522b\u6709\u7528\u3002</p>"},{"location":"zh/modules/python/#pythonvenvpath","title":"<code>python.venv(path)</code>","text":"<p>\u521b\u5efa\u4e00\u4e2a Python \u865a\u62df\u73af\u5883\u5bf9\u8c61\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u53ea\u5728 Lua \u4e2d\u521b\u5efa\u5bf9\u8c61\uff1b\u73af\u5883\u672c\u8eab\u5728\u6587\u4ef6\u7cfb\u7edf\u4e0a\u76f4\u5230\u60a8\u8c03\u7528 <code>:create()</code> \u540e\u624d\u88ab\u521b\u5efa\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>path</code> (string): \u5e94\u5728\u5176\u4e2d\u521b\u5efa\u865a\u62df\u73af\u5883\u7684\u6587\u4ef6\u7cfb\u7edf\u8def\u5f84 (\u4f8b\u5982, <code>./.venv</code>)\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>venv</code> (object): \u4e00\u4e2a\u865a\u62df\u73af\u5883\u5bf9\u8c61\uff0c\u5305\u542b\u4e0e\u5176\u4ea4\u4e92\u7684\u65b9\u6cd5\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/python/#venvcreate","title":"<code>venv:create()</code>","text":"<p>\u5728\u6307\u5b9a\u8def\u5f84\u7684\u6587\u4ef6\u7cfb\u7edf\u4e0a\u521b\u5efa\u865a\u62df\u73af\u5883\u3002</p> <ul> <li>\u8fd4\u56de:<ul> <li><code>error</code>: \u5982\u679c\u521b\u5efa\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/python/#venvpipcommand","title":"<code>venv:pip(command)</code>","text":"<p>\u5728\u865a\u62df\u73af\u5883\u7684\u4e0a\u4e0b\u6587\u4e2d\u6267\u884c <code>pip</code> \u547d\u4ee4\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>command</code> (string): \u8981\u4f20\u9012\u7ed9 <code>pip</code> \u7684\u53c2\u6570 (\u4f8b\u5982, <code>install -r requirements.txt</code>)\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>result</code> (table): \u4e00\u4e2a\u5305\u542b <code>pip</code> \u547d\u4ee4\u7684 <code>stdout</code>\u3001<code>stderr</code> \u548c <code>exit_code</code> \u7684\u8868\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/python/#venvexecscript_path","title":"<code>venv:exec(script_path)</code>","text":"<p>\u4f7f\u7528\u865a\u62df\u73af\u5883\u4e2d\u7684 Python \u89e3\u91ca\u5668\u6267\u884c Python \u811a\u672c\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>script_path</code> (string): \u8981\u6267\u884c\u7684 Python \u811a\u672c\u7684\u8def\u5f84\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>result</code> (table): \u4e00\u4e2a\u5305\u542b\u811a\u672c\u6267\u884c\u7684 <code>stdout</code>\u3001<code>stderr</code> \u548c <code>exit_code</code> \u7684\u8868\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/python/#_1","title":"\u793a\u4f8b","text":"<p>\u6b64\u793a\u4f8b\u6f14\u793a\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684\u751f\u547d\u5468\u671f\uff1a\u521b\u5efa\u865a\u62df\u73af\u5883\u3001\u4ece <code>requirements.txt</code> \u6587\u4ef6\u5b89\u88c5\u4f9d\u8d56\u9879\u4ee5\u53ca\u8fd0\u884c Python \u811a\u672c\u3002</p> <pre><code>-- examples/python_venv_lifecycle_example.sloth\n\nModern DSLs = {\n  main = {\n    description = \"\u4e00\u4e2a\u6f14\u793a Python venv \u751f\u547d\u5468\u671f\u7684\u4efb\u52a1\u3002\",\n    create_workdir_before_run = true, -- \u4f7f\u7528\u4e34\u65f6\u5de5\u4f5c\u76ee\u5f55\n    tasks = {\n      {\n        name = \"run-python-script\",\n        description = \"\u521b\u5efa venv\uff0c\u5b89\u88c5\u4f9d\u8d56\u9879\u5e76\u8fd0\u884c\u811a\u672c\u3002\",\n        command = function(params) \n          local python = require(\"python\")\n          local workdir = params.workdir -- \u4ece\u7ec4\u4e2d\u83b7\u53d6\u4e34\u65f6\u5de5\u4f5c\u76ee\u5f55\n\n          -- 1. \u5c06\u6211\u4eec\u7684 Python \u811a\u672c\u548c\u4f9d\u8d56\u9879\u5199\u5165\u5de5\u4f5c\u76ee\u5f55\n          fs.write(workdir .. \"/requirements.txt\", \"requests==2.28.1\")\n          fs.write(workdir .. \"/main.py\", \"import requests\\nprint(f'Hello from Python! Using requests version: {requests.__version__}')\")\n\n          -- 2. \u521b\u5efa\u4e00\u4e2a venv \u5bf9\u8c61\n          local venv_path = workdir .. \"/.venv\"\n          log.info(\"\u6b63\u5728\u8bbe\u7f6e\u865a\u62df\u73af\u5883\u4e8e: \" .. venv_path)\n          local venv = python.venv(venv_path)\n\n          -- 3. \u5728\u6587\u4ef6\u7cfb\u7edf\u4e0a\u521b\u5efa venv\n          venv:create()\n\n          -- 4. \u4f7f\u7528 pip \u5b89\u88c5\u4f9d\u8d56\u9879\n          log.info(\"\u6b63\u5728\u4ece requirements.txt \u5b89\u88c5\u4f9d\u8d56\u9879...\")\n          local pip_result = venv:pip(\"install -r \" .. workdir .. \"/requirements.txt\")\n          if pip_result.exit_code ~= 0 then\n            log.error(\"Pip \u5b89\u88c5\u5931\u8d25: \" .. pip_result.stderr)\n            return false, \"\u672a\u80fd\u5b89\u88c5 Python \u4f9d\u8d56\u9879\u3002\"\n          end\n\n          -- 5. \u6267\u884c\u811a\u672c\n          log.info(\"\u6b63\u5728\u8fd0\u884c Python \u811a\u672c...\")\n          local exec_result = venv:exec(workdir .. \"/main.py\")\n          if exec_result.exit_code ~= 0 then\n            log.error(\"Python \u811a\u672c\u5931\u8d25: \" .. exec_result.stderr)\n            return false, \"Python \u811a\u672c\u6267\u884c\u5931\u8d25\u3002\"\n          end\n\n          log.info(\"Python \u811a\u672c\u6210\u529f\u6267\u884c\u3002\")\n          print(\"--- Python \u811a\u672c\u8f93\u51fa ---\")\n          print(exec_result.stdout)\n          print(\"----------------------------\")\n\n          return true, \"Python venv \u751f\u547d\u5468\u671f\u5b8c\u6210\u3002\"\n        end\n      }\n    }\n  }\n}\n</code></pre> <p>```</p>"},{"location":"zh/modules/salt/","title":"Salt \u6a21\u5757","text":"<p><code>salt</code> \u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6d41\u7545\u7684 API \u6765\u4e0e SaltStack \u8fdb\u884c\u4ea4\u4e92\uff0c\u5141\u8bb8\u60a8\u4ece <code>sloth-runner</code> \u5de5\u4f5c\u6d41\u4e2d\u8fd0\u884c\u8fdc\u7a0b\u6267\u884c\u547d\u4ee4\u548c\u7ba1\u7406\u914d\u7f6e\u3002</p>"},{"location":"zh/modules/salt/#saltclientoptions","title":"<code>salt.client([options])</code>","text":"<p>\u521b\u5efa\u4e00\u4e2a Salt \u5ba2\u6237\u7aef\u5bf9\u8c61\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>options</code> (table, \u53ef\u9009): \u4e00\u4e2a\u9009\u9879\u8868\u3002<ul> <li><code>config_path</code> (string): Salt master \u914d\u7f6e\u6587\u4ef6\u7684\u8def\u5f84\u3002</li> </ul> </li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>client</code> (object): \u4e00\u4e2a <code>SaltClient</code> \u5bf9\u8c61\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/salt/#saltclient","title":"<code>SaltClient</code> \u5bf9\u8c61","text":"<p>\u6b64\u5bf9\u8c61\u8868\u793a Salt master \u7684\u5ba2\u6237\u7aef\uff0c\u5e76\u63d0\u4f9b\u7528\u4e8e\u5b9a\u4f4d minions \u7684\u65b9\u6cd5\u3002</p>"},{"location":"zh/modules/salt/#clienttargettarget_string-expr_form","title":"<code>client:target(target_string, [expr_form])</code>","text":"<p>\u6307\u5b9a\u547d\u4ee4\u7684\u76ee\u6807 minion\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>target_string</code> (string): \u76ee\u6807\u8868\u8fbe\u5f0f (\u4f8b\u5982, <code>\"*\"</code> \u8868\u793a\u6240\u6709 minions, <code>\"web-server-1\"</code>, \u6216\u4e00\u4e2a grain \u503c)\u3002</li> <li><code>expr_form</code> (string, \u53ef\u9009): \u8981\u4f7f\u7528\u7684\u5b9a\u4f4d\u7c7b\u578b (\u4f8b\u5982, <code>\"glob\"</code>, <code>\"grain\"</code>, <code>\"list\"</code>)\u3002\u9ed8\u8ba4\u4e3a glob\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>target</code> (object): \u4e00\u4e2a <code>SaltTarget</code> \u5bf9\u8c61\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/salt/#salttarget","title":"<code>SaltTarget</code> \u5bf9\u8c61","text":"<p>\u6b64\u5bf9\u8c61\u8868\u793a\u4e00\u4e2a\u7279\u5b9a\u7684\u76ee\u6807\uff0c\u5e76\u63d0\u4f9b\u53ef\u94fe\u63a5\u7684\u65b9\u6cd5\u6765\u6267\u884c Salt \u51fd\u6570\u3002</p>"},{"location":"zh/modules/salt/#targetcmdfunction-arg1-arg2","title":"<code>target:cmd(function, [arg1, arg2, ...])</code>","text":"<p>\u5728\u76ee\u6807\u4e0a\u6267\u884c Salt \u6267\u884c\u6a21\u5757\u51fd\u6570\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>function</code> (string): \u8981\u8fd0\u884c\u7684\u51fd\u6570\u7684\u540d\u79f0 (\u4f8b\u5982, <code>\"test.ping\"</code>, <code>\"state.apply\"</code>, <code>\"cmd.run\"</code>)\u3002</li> <li><code>arg1</code>, <code>arg2</code>, ... (any): \u8981\u4f20\u9012\u7ed9 Salt \u51fd\u6570\u7684\u9644\u52a0\u53c2\u6570\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>result</code> (table): \u4e00\u4e2a\u5305\u542b <code>success</code> (boolean)\u3001<code>stdout</code> (string \u6216 table) \u548c <code>stderr</code> (string) \u7684\u8868\u3002\u5982\u679c Salt \u547d\u4ee4\u8fd4\u56de JSON\uff0c<code>stdout</code> \u5c06\u662f\u4e00\u4e2a\u89e3\u6790\u540e\u7684 Lua \u8868\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/salt/#_1","title":"\u793a\u4f8b","text":"<p>\u6b64\u793a\u4f8b\u6f14\u793a\u4e86\u5982\u4f55\u5b9a\u4f4d minions \u4ee5 ping \u5b83\u4eec\u5e76\u5e94\u7528 Salt \u72b6\u6001\u3002</p> <pre><code>command = function()\n  local salt = require(\"salt\")\n\n  -- 1. \u521b\u5efa\u4e00\u4e2a Salt \u5ba2\u6237\u7aef\n  local client = salt.client()\n\n  -- 2. \u5b9a\u4f4d\u6240\u6709 minions \u5e76 ping \u5b83\u4eec\n  log.info(\"\u6b63\u5728 ping \u6240\u6709 minions...\")\n  local ping_result = client:target(\"*\"):cmd(\"test.ping\")\n  if not ping_result.success then\n    return false, \"Ping minions \u5931\u8d25: \" .. ping_result.stderr\n  end\n  print(\"Ping \u7ed3\u679c:\")\n  print(data.to_yaml(ping_result.stdout)) -- stdout \u662f\u4e00\u4e2a\u8868\n\n  -- 3. \u5b9a\u4f4d\u4e00\u4e2a\u7279\u5b9a\u7684 web \u670d\u52a1\u5668\u5e76\u5e94\u7528\u4e00\u4e2a\u72b6\u6001\n  log.info(\"\u6b63\u5728\u5411 web-server-1 \u5e94\u7528 'nginx' \u72b6\u6001...\")\n  local apply_result = client:target(\"web-server-1\", \"glob\"):cmd(\"state.apply\", \"nginx\")\n  if not apply_result.success then\n    return false, \"\u5e94\u7528\u72b6\u6001\u5931\u8d25: \" .. apply_result.stderr\n  end\n\n  log.info(\"\u72b6\u6001\u6210\u529f\u5e94\u7528\u3002\")\n  return true, \"Salt \u64cd\u4f5c\u5b8c\u6210\u3002\"\nend\n</code></pre>"},{"location":"zh/modules/state/","title":"\ud83d\udcbe \u72b6\u6001\u7ba1\u7406\u6a21\u5757","text":"<p>\u72b6\u6001\u7ba1\u7406\u6a21\u5757\u63d0\u4f9b\u5f3a\u5927\u7684\u6301\u4e45\u5316\u72b6\u6001\u529f\u80fd\uff0c\u5305\u62ec\u539f\u5b50\u64cd\u4f5c\u3001\u5206\u5e03\u5f0f\u9501\u548cTTL\uff08\u751f\u5b58\u65f6\u95f4\uff09\u529f\u80fd\u3002\u6240\u6709\u6570\u636e\u90fd\u4f7f\u7528SQLite\u7684WAL\u6a21\u5f0f\u5728\u672c\u5730\u5b58\u50a8\uff0c\u4ee5\u83b7\u5f97\u6700\u5927\u7684\u6027\u80fd\u548c\u53ef\u9760\u6027\u3002</p>"},{"location":"zh/modules/state/#_2","title":"\ud83d\ude80 \u6838\u5fc3\u7279\u6027","text":"<ul> <li>SQLite \u6301\u4e45\u5316: \u4f7f\u7528WAL\u6a21\u5f0f\u7684\u53ef\u9760\u5b58\u50a8</li> <li>\u539f\u5b50\u64cd\u4f5c: \u7ebf\u7a0b\u5b89\u5168\u7684\u589e\u91cf\u3001\u6bd4\u8f83\u4ea4\u6362\u3001\u8ffd\u52a0\u64cd\u4f5c</li> <li>\u5206\u5e03\u5f0f\u9501: \u5e26\u81ea\u52a8\u8d85\u65f6\u7684\u4e34\u754c\u533a</li> <li>TTL (\u751f\u5b58\u65f6\u95f4): \u81ea\u52a8\u952e\u8fc7\u671f</li> <li>\u6570\u636e\u7c7b\u578b: \u5b57\u7b26\u4e32\u3001\u6570\u5b57\u3001\u5e03\u5c14\u503c\u3001\u8868\u3001\u5217\u8868</li> <li>\u6a21\u5f0f\u5339\u914d: \u901a\u914d\u7b26\u952e\u641c\u7d22</li> <li>\u81ea\u52a8\u6e05\u7406: \u8fc7\u671f\u6570\u636e\u7684\u540e\u53f0\u6e05\u7406</li> <li>\u7edf\u8ba1\u4fe1\u606f: \u4f7f\u7528\u60c5\u51b5\u548c\u6027\u80fd\u6307\u6807</li> </ul>"},{"location":"zh/modules/state/#_3","title":"\ud83d\udccb \u57fa\u672c\u7528\u6cd5","text":""},{"location":"zh/modules/state/#_4","title":"\u8bbe\u7f6e\u548c\u83b7\u53d6\u503c","text":"<pre><code>-- \u8bbe\u7f6e\u503c\nstate.set(\"app_version\", \"v1.2.3\")\nstate.set(\"user_count\", 1000)\nstate.set(\"config\", {\n    debug = true,\n    max_connections = 100\n})\n\n-- \u83b7\u53d6\u503c\nlocal version = state.get(\"app_version\")\nlocal count = state.get(\"user_count\")\nlocal config = state.get(\"config\")\n\n-- \u5e26\u9ed8\u8ba4\u503c\u83b7\u53d6\nlocal theme = state.get(\"ui_theme\", \"dark\")\n\n-- \u68c0\u67e5\u5b58\u5728\u6027\nif state.exists(\"app_version\") then\n    log.info(\"\u5e94\u7528\u7248\u672c\u5df2\u914d\u7f6e\")\nend\n\n-- \u5220\u9664\u952e\nstate.delete(\"old_key\")\n</code></pre>"},{"location":"zh/modules/state/#ttl","title":"TTL (\u751f\u5b58\u65f6\u95f4)","text":"<pre><code>-- \u8bbe\u7f6e\u5e26TTL (60\u79d2)\nstate.set(\"session_token\", \"abc123\", 60)\n\n-- \u4e3a\u73b0\u6709\u952e\u8bbe\u7f6eTTL\nstate.set_ttl(\"user_session\", 300) -- 5\u5206\u949f\n\n-- \u68c0\u67e5\u5269\u4f59TTL\nlocal ttl = state.get_ttl(\"session_token\")\nlog.info(\"\u4ee4\u724c\u5728 \" .. ttl .. \" \u79d2\u540e\u8fc7\u671f\")\n</code></pre>"},{"location":"zh/modules/state/#_5","title":"\u539f\u5b50\u64cd\u4f5c","text":"<pre><code>-- \u539f\u5b50\u589e\u91cf\nlocal counter = state.increment(\"page_views\", 1)\nlocal bulk_counter = state.increment(\"downloads\", 50)\n\n-- \u539f\u5b50\u51cf\u91cf  \nlocal remaining = state.decrement(\"inventory\", 5)\n\n-- \u5b57\u7b26\u4e32\u8ffd\u52a0\nstate.set(\"log_messages\", \"\u542f\u52a8\u5e94\u7528\u7a0b\u5e8f\")\nlocal new_length = state.append(\"log_messages\", \" -&gt; \u8fde\u63a5\u5230\u6570\u636e\u5e93\")\n\n-- \u539f\u5b50\u6bd4\u8f83\u4ea4\u6362\nlocal old_version = state.get(\"config_version\")\nlocal success = state.compare_swap(\"config_version\", old_version, old_version + 1)\nif success then\n    log.info(\"\u914d\u7f6e\u5b89\u5168\u66f4\u65b0\")\nend\n</code></pre>"},{"location":"zh/modules/state/#_6","title":"\u5217\u8868\u64cd\u4f5c","text":"<pre><code>-- \u6dfb\u52a0\u9879\u76ee\u5230\u5217\u8868\nstate.list_push(\"deployment_queue\", {\n    app = \"frontend\",\n    version = \"v2.1.0\",\n    environment = \"staging\"\n})\n\n-- \u68c0\u67e5\u5217\u8868\u5927\u5c0f\nlocal queue_size = state.list_length(\"deployment_queue\")\nlog.info(\"\u961f\u5217\u4e2d\u7684\u9879\u76ee: \" .. queue_size)\n\n-- \u5904\u7406\u5217\u8868 (pop\u79fb\u9664\u6700\u540e\u4e00\u9879)\nwhile state.list_length(\"deployment_queue\") &gt; 0 do\n    local deployment = state.list_pop(\"deployment_queue\")\n    log.info(\"\u5904\u7406\u90e8\u7f72: \" .. deployment.app)\n    -- \u5904\u7406\u90e8\u7f72...\nend\n</code></pre>"},{"location":"zh/modules/state/#_7","title":"\u5206\u5e03\u5f0f\u9501\u548c\u4e34\u754c\u533a","text":"<pre><code>-- \u5c1d\u8bd5\u83b7\u53d6\u9501 (\u4e0d\u7b49\u5f85)\nlocal lock_acquired = state.try_lock(\"deployment_lock\", 30) -- 30\u79d2TTL\nif lock_acquired then\n    -- \u5173\u952e\u5de5\u4f5c\n    state.unlock(\"deployment_lock\")\nend\n\n-- \u5e26\u7b49\u5f85\u548c\u8d85\u65f6\u7684\u9501\nlocal acquired = state.lock(\"database_migration\", 60) -- \u7b49\u5f85\u6700\u591a60\u79d2\nif acquired then\n    -- \u6267\u884c\u8fc1\u79fb\n    state.unlock(\"database_migration\")\nend\n\n-- \u5e26\u81ea\u52a8\u9501\u7ba1\u7406\u7684\u4e34\u754c\u533a\nstate.with_lock(\"critical_section\", function()\n    log.info(\"\u6267\u884c\u5173\u952e\u64cd\u4f5c...\")\n\n    -- \u66f4\u65b0\u5168\u5c40\u8ba1\u6570\u5668\n    local counter = state.increment(\"global_counter\", 1)\n\n    -- \u66f4\u65b0\u65f6\u95f4\u6233\n    state.set(\"last_operation\", os.time())\n\n    log.info(\"\u5173\u952e\u64cd\u4f5c\u5b8c\u6210 - \u8ba1\u6570\u5668: \" .. counter)\n\n    -- \u51fd\u6570\u8fd4\u56de\u65f6\u81ea\u52a8\u91ca\u653e\u9501\n    return \"operation_success\"\nend, 15) -- 15\u79d2\u8d85\u65f6\n</code></pre>"},{"location":"zh/modules/state/#api","title":"\ud83d\udd0d API\u53c2\u8003","text":""},{"location":"zh/modules/state/#_8","title":"\u57fa\u672c\u64cd\u4f5c","text":"\u51fd\u6570 \u53c2\u6570 \u8fd4\u56de\u503c \u63cf\u8ff0 <code>state.set(key, value, ttl?)</code> key: string, value: any, ttl?: number success: boolean \u8bbe\u7f6e\u503c\uff0c\u53ef\u9009TTL <code>state.get(key, default?)</code> key: string, default?: any value: any \u83b7\u53d6\u503c\u6216\u8fd4\u56de\u9ed8\u8ba4\u503c <code>state.delete(key)</code> key: string success: boolean \u5220\u9664\u952e <code>state.exists(key)</code> key: string exists: boolean \u68c0\u67e5\u952e\u662f\u5426\u5b58\u5728 <code>state.clear(pattern?)</code> pattern?: string success: boolean \u6309\u6a21\u5f0f\u5220\u9664\u952e"},{"location":"zh/modules/state/#ttl_1","title":"TTL\u64cd\u4f5c","text":"\u51fd\u6570 \u53c2\u6570 \u8fd4\u56de\u503c \u63cf\u8ff0 <code>state.set_ttl(key, seconds)</code> key: string, seconds: number success: boolean \u4e3a\u73b0\u6709\u952e\u8bbe\u7f6eTTL <code>state.get_ttl(key)</code> key: string ttl: number \u83b7\u53d6\u5269\u4f59TTL (-1 = \u65e0TTL, -2 = \u4e0d\u5b58\u5728)"},{"location":"zh/modules/state/#_9","title":"\u539f\u5b50\u64cd\u4f5c","text":"\u51fd\u6570 \u53c2\u6570 \u8fd4\u56de\u503c \u63cf\u8ff0 <code>state.increment(key, delta?)</code> key: string, delta?: number new_value: number \u539f\u5b50\u589e\u91cf\u503c <code>state.decrement(key, delta?)</code> key: string, delta?: number new_value: number \u539f\u5b50\u51cf\u91cf\u503c <code>state.append(key, value)</code> key: string, value: string new_length: number \u539f\u5b50\u8ffd\u52a0\u5b57\u7b26\u4e32 <code>state.compare_swap(key, old, new)</code> key: string, old: any, new: any success: boolean \u539f\u5b50\u6bd4\u8f83\u4ea4\u6362"},{"location":"zh/modules/state/#_10","title":"\u5217\u8868\u64cd\u4f5c","text":"\u51fd\u6570 \u53c2\u6570 \u8fd4\u56de\u503c \u63cf\u8ff0 <code>state.list_push(key, item)</code> key: string, item: any length: number \u6dfb\u52a0\u9879\u76ee\u5230\u5217\u8868\u672b\u5c3e <code>state.list_pop(key)</code> key: string item: any | nil \u79fb\u9664\u5e76\u8fd4\u56de\u6700\u540e\u4e00\u9879 <code>state.list_length(key)</code> key: string length: number \u83b7\u53d6\u5217\u8868\u957f\u5ea6"},{"location":"zh/modules/state/#_11","title":"\u5206\u5e03\u5f0f\u9501","text":"\u51fd\u6570 \u53c2\u6570 \u8fd4\u56de\u503c \u63cf\u8ff0 <code>state.try_lock(name, ttl)</code> name: string, ttl: number success: boolean \u5c1d\u8bd5\u83b7\u53d6\u9501\u800c\u4e0d\u7b49\u5f85 <code>state.lock(name, timeout?)</code> name: string, timeout?: number success: boolean \u5e26\u8d85\u65f6\u83b7\u53d6\u9501 <code>state.unlock(name)</code> name: string success: boolean \u91ca\u653e\u9501 <code>state.with_lock(name, fn, timeout?)</code> name: string, fn: function, timeout?: number result: any \u4f7f\u7528\u81ea\u52a8\u9501\u6267\u884c\u51fd\u6570"},{"location":"zh/modules/state/#_12","title":"\u5b9e\u7528\u5de5\u5177","text":"\u51fd\u6570 \u53c2\u6570 \u8fd4\u56de\u503c \u63cf\u8ff0 <code>state.keys(pattern?)</code> pattern?: string keys: table \u6309\u6a21\u5f0f\u5217\u51fa\u952e <code>state.stats()</code> - stats: table \u83b7\u53d6\u7cfb\u7edf\u7edf\u8ba1\u4fe1\u606f"},{"location":"zh/modules/state/#_13","title":"\ud83d\udca1 \u5b9e\u9645\u7528\u4f8b","text":""},{"location":"zh/modules/state/#1","title":"1. \u90e8\u7f72\u7248\u672c\u63a7\u5236","text":"<pre><code>Modern DSLs = {\n    deployment_pipeline = {\n        tasks = {\n            prepare_deploy = {\n                command = function()\n                    -- \u68c0\u67e5\u6700\u540e\u90e8\u7f72\u7684\u7248\u672c\n                    local last_version = state.get(\"last_deployed_version\", \"v0.0.0\")\n                    local new_version = \"v1.2.3\"\n\n                    -- \u68c0\u67e5\u662f\u5426\u5df2\u90e8\u7f72\n                    if last_version == new_version then\n                        log.warn(\"\u7248\u672c \" .. new_version .. \" \u5df2\u90e8\u7f72\")\n                        return false, \"\u7248\u672c\u5df2\u90e8\u7f72\"\n                    end\n\n                    -- \u6ce8\u518c\u90e8\u7f72\u5f00\u59cb\n                    state.set(\"deploy_status\", \"in_progress\")\n                    state.set(\"deploy_start_time\", os.time())\n                    state.increment(\"total_deploys\", 1)\n\n                    return true, \"\u90e8\u7f72\u51c6\u5907\u5b8c\u6210\"\n                end\n            },\n\n            execute_deploy = {\n                depends_on = \"prepare_deploy\",\n                command = function()\n                    -- \u90e8\u7f72\u7684\u4e34\u754c\u533a\n                    return state.with_lock(\"deployment_lock\", function()\n                        log.info(\"\u4f7f\u7528\u9501\u6267\u884c\u90e8\u7f72...\")\n\n                        -- \u6a21\u62df\u90e8\u7f72\n                        exec.run(\"sleep 5\")\n\n                        -- \u66f4\u65b0\u72b6\u6001\n                        state.set(\"last_deployed_version\", \"v1.2.3\")\n                        state.set(\"deploy_status\", \"completed\")\n                        state.set(\"deploy_end_time\", os.time())\n\n                        -- \u8bb0\u5f55\u5386\u53f2\n                        state.list_push(\"deploy_history\", {\n                            version = \"v1.2.3\",\n                            timestamp = os.time(),\n                            duration = state.get(\"deploy_end_time\") - state.get(\"deploy_start_time\")\n                        })\n\n                        return true, \"\u90e8\u7f72\u6210\u529f\u5b8c\u6210\"\n                    end, 300) -- 5\u5206\u949f\u8d85\u65f6\n                end\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"zh/modules/state/#2-ttl","title":"2. \u5e26TTL\u7684\u667a\u80fd\u7f13\u5b58","text":"<pre><code>-- \u7f13\u5b58\u52a9\u624b\u51fd\u6570\nfunction get_cached_data(cache_key, fetch_function, ttl)\n    local cached = state.get(cache_key)\n    if cached then\n        log.info(\"\u7f13\u5b58\u547d\u4e2d: \" .. cache_key)\n        return cached\n    end\n\n    log.info(\"\u7f13\u5b58\u672a\u547d\u4e2d: \" .. cache_key .. \" - \u6b63\u5728\u83b7\u53d6...\")\n    local data = fetch_function()\n    state.set(cache_key, data, ttl or 300) -- \u9ed8\u8ba45\u5206\u949f\n    return data\nend\n\n-- \u5728\u4efb\u52a1\u4e2d\u4f7f\u7528\nModern DSLs = {\n    data_processing = {\n        tasks = {\n            fetch_user_data = {\n                command = function()\n                    local user_data = get_cached_data(\"user:123:profile\", function()\n                        -- \u6a21\u62df\u6602\u8d35\u7684\u83b7\u53d6\u64cd\u4f5c\n                        return {\n                            name = \"\u5f20\u4e09\",\n                            email = \"zhangsan@example.com\",\n                            preferences = {\"dark_mode\", \"notifications\"}\n                        }\n                    end, 600) -- \u7f13\u5b5810\u5206\u949f\n\n                    log.info(\"\u7528\u6237\u6570\u636e: \" .. data.to_json(user_data))\n                    return true, \"\u7528\u6237\u6570\u636e\u5df2\u83b7\u53d6\"\n                end\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"zh/modules/state/#3","title":"3. \u901f\u7387\u9650\u5236","text":"<pre><code>function check_rate_limit(identifier, max_requests, window_seconds)\n    local key = \"rate_limit:\" .. identifier\n    local current_count = state.get(key, 0)\n\n    if current_count &gt;= max_requests then\n        return false, \"\u901f\u7387\u9650\u5236\u8d85\u51fa\"\n    end\n\n    -- \u589e\u52a0\u8ba1\u6570\u5668\n    if current_count == 0 then\n        -- \u7a97\u53e3\u4e2d\u7684\u7b2c\u4e00\u4e2a\u8bf7\u6c42\n        state.set(key, 1, window_seconds)\n    else\n        -- \u589e\u52a0\u73b0\u6709\u8ba1\u6570\u5668\n        state.increment(key, 1)\n    end\n\n    return true, \"\u8bf7\u6c42\u5141\u8bb8\"\nend\n\n-- \u5728\u4efb\u52a1\u4e2d\u4f7f\u7528\nModern DSLs = {\n    api_tasks = {\n        tasks = {\n            make_api_call = {\n                command = function()\n                    local allowed, msg = check_rate_limit(\"api_calls\", 100, 3600) -- 100\u6b21\u8c03\u7528/\u5c0f\u65f6\n\n                    if not allowed then\n                        log.error(msg)\n                        return false, msg\n                    end\n\n                    -- \u8fdb\u884cAPI\u8c03\u7528\n                    log.info(\"\u8fdb\u884cAPI\u8c03\u7528...\")\n                    return true, \"API\u8c03\u7528\u5b8c\u6210\"\n                end\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"zh/modules/state/#_14","title":"\u2699\ufe0f \u914d\u7f6e\u548c\u5b58\u50a8","text":""},{"location":"zh/modules/state/#_15","title":"\u6570\u636e\u5e93\u4f4d\u7f6e","text":"<p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cSQLite\u6570\u636e\u5e93\u521b\u5efa\u5728: - Linux/macOS: <code>~/.sloth-runner/state.db</code> - Windows: <code>%USERPROFILE%\\.sloth-runner\\state.db</code></p>"},{"location":"zh/modules/state/#_16","title":"\u6280\u672f\u7279\u6027","text":"<ul> <li>\u5f15\u64ce: \u5e26WAL\u6a21\u5f0f\u7684SQLite 3</li> <li>\u5e76\u53d1\u8bbf\u95ee: \u652f\u6301\u591a\u4e2a\u540c\u65f6\u8fde\u63a5</li> <li>\u81ea\u52a8\u6e05\u7406: \u6bcf5\u5206\u949f\u81ea\u52a8\u6e05\u7406\u8fc7\u671f\u6570\u636e</li> <li>\u9501\u8d85\u65f6: \u8fc7\u671f\u9501\u81ea\u52a8\u6e05\u7406</li> <li>\u5e8f\u5217\u5316: \u590d\u6742\u5bf9\u8c61\u4f7f\u7528JSON\uff0c\u7b80\u5355\u7c7b\u578b\u4f7f\u7528\u539f\u751f\u683c\u5f0f</li> </ul>"},{"location":"zh/modules/state/#_17","title":"\u9650\u5236","text":"<ul> <li>\u672c\u5730\u8303\u56f4: \u72b6\u6001\u4ec5\u5728\u672c\u5730\u673a\u5668\u4e0a\u6301\u4e45\u5316</li> <li>\u5e76\u53d1\u6027: \u9501\u4ec5\u5728\u672c\u5730\u8fdb\u7a0b\u5185\u6709\u6548</li> <li>\u5927\u5c0f: \u9002\u5408\u5c0f\u5230\u4e2d\u578b\u6570\u636e\u96c6 (&lt; 1GB)</li> </ul>"},{"location":"zh/modules/state/#_18","title":"\ud83d\udd04 \u6700\u4f73\u5b9e\u8df5","text":"<ol> <li>\u5bf9\u4e34\u65f6\u6570\u636e\u4f7f\u7528TTL \u4ee5\u9632\u6b62\u5b58\u50a8\u81a8\u80c0</li> <li>\u5bf9\u4e34\u754c\u533a\u4f7f\u7528\u9501 \u4ee5\u907f\u514d\u7ade\u6001\u6761\u4ef6</li> <li>\u4f7f\u7528\u6a21\u5f0f\u8fdb\u884c\u6279\u91cf\u64cd\u4f5c \u7ba1\u7406\u76f8\u5173\u952e</li> <li>\u4f7f\u7528<code>state.stats()</code>\u76d1\u63a7\u5b58\u50a8\u5927\u5c0f</li> <li>\u4f7f\u7528\u539f\u5b50\u64cd\u4f5c \u800c\u4e0d\u662f\u8bfb-\u4fee\u6539-\u5199\u6a21\u5f0f</li> <li>\u4f7f\u7528<code>state.clear(pattern)</code>\u5b9a\u671f\u6e05\u7406\u8fc7\u671f\u952e</li> </ol> <p>\u72b6\u6001\u7ba1\u7406\u6a21\u5757\u5c06sloth-runner\u8f6c\u53d8\u4e3a\u6709\u72b6\u6001\u7684\u3001\u53ef\u9760\u7684\u590d\u6742\u4efb\u52a1\u7f16\u6392\u5e73\u53f0! \ud83d\ude80</p>"},{"location":"zh/modules/terraform/","title":"Terraform \u6a21\u5757","text":"<p><code>terraform</code> \u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a\u9ad8\u7ea7\u754c\u9762\uff0c\u7528\u4e8e\u7f16\u6392 <code>terraform</code> CLI \u547d\u4ee4\uff0c\u5141\u8bb8\u60a8\u76f4\u63a5\u5728 Sloth-Runner \u7ba1\u9053\u5185\u7ba1\u7406\u60a8\u7684\u57fa\u7840\u67b6\u6784\u751f\u547d\u5468\u671f\u3002</p>"},{"location":"zh/modules/terraform/#_1","title":"\u914d\u7f6e","text":"<p>\u6b64\u6a21\u5757\u9700\u8981\u5b89\u88c5 <code>terraform</code> CLI \u5e76\u53ef\u5728\u7cfb\u7edf\u7684 PATH \u4e2d\u4f7f\u7528\u3002\u6240\u6709\u547d\u4ee4\u90fd\u5fc5\u987b\u5728\u60a8\u7684 <code>.tf</code> \u6587\u4ef6\u6240\u5728\u7684\u7279\u5b9a <code>workdir</code> \u4e2d\u6267\u884c\u3002</p>"},{"location":"zh/modules/terraform/#_2","title":"\u51fd\u6570","text":""},{"location":"zh/modules/terraform/#terraforminitparams","title":"<code>terraform.init(params)</code>","text":"<p>\u521d\u59cb\u5316 Terraform \u5de5\u4f5c\u76ee\u5f55\u3002</p> <ul> <li><code>params</code> (table):<ul> <li><code>workdir</code> (string): \u5fc5\u9700\u3002 \u5305\u542b Terraform \u6587\u4ef6\u7684\u76ee\u5f55\u7684\u8def\u5f84\u3002</li> </ul> </li> <li>\u8fd4\u56de: \u5305\u542b <code>success</code>\u3001<code>stdout</code>\u3001<code>stderr</code> \u548c <code>exit_code</code> \u7684\u7ed3\u679c\u8868\u3002</li> </ul>"},{"location":"zh/modules/terraform/#terraformplanparams","title":"<code>terraform.plan(params)</code>","text":"<p>\u521b\u5efa Terraform \u6267\u884c\u8ba1\u5212\u3002</p> <ul> <li><code>params</code> (table):<ul> <li><code>workdir</code> (string): \u5fc5\u9700\u3002 \u76ee\u5f55\u7684\u8def\u5f84\u3002</li> <li><code>out</code> (string): \u53ef\u9009\u3002 \u7528\u4e8e\u4fdd\u5b58\u751f\u6210\u7684\u8ba1\u5212\u7684\u6587\u4ef6\u540d\u3002</li> </ul> </li> <li>\u8fd4\u56de: \u7ed3\u679c\u8868\u3002</li> </ul>"},{"location":"zh/modules/terraform/#terraformapplyparams","title":"<code>terraform.apply(params)</code>","text":"<p>\u5e94\u7528 Terraform \u8ba1\u5212\u3002</p> <ul> <li><code>params</code> (table):<ul> <li><code>workdir</code> (string): \u5fc5\u9700\u3002 \u76ee\u5f55\u7684\u8def\u5f84\u3002</li> <li><code>plan</code> (string): \u53ef\u9009\u3002 \u8981\u5e94\u7528\u7684\u8ba1\u5212\u6587\u4ef6\u7684\u8def\u5f84\u3002</li> <li><code>auto_approve</code> (boolean): \u53ef\u9009\u3002 \u5982\u679c\u4e3a <code>true</code>\uff0c\u5219\u65e0\u9700\u4ea4\u4e92\u5f0f\u6279\u51c6\u5373\u53ef\u5e94\u7528\u66f4\u6539\u3002</li> </ul> </li> <li>\u8fd4\u56de: \u7ed3\u679c\u8868\u3002</li> </ul>"},{"location":"zh/modules/terraform/#terraformdestroyparams","title":"<code>terraform.destroy(params)</code>","text":"<p>\u9500\u6bc1 Terraform \u7ba1\u7406\u7684\u57fa\u7840\u67b6\u6784\u3002</p> <ul> <li><code>params</code> (table):<ul> <li><code>workdir</code> (string): \u5fc5\u9700\u3002 \u76ee\u5f55\u7684\u8def\u5f84\u3002</li> <li><code>auto_approve</code> (boolean): \u53ef\u9009\u3002 \u5982\u679c\u4e3a <code>true</code>\uff0c\u5219\u65e0\u9700\u4ea4\u4e92\u5f0f\u6279\u51c6\u5373\u53ef\u9500\u6bc1\u8d44\u6e90\u3002</li> </ul> </li> <li>\u8fd4\u56de: \u7ed3\u679c\u8868\u3002</li> </ul>"},{"location":"zh/modules/terraform/#terraformoutputparams","title":"<code>terraform.output(params)</code>","text":"<p>\u4ece Terraform \u72b6\u6001\u6587\u4ef6\u8bfb\u53d6\u8f93\u51fa\u53d8\u91cf\u3002</p> <ul> <li><code>params</code> (table):<ul> <li><code>workdir</code> (string): \u5fc5\u9700\u3002 \u76ee\u5f55\u7684\u8def\u5f84\u3002</li> <li><code>name</code> (string): \u53ef\u9009\u3002 \u8981\u8bfb\u53d6\u7684\u7279\u5b9a\u8f93\u51fa\u7684\u540d\u79f0\u3002\u5982\u679c\u7701\u7565\uff0c\u5219\u6240\u6709\u8f93\u51fa\u90fd\u4f5c\u4e3a\u8868\u8fd4\u56de\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li>\u6210\u529f\u65f6: \u8f93\u51fa\u7684\u5df2\u89e3\u6790 JSON \u503c\uff08\u53ef\u4ee5\u662f\u5b57\u7b26\u4e32\u3001\u8868\u7b49\uff09\u3002</li> <li>\u5931\u8d25\u65f6: <code>nil, error_message</code>\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/terraform/#_3","title":"\u5b8c\u6574\u751f\u547d\u5468\u671f\u793a\u4f8b","text":"<pre><code>local tf_workdir = \"./examples/terraform\"\n\n-- \u4efb\u52a1 1: Init\nlocal result_init = terraform.init({workdir = tf_workdir})\nif not result_init.success then return false, \"Init \u5931\u8d25\" end\n\n-- \u4efb\u52a1 2: Plan\nlocal result_plan = terraform.plan({workdir = tf_workdir})\nif not result_plan.success then return false, \"Plan \u5931\u8d25\" end\n\n-- \u4efb\u52a1 3: Apply\nlocal result_apply = terraform.apply({workdir = tf_workdir, auto_approve = true})\nif not result_apply.success then return false, \"Apply \u5931\u8d25\" end\n\n-- \u4efb\u52a1 4: Get Output\nlocal filename, err = terraform.output({workdir = tf_workdir, name = \"report_filename\"})\nif not filename then return false, \"Output \u5931\u8d25: \" .. err end\nlog.info(\"Terraform \u521b\u5efa\u7684\u6587\u4ef6: \" .. filename)\n\n-- \u4efb\u52a1 5: Destroy\nlocal result_destroy = terraform.destroy({workdir = tf_workdir, auto_approve = true})\nif not result_destroy.success then return false, \"Destroy \u5931\u8d25\" end\n</code></pre>"}]}