{"config":{"lang":["en","pt","zh"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83e\udda5 Sloth Runner - AI-Powered GitOps Task Orchestration Platform","text":"<p>The world's first AI-powered task orchestration platform with native GitOps capabilities. Sloth Runner combines intelligent optimization, predictive analytics, automated deployments, and enterprise-grade reliability into a single, powerful platform.</p> <p> </p>"},{"location":"#quick-start-with-gitops","title":"\ud83d\ude80 Quick Start with GitOps","text":"<p>Get started with a complete GitOps workflow in under 5 minutes:</p>"},{"location":"#1-install-sloth-runner","title":"1. Install Sloth Runner","text":"<pre><code>curl -sSL https://raw.githubusercontent.com/chalkan3-sloth/sloth-runner/main/install.sh | bash\n</code></pre>"},{"location":"#2-run-the-gitops-example","title":"2. Run the GitOps Example","text":"<pre><code># Clone the repository\ngit clone https://github.com/chalkan3-sloth/sloth-runner.git\ncd sloth-runner\n\n# Execute the complete GitOps workflow\nsloth-runner run -f examples/deploy_git_terraform.sloth -v examples/values.yaml deploy_git_terraform\n</code></pre>"},{"location":"#3-watch-the-magic-happen","title":"3. Watch the Magic Happen","text":"<pre><code>\u2705 Repository cloned successfully\n\u2705 Terraform initialized automatically  \n\u2705 Infrastructure planned and validated\n\u2705 Deployment completed successfully\n</code></pre>"},{"location":"#featured-examples-real-world-power","title":"\ud83c\udf1f Featured Examples: Real-World Power","text":""},{"location":"#example-1-deploy-web-cluster-with-incus-goroutines","title":"\ud83d\ude80 Example 1: Deploy Web Cluster with Incus + Goroutines","text":"<p>Deploy a complete web cluster in parallel using containers:</p> <pre><code>task(\"deploy-web-cluster\")\n    :description(\"Deploy complete web cluster with Incus\")\n    :delegate_to(\"incus-host-01\")\n    :command(function()\n        -- Create isolated network\n        incus.network({\n            name = \"web-dmz\",\n            type = \"bridge\"\n        }):set_config({\n            [\"ipv4.address\"] = \"10.10.0.1/24\"\n        }):create()\n\n        -- Deploy 3 web servers in parallel\n        goroutine.map({\"web-01\", \"web-02\", \"web-03\"}, function(name)\n            incus.instance({\n                name = name,\n                image = \"ubuntu:22.04\"\n            }):create()\n              :start()\n              :wait_running()\n              :exec(\"apt install -y nginx\")\n        end)\n\n        log.info(\"\u2705 Web cluster deployed!\")\n        return true\n    end)\n    :build()\n</code></pre> <p>What's happening here: - \u26a1 Parallel execution with <code>goroutine.map()</code> - \ud83c\udf10 Network isolation with Incus bridge - \ud83d\udd17 Fluent API for chaining operations - \ud83c\udfaf Remote execution via <code>:delegate_to()</code></p> <p>\ud83d\udc49 Full Incus Documentation \u2192</p>"},{"location":"#example-2-intelligent-deploy-with-facts","title":"\ud83d\udcca Example 2: Intelligent Deploy with Facts","text":"<p>Make smart deployment decisions based on real-time system state:</p> <pre><code>task(\"intelligent-deploy\")\n    :description(\"Intelligent deployment based on system facts\")\n    :command(function()\n        -- Collect system information\n        local info = facts.get_all({ agent = \"prod-server-01\" })\n\n        log.info(\"\ud83d\udd0d Analyzing: \" .. info.hostname)\n        log.info(\"   Platform: \" .. info.platform.os)\n        log.info(\"   Memory: \" .. string.format(\"%.2f GB\", \n            info.memory.total / 1024 / 1024 / 1024))\n\n        -- Validate requirements\n        if (info.memory.total / 1024 / 1024 / 1024) &lt; 4 then\n            error(\"\u274c Need at least 4GB RAM\")\n        end\n\n        -- Check Docker installation\n        local docker = facts.get_package({ \n            agent = \"prod-server-01\", \n            name = \"docker\" \n        })\n\n        if not docker.installed then\n            log.info(\"\ud83d\udce6 Installing Docker...\")\n            pkg.install({ packages = {\"docker.io\"} })\n               :delegate_to(\"prod-server-01\")\n        end\n\n        -- Conditional deploy based on architecture\n        local image_tag = info.platform.architecture == \"arm64\"\n            and \"latest-arm64\"\n            or \"latest-amd64\"\n\n        log.info(\"\ud83d\ude80 Deploying: myapp:\" .. image_tag)\n        return true\n    end)\n    :build()\n</code></pre> <p>What's happening here: - \ud83d\udcca System discovery with facts module - \u2705 Requirement validation before deploy - \ud83e\udde0 Conditional logic based on architecture - \ud83d\udd04 Auto-installation of dependencies - \ud83c\udf0d Global modules - no <code>require()</code> needed!</p> <p>\ud83d\udc49 Full Facts Documentation \u2192</p>"},{"location":"#new-unified-module-api","title":"\ud83d\udd25 New: Unified Module API","text":"<p>All modules now use a modern, consistent, table-based API for maximum clarity and flexibility:</p> <pre><code>-- Package Management\ntask(\"setup_web_server\", {\n    description = \"Setup web server on remote host\",\n    command = function()\n        -- Update package database\n        pkg.update({ delegate_to = \"web-server\" })\n\n        -- Install packages\n        pkg.install({\n            packages = {\"nginx\", \"certbot\", \"postgresql\"},\n            delegate_to = \"web-server\"\n        })\n\n        -- Configure systemd service\n        systemd.enable({\n            service = \"nginx\",\n            delegate_to = \"web-server\"\n        })\n\n        systemd.start({\n            service = \"nginx\",\n            delegate_to = \"web-server\"\n        })\n\n        -- Verify installation\n        infra_test.service_is_running({\n            name = \"nginx\",\n            delegate_to = \"web-server\"\n        })\n\n        infra_test.port_is_listening({\n            port = 80,\n            delegate_to = \"web-server\"\n        })\n\n        return true, \"Web server configured successfully\"\n    end\n})\n</code></pre> <p>\ud83c\udfaf Key Benefits: - \u2705 Named parameters for self-documenting code - \u2705 Consistent API across all modules - \u2705 Remote execution via <code>delegate_to</code> - \u2705 Built-in testing with <code>infra_test</code> module - \u2705 Parallel execution with goroutines</p> <p>\ud83d\udc49 See Complete API Examples \u2192</p>"},{"location":"#revolutionary-features","title":"\u2728 Revolutionary Features","text":""},{"location":"#modern-dsl-for-gitops","title":"\ud83c\udfaf Modern DSL for GitOps","text":"<p>Clean, powerful Lua-based syntax designed for infrastructure workflows</p> <pre><code>-- Complete GitOps workflow in clean, readable syntax\nlocal clone_task = task(\"clone_infrastructure\")\n    :description(\"Clone Terraform infrastructure repository\")\n    :workdir(\"/tmp/infrastructure\")\n    :command(function(this, params)\n        local git = require(\"git\")\n\n        log.info(\"\ud83d\udce1 Cloning infrastructure repository...\")\n        local repository = git.clone(\n            values.git.repository_url,\n            this.workdir.get()\n        )\n\n        return true, \"Repository cloned successfully\", {\n            repository_url = values.git.repository_url,\n            clone_destination = this.workdir.get()\n        }\n    end)\n    :timeout(\"5m\")\n    :retries(3, \"exponential\")\n    :build()\n\nlocal deploy_task = task(\"deploy_terraform\")\n    :description(\"Deploy infrastructure using Terraform\")\n    :command(function(this, params)\n        local terraform = require(\"terraform\")\n\n        -- Terraform init runs automatically\n        local client = terraform.init(this.workdir:get())\n\n        -- Load configuration from values.yaml\n        local tfvars = client:create_tfvars(\"terraform.tfvars\", {\n            environment = values.terraform.environment,\n            region = values.terraform.region,\n            instance_type = values.terraform.instance_type\n        })\n\n        -- Plan and apply infrastructure\n        local plan_result = client:plan({ var_file = tfvars.filename })\n        if plan_result.success then\n            return client:apply({ \n                var_file = tfvars.filename,\n                auto_approve = true \n            })\n        end\n\n        return false, \"Terraform plan failed\"\n    end)\n    :timeout(\"15m\")\n    :build()\n\n-- Define the complete GitOps workflow\nworkflow.define(\"infrastructure_deployment\")\n    :description(\"Complete GitOps: Clone + Plan + Deploy\")\n    :version(\"1.0.0\")\n    :tasks({ clone_task, deploy_task })\n    :config({\n        timeout = \"20m\",\n        max_parallel_tasks = 1\n    })\n    :on_complete(function(success, results)\n        if success then\n            log.info(\"\ud83c\udf89 Infrastructure deployed successfully!\")\n        end\n    end)\n</code></pre>"},{"location":"#native-gitops-integration","title":"\ud83c\udfd7\ufe0f Native GitOps Integration","text":"<p>Built-in support for Git and Terraform operations</p> <pre><code>-- Git operations with automatic credential handling\nlocal git = require(\"git\")\nlocal repo = git.clone(\"https://github.com/company/infrastructure\", \"/tmp/infra\")\ngit.checkout(repo, \"production\")\ngit.pull(repo, \"origin\", \"production\")\n\n-- Terraform lifecycle management\nlocal terraform = require(\"terraform\")\nlocal client = terraform.init(\"/tmp/infra/terraform/\")  -- Runs 'terraform init'\nlocal plan = client:plan({ var_file = \"production.tfvars\" })\nlocal apply = client:apply({ auto_approve = true })\n\n-- Values-driven configuration\nlocal config = {\n    environment = values.terraform.environment or \"production\",\n    region = values.terraform.region or \"us-west-2\",\n    instance_count = values.terraform.instance_count or 3\n}\n</code></pre>"},{"location":"#external-configuration-management","title":"\u2699\ufe0f External Configuration Management","text":"<p>Clean separation of code and configuration using values.yaml</p> <p>values.yaml: <pre><code>terraform:\n  environment: \"production\"\n  region: \"us-west-2\" \n  instance_type: \"t3.medium\"\n  enable_monitoring: true\n\ngit:\n  repository_url: \"https://github.com/company/terraform-infrastructure\"\n  branch: \"main\"\n\nworkflow:\n  timeout: \"30m\"\n  max_parallel_tasks: 2\n</code></pre></p> <p>Access in workflows: <pre><code>-- Load configuration from values.yaml\nlocal terraform_config = {\n    environment = values.terraform.environment,\n    region = values.terraform.region,\n    instance_type = values.terraform.instance_type\n}\n</code></pre></p>"},{"location":"#parallel-execution-with-goroutines","title":"\u26a1 Parallel Execution with Goroutines \ud83d\ude80","text":"<p>GAME CHANGER! Execute m\u00faltiplas opera\u00e7\u00f5es simultaneamente e reduza o tempo de deploy de minutos para segundos!</p> <ul> <li> <p> 10x Mais R\u00e1pido</p> <p>Deploy em 10 servidores em paralelo ao inv\u00e9s de sequencialmente.</p> <p>Antes: 5 minutos \u23f1\ufe0f Agora: 30 segundos \u26a1</p> </li> <li> <p> Worker Pools</p> <p>Controle a concorr\u00eancia com worker pools para processar grandes volumes.</p> <p>Perfeito para APIs com rate limiting.</p> </li> <li> <p> Async/Await</p> <p>Padr\u00e3o moderno de programa\u00e7\u00e3o ass\u00edncrona no Lua.</p> <p>C\u00f3digo limpo e f\u00e1cil de entender.</p> </li> <li> <p> Timeout Built-in</p> <p>Prote\u00e7\u00e3o contra opera\u00e7\u00f5es travadas com timeout autom\u00e1tico.</p> <p>Seguro e confi\u00e1vel.</p> </li> </ul>"},{"location":"#exemplo-real-deploy-paralelo","title":"\ud83d\udca1 Exemplo Real: Deploy Paralelo","text":"<pre><code>local deploy_task = task(\"deploy_multi_server\")\n    :description(\"Deploy to 10 servers in parallel - 10x faster!\")\n    :command(function(this, params)\n        local goroutine = require(\"goroutine\")\n\n        -- Lista de servidores para deploy\n        local servers = {\n            \"web-01\", \"web-02\", \"web-03\", \"api-01\", \"api-02\",\n            \"api-03\", \"db-01\", \"db-02\", \"cache-01\", \"cache-02\"\n        }\n\n        log.info(\"\ud83d\ude80 Starting parallel deployment to \" .. #servers .. \" servers...\")\n\n        -- Criar handles ass\u00edncronos para cada servidor\n        local handles = {}\n        for _, server in ipairs(servers) do\n            local handle = goroutine.async(function()\n                log.info(\"\ud83d\udce6 Deploying to \" .. server)\n\n                -- Simula deploy (upload, install, restart, health check)\n                goroutine.sleep(500)\n\n                return server, \"deployed\", os.date(\"%H:%M:%S\")\n            end)\n\n            table.insert(handles, handle)\n        end\n\n        -- Aguardar TODOS os deploys completarem\n        local results = goroutine.await_all(handles)\n\n        -- Processar resultados\n        log.info(\"\ud83d\udcca All \" .. #results .. \" servers deployed successfully!\")\n\n        return true, \"Parallel deployment completed in ~3 seconds!\"\n    end)\n    :timeout(\"2m\")\n    :build()\n\nworkflow.define(\"parallel_deployment\")\n    :description(\"Deploy to multiple servers in parallel\")\n    :tasks({ deploy_task })\n</code></pre> <p>Performance Real:</p> Opera\u00e7\u00e3o Sequencial Com Goroutines Ganho \ud83d\ude80 Deploy 10 servidores 5 minutos 30 segundos 10x \u26a1 \ud83c\udfe5 Health check 20 servi\u00e7os 1 minuto 5 segundos 12x \u26a1 \ud83d\udcca Processar 1000 itens 10 segundos 1 segundo 10x \u26a1 <p>\ud83d\udcd6 Documenta\u00e7\u00e3o Completa de Goroutines | \ud83e\uddea Mais Exemplos</p>"},{"location":"#core-features","title":"\ud83c\udf1f Core Features","text":""},{"location":"#stack-management","title":"\ud83d\uddc2\ufe0f Stack Management","text":"<p>Pulumi-style stack management with persistent state, exported outputs, and execution history tracking.</p> <ul> <li>\ud83d\udd12 Persistent stack state with SQLite in <code>/etc/sloth-runner/</code></li> <li>\ud83d\udcca Exported outputs capture from pipeline with JSON support</li> <li>\ud83d\udcc8 Complete execution history tracking with duration metrics</li> <li>\ud83c\udfaf Environment isolation by stack name</li> <li>\ud83c\udd94 Unique task and group IDs for enhanced traceability</li> <li>\ud83d\udccb Task listing with detailed relationship view</li> <li>\ud83d\uddd1\ufe0f Stack deletion with confirmation prompts</li> <li>\ud83c\udfa8 Multiple output formats: basic, enhanced, modern, json</li> </ul> <pre><code># Create and run a stack with enhanced output\nsloth-runner stack new my-production-stack -d \"Production deployment\" -f pipeline.sloth\nsloth-runner run my-production-stack -f pipeline.sloth --output enhanced\n\n# Run with JSON output for CI/CD integration\nsloth-runner run my-stack -f workflow.sloth --output json\n\n# List all stacks with status and metrics\nsloth-runner stack list\n\n# Show stack details with outputs and execution history\nsloth-runner stack show my-production-stack\n\n# List tasks with unique IDs and dependencies\nsloth-runner list -f pipeline.sloth\n\n# Delete stacks with confirmation\nsloth-runner stack delete old-stack\nsloth-runner stack delete old-stack --force  # skip confirmation\n</code></pre>"},{"location":"#distributed-by-design","title":"\ud83c\udf10 Distributed by Design","text":"<p>Native master-agent architecture with real-time streaming, automatic failover, and intelligent load balancing.</p> <ul> <li>\ud83d\udd17 gRPC-based agent communication</li> <li>\ud83d\udce1 Real-time command streaming</li> <li>\ud83d\udd04 Automatic failover and recovery</li> <li>\u2696\ufe0f Intelligent load balancing</li> <li>\ud83c\udfd7\ufe0f Scalable architecture for enterprise workloads</li> <li>\ud83d\udd12 TLS-secured communication</li> </ul> <pre><code># Start master server\nsloth-runner master --port 50053 --daemon\n\n# Start and manage agents\nsloth-runner agent start --name worker-01 --master localhost:50053\nsloth-runner agent list --master localhost:50053\nsloth-runner agent run worker-01 \"docker ps\" --master localhost:50053\n</code></pre>"},{"location":"#web-dashboard-ui","title":"\ud83c\udfa8 Web Dashboard &amp; UI","text":"<p>Modern web-based dashboard for comprehensive workflow management and monitoring.</p> <ul> <li>\ud83d\udcca Real-time monitoring dashboard</li> <li>\ud83c\udfaf Agent management interface</li> <li>\ud83d\udcc8 Performance metrics visualization</li> <li>\ud83d\udd0d Centralized logging system</li> <li>\ud83d\udc65 Team collaboration features</li> </ul> <pre><code># Start web dashboard\nsloth-runner ui --port 8080\n# Access at http://localhost:8080\n\n# Run as daemon\nsloth-runner ui --daemon --port 8080\n</code></pre>"},{"location":"#aiml-integration","title":"\ud83e\udd16 AI/ML Integration","text":"<p>Built-in artificial intelligence capabilities for smart automation and decision making.</p> <ul> <li>\ud83e\udde0 OpenAI integration for text processing</li> <li>\ud83e\udd16 Automated decision making</li> <li>\ud83d\udcdd Code generation assistance</li> <li>\ud83d\udd0d Intelligent analysis of workflows</li> <li>\ud83c\udfaf Smart recommendations</li> </ul> <pre><code>-- AI-powered workflow optimization\nlocal ai = require(\"ai\")\nlocal result = ai.openai.complete(\"Generate Docker build script\")\nlocal decision = ai.decide({\n    cpu_usage = metrics.cpu,\n    memory_usage = metrics.memory\n})\n</code></pre>"},{"location":"#advanced-scheduling","title":"\u23f0 Advanced Scheduling","text":"<p>Enterprise-grade task scheduling with cron-style syntax and background execution.</p> <ul> <li>\u23f0 Cron-style scheduling syntax</li> <li>\ud83d\udd04 Background execution daemon</li> <li>\ud83d\udcc5 Recurring tasks management</li> <li>\ud83c\udfaf Event-driven triggers</li> <li>\ud83d\udcca Schedule monitoring</li> </ul> <pre><code># Enable scheduler\nsloth-runner scheduler enable --config scheduler.yaml\n\n# List scheduled tasks\nsloth-runner scheduler list\n\n# Delete a scheduled task\nsloth-runner scheduler delete backup-task\n</code></pre>"},{"location":"#advanced-state-management","title":"\ud83d\udcbe Advanced State Management","text":"<p>Built-in SQLite-based persistent state with atomic operations, distributed locks, and TTL support.</p> <ul> <li>\ud83d\udd12 Distributed locking mechanisms</li> <li>\u269b\ufe0f Atomic operations support</li> <li>\u23f0 TTL-based data expiration</li> <li>\ud83d\udd0d Pattern-based queries</li> <li>\ud83d\udd04 State replication across agents</li> </ul> <pre><code>-- Advanced state operations\nlocal state = require(\"state\")\nstate.lock(\"deploy-resource\", 30)  -- 30 second lock\nstate.set(\"config\", data, 3600)    -- 1 hour TTL\nstate.atomic_increment(\"build-count\")\n</code></pre>"},{"location":"#project-scaffolding","title":"\ud83c\udfd7\ufe0f Project Scaffolding","text":"<p>Template-based project initialization similar to Pulumi new or Terraform init.</p> <ul> <li>\ud83d\udccb Multiple templates (basic, cicd, infrastructure, microservices, data-pipeline)</li> <li>\ud83c\udfaf Interactive mode with guided setup</li> <li>\ud83d\udcc1 Complete project structure generation</li> <li>\ud83d\udd27 Configuration files auto-generated</li> </ul> <pre><code># List available templates\nsloth-runner workflow list-templates\n\n# Create new project from template\nsloth-runner workflow init my-app --template cicd\n\n# Interactive mode\nsloth-runner workflow init my-app --interactive\n</code></pre>"},{"location":"#multi-cloud-excellence","title":"\u2601\ufe0f Multi-Cloud Excellence","text":"<p>Comprehensive cloud provider support with advanced automation capabilities.</p> <ul> <li>\u2601\ufe0f AWS, GCP, Azure native integration</li> <li>\ud83d\ude80 Terraform &amp; Pulumi advanced support</li> <li>\ud83d\udd27 Infrastructure as Code automation</li> <li>\ud83d\udd12 Security &amp; compliance built-in</li> <li>\ud83d\udcca Cost optimization tools</li> </ul>"},{"location":"#enterprise-security","title":"\ud83d\udd12 Enterprise Security","text":"<p>Built-in security features for enterprise compliance and data protection.</p> <ul> <li>\ud83d\udd10 Certificate management</li> <li>\ud83d\udd12 Secret encryption and storage</li> <li>\ud83d\udee1\ufe0f Vulnerability scanning</li> <li>\ud83d\udccb Compliance checking</li> <li>\ud83d\udcdd Audit logging system</li> </ul>"},{"location":"#enhanced-output-system","title":"\ud83d\udcca Enhanced Output System","text":"<p>Pulumi-style rich output formatting with configurable styles, progress indicators, and structured displays.</p> <ul> <li>\ud83c\udfa8 Multiple output styles (basic, enhanced, rich, modern, json)</li> <li>\ud83d\udcc8 Real-time progress indicators</li> <li>\ud83c\udfaf Structured output sections</li> <li>\ud83c\udf08 Rich color formatting</li> <li>\ud83d\udcca Metrics visualization</li> <li>\ud83d\udd27 JSON output for automation and CI/CD integration</li> </ul> <pre><code># Enhanced Pulumi-style output\nsloth-runner run my-stack -f workflow.sloth --output enhanced\n\n# JSON output for automation\nsloth-runner run my-stack -f workflow.sloth --output json\n\n# List tasks with unique IDs\nsloth-runner list -f workflow.sloth\n</code></pre>"},{"location":"#rich-module-ecosystem","title":"\ud83d\udd27 Rich Module Ecosystem","text":"<p>Extensive collection of pre-built modules for common automation tasks.</p> <ul> <li>\ud83c\udf10 Network &amp; HTTP operations</li> <li>\ud83d\udcbd Database integrations (MySQL, PostgreSQL, MongoDB, Redis)</li> <li>\ud83d\udce7 Notification systems (Email, Slack, Discord)</li> <li>\ud83d\udc0d Python/R integration with virtual environments</li> <li>\ud83d\udd17 GitOps advanced workflows</li> <li>\ud83e\uddea Testing frameworks and quality assurance</li> </ul>"},{"location":"#quick-start-examples","title":"\ud83d\ude80 Quick Start Examples","text":""},{"location":"#stack-management-with-pulumi-style-output","title":"\ud83d\uddc2\ufe0f Stack Management with Pulumi-Style Output","text":"<pre><code># Create a new project from template\nsloth-runner workflow init my-cicd --template cicd\n\n# Deploy to development environment\nsloth-runner run dev-app -f my-cicd.sloth --output enhanced\n\n# Deploy to production with stack persistence\nsloth-runner run prod-app -f my-cicd.sloth -o rich\n\n# Check deployment status and outputs\nsloth-runner stack show prod-app\n</code></pre>"},{"location":"#stack-with-exported-outputs-json-output","title":"\ud83d\udcca Stack with Exported Outputs &amp; JSON Output","text":"<pre><code>local deploy_task = task(\"deploy\")\n    :command(function(params, deps)\n        -- Deploy application\n        local result = exec.run(\"kubectl apply -f deployment.yaml\")\n\n        -- Export important outputs to stack\n        runner.Export({\n            app_url = \"https://myapp.example.com\",\n            version = \"1.2.3\",\n            environment = \"production\",\n            deployed_at = os.date(),\n            health_endpoint = \"https://myapp.example.com/health\"\n        })\n\n        return true, result.stdout, { status = \"deployed\" }\n    end)\n    :build()\n\nworkflow.define(\"production_deployment\", {\n    tasks = { deploy_task }\n})\n</code></pre> <p>Run with JSON output for automation: <pre><code># Get structured JSON output for CI/CD integration\nsloth-runner run prod-deployment -f deploy.sloth --output json\n\n# Example JSON output:\n{\n  \"status\": \"success\",\n  \"duration\": \"5.192ms\",\n  \"stack\": {\n    \"id\": \"abc123...\",\n    \"name\": \"prod-deployment\"\n  },\n  \"tasks\": {\n    \"deploy\": {\n      \"status\": \"Success\",\n      \"duration\": \"4.120ms\"\n    }\n  },\n  \"outputs\": {\n    \"app_url\": \"https://myapp.example.com\",\n    \"version\": \"1.2.3\",\n    \"environment\": \"production\"\n  },\n  \"workflow\": \"production_deployment\",\n  \"execution_time\": 1759237365\n}\n</code></pre></p>"},{"location":"#cli-commands-overview","title":"\ud83d\udcca CLI Commands Overview","text":""},{"location":"#stack-management-new","title":"Stack Management (NEW!)","text":"<pre><code># Execute with stack persistence (NEW SYNTAX)\nsloth-runner run {stack-name} --file workflow.sloth\n\n# Enhanced output styles\nsloth-runner run {stack-name} --file workflow.sloth --output enhanced\nsloth-runner run {stack-name} --file workflow.sloth --output json\n\n# Manage stacks\nsloth-runner stack list                    # List all stacks\nsloth-runner stack show production-app     # Show stack details with outputs\nsloth-runner stack delete old-env          # Delete stack\n\n# List tasks with unique IDs\nsloth-runner list --file workflow.sloth      # Show tasks and groups with IDs\n</code></pre>"},{"location":"#project-scaffolding_1","title":"Project Scaffolding","text":"<pre><code># Create new projects\nsloth-runner workflow init my-app --template cicd\nsloth-runner workflow list-templates       # Available templates\n</code></pre>"},{"location":"#distributed-agents-web-ui","title":"Distributed Agents &amp; Web UI","text":"<pre><code># Start master server\nsloth-runner master --port 50053 --daemon\n\n# Start distributed agents\nsloth-runner agent start --name web-builder --master localhost:50053\nsloth-runner agent start --name db-manager --master localhost:50053\n\n# Start web dashboard\nsloth-runner ui --port 8080 --daemon\n# Access dashboard at http://localhost:8080\n\n# List connected agents\nsloth-runner agent list --master localhost:50053\n\n# Execute commands on specific agents\nsloth-runner agent run web-builder \"docker ps\" --master localhost:50053\n</code></pre>"},{"location":"#advanced-scheduling_1","title":"Advanced Scheduling","text":"<pre><code># Enable background scheduler\nsloth-runner scheduler enable --config scheduler.yaml\n\n# List and manage scheduled tasks\nsloth-runner scheduler list\nsloth-runner scheduler delete backup-task\n</code></pre>"},{"location":"#distributed-deployment-with-monitoring","title":"\ud83d\udcca Distributed Deployment with Monitoring","text":"<pre><code>local monitoring = require(\"monitoring\")\nlocal state = require(\"state\")\n\n-- Production deployment with comprehensive monitoring\nlocal deploy_task = task(\"production_deployment\")\n    :command(function(params, deps)\n        -- Track deployment metrics\n        monitoring.counter(\"deployments_started\", 1)\n\n        -- Use state for coordination\n        local deploy_id = state.increment(\"deployment_counter\", 1)\n        state.set(\"current_deployment\", deploy_id)\n\n        -- Execute deployment\n        local result = exec.run(\"kubectl apply -f production.yaml\")\n\n        if result.success then\n            monitoring.gauge(\"deployment_status\", 1)\n            state.set(\"last_successful_deploy\", os.time())\n            log.info(\"\u2705 Deployment \" .. deploy_id .. \" completed successfully\")\n        else\n            monitoring.gauge(\"deployment_status\", 0)\n            monitoring.counter(\"deployments_failed\", 1)\n            log.error(\"\u274c Deployment \" .. deploy_id .. \" failed: \" .. result.stderr)\n        end\n\n        return result\n    end)\n    :build()\n</code></pre>"},{"location":"#multi-agent-distributed-execution","title":"\ud83c\udf10 Multi-Agent Distributed Execution","text":"<pre><code>local distributed = require(\"distributed\")\n\n-- Execute tasks across multiple agents\nworkflow.define(\"distributed_pipeline\", {\n    tasks = {\n        task(\"build_frontend\")\n            :agent(\"build-agent-1\")\n            :command(\"npm run build\")\n            :build(),\n\n        task(\"build_backend\")\n            :agent(\"build-agent-2\")\n            :command(\"go build -o app ./cmd/server\")\n            :build(),\n\n        task(\"run_tests\")\n            :agent(\"test-agent\")\n            :depends_on({\"build_frontend\", \"build_backend\"})\n            :command(\"npm test &amp;&amp; go test ./...\")\n            :build(),\n\n        task(\"deploy\")\n            :agent(\"deploy-agent\")\n            :depends_on({\"run_tests\"})\n            :command(\"./deploy.sh production\")\n            :build()\n    }\n})\n</code></pre>"},{"location":"#advanced-state-management_1","title":"\ud83d\udcbe Advanced State Management","text":"<pre><code>local state = require(\"state\")\n\n-- Complex state operations with locking\nlocal update_config = task(\"update_configuration\")\n    :command(function(params, deps)\n        -- Critical section with automatic locking\n        return state.with_lock(\"config_update\", function()\n            local current_version = state.get(\"config_version\") or 0\n            local new_version = current_version + 1\n\n            -- Atomic configuration update\n            local success = state.compare_and_swap(\"config_version\", current_version, new_version)\n\n            if success then\n                state.set(\"config_data\", params.new_config)\n                state.set(\"config_updated_at\", os.time())\n                log.info(\"Configuration updated to version \" .. new_version)\n                return { version = new_version, success = true }\n            else\n                log.error(\"Configuration update failed - version mismatch\")\n                return { success = false, error = \"version_mismatch\" }\n            end\n        end)\n    end)\n    :build()\n</code></pre>"},{"location":"#cicd-pipeline-with-gitops","title":"\ud83d\udd04 CI/CD Pipeline with GitOps","text":"<pre><code>local git = require(\"git\")\nlocal docker = require(\"docker\")\nlocal kubernetes = require(\"kubernetes\")\n\n-- Complete CI/CD pipeline\nworkflow.define(\"gitops_pipeline\", {\n    on_git_push = true,\n\n    tasks = {\n        task(\"checkout_code\")\n            :command(function()\n                return git.clone(params.repository, \"/tmp/build\")\n            end)\n            :build(),\n\n        task(\"run_tests\")\n            :depends_on({\"checkout_code\"})\n            :command(\"cd /tmp/build &amp;&amp; npm test\")\n            :retry_count(3)\n            :build(),\n\n        task(\"build_image\")\n            :depends_on({\"run_tests\"})\n            :command(function()\n                return docker.build({\n                    path = \"/tmp/build\",\n                    tag = \"myapp:\" .. params.git_sha,\n                    push = true\n                })\n            end)\n            :build(),\n\n        task(\"deploy_staging\")\n            :depends_on({\"build_image\"})\n            :command(function()\n                return kubernetes.apply_manifest({\n                    file = \"/tmp/build/k8s/staging.yaml\",\n                    namespace = \"staging\",\n                    image = \"myapp:\" .. params.git_sha\n                })\n            end)\n            :build(),\n\n        task(\"integration_tests\")\n            :depends_on({\"deploy_staging\"})\n            :command(\"./run-integration-tests.sh staging\")\n            :build(),\n\n        task(\"deploy_production\")\n            :depends_on({\"integration_tests\"})\n            :condition(function() return params.branch == \"main\" end)\n            :command(function()\n                return kubernetes.apply_manifest({\n                    file = \"/tmp/build/k8s/production.yaml\",\n                    namespace = \"production\",\n                    image = \"myapp:\" .. params.git_sha\n                })\n            end)\n            :build()\n    }\n})\n</code></pre>"},{"location":"#module-reference","title":"\ud83d\udcca Module Reference","text":"\ud83d\udd27 Core Modules <ul> <li><code>exec</code> - Command execution with streaming</li> <li><code>fs</code> - File system operations</li> <li><code>net</code> - Network utilities</li> <li><code>data</code> - Data processing utilities</li> <li><code>log</code> - Structured logging</li> </ul> \ud83d\udcbe State &amp; Monitoring <ul> <li><code>state</code> - Persistent state management</li> <li><code>metrics</code> - Monitoring and metrics</li> <li><code>monitoring</code> - System monitoring</li> <li><code>health</code> - Health check utilities</li> </ul> \u2601\ufe0f Cloud Providers <ul> <li><code>aws</code> - Amazon Web Services</li> <li><code>gcp</code> - Google Cloud Platform</li> <li><code>azure</code> - Microsoft Azure</li> <li><code>digitalocean</code> - DigitalOcean</li> </ul> \ud83d\udee0\ufe0f Infrastructure <ul> <li><code>kubernetes</code> - Kubernetes orchestration</li> <li><code>docker</code> - Container management</li> <li><code>terraform</code> - Infrastructure as Code</li> <li><code>pulumi</code> - Modern IaC</li> <li><code>salt</code> - Configuration management</li> </ul> \ud83d\udd17 Integrations <ul> <li><code>git</code> - Git operations</li> <li><code>python</code> - Python script execution</li> <li><code>notification</code> - Alert notifications</li> <li><code>crypto</code> - Cryptographic operations</li> </ul>"},{"location":"#why-choose-sloth-runner","title":"\ud83c\udfaf Why Choose Sloth Runner?","text":"\ud83c\udfe2 Enterprise Ready <ul> <li>\ud83c\udf0d Distributed execution across multiple agents</li> <li>\ud83d\udd12 Production-grade security with mTLS</li> <li>\ud83d\udcca Comprehensive monitoring and alerting</li> <li>\ud83d\udcbe Reliable state management with persistence</li> <li>\ud83d\udd04 Circuit breakers and fault tolerance</li> </ul> \ud83d\udc69\u200d\ud83d\udcbb Developer Experience <ul> <li>\ud83e\uddf0 Rich Lua-based DSL for complex workflows</li> <li>\ud83d\udce1 Real-time command output streaming</li> <li>\ud83d\udd04 Interactive REPL for debugging</li> <li>\ud83d\udcda Comprehensive documentation</li> <li>\ud83c\udfaf Intuitive task dependency management</li> </ul> \ud83d\ude80 Performance &amp; Reliability <ul> <li>\u26a1 High-performance parallel execution</li> <li>\ud83d\udd04 Automatic retry and error handling</li> <li>\ud83d\udcc8 Built-in performance monitoring</li> <li>\ud83c\udf9b\ufe0f Resource optimization and throttling</li> <li>\ud83d\udee1\ufe0f Robust error recovery mechanisms</li> </ul> \ud83d\udd27 Operational Excellence <ul> <li>\ud83d\udcca Prometheus-compatible metrics</li> <li>\ud83d\udd0d Distributed tracing support</li> <li>\ud83d\udccb Structured audit logging</li> <li>\ud83d\udea8 Flexible alerting mechanisms</li> <li>\ud83d\udd04 GitOps workflow integration</li> </ul>"},{"location":"#get-started-in-minutes","title":"\ud83d\ude80 Get Started in Minutes","text":""},{"location":"#installation","title":"\ud83d\udce6 Installation","text":"Quick InstallLinuxmacOSFrom Source <p>One-line installer for Linux/macOS:</p> <pre><code>curl -sSL https://raw.githubusercontent.com/chalkan3-sloth/sloth-runner/main/install.sh | bash\n</code></pre> <p>Download and install for Linux AMD64:</p> <pre><code>wget https://github.com/chalkan3-sloth/sloth-runner/releases/latest/download/sloth-runner-linux-amd64.tar.gz\ntar xzf sloth-runner-linux-amd64.tar.gz\nsudo mv sloth-runner /usr/local/bin/\nchmod +x /usr/local/bin/sloth-runner\n</code></pre> <p>Download and install for macOS (Apple Silicon):</p> <pre><code>wget https://github.com/chalkan3-sloth/sloth-runner/releases/latest/download/sloth-runner-darwin-arm64.tar.gz\ntar xzf sloth-runner-darwin-arm64.tar.gz\nsudo mv sloth-runner /usr/local/bin/\nchmod +x /usr/local/bin/sloth-runner\n</code></pre> <p>Build from source with Go:</p> <pre><code>git clone https://github.com/chalkan3-sloth/sloth-runner.git\ncd sloth-runner\ngo build -o sloth-runner ./cmd/sloth-runner\nsudo mv sloth-runner /usr/local/bin/\n</code></pre>"},{"location":"#create-your-first-workflow","title":"\u270d\ufe0f Create Your First Workflow","text":"<p>Create a file called <code>hello.sloth</code>:</p> <pre><code>task(\"hello\")\n  :description(\"My first Sloth Runner task\")\n  :command(function() \n    log.info(\"\ud83e\udda5 Hello from Sloth Runner!\")\n    return true \n  end)\n  :build()\n\nworkflow.define(\"greeting\")\n  :description(\"Simple greeting workflow\")\n  :tasks({\"hello\"})\n</code></pre>"},{"location":"#run-your-workflow","title":"\u25b6\ufe0f Run Your Workflow","text":"BasicModernRichEnhancedJSON <p>Simple text output:</p> <pre><code>sloth-runner run -f hello.sloth\n</code></pre> <p>Modern UI with animations:</p> <pre><code>sloth-runner run -f hello.sloth -o modern\n</code></pre> <p>Rich progress bars and formatting:</p> <pre><code>sloth-runner run -f hello.sloth -o rich\n</code></pre> <p>Enhanced output with colors:</p> <pre><code>sloth-runner run -f hello.sloth -o enhanced\n</code></pre> <p>JSON output for CI/CD pipelines:</p> <pre><code>sloth-runner run -f hello.sloth -o json\n</code></pre>"},{"location":"#learn-more","title":"\ud83d\udcda Learn More","text":"<ul> <li> <p> Quick Tutorial</p> <p>Get up and running with practical examples in 5 minutes</p> <p> Start Tutorial</p> </li> <li> <p> Advanced Examples</p> <p>Production-ready workflows and real-world use cases</p> <p> View Examples</p> </li> <li> <p> Core Concepts</p> <p>Deep dive into Sloth Runner's architecture and features</p> <p> Learn Concepts</p> </li> <li> <p> API Reference</p> <p>Complete documentation of all modules and functions</p> <p> Browse API</p> </li> <li> <p> Modern DSL</p> <p>Learn the modern task definition syntax</p> <p> DSL Guide</p> </li> <li> <p> GitHub Repository</p> <p>Source code, issues, and contributions</p> <p> View on GitHub</p> </li> </ul>"},{"location":"#state-management-persistence","title":"\ud83d\udcbe State Management &amp; Persistence","text":"<p>Production Ready</p> <p>SQLite-based persistent state with enterprise features</p> <p>Features:</p> <ul> <li>\u2705 Atomic operations: increment, compare-and-swap, append</li> <li>\u2705 Distributed locks with automatic timeout handling  </li> <li>\u2705 TTL support for automatic data expiration</li> <li>\u2705 Pattern matching for bulk operations</li> <li>\u2705 WAL mode for high performance</li> </ul> <p>Persistent State Example</p> <pre><code>-- Set and increment state\nstate.set(\"deployment_version\", \"v1.2.3\")\nlocal counter = state.increment(\"api_calls\", 1)\n\n-- Critical section with automatic locking\nstate.with_lock(\"deployment\", function()\n    local success = deploy_application()\n    state.set(\"last_deploy\", os.time())\n    return success\nend)\n</code></pre>"},{"location":"#metrics-monitoring","title":"\ud83d\udcca Metrics &amp; Monitoring","text":"<p>Production Ready</p> <p>Comprehensive monitoring with Prometheus integration</p> <p>Capabilities:</p> <ul> <li>\ud83d\udcc8 System metrics: CPU, memory, disk, network monitoring</li> <li>\ud83d\udcca Custom metrics: gauges, counters, histograms, timers</li> <li>\ud83c\udfe5 Health checks with configurable thresholds</li> <li>\ud83d\udd0c Prometheus endpoints for external monitoring</li> <li>\ud83d\udea8 Real-time alerting based on conditions</li> </ul> <p>Monitoring Example</p> <pre><code>-- System and custom metrics\nlocal cpu = metrics.system_cpu()\nmetrics.gauge(\"app_performance\", response_time)\nmetrics.counter(\"requests_total\", 1)\n\n-- Alerting\nif cpu &gt; 80 then\n    metrics.alert(\"high_cpu\", {\n        level = \"warning\",\n        message = \"CPU usage critical: \" .. cpu .. \"%\"\n    })\nend\n</code></pre>"},{"location":"#distributed-agent-system","title":"\ud83c\udf10 Distributed Agent System","text":"<p>Production Ready</p> <p>Master-agent architecture for distributed execution</p> <p>Features:</p> <ul> <li>\ud83d\udd04 Master-agent architecture with gRPC communication</li> <li>\ud83d\udce1 Real-time streaming of command output</li> <li>\ud83d\udd0d Automatic agent registration and health monitoring</li> <li>\u2696\ufe0f Load balancing across available agents</li> <li>\ud83d\udd12 TLS encryption for secure communication</li> </ul> <p>Distributed Execution</p> Start MasterDeploy AgentExecute Task <pre><code>sloth-runner master --port 50053\n</code></pre> <pre><code>sloth-runner agent start \\\n  --name agent-1 \\\n  --master master:50053\n</code></pre> <pre><code>sloth-runner agent run agent-1 \"deploy-script.sh\"\n</code></pre>"},{"location":"#documentation-by-language","title":"\ud83d\udcda Documentation by Language","text":"<ul> <li> <p> English</p> <p>Complete documentation in English</p> <ul> <li>Getting Started</li> <li>Core Concepts</li> <li>Advanced Features</li> <li>Agent Improvements</li> </ul> </li> <li> <p> Portugu\u00eas</p> <p>Documenta\u00e7\u00e3o completa em Portugu\u00eas</p> <ul> <li>Primeiros Passos</li> <li>Conceitos Fundamentais</li> <li>Recursos Avan\u00e7ados</li> <li>Melhorias dos Agentes</li> </ul> </li> <li> <p> \u4e2d\u6587</p> <p>\u5b8c\u6574\u7684\u4e2d\u6587\u6587\u6863</p> <ul> <li>\u5165\u95e8\u6307\u5357</li> <li>\u6838\u5fc3\u6982\u5ff5</li> <li>\u9ad8\u7ea7\u529f\u80fd</li> <li>\u4ee3\u7406\u6539\u8fdb</li> </ul> </li> </ul>"},{"location":"#module-reference_1","title":"\ud83d\udd27 Module Reference","text":""},{"location":"#built-in-modules","title":"Built-in Modules","text":"<ul> <li> <p> State</p> <p>Persistent state management</p> <p> Documentation</p> </li> <li> <p> Metrics</p> <p>Monitoring and observability</p> <p> Documentation</p> </li> <li> <p> Exec</p> <p>Command execution</p> <p> Documentation</p> </li> <li> <p> FS</p> <p>File system operations</p> <p> Documentation</p> </li> <li> <p> Net</p> <p>Network operations</p> <p> Documentation</p> </li> <li> <p> Data</p> <p>Data processing utilities</p> <p> Documentation</p> </li> <li> <p> Log</p> <p>Structured logging</p> <p> Documentation</p> </li> <li> <p> Pkg</p> <p>Package management</p> <p> Documentation</p> </li> </ul>"},{"location":"#cloud-provider-modules","title":"Cloud Provider Modules","text":"<ul> <li> <p> AWS</p> <p>Amazon Web Services integration</p> <p> Documentation</p> </li> <li> <p> GCP</p> <p>Google Cloud Platform</p> <p> Documentation</p> </li> <li> <p> Azure</p> <p>Microsoft Azure</p> <p> Documentation</p> </li> <li> <p> DigitalOcean</p> <p>DigitalOcean cloud</p> <p> Documentation</p> </li> </ul>"},{"location":"#infrastructure-modules","title":"Infrastructure Modules","text":"<ul> <li> <p> Docker</p> <p>Container management</p> <p> Documentation</p> </li> <li> <p> Pulumi</p> <p>Modern Infrastructure as Code</p> <p> Documentation</p> </li> <li> <p> Terraform</p> <p>Infrastructure provisioning</p> <p> Documentation</p> </li> <li> <p> Systemd</p> <p>Service management</p> <p> Documentation</p> </li> </ul>"},{"location":"#get-started-today","title":"\ud83d\ude80 Get Started Today","text":"<p>Ready to streamline your automation? Install Sloth Runner now!</p> Quick StartWith DockerManual Install <pre><code># One-line install\ncurl -sSL https://raw.githubusercontent.com/chalkan3-sloth/sloth-runner/main/install.sh | bash\n\n# Create your first workflow\ncat &gt; hello.sloth &lt;&lt; 'EOF'\ntask(\"greet\")\n  :command(function() \n    log.info(\"Hello World! \ud83d\ude80\") \n    return true \n  end)\n  :build()\n\nworkflow.define(\"hello\")\n  :tasks({\"greet\"})\nEOF\n\n# Run it!\nsloth-runner run -f hello.sloth\n</code></pre> <pre><code># Pull the image\ndocker pull ghcr.io/chalkan3-sloth/sloth-runner:latest\n\n# Run your workflow\ndocker run -v $(pwd):/workspace \\\n  ghcr.io/chalkan3-sloth/sloth-runner:latest \\\n  run -f /workspace/hello.sloth\n</code></pre> <pre><code># Download for your platform\nwget https://github.com/chalkan3-sloth/sloth-runner/releases/latest/download/sloth-runner-linux-amd64.tar.gz\ntar xzf sloth-runner-linux-amd64.tar.gz\nsudo mv sloth-runner /usr/local/bin/\nchmod +x /usr/local/bin/sloth-runner\n</code></pre>"},{"location":"#community-support","title":"\ud83e\udd1d Community &amp; Support","text":"<ul> <li> <p> GitHub</p> <p>Source code, issues, and contributions</p> <p> Visit Repository</p> </li> <li> <p> Discussions</p> <p>Community Q&amp;A and feature discussions</p> <p> Join Discussion</p> </li> <li> <p> Issues</p> <p>Bug reports and feature requests</p> <p> Report Issue</p> </li> <li> <p> Enterprise</p> <p>Commercial support and services</p> <p> Contact Us</p> </li> </ul> <p>\ud83e\udda5 Ready to streamline your automation?</p> <p>Join developers using Sloth Runner for reliable, scalable task orchestration.</p> <p>\ud83d\ude80 Start Building Today \ud83d\udcda Read Documentation</p>"},{"location":"BOOTSTRAP/","title":"Agent Bootstrap","text":"<p>\ud83d\udcda Documentation</p> <p>For Agent Bootstrap and setup, please visit:</p> <ul> <li>\ud83c\uddfa\ud83c\uddf8 Master-Agent Architecture (English)</li> <li>\ud83c\uddfa\ud83c\uddf8 Agent Improvements (English)</li> <li>\ud83c\uddfa\ud83c\uddf8 Quick Start (English)</li> </ul> <p>Redirecting to Agent documentation...</p> <p>If you are not redirected automatically, click here.</p>"},{"location":"EXAMPLES/","title":"Examples","text":"<p>\ud83d\udcda Examples &amp; Tutorials</p> <p>For comprehensive examples and tutorials, please visit:</p> <ul> <li>\ud83c\uddfa\ud83c\uddf8 English Examples</li> <li>\ud83c\udde7\ud83c\uddf7 Exemplos em Portugu\u00eas</li> <li>\ud83c\udde8\ud83c\uddf3 \u4e2d\u6587\u793a\u4f8b</li> </ul> <p>Redirecting to English examples...</p> <p>If you are not redirected automatically, click here.</p>"},{"location":"LUA_API/","title":"Lua API Reference","text":"<p>\ud83d\udcda Documentation</p> <p>For Lua API documentation, please visit:</p> <ul> <li>\ud83c\uddfa\ud83c\uddf8 Core Concepts (English)</li> <li>\ud83c\uddfa\ud83c\uddf8 Plugin Development (English)</li> <li>\ud83c\udde7\ud83c\uddf7 Desenvolvimento de Plugins (Portugu\u00eas)</li> </ul> <p>Redirecting to Plugin Development documentation...</p> <p>If you are not redirected automatically, click here.</p>"},{"location":"MODULE_API_CONVENTION/","title":"Module API Convention - Table-Based Parameters","text":""},{"location":"MODULE_API_CONVENTION/#overview","title":"Overview","text":"<p>All Sloth Runner modules now use table-based named parameters instead of positional parameters. This provides better readability, extensibility, and IDE support.</p>"},{"location":"MODULE_API_CONVENTION/#design-principles","title":"Design Principles","text":""},{"location":"MODULE_API_CONVENTION/#1-all-parameters-are-named","title":"1. All Parameters Are Named","text":"<p>Bad (Old Style): <pre><code>pkg.install(\"vim\")\npkg.search(\"python\")\n</code></pre></p> <p>Good (New Style): <pre><code>pkg.install({packages = \"vim\"})\npkg.search({query = \"python\"})\n</code></pre></p>"},{"location":"MODULE_API_CONVENTION/#2-empty-tables-for-zero-parameter-functions","title":"2. Empty Tables for Zero-Parameter Functions","text":"<p>Even functions without parameters require an empty table for consistency:</p> <pre><code>pkg.update({})\npkg.upgrade({})\npkg.get_manager({})\n</code></pre>"},{"location":"MODULE_API_CONVENTION/#3-flexible-value-types","title":"3. Flexible Value Types","text":"<p>Parameters should accept both single values and tables:</p> <pre><code>-- Single package\npkg.install({packages = \"vim\"})\n\n-- Multiple packages\npkg.install({packages = {\"vim\", \"git\", \"curl\"}})\n</code></pre>"},{"location":"MODULE_API_CONVENTION/#4-optional-parameters-have-defaults","title":"4. Optional Parameters Have Defaults","text":"<pre><code>-- With default timeout\nssh.connect({\n    host = \"server.com\",\n    user = \"admin\"\n})\n\n-- With custom timeout\nssh.connect({\n    host = \"server.com\",\n    user = \"admin\",\n    timeout = 60\n})\n</code></pre>"},{"location":"MODULE_API_CONVENTION/#implementation-pattern","title":"Implementation Pattern","text":""},{"location":"MODULE_API_CONVENTION/#go-implementation","title":"Go Implementation","text":"<pre><code>func (m *Module) functionName(L *lua.LState) int {\n    // Always expect a table as first parameter\n    opts := L.CheckTable(1)\n\n    // Extract required parameters\n    requiredParam := getTableString(opts, \"param_name\", \"\")\n    if requiredParam == \"\" {\n        L.Push(lua.LFalse)\n        L.Push(lua.LString(\"param_name parameter is required\"))\n        return 2\n    }\n\n    // Extract optional parameters with defaults\n    optionalParam := getTableString(opts, \"optional\", \"default\")\n\n    // Implementation...\n\n    return 2 // Return success/failure and result\n}\n</code></pre>"},{"location":"MODULE_API_CONVENTION/#helper-functions","title":"Helper Functions","text":"<pre><code>// Helper to extract string from table\nfunc getTableString(tbl *lua.LTable, key string, def string) string {\n    val := tbl.RawGetString(key)\n    if val.Type() == lua.LTString {\n        return val.String()\n    }\n    return def\n}\n\n// Helper to extract int from table\nfunc getTableInt(tbl *lua.LTable, key string, def int) int {\n    val := tbl.RawGetString(key)\n    if lv, ok := val.(lua.LNumber); ok {\n        return int(lv)\n    }\n    return def\n}\n\n// Helper to extract bool from table\nfunc getTableBool(tbl *lua.LTable, key string, def bool) bool {\n    val := tbl.RawGetString(key)\n    return lua.LVAsBool(val)\n}\n</code></pre>"},{"location":"MODULE_API_CONVENTION/#module-examples","title":"Module Examples","text":""},{"location":"MODULE_API_CONVENTION/#pkg-module-package-management","title":"pkg Module (Package Management)","text":"<pre><code>local pkg = require(\"pkg\")\n\n-- Install packages\npkg.install({packages = \"vim\"})\npkg.install({packages = {\"git\", \"curl\", \"wget\"}})\n\n-- Search for packages\npkg.search({query = \"python3\"})\n\n-- Check if installed\npkg.is_installed({package = \"nginx\"})\n\n-- Get package info\npkg.info({package = \"curl\"})\n\n-- System maintenance\npkg.update({})\npkg.upgrade({})\npkg.clean({})\npkg.autoremove({})\n\n-- Utilities\npkg.which({executable = \"git\"})\npkg.version({package = \"bash\"})\npkg.deps({package = \"nginx\"})\n\n-- Remove packages\npkg.remove({packages = \"old-package\"})\n\n-- Install from local file\npkg.install_local({file = \"/path/to/package.deb\"})\n\n-- Get package manager name\nlocal manager, _ = pkg.get_manager({})\n</code></pre>"},{"location":"MODULE_API_CONVENTION/#ssh-module-ssh-operations","title":"ssh Module (SSH Operations)","text":"<pre><code>local ssh = require(\"ssh\")\n\n-- Connect to server\nssh.connect({\n    host = \"server.com\",\n    user = \"admin\",\n    port = 22,\n    key_path = \"~/.ssh/id_rsa\",\n    timeout = 30\n})\n\n-- Execute command\nssh.exec({\n    command = \"ls -la\",\n    timeout = 60\n})\n\n-- Upload file\nssh.upload({\n    local_path = \"/local/file.txt\",\n    remote_path = \"/remote/file.txt\"\n})\n\n-- Download file\nssh.download({\n    remote_path = \"/remote/file.txt\",\n    local_path = \"/local/file.txt\"\n})\n\n-- Disconnect\nssh.disconnect({})\n</code></pre>"},{"location":"MODULE_API_CONVENTION/#benefits","title":"Benefits","text":""},{"location":"MODULE_API_CONVENTION/#1-self-documenting-code","title":"1. Self-Documenting Code","text":"<pre><code>-- Clear what each parameter means\npkg.install({packages = \"vim\"})\n\n-- vs ambiguous\npkg.install(\"vim\")\n</code></pre>"},{"location":"MODULE_API_CONVENTION/#2-easy-to-extend","title":"2. Easy to Extend","text":"<pre><code>-- Can add new parameters without breaking existing code\npkg.install({\n    packages = \"vim\",\n    options = {\"-y\"},\n    update_cache = true\n})\n</code></pre>"},{"location":"MODULE_API_CONVENTION/#3-parameter-order-independence","title":"3. Parameter Order Independence","text":"<pre><code>-- These are equivalent\nssh.connect({host = \"server\", user = \"admin\", port = 22})\nssh.connect({user = \"admin\", port = 22, host = \"server\"})\n</code></pre>"},{"location":"MODULE_API_CONVENTION/#4-better-ide-support","title":"4. Better IDE Support","text":"<p>IDEs can provide autocompletion for parameter names: - Type <code>pkg.install({</code> \u2192 IDE suggests <code>packages</code> - Type <code>ssh.connect({</code> \u2192 IDE suggests <code>host</code>, <code>user</code>, <code>port</code>, etc.</p>"},{"location":"MODULE_API_CONVENTION/#5-validation-and-error-messages","title":"5. Validation and Error Messages","text":"<pre><code>-- Clear error message\npkg.install({})\n-- Error: \"packages parameter is required\"\n\n-- vs unclear\npkg.install()\n-- Error: \"expected string, got nil\"\n</code></pre>"},{"location":"MODULE_API_CONVENTION/#migration-guide","title":"Migration Guide","text":""},{"location":"MODULE_API_CONVENTION/#for-module-developers","title":"For Module Developers","text":"<ol> <li> <p>Update function signature to accept table:    <pre><code>func (m *Module) install(L *lua.LState) int {\n    opts := L.CheckTable(1)\n    // ...\n}\n</code></pre></p> </li> <li> <p>Extract parameters using helpers:    <pre><code>packages := getTableString(opts, \"packages\", \"\")\n</code></pre></p> </li> <li> <p>Validate required parameters:    <pre><code>if packages == \"\" {\n    L.Push(lua.LFalse)\n    L.Push(lua.LString(\"packages parameter is required\"))\n    return 2\n}\n</code></pre></p> </li> <li> <p>Update tests:    <pre><code>err := L.DoString(`\n    local pkg = require(\"pkg\")\n    pkg.install({packages = \"vim\"})\n`)\n</code></pre></p> </li> <li> <p>Update documentation with examples.</p> </li> </ol>"},{"location":"MODULE_API_CONVENTION/#for-users","title":"For Users","text":"<p>Update existing scripts:</p> <p>Before: <pre><code>pkg.install(\"vim\")\npkg.search(\"python\")\npkg.is_installed(\"git\")\n</code></pre></p> <p>After: <pre><code>pkg.install({packages = \"vim\"})\npkg.search({query = \"python\"})\npkg.is_installed({package = \"git\"})\n</code></pre></p>"},{"location":"MODULE_API_CONVENTION/#checklist-for-new-modules","title":"Checklist for New Modules","text":"<p>When creating a new module, ensure:</p> <ul> <li> All functions accept table as first parameter</li> <li> Required parameters are validated</li> <li> Optional parameters have sensible defaults</li> <li> Helper functions (getTableString, etc.) are used</li> <li> Error messages mention parameter names</li> <li> Documentation shows table syntax</li> <li> Tests use table syntax</li> <li> Functions work with delegate_to()</li> </ul>"},{"location":"MODULE_API_CONVENTION/#see-also","title":"See Also","text":"<ul> <li>pkg Module Documentation</li> <li>ssh Module Documentation</li> <li>Modern DSL Guide</li> </ul>"},{"location":"MODULE_RETURN_PATTERN/","title":"Padr\u00e3o de Retorno para M\u00f3dulos Lua","text":""},{"location":"MODULE_RETURN_PATTERN/#visao-geral","title":"Vis\u00e3o Geral","text":"<p>Este documento descreve o padr\u00e3o consistente para retorno de valores e erros em m\u00f3dulos Lua do sloth-runner.</p>"},{"location":"MODULE_RETURN_PATTERN/#problema","title":"Problema","text":"<p>Anteriormente, os m\u00f3dulos tinham padr\u00f5es inconsistentes: - Alguns retornavam apenas 1 valor (resultado OU erro) - Outros retornavam 2 valores (resultado, erro) - Usu\u00e1rios n\u00e3o sabiam quando algo deu errado</p>"},{"location":"MODULE_RETURN_PATTERN/#solucao-padrao-result-error","title":"Solu\u00e7\u00e3o: Padr\u00e3o (result, error)","text":"<p>Todos os m\u00f3dulos devem seguir o padr\u00e3o (result, error) do Lua:</p> <pre><code>local result, err = module.function(args)\nif err then\n    print(\"Erro: \" .. err)\n    return\nend\n\n-- Usar result\nprint(\"Sucesso: \" .. result.message)\n</code></pre>"},{"location":"MODULE_RETURN_PATTERN/#regras","title":"Regras","text":"<ol> <li>Sempre retornar 2 valores: <code>(result, error)</code></li> <li>Em caso de sucesso: <code>(result, nil)</code></li> <li>Em caso de erro: <code>(nil, \"mensagem de erro\")</code></li> <li>Fluent API: Retornar <code>(self, nil)</code> para permitir encadeamento</li> </ol>"},{"location":"MODULE_RETURN_PATTERN/#exemplos","title":"Exemplos","text":""},{"location":"MODULE_RETURN_PATTERN/#1-operacao-com-sucesso","title":"1. Opera\u00e7\u00e3o com Sucesso","text":"<pre><code>func luaCreateResource(L *lua.LState) int {\n    // ... l\u00f3gica ...\n\n    result := L.NewTable()\n    result.RawSetString(\"changed\", lua.LBool(true))\n    result.RawSetString(\"message\", lua.LString(\"Recurso criado\"))\n\n    L.Push(result)\n    L.Push(lua.LNil) // Sempre incluir nil para erro\n    return 2\n}\n</code></pre> <pre><code>-- Uso em Lua\nlocal result, err = module.create_resource({name = \"test\"})\nif err then\n    error(\"Falha ao criar: \" .. err)\nend\nprint(\"Criado: \" .. result.message)\n</code></pre>"},{"location":"MODULE_RETURN_PATTERN/#2-operacao-com-erro","title":"2. Opera\u00e7\u00e3o com Erro","text":"<pre><code>func luaDeleteResource(L *lua.LState) int {\n    // ... l\u00f3gica ...\n\n    if err != nil {\n        L.Push(lua.LNil)\n        L.Push(lua.LString(fmt.Sprintf(\"Falha ao deletar: %v\", err)))\n        return 2\n    }\n\n    // ... sucesso ...\n}\n</code></pre> <pre><code>-- Uso em Lua\nlocal result, err = module.delete_resource({name = \"test\"})\nif err then\n    print(\"Erro: \" .. err)\n    return\nend\n</code></pre>"},{"location":"MODULE_RETURN_PATTERN/#3-idempotencia-sem-mudancas","title":"3. Idempot\u00eancia (sem mudan\u00e7as)","text":"<pre><code>func luaEnsureResource(L *lua.LState) int {\n    // ... verificar se existe ...\n\n    if alreadyExists {\n        result := L.NewTable()\n        result.RawSetString(\"changed\", lua.LBool(false))\n        result.RawSetString(\"message\", lua.LString(\"Recurso j\u00e1 existe\"))\n\n        L.Push(result)\n        L.Push(lua.LNil) // Sempre retornar nil para erro\n        return 2\n    }\n\n    // ... criar recurso ...\n}\n</code></pre> <pre><code>-- Uso em Lua\nlocal result, err = module.ensure_resource({name = \"test\"})\nif err then\n    error(\"Falha: \" .. err)\nend\n\nif result.changed then\n    print(\"Recurso criado\")\nelse\n    print(\"Recurso j\u00e1 existia\")\nend\n</code></pre>"},{"location":"MODULE_RETURN_PATTERN/#4-fluent-api","title":"4. Fluent API","text":"<pre><code>func instanceImage(L *lua.LState) int {\n    instance := checkIncusInstance(L, 1)\n    image := L.CheckString(2)\n    instance.config[\"image\"] = image\n\n    L.Push(L.Get(1)) // Retornar self\n    L.Push(lua.LNil) // Sempre incluir nil para erro\n    return 2\n}\n</code></pre> <pre><code>-- Uso em Lua com encadeamento\nlocal instance, err = incus.instance(\"myvm\")\n    :image(\"ubuntu/22.04\")\n    :config({memory = \"2GB\"})\n    :create()\n\nif err then\n    error(\"Falha ao criar inst\u00e2ncia: \" .. err)\nend\n</code></pre>"},{"location":"MODULE_RETURN_PATTERN/#helper-functions","title":"Helper Functions","text":"<p>Use as helper functions em <code>internal/modules/helpers.go</code>:</p> <pre><code>import \"github.com/chalkan3-sloth/sloth-runner/internal/modules\"\n\n// Retornar sucesso\nfunc luaMyFunction(L *lua.LState) int {\n    result := L.NewTable()\n    result.RawSetString(\"data\", lua.LString(\"valor\"))\n    return modules.Helpers.ReturnSuccess(L, result)\n}\n\n// Retornar erro\nfunc luaMyFunction(L *lua.LState) int {\n    return modules.Helpers.ReturnError(L, \"algo deu errado\")\n}\n\n// Retornar fluent (self, nil)\nfunc builderMethod(L *lua.LState) int {\n    // ... modificar self ...\n    return modules.Helpers.ReturnFluentSuccess(L, L.Get(1))\n}\n\n// Retornar resultado com changed=true\nfunc luaCreateResource(L *lua.LState) int {\n    fields := map[string]lua.LValue{\n        \"id\":   lua.LString(\"123\"),\n        \"name\": lua.LString(\"resource\"),\n    }\n    return modules.Helpers.ReturnChanged(L, \"Recurso criado\", fields)\n}\n\n// Retornar resultado idempotente (changed=false)\nfunc luaEnsureResource(L *lua.LState) int {\n    return modules.Helpers.ReturnIdempotent(L, \"Recurso j\u00e1 existe\")\n}\n</code></pre>"},{"location":"MODULE_RETURN_PATTERN/#modulos-atualizados","title":"M\u00f3dulos Atualizados","text":"<p>Os seguintes m\u00f3dulos j\u00e1 seguem este padr\u00e3o:</p> <ul> <li>\u2705 <code>internal/modules/core/sloth.go</code> - M\u00f3dulo sloth-runner</li> <li>\u2705 <code>internal/modules/infra/incus.go</code> - M\u00f3dulo Incus (com Fluent API)</li> <li>\u2705 <code>internal/luainterface/modules/exec/exec.go</code> - M\u00f3dulo exec</li> </ul>"},{"location":"MODULE_RETURN_PATTERN/#migrando-modulos-antigos","title":"Migrando M\u00f3dulos Antigos","text":"<p>Se voc\u00ea tem um m\u00f3dulo usando o padr\u00e3o antigo (retornando apenas 1 valor):</p>"},{"location":"MODULE_RETURN_PATTERN/#antes","title":"Antes","text":"<pre><code>func luaOldFunction(L *lua.LState) int {\n    if err != nil {\n        errorTable := L.NewTable()\n        errorTable.RawSetString(\"error\", lua.LString(\"falhou\"))\n        L.Push(errorTable)\n        return 1 // \u274c Retorna apenas 1 valor\n    }\n\n    resultTable := L.NewTable()\n    resultTable.RawSetString(\"data\", lua.LString(\"ok\"))\n    L.Push(resultTable)\n    return 1 // \u274c Retorna apenas 1 valor\n}\n</code></pre>"},{"location":"MODULE_RETURN_PATTERN/#depois","title":"Depois","text":"<pre><code>func luaNewFunction(L *lua.LState) int {\n    if err != nil {\n        L.Push(lua.LNil)\n        L.Push(lua.LString(\"falhou\"))\n        return 2 // \u2705 Sempre retorna 2 valores\n    }\n\n    resultTable := L.NewTable()\n    resultTable.RawSetString(\"data\", lua.LString(\"ok\"))\n    L.Push(resultTable)\n    L.Push(lua.LNil) // \u2705 Sempre inclui nil para erro\n    return 2 // \u2705 Sempre retorna 2 valores\n}\n</code></pre>"},{"location":"MODULE_RETURN_PATTERN/#beneficios","title":"Benef\u00edcios","text":"<ol> <li>Consist\u00eancia: Todos os m\u00f3dulos usam o mesmo padr\u00e3o</li> <li>Clareza: Usu\u00e1rios sempre sabem como verificar erros</li> <li>Previsibilidade: <code>if err then</code> funciona em todos os lugares</li> <li>Compatibilidade: Segue conven\u00e7\u00e3o padr\u00e3o do Lua</li> <li>Fluent API: Permite encadeamento elegante com <code>(self, nil)</code></li> </ol>"},{"location":"MODULE_RETURN_PATTERN/#referencias","title":"Refer\u00eancias","text":"<ul> <li>Lua Error Handling Best Practices</li> <li>Go-Lua Documentation</li> <li>Helper Functions: <code>internal/modules/helpers.go</code></li> </ul>"},{"location":"SECRETS/","title":"Secrets Management","text":"<p>Sloth Runner provides a secure secrets management system similar to Pulumi, allowing you to encrypt and store sensitive data for your stacks.</p>"},{"location":"SECRETS/#overview","title":"Overview","text":"<ul> <li>Strong Encryption: AES-256-GCM with Argon2 key derivation</li> <li>Per-Stack Secrets: Each stack has its own encrypted secrets</li> <li>Password-Based: Secrets are encrypted with a user-provided password</li> <li>Global Access: Secrets are available in Lua workflows via the <code>secrets</code> global table</li> </ul>"},{"location":"SECRETS/#architecture","title":"Architecture","text":""},{"location":"SECRETS/#encryption","title":"Encryption","text":"<ul> <li>Algorithm: AES-256-GCM (authenticated encryption)</li> <li>Key Derivation: Argon2 (memory-hard, resistant to GPU attacks)</li> <li>Memory: 64MB</li> <li>Threads: 4</li> <li>Iterations: 1</li> <li>Key length: 32 bytes (256 bits)</li> <li>Salt: 32-byte random salt per stack, stored in stack metadata</li> <li>Nonce: 12-byte random nonce per encryption, prepended to ciphertext</li> </ul>"},{"location":"SECRETS/#storage","title":"Storage","text":"<ul> <li>Database: SQLite database at <code>~/.sloth-runner/secrets.db</code></li> <li>Table: <code>secrets</code> with columns:</li> <li><code>id</code>: Primary key</li> <li><code>stack_id</code>: Foreign key to stack</li> <li><code>name</code>: Secret name</li> <li><code>encrypted_value</code>: Base64-encoded ciphertext</li> <li><code>created_at</code>: Unix timestamp</li> <li><code>updated_at</code>: Unix timestamp</li> <li>Unique constraint on <code>(stack_id, name)</code></li> </ul>"},{"location":"SECRETS/#commands","title":"Commands","text":""},{"location":"SECRETS/#add-secrets","title":"Add Secrets","text":""},{"location":"SECRETS/#from-yaml-file","title":"From YAML File","text":"<pre><code># Add multiple secrets from YAML file\necho 'mypassword' | sloth-runner secrets add \\\n  --stack my-app \\\n  --from-yaml secrets.yaml \\\n  --password-stdin\n</code></pre> <p>secrets.yaml format: <pre><code>secrets:\n  api_key: \"sk-abc123456789\"\n  db_password: \"SuperSecret123!\"\n  aws_access_key: \"AKIAIOSFODNN7EXAMPLE\"\n</code></pre></p>"},{"location":"SECRETS/#from-file","title":"From File","text":"<pre><code># Add secret from file contents\necho 'mypassword' | sloth-runner secrets add api_key \\\n  --stack my-app \\\n  --from-file /path/to/secret.txt \\\n  --password-stdin\n</code></pre>"},{"location":"SECRETS/#interactive","title":"Interactive","text":"<pre><code># Add secret interactively (prompts for value and password)\nsloth-runner secrets add api_key --stack my-app\n</code></pre>"},{"location":"SECRETS/#list-secrets","title":"List Secrets","text":"<pre><code># List all secret names for a stack (values not shown)\nsloth-runner secrets list --stack my-app\n</code></pre> <p>Output: <pre><code>NAME              CREATED              UPDATED\n----              -------              -------\napi_key           2025-10-06 15:10:00  2025-10-06 15:10:00\ndb_password       2025-10-06 15:10:00  2025-10-06 15:10:00\naws_access_key    2025-10-06 15:10:00  2025-10-06 15:10:00\n</code></pre></p>"},{"location":"SECRETS/#get-secret","title":"Get Secret","text":"<pre><code># Decrypt and display a secret value\necho 'mypassword' | sloth-runner secrets get api_key \\\n  --stack my-app \\\n  --password-stdin\n</code></pre> <p>\u26a0\ufe0f WARNING: This displays the decrypted secret value in plain text!</p>"},{"location":"SECRETS/#remove-secrets","title":"Remove Secrets","text":"<pre><code># Remove a specific secret\nsloth-runner secrets remove api_key --stack my-app\n\n# Remove all secrets from a stack\nsloth-runner secrets remove --stack my-app --all\n</code></pre>"},{"location":"SECRETS/#usage-in-workflows","title":"Usage in Workflows","text":""},{"location":"SECRETS/#accessing-secrets","title":"Accessing Secrets","text":"<p>Secrets are automatically loaded and decrypted when you run a workflow with the <code>--password-stdin</code> flag:</p> <pre><code># Run workflow with secrets\necho 'mypassword' | sloth-runner run my-app \\\n  --file deploy.sloth \\\n  --password-stdin \\\n  --yes\n</code></pre>"},{"location":"SECRETS/#in-lua-code","title":"In Lua Code","text":"<p>Secrets are available via the global <code>secrets</code> table:</p> <pre><code>task(\"deploy_app\", function()\n    -- Access secrets directly\n    local api_key = secrets.api_key\n    local db_password = secrets.db_password\n\n    -- Use in commands\n    exec(string.format(\"curl -H 'Authorization: Bearer %s' https://api.example.com\", api_key))\n\n    -- Configure database\n    exec(string.format(\"psql -c \\\"ALTER USER app WITH PASSWORD '%s'\\\"\", db_password))\nend)\n</code></pre>"},{"location":"SECRETS/#check-if-secrets-exist","title":"Check if Secrets Exist","text":"<pre><code>task(\"check_secrets\", function()\n    if secrets then\n        print(\"Secrets are loaded\")\n        if secrets.api_key then\n            print(\"API key is available\")\n        end\n    else\n        print(\"No secrets available\")\n    end\nend)\n</code></pre>"},{"location":"SECRETS/#security-best-practices","title":"Security Best Practices","text":""},{"location":"SECRETS/#password-management","title":"Password Management","text":"<ol> <li>Use Strong Passwords: Minimum 16 characters, mix of upper/lower/numbers/symbols</li> <li>Don't Hardcode: Never put passwords in scripts or version control</li> <li>Use Environment Variables: Store passwords in secure environment variables</li> <li>Rotate Regularly: Change passwords periodically</li> </ol> <p>Example with environment variable: <pre><code>echo \"$SECRETS_PASSWORD\" | sloth-runner run my-app \\\n  --file deploy.sloth \\\n  --password-stdin \\\n  --yes\n</code></pre></p>"},{"location":"SECRETS/#secret-storage","title":"Secret Storage","text":"<ol> <li>Don't Commit: Never commit secrets to version control</li> <li>Use .gitignore: Add <code>*.secret</code>, <code>secrets.yaml</code>, etc. to <code>.gitignore</code></li> <li>Separate Secrets: Use different passwords for different stacks/environments</li> <li>Backup Securely: If backing up secrets database, encrypt the backup</li> </ol>"},{"location":"SECRETS/#workflow-security","title":"Workflow Security","text":"<ol> <li>Avoid Logging: Don't print secret values in logs</li> <li>Use Variables: Store secrets in variables instead of using directly</li> <li>Clean Up: Clear sensitive variables after use</li> <li>Limit Access: Only load secrets when needed</li> </ol> <p>Example secure workflow: <pre><code>task(\"deploy_secure\", function()\n    -- Store in local variable\n    local token = secrets.api_token\n\n    -- Use without exposing\n    exec(string.format(\"deploy --token '%s' --quiet\", token))\n\n    -- Clear from memory (Lua will garbage collect)\n    token = nil\nend)\n</code></pre></p>"},{"location":"SECRETS/#examples","title":"Examples","text":""},{"location":"SECRETS/#complete-workflow","title":"Complete Workflow","text":"<pre><code>-- deploy.sloth\ntask(\"setup_infrastructure\", function()\n    -- Use cloud provider credentials from secrets\n    exec(string.format([[\n        export AWS_ACCESS_KEY_ID=%s\n        export AWS_SECRET_ACCESS_KEY=%s\n        terraform apply -auto-approve\n    ]], secrets.aws_access_key_id, secrets.aws_secret_key))\nend)\n\ntask(\"deploy_application\", function()\n    :depends_on(\"setup_infrastructure\")\n\n    -- Use database credentials\n    exec(string.format([[\n        echo \"DB_PASSWORD=%s\" &gt; .env\n        docker-compose up -d\n    ]], secrets.db_password))\nend)\n\ntask(\"configure_monitoring\", function()\n    :depends_on(\"deploy_application\")\n\n    -- Use monitoring API key\n    exec(string.format([[\n        curl -X POST https://monitoring.example.com/api/config \\\n             -H \"X-API-Key: %s\" \\\n             -d '{\"service\": \"my-app\"}'\n    ]], secrets.monitoring_api_key))\nend)\n</code></pre>"},{"location":"SECRETS/#setup-script","title":"Setup Script","text":"<pre><code>#!/bin/bash\n# setup-secrets.sh\n\nSTACK_NAME=\"production\"\nPASSWORD_FILE=\".secrets-password\"\n\n# Add secrets from YAML\ncat &lt;&lt;EOF &gt; /tmp/secrets.yaml\nsecrets:\n  aws_access_key_id: \"${AWS_ACCESS_KEY_ID}\"\n  aws_secret_key: \"${AWS_SECRET_ACCESS_KEY}\"\n  db_password: \"$(openssl rand -base64 32)\"\n  monitoring_api_key: \"${MONITORING_API_KEY}\"\nEOF\n\n# Add to sloth-runner\ncat \"$PASSWORD_FILE\" | sloth-runner secrets add \\\n  --stack \"$STACK_NAME\" \\\n  --from-yaml /tmp/secrets.yaml \\\n  --password-stdin\n\n# Clean up\nrm /tmp/secrets.yaml\n\necho \"Secrets added successfully!\"\n</code></pre>"},{"location":"SECRETS/#cicd-integration","title":"CI/CD Integration","text":"<pre><code># .github/workflows/deploy.yml\nname: Deploy with Secrets\n\non:\n  push:\n    branches: [main]\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Install sloth-runner\n        run: |\n          curl -L https://github.com/your-org/sloth-runner/releases/download/v1.0.0/sloth-runner -o sloth-runner\n          chmod +x sloth-runner\n\n      - name: Deploy with secrets\n        env:\n          SECRETS_PASSWORD: ${{ secrets.SLOTH_SECRETS_PASSWORD }}\n        run: |\n          echo \"$SECRETS_PASSWORD\" | ./sloth-runner run production \\\n            --file deploy.sloth \\\n            --password-stdin \\\n            --yes\n</code></pre>"},{"location":"SECRETS/#troubleshooting","title":"Troubleshooting","text":""},{"location":"SECRETS/#failed-to-decrypt-secret","title":"\"failed to decrypt secret\"","text":"<ul> <li>Cause: Wrong password or corrupted data</li> <li>Solution: Verify password, re-add secret if corrupted</li> </ul>"},{"location":"SECRETS/#stack-not-found","title":"\"stack not found\"","text":"<ul> <li>Cause: Stack doesn't exist yet</li> <li>Solution: Run workflow once to create stack, then add secrets</li> </ul>"},{"location":"SECRETS/#secret-not-found","title":"\"secret not found\"","text":"<ul> <li>Cause: Secret name doesn't exist for this stack</li> <li>Solution: List secrets to verify name, add if missing</li> </ul>"},{"location":"SECRETS/#secrets-not-available-in-workflow","title":"Secrets not available in workflow","text":"<ul> <li>Cause: Forgot <code>--password-stdin</code> flag</li> <li>Solution: Add <code>--password-stdin</code> and pipe password via stdin</li> </ul>"},{"location":"SECRETS/#migration","title":"Migration","text":""},{"location":"SECRETS/#from-plain-text-files","title":"From Plain Text Files","text":"<pre><code># Convert existing plain text secrets to encrypted secrets\nfor secret_file in secrets/*.txt; do\n    name=$(basename \"$secret_file\" .txt)\n    value=$(cat \"$secret_file\")\n\n    echo 'mypassword' | sloth-runner secrets add \"$name\" \\\n      --stack my-app \\\n      --from-file \"$secret_file\" \\\n      --password-stdin\ndone\n</code></pre>"},{"location":"SECRETS/#from-environment-variables","title":"From Environment Variables","text":"<pre><code># Convert environment variables to secrets\ncat &lt;&lt;EOF | sloth-runner secrets add --stack my-app --from-yaml /dev/stdin --password-stdin &lt;&lt;&lt; 'mypassword'\nsecrets:\n  api_key: \"${API_KEY}\"\n  db_password: \"${DB_PASSWORD}\"\nEOF\n</code></pre>"},{"location":"SECRETS/#technical-details","title":"Technical Details","text":""},{"location":"SECRETS/#file-locations","title":"File Locations","text":"<ul> <li>Secrets database: <code>~/.sloth-runner/secrets.db</code></li> <li>Stack database: <code>~/.sloth-runner/stacks.db</code></li> <li>Salt storage: Stack metadata in stacks database</li> </ul>"},{"location":"SECRETS/#encryption-process","title":"Encryption Process","text":"<ol> <li>Generate or retrieve 32-byte salt for stack</li> <li>Derive 32-byte encryption key from password using Argon2</li> <li>Generate 12-byte random nonce</li> <li>Encrypt plaintext with AES-256-GCM</li> <li>Prepend nonce to ciphertext</li> <li>Base64-encode result for storage</li> </ol>"},{"location":"SECRETS/#decryption-process","title":"Decryption Process","text":"<ol> <li>Retrieve encrypted value and salt from database</li> <li>Derive encryption key from password using Argon2</li> <li>Base64-decode ciphertext</li> <li>Extract nonce from first 12 bytes</li> <li>Decrypt with AES-256-GCM</li> <li>Return plaintext</li> </ol>"},{"location":"SECRETS/#memory-security","title":"Memory Security","text":"<ul> <li>Passwords are cleared from memory after use (overwritten with 'x')</li> <li>Secrets are only loaded when needed</li> <li>Lua garbage collector cleans up secret values</li> </ul>"},{"location":"SECRETS/#faq","title":"FAQ","text":"<p>Q: Can I use different passwords for different stacks? A: Yes, each stack has its own salt and secrets. You can use different passwords.</p> <p>Q: What happens if I forget my password? A: Secrets cannot be recovered without the password. You'll need to re-add them.</p> <p>Q: Are secrets encrypted at rest? A: Yes, secrets are always encrypted in the database using AES-256-GCM.</p> <p>Q: Can I rotate passwords? A: Not directly. You need to decrypt all secrets with old password and re-encrypt with new password.</p> <p>Q: Are secrets encrypted in transit? A: Secrets are decrypted in memory before passing to workflows. Use TLS for network transmission.</p> <p>Q: Can I share secrets between stacks? A: No, secrets are per-stack. You can add the same secret to multiple stacks.</p>"},{"location":"STACK_IDEMPOTENCY_GUIDE/","title":"Stack Management &amp; Idempotency Guide","text":""},{"location":"STACK_IDEMPOTENCY_GUIDE/#overview","title":"Overview","text":"<p>Sloth Runner implements a sophisticated stack-based state management system similar to Pulumi and Terraform. This ensures idempotent infrastructure automation where resources are only created or modified when necessary.</p>"},{"location":"STACK_IDEMPOTENCY_GUIDE/#key-concepts","title":"Key Concepts","text":""},{"location":"STACK_IDEMPOTENCY_GUIDE/#1-stacks","title":"1. Stacks","text":"<p>A stack is an isolated execution environment for your workflows. Each stack: - Maintains its own state database - Tracks all managed resources - Provides idempotency guarantees - Records execution history</p>"},{"location":"STACK_IDEMPOTENCY_GUIDE/#2-resources","title":"2. Resources","text":"<p>A resource represents any managed entity (file, package, service, cloud resource, etc.). Each resource: - Has a unique identifier within the stack - Tracks its current state and properties - Maintains a checksum for drift detection - Is only applied when changes are detected</p>"},{"location":"STACK_IDEMPOTENCY_GUIDE/#3-idempotency","title":"3. Idempotency","text":"<p>Idempotency means running the same workflow multiple times produces the same result. Resources are: - Created if they don't exist - Updated if they changed - Skipped if they're already in the desired state</p>"},{"location":"STACK_IDEMPOTENCY_GUIDE/#cli-commands","title":"CLI Commands","text":""},{"location":"STACK_IDEMPOTENCY_GUIDE/#stack-management","title":"Stack Management","text":"<pre><code># Create a new stack\nsloth-runner stack new my-infrastructure\n\n# List all stacks\nsloth-runner stack list\n\n# Show stack details\nsloth-runner stack show my-infrastructure\n\n# Delete a stack\nsloth-runner stack delete my-infrastructure\n</code></pre>"},{"location":"STACK_IDEMPOTENCY_GUIDE/#state-management","title":"State Management","text":"<pre><code># Set a key-value pair\nsloth-runner state set key value\n\n# Get a value\nsloth-runner state get key\n\n# List all keys\nsloth-runner state list\n\n# Delete a key\nsloth-runner state delete key\n\n# View statistics\nsloth-runner state stats\n</code></pre>"},{"location":"STACK_IDEMPOTENCY_GUIDE/#using-stacks-in-workflows","title":"Using Stacks in Workflows","text":""},{"location":"STACK_IDEMPOTENCY_GUIDE/#automatic-stack-integration","title":"Automatic Stack Integration","text":"<p>Every workflow automatically gets a stack. The stack functions are available globally in Lua:</p> <pre><code>-- Get current stack information\nlocal stack_name = stack.get_name()\nlocal stack_id = stack.get_id()\nlocal stack_status = stack.get_status()\n\n-- Set/get outputs\nstack.set_output(\"web_url\", \"https://example.com\")\nlocal url = stack.get_output(\"web_url\")\n</code></pre>"},{"location":"STACK_IDEMPOTENCY_GUIDE/#resource-registration","title":"Resource Registration","text":"<p>Modules can register resources for tracking. The stack system automatically handles idempotency:</p> <pre><code>-- Register a resource\nlocal status, resource = stack.register_resource({\n    type = \"package\",\n    name = \"nginx\",\n    module = \"pkg\",\n    properties = {\n        version = \"1.18.0\",\n        state = \"installed\"\n    }\n})\n\n-- status can be: \"created\", \"changed\", or \"unchanged\"\nif status == \"unchanged\" then\n    print(\"Package already installed with correct version\")\nelseif status == \"changed\" then\n    print(\"Package version was updated\")\nelseif status == \"created\" then\n    print(\"Package was installed\")\nend\n</code></pre>"},{"location":"STACK_IDEMPOTENCY_GUIDE/#resource-state-updates","title":"Resource State Updates","text":"<p>After applying changes, update the resource state:</p> <pre><code>-- Mark resource as successfully applied\nstack.update_resource(\"package\", \"nginx\", {\n    state = \"applied\"\n})\n\n-- Mark resource as failed\nstack.update_resource(\"package\", \"nginx\", {\n    state = \"failed\",\n    error = \"Installation failed: permission denied\"\n})\n</code></pre>"},{"location":"STACK_IDEMPOTENCY_GUIDE/#complete-example-idempotent-web-server-setup","title":"Complete Example: Idempotent Web Server Setup","text":"<pre><code>workflow({\n    name = \"web-server-setup\",\n    description = \"Idempotent web server configuration\"\n})\n\n-- This task will only execute changes when needed\ntask({\n    name = \"install-nginx\",\n    run = function()\n        -- Check and install nginx\n        local status = pkg.install({\n            name = \"nginx\",\n            state = \"present\"\n        })\n\n        if not status.changed then\n            print(\"\u2713 nginx already installed\")\n        else\n            print(\"\u2713 nginx installed\")\n        end\n    end\n})\n\ntask({\n    name = \"configure-nginx\",\n    depends_on = {\"install-nginx\"},\n    run = function()\n        -- Copy configuration file\n        local result = file_ops.copy({\n            src = \"/configs/nginx.conf\",\n            dest = \"/etc/nginx/nginx.conf\",\n            mode = \"0644\"\n        })\n\n        if not result.changed then\n            print(\"\u2713 nginx.conf already up to date\")\n        else\n            print(\"\u2713 nginx.conf updated\")\n\n            -- Only restart if config changed\n            systemd.restart({name = \"nginx\"})\n        end\n    end\n})\n\ntask({\n    name = \"ensure-service-running\",\n    depends_on = {\"configure-nginx\"},\n    run = function()\n        local status = systemd.ensure({\n            name = \"nginx\",\n            state = \"started\",\n            enabled = true\n        })\n\n        if not status.changed then\n            print(\"\u2713 nginx already running and enabled\")\n        else\n            print(\"\u2713 nginx started and enabled\")\n        end\n\n        -- Export service status\n        stack.set_output(\"nginx_status\", \"running\")\n        stack.set_output(\"nginx_port\", \"80\")\n    end\n})\n</code></pre>"},{"location":"STACK_IDEMPOTENCY_GUIDE/#how-idempotency-works-internally","title":"How Idempotency Works Internally","text":""},{"location":"STACK_IDEMPOTENCY_GUIDE/#1-checksum-based-change-detection","title":"1. Checksum-Based Change Detection","text":"<p>For file operations, checksums are computed and compared:</p> <pre><code>-- Internal implementation in file_ops.copy\nlocal src_checksum = compute_checksum(src)\nlocal dst_checksum = compute_checksum(dst)\n\nif src_checksum == dst_checksum then\n    return {changed = false}  -- Skip copy\nelse\n    -- Perform copy\n    return {changed = true}\nend\n</code></pre>"},{"location":"STACK_IDEMPOTENCY_GUIDE/#2-state-comparison","title":"2. State Comparison","text":"<p>For configuration resources, properties are hashed and compared:</p> <pre><code>-- Internal stack resource tracking\nlocal existing_resource = stack.get_resource(\"package\", \"nginx\")\n\nif existing_resource then\n    local new_checksum = sha256(json.encode(new_properties))\n    if new_checksum == existing_resource.checksum then\n        -- No changes needed\n        return \"unchanged\"\n    else\n        -- Update needed\n        return \"changed\"\n    end\nelse\n    -- New resource\n    return \"created\"\nend\n</code></pre>"},{"location":"STACK_IDEMPOTENCY_GUIDE/#3-drift-detection","title":"3. Drift Detection","text":"<p>The stack system can detect when resources have drifted from their desired state:</p> <pre><code># Check for drift in a stack\nsloth-runner stack drift my-infrastructure\n\n# Show resources that have drifted\nsloth-runner stack resources my-infrastructure --state drift\n</code></pre>"},{"location":"STACK_IDEMPOTENCY_GUIDE/#module-specific-idempotency","title":"Module-Specific Idempotency","text":""},{"location":"STACK_IDEMPOTENCY_GUIDE/#package-module-pkg","title":"Package Module (pkg)","text":"<pre><code>-- Only installs if package is missing or version differs\npkg.install({\n    name = \"docker\",\n    version = \"20.10.0\"\n})\n</code></pre>"},{"location":"STACK_IDEMPOTENCY_GUIDE/#user-module-user","title":"User Module (user)","text":"<pre><code>-- Only creates user if they don't exist\nuser.create({\n    name = \"appuser\",\n    shell = \"/bin/bash\",\n    home = \"/home/appuser\"\n})\n\n-- Only modifies if properties changed\nuser.modify({\n    name = \"appuser\",\n    shell = \"/bin/zsh\"  -- Only updates shell if different\n})\n</code></pre>"},{"location":"STACK_IDEMPOTENCY_GUIDE/#systemd-module","title":"Systemd Module","text":"<pre><code>-- Only starts service if not running\n-- Only enables if not enabled\nsystemd.ensure({\n    name = \"docker\",\n    state = \"started\",\n    enabled = true\n})\n</code></pre>"},{"location":"STACK_IDEMPOTENCY_GUIDE/#file-operations","title":"File Operations","text":"<pre><code>-- Only copies if files differ\nfile_ops.copy({\n    src = \"/src/file\",\n    dest = \"/dst/file\"\n})\n\n-- Only applies changes if line missing/different\nfile_ops.lineinfile({\n    path = \"/etc/config\",\n    line = \"setting=value\",\n    regexp = \"^setting=\"\n})\n</code></pre>"},{"location":"STACK_IDEMPOTENCY_GUIDE/#best-practices","title":"Best Practices","text":""},{"location":"STACK_IDEMPOTENCY_GUIDE/#1-always-use-stack-functions","title":"1. Always Use Stack Functions","text":"<pre><code>-- Good: Track outputs in stack\nstack.set_output(\"db_connection\", connection_string)\n\n-- Avoid: Using global variables (lost between runs)\n_G.db_connection = connection_string\n</code></pre>"},{"location":"STACK_IDEMPOTENCY_GUIDE/#2-handle-both-changed-and-unchanged-states","title":"2. Handle Both Changed and Unchanged States","text":"<pre><code>local result = pkg.install({name = \"nginx\"})\n\nif result.changed then\n    print(\"nginx was installed\")\n    -- Perform post-installation tasks\nelse\n    print(\"nginx already present\")\n    -- Skip unnecessary work\nend\n</code></pre>"},{"location":"STACK_IDEMPOTENCY_GUIDE/#3-use-dependencies-to-ensure-ordering","title":"3. Use Dependencies to Ensure Ordering","text":"<pre><code>task({\n    name = \"configure\",\n    depends_on = {\"install\"},  -- Runs after install\n    run = function()\n        -- Configuration logic\n    end\n})\n</code></pre>"},{"location":"STACK_IDEMPOTENCY_GUIDE/#4-register-custom-resources","title":"4. Register Custom Resources","text":"<p>For custom logic, explicitly register resources:</p> <pre><code>task({\n    name = \"custom-setup\",\n    run = function()\n        local status, res = stack.register_resource({\n            type = \"custom\",\n            name = \"my-resource\",\n            module = \"custom\",\n            properties = {\n                setting1 = \"value1\",\n                setting2 = \"value2\"\n            }\n        })\n\n        if status == \"unchanged\" then\n            print(\"Resource already configured\")\n            return\n        end\n\n        -- Perform actual changes\n        do_custom_setup()\n\n        -- Mark as applied\n        stack.update_resource(\"custom\", \"my-resource\", {\n            state = \"applied\"\n        })\n    end\n})\n</code></pre>"},{"location":"STACK_IDEMPOTENCY_GUIDE/#querying-stack-state","title":"Querying Stack State","text":""},{"location":"STACK_IDEMPOTENCY_GUIDE/#from-cli","title":"From CLI","text":"<pre><code># Export stack state to JSON\nsloth-runner stack export my-infrastructure &gt; state.json\n\n# List resources in a stack\nsloth-runner stack resources my-infrastructure\n</code></pre>"},{"location":"STACK_IDEMPOTENCY_GUIDE/#from-lua","title":"From Lua","text":"<pre><code>-- Check if resource exists\nif stack.resource_exists(\"package\", \"nginx\") then\n    local resource = stack.get_resource(\"package\", \"nginx\")\n    print(\"Resource state:\", resource.state)\n    print(\"Last applied:\", resource.last_applied)\nend\n</code></pre>"},{"location":"STACK_IDEMPOTENCY_GUIDE/#stack-persistence","title":"Stack Persistence","text":"<p>Stacks are persisted in SQLite databases:</p> <ul> <li>Default Location: <code>/etc/sloth-runner/stacks.db</code></li> <li>User Location: <code>~/.sloth-runner/stacks.db</code></li> <li>Custom Location: Use <code>--db</code> flag</li> </ul> <p>The database schema tracks: - Stack metadata (name, version, status, created_at, updated_at) - Resources (type, name, properties, checksum, state) - Execution history - Outputs and configuration</p>"},{"location":"STACK_IDEMPOTENCY_GUIDE/#advanced-features","title":"Advanced Features","text":""},{"location":"STACK_IDEMPOTENCY_GUIDE/#parallel-execution-with-idempotency","title":"Parallel Execution with Idempotency","text":"<pre><code>-- Each goroutine gets idempotency guarantees\ngoroutine.map({\"server1\", \"server2\", \"server3\"}, function(server)\n    local status = pkg.install({\n        name = \"nginx\",\n        delegate_to = server\n    })\n\n    -- Each server only installs if needed\n    print(server .. \": \" .. (status.changed and \"installed\" or \"already present\"))\nend)\n</code></pre>"},{"location":"STACK_IDEMPOTENCY_GUIDE/#conditional-resource-management","title":"Conditional Resource Management","text":"<pre><code>task({\n    name = \"setup-database\",\n    run = function()\n        local db_exists = stack.resource_exists(\"database\", \"mydb\")\n\n        if not db_exists then\n            -- Create new database\n            create_database(\"mydb\")\n\n            stack.register_resource({\n                type = \"database\",\n                name = \"mydb\",\n                module = \"custom\",\n                properties = {version = \"1.0\"}\n            })\n        else\n            print(\"Database already exists\")\n        end\n    end\n})\n</code></pre>"},{"location":"STACK_IDEMPOTENCY_GUIDE/#summary","title":"Summary","text":"<p>Sloth Runner's stack management provides:</p> <ol> <li>Idempotency: Resources only change when needed</li> <li>State Tracking: Full history of what was created/modified</li> <li>Drift Detection: Know when infrastructure has changed</li> <li>Parallel Safety: Goroutines work with idempotent resources</li> <li>Audit Trail: Complete execution history</li> </ol> <p>This makes Sloth Runner ideal for: - Infrastructure as Code (IaC) - Configuration Management - Deployment Automation - Compliance and Auditing - GitOps Workflows</p>"},{"location":"STACK_MANAGEMENT_GUIDE/","title":"Stack Management Guide","text":"<p>\ud83d\udcda Documentation</p> <p>For Stack Management Guide, please visit:</p> <ul> <li>\ud83c\uddfa\ud83c\uddf8 Stack Management (English)</li> <li>\ud83c\uddfa\ud83c\uddf8 Enterprise Features (English)</li> </ul> <p>Redirecting to Stack Management documentation...</p> <p>If you are not redirected automatically, click here.</p>"},{"location":"TUTORIAL/","title":"Quick Start Tutorial","text":"<p>\ud83d\udcda Documentation</p> <p>For Quick Start and Tutorial, please visit:</p> <ul> <li>\ud83c\uddfa\ud83c\uddf8 Quick Start (English)</li> <li>\ud83c\uddfa\ud83c\uddf8 Getting Started (English)</li> <li>\ud83c\uddfa\ud83c\uddf8 Examples (English)</li> </ul> <p>Redirecting to Quick Start tutorial...</p> <p>If you are not redirected automatically, click here.</p>"},{"location":"advanced-features/","title":"Advanced Features","text":"<p>\ud83d\udcda Documentation</p> <p>For Advanced Features documentation, please visit:</p> <ul> <li>\ud83c\uddfa\ud83c\uddf8 English Version</li> <li>\ud83c\udde7\ud83c\uddf7 Vers\u00e3o em Portugu\u00eas</li> <li>\ud83c\udde8\ud83c\uddf3 \u4e2d\u6587\u7248\u672c</li> </ul> <p>Redirecting to English version...</p> <p>If you are not redirected automatically, click here.</p>"},{"location":"advanced-scheduler/","title":"Advanced Scheduler","text":"<p>\ud83d\udcda Documentation</p> <p>For Scheduler documentation, please visit:</p> <ul> <li>\ud83c\udde7\ud83c\uddf7 Scheduler (Portugu\u00eas)</li> <li>\ud83c\udde8\ud83c\uddf3 \u8c03\u5ea6\u5668 (\u4e2d\u6587)</li> <li>\ud83c\uddfa\ud83c\uddf8 Advanced Features (English)</li> </ul> <p>Redirecting to Scheduler documentation...</p> <p>If you are not redirected automatically, click here.</p>"},{"location":"agent-reconnection/","title":"Agent Auto-Reconnection","text":"<p>\ud83d\udcda Documentation</p> <p>For Agent reconnection features, please visit:</p> <ul> <li>\ud83c\uddfa\ud83c\uddf8 Agent Improvements (English)</li> <li>\ud83c\uddfa\ud83c\uddf8 Distributed System (English)</li> </ul> <p>Redirecting to Agent Improvements documentation...</p> <p>If you are not redirected automatically, click here.</p>"},{"location":"agent-setup/","title":"Agent Setup Guide","text":"<p>\ud83d\udcda Documentation</p> <p>For Agent Setup and Configuration, please visit:</p> <ul> <li>\ud83c\uddfa\ud83c\uddf8 Master-Agent Architecture</li> <li>\ud83c\uddfa\ud83c\uddf8 Agent Improvements</li> <li>\ud83c\uddfa\ud83c\uddf8 Enhanced Agent Output</li> </ul> <p>Redirecting to Agent documentation...</p> <p>If you are not redirected automatically, click here.</p>"},{"location":"ai-integration/","title":"AI Integration","text":"<p>\ud83d\udcda AI Features Documentation</p> <p>For AI Integration and features, please visit:</p> <ul> <li>\ud83c\uddfa\ud83c\uddf8 AI Features (English)</li> <li>\ud83c\uddfa\ud83c\uddf8 Enterprise Features (English)</li> </ul> <p>Redirecting to AI Features documentation...</p> <p>If you are not redirected automatically, click here.</p>"},{"location":"core-concepts/","title":"Core Concepts","text":"<p>\ud83d\udcda Documentation</p> <p>For Core Concepts documentation, please visit:</p> <ul> <li>\ud83c\uddfa\ud83c\uddf8 English Version</li> <li>\ud83c\udde7\ud83c\uddf7 Vers\u00e3o em Portugu\u00eas</li> <li>\ud83c\udde8\ud83c\uddf3 \u4e2d\u6587\u7248\u672c</li> </ul> <p>Redirecting to English version...</p> <p>If you are not redirected automatically, click here.</p>"},{"location":"distributed-agents/","title":"Distributed Agents","text":"<p>\ud83d\udcda Documentation</p> <p>For Distributed Agents documentation, please visit:</p> <ul> <li>\ud83c\uddfa\ud83c\uddf8 Distributed System (English)</li> <li>\ud83c\uddfa\ud83c\uddf8 Master-Agent Architecture (English)</li> <li>\ud83c\udde7\ud83c\uddf7 Sistema Distribu\u00eddo (Portugu\u00eas)</li> </ul> <p>Redirecting to Distributed documentation...</p> <p>If you are not redirected automatically, click here.</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>\ud83d\udcda Full Documentation</p> <p>For detailed Getting Started guide, please visit:</p> <ul> <li>\ud83c\uddfa\ud83c\uddf8 English Version</li> <li>\ud83c\udde7\ud83c\uddf7 Vers\u00e3o em Portugu\u00eas</li> <li>\ud83c\udde8\ud83c\uddf3 \u4e2d\u6587\u7248\u672c</li> </ul> <p>Redirecting to English version...</p> <p>If you are not redirected automatically, click here.</p>"},{"location":"gitops-example/","title":"GitOps Example","text":"<p>\ud83d\udcda Documentation</p> <p>For GitOps features and examples, please visit:</p> <ul> <li>\ud83c\uddfa\ud83c\uddf8 GitOps Features (English)</li> <li>\ud83c\uddfa\ud83c\uddf8 Advanced Examples (English)</li> </ul> <p>Redirecting to GitOps documentation...</p> <p>If you are not redirected automatically, click here.</p>"},{"location":"idempotency/","title":"Idempotency in Sloth Runner Modules","text":""},{"location":"idempotency/#overview","title":"Overview","text":"<p>Idempotency is a critical feature in configuration management and infrastructure automation. An operation is idempotent if running it multiple times produces the same result as running it once. In Sloth Runner, all configuration modules now support idempotency.</p>"},{"location":"idempotency/#what-is-idempotency","title":"What is Idempotency?","text":"<p>Idempotency means that you can run the same task multiple times safely without causing unwanted side effects. For example:</p> <ul> <li>Installing a package that's already installed should not reinstall it</li> <li>Creating a user that already exists should not fail or recreate</li> <li>Starting a service that's already running should not restart it</li> </ul>"},{"location":"idempotency/#benefits","title":"Benefits","text":"<ol> <li>Safety: Run playbooks multiple times without fear</li> <li>Performance: Skip unnecessary operations</li> <li>Predictability: Always know what changed</li> <li>Debugging: Clear feedback on what was modified</li> </ol>"},{"location":"idempotency/#idempotent-modules","title":"Idempotent Modules","text":""},{"location":"idempotency/#package-management-pkg","title":"Package Management (pkg)","text":"<p>The <code>pkg</code> module now checks if packages are already installed before attempting installation:</p> <pre><code>task({\n    name = \"install-nginx\",\n    run = function()\n        -- First run: installs nginx\n        -- Subsequent runs: returns changed=false\n        local result = pkg.install({packages = \"nginx\"})\n\n        if result.changed then\n            print(\"Nginx was installed\")\n        else\n            print(\"Nginx already installed\")\n        end\n    end\n})\n</code></pre> <p>Behavior: - <code>pkg.install()</code>: Only installs packages that aren't already installed - <code>pkg.remove()</code>: Only removes packages that are actually installed - Returns <code>changed=true</code> only when actual changes are made</p>"},{"location":"idempotency/#user-management-user","title":"User Management (user)","text":"<p>User operations check if the user exists before creating:</p> <pre><code>task({\n    name = \"create-app-user\",\n    run = function()\n        local result = user.create({\n            username = \"appuser\",\n            home = \"/home/appuser\",\n            shell = \"/bin/bash\",\n            groups = {\"docker\", \"sudo\"}\n        })\n\n        if result.changed then\n            print(\"User created\")\n        else\n            print(\"User already exists\")\n        end\n    end\n})\n</code></pre> <p>Behavior: - <code>user.create()</code>: Returns <code>changed=false</code> if user already exists - Future: Will verify properties match desired state</p>"},{"location":"idempotency/#systemd-service-management-systemd","title":"Systemd Service Management (systemd)","text":"<p>Service operations check current state before making changes:</p> <pre><code>task({\n    name = \"manage-nginx\",\n    run = function()\n        -- Check if already running\n        local start_result = systemd.start({name = \"nginx\"})\n\n        -- Check if already enabled\n        local enable_result = systemd.enable({name = \"nginx\"})\n\n        print(\"Started: \" .. tostring(start_result.changed))\n        print(\"Enabled: \" .. tostring(enable_result.changed))\n    end\n})\n</code></pre> <p>Behavior: - <code>systemd.start()</code>: Returns <code>changed=false</code> if already active - <code>systemd.stop()</code>: Returns <code>changed=false</code> if already inactive - <code>systemd.enable()</code>: Returns <code>changed=false</code> if already enabled - <code>systemd.disable()</code>: Returns <code>changed=false</code> if already disabled</p>"},{"location":"idempotency/#file-operations-file_ops","title":"File Operations (file_ops)","text":"<p>File operations compare checksums to detect changes:</p> <pre><code>task({\n    name = \"copy-config\",\n    run = function()\n        local result = file_ops.copy({\n            src = \"/source/nginx.conf\",\n            dest = \"/etc/nginx/nginx.conf\",\n            mode = \"0644\"\n        })\n\n        if result.changed then\n            print(\"Configuration updated\")\n            systemd.restart({name = \"nginx\"})\n        else\n            print(\"Configuration unchanged\")\n        end\n    end\n})\n</code></pre> <p>Behavior: - <code>file_ops.copy()</code>: Compares checksums, only copies if different - <code>file_ops.lineinfile()</code>: Only modifies file if line doesn't match - <code>file_ops.blockinfile()</code>: Only updates if block content differs - <code>file_ops.replace()</code>: Only writes if replacements are made</p>"},{"location":"idempotency/#understanding-the-response-format","title":"Understanding the Response Format","text":"<p>All idempotent operations now return a table with:</p> <pre><code>{\n    changed = true|false,  -- Did the operation make changes?\n    message = \"...\",       -- Human-readable description\n    -- Module-specific fields\n}\n</code></pre>"},{"location":"idempotency/#example-response-patterns","title":"Example Response Patterns","text":"<p>Package Installation (already installed): <pre><code>{\n    changed = false,\n    message = \"All packages already installed\"\n}\n</code></pre></p> <p>Package Installation (newly installed): <pre><code>{\n    changed = true,\n    installed = \"nginx, vim\",\n    output = \"...\"\n}\n</code></pre></p> <p>Service Start (already running): <pre><code>{\n    changed = false,\n    message = \"Service nginx is already active\"\n}\n</code></pre></p> <p>Service Start (started now): <pre><code>{\n    changed = true,\n    message = \"Service nginx started\"\n}\n</code></pre></p>"},{"location":"idempotency/#best-practices","title":"Best Practices","text":""},{"location":"idempotency/#1-check-changed-flag-before-dependent-actions","title":"1. Check Changed Flag Before Dependent Actions","text":"<pre><code>task({\n    name = \"update-and-restart\",\n    run = function()\n        local result = file_ops.copy({\n            src = \"app.conf\",\n            dest = \"/etc/app/app.conf\"\n        })\n\n        -- Only restart if configuration changed\n        if result.changed then\n            systemd.restart({name = \"app\"})\n        end\n    end\n})\n</code></pre>"},{"location":"idempotency/#2-use-idempotency-for-convergent-state","title":"2. Use Idempotency for Convergent State","text":"<pre><code>task({\n    name = \"ensure-state\",\n    run = function()\n        -- Run multiple times, always converges to desired state\n        pkg.install({packages = {\"nginx\", \"vim\", \"git\"}})\n\n        user.create({\n            username = \"webuser\",\n            groups = {\"www-data\"}\n        })\n\n        systemd.enable({name = \"nginx\"})\n        systemd.start({name = \"nginx\"})\n    end\n})\n</code></pre>"},{"location":"idempotency/#3-conditional-logic-based-on-changes","title":"3. Conditional Logic Based on Changes","text":"<pre><code>task({\n    name = \"deploy-app\",\n    run = function()\n        local deps_changed = pkg.install({\n            packages = {\"python3\", \"python3-pip\"}\n        }).changed\n\n        local code_changed = file_ops.copy({\n            src = \"app.py\",\n            dest = \"/opt/app/app.py\"\n        }).changed\n\n        -- Only restart if dependencies or code changed\n        if deps_changed or code_changed then\n            print(\"Changes detected, restarting service\")\n            systemd.restart({name = \"myapp\"})\n        else\n            print(\"No changes, service continues running\")\n        end\n    end\n})\n</code></pre>"},{"location":"idempotency/#testing-idempotency","title":"Testing Idempotency","text":"<p>To test if your tasks are idempotent:</p> <ol> <li> <p>First Run: Should make changes    <pre><code>sloth-runner run deployment.sloth\n# Output: changed=true\n</code></pre></p> </li> <li> <p>Second Run: Should skip already-done work    <pre><code>sloth-runner run deployment.sloth\n# Output: changed=false\n</code></pre></p> </li> <li> <p>Verify No Side Effects: Check that running twice doesn't cause issues    <pre><code># Run multiple times\nfor i in {1..5}; do\n    sloth-runner run deployment.sloth\ndone\n</code></pre></p> </li> </ol>"},{"location":"idempotency/#migration-guide","title":"Migration Guide","text":""},{"location":"idempotency/#old-code-non-idempotent","title":"Old Code (Non-Idempotent)","text":"<pre><code>task({\n    name = \"setup\",\n    run = function()\n        -- Always attempts to install\n        pkg.install({packages = \"nginx\"})\n\n        -- Always attempts to create\n        user.create({username = \"webuser\"})\n\n        -- Always starts (might fail if running)\n        systemd.start({name = \"nginx\"})\n    end\n})\n</code></pre>"},{"location":"idempotency/#new-code-idempotent","title":"New Code (Idempotent)","text":"<pre><code>task({\n    name = \"setup\",\n    run = function()\n        -- Checks first, installs only if needed\n        local pkg_result = pkg.install({packages = \"nginx\"})\n\n        -- Checks if user exists first\n        local user_result = user.create({username = \"webuser\"})\n\n        -- Checks if already running\n        local start_result = systemd.start({name = \"nginx\"})\n\n        -- Report what changed\n        if pkg_result.changed or user_result.changed or start_result.changed then\n            print(\"System state updated\")\n        else\n            print(\"System already in desired state\")\n        end\n    end\n})\n</code></pre>"},{"location":"idempotency/#module-support-status","title":"Module Support Status","text":"Module Idempotent Notes pkg \u2705 Checks package installation status user \u2705 Checks user existence systemd \u2705 Checks service state file_ops.copy \u2705 Compares checksums file_ops.lineinfile \u2705 Checks line existence file_ops.blockinfile \u2705 Checks block content file_ops.replace \u2705 Compares before/after ssh \ud83d\udd04 Planned incus \ud83d\udd04 Planned"},{"location":"idempotency/#future-enhancements","title":"Future Enhancements","text":"<ol> <li>Property Verification: For <code>user.create()</code>, verify all properties match (not just existence)</li> <li>Atomic Operations: Ensure all-or-nothing for complex operations</li> <li>Diff Mode: Show what would change without making changes</li> <li>Check Mode: Dry-run to preview changes</li> <li>Change Tracking: Detailed logs of what changed</li> </ol>"},{"location":"idempotency/#conclusion","title":"Conclusion","text":"<p>Idempotency makes Sloth Runner safe, predictable, and efficient. You can now run your automation scripts confidently, knowing they won't cause unwanted side effects on repeated executions.</p>"},{"location":"latest-features/","title":"Latest Features","text":"<p>\ud83d\udcda Documentation</p> <p>For the latest features and updates, please visit:</p> <ul> <li>\ud83c\uddfa\ud83c\uddf8 Enterprise Features (English)</li> <li>\ud83c\uddfa\ud83c\uddf8 AI Features (English)</li> <li>\ud83c\uddfa\ud83c\uddf8 GitOps Features (English)</li> <li>\ud83c\uddfa\ud83c\uddf8 Advanced Features (English)</li> </ul> <p>Redirecting to Enterprise Features...</p> <p>If you are not redirected automatically, click here.</p>"},{"location":"modules-list-command/","title":"Module Documentation Command","text":"<p>The <code>sloth-runner modules list</code> command provides comprehensive documentation for all built-in modules available in Sloth Runner.</p>"},{"location":"modules-list-command/#usage","title":"Usage","text":"<pre><code>sloth-runner modules list [flags]\n</code></pre>"},{"location":"modules-list-command/#flags","title":"Flags","text":"<ul> <li><code>--module, -m</code>: Show details for a specific module</li> <li><code>--format, -f</code>: Output format: <code>pretty</code> (default) or <code>json</code></li> </ul>"},{"location":"modules-list-command/#examples","title":"Examples","text":""},{"location":"modules-list-command/#list-all-modules","title":"List All Modules","text":"<p>Display all available modules with their functions:</p> <pre><code>sloth-runner modules list\n</code></pre> <p>Output: <pre><code>Sloth Runner - Available Modules\n\n# pkg - Package management for multiple Linux distributions\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Function         \u2502 Description                 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 pkg.install      \u2502 Install packages            \u2502\n\u2502 pkg.remove       \u2502 Remove packages             \u2502\n\u2502 pkg.update       \u2502 Update package cache        \u2502\n\u2502 pkg.upgrade      \u2502 Upgrade all packages        \u2502\n\u2502 pkg.is_installed \u2502 Check if package installed  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n# systemd - Systemd service management\n...\n</code></pre></p>"},{"location":"modules-list-command/#view-specific-module-documentation","title":"View Specific Module Documentation","text":"<p>Get detailed documentation including examples for a specific module:</p> <pre><code>sloth-runner modules list --module pkg\n</code></pre> <p>Output: <pre><code>Sloth Runner - Available Modules\n\n# pkg - Package management for multiple Linux distributions\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Function         \u2502 Description                 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 pkg.install      \u2502 Install packages            \u2502\n\u2502 pkg.remove       \u2502 Remove packages             \u2502\n\u2502 pkg.update       \u2502 Update package cache        \u2502\n\u2502 pkg.upgrade      \u2502 Upgrade all packages        \u2502\n\u2502 pkg.is_installed \u2502 Check if package installed  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n# Examples\n\nINFO pkg.install\n  Parameters: {packages = {...}, target = 'agent_name'}\n  pkg.install({\n      packages = {\"nginx\", \"curl\"},\n      target = \"web-server\"\n  })\n\nINFO pkg.remove\n  Parameters: {packages = {...}, target = 'agent_name'}\n  pkg.remove({\n      packages = {\"apache2\"},\n      target = \"web-server\"\n  })\n\nINFO pkg.update\n  Parameters: {target = 'agent_name'}\n  pkg.update({\n      target = \"web-server\"\n  })\n\nINFO pkg.upgrade\n  Parameters: {target = 'agent_name'}\n  pkg.upgrade({\n      target = \"web-server\"\n  })\n\nINFO pkg.is_installed\n  Parameters: {package = 'name', target = 'agent_name'}\n  local installed = pkg.is_installed({\n      package = \"nginx\",\n      target = \"web-server\"\n  })\n</code></pre></p>"},{"location":"modules-list-command/#json-output","title":"JSON Output","text":"<p>Get machine-readable JSON output for integration with other tools:</p> <pre><code>sloth-runner modules list --format json\n</code></pre> <p>Output: <pre><code>[\n  {\n    \"Name\": \"pkg\",\n    \"Description\": \"Package management for multiple Linux distributions\",\n    \"Functions\": [\n      {\n        \"Name\": \"pkg.install\",\n        \"Description\": \"Install one or more packages\",\n        \"Example\": \"pkg.install({\\n    packages = {\\\"nginx\\\", \\\"curl\\\"},\\n    target = \\\"web-server\\\"\\n})\",\n        \"Parameters\": \"{packages = {...}, target = 'agent_name'}\"\n      }\n    ]\n  }\n]\n</code></pre></p>"},{"location":"modules-list-command/#query-json-output-with-jq","title":"Query JSON Output with jq","text":"<p>Count total modules: <pre><code>sloth-runner modules list --format json | jq 'length'\n# Output: 21\n</code></pre></p> <p>List all module names: <pre><code>sloth-runner modules list --format json | jq -r '.[].Name'\n# Output:\n# pkg\n# systemd\n# user\n# ssh\n# file\n# ...\n</code></pre></p> <p>Count functions per module: <pre><code>sloth-runner modules list --format json | \\\n  jq -r '.[] | .Name + \": \" + (.Functions | length | tostring) + \" functions\"'\n# Output:\n# pkg: 5 functions\n# systemd: 8 functions\n# user: 8 functions\n# ...\n</code></pre></p> <p>Get all function names from a specific module: <pre><code>sloth-runner modules list --module systemd --format json | \\\n  jq -r '.[].Functions[].Name'\n# Output:\n# systemd.enable\n# systemd.disable\n# systemd.start\n# systemd.stop\n# ...\n</code></pre></p>"},{"location":"modules-list-command/#available-modules","title":"Available Modules","text":"<p>Sloth Runner includes 21 built-in modules with 69+ functions:</p>"},{"location":"modules-list-command/#core-infrastructure","title":"Core Infrastructure","text":"<ul> <li>pkg (5 functions) - Package management for multiple Linux distributions</li> <li>systemd (8 functions) - Systemd service management</li> <li>user (8 functions) - Linux user and group management</li> <li>ssh (4 functions) - SSH key and configuration management</li> <li>file (9 functions) - File and directory operations</li> </ul>"},{"location":"modules-list-command/#development-utilities","title":"Development &amp; Utilities","text":"<ul> <li>http (2 functions) - HTTP client operations</li> <li>cmd (1 function) - Execute shell commands</li> <li>json (2 functions) - JSON encoding/decoding</li> <li>yaml (2 functions) - YAML encoding/decoding</li> <li>log (4 functions) - Logging functions</li> <li>crypto (3 functions) - Cryptographic operations</li> <li>database (3 functions) - Database operations (PostgreSQL, MySQL, SQLite)</li> </ul>"},{"location":"modules-list-command/#devops-cloud","title":"DevOps &amp; Cloud","text":"<ul> <li>terraform (4 functions) - Terraform operations</li> <li>pulumi (3 functions) - Pulumi operations</li> <li>docker (2 functions) - Docker operations</li> <li>kubernetes (2 functions) - Kubernetes operations</li> </ul>"},{"location":"modules-list-command/#cloud-providers","title":"Cloud Providers","text":"<ul> <li>aws (2 functions) - AWS operations</li> <li>azure (1 function) - Azure operations</li> <li>gcp (1 function) - Google Cloud Platform operations</li> </ul>"},{"location":"modules-list-command/#integrations","title":"Integrations","text":"<ul> <li>slack (1 function) - Slack notifications</li> <li>goroutine (2 functions) - Concurrent execution with goroutines</li> </ul>"},{"location":"modules-list-command/#use-cases","title":"Use Cases","text":""},{"location":"modules-list-command/#1-learning-sloth-runner","title":"1. Learning Sloth Runner","text":"<p>When starting with Sloth Runner, use <code>modules list</code> to discover available modules:</p> <pre><code># See all available modules\nsloth-runner modules list\n\n# Learn about a specific module\nsloth-runner modules list --module pkg\n</code></pre>"},{"location":"modules-list-command/#2-quick-reference","title":"2. Quick Reference","text":"<p>Keep the command handy for quick reference while writing workflows:</p> <pre><code># Check function signature\nsloth-runner modules list --module file | grep \"file.template\"\n\n# See example usage\nsloth-runner modules list --module systemd\n</code></pre>"},{"location":"modules-list-command/#3-integration-with-editors","title":"3. Integration with Editors","text":"<p>Use JSON output to integrate with text editors or IDEs:</p> <pre><code># Generate autocomplete data\nsloth-runner modules list --format json &gt; modules.json\n</code></pre>"},{"location":"modules-list-command/#4-documentation-generation","title":"4. Documentation Generation","text":"<p>Generate custom documentation for your team:</p> <pre><code># Extract all examples\nsloth-runner modules list --format json | \\\n  jq -r '.[] | .Functions[] | \"## \" + .Name + \"\\n\\n```lua\\n\" + .Example + \"\\n```\\n\"'\n</code></pre>"},{"location":"modules-list-command/#5-cicd-integration","title":"5. CI/CD Integration","text":"<p>Validate module availability in CI pipelines:</p> <pre><code># Check if a module exists\nif sloth-runner modules list --module pkg &amp;&gt;/dev/null; then\n  echo \"pkg module is available\"\nfi\n</code></pre>"},{"location":"modules-list-command/#tips","title":"Tips","text":"<ol> <li> <p>Use module filter for focused documentation:    <pre><code>sloth-runner modules list --module &lt;name&gt;\n</code></pre></p> </li> <li> <p>JSON output is perfect for scripting:    <pre><code>sloth-runner modules list --format json\n</code></pre></p> </li> <li> <p>Combine with jq for powerful queries:    <pre><code>sloth-runner modules list --format json | jq '.[] | select(.Name == \"pkg\")'\n</code></pre></p> </li> <li> <p>Quick search with grep:    <pre><code>sloth-runner modules list | grep -A 5 \"pkg.install\"\n</code></pre></p> </li> </ol>"},{"location":"modules-list-command/#see-also","title":"See Also","text":"<ul> <li>Module Reference - Detailed module documentation</li> <li>Package Management - pkg module details</li> <li>Systemd Management - systemd module details</li> <li>User Management - user module details</li> </ul>"},{"location":"multi-cloud-excellence/","title":"Multi-Cloud Excellence","text":"<p>\ud83d\udcda Documentation</p> <p>For Multi-Cloud features and best practices, please visit:</p> <ul> <li>\ud83c\uddfa\ud83c\uddf8 Enterprise Features (English)</li> <li>\ud83c\uddfa\ud83c\uddf8 Advanced Features (English)</li> <li>\ud83d\udce6 Cloud Modules</li> </ul> <p>Redirecting to Enterprise Features...</p> <p>If you are not redirected automatically, click here.</p>"},{"location":"nvim-plugin/","title":"Neovim Plugin","text":"<p>\ud83d\udcda Documentation</p> <p>For Neovim Plugin documentation, please visit:</p> <ul> <li>\ud83c\uddfa\ud83c\uddf8 English Version</li> <li>\ud83c\udde7\ud83c\uddf7 Vers\u00e3o em Portugu\u00eas</li> <li>\ud83c\udde8\ud83c\uddf3 \u4e2d\u6587\u7248\u672c</li> </ul> <p>Redirecting to English version...</p> <p>If you are not redirected automatically, click here.</p>"},{"location":"repl/","title":"REPL (Interactive Shell)","text":"<p>\ud83d\udcda Documentation</p> <p>For REPL documentation, please visit:</p> <ul> <li>\ud83c\uddfa\ud83c\uddf8 English Version</li> <li>\ud83c\udde7\ud83c\uddf7 Vers\u00e3o em Portugu\u00eas</li> <li>\ud83c\udde8\ud83c\uddf3 \u4e2d\u6587\u7248\u672c</li> </ul> <p>Redirecting to English version...</p> <p>If you are not redirected automatically, click here.</p>"},{"location":"run-syntax/","title":"Sloth Runner <code>run</code> Command - Complete Syntax Guide","text":""},{"location":"run-syntax/#executive-summary","title":"Executive Summary","text":"<p>The <code>sloth-runner run</code> command is the core execution engine that orchestrates task automation both locally and remotely via SSH. This document provides the definitive syntax reference with special emphasis on secure password handling via stdin.</p>"},{"location":"run-syntax/#quick-reference","title":"\u26a1 Quick Reference","text":""},{"location":"run-syntax/#basic-syntax-structure","title":"Basic Syntax Structure","text":"<pre><code>sloth-runner run &lt;stack-name&gt; \\\n  --file &lt;sloth-file&gt; \\\n  [--ssh &lt;profile-name&gt;] \\\n  [--ssh-password-stdin -] \\\n  [&lt; password-source] \\\n  ['&lt;remote-command&gt;']\n</code></pre>"},{"location":"run-syntax/#command-anatomy","title":"Command Anatomy","text":"<pre><code>sloth-runner run production-deploy    # Stack identifier\n  --file deploy.sloth                 # Task definition file\n  --ssh prod-server                   # SSH profile name\n  --ssh-password-stdin -               # Password from stdin flag\n  &lt; pass.txt                           # Password source (redirection)\n  'sudo systemctl restart nginx'       # Remote command to execute\n</code></pre>"},{"location":"run-syntax/#complete-parameter-reference","title":"\ud83d\udccb Complete Parameter Reference","text":""},{"location":"run-syntax/#positional-arguments","title":"Positional Arguments","text":""},{"location":"run-syntax/#stack-name-required","title":"<code>&lt;stack-name&gt;</code> (Required)","text":"<p>The stack name serves as a unique identifier for this execution context, maintaining state across runs.</p> <p>Format: Alphanumeric characters, hyphens, and underscores Length: 1-50 characters Pattern: <code>^[a-zA-Z][a-zA-Z0-9_-]*$</code></p> <p>Examples: <pre><code>production-deploy\nstaging-2024-01-15\nmaintenance-task-001\ndb-backup-daily\n</code></pre></p> <p>Best Practice: Use timestamp for uniqueness <pre><code>STACK=\"deploy-$(date +%Y%m%d-%H%M%S)\"\nsloth-runner run \"$STACK\" --file deploy.sloth\n</code></pre></p>"},{"location":"run-syntax/#remote-command-optional-with-ssh","title":"<code>'&lt;remote-command&gt;'</code> (Optional with SSH)","text":"<p>The command to execute on the remote host. Required when using <code>--ssh</code>.</p> <p>Important: Always quote complex commands to prevent shell interpretation issues.</p> <pre><code># Simple command\n'ls -la'\n\n# Complex command with pipes\n'ps aux | grep nginx | grep -v grep'\n\n# Multi-line command\n'cd /app &amp;&amp; \\\n git pull origin main &amp;&amp; \\\n npm install &amp;&amp; \\\n npm run build'\n\n# Command with special characters\n'echo \"Status: $(systemctl is-active nginx)\"'\n</code></pre>"},{"location":"run-syntax/#required-flags","title":"Required Flags","text":""},{"location":"run-syntax/#-file-sloth-file-required","title":"<code>--file &lt;sloth-file&gt;</code> (Required)","text":"<p>Path to the Sloth Runner configuration file containing task definitions.</p> <p>Path Resolution: - Relative: Resolved from current working directory - Absolute: Used as-is - Home expansion: <code>~/</code> is expanded to user home</p> <p>Examples: <pre><code>--file deploy.sloth              # Relative path\n--file ./tasks/deploy.sloth      # Relative with directory\n--file /opt/tasks/deploy.sloth   # Absolute path\n--file ~/sloth/deploy.sloth      # Home directory\n--file $TASK_DIR/deploy.sloth    # Environment variable\n</code></pre></p>"},{"location":"run-syntax/#ssh-related-flags","title":"SSH-Related Flags","text":""},{"location":"run-syntax/#-ssh-profile-name-required-for-remote-execution","title":"<code>--ssh &lt;profile-name&gt;</code> (Required for Remote Execution)","text":"<p>Specifies the SSH profile to use for remote execution. The profile must exist in the SQLite database.</p> <p>Validation: - Profile must exist (<code>sloth-runner ssh list</code> to verify) - Profile must have valid connection details - Key file (if specified) must be accessible</p> <p>Example: <pre><code>--ssh production-web\n--ssh staging-database\n--ssh bastion-host\n</code></pre></p>"},{"location":"run-syntax/#-ssh-password-stdin-optional","title":"<code>--ssh-password-stdin -</code> (Optional)","text":"<p>Instructs the command to read the SSH password from standard input. The hyphen (<code>-</code>) is mandatory and indicates stdin as the source.</p> <p>Critical Requirements: 1. Must be followed by exactly one hyphen: <code>-</code> 2. Cannot be used with key-based authentication 3. Must be paired with input redirection or pipe 4. Password must not contain trailing newline</p> <p>Syntax Variations: <pre><code># From file\n--ssh-password-stdin - &lt; pass.txt\n\n# From pipe\necho -n \"password\" | sloth-runner run stack --file task.sloth --ssh server --ssh-password-stdin -\n\n# From process substitution\n--ssh-password-stdin - &lt; &lt;(get-password-command)\n\n# From here-doc (NOT RECOMMENDED - visible in process list)\n--ssh-password-stdin - &lt;&lt;&lt; \"password\"\n</code></pre></p>"},{"location":"run-syntax/#password-handling-critical-security-section","title":"\ud83d\udd10 Password Handling - Critical Security Section","text":""},{"location":"run-syntax/#the-golden-rules","title":"The Golden Rules","text":"<ol> <li>NEVER put passwords directly in the command line</li> <li>ALWAYS use <code>echo -n</code> or <code>printf</code> to avoid newlines</li> <li>IMMEDIATELY destroy password files after use</li> <li>NEVER commit password files to version control</li> </ol>"},{"location":"run-syntax/#method-1-file-redirection-most-common","title":"Method 1: File Redirection (Most Common)","text":"<pre><code># Step 1: Create password file securely\ntouch pass.txt\nchmod 600 pass.txt  # CRITICAL: Set permissions BEFORE writing password\necho -n \"MySecureP@ssw0rd\" &gt; pass.txt\n\n# Step 2: Use the password\nsloth-runner run deployment \\\n  --file deploy.sloth \\\n  --ssh production \\\n  --ssh-password-stdin - &lt; pass.txt \\\n  'sudo systemctl restart application'\n\n# Step 3: Securely destroy the file\nshred -vzu pass.txt  # Overwrite and remove\n</code></pre>"},{"location":"run-syntax/#method-2-environment-variable-cicd","title":"Method 2: Environment Variable (CI/CD)","text":"<pre><code># In CI/CD pipeline (e.g., GitHub Actions, Jenkins)\nexport SSH_PASSWORD=\"$SECRET_SSH_PASSWORD\"  # From secure vault\n\n# Execute command\nsloth-runner run \"$BUILD_NUMBER\" \\\n  --file deploy.sloth \\\n  --ssh production \\\n  --ssh-password-stdin - &lt; &lt;(echo -n \"$SSH_PASSWORD\") \\\n  'deployment-script.sh'\n\n# Clear from environment\nunset SSH_PASSWORD\n</code></pre>"},{"location":"run-syntax/#method-3-password-manager-integration","title":"Method 3: Password Manager Integration","text":"<pre><code># Using 'pass' password manager\npass show ssh/production | sloth-runner run deployment \\\n  --file deploy.sloth \\\n  --ssh production \\\n  --ssh-password-stdin - \\\n  'restart-services.sh'\n\n# Using 1Password CLI\nop get item \"Production SSH\" --fields password | \\\n  sloth-runner run deployment \\\n  --file deploy.sloth \\\n  --ssh production \\\n  --ssh-password-stdin - \\\n  'deployment-task.sh'\n\n# Using HashiCorp Vault\nvault kv get -field=password secret/ssh/production | \\\n  sloth-runner run deployment \\\n  --file deploy.sloth \\\n  --ssh production \\\n  --ssh-password-stdin - \\\n  'secure-task.sh'\n</code></pre>"},{"location":"run-syntax/#method-4-interactive-input-manual-only","title":"Method 4: Interactive Input (Manual Only)","text":"<pre><code># For manual, one-time execution\nsloth-runner run manual-task \\\n  --file task.sloth \\\n  --ssh server \\\n  --ssh-password-stdin -\n\n# Terminal will wait for input\n# Type password and press Ctrl+D (EOF)\n# Password will not be echoed\n</code></pre>"},{"location":"run-syntax/#common-password-file-errors-and-solutions","title":"Common Password File Errors and Solutions","text":""},{"location":"run-syntax/#error-authentication-failed-due-to-newline","title":"Error: Authentication Failed Due to Newline","text":"<p>Problem: <pre><code>echo \"password\" &gt; pass.txt  # WRONG: adds newline\n</code></pre></p> <p>Solution: <pre><code>echo -n \"password\" &gt; pass.txt  # CORRECT: no newline\n# OR\nprintf \"password\" &gt; pass.txt   # CORRECT: no newline\n</code></pre></p> <p>Verification: <pre><code># Check for newline (0a in hex)\nhexdump -C pass.txt\n# Last byte should NOT be 0a\n\n# Check file size\nwc -c pass.txt\n# Should match exact password length\n</code></pre></p>"},{"location":"run-syntax/#error-password-visible-in-process-list","title":"Error: Password Visible in Process List","text":"<p>Problem: <pre><code>sloth-runner run stack --ssh server --password \"visible\"  # NEVER DO THIS\n</code></pre></p> <p>Solution: <pre><code>sloth-runner run stack --ssh server --ssh-password-stdin - &lt; pass.txt\n</code></pre></p>"},{"location":"run-syntax/#error-password-file-permissions-too-open","title":"Error: Password File Permissions Too Open","text":"<p>Problem: <pre><code>echo -n \"password\" &gt; pass.txt  # Created with default permissions (644)\n</code></pre></p> <p>Solution: <pre><code>touch pass.txt\nchmod 600 pass.txt  # Set permissions FIRST\necho -n \"password\" &gt; pass.txt\n</code></pre></p>"},{"location":"run-syntax/#complete-usage-examples","title":"\ud83c\udfaf Complete Usage Examples","text":""},{"location":"run-syntax/#example-1-basic-local-execution","title":"Example 1: Basic Local Execution","text":"<pre><code># No SSH, local execution only\nsloth-runner run local-task \\\n  --file maintenance.sloth\n</code></pre>"},{"location":"run-syntax/#example-2-remote-execution-with-ssh-key","title":"Example 2: Remote Execution with SSH Key","text":"<pre><code># Using SSH key authentication (recommended)\nsloth-runner run production-deploy \\\n  --file deploy.sloth \\\n  --ssh prod-web \\\n  'cd /app &amp;&amp; git pull &amp;&amp; docker-compose up -d'\n</code></pre>"},{"location":"run-syntax/#example-3-remote-execution-with-password","title":"Example 3: Remote Execution with Password","text":"<pre><code>#!/bin/bash\n# secure-deploy.sh\n\nset -euo pipefail\n\n# Configuration\nSTACK=\"deploy-$(date +%Y%m%d-%H%M%S)\"\nTASK_FILE=\"deploy.sloth\"\nSSH_PROFILE=\"legacy-server\"\nPASSWORD_FILE=\"/tmp/.ssh_pass_$$\"  # Unique temp file\n\n# Create secure password file\ntouch \"$PASSWORD_FILE\"\nchmod 600 \"$PASSWORD_FILE\"\necho -n \"SecurePassword123!\" &gt; \"$PASSWORD_FILE\"\n\n# Execute deployment\nsloth-runner run \"$STACK\" \\\n  --file \"$TASK_FILE\" \\\n  --ssh \"$SSH_PROFILE\" \\\n  --ssh-password-stdin - &lt; \"$PASSWORD_FILE\" \\\n  'sudo /opt/scripts/deploy.sh'\n\n# Clean up immediately\nshred -u \"$PASSWORD_FILE\"\n</code></pre>"},{"location":"run-syntax/#example-4-multi-command-execution","title":"Example 4: Multi-Command Execution","text":"<pre><code># Execute multiple commands in sequence\nsloth-runner run maintenance \\\n  --file maintenance.sloth \\\n  --ssh production \\\n  'cd /app &amp;&amp; \\\n   echo \"Starting maintenance...\" &amp;&amp; \\\n   docker-compose down &amp;&amp; \\\n   docker system prune -f &amp;&amp; \\\n   docker-compose up -d &amp;&amp; \\\n   echo \"Maintenance complete\"'\n</code></pre>"},{"location":"run-syntax/#example-5-conditional-execution","title":"Example 5: Conditional Execution","text":"<pre><code># Execute based on condition\nsloth-runner run conditional-deploy \\\n  --file deploy.sloth \\\n  --ssh staging \\\n  'if [ -f /app/.deploy_lock ]; then \\\n     echo \"Deploy locked, aborting\"; \\\n     exit 1; \\\n   else \\\n     touch /app/.deploy_lock &amp;&amp; \\\n     /opt/deploy.sh &amp;&amp; \\\n     rm /app/.deploy_lock; \\\n   fi'\n</code></pre>"},{"location":"run-syntax/#example-6-pipeline-integration","title":"Example 6: Pipeline Integration","text":"<pre><code># GitHub Actions example\n- name: Deploy to Production\n  env:\n    SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}\n  run: |\n    # Create temporary password file\n    PASS_FILE=\"$(mktemp)\"\n    chmod 600 \"$PASS_FILE\"\n    echo -n \"$SSH_PASSWORD\" &gt; \"$PASS_FILE\"\n\n    # Run deployment\n    sloth-runner run \"deploy-${{ github.run_id }}\" \\\n      --file .sloth/deploy.sloth \\\n      --ssh production \\\n      --ssh-password-stdin - &lt; \"$PASS_FILE\" \\\n      'sudo systemctl restart application'\n\n    # Cleanup\n    shred -u \"$PASS_FILE\"\n</code></pre>"},{"location":"run-syntax/#execution-flow-diagram","title":"\ud83d\udd04 Execution Flow Diagram","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  User Executes   \u2502\n\u2502  sloth-runner    \u2502\n\u2502      run         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n         v\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Parse Command   \u2502\n\u2502   Line Args      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n         v\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Load Stack      \u2502\u2500\u2500\u2500\u2500&gt;\u2502  Create New      \u2502\n\u2502  Configuration   \u2502     \u2502  Stack if Needed \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n         v\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Load Sloth      \u2502\n\u2502  File (.sloth)   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n         v\n      \u250c\u2500\u2500\u2534\u2500\u2500\u2510\n      \u2502 SSH \u2502 No\n      \u2502Flag?\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n      \u2514\u2500\u2500\u252c\u2500\u2500\u2518          \u2502\n         \u2502Yes          v\n         \u2502      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n         v      \u2502  Execute Tasks   \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502    Locally       \u2502\n\u2502  Load SSH        \u2502   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2502  Profile from    \u2502\n\u2502  SQLite          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n         v\n    \u250c\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2510\n    \u2502Password \u2502 No\n    \u2502 Flag?   \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2518          \u2502\n         \u2502Yes            v\n         v        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502  Use SSH Key     \u2502\n\u2502  Read Password   \u2502    \u2502  from Profile    \u2502\n\u2502  from STDIN      \u2502    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518            \u2502\n         \u2502                       \u2502\n         v                       v\n    \u250c\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2518\n    \u2502  Establish SSH        \u2502\n    \u2502  Connection           \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                \u2502\n                v\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502  Execute Remote       \u2502\n    \u2502  Command              \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                \u2502\n                v\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502  Capture Output       \u2502\n    \u2502  and Exit Code        \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                \u2502\n                v\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502  Update Stack State   \u2502\n    \u2502  and Audit Log        \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"run-syntax/#advanced-configuration","title":"\u2699\ufe0f Advanced Configuration","text":""},{"location":"run-syntax/#stack-state-management","title":"Stack State Management","text":"<p>Stack state is persisted across executions:</p> <pre><code># Initial run creates stack\nsloth-runner run my-deployment --file deploy.sloth --ssh prod 'echo \"v1.0\"'\n\n# Subsequent runs use existing stack\nsloth-runner run my-deployment --file deploy.sloth --ssh prod 'echo \"v1.1\"'\n\n# View stack state\nsloth-runner stack show my-deployment\n</code></pre>"},{"location":"run-syntax/#parallel-execution","title":"Parallel Execution","text":"<p>Execute on multiple hosts simultaneously:</p> <pre><code>#!/bin/bash\n# parallel-deploy.sh\n\nHOSTS=(\"web1\" \"web2\" \"web3\")\nPIDS=()\n\nfor host in \"${HOSTS[@]}\"; do\n    sloth-runner run \"deploy-$host\" \\\n      --file deploy.sloth \\\n      --ssh \"$host\" \\\n      'deployment-script.sh' &amp;\n    PIDS+=($!)\ndone\n\n# Wait for all to complete\nfor pid in \"${PIDS[@]}\"; do\n    wait \"$pid\"\n    echo \"Process $pid completed with status $?\"\ndone\n</code></pre>"},{"location":"run-syntax/#error-handling","title":"Error Handling","text":"<pre><code>#!/bin/bash\n# robust-execution.sh\n\nset -euo pipefail\ntrap 'echo \"Error on line $LINENO\"' ERR\n\nexecute_with_retry() {\n    local max_attempts=3\n    local attempt=1\n\n    while [ $attempt -le $max_attempts ]; do\n        echo \"Attempt $attempt of $max_attempts\"\n\n        if sloth-runner run \"task-$attempt\" \\\n             --file task.sloth \\\n             --ssh server \\\n             \"$1\"; then\n            echo \"Success on attempt $attempt\"\n            return 0\n        fi\n\n        echo \"Failed on attempt $attempt\"\n        ((attempt++))\n        sleep 5\n    done\n\n    echo \"All attempts failed\"\n    return 1\n}\n\nexecute_with_retry 'critical-command.sh'\n</code></pre>"},{"location":"run-syntax/#security-anti-patterns-to-avoid","title":"\ud83d\udeab Security Anti-Patterns to Avoid","text":""},{"location":"run-syntax/#never-password-in-command-line","title":"\u274c NEVER: Password in Command Line","text":"<pre><code># WRONG - Password visible in process list\nsloth-runner run task --ssh server --password \"visible_password\" 'command'\n\n# WRONG - Password in command history\nsloth-runner run task --ssh server --ssh-password \"my_password\" 'command'\n</code></pre>"},{"location":"run-syntax/#never-password-in-environment-variable-without-care","title":"\u274c NEVER: Password in Environment Variable Without Care","text":"<pre><code># WRONG - Visible in /proc/*/environ\nexport PASSWORD=\"my_password\"\nsloth-runner run task --ssh server 'command'  # Even if tool reads from env\n</code></pre>"},{"location":"run-syntax/#never-unencrypted-password-files","title":"\u274c NEVER: Unencrypted Password Files","text":"<pre><code># WRONG - Password file without permissions\necho \"password\" &gt; pass.txt  # Default 644 permissions\n\n# WRONG - Password file in shared location\necho -n \"password\" &gt; /tmp/shared_password.txt\n</code></pre>"},{"location":"run-syntax/#never-password-with-newline","title":"\u274c NEVER: Password with Newline","text":"<pre><code># WRONG - Contains newline character\necho \"password\" &gt; pass.txt\n\n# WRONG - Here-string adds newline\ncat &lt;&lt;&lt; \"password\" &gt; pass.txt\n</code></pre>"},{"location":"run-syntax/#never-leaving-password-files","title":"\u274c NEVER: Leaving Password Files","text":"<pre><code># WRONG - Password file remains after use\nsloth-runner run task --ssh server --ssh-password-stdin - &lt; pass.txt\n# Forgot to delete pass.txt\n</code></pre>"},{"location":"run-syntax/#exit-codes","title":"\ud83d\udcca Exit Codes","text":"Code Meaning Example Scenario 0 Success All tasks completed successfully 1 General failure Unspecified error 2 Invalid arguments Missing required flags 3 File not found Sloth file doesn't exist 4 SSH connection failed Network unreachable 5 Authentication failed Wrong password or key 6 Remote command failed Non-zero exit on remote 7 Stack error Stack operation failed 8 Permission denied Insufficient privileges 9 Timeout Operation timed out 10 Interrupted User cancelled (Ctrl+C)"},{"location":"run-syntax/#debugging","title":"\ud83d\udd0d Debugging","text":""},{"location":"run-syntax/#enable-debug-output","title":"Enable Debug Output","text":"<pre><code># Set debug environment variable\nexport SLOTH_RUNNER_DEBUG=true\nexport SLOTH_RUNNER_LOG_LEVEL=trace\n\n# Run with verbose output\nsloth-runner run task \\\n  --file task.sloth \\\n  --ssh server \\\n  --debug \\\n  --verbose \\\n  'command' 2&gt;&amp;1 | tee debug.log\n</code></pre>"},{"location":"run-syntax/#trace-ssh-connection","title":"Trace SSH Connection","text":"<pre><code># Add SSH debug flags\nexport SSH_DEBUG=\"-vvv\"\n\nsloth-runner run task \\\n  --file task.sloth \\\n  --ssh server \\\n  --ssh-debug \\\n  'command'\n</code></pre>"},{"location":"run-syntax/#validate-without-execution","title":"Validate Without Execution","text":"<pre><code># Dry run - validate only\nsloth-runner run task \\\n  --file task.sloth \\\n  --ssh server \\\n  --dry-run \\\n  'command'\n</code></pre>"},{"location":"run-syntax/#best-practices-summary","title":"\ud83c\udf93 Best Practices Summary","text":"<ol> <li>Always quote remote commands to prevent shell interpretation issues</li> <li>Use timestamps in stack names for uniqueness</li> <li>Store passwords securely and destroy immediately after use</li> <li>Prefer key-based authentication over passwords</li> <li>Set restrictive permissions on all sensitive files</li> <li>Validate password files don't contain newlines</li> <li>Use process substitution for dynamic passwords</li> <li>Implement retry logic for network operations</li> <li>Log actions but never log passwords</li> <li>Test in staging before production execution</li> </ol>"},{"location":"run-syntax/#related-documentation","title":"\ud83d\udd17 Related Documentation","text":"<ul> <li>SSH Profile Management - Setting up SSH profiles</li> <li>Security Best Practices - Comprehensive security guide</li> <li>Sloth File Syntax - Writing task definitions</li> <li>Stack Management - Understanding execution stacks</li> </ul> <p>Final Security Reminder: The <code>--ssh-password-stdin -</code> pattern with the dash (<code>-</code>) is the ONLY secure way to pass passwords to the command. Any deviation from this exact syntax may compromise security.</p>"},{"location":"sloth-system/","title":"Sloth System Documentation","text":""},{"location":"sloth-system/#overview","title":"Overview","text":"<p>The Sloth system allows you to save and reuse <code>.sloth</code> workflow files in a SQLite database. This eliminates the need to specify file paths repeatedly and provides centralized management of your workflows.</p>"},{"location":"sloth-system/#features","title":"Features","text":"<ul> <li>Save workflows: Store <code>.sloth</code> files in the database with descriptive names</li> <li>Reusability: Reference saved workflows by name instead of file path</li> <li>Active/Inactive status: Control which sloths can be used</li> <li>Usage tracking: Monitor how often workflows are used</li> <li>Version control: Track file hashes to detect changes</li> </ul>"},{"location":"sloth-system/#commands","title":"Commands","text":""},{"location":"sloth-system/#add-a-sloth","title":"Add a Sloth","text":"<p>Save a new <code>.sloth</code> file to the database:</p> <pre><code>sloth-runner sloth add &lt;name&gt; --file &lt;path&gt; [options]\n</code></pre> <p>Options: - <code>--file, -f</code>: Path to the <code>.sloth</code> file (required) - <code>--description, -d</code>: Description of the sloth - <code>--active</code>: Set as active (default: true)</p> <p>Example: <pre><code>sloth-runner sloth add my-workflow --file ./workflows/deploy.sloth --description \"Production deployment workflow\"\n</code></pre></p>"},{"location":"sloth-system/#list-sloths","title":"List Sloths","text":"<p>Display all saved sloths:</p> <pre><code>sloth-runner sloth list [--active]\n</code></pre> <p>Options: - <code>--active, -a</code>: Show only active sloths</p> <p>Example: <pre><code>sloth-runner sloth list --active\n</code></pre></p>"},{"location":"sloth-system/#get-sloth-details","title":"Get Sloth Details","text":"<p>View detailed information about a specific sloth:</p> <pre><code>sloth-runner sloth get &lt;name&gt;\n</code></pre> <p>Example: <pre><code>sloth-runner sloth get my-workflow\n</code></pre></p>"},{"location":"sloth-system/#remove-a-sloth","title":"Remove a Sloth","text":"<p>Delete a sloth from the database:</p> <pre><code>sloth-runner sloth remove &lt;name&gt;\n# or\nsloth-runner sloth delete &lt;name&gt;\n</code></pre> <p>Example: <pre><code>sloth-runner sloth remove my-workflow\n</code></pre></p>"},{"location":"sloth-system/#activatedeactivate-a-sloth","title":"Activate/Deactivate a Sloth","text":"<p>Control whether a sloth can be used:</p> <pre><code>sloth-runner sloth activate &lt;name&gt;\nsloth-runner sloth deactivate &lt;name&gt;\n</code></pre> <p>Example: <pre><code>sloth-runner sloth deactivate old-workflow\nsloth-runner sloth activate my-workflow\n</code></pre></p>"},{"location":"sloth-system/#integration-with-run-command","title":"Integration with Run Command","text":"<p>Use a saved sloth in the <code>run</code> command:</p> <pre><code>sloth-runner run &lt;task&gt; --sloth &lt;name&gt; [options]\n</code></pre> <p>Important: The <code>--sloth</code> flag takes precedence over <code>--file</code>. If both are specified, <code>--file</code> is ignored.</p> <p>Example: <pre><code>sloth-runner run deploy --sloth my-workflow --yes\n</code></pre></p>"},{"location":"sloth-system/#how-it-works","title":"How it Works","text":"<ol> <li>The run command retrieves the sloth content from the database</li> <li>Checks if the sloth is active (fails if inactive)</li> <li>Creates a temporary <code>.sloth</code> file with the content</li> <li>Executes the workflow using the temporary file</li> <li>Increments the usage counter</li> <li>Updates the last used timestamp</li> <li>Cleans up the temporary file after execution</li> </ol>"},{"location":"sloth-system/#architecture","title":"Architecture","text":"<p>The Sloth system follows a clean, modular architecture with industry-standard design patterns:</p>"},{"location":"sloth-system/#design-patterns","title":"Design Patterns","text":"<ol> <li>Repository Pattern: Abstracts data access layer</li> <li>Interface: <code>internal/sloth/repository.go</code></li> <li>Implementation: <code>internal/sloth/sqlite_repository.go</code></li> <li> <p>Mock: <code>internal/sloth/mock_repository.go</code></p> </li> <li> <p>Service Layer Pattern: Encapsulates business logic</p> </li> <li>Location: <code>cmd/sloth-runner/services/sloth_service.go</code></li> <li> <p>Handles file operations, validation, and orchestration</p> </li> <li> <p>Command Pattern: CLI command structure</p> </li> <li>Location: <code>cmd/sloth-runner/commands/sloth/</code></li> <li> <p>Separate commands for each operation</p> </li> <li> <p>Factory Pattern: Dependency injection</p> </li> <li><code>NewSlothService()</code>: Creates service with default repository</li> <li><code>NewSlothServiceWithRepository()</code>: Allows custom repository for testing</li> </ol>"},{"location":"sloth-system/#directory-structure","title":"Directory Structure","text":"<pre><code>task-runner/\n\u251c\u2500\u2500 internal/sloth/                    # Domain layer\n\u2502   \u251c\u2500\u2500 sloth.go                      # Domain models\n\u2502   \u251c\u2500\u2500 repository.go                 # Repository interface\n\u2502   \u251c\u2500\u2500 sqlite_repository.go          # SQLite implementation\n\u2502   \u251c\u2500\u2500 mock_repository.go            # Mock for testing\n\u2502   \u2514\u2500\u2500 sqlite_repository_test.go     # Repository tests\n\u2502\n\u251c\u2500\u2500 cmd/sloth-runner/services/        # Service layer\n\u2502   \u251c\u2500\u2500 sloth_service.go              # Business logic\n\u2502   \u2514\u2500\u2500 sloth_service_test.go         # Service tests\n\u2502\n\u2514\u2500\u2500 cmd/sloth-runner/commands/sloth/  # Presentation layer\n    \u251c\u2500\u2500 sloth.go                      # Main command\n    \u251c\u2500\u2500 add.go                        # Add command\n    \u251c\u2500\u2500 list.go                       # List command\n    \u251c\u2500\u2500 get.go                        # Get command\n    \u251c\u2500\u2500 remove.go                     # Remove/Delete commands\n    \u2514\u2500\u2500 activate.go                   # Activate/Deactivate commands\n</code></pre>"},{"location":"sloth-system/#database-schema","title":"Database Schema","text":"<p>The sloths are stored in a SQLite database with the following schema:</p> <pre><code>CREATE TABLE IF NOT EXISTS sloths (\n    id TEXT PRIMARY KEY,\n    name TEXT NOT NULL UNIQUE,\n    description TEXT,\n    file_path TEXT NOT NULL,\n    content TEXT NOT NULL,\n    is_active BOOLEAN NOT NULL DEFAULT 1,\n    created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    last_used_at DATETIME,\n    usage_count INTEGER DEFAULT 0,\n    tags TEXT,\n    file_hash TEXT NOT NULL,\n    UNIQUE(name)\n);\n\nCREATE INDEX IF NOT EXISTS idx_sloths_name ON sloths(name);\nCREATE INDEX IF NOT EXISTS idx_sloths_active ON sloths(is_active);\n</code></pre> <p>Indexes: - <code>idx_sloths_name</code>: Fast lookup by name - <code>idx_sloths_active</code>: Efficient filtering by active status</p>"},{"location":"sloth-system/#domain-models","title":"Domain Models","text":""},{"location":"sloth-system/#sloth","title":"Sloth","text":"<p>Complete representation of a sloth with all metadata: <pre><code>type Sloth struct {\n    ID          string\n    Name        string\n    Description string\n    FilePath    string\n    Content     string\n    IsActive    bool\n    CreatedAt   time.Time\n    UpdatedAt   time.Time\n    LastUsedAt  *time.Time\n    UsageCount  int\n    Tags        string\n    FileHash    string\n}\n</code></pre></p>"},{"location":"sloth-system/#slothlistitem","title":"SlothListItem","text":"<p>Lightweight representation for listing: <pre><code>type SlothListItem struct {\n    Name        string\n    Description string\n    IsActive    bool\n    CreatedAt   time.Time\n    LastUsedAt  *time.Time\n    UsageCount  int\n}\n</code></pre></p>"},{"location":"sloth-system/#testing","title":"Testing","text":"<p>The sloth system includes comprehensive unit tests:</p>"},{"location":"sloth-system/#repository-tests-557-coverage","title":"Repository Tests (55.7% coverage)","text":"<p>Location: <code>internal/sloth/sqlite_repository_test.go</code></p> <p>Tests include: - Create sloth - Create duplicate (error handling) - Get by name - List with filters - Update sloth - Delete sloth - Set active/inactive status - Increment usage counter</p>"},{"location":"sloth-system/#service-tests-297-coverage","title":"Service Tests (29.7% coverage)","text":"<p>Location: <code>cmd/sloth-runner/services/sloth_service_test.go</code></p> <p>Tests include: - Get sloth - Get active sloth (with inactive check) - List sloths (all and active only) - Add sloth - Add sloth with file not found - Update sloth - Remove/Delete sloth - Activate/Deactivate sloth - Use sloth (with usage tracking) - Write content to file - Close service</p>"},{"location":"sloth-system/#running-tests","title":"Running Tests","text":"<pre><code># Run all sloth tests\ngo test ./internal/sloth/... ./cmd/sloth-runner/services/... -v\n\n# Run with coverage\ngo test ./internal/sloth/... ./cmd/sloth-runner/services/... -coverprofile=coverage.out\ngo tool cover -html=coverage.out\n</code></pre>"},{"location":"sloth-system/#error-handling","title":"Error Handling","text":"<p>The system defines custom errors for common scenarios:</p> <ul> <li><code>ErrSlothNotFound</code>: Sloth with given name doesn't exist</li> <li><code>ErrSlothAlreadyExists</code>: Sloth with that name already exists</li> <li><code>ErrSlothInactive</code>: Attempted to use an inactive sloth</li> </ul> <p>Example: <pre><code>sloth, err := service.GetActiveSloth(ctx, \"my-sloth\")\nif err == sloth.ErrSlothInactive {\n    fmt.Println(\"This sloth is currently inactive\")\n}\n</code></pre></p>"},{"location":"sloth-system/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Use descriptive names: Choose meaningful names for your sloths    <pre><code># Good\nsloth-runner sloth add prod-deploy --file deploy.sloth\n\n# Avoid\nsloth-runner sloth add temp1 --file deploy.sloth\n</code></pre></p> </li> <li> <p>Add descriptions: Help your team understand what each sloth does    <pre><code>sloth-runner sloth add backup --file backup.sloth --description \"Daily database backup to S3\"\n</code></pre></p> </li> <li> <p>Deactivate instead of delete: Preserve history and usage statistics    <pre><code>sloth-runner sloth deactivate old-workflow\n</code></pre></p> </li> <li> <p>Use --active flag: Quickly see available workflows    <pre><code>sloth-runner sloth list --active\n</code></pre></p> </li> <li> <p>Monitor usage: Check which workflows are being used    <pre><code>sloth-runner sloth get my-workflow\n# Look at \"Usage Count\" and \"Last Used\"\n</code></pre></p> </li> </ol>"},{"location":"sloth-system/#examples","title":"Examples","text":""},{"location":"sloth-system/#complete-workflow-example","title":"Complete Workflow Example","text":"<pre><code># 1. Create a workflow file\ncat &gt; my-deploy.sloth &lt;&lt; 'EOF'\nworkflow({\n    name = \"deploy\",\n    description = \"Deploy application to production\",\n    tasks = {\n        {\n            name = \"build\",\n            run = function()\n                print(\"Building application...\")\n                return {changed = true, message = \"Build completed\"}\n            end\n        },\n        {\n            name = \"deploy\",\n            depends_on = {\"build\"},\n            run = function()\n                print(\"Deploying to production...\")\n                return {changed = true, message = \"Deployment completed\"}\n            end\n        }\n    }\n})\nEOF\n\n# 2. Add to sloth system\nsloth-runner sloth add prod-deploy \\\n    --file my-deploy.sloth \\\n    --description \"Production deployment workflow\"\n\n# 3. Use the sloth\nsloth-runner run deploy --sloth prod-deploy --yes\n\n# 4. Check usage statistics\nsloth-runner sloth get prod-deploy\n\n# 5. When done, deactivate\nsloth-runner sloth deactivate prod-deploy\n</code></pre>"},{"location":"sloth-system/#managing-multiple-environments","title":"Managing Multiple Environments","text":"<pre><code># Add environment-specific sloths\nsloth-runner sloth add dev-deploy --file deploy-dev.sloth\nsloth-runner sloth add staging-deploy --file deploy-staging.sloth\nsloth-runner sloth add prod-deploy --file deploy-prod.sloth\n\n# Use appropriate sloth for each environment\nsloth-runner run deploy --sloth dev-deploy --yes\nsloth-runner run deploy --sloth staging-deploy --yes\nsloth-runner run deploy --sloth prod-deploy --yes\n\n# List all deployment sloths\nsloth-runner sloth list\n</code></pre>"},{"location":"sloth-system/#database-location","title":"Database Location","text":"<p>The sloth database is stored in: - Default: <code>~/.sloth-runner/sloths.db</code> - The database uses SQLite with WAL (Write-Ahead Logging) mode for better concurrency</p>"},{"location":"sloth-system/#troubleshooting","title":"Troubleshooting","text":""},{"location":"sloth-system/#sloth-is-inactive","title":"Sloth is inactive","text":"<p>Error: <code>sloth is not active</code></p> <p>Solution: Activate the sloth: <pre><code>sloth-runner sloth activate &lt;name&gt;\n</code></pre></p>"},{"location":"sloth-system/#sloth-not-found","title":"Sloth not found","text":"<p>Error: <code>sloth not found</code></p> <p>Solution: Check available sloths: <pre><code>sloth-runner sloth list\n</code></pre></p>"},{"location":"sloth-system/#duplicate-sloth-name","title":"Duplicate sloth name","text":"<p>Error: <code>sloth with this name already exists</code></p> <p>Solution: Choose a different name or remove the existing sloth: <pre><code>sloth-runner sloth remove &lt;name&gt;\n# or use a different name\nsloth-runner sloth add my-workflow-v2 --file workflow.sloth\n</code></pre></p>"},{"location":"sloth-system/#file-not-found-during-add","title":"File not found during add","text":"<p>Error: <code>failed to read file</code></p> <p>Solution: Verify the file path: <pre><code>ls -la /path/to/your/file.sloth\n</code></pre></p>"},{"location":"sloth-system/#future-enhancements","title":"Future Enhancements","text":"<p>Potential improvements for the sloth system:</p> <ol> <li>Tags: Support for categorizing sloths</li> <li>Export/Import: Share sloths between systems</li> <li>Version history: Track changes to sloth content</li> <li>Search: Find sloths by description or content</li> <li>Update command: Update existing sloth from file</li> <li>Clone command: Duplicate a sloth with a new name</li> <li>Validation: Check sloth syntax before saving</li> <li>Diff command: Compare sloth versions</li> <li>Backup/Restore: Database backup utilities</li> <li>Web UI: Browser-based sloth management</li> </ol>"},{"location":"sloth-system/#contributing","title":"Contributing","text":"<p>When contributing to the sloth system:</p> <ol> <li>Add tests for new features</li> <li>Update documentation</li> <li>Follow existing patterns (Repository, Service, Command)</li> <li>Maintain backwards compatibility</li> <li>Add integration tests for end-to-end scenarios</li> </ol>"},{"location":"sloth-system/#license","title":"License","text":"<p>This feature is part of the sloth-runner project and follows the same license.</p>"},{"location":"ssh-management/","title":"SSH Profile Management - Detailed Documentation","text":""},{"location":"ssh-management/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Architecture Overview</li> <li>Database Design</li> <li>Security Model</li> <li>Command Reference</li> <li>Authentication Methods</li> <li>Implementation Details</li> <li>Best Practices</li> <li>Troubleshooting</li> </ol>"},{"location":"ssh-management/#architecture-overview","title":"Architecture Overview","text":"<p>The SSH management system in Sloth Runner follows a secure, profile-based architecture that separates connection metadata from authentication credentials.</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                     Sloth Runner CLI                         \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                    SSH Profile Manager                       \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u2502\n\u2502  \u2502   Profile    \u2502  \u2502   SQLite     \u2502  \u2502     SSH      \u2502      \u2502\n\u2502  \u2502   Commands   \u2502\u2500\u2500\u2502   Database   \u2502  \u2502   Executor   \u2502      \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2502\n\u2502         \u2502                 \u2502                   \u2502              \u2502\n\u2502         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\n\u2502                           \u2502                                  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                    Security Layer                            \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u2502\n\u2502  \u2502 No Password  \u2502  \u2502   Key File   \u2502  \u2502   Password   \u2502      \u2502\n\u2502  \u2502   Storage    \u2502  \u2502  Validation  \u2502  \u2502  from STDIN  \u2502      \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"ssh-management/#database-design","title":"Database Design","text":""},{"location":"ssh-management/#schema-definition","title":"Schema Definition","text":"<pre><code>-- Main profiles table\nCREATE TABLE ssh_profiles (\n    -- Primary identifier\n    name TEXT PRIMARY KEY NOT NULL,\n\n    -- Connection details\n    host TEXT NOT NULL,\n    user TEXT NOT NULL,\n    port INTEGER DEFAULT 22 CHECK(port &gt; 0 AND port &lt;= 65535),\n\n    -- Authentication (key-based only stored)\n    key_path TEXT,\n\n    -- Metadata\n    description TEXT,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    last_used TIMESTAMP,\n    use_count INTEGER DEFAULT 0,\n\n    -- Configuration\n    connection_timeout INTEGER DEFAULT 30,\n    keepalive_interval INTEGER DEFAULT 60,\n    strict_host_checking BOOLEAN DEFAULT TRUE,\n\n    -- Constraints\n    UNIQUE(host, user, port),\n    CHECK(length(name) &gt; 0 AND length(name) &lt;= 50),\n    CHECK(length(host) &gt; 0),\n    CHECK(length(user) &gt; 0)\n);\n\n-- Index for faster lookups\nCREATE INDEX idx_ssh_profiles_host ON ssh_profiles(host);\nCREATE INDEX idx_ssh_profiles_last_used ON ssh_profiles(last_used);\n\n-- Audit log table\nCREATE TABLE ssh_audit_log (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    profile_name TEXT NOT NULL,\n    action TEXT NOT NULL, -- 'connect', 'execute', 'fail'\n    command TEXT,\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    success BOOLEAN,\n    error_message TEXT,\n    FOREIGN KEY(profile_name) REFERENCES ssh_profiles(name) ON DELETE CASCADE\n);\n\n-- Trigger to update timestamp\nCREATE TRIGGER update_ssh_profile_timestamp\nAFTER UPDATE ON ssh_profiles\nBEGIN\n    UPDATE ssh_profiles\n    SET updated_at = CURRENT_TIMESTAMP\n    WHERE name = NEW.name;\nEND;\n</code></pre>"},{"location":"ssh-management/#data-storage-location","title":"Data Storage Location","text":"<p>Default Locations: - Unix/Linux: <code>$HOME/.sloth-runner/ssh_profiles.db</code> - macOS: <code>$HOME/.sloth-runner/ssh_profiles.db</code> - Windows: <code>%USERPROFILE%\\.sloth-runner\\ssh_profiles.db</code></p> <p>Custom Location: <pre><code>export SLOTH_RUNNER_SSH_DB=\"/custom/path/ssh_profiles.db\"\n</code></pre></p>"},{"location":"ssh-management/#security-model","title":"Security Model","text":""},{"location":"ssh-management/#1-credential-separation","title":"1. Credential Separation","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         What IS Stored               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 \u2713 Profile name                       \u2502\n\u2502 \u2713 Hostname/IP                        \u2502\n\u2502 \u2713 Username                           \u2502\n\u2502 \u2713 Port number                        \u2502\n\u2502 \u2713 SSH key path                       \u2502\n\u2502 \u2713 Connection preferences             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502        What is NEVER Stored          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 \u2717 Passwords                          \u2502\n\u2502 \u2717 Passphrases                        \u2502\n\u2502 \u2717 Private key contents               \u2502\n\u2502 \u2717 Session tokens                     \u2502\n\u2502 \u2717 Sudo passwords                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"ssh-management/#2-authentication-flow","title":"2. Authentication Flow","text":"<pre><code>graph TD\n    A[User executes command] --&gt; B{Authentication method?}\n    B --&gt;|Key-based| C[Read key path from DB]\n    B --&gt;|Password| D[Read from STDIN]\n\n    C --&gt; E[Validate key file exists]\n    E --&gt; F[Check key permissions]\n    F --&gt; G[Establish SSH connection]\n\n    D --&gt; H[Never log password]\n    H --&gt; I[Pass to SSH client]\n    I --&gt; G\n\n    G --&gt; J{Connection successful?}\n    J --&gt;|Yes| K[Execute command]\n    J --&gt;|No| L[Log failure without credentials]\n\n    K --&gt; M[Audit log entry]\n    L --&gt; M</code></pre>"},{"location":"ssh-management/#3-file-permissions-requirements","title":"3. File Permissions Requirements","text":"<p>SSH Key Files: <pre><code># Private key - read-only by owner\nchmod 600 ~/.ssh/id_rsa\n\n# Public key - readable by all\nchmod 644 ~/.ssh/id_rsa.pub\n\n# SSH config directory\nchmod 700 ~/.ssh\n</code></pre></p> <p>Database File: <pre><code># Database - read/write by owner only\nchmod 600 ~/.sloth-runner/ssh_profiles.db\n\n# Directory - accessible by owner only\nchmod 700 ~/.sloth-runner\n</code></pre></p>"},{"location":"ssh-management/#command-reference","title":"Command Reference","text":""},{"location":"ssh-management/#sloth-runner-ssh-add","title":"<code>sloth-runner ssh add</code>","text":"<p>Complete Syntax: <pre><code>sloth-runner ssh add &lt;profile-name&gt; \\\n  --host &lt;hostname-or-ip&gt; \\\n  --user &lt;username&gt; \\\n  [--port &lt;port-number&gt;] \\\n  --key &lt;private-key-path&gt; \\\n  [--description \"&lt;text&gt;\"] \\\n  [--timeout &lt;seconds&gt;] \\\n  [--keepalive &lt;seconds&gt;] \\\n  [--no-strict-host-checking]\n</code></pre></p> <p>Parameters:</p> Parameter Required Default Description <code>&lt;profile-name&gt;</code> Yes - Unique identifier (alphanumeric, hyphen, underscore) <code>--host</code> Yes - Target hostname or IP address <code>--user</code> Yes - SSH username <code>--port</code> No 22 SSH port (1-65535) <code>--key</code> Yes - Path to private SSH key <code>--description</code> No - Profile description (max 255 chars) <code>--timeout</code> No 30 Connection timeout in seconds <code>--keepalive</code> No 60 Keepalive interval in seconds <code>--no-strict-host-checking</code> No false Disable host key verification (NOT RECOMMENDED) <p>Examples:</p> <pre><code># Basic profile\nsloth-runner ssh add prod-web \\\n  --host 192.168.1.10 \\\n  --user ubuntu \\\n  --key ~/.ssh/prod_key\n\n# Complete profile with all options\nsloth-runner ssh add staging-db \\\n  --host staging-db.internal \\\n  --user postgres \\\n  --port 2222 \\\n  --key ~/.ssh/staging_key \\\n  --description \"Staging database server\" \\\n  --timeout 60 \\\n  --keepalive 30\n\n# Profile for bastion/jump host\nsloth-runner ssh add bastion \\\n  --host bastion.example.com \\\n  --user jump \\\n  --port 22022 \\\n  --key ~/.ssh/bastion_key \\\n  --description \"Bastion host for production access\"\n</code></pre>"},{"location":"ssh-management/#sloth-runner-ssh-list","title":"<code>sloth-runner ssh list</code>","text":"<p>Syntax: <pre><code>sloth-runner ssh list [--format &lt;format&gt;] [--filter &lt;expression&gt;]\n</code></pre></p> <p>Options: - <code>--format</code>: Output format (table, json, yaml, csv) - <code>--filter</code>: Filter expression (e.g., \"host=192.168.*\")</p> <p>Examples: <pre><code># List all profiles (table format)\nsloth-runner ssh list\n\n# JSON output for scripting\nsloth-runner ssh list --format json\n\n# Filter by hostname pattern\nsloth-runner ssh list --filter \"host=*.example.com\"\n\n# CSV for export\nsloth-runner ssh list --format csv &gt; ssh_profiles.csv\n</code></pre></p>"},{"location":"ssh-management/#sloth-runner-ssh-show","title":"<code>sloth-runner ssh show</code>","text":"<p>Syntax: <pre><code>sloth-runner ssh show &lt;profile-name&gt; [--format &lt;format&gt;]\n</code></pre></p> <p>Example Output: <pre><code>Profile: production-web\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\nHost:           prod.example.com\nUser:           ubuntu\nPort:           22\nKey Path:       /home/user/.ssh/prod_key\nDescription:    Production web server\nCreated:        2024-01-15 10:30:00\nLast Modified:  2024-01-20 14:45:30\nLast Used:      2024-01-22 09:15:00\nUse Count:      47\nTimeout:        30s\nKeepalive:      60s\nStrict Host:    Enabled\n</code></pre></p>"},{"location":"ssh-management/#sloth-runner-ssh-update","title":"<code>sloth-runner ssh update</code>","text":"<p>Syntax: <pre><code>sloth-runner ssh update &lt;profile-name&gt; \\\n  [--host &lt;new-hostname&gt;] \\\n  [--user &lt;new-username&gt;] \\\n  [--port &lt;new-port&gt;] \\\n  [--key &lt;new-key-path&gt;] \\\n  [--description \"&lt;new-description&gt;\"] \\\n  [--timeout &lt;seconds&gt;] \\\n  [--keepalive &lt;seconds&gt;]\n</code></pre></p> <p>Example: <pre><code># Update only the key path\nsloth-runner ssh update prod-web --key ~/.ssh/new_prod_key\n\n# Update multiple fields\nsloth-runner ssh update staging \\\n  --host new-staging.example.com \\\n  --port 2222 \\\n  --description \"New staging environment\"\n</code></pre></p>"},{"location":"ssh-management/#sloth-runner-ssh-remove","title":"<code>sloth-runner ssh remove</code>","text":"<p>Syntax: <pre><code>sloth-runner ssh remove &lt;profile-name&gt; [--force]\n</code></pre></p> <p>Options: - <code>--force</code>: Skip confirmation prompt</p> <p>Example: <pre><code># Remove with confirmation\nsloth-runner ssh remove old-server\n\n# Force remove without confirmation\nsloth-runner ssh remove temp-server --force\n</code></pre></p>"},{"location":"ssh-management/#sloth-runner-ssh-test","title":"<code>sloth-runner ssh test</code>","text":"<p>Test SSH connectivity without executing commands.</p> <p>Syntax: <pre><code>sloth-runner ssh test &lt;profile-name&gt; [--ssh-password-stdin -]\n</code></pre></p> <p>Examples: <pre><code># Test with key authentication\nsloth-runner ssh test production\n\n# Test with password authentication\necho -n \"password\" | sloth-runner ssh test legacy-server --ssh-password-stdin -\n</code></pre></p>"},{"location":"ssh-management/#authentication-methods","title":"Authentication Methods","text":""},{"location":"ssh-management/#1-ssh-key-authentication-recommended","title":"1. SSH Key Authentication (Recommended)","text":"<p>Setup Process:</p> <pre><code># 1. Generate SSH key pair\nssh-keygen -t ed25519 -f ~/.ssh/sloth_key -C \"sloth-runner\"\n\n# 2. Copy public key to server\nssh-copy-id -i ~/.ssh/sloth_key.pub user@host\n\n# 3. Add profile with key\nsloth-runner ssh add myserver \\\n  --host hostname \\\n  --user username \\\n  --key ~/.ssh/sloth_key\n\n# 4. Test connection\nsloth-runner ssh test myserver\n</code></pre>"},{"location":"ssh-management/#2-password-authentication-when-required","title":"2. Password Authentication (When Required)","text":"<p>\u26a0\ufe0f Security Warning: Password authentication should only be used when key-based authentication is not possible.</p> <p>Password Input Methods:</p> <pre><code># Method 1: From file (most common)\necho -n \"password\" &gt; pass.txt\nchmod 600 pass.txt\nsloth-runner run stack --file task.sloth \\\n  --ssh server --ssh-password-stdin - &lt; pass.txt\nshred -u pass.txt\n\n# Method 2: From environment variable\nexport SSH_PASS=\"password\"\nsloth-runner run stack --file task.sloth \\\n  --ssh server --ssh-password-stdin - &lt; &lt;(echo -n \"$SSH_PASS\")\nunset SSH_PASS\n\n# Method 3: Interactive input (for manual execution)\nsloth-runner run stack --file task.sloth \\\n  --ssh server --ssh-password-stdin -\n# (Type password and press Ctrl+D)\n\n# Method 4: From password manager\npass show server/ssh | sloth-runner run stack --file task.sloth \\\n  --ssh server --ssh-password-stdin -\n</code></pre>"},{"location":"ssh-management/#3-ssh-agent-integration","title":"3. SSH Agent Integration","text":"<p>Using SSH Agent:</p> <pre><code># Start SSH agent\neval $(ssh-agent -s)\n\n# Add key to agent\nssh-add ~/.ssh/private_key\n\n# Profile uses key from agent\nsloth-runner ssh add server \\\n  --host hostname \\\n  --user username \\\n  --key ~/.ssh/private_key  # Key will be accessed via agent\n</code></pre>"},{"location":"ssh-management/#4-jump-host-bastion-configuration","title":"4. Jump Host / Bastion Configuration","text":"<p>ProxyJump Setup:</p> <pre><code># 1. Create SSH config\ncat &gt;&gt; ~/.ssh/config &lt;&lt;EOF\nHost production-*\n    ProxyJump bastion\n    User ubuntu\n    IdentityFile ~/.ssh/prod_key\n\nHost bastion\n    HostName bastion.example.com\n    User jump\n    IdentityFile ~/.ssh/bastion_key\nEOF\n\n# 2. Add profile referencing SSH config\nsloth-runner ssh add production-web \\\n  --host production-web \\\n  --user ubuntu \\\n  --key ~/.ssh/prod_key\n</code></pre>"},{"location":"ssh-management/#implementation-details","title":"Implementation Details","text":""},{"location":"ssh-management/#connection-establishment","title":"Connection Establishment","text":"<pre><code>// Pseudo-code for SSH connection\nfunc EstablishSSHConnection(profile SSHProfile, password *string) (*ssh.Client, error) {\n    config := &amp;ssh.ClientConfig{\n        User: profile.User,\n        HostKeyCallback: ssh.InsecureIgnoreHostKey(), // Or proper validation\n        Timeout: time.Duration(profile.Timeout) * time.Second,\n    }\n\n    // Authentication method selection\n    if password != nil {\n        config.Auth = []ssh.AuthMethod{\n            ssh.Password(*password),\n        }\n        // Clear password from memory immediately after use\n        *password = \"\"\n    } else if profile.KeyPath != \"\" {\n        key, err := ioutil.ReadFile(profile.KeyPath)\n        if err != nil {\n            return nil, fmt.Errorf(\"unable to read private key: %v\", err)\n        }\n\n        signer, err := ssh.ParsePrivateKey(key)\n        if err != nil {\n            return nil, fmt.Errorf(\"unable to parse private key: %v\", err)\n        }\n\n        config.Auth = []ssh.AuthMethod{\n            ssh.PublicKeys(signer),\n        }\n    }\n\n    address := fmt.Sprintf(\"%s:%d\", profile.Host, profile.Port)\n    client, err := ssh.Dial(\"tcp\", address, config)\n    if err != nil {\n        return nil, fmt.Errorf(\"failed to dial: %v\", err)\n    }\n\n    return client, nil\n}\n</code></pre>"},{"location":"ssh-management/#password-handling","title":"Password Handling","text":"<pre><code>// Secure password reading from stdin\nfunc ReadPasswordFromStdin() (string, error) {\n    // Check if stdin is available\n    stat, _ := os.Stdin.Stat()\n    if (stat.Mode() &amp; os.ModeCharDevice) != 0 {\n        // Interactive mode - use terminal\n        fmt.Print(\"SSH Password: \")\n        password, err := term.ReadPassword(int(os.Stdin.Fd()))\n        fmt.Println() // New line after password\n        return string(password), err\n    }\n\n    // Pipe mode - read from stdin\n    reader := bufio.NewReader(os.Stdin)\n    password, err := reader.ReadString('\\n')\n    if err != nil &amp;&amp; err != io.EOF {\n        return \"\", err\n    }\n\n    // Remove any trailing whitespace/newlines\n    password = strings.TrimSpace(password)\n\n    // Validate password is not empty\n    if password == \"\" {\n        return \"\", fmt.Errorf(\"empty password received\")\n    }\n\n    return password, nil\n}\n</code></pre>"},{"location":"ssh-management/#best-practices","title":"Best Practices","text":""},{"location":"ssh-management/#1-profile-naming-conventions","title":"1. Profile Naming Conventions","text":"<pre><code># Environment-based\nproduction-web\nstaging-db\ndevelopment-api\n\n# Service-based\nnginx-prod\npostgres-staging\nredis-cache\n\n# Location-based\nus-east-1-web\neu-west-2-db\nasia-pac-cache\n</code></pre>"},{"location":"ssh-management/#2-key-management","title":"2. Key Management","text":"<pre><code># Dedicated keys per environment\n~/.ssh/keys/\n\u251c\u2500\u2500 production/\n\u2502   \u251c\u2500\u2500 web_servers\n\u2502   \u251c\u2500\u2500 db_servers\n\u2502   \u2514\u2500\u2500 cache_servers\n\u251c\u2500\u2500 staging/\n\u2502   \u2514\u2500\u2500 all_servers\n\u2514\u2500\u2500 development/\n    \u2514\u2500\u2500 local_key\n\n# Profile creation with organized keys\nsloth-runner ssh add prod-web-1 \\\n  --host 10.0.1.10 \\\n  --user deploy \\\n  --key ~/.ssh/keys/production/web_servers\n</code></pre>"},{"location":"ssh-management/#3-security-checklist","title":"3. Security Checklist","text":"<ul> <li> Use SSH keys instead of passwords whenever possible</li> <li> Store private keys with 600 permissions</li> <li> Use strong passphrases for SSH keys</li> <li> Rotate SSH keys regularly (monthly/quarterly)</li> <li> Use different keys for different environments</li> <li> Enable SSH agent forwarding only when necessary</li> <li> Implement proper host key verification</li> <li> Audit SSH access logs regularly</li> <li> Use jump hosts for production access</li> <li> Implement session recording for compliance</li> </ul>"},{"location":"ssh-management/#4-automation-guidelines","title":"4. Automation Guidelines","text":"<pre><code>#!/bin/bash\n# Secure automation script template\n\nset -euo pipefail  # Exit on error, undefined variables, pipe failures\n\n# Configuration\nreadonly PROFILE_NAME=\"production\"\nreadonly TASK_FILE=\"deploy.sloth\"\nreadonly STACK_NAME=\"deploy-$(date +%Y%m%d-%H%M%S)\"\nreadonly LOG_FILE=\"/var/log/sloth-runner/deploy.log\"\n\n# Logging function\nlog() {\n    echo \"[$(date +'%Y-%m-%d %H:%M:%S')] $*\" | tee -a \"$LOG_FILE\"\n}\n\n# Error handling\ntrap 'log \"ERROR: Command failed at line $LINENO\"' ERR\n\n# Main execution\nmain() {\n    log \"Starting deployment to $PROFILE_NAME\"\n\n    # Verify profile exists\n    if ! sloth-runner ssh show \"$PROFILE_NAME\" &gt; /dev/null 2&gt;&amp;1; then\n        log \"ERROR: SSH profile '$PROFILE_NAME' not found\"\n        exit 1\n    fi\n\n    # Execute deployment\n    if sloth-runner run \"$STACK_NAME\" \\\n         --file \"$TASK_FILE\" \\\n         --ssh \"$PROFILE_NAME\" \\\n         'deployment_script.sh'; then\n        log \"Deployment successful\"\n    else\n        log \"Deployment failed\"\n        exit 1\n    fi\n}\n\nmain \"$@\"\n</code></pre>"},{"location":"ssh-management/#troubleshooting","title":"Troubleshooting","text":""},{"location":"ssh-management/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"ssh-management/#1-profile-not-found","title":"1. Profile Not Found","text":"<p>Error: <pre><code>Error: SSH profile 'myserver' not found\n</code></pre></p> <p>Solution: <pre><code># Check if profile exists\nsloth-runner ssh list | grep myserver\n\n# If missing, add it\nsloth-runner ssh add myserver --host hostname --user username --key ~/.ssh/key\n</code></pre></p>"},{"location":"ssh-management/#2-key-permission-error","title":"2. Key Permission Error","text":"<p>Error: <pre><code>Error: Private key file has incorrect permissions (must be 600)\n</code></pre></p> <p>Solution: <pre><code>chmod 600 ~/.ssh/private_key\nchmod 700 ~/.ssh\n</code></pre></p>"},{"location":"ssh-management/#3-password-authentication-failing","title":"3. Password Authentication Failing","text":"<p>Error: <pre><code>Error: Authentication failed (password)\n</code></pre></p> <p>Debugging Steps: <pre><code># 1. Verify password file has no newline\nhexdump -C pass.txt | tail -1\n# Should NOT show 0a (newline) at the end\n\n# 2. Test SSH directly\nssh user@host -o PreferredAuthentications=password\n\n# 3. Check for special characters\n# Ensure password is properly escaped in file\n</code></pre></p>"},{"location":"ssh-management/#4-connection-timeout","title":"4. Connection Timeout","text":"<p>Error: <pre><code>Error: Connection timeout after 30 seconds\n</code></pre></p> <p>Solution: <pre><code># Increase timeout\nsloth-runner ssh update myserver --timeout 60\n\n# Test connectivity\nping hostname\nnc -zv hostname 22\n</code></pre></p>"},{"location":"ssh-management/#5-host-key-verification-failed","title":"5. Host Key Verification Failed","text":"<p>Error: <pre><code>Error: Host key verification failed\n</code></pre></p> <p>Solution: <pre><code># Option 1: Add host to known_hosts\nssh-keyscan -H hostname &gt;&gt; ~/.ssh/known_hosts\n\n# Option 2: Disable strict checking (NOT RECOMMENDED for production)\nsloth-runner ssh add server --host hostname --user user --key ~/.ssh/key --no-strict-host-checking\n</code></pre></p>"},{"location":"ssh-management/#debug-mode","title":"Debug Mode","text":"<p>Enable verbose logging for troubleshooting:</p> <pre><code># Set debug environment variable\nexport SLOTH_RUNNER_DEBUG=true\n\n# Run command with debug output\nsloth-runner run stack --file task.sloth --ssh server --debug\n\n# View debug logs\ntail -f ~/.sloth-runner/debug.log\n</code></pre>"},{"location":"ssh-management/#audit-log-analysis","title":"Audit Log Analysis","text":"<pre><code>-- View recent connections\nSELECT * FROM ssh_audit_log\nORDER BY timestamp DESC\nLIMIT 10;\n\n-- Find failed authentications\nSELECT profile_name, timestamp, error_message\nFROM ssh_audit_log\nWHERE success = 0\nORDER BY timestamp DESC;\n\n-- Connection statistics\nSELECT\n    profile_name,\n    COUNT(*) as total_connections,\n    SUM(CASE WHEN success = 1 THEN 1 ELSE 0 END) as successful,\n    SUM(CASE WHEN success = 0 THEN 1 ELSE 0 END) as failed\nFROM ssh_audit_log\nGROUP BY profile_name;\n</code></pre>"},{"location":"ssh-management/#migration-and-backup","title":"Migration and Backup","text":""},{"location":"ssh-management/#backup-profiles","title":"Backup Profiles","text":"<pre><code># Backup database\ncp ~/.sloth-runner/ssh_profiles.db ~/.sloth-runner/ssh_profiles.db.backup\n\n# Export to JSON\nsloth-runner ssh list --format json &gt; ssh_profiles_backup.json\n\n# Encrypted backup\ntar czf - ~/.sloth-runner/ssh_profiles.db | \\\n  openssl enc -aes-256-cbc -salt -out ssh_profiles.tar.gz.enc\n</code></pre>"},{"location":"ssh-management/#restore-profiles","title":"Restore Profiles","text":"<pre><code># Restore from backup\ncp ~/.sloth-runner/ssh_profiles.db.backup ~/.sloth-runner/ssh_profiles.db\n\n# Restore from encrypted backup\nopenssl enc -d -aes-256-cbc -in ssh_profiles.tar.gz.enc | tar xzf -\n</code></pre>"},{"location":"ssh-management/#migration-between-systems","title":"Migration Between Systems","text":"<pre><code># Export on source system\nsloth-runner ssh export &gt; profiles.json\n\n# Import on target system\nsloth-runner ssh import &lt; profiles.json\n</code></pre>"},{"location":"ssh-management/#security-compliance","title":"Security Compliance","text":""},{"location":"ssh-management/#soc2-compliance","title":"SOC2 Compliance","text":"<ul> <li>\u2705 No password storage in database</li> <li>\u2705 Audit logging for all connections</li> <li>\u2705 Encrypted communication (SSH)</li> <li>\u2705 Access control via file permissions</li> <li>\u2705 Session management and timeout</li> </ul>"},{"location":"ssh-management/#pci-dss-requirements","title":"PCI-DSS Requirements","text":"<ul> <li>\u2705 Strong cryptography (SSH keys)</li> <li>\u2705 No clear-text password storage</li> <li>\u2705 Audit trail for access</li> <li>\u2705 Regular key rotation capability</li> <li>\u2705 Secure key storage</li> </ul>"},{"location":"ssh-management/#gdpr-considerations","title":"GDPR Considerations","text":"<ul> <li>\u2705 No personal data in logs</li> <li>\u2705 Encrypted data transmission</li> <li>\u2705 Right to deletion (remove profile)</li> <li>\u2705 Data portability (export/import)</li> </ul> <p>Remember: This system is designed with security as the primary concern. Never compromise on security for convenience.</p>"},{"location":"stack-idempotency-guide/","title":"Stack Management &amp; Idempotency Guide","text":""},{"location":"stack-idempotency-guide/#overview","title":"Overview","text":"<p>Sloth Runner implements a sophisticated stack-based state management system similar to Pulumi and Terraform. This ensures idempotent infrastructure automation where resources are only created or modified when necessary.</p>"},{"location":"stack-idempotency-guide/#key-concepts","title":"Key Concepts","text":""},{"location":"stack-idempotency-guide/#1-stacks","title":"1. Stacks","text":"<p>A stack is an isolated execution environment for your workflows. Each stack: - Maintains its own state database - Tracks all managed resources - Provides idempotency guarantees - Records execution history</p>"},{"location":"stack-idempotency-guide/#2-resources","title":"2. Resources","text":"<p>A resource represents any managed entity (file, package, service, cloud resource, etc.). Each resource: - Has a unique identifier within the stack - Tracks its current state and properties - Maintains a checksum for drift detection - Is only applied when changes are detected</p>"},{"location":"stack-idempotency-guide/#3-idempotency","title":"3. Idempotency","text":"<p>Idempotency means running the same workflow multiple times produces the same result. Resources are: - Created if they don't exist - Updated if they changed - Skipped if they're already in the desired state</p>"},{"location":"stack-idempotency-guide/#cli-commands","title":"CLI Commands","text":""},{"location":"stack-idempotency-guide/#stack-management","title":"Stack Management","text":"<pre><code># Create a new stack\nsloth-runner stack new my-infrastructure\n\n# List all stacks\nsloth-runner stack list\n\n# Show stack details\nsloth-runner stack show my-infrastructure\n\n# Delete a stack\nsloth-runner stack delete my-infrastructure\n</code></pre>"},{"location":"stack-idempotency-guide/#state-management","title":"State Management","text":"<pre><code># Set a key-value pair\nsloth-runner state set key value\n\n# Get a value\nsloth-runner state get key\n\n# List all keys\nsloth-runner state list\n\n# Delete a key\nsloth-runner state delete key\n\n# View statistics\nsloth-runner state stats\n</code></pre>"},{"location":"stack-idempotency-guide/#using-stacks-in-workflows","title":"Using Stacks in Workflows","text":""},{"location":"stack-idempotency-guide/#automatic-stack-integration","title":"Automatic Stack Integration","text":"<p>Every workflow automatically gets a stack. The stack functions are available globally in Lua:</p> <pre><code>-- Get current stack information\nlocal stack_name = stack.get_name()\nlocal stack_id = stack.get_id()\nlocal stack_status = stack.get_status()\n\n-- Set/get outputs\nstack.set_output(\"web_url\", \"https://example.com\")\nlocal url = stack.get_output(\"web_url\")\n</code></pre>"},{"location":"stack-idempotency-guide/#resource-registration","title":"Resource Registration","text":"<p>Modules can register resources for tracking. The stack system automatically handles idempotency:</p> <pre><code>-- Register a resource\nlocal status, resource = stack.register_resource({\n    type = \"package\",\n    name = \"nginx\",\n    module = \"pkg\",\n    properties = {\n        version = \"1.18.0\",\n        state = \"installed\"\n    }\n})\n\n-- status can be: \"created\", \"changed\", or \"unchanged\"\nif status == \"unchanged\" then\n    print(\"Package already installed with correct version\")\nelseif status == \"changed\" then\n    print(\"Package version was updated\")\nelseif status == \"created\" then\n    print(\"Package was installed\")\nend\n</code></pre>"},{"location":"stack-idempotency-guide/#resource-state-updates","title":"Resource State Updates","text":"<p>After applying changes, update the resource state:</p> <pre><code>-- Mark resource as successfully applied\nstack.update_resource(\"package\", \"nginx\", {\n    state = \"applied\"\n})\n\n-- Mark resource as failed\nstack.update_resource(\"package\", \"nginx\", {\n    state = \"failed\",\n    error = \"Installation failed: permission denied\"\n})\n</code></pre>"},{"location":"stack-idempotency-guide/#complete-example-idempotent-web-server-setup","title":"Complete Example: Idempotent Web Server Setup","text":"<pre><code>workflow({\n    name = \"web-server-setup\",\n    description = \"Idempotent web server configuration\"\n})\n\n-- This task will only execute changes when needed\ntask({\n    name = \"install-nginx\",\n    run = function()\n        -- Check and install nginx\n        local status = pkg.install({\n            name = \"nginx\",\n            state = \"present\"\n        })\n\n        if not status.changed then\n            print(\"\u2713 nginx already installed\")\n        else\n            print(\"\u2713 nginx installed\")\n        end\n    end\n})\n\ntask({\n    name = \"configure-nginx\",\n    depends_on = {\"install-nginx\"},\n    run = function()\n        -- Copy configuration file\n        local result = file_ops.copy({\n            src = \"/configs/nginx.conf\",\n            dest = \"/etc/nginx/nginx.conf\",\n            mode = \"0644\"\n        })\n\n        if not result.changed then\n            print(\"\u2713 nginx.conf already up to date\")\n        else\n            print(\"\u2713 nginx.conf updated\")\n\n            -- Only restart if config changed\n            systemd.restart({name = \"nginx\"})\n        end\n    end\n})\n\ntask({\n    name = \"ensure-service-running\",\n    depends_on = {\"configure-nginx\"},\n    run = function()\n        local status = systemd.ensure({\n            name = \"nginx\",\n            state = \"started\",\n            enabled = true\n        })\n\n        if not status.changed then\n            print(\"\u2713 nginx already running and enabled\")\n        else\n            print(\"\u2713 nginx started and enabled\")\n        end\n\n        -- Export service status\n        stack.set_output(\"nginx_status\", \"running\")\n        stack.set_output(\"nginx_port\", \"80\")\n    end\n})\n</code></pre>"},{"location":"stack-idempotency-guide/#how-idempotency-works-internally","title":"How Idempotency Works Internally","text":""},{"location":"stack-idempotency-guide/#1-checksum-based-change-detection","title":"1. Checksum-Based Change Detection","text":"<p>For file operations, checksums are computed and compared:</p> <pre><code>-- Internal implementation in file_ops.copy\nlocal src_checksum = compute_checksum(src)\nlocal dst_checksum = compute_checksum(dst)\n\nif src_checksum == dst_checksum then\n    return {changed = false}  -- Skip copy\nelse\n    -- Perform copy\n    return {changed = true}\nend\n</code></pre>"},{"location":"stack-idempotency-guide/#2-state-comparison","title":"2. State Comparison","text":"<p>For configuration resources, properties are hashed and compared:</p> <pre><code>-- Internal stack resource tracking\nlocal existing_resource = stack.get_resource(\"package\", \"nginx\")\n\nif existing_resource then\n    local new_checksum = sha256(json.encode(new_properties))\n    if new_checksum == existing_resource.checksum then\n        -- No changes needed\n        return \"unchanged\"\n    else\n        -- Update needed\n        return \"changed\"\n    end\nelse\n    -- New resource\n    return \"created\"\nend\n</code></pre>"},{"location":"stack-idempotency-guide/#3-drift-detection","title":"3. Drift Detection","text":"<p>The stack system can detect when resources have drifted from their desired state:</p> <pre><code># Check for drift in a stack\nsloth-runner stack drift my-infrastructure\n\n# Show resources that have drifted\nsloth-runner stack resources my-infrastructure --state drift\n</code></pre>"},{"location":"stack-idempotency-guide/#module-specific-idempotency","title":"Module-Specific Idempotency","text":""},{"location":"stack-idempotency-guide/#package-module-pkg","title":"Package Module (pkg)","text":"<pre><code>-- Only installs if package is missing or version differs\npkg.install({\n    name = \"docker\",\n    version = \"20.10.0\"\n})\n</code></pre>"},{"location":"stack-idempotency-guide/#user-module-user","title":"User Module (user)","text":"<pre><code>-- Only creates user if they don't exist\nuser.create({\n    name = \"appuser\",\n    shell = \"/bin/bash\",\n    home = \"/home/appuser\"\n})\n\n-- Only modifies if properties changed\nuser.modify({\n    name = \"appuser\",\n    shell = \"/bin/zsh\"  -- Only updates shell if different\n})\n</code></pre>"},{"location":"stack-idempotency-guide/#systemd-module","title":"Systemd Module","text":"<pre><code>-- Only starts service if not running\n-- Only enables if not enabled\nsystemd.ensure({\n    name = \"docker\",\n    state = \"started\",\n    enabled = true\n})\n</code></pre>"},{"location":"stack-idempotency-guide/#file-operations","title":"File Operations","text":"<pre><code>-- Only copies if files differ\nfile_ops.copy({\n    src = \"/src/file\",\n    dest = \"/dst/file\"\n})\n\n-- Only applies changes if line missing/different\nfile_ops.lineinfile({\n    path = \"/etc/config\",\n    line = \"setting=value\",\n    regexp = \"^setting=\"\n})\n</code></pre>"},{"location":"stack-idempotency-guide/#best-practices","title":"Best Practices","text":""},{"location":"stack-idempotency-guide/#1-always-use-stack-functions","title":"1. Always Use Stack Functions","text":"<pre><code>-- Good: Track outputs in stack\nstack.set_output(\"db_connection\", connection_string)\n\n-- Avoid: Using global variables (lost between runs)\n_G.db_connection = connection_string\n</code></pre>"},{"location":"stack-idempotency-guide/#2-handle-both-changed-and-unchanged-states","title":"2. Handle Both Changed and Unchanged States","text":"<pre><code>local result = pkg.install({name = \"nginx\"})\n\nif result.changed then\n    print(\"nginx was installed\")\n    -- Perform post-installation tasks\nelse\n    print(\"nginx already present\")\n    -- Skip unnecessary work\nend\n</code></pre>"},{"location":"stack-idempotency-guide/#3-use-dependencies-to-ensure-ordering","title":"3. Use Dependencies to Ensure Ordering","text":"<pre><code>task({\n    name = \"configure\",\n    depends_on = {\"install\"},  -- Runs after install\n    run = function()\n        -- Configuration logic\n    end\n})\n</code></pre>"},{"location":"stack-idempotency-guide/#4-register-custom-resources","title":"4. Register Custom Resources","text":"<p>For custom logic, explicitly register resources:</p> <pre><code>task({\n    name = \"custom-setup\",\n    run = function()\n        local status, res = stack.register_resource({\n            type = \"custom\",\n            name = \"my-resource\",\n            module = \"custom\",\n            properties = {\n                setting1 = \"value1\",\n                setting2 = \"value2\"\n            }\n        })\n\n        if status == \"unchanged\" then\n            print(\"Resource already configured\")\n            return\n        end\n\n        -- Perform actual changes\n        do_custom_setup()\n\n        -- Mark as applied\n        stack.update_resource(\"custom\", \"my-resource\", {\n            state = \"applied\"\n        })\n    end\n})\n</code></pre>"},{"location":"stack-idempotency-guide/#querying-stack-state","title":"Querying Stack State","text":""},{"location":"stack-idempotency-guide/#from-cli","title":"From CLI","text":"<pre><code># Export stack state to JSON\nsloth-runner stack export my-infrastructure &gt; state.json\n\n# List resources in a stack\nsloth-runner stack resources my-infrastructure\n</code></pre>"},{"location":"stack-idempotency-guide/#from-lua","title":"From Lua","text":"<pre><code>-- Check if resource exists\nif stack.resource_exists(\"package\", \"nginx\") then\n    local resource = stack.get_resource(\"package\", \"nginx\")\n    print(\"Resource state:\", resource.state)\n    print(\"Last applied:\", resource.last_applied)\nend\n</code></pre>"},{"location":"stack-idempotency-guide/#stack-persistence","title":"Stack Persistence","text":"<p>Stacks are persisted in SQLite databases:</p> <ul> <li>Default Location: <code>/etc/sloth-runner/stacks.db</code></li> <li>User Location: <code>~/.sloth-runner/stacks.db</code></li> <li>Custom Location: Use <code>--db</code> flag</li> </ul> <p>The database schema tracks: - Stack metadata (name, version, status, created_at, updated_at) - Resources (type, name, properties, checksum, state) - Execution history - Outputs and configuration</p>"},{"location":"stack-idempotency-guide/#advanced-features","title":"Advanced Features","text":""},{"location":"stack-idempotency-guide/#parallel-execution-with-idempotency","title":"Parallel Execution with Idempotency","text":"<pre><code>-- Each goroutine gets idempotency guarantees\ngoroutine.map({\"server1\", \"server2\", \"server3\"}, function(server)\n    local status = pkg.install({\n        name = \"nginx\",\n        delegate_to = server\n    })\n\n    -- Each server only installs if needed\n    print(server .. \": \" .. (status.changed and \"installed\" or \"already present\"))\nend)\n</code></pre>"},{"location":"stack-idempotency-guide/#conditional-resource-management","title":"Conditional Resource Management","text":"<pre><code>task({\n    name = \"setup-database\",\n    run = function()\n        local db_exists = stack.resource_exists(\"database\", \"mydb\")\n\n        if not db_exists then\n            -- Create new database\n            create_database(\"mydb\")\n\n            stack.register_resource({\n                type = \"database\",\n                name = \"mydb\",\n                module = \"custom\",\n                properties = {version = \"1.0\"}\n            })\n        else\n            print(\"Database already exists\")\n        end\n    end\n})\n</code></pre>"},{"location":"stack-idempotency-guide/#summary","title":"Summary","text":"<p>Sloth Runner's stack management provides:</p> <ol> <li>Idempotency: Resources only change when needed</li> <li>State Tracking: Full history of what was created/modified</li> <li>Drift Detection: Know when infrastructure has changed</li> <li>Parallel Safety: Goroutines work with idempotent resources</li> <li>Audit Trail: Complete execution history</li> </ol> <p>This makes Sloth Runner ideal for: - Infrastructure as Code (IaC) - Configuration Management - Deployment Automation - Compliance and Auditing - GitOps Workflows</p>"},{"location":"stack-management/","title":"Stack Management","text":"<p>\ud83d\udcda Documentation</p> <p>For Stack Management documentation, please visit:</p> <ul> <li>\ud83c\uddfa\ud83c\uddf8 Stack Management (English)</li> <li>\ud83c\uddfa\ud83c\uddf8 Enterprise Features (English)</li> </ul> <p>Redirecting to Stack Management documentation...</p> <p>If you are not redirected automatically, click here.</p>"},{"location":"state-management/","title":"State Management and Idempotency","text":""},{"location":"state-management/#overview","title":"Overview","text":"<p>Sloth Runner includes a built-in state management system that enables tracking of configuration state and resource management. This provides a foundation for implementing idempotent operations.</p>"},{"location":"state-management/#state-storage","title":"State Storage","text":"<p>State is stored in SQLite databases per agent:</p> <pre><code>$HOME/.sloth-runner/state/\n  \u251c\u2500\u2500 local.db          # Local agent state\n  \u251c\u2500\u2500 mariaguica.db     # mariaguica agent state\n  \u2514\u2500\u2500 production.db     # production agent state\n</code></pre>"},{"location":"state-management/#cli-commands","title":"CLI Commands","text":""},{"location":"state-management/#list-states","title":"List States","text":"<p>View all tracked states:</p> <pre><code># List all states for local agent\nsloth-runner state list\n\n# List states for specific agent\nsloth-runner state list --agent mariaguica\n\n# Filter by prefix\nsloth-runner state list file\n\n# Output as JSON\nsloth-runner state list --output json\n</code></pre>"},{"location":"state-management/#show-state-details","title":"Show State Details","text":"<p>View detailed information about a specific state:</p> <pre><code># Show state details\nsloth-runner state show deployment:version\n\n# JSON output\nsloth-runner state show deployment:version --output json\n</code></pre>"},{"location":"state-management/#delete-states","title":"Delete States","text":"<p>Remove state entries:</p> <pre><code># Delete specific state (with confirmation)\nsloth-runner state delete deployment:version\n\n# Skip confirmation\nsloth-runner state delete deployment:version --yes\n</code></pre>"},{"location":"state-management/#clear-all-states","title":"Clear All States","text":"<p>Remove all state entries:</p> <pre><code># Clear all states (with confirmation)\nsloth-runner state clear\n\n# Skip confirmation\nsloth-runner state clear --yes\n</code></pre>"},{"location":"state-management/#state-statistics","title":"State Statistics","text":"<p>View state database statistics:</p> <pre><code># Show statistics\nsloth-runner state stats\n\n# JSON output\nsloth-runner state stats --output json\n</code></pre>"},{"location":"state-management/#using-state-in-tasks","title":"Using State in Tasks","text":""},{"location":"state-management/#basic-state-operations","title":"Basic State Operations","text":"<pre><code>task({\n    name = \"track-deployment\",\n    run = function()\n        -- Store deployment version\n        state.set(\"deployment:version\", \"v1.2.3\")\n\n        -- Retrieve stored value\n        local version = state.get(\"deployment:version\")\n        print(\"Current version: \" .. version)\n\n        -- Check if key exists\n        if state.exists(\"deployment:rollback\") then\n            print(\"Rollback state available\")\n        end\n\n        -- Delete state\n        state.delete(\"deployment:old-version\")\n    end\n})\n</code></pre>"},{"location":"state-management/#state-locks","title":"State Locks","text":"<p>Prevent concurrent modifications:</p> <pre><code>task({\n    name = \"critical-update\",\n    run = function()\n        -- Acquire lock with 5 minute timeout\n        state.lock(\"deployment\", \"task-123\", 300)\n\n        -- Critical operations here\n        state.set(\"deployment:status\", \"in-progress\")\n\n        -- Release lock\n        state.unlock(\"deployment\", \"task-123\")\n    end\n})\n</code></pre>"},{"location":"state-management/#using-with-lock-helper","title":"Using With Lock Helper","text":"<pre><code>task({\n    name = \"safe-update\",\n    run = function()\n        -- Automatically manages lock lifecycle\n        state.with_lock(\"deployment\", \"task-123\", 300, function()\n            -- Operations inside lock\n            state.set(\"deployment:status\", \"updating\")\n            -- ... perform update ...\n            state.set(\"deployment:status\", \"complete\")\n        end)\n    end\n})\n</code></pre>"},{"location":"state-management/#implementing-idempotency","title":"Implementing Idempotency","text":"<p>You can implement idempotent operations using state tracking:</p> <pre><code>task({\n    name = \"install-package\",\n    run = function()\n        local package_name = \"nginx\"\n        local state_key = \"package:installed:\" .. package_name\n\n        -- Check if already installed\n        if state.exists(state_key) then\n            print(\"Package \" .. package_name .. \" already installed (skipping)\")\n            return\n        end\n\n        -- Install package\n        cmd({\n            command = \"apt-get install -y \" .. package_name,\n            delegate_to = values.host\n        })\n\n        -- Track installation\n        state.set(state_key, tostring(os.time()))\n        print(\"Package \" .. package_name .. \" installed\")\n    end\n})\n</code></pre>"},{"location":"state-management/#configuration-file-management","title":"Configuration File Management","text":"<p>Track configuration changes:</p> <pre><code>task({\n    name = \"update-config\",\n    run = function()\n        local config_file = \"/etc/app/config.ini\"\n        local template_src = \"./templates/config.ini.tmpl\"\n\n        -- Read current template\n        local new_content = template.render({\n            src = template_src,\n            vars = values\n        })\n\n        -- Calculate checksum\n        local new_hash = crypto.sha256(new_content)\n        local state_key = \"config:hash:\" .. config_file\n\n        -- Get stored hash\n        local old_hash = state.get(state_key)\n\n        if old_hash == new_hash then\n            print(\"Configuration unchanged (skipping)\")\n            return\n        end\n\n        -- Deploy new configuration\n        file.copy({\n            src = template_src,\n            dest = config_file,\n            delegate_to = values.host\n        })\n\n        -- Update hash\n        state.set(state_key, new_hash)\n        print(\"Configuration updated\")\n    end\n})\n</code></pre>"},{"location":"state-management/#multi-resource-tracking","title":"Multi-Resource Tracking","text":"<p>Track multiple related resources:</p> <pre><code>task({\n    name = \"setup-webserver\",\n    run = function()\n        local resources = {\n            {type = \"user\", name = \"www-data\"},\n            {type = \"dir\", name = \"/var/www\"},\n            {type = \"service\", name = \"nginx\"}\n        }\n\n        for _, res in ipairs(resources) do\n            local state_key = res.type .. \":\" .. res.name\n\n            if not state.exists(state_key) then\n                -- Create resource based on type\n                if res.type == \"user\" then\n                    cmd({command = \"useradd \" .. res.name})\n                elseif res.type == \"dir\" then\n                    cmd({command = \"mkdir -p \" .. res.name})\n                elseif res.type == \"service\" then\n                    cmd({command = \"systemctl enable \" .. res.name})\n                end\n\n                -- Mark as created\n                state.set(state_key, \"created\")\n            end\n        end\n    end\n})\n</code></pre>"},{"location":"state-management/#cross-agent-state-sharing","title":"Cross-Agent State Sharing","text":"<p>Share state between agents:</p> <pre><code>task({\n    name = \"leader-election\",\n    delegate_to = \"agent1\",\n    run = function()\n        -- Try to become leader\n        if not state.exists(\"cluster:leader\") then\n            state.set(\"cluster:leader\", \"agent1\")\n            print(\"Became cluster leader\")\n        end\n    end\n})\n\ntask({\n    name = \"check-leader\",\n    delegate_to = \"agent2\",\n    run = function()\n        local leader = state.get(\"cluster:leader\")\n        print(\"Current leader: \" .. (leader or \"none\"))\n    end\n})\n</code></pre>"},{"location":"state-management/#advanced-patterns","title":"Advanced Patterns","text":""},{"location":"state-management/#state-based-conditionals","title":"State-Based Conditionals","text":"<pre><code>task({\n    name = \"conditional-deployment\",\n    run = function()\n        local env = state.get(\"environment:type\") or \"development\"\n\n        if env == \"production\" then\n            -- Production-specific logic\n            state.set(\"deployment:replicas\", \"5\")\n        else\n            -- Development logic\n            state.set(\"deployment:replicas\", \"1\")\n        end\n    end\n})\n</code></pre>"},{"location":"state-management/#versioned-state","title":"Versioned State","text":"<pre><code>task({\n    name = \"versioned-config\",\n    run = function()\n        -- Increment version\n        local version = state.increment(\"config:version\", 1)\n\n        -- Store versioned config\n        state.set(\"config:v\" .. version, config_content)\n\n        -- Keep reference to current\n        state.set(\"config:current\", tostring(version))\n    end\n})\n</code></pre>"},{"location":"state-management/#state-cleanup","title":"State Cleanup","text":"<pre><code>task({\n    name = \"cleanup-old-state\",\n    run = function()\n        -- List all states with prefix\n        local all_states = state.list(\"temporary:\")\n\n        -- Clean up temporary states\n        for key, _ in pairs(all_states) do\n            state.delete(key)\n        end\n    end\n})\n</code></pre>"},{"location":"state-management/#best-practices","title":"Best Practices","text":""},{"location":"state-management/#1-use-consistent-key-naming","title":"1. Use Consistent Key Naming","text":"<pre><code>-- Good pattern: {resource_type}:{operation}:{identifier}\nstate.set(\"package:installed:nginx\", \"true\")\nstate.set(\"config:hash:/etc/nginx/nginx.conf\", checksum)\nstate.set(\"deployment:version:app\", \"v1.2.3\")\n</code></pre>"},{"location":"state-management/#2-check-before-modify","title":"2. Check Before Modify","text":"<pre><code>-- Always check existence before operations\nif not state.exists(\"resource:initialized\") then\n    -- Initialize resource\n    state.set(\"resource:initialized\", \"true\")\nend\n</code></pre>"},{"location":"state-management/#3-use-locks-for-critical-sections","title":"3. Use Locks for Critical Sections","text":"<pre><code>-- Protect critical operations\nstate.with_lock(\"resource\", \"task-id\", 300, function()\n    -- Critical code here\nend)\n</code></pre>"},{"location":"state-management/#4-clean-up-state","title":"4. Clean Up State","text":"<pre><code>-- Remove state when resource is deleted\nstate.delete(\"package:installed:old-package\")\n</code></pre>"},{"location":"state-management/#5-monitor-state-size","title":"5. Monitor State Size","text":"<pre><code># Regular checks\nsloth-runner state stats\n</code></pre>"},{"location":"state-management/#state-api-reference","title":"State API Reference","text":"<p>Available in Lua tasks:</p>"},{"location":"state-management/#statesetkey-value","title":"state.set(key, value)","text":"<p>Store a key-value pair <pre><code>state.set(\"app:version\", \"1.0.0\")\n</code></pre></p>"},{"location":"state-management/#stategetkey","title":"state.get(key)","text":"<p>Retrieve a value <pre><code>local version = state.get(\"app:version\")\n</code></pre></p>"},{"location":"state-management/#stateexistskey","title":"state.exists(key)","text":"<p>Check if key exists <pre><code>if state.exists(\"deployment:lock\") then\n    print(\"Deployment locked\")\nend\n</code></pre></p>"},{"location":"state-management/#statedeletekey","title":"state.delete(key)","text":"<p>Remove a key <pre><code>state.delete(\"temp:session\")\n</code></pre></p>"},{"location":"state-management/#statelistprefix","title":"state.list(prefix)","text":"<p>List keys with prefix <pre><code>local configs = state.list(\"config:\")\n</code></pre></p>"},{"location":"state-management/#stateincrementkey-delta","title":"state.increment(key, delta)","text":"<p>Increment numeric value <pre><code>local count = state.increment(\"deploy:count\", 1)\n</code></pre></p>"},{"location":"state-management/#statelockname-holder-timeout_seconds","title":"state.lock(name, holder, timeout_seconds)","text":"<p>Acquire a lock <pre><code>state.lock(\"deployment\", \"task-123\", 300)\n</code></pre></p>"},{"location":"state-management/#stateunlockname-holder","title":"state.unlock(name, holder)","text":"<p>Release a lock <pre><code>state.unlock(\"deployment\", \"task-123\")\n</code></pre></p>"},{"location":"state-management/#statewith_lockname-holder-timeout-function","title":"state.with_lock(name, holder, timeout, function)","text":"<p>Execute function with lock <pre><code>state.with_lock(\"deploy\", \"task-1\", 300, function()\n    -- Protected code\nend)\n</code></pre></p>"},{"location":"state-management/#stateis_lockedname","title":"state.is_locked(name)","text":"<p>Check if locked <pre><code>local locked, holder = state.is_locked(\"deployment\")\nif locked then\n    print(\"Locked by: \" .. holder)\nend\n</code></pre></p>"},{"location":"state-management/#troubleshooting","title":"Troubleshooting","text":""},{"location":"state-management/#state-out-of-sync","title":"State Out of Sync","text":"<p>Reset specific state: <pre><code>sloth-runner state delete package:installed:nginx\n</code></pre></p>"},{"location":"state-management/#clear-all-state","title":"Clear All State","text":"<p>Start fresh: <pre><code>sloth-runner state clear --yes\n</code></pre></p>"},{"location":"state-management/#view-state-contents","title":"View State Contents","text":"<p>Inspect stored values: <pre><code>sloth-runner state list\nsloth-runner state show app:version\n</code></pre></p>"},{"location":"state-management/#future-enhancements","title":"Future Enhancements","text":"<p>Planned improvements: - Remote state backends (S3, etcd, Consul) - State encryption at rest - State versioning and history - State import/export - Web UI for state visualization - Automatic resource checksumming - Built-in idempotency for all modules</p>"},{"location":"state-module/","title":"State Module","text":"<p>\ud83d\udcda Documentation</p> <p>For State Module documentation, please visit:</p> <ul> <li>\ud83d\udd27 State Module Reference</li> <li>\ud83c\uddfa\ud83c\uddf8 Core Concepts (English)</li> <li>\ud83d\udce6 All Modules</li> </ul> <p>Redirecting to State Module documentation...</p> <p>If you are not redirected automatically, click here.</p>"},{"location":"testing/","title":"Testing","text":"<p>\ud83d\udcda Documentation</p> <p>For Testing documentation, please visit:</p> <ul> <li>\ud83c\uddfa\ud83c\uddf8 English Version</li> <li>\ud83c\udde7\ud83c\uddf7 Vers\u00e3o em Portugu\u00eas</li> <li>\ud83c\udde8\ud83c\uddf3 \u4e2d\u6587\u7248\u672c</li> </ul> <p>Redirecting to English version...</p> <p>If you are not redirected automatically, click here.</p>"},{"location":"web-dashboard/","title":"Web Dashboard","text":"<p>\ud83d\udcda Documentation</p> <p>For Web Dashboard and monitoring features, please visit:</p> <ul> <li>\ud83c\uddfa\ud83c\uddf8 Monitoring Documentation (English)</li> <li>\ud83c\uddfa\ud83c\uddf8 Enterprise Features (English)</li> </ul> <p>Redirecting to Monitoring documentation...</p> <p>If you are not redirected automatically, click here.</p>"},{"location":"architecture/","title":"Arquitetura Modular - Sloth Runner","text":""},{"location":"architecture/#objetivo","title":"\ud83c\udfaf Objetivo","text":"<p>Transformar o Sloth Runner de uma aplica\u00e7\u00e3o monol\u00edtica para uma arquitetura modular, aplicando design patterns e best practices da ind\u00fastria.</p>"},{"location":"architecture/#situacao-antes-da-refatoracao","title":"\ud83d\udcca Situa\u00e7\u00e3o Antes da Refatora\u00e7\u00e3o","text":""},{"location":"architecture/#problemas-identificados","title":"Problemas Identificados","text":"<pre><code>\u274c main.go com 3.462 linhas\n\u274c 37 comandos no mesmo arquivo\n\u274c L\u00f3gica de neg\u00f3cio misturada com CLI\n\u274c Dif\u00edcil de testar\n\u274c Dif\u00edcil de manter e estender\n\u274c Alto acoplamento entre componentes\n</code></pre>"},{"location":"architecture/#arquivos-problematicos","title":"Arquivos Problem\u00e1ticos","text":"Arquivo Linhas Problema <code>cmd/sloth-runner/main.go</code> 3.462 Monol\u00edtico, m\u00faltiplas responsabilidades <code>internal/luainterface/luainterface.go</code> 1.793 Muitas funcionalidades em um arquivo <code>internal/modules/documentation.go</code> 1.705 Documenta\u00e7\u00e3o acoplada ao c\u00f3digo <code>internal/luainterface/user.go</code> 1.669 L\u00f3gica complexa n\u00e3o modularizada <code>internal/taskrunner/taskrunner.go</code> 1.573 Task runner com muitas responsabilidades"},{"location":"architecture/#arquitetura-nova","title":"\ud83c\udfd7\ufe0f Arquitetura Nova","text":""},{"location":"architecture/#estrutura-de-diretorios","title":"Estrutura de Diret\u00f3rios","text":"<pre><code>cmd/sloth-runner/\n\u251c\u2500\u2500 main.go                   # Entry point (~40 linhas)\n\u251c\u2500\u2500 commands/                 # Comandos CLI (Factory Pattern)\n\u2502   \u251c\u2500\u2500 context.go           # Dependency Injection\n\u2502   \u251c\u2500\u2500 root.go              # Root command\n\u2502   \u251c\u2500\u2500 version.go\n\u2502   \u251c\u2500\u2500 run.go\n\u2502   \u251c\u2500\u2500 agent/               # Comandos do agente\n\u2502   \u2502   \u251c\u2500\u2500 agent.go\n\u2502   \u2502   \u251c\u2500\u2500 start.go\n\u2502   \u2502   \u251c\u2500\u2500 stop.go\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 stack/               # Comandos de stack\n\u2502   \u2502   \u251c\u2500\u2500 stack.go\n\u2502   \u2502   \u251c\u2500\u2500 new.go\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2514\u2500\u2500 scheduler/           # Comandos de scheduler\n\u2502       \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 handlers/                # Business Logic (Handler Pattern)\n\u2502   \u251c\u2500\u2500 run_handler.go\n\u2502   \u251c\u2500\u2500 agent_handler.go\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 services/                # Servi\u00e7os Reutiliz\u00e1veis (Service Layer)\n\u2502   \u251c\u2500\u2500 stack_service.go\n\u2502   \u251c\u2500\u2500 agent_service.go\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 repositories/            # Acesso a Dados (Repository Pattern)\n    \u2514\u2500\u2500 ...\n</code></pre>"},{"location":"architecture/#design-patterns-aplicados","title":"\ud83c\udfa8 Design Patterns Aplicados","text":""},{"location":"architecture/#1-dependency-injection","title":"1. Dependency Injection","text":"<p>Arquivo: <code>commands/context.go</code></p> <pre><code>type AppContext struct {\n    Version       string\n    Commit        string\n    Date          string\n    AgentRegistry interface{}\n    SurveyAsker   taskrunner.SurveyAsker\n    OutputWriter  io.Writer\n}\n\nfunc NewAppContext(version, commit, date string) *AppContext {\n    return &amp;AppContext{\n        Version: version,\n        Commit:  commit,\n        Date:    date,\n        // ...\n    }\n}\n</code></pre> <p>Uso: <pre><code>ctx := commands.NewAppContext(version, commit, date)\ncmd := commands.NewRunCommand(ctx)\n</code></pre></p>"},{"location":"architecture/#2-factory-pattern","title":"2. Factory Pattern","text":"<p>Arquivo: <code>commands/run.go</code></p> <pre><code>func NewRunCommand(ctx *AppContext) *cobra.Command {\n    return &amp;cobra.Command{\n        Use: \"run &lt;stack-name&gt;\",\n        RunE: func(cmd *cobra.Command, args []string) error {\n            // Configura\u00e7\u00e3o e execu\u00e7\u00e3o\n        },\n    }\n}\n</code></pre>"},{"location":"architecture/#3-handler-pattern","title":"3. Handler Pattern","text":"<p>Arquivo: <code>handlers/run_handler.go</code></p> <pre><code>type RunHandler struct {\n    stackService *services.StackService\n    config       *RunConfig\n}\n\nfunc (h *RunHandler) Execute() error {\n    // L\u00f3gica de neg\u00f3cio separada do CLI\n}\n</code></pre>"},{"location":"architecture/#4-service-layer-pattern","title":"4. Service Layer Pattern","text":"<p>Arquivo: <code>services/stack_service.go</code></p> <pre><code>type StackService struct {\n    manager *stack.StackManager\n}\n\nfunc (s *StackService) GetOrCreateStack(...) (string, error) {\n    // L\u00f3gica de servi\u00e7o reutiliz\u00e1vel\n}\n</code></pre>"},{"location":"architecture/#beneficios-da-refatoracao","title":"\ud83d\udcc8 Benef\u00edcios da Refatora\u00e7\u00e3o","text":""},{"location":"architecture/#antes-vs-depois","title":"Antes vs Depois","text":"Aspecto Antes Depois Linhas no main.go 3.462 ~40 Testabilidade \u274c Dif\u00edcil \u2705 F\u00e1cil Manutenibilidade \u274c Complexa \u2705 Simples Extensibilidade \u274c Arriscada \u2705 Segura Acoplamento \u274c Alto \u2705 Baixo Coes\u00e3o \u274c Baixa \u2705 Alta Design Patterns \u274c Nenhum \u2705 5+ patterns"},{"location":"architecture/#metricas-de-qualidade","title":"M\u00e9tricas de Qualidade","text":"<pre><code>\u2705 Single Responsibility Principle\n\u2705 Open/Closed Principle\n\u2705 Liskov Substitution Principle\n\u2705 Interface Segregation Principle\n\u2705 Dependency Inversion Principle\n</code></pre>"},{"location":"architecture/#como-usar","title":"\ud83d\ude80 Como Usar","text":""},{"location":"architecture/#criando-um-novo-comando","title":"Criando um Novo Comando","text":""},{"location":"architecture/#1-criar-o-comando-em-commands","title":"1. Criar o comando em <code>commands/</code>","text":"<pre><code>// commands/my_command.go\npackage commands\n\nfunc NewMyCommand(ctx *AppContext) *cobra.Command {\n    return &amp;cobra.Command{\n        Use: \"my-command\",\n        RunE: func(cmd *cobra.Command, args []string) error {\n            // 1. Extrair flags\n            flag1, _ := cmd.Flags().GetString(\"flag1\")\n\n            // 2. Criar servi\u00e7o\n            service, err := services.NewMyService()\n            if err != nil {\n                return err\n            }\n            defer service.Close()\n\n            // 3. Criar configura\u00e7\u00e3o\n            config := &amp;handlers.MyConfig{\n                Flag1: flag1,\n                // ...\n            }\n\n            // 4. Criar e executar handler\n            handler := handlers.NewMyHandler(service, config)\n            return handler.Execute()\n        },\n    }\n}\n</code></pre>"},{"location":"architecture/#2-criar-o-handler-em-handlers","title":"2. Criar o handler em <code>handlers/</code>","text":"<pre><code>// handlers/my_handler.go\npackage handlers\n\ntype MyHandler struct {\n    service *services.MyService\n    config  *MyConfig\n}\n\nfunc NewMyHandler(service *services.MyService, config *MyConfig) *MyHandler {\n    return &amp;MyHandler{\n        service: service,\n        config:  config,\n    }\n}\n\nfunc (h *MyHandler) Execute() error {\n    // L\u00f3gica de neg\u00f3cio aqui\n    // Sem depend\u00eancia do Cobra\n    return nil\n}\n</code></pre>"},{"location":"architecture/#3-criar-o-servico-em-services-se-necessario","title":"3. Criar o servi\u00e7o em <code>services/</code> (se necess\u00e1rio)","text":"<pre><code>// services/my_service.go\npackage services\n\ntype MyService struct {\n    // depend\u00eancias\n}\n\nfunc NewMyService() (*MyService, error) {\n    return &amp;MyService{}, nil\n}\n\nfunc (s *MyService) DoSomething() error {\n    // L\u00f3gica reutiliz\u00e1vel\n    return nil\n}\n</code></pre>"},{"location":"architecture/#4-adicionar-ao-maingo","title":"4. Adicionar ao main.go","text":"<pre><code>rootCmd.AddCommand(\n    commands.NewMyCommand(ctx),\n)\n</code></pre>"},{"location":"architecture/#testando-um-handler","title":"Testando um Handler","text":"<pre><code>func TestMyHandler_Execute(t *testing.T) {\n    // Arrange\n    mockService := &amp;MockMyService{}\n    config := &amp;handlers.MyConfig{\n        Flag1: \"test\",\n    }\n    handler := handlers.NewMyHandler(mockService, config)\n\n    // Act\n    err := handler.Execute()\n\n    // Assert\n    assert.NoError(t, err)\n    assert.True(t, mockService.DoSomethingCalled)\n}\n</code></pre>"},{"location":"architecture/#exemplo-completo-comando-run","title":"\ud83d\udcda Exemplo Completo: Comando Run","text":""},{"location":"architecture/#fluxo-de-execucao","title":"Fluxo de Execu\u00e7\u00e3o","text":"<pre><code>1. main.go\n   \u2514\u2500&gt; NewRootCommand(ctx)\n       \u2514\u2500&gt; NewRunCommand(ctx)\n           \u2514\u2500&gt; RunE: handler logic\n               \u251c\u2500&gt; NewStackService()\n               \u251c\u2500&gt; NewRunHandler(service, config)\n               \u2514\u2500&gt; handler.Execute()\n                   \u251c\u2500&gt; validateInputs()\n                   \u251c\u2500&gt; initializeSSH()\n                   \u251c\u2500&gt; parseLuaScript()\n                   \u251c\u2500&gt; executeTasks()\n                   \u2514\u2500&gt; recordExecution()\n</code></pre>"},{"location":"architecture/#arquivos-envolvidos","title":"Arquivos Envolvidos","text":"<pre><code>commands/run.go          - Comando CLI (80 linhas)\n  \u2193\nhandlers/run_handler.go  - L\u00f3gica de neg\u00f3cio (400 linhas)\n  \u2193\nservices/stack_service.go - Opera\u00e7\u00f5es de stack (120 linhas)\n</code></pre> <p>Total: ~600 linhas vs Antes: 500+ linhas em um \u00fanico m\u00e9todo</p>"},{"location":"architecture/#principios-aplicados","title":"\ud83c\udf93 Princ\u00edpios Aplicados","text":""},{"location":"architecture/#solid","title":"SOLID","text":"<ul> <li>S: Cada classe tem uma \u00fanica responsabilidade</li> <li>O: Aberto para extens\u00e3o, fechado para modifica\u00e7\u00e3o</li> <li>L: Substitui\u00e7\u00e3o de interfaces funciona corretamente</li> <li>I: Interfaces pequenas e espec\u00edficas</li> <li>D: Depend\u00eancia de abstra\u00e7\u00f5es, n\u00e3o implementa\u00e7\u00f5es</li> </ul>"},{"location":"architecture/#clean-code","title":"Clean Code","text":"<ul> <li>Nomes descritivos</li> <li>Fun\u00e7\u00f5es pequenas e focadas</li> <li>Coment\u00e1rios apenas quando necess\u00e1rio</li> <li>DRY (Don't Repeat Yourself)</li> <li>Separa\u00e7\u00e3o de concerns</li> </ul>"},{"location":"architecture/#clean-architecture","title":"Clean Architecture","text":"<pre><code>Camadas:\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Presentation (commands/)       \u2502  \u2190 CLI, flags, formatting\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  Application (handlers/)        \u2502  \u2190 Business logic\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  Domain (services/)             \u2502  \u2190 Core business rules\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  Infrastructure (repositories/) \u2502  \u2190 DB, API, filesystem\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/#roadmap-de-refatoracao","title":"\ud83d\udd04 Roadmap de Refatora\u00e7\u00e3o","text":""},{"location":"architecture/#fase-1-fundacao-concluida","title":"\u2705 Fase 1: Funda\u00e7\u00e3o (Conclu\u00edda)","text":"<ul> <li> Criar estrutura de diret\u00f3rios</li> <li> Implementar AppContext (DI)</li> <li> Extrair comando <code>run</code></li> <li> Criar StackService</li> <li> Criar RunHandler</li> <li> Documentar arquitetura</li> </ul>"},{"location":"architecture/#fase-2-comandos-core","title":"\u23f3 Fase 2: Comandos Core","text":"<ul> <li> Extrair comandos <code>agent/*</code></li> <li> Extrair comandos <code>stack/*</code></li> <li> Extrair comandos <code>scheduler/*</code></li> <li> Extrair comandos <code>state/*</code></li> </ul>"},{"location":"architecture/#fase-3-servicos","title":"\u23f3 Fase 3: Servi\u00e7os","text":"<ul> <li> AgentService</li> <li> SchedulerService</li> <li> StateService</li> <li> SSHService</li> </ul>"},{"location":"architecture/#fase-4-repositories","title":"\u23f3 Fase 4: Repositories","text":"<ul> <li> StackRepository</li> <li> AgentRepository</li> <li> StateRepository</li> </ul>"},{"location":"architecture/#fase-5-testes","title":"\u23f3 Fase 5: Testes","text":"<ul> <li> Testes unit\u00e1rios para handlers</li> <li> Testes unit\u00e1rios para services</li> <li> Testes de integra\u00e7\u00e3o</li> <li> Testes E2E</li> </ul>"},{"location":"architecture/#recursos-adicionais","title":"\ud83d\udcd6 Recursos Adicionais","text":"<ul> <li>Design Patterns Detalhados</li> <li>Exemplo de Main.go</li> <li>Guia de Contribui\u00e7\u00e3o</li> </ul>"},{"location":"architecture/#contribuindo","title":"\ud83e\udd1d Contribuindo","text":"<p>Para adicionar novos comandos ou refatorar c\u00f3digo existente:</p> <ol> <li>Siga a estrutura estabelecida</li> <li>Aplique os design patterns documentados</li> <li>Mantenha arquivos &lt; 200 linhas quando poss\u00edvel</li> <li>Adicione testes unit\u00e1rios</li> <li>Atualize documenta\u00e7\u00e3o</li> </ol>"},{"location":"architecture/#conclusao","title":"\ud83d\udcdd Conclus\u00e3o","text":"<p>A refatora\u00e7\u00e3o modular do Sloth Runner transforma o c\u00f3digo de um mon\u00f3lito de 3.462 linhas em uma arquitetura profissional, test\u00e1vel e extens\u00edvel. Cada componente tem responsabilidade clara, facilitando manuten\u00e7\u00e3o e evolu\u00e7\u00e3o do projeto.</p> <p>Resultado: C\u00f3digo enterprise-grade que segue best practices da ind\u00fastria! \ud83c\udf89</p>"},{"location":"architecture/hooks-events-system/","title":"Hooks and Events System","text":""},{"location":"architecture/hooks-events-system/#overview","title":"Overview","text":"<p>The Sloth Runner hooks and events system provides a powerful event-driven automation framework that allows you to respond to system events with custom Lua scripts. This enables automated workflows, monitoring, incident response, and integration with external systems.</p>"},{"location":"architecture/hooks-events-system/#key-features","title":"Key Features","text":"<ul> <li>Event-Driven Architecture: React to 100+ event types across 16 categories</li> <li>Asynchronous Processing: High-performance worker pool with 100 concurrent goroutines</li> <li>Persistent Queue: SQLite-backed event queue ensures no events are lost</li> <li>Lua Scripting: Write hooks in Lua with access to all workflow modules</li> <li>Stack Isolation: Organize hooks by project or environment</li> <li>Execution Tracking: Complete audit trail of hook executions</li> <li>File Watchers: Trigger events on filesystem changes (planned)</li> </ul>"},{"location":"architecture/hooks-events-system/#use-cases","title":"Use Cases","text":"<ul> <li>Automated Monitoring: React to agent disconnections, high CPU usage, or failed tasks</li> <li>Security Automation: Respond to security events with automated incident response</li> <li>Deployment Automation: Orchestrate complex deployment workflows</li> <li>Integration: Send notifications to Slack, Discord, email, or external systems</li> <li>Resource Management: Auto-scale infrastructure based on resource utilization</li> <li>Backup Automation: Trigger backups on specific events</li> <li>Compliance: Audit and log security-sensitive operations</li> </ul>"},{"location":"architecture/hooks-events-system/#architecture","title":"Architecture","text":""},{"location":"architecture/hooks-events-system/#high-level-architecture","title":"High-Level Architecture","text":"<pre><code>graph TB\n    subgraph \"Event Sources\"\n        A[Agent Registry]\n        B[Task Executor]\n        C[Workflow Engine]\n        D[System Monitor]\n        E[File Watcher]\n    end\n\n    subgraph \"Event Dispatcher\"\n        F[Event Channel&lt;br/&gt;Buffer: 1000]\n        G[SQLite Queue]\n    end\n\n    subgraph \"Worker Pool\"\n        H1[Worker 1]\n        H2[Worker 2]\n        H3[Worker ...]\n        H100[Worker 100]\n    end\n\n    subgraph \"Hook Execution\"\n        I[Lua Executor]\n        J[Module Registry]\n        K[Hook Scripts]\n    end\n\n    subgraph \"Storage\"\n        L[(SQLite DB)]\n    end\n\n    A --&gt; F\n    B --&gt; F\n    C --&gt; F\n    D --&gt; F\n    E --&gt; F\n\n    F --&gt; G\n    G --&gt; L\n\n    F -.immediate.-&gt; H1\n    F -.immediate.-&gt; H2\n    F -.immediate.-&gt; H3\n    F -.immediate.-&gt; H100\n\n    G -.fallback.-&gt; H1\n\n    H1 --&gt; I\n    H2 --&gt; I\n    H3 --&gt; I\n    H100 --&gt; I\n\n    I --&gt; J\n    I --&gt; K\n\n    I --&gt; L</code></pre>"},{"location":"architecture/hooks-events-system/#component-overview","title":"Component Overview","text":""},{"location":"architecture/hooks-events-system/#1-event-sources","title":"1. Event Sources","text":"<p>Event sources are components throughout the system that generate events: - Agent Registry: Agent lifecycle events (registered, disconnected, updated) - Task Executor: Task execution events (started, completed, failed) - Workflow Engine: Workflow lifecycle events - System Monitor: Resource and health monitoring events - File Watcher: Filesystem change events</p>"},{"location":"architecture/hooks-events-system/#2-event-dispatcher","title":"2. Event Dispatcher","text":"<p>The dispatcher manages event routing and persistence: - Event Channel: Buffered channel (1000 events) for immediate processing - SQLite Queue: Persistent storage for event ordering and fallback processing</p>"},{"location":"architecture/hooks-events-system/#3-worker-pool","title":"3. Worker Pool","text":"<p>A pool of 100 goroutines that process events concurrently: - Each worker consumes events from the channel - Events are processed immediately upon arrival - Workers execute hooks concurrently for each event - Graceful shutdown with event draining</p>"},{"location":"architecture/hooks-events-system/#4-hook-execution","title":"4. Hook Execution","text":"<p>The Lua execution environment for running hooks: - Lua Executor: Sandboxed Lua VM with timeout protection - Module Registry: Access to all workflow modules (exec, http, json, etc.) - Hook Scripts: User-defined Lua scripts stored on filesystem</p>"},{"location":"architecture/hooks-events-system/#5-storage","title":"5. Storage","text":"<p>SQLite database for persistence: - Events table with status tracking - Hooks registry - Execution history - Event-hook execution junction table</p>"},{"location":"architecture/hooks-events-system/#goroutine-architecture","title":"Goroutine Architecture","text":""},{"location":"architecture/hooks-events-system/#worker-pool-pattern","title":"Worker Pool Pattern","text":"<p>The system uses a sophisticated worker pool pattern for high-performance event processing:</p> <pre><code>sequenceDiagram\n    participant S as Event Source\n    participant D as Dispatcher\n    participant C as Event Channel\n    participant W1 as Worker 1\n    participant W2 as Worker 2\n    participant WN as Worker N\n    participant Q as SQLite Queue\n    participant F as Fallback Processor\n\n    Note over D: Initialize 100 workers at startup\n\n    S-&gt;&gt;D: Dispatch Event\n    D-&gt;&gt;Q: Persist to SQLite\n    D-&gt;&gt;C: Send to channel (non-blocking)\n\n    alt Channel available\n        C-&gt;&gt;W1: Event received\n        W1-&gt;&gt;W1: Process event&lt;br/&gt;(execute hooks)\n    else Channel full\n        D-&gt;&gt;Q: Mark for fallback\n        Note over F: Processes from SQLite&lt;br/&gt;every 5 seconds\n        F-&gt;&gt;W2: Event received\n        W2-&gt;&gt;W2: Process event\n    end\n\n    Note over W1,WN: All workers run concurrently&lt;br/&gt;processing events in parallel</code></pre>"},{"location":"architecture/hooks-events-system/#worker-lifecycle","title":"Worker Lifecycle","text":"<pre><code>func (d *Dispatcher) eventWorker(workerID int) {\n    defer d.workerWg.Done()\n\n    for {\n        select {\n        case &lt;-d.stopChan:\n            // Graceful shutdown: drain remaining events\n            for event := range d.eventChannel {\n                d.processEvent(event)\n            }\n            return\n\n        case event, ok := &lt;-d.eventChannel:\n            if !ok {\n                return // Channel closed\n            }\n            // Process event immediately\n            d.processEvent(event)\n        }\n    }\n}\n</code></pre>"},{"location":"architecture/hooks-events-system/#key-design-decisions","title":"Key Design Decisions","text":""},{"location":"architecture/hooks-events-system/#why-100-workers","title":"Why 100 Workers?","text":"<ul> <li>Balances concurrency with resource usage</li> <li>Each worker is lightweight (goroutine overhead ~2KB)</li> <li>Total memory: ~200KB for worker pool</li> <li>Allows processing up to 100 events simultaneously</li> </ul>"},{"location":"architecture/hooks-events-system/#why-buffered-channel-1000","title":"Why Buffered Channel (1000)?","text":"<ul> <li>Handles burst traffic without dropping events</li> <li>Events always persisted to SQLite first</li> <li>Channel provides immediate processing path</li> <li>Fallback processor handles overflow</li> </ul>"},{"location":"architecture/hooks-events-system/#graceful-shutdown","title":"Graceful Shutdown","text":"<ul> <li>Workers drain remaining events before stopping</li> <li>No events lost during shutdown</li> <li>WaitGroup ensures all workers complete</li> </ul>"},{"location":"architecture/hooks-events-system/#event-processing-flow","title":"Event Processing Flow","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; Received: Event arrives\n    Received --&gt; Persisted: Write to SQLite\n    Persisted --&gt; Enqueued: Send to channel\n\n    Enqueued --&gt; Processing: Worker picks up\n    Enqueued --&gt; Pending: Channel full\n\n    Pending --&gt; Processing: Fallback processor\n\n    Processing --&gt; FindingHooks: Update status\n    FindingHooks --&gt; ExecutingHooks: Query enabled hooks\n\n    ExecutingHooks --&gt; HookExecution1: Spawn goroutine\n    ExecutingHooks --&gt; HookExecution2: Spawn goroutine\n    ExecutingHooks --&gt; HookExecutionN: Spawn goroutine\n\n    HookExecution1 --&gt; RecordResult1: Execute Lua script\n    HookExecution2 --&gt; RecordResult2: Execute Lua script\n    HookExecutionN --&gt; RecordResultN: Execute Lua script\n\n    RecordResult1 --&gt; WaitAll: Save to DB\n    RecordResult2 --&gt; WaitAll: Save to DB\n    RecordResultN --&gt; WaitAll: Save to DB\n\n    WaitAll --&gt; Completed: All hooks done\n    WaitAll --&gt; Failed: Any hook failed\n\n    Completed --&gt; [*]\n    Failed --&gt; [*]</code></pre>"},{"location":"architecture/hooks-events-system/#concurrency-at-multiple-levels","title":"Concurrency at Multiple Levels","text":"<p>The system implements concurrency at three levels:</p> <ol> <li>Worker Pool Level: 100 workers process different events concurrently</li> <li>Hook Execution Level: Each event spawns goroutines for each hook</li> <li>Event Processing Level: Immediate processing via channel + fallback from SQLite</li> </ol> <p>Example with 5 events and 3 hooks each: <pre><code>Worker 1: Event A \u2192 [Hook 1, Hook 2, Hook 3] (3 goroutines)\nWorker 2: Event B \u2192 [Hook 1, Hook 2, Hook 3] (3 goroutines)\nWorker 3: Event C \u2192 [Hook 1, Hook 2, Hook 3] (3 goroutines)\nWorker 4: Event D \u2192 [Hook 1, Hook 2, Hook 3] (3 goroutines)\nWorker 5: Event E \u2192 [Hook 1, Hook 2, Hook 3] (3 goroutines)\n\nTotal concurrent goroutines: 5 workers + 15 hook executions = 20\n</code></pre></p>"},{"location":"architecture/hooks-events-system/#event-types","title":"Event Types","text":"<p>The system supports 100+ event types across 16 categories:</p>"},{"location":"architecture/hooks-events-system/#event-categories","title":"Event Categories","text":"Category Event Count Examples Agent Events 7 <code>agent.registered</code>, <code>agent.disconnected</code>, <code>agent.heartbeat_failed</code> Task Events 6 <code>task.started</code>, <code>task.completed</code>, <code>task.failed</code> Workflow Events 6 <code>workflow.started</code>, <code>workflow.completed</code>, <code>workflow.failed</code> System Events 8 <code>system.startup</code>, <code>system.error</code>, <code>system.cpu_high</code> Scheduler Events 7 <code>schedule.triggered</code>, <code>schedule.missed</code> State Events 6 <code>state.created</code>, <code>state.updated</code>, <code>state.corrupted</code> Secret Events 6 <code>secret.created</code>, <code>secret.accessed</code>, <code>secret.expired</code> Stack Events 5 <code>stack.deployed</code>, <code>stack.destroyed</code>, <code>stack.drift_detected</code> Backup Events 6 <code>backup.started</code>, <code>backup.completed</code>, <code>restore.failed</code> Database Events 5 <code>db.connected</code>, <code>db.query_slow</code>, <code>db.error</code> Network Events 4 <code>network.down</code>, <code>network.up</code>, <code>network.latency_high</code> Security Events 5 <code>security.breach</code>, <code>security.unauthorized</code>, <code>security.login_failed</code> File Events 6 <code>file.created</code>, <code>file.modified</code>, <code>file.deleted</code> Deploy Events 4 <code>deploy.started</code>, <code>deploy.completed</code>, <code>deploy.rollback</code> Health Events 4 <code>health.check_failed</code>, <code>health.degraded</code>, <code>health.recovered</code> Custom Events 1 <code>custom</code>"},{"location":"architecture/hooks-events-system/#event-data-structure","title":"Event Data Structure","text":"<p>Each event has a consistent structure:</p> <pre><code>type Event struct {\n    ID          string                 // Unique event ID\n    Type        EventType              // Event type (e.g., \"agent.registered\")\n    Timestamp   time.Time              // When event occurred\n    Data        map[string]interface{} // Event-specific data\n    Status      EventStatus            // pending/processing/completed/failed\n    Error       string                 // Error message if failed\n    CreatedAt   time.Time              // When event was created\n    ProcessedAt *time.Time             // When event was processed\n}\n</code></pre>"},{"location":"architecture/hooks-events-system/#event-specific-data","title":"Event-Specific Data","text":"<p>Each event type includes specific data relevant to that event:</p> <p>Agent Event Example: <pre><code>{\n  \"event_type\": \"agent.registered\",\n  \"data\": {\n    \"agent\": {\n      \"name\": \"web-server-01\",\n      \"address\": \"192.168.1.100:50051\",\n      \"tags\": [\"production\", \"web\"],\n      \"version\": \"1.0.0\",\n      \"system_info\": {\n        \"os\": \"linux\",\n        \"arch\": \"amd64\",\n        \"cpu_cores\": 8,\n        \"memory_gb\": 16\n      }\n    }\n  }\n}\n</code></pre></p> <p>Task Event Example: <pre><code>{\n  \"event_type\": \"task.failed\",\n  \"data\": {\n    \"task\": {\n      \"task_name\": \"deploy_app\",\n      \"agent_name\": \"web-server-01\",\n      \"status\": \"failed\",\n      \"exit_code\": 1,\n      \"error\": \"Connection refused\",\n      \"duration\": \"2m30s\"\n    }\n  }\n}\n</code></pre></p>"},{"location":"architecture/hooks-events-system/#hook-system","title":"Hook System","text":""},{"location":"architecture/hooks-events-system/#hook-structure","title":"Hook Structure","text":"<p>A hook is a Lua script that executes when specific events occur:</p> <pre><code>-- Hook metadata\nlocal hook = {\n    name = \"notify_on_failure\",\n    description = \"Send notification when tasks fail\",\n    event_type = \"task.failed\",\n    stack = \"production\"  -- Optional: stack isolation\n}\n\n-- Hook execution function\nfunction hook.execute(event)\n    local task = event.data.task\n\n    -- Access to all workflow modules\n    local http = require(\"http\")\n    local json = require(\"json\")\n\n    -- Send notification\n    local payload = json.encode({\n        text = string.format(\"Task %s failed on %s: %s\",\n            task.task_name,\n            task.agent_name,\n            task.error\n        )\n    })\n\n    local response = http.post(\"https://hooks.slack.com/...\", {\n        headers = {[\"Content-Type\"] = \"application/json\"},\n        body = payload\n    })\n\n    if response.status_code ~= 200 then\n        error(\"Failed to send notification\")\n    end\n\n    return true, \"Notification sent successfully\"\nend\n\nreturn hook\n</code></pre>"},{"location":"architecture/hooks-events-system/#hook-lifecycle","title":"Hook Lifecycle","text":"<pre><code>sequenceDiagram\n    participant U as User\n    participant CLI as CLI\n    participant R as Repository\n    participant D as Dispatcher\n    participant W as Worker\n    participant E as Lua Executor\n    participant H as Hook Script\n\n    U-&gt;&gt;CLI: sloth-runner hook add notify.lua\n    CLI-&gt;&gt;R: Register hook\n    R-&gt;&gt;R: Validate script\n    R-&gt;&gt;R: Store in database\n    CLI--&gt;&gt;U: Hook registered\n\n    Note over D: Event occurs\n    D-&gt;&gt;D: Persist event to SQLite\n    D-&gt;&gt;W: Send to worker via channel\n    W-&gt;&gt;R: Query hooks for event type\n    R--&gt;&gt;W: Return matching hooks\n\n    loop For each hook\n        W-&gt;&gt;E: Execute hook\n        E-&gt;&gt;H: Load Lua script\n        E-&gt;&gt;H: Call hook.execute(event)\n        H-&gt;&gt;H: Run user code\n        H--&gt;&gt;E: Return result\n        E--&gt;&gt;W: Hook result\n        W-&gt;&gt;R: Record execution\n    end\n\n    W-&gt;&gt;R: Update event status</code></pre>"},{"location":"architecture/hooks-events-system/#available-modules-in-hooks","title":"Available Modules in Hooks","text":"<p>Hooks have access to all workflow modules:</p> Module Description Example Usage exec Execute commands <code>exec.run(\"systemctl restart app\")</code> http HTTP requests <code>http.get(\"https://api.example.com\")</code> json JSON encoding/decoding <code>json.encode(data)</code> yaml YAML parsing <code>yaml.decode(content)</code> template Template rendering <code>template.render(\"{{.name}}\", data)</code> crypto Encryption/hashing <code>crypto.sha256(data)</code> env Environment variables <code>env.get(\"PATH\")</code> file File operations <code>file.read(\"/etc/config\")</code> state State management <code>state.get(\"counter\")</code> secret Secret management <code>secret.get(\"api_key\")</code> event Dispatch events <code>event.dispatch(\"custom\", data)</code>"},{"location":"architecture/hooks-events-system/#cli-commands","title":"CLI Commands","text":""},{"location":"architecture/hooks-events-system/#hook-management","title":"Hook Management","text":"<pre><code># Register a new hook\nsloth-runner hook add path/to/hook.lua\n\n# List all hooks\nsloth-runner hook list\n\n# List hooks for specific stack\nsloth-runner hook list --stack production\n\n# Get hook details\nsloth-runner hook get notify_on_failure\n\n# Enable/disable hooks\nsloth-runner hook enable notify_on_failure\nsloth-runner hook disable notify_on_failure\n\n# Remove a hook\nsloth-runner hook remove notify_on_failure\n\n# View hook execution history\nsloth-runner hook history notify_on_failure --limit 20\n</code></pre>"},{"location":"architecture/hooks-events-system/#event-management","title":"Event Management","text":"<pre><code># List recent events\nsloth-runner events list\n\n# Filter events by type\nsloth-runner events list --type task.failed\n\n# Filter events by status\nsloth-runner events list --status failed\n\n# Get event details as JSON\nsloth-runner events get &lt;event-id&gt;\n\n# Show event with hook execution details\nsloth-runner events show &lt;event-id&gt;\n\n# Delete an event\nsloth-runner events delete &lt;event-id&gt;\n\n# Cleanup old events (older than 30 days)\nsloth-runner events cleanup --older-than 720h\n</code></pre>"},{"location":"architecture/hooks-events-system/#example-viewing-event-details","title":"Example: Viewing Event Details","text":"<pre><code>$ sloth-runner events show a1b2c3d4-e5f6-7890\n\nEvent: a1b2c3d4-e5f6-7890\nType: task.failed\nStatus: completed\nCreated: 2025-10-06 14:23:45\nProcessed: 2025-10-06 14:23:46\n\nHook Executions\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Hook Name        \u2502 Status   \u2502 Duration\u2502 Executed At         \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 notify_slack     \u2502 \u2705 Success\u2502 234ms   \u2502 2025-10-06 14:23:46\u2502\n\u2502 create_ticket    \u2502 \u2705 Success\u2502 456ms   \u2502 2025-10-06 14:23:46\u2502\n\u2502 rollback_deploy  \u2502 \u274c Failed \u2502 123ms   \u2502 2025-10-06 14:23:46\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nHook: rollback_deploy\nError:\nFailed to connect to deployment server: connection refused\n</code></pre>"},{"location":"architecture/hooks-events-system/#stack-isolation","title":"Stack Isolation","text":"<p>Hooks can be organized by stack (project, environment, etc.):</p> <pre><code>local hook = {\n    name = \"production_monitor\",\n    event_type = \"agent.heartbeat_failed\",\n    stack = \"production\"  -- Only processes events for production stack\n}\n</code></pre>"},{"location":"architecture/hooks-events-system/#benefits-of-stack-isolation","title":"Benefits of Stack Isolation","text":"<ul> <li>Multi-Environment: Different hooks for dev/staging/production</li> <li>Multi-Project: Separate hooks per project in shared infrastructure</li> <li>Team Isolation: Different teams can manage their own hooks</li> <li>Testing: Test hooks in staging before enabling in production</li> </ul>"},{"location":"architecture/hooks-events-system/#stack-usage","title":"Stack Usage","text":"<pre><code># Add hook to specific stack\nsloth-runner hook add production_monitor.lua --stack production\n\n# List hooks for stack\nsloth-runner hook list --stack production\n\n# Events can be dispatched with stack context\nevent.dispatch(\"custom.deployment\", {\n    stack = \"production\",\n    version = \"v2.0.0\"\n})\n</code></pre>"},{"location":"architecture/hooks-events-system/#performance-characteristics","title":"Performance Characteristics","text":""},{"location":"architecture/hooks-events-system/#throughput","title":"Throughput","text":"<p>With the worker pool architecture:</p> <ul> <li>Peak throughput: ~10,000 events/second (with simple hooks)</li> <li>Sustained throughput: ~5,000 events/second</li> <li>Latency: Sub-millisecond for event dispatch</li> <li>Processing latency: Depends on hook complexity</li> </ul>"},{"location":"architecture/hooks-events-system/#resource-usage","title":"Resource Usage","text":"<ul> <li>Memory: ~200KB for worker pool + event buffer</li> <li>CPU: Scales with number of active hooks</li> <li>SQLite I/O: Buffered writes, minimal overhead</li> <li>Goroutines: 100 workers + N hook executions (where N = events \u00d7 hooks)</li> </ul>"},{"location":"architecture/hooks-events-system/#scalability","title":"Scalability","text":"<p>The system scales horizontally:</p> <ul> <li>Worker count configurable (default: 100)</li> <li>Channel buffer size configurable (default: 1000)</li> <li>SQLite handles millions of events</li> <li>Hooks execute independently and concurrently</li> </ul>"},{"location":"architecture/hooks-events-system/#best-practices","title":"Best Practices","text":""},{"location":"architecture/hooks-events-system/#hook-development","title":"Hook Development","text":"<ol> <li>Keep hooks fast: Avoid long-running operations</li> <li>Use timeouts: Hooks have execution timeout (default: 30s)</li> <li>Handle errors: Always return error information for debugging</li> <li>Idempotent: Hooks may execute multiple times</li> <li>Logging: Use slog module for structured logging</li> </ol>"},{"location":"architecture/hooks-events-system/#event-design","title":"Event Design","text":"<ol> <li>Specific event types: Use specific events rather than generic ones</li> <li>Rich data: Include all relevant context in event data</li> <li>Immutable: Event data should not change after dispatch</li> <li>Timestamps: Include timestamps for time-sensitive data</li> </ol>"},{"location":"architecture/hooks-events-system/#performance","title":"Performance","text":"<ol> <li>Filter events: Use stack isolation to reduce hook executions</li> <li>Batch operations: Group multiple operations in one hook</li> <li>Async hooks: Use event.dispatch() to chain asynchronous workflows</li> <li>Monitor: Use <code>sloth-runner hook history</code> to track performance</li> </ol>"},{"location":"architecture/hooks-events-system/#security","title":"Security","text":"<ol> <li>Validate inputs: Always validate event data in hooks</li> <li>Secrets: Use secret module, never hardcode credentials</li> <li>Permissions: Hooks run with sloth-runner permissions</li> <li>Sandboxing: Lua execution is sandboxed with resource limits</li> </ol>"},{"location":"architecture/hooks-events-system/#examples","title":"Examples","text":""},{"location":"architecture/hooks-events-system/#example-1-slack-notifications","title":"Example 1: Slack Notifications","text":"<pre><code>local hook = {\n    name = \"slack_notify_failures\",\n    event_type = \"task.failed\",\n    stack = \"production\"\n}\n\nfunction hook.execute(event)\n    local http = require(\"http\")\n    local json = require(\"json\")\n    local secret = require(\"secret\")\n\n    local task = event.data.task\n    local webhook_url = secret.get(\"slack_webhook_url\")\n\n    local message = json.encode({\n        text = string.format(\"\ud83d\udea8 Task Failed: %s on %s\",\n            task.task_name, task.agent_name),\n        attachments = {{\n            color = \"danger\",\n            fields = {\n                {title = \"Error\", value = task.error, short = false},\n                {title = \"Duration\", value = task.duration, short = true},\n                {title = \"Exit Code\", value = tostring(task.exit_code), short = true}\n            }\n        }}\n    })\n\n    http.post(webhook_url, {\n        headers = {[\"Content-Type\"] = \"application/json\"},\n        body = message\n    })\n\n    return true, \"Notification sent\"\nend\n\nreturn hook\n</code></pre>"},{"location":"architecture/hooks-events-system/#example-2-auto-scaling","title":"Example 2: Auto-Scaling","text":"<pre><code>local hook = {\n    name = \"auto_scale_agents\",\n    event_type = \"system.cpu_high\"\n}\n\nfunction hook.execute(event)\n    local exec = require(\"exec\")\n    local state = require(\"state\")\n\n    local resource = event.data.resource\n    local current_usage = resource.current\n\n    -- Check if we already scaled recently\n    local last_scale = state.get(\"last_scale_time\") or 0\n    local now = os.time()\n\n    if now - last_scale &lt; 300 then  -- 5 minute cooldown\n        return true, \"Cooldown active, skipping scale\"\n    end\n\n    -- Scale up: add new agent\n    exec.run(\"sloth-runner agent install new-agent-\" .. now)\n\n    -- Update state\n    state.set(\"last_scale_time\", now)\n\n    return true, \"Scaled up infrastructure\"\nend\n\nreturn hook\n</code></pre>"},{"location":"architecture/hooks-events-system/#example-3-deployment-pipeline","title":"Example 3: Deployment Pipeline","text":"<pre><code>local hook = {\n    name = \"deployment_pipeline\",\n    event_type = \"deploy.started\"\n}\n\nfunction hook.execute(event)\n    local exec = require(\"exec\")\n    local http = require(\"http\")\n    local event_mod = require(\"event\")\n\n    local deploy = event.data.deploy\n\n    -- Run tests\n    local result = exec.run(\"make test\")\n    if result.exit_code ~= 0 then\n        event_mod.dispatch(\"deploy.failed\", {\n            deploy_id = deploy.deploy_id,\n            reason = \"Tests failed\"\n        })\n        error(\"Tests failed\")\n    end\n\n    -- Build artifacts\n    exec.run(\"make build\")\n\n    -- Deploy to staging first\n    exec.run(\"make deploy-staging\")\n\n    -- Run smoke tests\n    local health = http.get(\"https://staging.example.com/health\")\n    if health.status_code ~= 200 then\n        exec.run(\"make rollback-staging\")\n        event_mod.dispatch(\"deploy.failed\", {\n            deploy_id = deploy.deploy_id,\n            reason = \"Health check failed\"\n        })\n        error(\"Staging health check failed\")\n    end\n\n    -- Dispatch event for production deployment\n    event_mod.dispatch(\"deploy.staging_success\", {\n        deploy_id = deploy.deploy_id,\n        version = deploy.version\n    })\n\n    return true, \"Staging deployment completed\"\nend\n\nreturn hook\n</code></pre>"},{"location":"architecture/hooks-events-system/#troubleshooting","title":"Troubleshooting","text":""},{"location":"architecture/hooks-events-system/#common-issues","title":"Common Issues","text":"<p>Events not processing: - Check if dispatcher is running: <code>sloth-runner events list</code> - Check event status: <code>sloth-runner events list --status pending</code> - View logs for errors</p> <p>Hooks not executing: - Verify hook is enabled: <code>sloth-runner hook list</code> - Check event type matches: <code>sloth-runner hook get &lt;name&gt;</code> - View hook execution history: <code>sloth-runner hook history &lt;name&gt;</code></p> <p>Performance issues: - Monitor worker pool utilization - Check SQLite database size - Review hook execution times - Consider increasing worker count</p> <p>Hook errors: - View event details: <code>sloth-runner events show &lt;event-id&gt;</code> - Check hook execution output and errors - Test hook in isolation - Enable debug logging</p>"},{"location":"architecture/hooks-events-system/#debug-mode","title":"Debug Mode","text":"<p>Enable debug logging to see detailed event processing:</p> <pre><code># Set log level\nexport SLOTH_RUNNER_LOG_LEVEL=debug\n\n# Run with debug output\nsloth-runner --log-level debug &lt;command&gt;\n</code></pre>"},{"location":"architecture/hooks-events-system/#database-schema","title":"Database Schema","text":""},{"location":"architecture/hooks-events-system/#events-table","title":"Events Table","text":"<pre><code>CREATE TABLE events (\n    id TEXT PRIMARY KEY,\n    type TEXT NOT NULL,\n    data TEXT NOT NULL,\n    status TEXT DEFAULT 'pending',\n    error TEXT,\n    timestamp INTEGER NOT NULL,\n    created_at INTEGER NOT NULL,\n    processed_at INTEGER\n);\n\nCREATE INDEX idx_events_status ON events(status);\nCREATE INDEX idx_events_type ON events(type);\nCREATE INDEX idx_events_created_at ON events(created_at);\n</code></pre>"},{"location":"architecture/hooks-events-system/#hooks-table","title":"Hooks Table","text":"<pre><code>CREATE TABLE hooks (\n    id TEXT PRIMARY KEY,\n    name TEXT UNIQUE NOT NULL,\n    description TEXT,\n    event_type TEXT NOT NULL,\n    file_path TEXT NOT NULL,\n    stack TEXT,\n    enabled INTEGER DEFAULT 1,\n    created_at INTEGER NOT NULL,\n    updated_at INTEGER NOT NULL,\n    last_run INTEGER,\n    run_count INTEGER DEFAULT 0\n);\n\nCREATE INDEX idx_hooks_event_type ON hooks(event_type);\nCREATE INDEX idx_hooks_stack ON hooks(stack);\n</code></pre>"},{"location":"architecture/hooks-events-system/#event-hook-executions-table","title":"Event Hook Executions Table","text":"<pre><code>CREATE TABLE event_hook_executions (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    event_id TEXT NOT NULL,\n    hook_id TEXT NOT NULL,\n    hook_name TEXT NOT NULL,\n    success INTEGER NOT NULL,\n    output TEXT,\n    error TEXT,\n    duration_ms INTEGER NOT NULL,\n    executed_at INTEGER NOT NULL,\n    FOREIGN KEY (event_id) REFERENCES events(id) ON DELETE CASCADE,\n    FOREIGN KEY (hook_id) REFERENCES hooks(id) ON DELETE CASCADE\n);\n\nCREATE INDEX idx_event_hook_executions_event_id ON event_hook_executions(event_id);\nCREATE INDEX idx_event_hook_executions_hook_id ON event_hook_executions(hook_id);\n</code></pre>"},{"location":"architecture/hooks-events-system/#future-enhancements","title":"Future Enhancements","text":""},{"location":"architecture/hooks-events-system/#planned-features","title":"Planned Features","text":"<ol> <li>File Watchers: Trigger events on filesystem changes</li> <li>Webhook Triggers: HTTP endpoints to receive external events</li> <li>Scheduled Events: Cron-based event generation</li> <li>Event Replay: Replay historical events for testing</li> <li>Hook Templating: Template system for common hook patterns</li> <li>Web UI: Visual hook and event management interface</li> <li>Metrics: Prometheus metrics for monitoring</li> <li>Distributed Hooks: Execute hooks on remote agents</li> </ol>"},{"location":"architecture/hooks-events-system/#roadmap","title":"Roadmap","text":"<ul> <li>Q4 2025: File watcher implementation</li> <li>Q1 2026: Webhook triggers and scheduled events</li> <li>Q2 2026: Web UI and advanced monitoring</li> <li>Q3 2026: Distributed hooks and event replay</li> </ul>"},{"location":"architecture/hooks-events-system/#conclusion","title":"Conclusion","text":"<p>The Sloth Runner hooks and events system provides a powerful, performant, and flexible framework for event-driven automation. With its goroutine-based architecture, persistent queue, and comprehensive event taxonomy, it enables sophisticated automation workflows while maintaining high throughput and reliability.</p> <p>For more examples and detailed event type documentation, see: - Event Types Reference - Hook Examples - Workflow Integration</p>"},{"location":"architecture/modular-design/","title":"Arquitetura Modular do Sloth Runner","text":""},{"location":"architecture/modular-design/#visao-geral","title":"Vis\u00e3o Geral","text":"<p>O Sloth Runner foi refatorado para seguir princ\u00edpios de design modular e aplicar design patterns reconhecidos pela ind\u00fastria. Isso torna o c\u00f3digo mais f\u00e1cil de manter, testar e estender.</p>"},{"location":"architecture/modular-design/#estrutura-de-diretorios","title":"Estrutura de Diret\u00f3rios","text":"<pre><code>cmd/sloth-runner/\n\u251c\u2500\u2500 commands/           # Comandos Cobra organizados\n\u2502   \u251c\u2500\u2500 context.go     # AppContext (Dependency Injection)\n\u2502   \u251c\u2500\u2500 root.go        # Root command\n\u2502   \u251c\u2500\u2500 version.go     # Version command\n\u2502   \u251c\u2500\u2500 run.go         # Run command\n\u2502   \u251c\u2500\u2500 agent/         # Comandos do agente\n\u2502   \u251c\u2500\u2500 stack/         # Comandos de stack\n\u2502   \u2514\u2500\u2500 scheduler/     # Comandos de scheduler\n\u251c\u2500\u2500 handlers/          # Business logic handlers\n\u2502   \u2514\u2500\u2500 run_handler.go # Handler para comando run\n\u251c\u2500\u2500 services/          # Servi\u00e7os reutiliz\u00e1veis\n\u2502   \u2514\u2500\u2500 stack_service.go # Servi\u00e7o de gerenciamento de stack\n\u251c\u2500\u2500 repositories/      # Camada de acesso a dados (futuro)\n\u2514\u2500\u2500 main.go           # Entry point (m\u00ednimo)\n</code></pre>"},{"location":"architecture/modular-design/#design-patterns-aplicados","title":"Design Patterns Aplicados","text":""},{"location":"architecture/modular-design/#1-dependency-injection-pattern","title":"1. Dependency Injection Pattern","text":"<p>Arquivo: <code>commands/context.go</code></p> <p>O <code>AppContext</code> encapsula todas as depend\u00eancias compartilhadas entre comandos:</p> <pre><code>type AppContext struct {\n    Version       string\n    Commit        string\n    Date          string\n    AgentRegistry interface{}\n    SurveyAsker   taskrunner.SurveyAsker\n    OutputWriter  io.Writer\n    TestMode      bool\n    // ...\n}\n</code></pre> <p>Benef\u00edcios: - \u2705 Facilita testes (mock de depend\u00eancias) - \u2705 Reduz acoplamento - \u2705 Torna depend\u00eancias expl\u00edcitas - \u2705 Permite configura\u00e7\u00e3o centralizada</p>"},{"location":"architecture/modular-design/#2-factory-pattern","title":"2. Factory Pattern","text":"<p>Arquivo: <code>commands/*.go</code></p> <p>Cada comando \u00e9 criado atrav\u00e9s de uma factory function:</p> <pre><code>func NewRunCommand(ctx *AppContext) *cobra.Command {\n    // Cria e configura o comando\n    return cmd\n}\n</code></pre> <p>Benef\u00edcios: - \u2705 Encapsula l\u00f3gica de cria\u00e7\u00e3o - \u2705 Permite configura\u00e7\u00e3o consistente - \u2705 Facilita testes unit\u00e1rios - \u2705 Suporta diferentes configura\u00e7\u00f5es</p>"},{"location":"architecture/modular-design/#3-handler-pattern-command-handler","title":"3. Handler Pattern (Command Handler)","text":"<p>Arquivo: <code>handlers/run_handler.go</code></p> <p>Separa a l\u00f3gica de neg\u00f3cio do framework Cobra:</p> <pre><code>type RunHandler struct {\n    stackService *services.StackService\n    config       *RunConfig\n}\n\nfunc (h *RunHandler) Execute() error {\n    // L\u00f3gica de neg\u00f3cio aqui\n}\n</code></pre> <p>Benef\u00edcios: - \u2705 L\u00f3gica de neg\u00f3cio independente do framework - \u2705 Facilita testes unit\u00e1rios - \u2705 C\u00f3digo reutiliz\u00e1vel - \u2705 Single Responsibility Principle</p>"},{"location":"architecture/modular-design/#4-service-layer-pattern","title":"4. Service Layer Pattern","text":"<p>Arquivo: <code>services/stack_service.go</code></p> <p>Encapsula opera\u00e7\u00f5es de neg\u00f3cio relacionadas:</p> <pre><code>type StackService struct {\n    manager *stack.StackManager\n}\n\nfunc (s *StackService) GetOrCreateStack(...) (string, error) {\n    // L\u00f3gica de servi\u00e7o\n}\n</code></pre> <p>Benef\u00edcios: - \u2705 Reutiliza\u00e7\u00e3o de l\u00f3gica - \u2705 Transa\u00e7\u00f5es e coordena\u00e7\u00e3o - \u2705 Abstra\u00e7\u00e3o da camada de dados - \u2705 Testabilidade</p>"},{"location":"architecture/modular-design/#5-strategy-pattern-futuro","title":"5. Strategy Pattern (Futuro)","text":"<p>Planejado para: Executores (Local, SSH, Agent)</p> <pre><code>type Executor interface {\n    Execute(task Task) error\n}\n\ntype LocalExecutor struct {}\ntype SSHExecutor struct {}\ntype AgentExecutor struct {}\n</code></pre> <p>Benef\u00edcios: - \u2705 Diferentes estrat\u00e9gias de execu\u00e7\u00e3o - \u2705 F\u00e1cil adicionar novos executores - \u2705 Open/Closed Principle</p>"},{"location":"architecture/modular-design/#6-repository-pattern-futuro","title":"6. Repository Pattern (Futuro)","text":"<p>Planejado para: Acesso a dados (DB, API, etc)</p> <pre><code>type StackRepository interface {\n    Get(id string) (*Stack, error)\n    Create(stack *Stack) error\n    Update(stack *Stack) error\n    Delete(id string) error\n}\n</code></pre> <p>Benef\u00edcios: - \u2705 Abstra\u00e7\u00e3o de persist\u00eancia - \u2705 Facilita testes com mocks - \u2705 Troca de backend transparente</p>"},{"location":"architecture/modular-design/#fluxo-de-execucao","title":"Fluxo de Execu\u00e7\u00e3o","text":""},{"location":"architecture/modular-design/#antes-monolitico","title":"Antes (Monol\u00edtico)","text":"<pre><code>main.go (3462 linhas)\n  \u2514\u2500&gt; runCmd (500+ linhas)\n      \u2514\u2500&gt; Toda l\u00f3gica inline\n</code></pre>"},{"location":"architecture/modular-design/#depois-modular","title":"Depois (Modular)","text":"<pre><code>main.go (m\u00ednimo)\n  \u2514\u2500&gt; NewRootCommand(ctx)\n      \u2514\u2500&gt; NewRunCommand(ctx)\n          \u2514\u2500&gt; RunHandler.Execute()\n              \u251c\u2500&gt; StackService.GetOrCreateStack()\n              \u251c\u2500&gt; RunHandler.initializeSSH()\n              \u251c\u2500&gt; RunHandler.parseLuaScript()\n              \u251c\u2500&gt; RunHandler.executeTasks()\n              \u2514\u2500&gt; StackService.RecordExecution()\n</code></pre>"},{"location":"architecture/modular-design/#principios-solid-aplicados","title":"Princ\u00edpios SOLID Aplicados","text":""},{"location":"architecture/modular-design/#single-responsibility-principle-srp","title":"Single Responsibility Principle (SRP)","text":"<ul> <li>\u2705 Cada classe/struct tem uma \u00fanica responsabilidade</li> <li>\u2705 <code>RunHandler</code> gerencia execu\u00e7\u00e3o de tasks</li> <li>\u2705 <code>StackService</code> gerencia stacks</li> <li>\u2705 <code>RunCommand</code> gerencia apenas CLI</li> </ul>"},{"location":"architecture/modular-design/#openclosed-principle-ocp","title":"Open/Closed Principle (OCP)","text":"<ul> <li>\u2705 Aberto para extens\u00e3o via interfaces</li> <li>\u2705 Fechado para modifica\u00e7\u00e3o (comportamento base)</li> <li>\u2705 Novos executores podem ser adicionados sem alterar c\u00f3digo existente</li> </ul>"},{"location":"architecture/modular-design/#liskov-substitution-principle-lsp","title":"Liskov Substitution Principle (LSP)","text":"<ul> <li>\u2705 Interfaces podem ser substitu\u00eddas por implementa\u00e7\u00f5es</li> <li>\u2705 Mocks podem substituir servi\u00e7os reais</li> </ul>"},{"location":"architecture/modular-design/#interface-segregation-principle-isp","title":"Interface Segregation Principle (ISP)","text":"<ul> <li>\u2705 Interfaces pequenas e espec\u00edficas</li> <li>\u2705 Clientes n\u00e3o dependem de m\u00e9todos que n\u00e3o usam</li> </ul>"},{"location":"architecture/modular-design/#dependency-inversion-principle-dip","title":"Dependency Inversion Principle (DIP)","text":"<ul> <li>\u2705 Depend\u00eancia de abstra\u00e7\u00f5es, n\u00e3o de implementa\u00e7\u00f5es</li> <li>\u2705 AppContext injeta depend\u00eancias</li> <li>\u2705 Handlers dependem de interfaces de servi\u00e7os</li> </ul>"},{"location":"architecture/modular-design/#beneficios-da-refatoracao","title":"Benef\u00edcios da Refatora\u00e7\u00e3o","text":""},{"location":"architecture/modular-design/#1-testabilidade","title":"1. Testabilidade","text":"<ul> <li>\u2705 Handlers podem ser testados sem Cobra</li> <li>\u2705 Servi\u00e7os podem ser mockados</li> <li>\u2705 L\u00f3gica de neg\u00f3cio isolada</li> </ul>"},{"location":"architecture/modular-design/#2-manutenibilidade","title":"2. Manutenibilidade","text":"<ul> <li>\u2705 C\u00f3digo organizado por responsabilidade</li> <li>\u2705 Arquivos menores e focados</li> <li>\u2705 F\u00e1cil localizar e modificar c\u00f3digo</li> </ul>"},{"location":"architecture/modular-design/#3-extensibilidade","title":"3. Extensibilidade","text":"<ul> <li>\u2705 Novos comandos seguem mesmo padr\u00e3o</li> <li>\u2705 Novos servi\u00e7os s\u00e3o f\u00e1ceis de adicionar</li> <li>\u2705 Novos executores via Strategy Pattern</li> </ul>"},{"location":"architecture/modular-design/#4-legibilidade","title":"4. Legibilidade","text":"<ul> <li>\u2705 Estrutura clara e previs\u00edvel</li> <li>\u2705 Nomes descritivos</li> <li>\u2705 Separa\u00e7\u00e3o de concerns</li> </ul>"},{"location":"architecture/modular-design/#exemplos-de-uso","title":"Exemplos de Uso","text":""},{"location":"architecture/modular-design/#criando-um-novo-comando","title":"Criando um Novo Comando","text":"<pre><code>// 1. Criar comando em commands/\nfunc NewMyCommand(ctx *AppContext) *cobra.Command {\n    return &amp;cobra.Command{\n        Use: \"my-command\",\n        RunE: func(cmd *cobra.Command, args []string) error {\n            // Extrair flags\n            // Criar servi\u00e7os necess\u00e1rios\n            // Criar handler\n            // Executar handler\n            return handler.Execute()\n        },\n    }\n}\n\n// 2. Criar handler em handlers/\ntype MyHandler struct {\n    service *services.MyService\n    config  *MyConfig\n}\n\nfunc (h *MyHandler) Execute() error {\n    // L\u00f3gica de neg\u00f3cio\n}\n\n// 3. Criar servi\u00e7o se necess\u00e1rio em services/\ntype MyService struct {\n    // depend\u00eancias\n}\n</code></pre>"},{"location":"architecture/modular-design/#testando-um-handler","title":"Testando um Handler","text":"<pre><code>func TestRunHandler_Execute(t *testing.T) {\n    // Arrange\n    mockStackService := &amp;MockStackService{}\n    config := &amp;handlers.RunConfig{\n        StackName: \"test\",\n        FilePath:  \"test.sloth\",\n        // ...\n    }\n    handler := handlers.NewRunHandler(mockStackService, config)\n\n    // Act\n    err := handler.Execute()\n\n    // Assert\n    assert.NoError(t, err)\n    assert.True(t, mockStackService.CreateStackCalled)\n}\n</code></pre>"},{"location":"architecture/modular-design/#proximos-passos","title":"Pr\u00f3ximos Passos","text":""},{"location":"architecture/modular-design/#curto-prazo","title":"Curto Prazo","text":"<ol> <li>\u2705 Extrair comando <code>run</code></li> <li>\u23f3 Extrair comandos <code>agent/*</code></li> <li>\u23f3 Extrair comandos <code>stack/*</code></li> <li>\u23f3 Extrair comandos <code>scheduler/*</code></li> </ol>"},{"location":"architecture/modular-design/#medio-prazo","title":"M\u00e9dio Prazo","text":"<ol> <li>\u23f3 Implementar Strategy Pattern para executores</li> <li>\u23f3 Implementar Repository Pattern</li> <li>\u23f3 Adicionar testes unit\u00e1rios</li> <li>\u23f3 Adicionar testes de integra\u00e7\u00e3o</li> </ol>"},{"location":"architecture/modular-design/#longo-prazo","title":"Longo Prazo","text":"<ol> <li>\u23f3 M\u00e9tricas e observabilidade</li> <li>\u23f3 Plugin system</li> <li>\u23f3 API REST/GraphQL</li> <li>\u23f3 Web UI</li> </ol>"},{"location":"architecture/modular-design/#referencias","title":"Refer\u00eancias","text":"<ul> <li>Clean Architecture - Robert C. Martin</li> <li>Domain-Driven Design - Eric Evans</li> <li>Enterprise Integration Patterns - Gregor Hohpe</li> <li>Refactoring - Martin Fowler</li> <li>Design Patterns - Gang of Four</li> </ul>"},{"location":"architecture/modular-design/#conclusao","title":"Conclus\u00e3o","text":"<p>A arquitetura modular aplicada ao Sloth Runner segue best practices da ind\u00fastria e torna o c\u00f3digo mais profissional, mant\u00edvel e extens\u00edvel. Cada padr\u00e3o foi escolhido para resolver problemas espec\u00edficos e melhorar a qualidade geral do c\u00f3digo.</p>"},{"location":"architecture/refactoring-guide/","title":"Guia de Refatora\u00e7\u00e3o - Sloth Runner","text":""},{"location":"architecture/refactoring-guide/#status-atual-da-refatoracao","title":"\ud83d\udcca Status Atual da Refatora\u00e7\u00e3o","text":""},{"location":"architecture/refactoring-guide/#concluido","title":"\u2705 Conclu\u00eddo","text":"<ol> <li>Estrutura Base Modular</li> <li>\u2705 <code>commands/context.go</code> - Dependency Injection</li> <li>\u2705 <code>commands/root.go</code> - Root command</li> <li>\u2705 <code>commands/version.go</code> - Version command</li> <li>\u2705 <code>commands/run.go</code> - Run command refatorado</li> <li>\u2705 <code>handlers/run_handler.go</code> - Handler do run</li> <li>\u2705 <code>services/stack_service.go</code> - Servi\u00e7o de stack</li> <li> <p>\u2705 <code>services/agent_service.go</code> - Servi\u00e7o de agent</p> </li> <li> <p>Comandos Agent (Parcial)</p> </li> <li>\u2705 <code>commands/agent/agent.go</code> - Parent command</li> <li>\u2705 <code>commands/agent/list.go</code> - List agents</li> <li>\u2705 <code>commands/agent/stop.go</code> - Stop agent</li> <li>\u2705 <code>commands/agent/delete.go</code> - Delete agent</li> <li>\u23f3 get, start, run, modules, metrics (pendentes)</li> </ol>"},{"location":"architecture/refactoring-guide/#pendente","title":"\u23f3 Pendente","text":"Arquivo Original Linhas Comando Status <code>main.go</code> 3462 agent start \u23f3 <code>main.go</code> 3462 agent get \u23f3 <code>main.go</code> 3462 agent run \u23f3 <code>main.go</code> 3462 agent modules \u23f3 <code>main.go</code> 3462 agent metrics \u23f3 <code>main.go</code> 3462 stack * \u23f3 <code>main.go</code> 3462 scheduler * \u23f3 <code>main.go</code> 3462 state * \u23f3 <code>main.go</code> 3462 ssh * \u23f3 <code>luainterface.go</code> 1793 M\u00f3dulos Lua \u23f3 <code>taskrunner.go</code> 1573 Task execution \u23f3 <code>user.go</code> 1669 User module \u23f3"},{"location":"architecture/refactoring-guide/#estrategia-de-refatoracao","title":"\ud83c\udfaf Estrat\u00e9gia de Refatora\u00e7\u00e3o","text":""},{"location":"architecture/refactoring-guide/#fase-1-comandos-cli-prioridade-alta","title":"Fase 1: Comandos CLI (Prioridade Alta)","text":"<p>Objetivo: Extrair todos os comandos do <code>main.go</code></p> <pre><code>main.go (3462 linhas)\n\u251c\u2500\u2500 commands/run.go (\u2705 Feito)\n\u251c\u2500\u2500 commands/list.go\n\u251c\u2500\u2500 commands/ui.go\n\u251c\u2500\u2500 commands/master.go\n\u251c\u2500\u2500 commands/agent/\n\u2502   \u251c\u2500\u2500 start.go (\u23f3)\n\u2502   \u251c\u2500\u2500 stop.go (\u2705)\n\u2502   \u251c\u2500\u2500 list.go (\u2705)\n\u2502   \u251c\u2500\u2500 delete.go (\u2705)\n\u2502   \u251c\u2500\u2500 get.go (\u23f3)\n\u2502   \u251c\u2500\u2500 run.go (\u23f3)\n\u2502   \u251c\u2500\u2500 modules.go (\u23f3)\n\u2502   \u251c\u2500\u2500 metrics.go (\u23f3)\n\u2502   \u2514\u2500\u2500 update.go (existe em agent_update.go)\n\u251c\u2500\u2500 commands/stack/\n\u2502   \u251c\u2500\u2500 new.go\n\u2502   \u251c\u2500\u2500 list.go\n\u2502   \u251c\u2500\u2500 show.go\n\u2502   \u251c\u2500\u2500 delete.go\n\u2502   \u2514\u2500\u2500 history.go\n\u251c\u2500\u2500 commands/scheduler/\n\u2502   \u251c\u2500\u2500 enable.go\n\u2502   \u251c\u2500\u2500 disable.go\n\u2502   \u251c\u2500\u2500 list.go\n\u2502   \u2514\u2500\u2500 delete.go\n\u2514\u2500\u2500 commands/state/\n    \u251c\u2500\u2500 list.go\n    \u251c\u2500\u2500 get.go\n    \u251c\u2500\u2500 set.go\n    \u2514\u2500\u2500 delete.go\n</code></pre>"},{"location":"architecture/refactoring-guide/#fase-2-modulos-lua-prioridade-media","title":"Fase 2: M\u00f3dulos Lua (Prioridade M\u00e9dia)","text":"<p>Objetivo: Modularizar <code>internal/luainterface/luainterface.go</code> (1793 linhas)</p> <pre><code>internal/luainterface/\n\u251c\u2500\u2500 luainterface.go (core, ~300 linhas)\n\u251c\u2500\u2500 modules/\n\u2502   \u251c\u2500\u2500 task.go (task, task_group)\n\u2502   \u251c\u2500\u2500 pipeline.go (pipeline functions)\n\u2502   \u251c\u2500\u2500 template.go (template functions)\n\u2502   \u251c\u2500\u2500 env.go (environment functions)\n\u2502   \u251c\u2500\u2500 import.go (import functionality)\n\u2502   \u2514\u2500\u2500 validation.go (validation functions)\n</code></pre>"},{"location":"architecture/refactoring-guide/#fase-3-task-runner-prioridade-media","title":"Fase 3: Task Runner (Prioridade M\u00e9dia)","text":"<p>Objetivo: Modularizar <code>internal/taskrunner/taskrunner.go</code> (1573 linhas)</p> <pre><code>internal/taskrunner/\n\u251c\u2500\u2500 taskrunner.go (core, ~300 linhas)\n\u251c\u2500\u2500 executor/\n\u2502   \u251c\u2500\u2500 local.go (execu\u00e7\u00e3o local)\n\u2502   \u251c\u2500\u2500 remote.go (execu\u00e7\u00e3o remota)\n\u2502   \u251c\u2500\u2500 ssh.go (execu\u00e7\u00e3o SSH)\n\u2502   \u2514\u2500\u2500 agent.go (execu\u00e7\u00e3o via agent)\n\u251c\u2500\u2500 output/\n\u2502   \u251c\u2500\u2500 formatter.go (formata\u00e7\u00e3o de sa\u00edda)\n\u2502   \u251c\u2500\u2500 json.go (JSON output)\n\u2502   \u2514\u2500\u2500 enhanced.go (enhanced output)\n\u2514\u2500\u2500 result/\n    \u251c\u2500\u2500 collector.go (coleta de resultados)\n    \u2514\u2500\u2500 aggregator.go (agrega\u00e7\u00e3o)\n</code></pre>"},{"location":"architecture/refactoring-guide/#fase-4-modulos-de-usuario-prioridade-baixa","title":"Fase 4: M\u00f3dulos de Usu\u00e1rio (Prioridade Baixa)","text":"<p>Objetivo: Modularizar arquivos grandes em <code>internal/luainterface/</code></p> <pre><code>internal/luainterface/\n\u251c\u2500\u2500 user.go (1669 linhas) \u2192 user/\n\u2502   \u251c\u2500\u2500 user.go (~300 linhas)\n\u2502   \u251c\u2500\u2500 group.go\n\u2502   \u251c\u2500\u2500 sudo.go\n\u2502   \u2514\u2500\u2500 validation.go\n\u251c\u2500\u2500 modern_dsl.go (1619 linhas) \u2192 dsl/\n\u2502   \u251c\u2500\u2500 parser.go\n\u2502   \u251c\u2500\u2500 executor.go\n\u2502   \u2514\u2500\u2500 validator.go\n\u2514\u2500\u2500 terraform_advanced.go (1511 linhas) \u2192 terraform/\n    \u251c\u2500\u2500 core.go\n    \u251c\u2500\u2500 advanced.go\n    \u2514\u2500\u2500 helpers.go\n</code></pre>"},{"location":"architecture/refactoring-guide/#templates-para-refatoracao","title":"\ud83d\udccb Templates para Refatora\u00e7\u00e3o","text":""},{"location":"architecture/refactoring-guide/#template-1-comando-simples","title":"Template 1: Comando Simples","text":"<pre><code>// commands/agent/COMMAND.go\npackage agent\n\nimport (\n    \"github.com/chalkan3-sloth/sloth-runner/cmd/sloth-runner/commands\"\n    \"github.com/chalkan3-sloth/sloth-runner/cmd/sloth-runner/services\"\n    \"github.com/spf13/cobra\"\n)\n\nfunc NewCOMMANDCommand(ctx *commands.AppContext) *cobra.Command {\n    return &amp;cobra.Command{\n        Use:   \"COMMAND\",\n        Short: \"Short description\",\n        Long:  `Long description`,\n        RunE: func(cmd *cobra.Command, args []string) error {\n            // 1. Extract flags\n            flag1, _ := cmd.Flags().GetString(\"flag1\")\n\n            // 2. Create service\n            service := services.NewAgentService(\"\")\n\n            // 3. Execute operation\n            result, err := service.DoSomething(flag1)\n            if err != nil {\n                return err\n            }\n\n            // 4. Display result\n            fmt.Println(result)\n            return nil\n        },\n    }\n}\n</code></pre>"},{"location":"architecture/refactoring-guide/#template-2-comando-com-handler","title":"Template 2: Comando com Handler","text":"<pre><code>// commands/agent/COMMAND.go\npackage agent\n\nimport (\n    \"github.com/chalkan3-sloth/sloth-runner/cmd/sloth-runner/commands\"\n    \"github.com/chalkan3-sloth/sloth-runner/cmd/sloth-runner/handlers\"\n    \"github.com/chalkan3-sloth/sloth-runner/cmd/sloth-runner/services\"\n    \"github.com/spf13/cobra\"\n)\n\nfunc NewCOMMANDCommand(ctx *commands.AppContext) *cobra.Command {\n    return &amp;cobra.Command{\n        Use:   \"COMMAND\",\n        Short: \"Short description\",\n        Long:  `Long description`,\n        RunE: func(cmd *cobra.Command, args []string) error {\n            // Extract flags\n            flag1, _ := cmd.Flags().GetString(\"flag1\")\n\n            // Create service\n            service, err := services.NewCOMMANDService()\n            if err != nil {\n                return err\n            }\n            defer service.Close()\n\n            // Create configuration\n            config := &amp;handlers.COMMANDConfig{\n                Flag1: flag1,\n            }\n\n            // Create and execute handler\n            handler := handlers.NewCOMMANDHandler(service, config)\n            return handler.Execute()\n        },\n    }\n}\n\n// handlers/COMMAND_handler.go\npackage handlers\n\ntype COMMANDConfig struct {\n    Flag1 string\n}\n\ntype COMMANDHandler struct {\n    service *services.COMMANDService\n    config  *COMMANDConfig\n}\n\nfunc NewCOMMANDHandler(service *services.COMMANDService, config *COMMANDConfig) *COMMANDHandler {\n    return &amp;COMMANDHandler{\n        service: service,\n        config:  config,\n    }\n}\n\nfunc (h *COMMANDHandler) Execute() error {\n    // Business logic here\n    return nil\n}\n</code></pre>"},{"location":"architecture/refactoring-guide/#template-3-servico","title":"Template 3: Servi\u00e7o","text":"<pre><code>// services/DOMAIN_service.go\npackage services\n\ntype DOMAINService struct {\n    // dependencies\n}\n\nfunc NewDOMAINService() (*DOMAINService, error) {\n    return &amp;DOMAINService{}, nil\n}\n\nfunc (s *DOMAINService) Close() error {\n    return nil\n}\n\nfunc (s *DOMAINService) DoSomething(param string) (result interface{}, err error) {\n    // Service logic\n    return nil, nil\n}\n</code></pre>"},{"location":"architecture/refactoring-guide/#processo-de-refatoracao-passo-a-passo","title":"\ud83d\udd04 Processo de Refatora\u00e7\u00e3o Passo a Passo","text":""},{"location":"architecture/refactoring-guide/#para-cada-comando","title":"Para Cada Comando","text":"<ol> <li> <p>Identificar o comando no main.go <pre><code>grep -n \"var COMMANDCmd = &amp;cobra.Command\" cmd/sloth-runner/main.go\n</code></pre></p> </li> <li> <p>Extrair l\u00f3gica</p> </li> <li>Copiar c\u00f3digo do RunE</li> <li>Identificar depend\u00eancias (gRPC, DB, etc)</li> <li> <p>Identificar flags</p> </li> <li> <p>Criar servi\u00e7o (se necess\u00e1rio)</p> </li> <li>Encapsular l\u00f3gica de neg\u00f3cio reutiliz\u00e1vel</li> <li>Abstrair comunica\u00e7\u00e3o gRPC/DB</li> <li> <p>Adicionar testes</p> </li> <li> <p>Criar handler (se complexo)</p> </li> <li>Separar l\u00f3gica de neg\u00f3cio do CLI</li> <li>Facilitar testes unit\u00e1rios</li> <li> <p>Melhorar legibilidade</p> </li> <li> <p>Criar comando</p> </li> <li>Usar template apropriado</li> <li>Configurar flags</li> <li> <p>Chamar servi\u00e7o/handler</p> </li> <li> <p>Testar <pre><code>go build -o sloth-runner-test ./cmd/sloth-runner\n./sloth-runner-test COMMAND --help\n./sloth-runner-test COMMAND [args]\n</code></pre></p> </li> <li> <p>Commit <pre><code>git add .\ngit commit -m \"refactor: Extract COMMAND to modular structure\"\n</code></pre></p> </li> </ol>"},{"location":"architecture/refactoring-guide/#metricas-de-sucesso","title":"\ud83d\udcc8 M\u00e9tricas de Sucesso","text":""},{"location":"architecture/refactoring-guide/#antes","title":"Antes","text":"<ul> <li>\u274c main.go: 3.462 linhas</li> <li>\u274c Arquivos &gt; 1.500 linhas: 6 arquivos</li> <li>\u274c Cobertura de testes: ~20%</li> <li>\u274c Acoplamento: Alto</li> </ul>"},{"location":"architecture/refactoring-guide/#meta-final","title":"Meta Final","text":"<ul> <li>\u2705 main.go: &lt; 100 linhas</li> <li>\u2705 Arquivos &gt; 500 linhas: 0 arquivos</li> <li>\u2705 Cobertura de testes: &gt; 70%</li> <li>\u2705 Acoplamento: Baixo</li> <li>\u2705 Design patterns: 5+</li> <li>\u2705 SOLID: 100%</li> </ul>"},{"location":"architecture/refactoring-guide/#proximos-passos-imediatos","title":"\ud83d\ude80 Pr\u00f3ximos Passos Imediatos","text":"<ol> <li>\u2705 Comandos Agent Simples (list, stop, delete) - FEITO</li> <li>\u23f3 Comandos Agent Complexos (start, get, run, modules, metrics)</li> <li>\u23f3 Comandos Stack (new, list, show, delete, history)</li> <li>\u23f3 Comandos Scheduler (enable, disable, list, delete)</li> <li>\u23f3 Comandos State (list, get, set, delete)</li> <li>\u23f3 Refatorar luainterface.go</li> <li>\u23f3 Refatorar taskrunner.go</li> <li>\u23f3 Adicionar testes unit\u00e1rios</li> </ol>"},{"location":"architecture/refactoring-guide/#recursos","title":"\ud83d\udcda Recursos","text":"<ul> <li>Arquitetura Modular</li> <li>Design Patterns</li> <li>Exemplo Main.go</li> </ul>"},{"location":"architecture/refactoring-guide/#dicas","title":"\ud83d\udca1 Dicas","text":"<ol> <li>Comece pelos comandos simples - list, show, version</li> <li>Crie servi\u00e7os para l\u00f3gica reutiliz\u00e1vel - gRPC, DB</li> <li>Use handlers para l\u00f3gica complexa - m\u00faltiplas etapas</li> <li>Mantenha arquivos &lt; 300 linhas - f\u00e1cil de manter</li> <li>Teste cada comando ap\u00f3s extrair - evita regressions</li> <li>Commit frequentemente - facilita rollback</li> <li>Documente decis\u00f5es - ajuda futuros desenvolvedores</li> </ol> <p>Autor: Claude Code Data: 2025-10-06 Status: Em Andamento - 15% Completo</p>"},{"location":"architecture/sloth-runner-architecture/","title":"Sloth Runner Architecture","text":""},{"location":"architecture/sloth-runner-architecture/#overview","title":"Overview","text":"<p>Sloth Runner is a distributed task orchestration platform built with Go, designed for scalability, modularity, and enterprise-grade reliability. The architecture follows clean code principles, separation of concerns, and industry-standard design patterns.</p>"},{"location":"architecture/sloth-runner-architecture/#system-architecture","title":"System Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                        Sloth Runner CLI                         \u2502\n\u2502  (Command-line interface for users and CI/CD pipelines)        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                    \u2502\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502               \u2502               \u2502\n    \u25bc               \u25bc               \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Commands \u2502  \u2502Services  \u2502  \u2502Repositories\u2502\n\u2502  Layer  \u2502  \u2502  Layer   \u2502  \u2502   Layer    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n    \u2502               \u2502               \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                    \u2502\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502               \u2502               \u2502\n    \u25bc               \u25bc               \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Lua    \u2502  \u2502  gRPC    \u2502  \u2502  SQLite    \u2502\n\u2502 Engine  \u2502  \u2502  Server  \u2502  \u2502   Storage  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n    \u2502               \u2502               \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                    \u2502\n         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n         \u2502                     \u2502\n         \u25bc                     \u25bc\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502 Modules \u2502          \u2502 Agents  \u2502\n    \u2502 System  \u2502          \u2502 Network \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/sloth-runner-architecture/#core-components","title":"Core Components","text":""},{"location":"architecture/sloth-runner-architecture/#1-command-layer-cli","title":"1. Command Layer (CLI)","text":"<p>Location: <code>cmd/sloth-runner/commands/</code></p> <p>The command layer provides the user interface using the Cobra library. Each command is isolated and follows the Command Pattern.</p> <p>Key Commands: - <code>run</code> - Execute workflows from .sloth files - <code>sloth</code> - Manage saved workflows (add, list, get, remove, activate, deactivate) - <code>agent</code> - Manage distributed agents (list, start, stop, update, metrics) - <code>ssh</code> - Manage SSH profiles for remote execution - <code>stack</code> - Manage workflow stacks (list, show, delete) - <code>modules</code> - List available modules and their APIs</p> <p>Design Pattern: Command Pattern - Each command is self-contained - Commands delegate business logic to the Service Layer - Commands only handle presentation and user interaction</p> <p>Example: <pre><code>// cmd/sloth-runner/commands/sloth/add.go\nfunc NewAddCommand(ctx *AppContext) *cobra.Command {\n    return &amp;cobra.Command{\n        Use:   \"add &lt;name&gt; --file &lt;path&gt;\",\n        Short: \"Add a new .sloth file to the database\",\n        RunE: func(cmd *cobra.Command, args []string) error {\n            // 1. Parse flags and arguments\n            name := args[0]\n            filePath, _ := cmd.Flags().GetString(\"file\")\n\n            // 2. Delegate to service layer\n            service, _ := services.NewSlothService()\n            defer service.Close()\n\n            return service.AddSloth(cmd.Context(), name, filePath, description, active)\n        },\n    }\n}\n</code></pre></p>"},{"location":"architecture/sloth-runner-architecture/#2-service-layer","title":"2. Service Layer","text":"<p>Location: <code>cmd/sloth-runner/services/</code></p> <p>The service layer contains business logic and orchestrates operations between different components. It implements the Service Layer Pattern.</p> <p>Services: - <code>SlothService</code> - Manages saved workflows (CRUD operations, usage tracking) - <code>AgentService</code> - Coordinates distributed agent operations - <code>StackService</code> - Manages workflow execution history</p> <p>Design Pattern: Service Layer Pattern - Encapsulates business logic - Coordinates between repositories, external services, and modules - Provides transaction boundaries - Handles complex operations</p> <p>Example: <pre><code>// cmd/sloth-runner/services/sloth_service.go\ntype SlothService struct {\n    repo sloth.Repository\n}\n\nfunc (s *SlothService) UseSloth(ctx context.Context, name string) (string, error) {\n    // 1. Business logic: Check if sloth is active\n    sloth, err := s.GetActiveSloth(ctx, name)\n    if err != nil {\n        return \"\", err\n    }\n\n    // 2. Side effect: Track usage\n    s.repo.IncrementUsage(ctx, name)\n\n    // 3. Return data\n    return sloth.Content, nil\n}\n</code></pre></p>"},{"location":"architecture/sloth-runner-architecture/#3-repository-layer","title":"3. Repository Layer","text":"<p>Location: <code>internal/sloth/</code>, <code>internal/agent/</code>, etc.</p> <p>The repository layer abstracts data access and storage operations. It implements the Repository Pattern.</p> <p>Repositories: - <code>sloth.Repository</code> - SQLite-based storage for workflows - <code>agent.Store</code> - In-memory agent registry - <code>stack.Manager</code> - Workflow execution state storage</p> <p>Design Pattern: Repository Pattern - Abstracts data source - Provides interface for data operations - Enables easy testing with mocks - Supports different storage backends</p> <p>Example: <pre><code>// internal/sloth/repository.go\ntype Repository interface {\n    Create(ctx context.Context, sloth *Sloth) error\n    GetByName(ctx context.Context, name string) (*Sloth, error)\n    List(ctx context.Context, activeOnly bool) ([]*SlothListItem, error)\n    Update(ctx context.Context, sloth *Sloth) error\n    Delete(ctx context.Context, name string) error\n    SetActive(ctx context.Context, name string, active bool) error\n    IncrementUsage(ctx context.Context, name string) error\n    Close() error\n}\n</code></pre></p>"},{"location":"architecture/sloth-runner-architecture/#4-lua-engine","title":"4. Lua Engine","text":"<p>Location: <code>internal/luaengine/</code></p> <p>The Lua engine is responsible for parsing and executing .sloth workflow files. It uses gopher-lua for Lua interpretation.</p> <p>Capabilities: - Parse and validate workflow definitions - Execute task functions - Manage task dependencies - Handle errors and retries - Support for custom Lua modules</p> <p>Integration: - Modules are registered as Lua globals - Tasks are executed in isolated Lua states - Results are marshaled between Go and Lua</p>"},{"location":"architecture/sloth-runner-architecture/#5-module-system","title":"5. Module System","text":"<p>Location: <code>internal/modules/</code></p> <p>Modules provide reusable functionality for common operations. They follow a consistent API convention.</p> <p>Built-in Modules: - <code>pkg</code> - Package management (apt, yum, dnf, pacman) - <code>file_ops</code> - File operations (create, copy, delete, template) - <code>user</code> - User management (create, update, delete users/groups) - <code>systemd</code> - Systemd service management - <code>git</code> - Git operations (clone, pull, commit) - <code>incus</code> - LXC/VM container management - <code>stow</code> - Dotfiles management - <code>facts</code> - System information gathering - <code>goroutine</code> - Parallel task execution - <code>infra_test</code> - Infrastructure testing - Many more...</p> <p>Module API Convention: <pre><code>-- All modules follow this pattern\nlocal result = module_name.action({\n    -- Parameters\n    param1 = \"value1\",\n    param2 = \"value2\"\n})\n\n-- Example:\nlocal result = pkg.install({\n    packages = {\"nginx\", \"postgresql\"},\n    state = \"latest\"\n})\n</code></pre></p>"},{"location":"architecture/sloth-runner-architecture/#6-distributed-agent-system","title":"6. Distributed Agent System","text":"<p>Location: <code>cmd/sloth-runner/agent/</code>, <code>internal/agent/</code></p> <p>The agent system enables distributed task execution across multiple hosts using gRPC for communication.</p> <p>Architecture: <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Master    \u2502          \u2502   Agent 1   \u2502\n\u2502  (Server)   \u2502\u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba\u2502  (Client)   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n      \u25b2                        \u2502\n      \u2502                        \u2502\n      \u2502                        \u25bc\n      \u2502                  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba\u2502   Agent 2   \u2502\n                         \u2502  (Client)   \u2502\n                         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p> <p>Features: - gRPC Communication: Bidirectional streaming for real-time updates - Heartbeat Mechanism: Agents send periodic heartbeats to master - Auto-Reconnection: Agents automatically reconnect if connection drops - Health Monitoring: Track agent status and system metrics - Load Balancing: Distribute tasks across available agents - Telemetry: Prometheus metrics and Grafana dashboards</p> <p>Agent Lifecycle: <pre><code>Start \u2192 Register \u2192 Heartbeat Loop \u2192 Execute Tasks \u2192 Shutdown\n           \u2502            \u2502               \u2502\n           \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                 (Continuous)\n</code></pre></p>"},{"location":"architecture/sloth-runner-architecture/#7-storage-layer","title":"7. Storage Layer","text":"<p>Sloth Runner uses SQLite for persistent storage with the following databases:</p> <p>Sloth Database (<code>~/.sloth-runner/sloths.db</code>): - Stores saved workflow files - Tracks usage statistics - Manages active/inactive status</p> <p>Stack Database (<code>~/.sloth-runner/stacks.db</code>): - Workflow execution history - Task results and state - Idempotency tracking</p> <p>Configuration: - WAL (Write-Ahead Logging) mode for better concurrency - Automatic schema migrations - Connection pooling</p>"},{"location":"architecture/sloth-runner-architecture/#8-state-management","title":"8. State Management","text":"<p>Location: <code>internal/state/</code></p> <p>State management provides idempotent task execution through:</p> <p>State Store: - Tracks task execution history - Stores task fingerprints (hash of inputs) - Enables \"changed\" detection for idempotency</p> <p>Workflow: 1. Before task execution, compute fingerprint 2. Check if fingerprint exists in state 3. If exists and unchanged \u2192 skip execution 4. If changed or new \u2192 execute task 5. Store new fingerprint</p>"},{"location":"architecture/sloth-runner-architecture/#design-patterns","title":"Design Patterns","text":""},{"location":"architecture/sloth-runner-architecture/#1-repository-pattern","title":"1. Repository Pattern","text":"<p>Purpose: Abstract data access layer</p> <p>Implementation: <pre><code>// Interface\ntype Repository interface {\n    Create(ctx context.Context, entity *Entity) error\n    Get(ctx context.Context, id string) (*Entity, error)\n}\n\n// SQLite Implementation\ntype SQLiteRepository struct {\n    db *sql.DB\n}\n\n// Mock Implementation (for testing)\ntype MockRepository struct {\n    CreateFunc func(ctx context.Context, entity *Entity) error\n}\n</code></pre></p> <p>Benefits: - Testable (can mock repositories) - Swappable backends (SQLite \u2192 PostgreSQL) - Centralized data access logic</p>"},{"location":"architecture/sloth-runner-architecture/#2-service-layer-pattern","title":"2. Service Layer Pattern","text":"<p>Purpose: Encapsulate business logic</p> <p>Implementation: <pre><code>type Service struct {\n    repo Repository\n}\n\nfunc (s *Service) PerformBusinessOperation(ctx context.Context, input Input) error {\n    // 1. Validate input\n    // 2. Coordinate multiple operations\n    // 3. Handle transactions\n    // 4. Return result\n}\n</code></pre></p> <p>Benefits: - Business logic separate from presentation - Reusable across different interfaces (CLI, gRPC, HTTP) - Easier to test</p>"},{"location":"architecture/sloth-runner-architecture/#3-factory-pattern","title":"3. Factory Pattern","text":"<p>Purpose: Create objects without specifying exact classes</p> <p>Implementation: <pre><code>// Factory function\nfunc NewSlothService() (*SlothService, error) {\n    repo, err := NewSQLiteRepository(\"\")\n    if err != nil {\n        return nil, err\n    }\n    return &amp;SlothService{repo: repo}, nil\n}\n\n// For testing with dependency injection\nfunc NewSlothServiceWithRepository(repo Repository) *SlothService {\n    return &amp;SlothService{repo: repo}\n}\n</code></pre></p> <p>Benefits: - Dependency injection - Testability - Flexibility</p>"},{"location":"architecture/sloth-runner-architecture/#4-command-pattern","title":"4. Command Pattern","text":"<p>Purpose: Encapsulate requests as objects</p> <p>Implementation: <pre><code>type Command interface {\n    Execute(ctx context.Context) error\n}\n\ntype AddSlothCommand struct {\n    name     string\n    filePath string\n    service  *SlothService\n}\n\nfunc (c *AddSlothCommand) Execute(ctx context.Context) error {\n    return c.service.AddSloth(ctx, c.name, c.filePath)\n}\n</code></pre></p> <p>Benefits: - Uniform interface for all operations - Easy to add new commands - Supports undo/redo (if needed)</p>"},{"location":"architecture/sloth-runner-architecture/#5-strategy-pattern","title":"5. Strategy Pattern","text":"<p>Purpose: Define family of algorithms, encapsulate each one</p> <p>Implementation: <pre><code>type PackageManager interface {\n    Install(packages []string) error\n    Remove(packages []string) error\n}\n\ntype AptManager struct{}\ntype YumManager struct{}\ntype DnfManager struct{}\n\n// Factory selects strategy based on OS\nfunc GetPackageManager() PackageManager {\n    switch detectOS() {\n    case \"debian\":\n        return &amp;AptManager{}\n    case \"redhat\":\n        return &amp;YumManager{}\n    }\n}\n</code></pre></p> <p>Benefits: - Cross-platform support - Easy to add new package managers - Clean separation of implementations</p>"},{"location":"architecture/sloth-runner-architecture/#concurrency-model","title":"Concurrency Model","text":"<p>Sloth Runner uses Go's concurrency primitives:</p>"},{"location":"architecture/sloth-runner-architecture/#goroutines-for-parallel-execution","title":"Goroutines for Parallel Execution","text":"<pre><code>// Parallel task execution\nvar wg sync.WaitGroup\nfor _, task := range tasks {\n    wg.Add(1)\n    go func(t Task) {\n        defer wg.Done()\n        executeTask(t)\n    }(task)\n}\nwg.Wait()\n</code></pre>"},{"location":"architecture/sloth-runner-architecture/#channels-for-communication","title":"Channels for Communication","text":"<pre><code>// Agent heartbeat channel\ntype AgentManager struct {\n    heartbeats chan Heartbeat\n}\n\nfunc (m *AgentManager) ProcessHeartbeats() {\n    for heartbeat := range m.heartbeats {\n        m.updateAgentStatus(heartbeat)\n    }\n}\n</code></pre>"},{"location":"architecture/sloth-runner-architecture/#context-for-cancellation","title":"Context for Cancellation","text":"<pre><code>func ExecuteTask(ctx context.Context, task Task) error {\n    select {\n    case &lt;-ctx.Done():\n        return ctx.Err()\n    case result := &lt;-executeAsync(task):\n        return result\n    }\n}\n</code></pre>"},{"location":"architecture/sloth-runner-architecture/#error-handling","title":"Error Handling","text":"<p>Sloth Runner follows Go best practices for error handling:</p>"},{"location":"architecture/sloth-runner-architecture/#custom-errors","title":"Custom Errors","text":"<pre><code>var (\n    ErrSlothNotFound = errors.New(\"sloth not found\")\n    ErrSlothAlreadyExists = errors.New(\"sloth with this name already exists\")\n    ErrSlothInactive = errors.New(\"sloth is not active\")\n)\n</code></pre>"},{"location":"architecture/sloth-runner-architecture/#error-wrapping","title":"Error Wrapping","text":"<pre><code>func (s *Service) AddSloth(ctx context.Context, name, path string) error {\n    content, err := os.ReadFile(path)\n    if err != nil {\n        return fmt.Errorf(\"failed to read file: %w\", err)\n    }\n\n    if err := s.repo.Create(ctx, sloth); err != nil {\n        return fmt.Errorf(\"failed to add sloth: %w\", err)\n    }\n\n    return nil\n}\n</code></pre>"},{"location":"architecture/sloth-runner-architecture/#error-propagation","title":"Error Propagation","text":"<ul> <li>Errors are propagated up the call stack</li> <li>Each layer adds context with <code>fmt.Errorf</code></li> <li>Top-level (CLI) handles presentation</li> </ul>"},{"location":"architecture/sloth-runner-architecture/#testing-strategy","title":"Testing Strategy","text":""},{"location":"architecture/sloth-runner-architecture/#unit-tests","title":"Unit Tests","text":"<ul> <li>Test individual functions and methods</li> <li>Use mocks for dependencies</li> <li>Table-driven tests for multiple scenarios</li> </ul> <pre><code>func TestSlothService_GetActiveSloth(t *testing.T) {\n    tests := []struct {\n        name        string\n        slothName   string\n        mockSloth   *Sloth\n        expectError bool\n    }{\n        {name: \"active sloth\", slothName: \"test\", mockSloth: &amp;Sloth{IsActive: true}},\n        {name: \"inactive sloth\", slothName: \"test\", mockSloth: &amp;Sloth{IsActive: false}, expectError: true},\n    }\n\n    for _, tt := range tests {\n        t.Run(tt.name, func(t *testing.T) {\n            // Test implementation\n        })\n    }\n}\n</code></pre>"},{"location":"architecture/sloth-runner-architecture/#integration-tests","title":"Integration Tests","text":"<ul> <li>Test interaction between components</li> <li>Use real SQLite (in-memory)</li> <li>Test complete workflows</li> </ul>"},{"location":"architecture/sloth-runner-architecture/#end-to-end-tests","title":"End-to-End Tests","text":"<ul> <li>Test complete system behavior</li> <li>Use real .sloth files</li> <li>Verify CLI output</li> </ul>"},{"location":"architecture/sloth-runner-architecture/#security-considerations","title":"Security Considerations","text":""},{"location":"architecture/sloth-runner-architecture/#1-input-validation","title":"1. Input Validation","text":"<ul> <li>Validate all user inputs</li> <li>Sanitize file paths</li> <li>Check SQL injection (using prepared statements)</li> </ul>"},{"location":"architecture/sloth-runner-architecture/#2-access-control","title":"2. Access Control","text":"<ul> <li>SSH key-based authentication for agents</li> <li>File permission checks</li> <li>User context isolation</li> </ul>"},{"location":"architecture/sloth-runner-architecture/#3-data-protection","title":"3. Data Protection","text":"<ul> <li>SQLite database file permissions (0600)</li> <li>Sensitive data not logged</li> <li>Secure credential storage</li> </ul>"},{"location":"architecture/sloth-runner-architecture/#performance-optimizations","title":"Performance Optimizations","text":""},{"location":"architecture/sloth-runner-architecture/#1-database-indexing","title":"1. Database Indexing","text":"<pre><code>CREATE INDEX idx_sloths_name ON sloths(name);\nCREATE INDEX idx_sloths_active ON sloths(is_active);\n</code></pre>"},{"location":"architecture/sloth-runner-architecture/#2-connection-pooling","title":"2. Connection Pooling","text":"<ul> <li>Reuse database connections</li> <li>Limit concurrent connections</li> <li>Close idle connections</li> </ul>"},{"location":"architecture/sloth-runner-architecture/#3-caching","title":"3. Caching","text":"<ul> <li>Cache module registry</li> <li>Cache agent status</li> <li>Minimize database queries</li> </ul>"},{"location":"architecture/sloth-runner-architecture/#4-parallel-execution","title":"4. Parallel Execution","text":"<ul> <li>Goroutine module for parallel tasks</li> <li>Agent load balancing</li> <li>Concurrent state checks</li> </ul>"},{"location":"architecture/sloth-runner-architecture/#scalability","title":"Scalability","text":""},{"location":"architecture/sloth-runner-architecture/#horizontal-scalability","title":"Horizontal Scalability","text":"<ul> <li>Multiple agents can be added</li> <li>Agents run independently</li> <li>Master coordinates distribution</li> </ul>"},{"location":"architecture/sloth-runner-architecture/#vertical-scalability","title":"Vertical Scalability","text":"<ul> <li>Efficient resource usage</li> <li>Minimal memory footprint</li> <li>Fast Lua execution</li> </ul>"},{"location":"architecture/sloth-runner-architecture/#observability","title":"Observability","text":""},{"location":"architecture/sloth-runner-architecture/#logging","title":"Logging","text":"<pre><code>import \"log/slog\"\n\nslog.Info(\"task executed\", \"task\", taskName, \"duration\", duration)\nslog.Error(\"execution failed\", \"error\", err)\n</code></pre>"},{"location":"architecture/sloth-runner-architecture/#metrics-prometheus","title":"Metrics (Prometheus)","text":"<ul> <li>Task execution duration</li> <li>Task success/failure rates</li> <li>Agent health metrics</li> <li>System resource usage</li> </ul>"},{"location":"architecture/sloth-runner-architecture/#tracing","title":"Tracing","text":"<ul> <li>Task dependency graphs</li> <li>Execution timeline</li> <li>Performance bottlenecks</li> </ul>"},{"location":"architecture/sloth-runner-architecture/#future-architecture-improvements","title":"Future Architecture Improvements","text":"<ol> <li>Plugin System: Dynamic module loading</li> <li>Event Bus: Pub/sub for system events</li> <li>API Gateway: REST/GraphQL API for web UI</li> <li>Message Queue: RabbitMQ/Kafka for async operations</li> <li>Multi-Master: HA master setup with leader election</li> <li>Cloud Storage: S3/GCS for workflow storage</li> <li>Distributed State: etcd/Consul for shared state</li> </ol>"},{"location":"architecture/sloth-runner-architecture/#conclusion","title":"Conclusion","text":"<p>Sloth Runner's architecture is designed for:</p> <ul> <li>Modularity: Clear separation of concerns</li> <li>Testability: Extensive use of interfaces and mocks</li> <li>Scalability: Distributed agent system</li> <li>Maintainability: Clean code and design patterns</li> <li>Extensibility: Easy to add new modules and features</li> </ul> <p>The architecture follows industry best practices and provides a solid foundation for enterprise-grade task orchestration.</p>"},{"location":"assets/","title":"Sloth Runner Logo and Assets","text":"<p>This directory contains logos, icons, and other assets for the Sloth Runner documentation.</p>"},{"location":"assets/#files","title":"Files:","text":"<ul> <li><code>favicon.png</code> - Browser favicon (16x16)</li> <li><code>logo.png</code> - Main logo (128x128) </li> <li><code>sloth-icon.svg</code> - Vector icon of sloth</li> </ul>"},{"location":"en/","title":"Sloth-Runner Documentation","text":"<p>Welcome to the comprehensive documentation for Sloth-Runner, your flexible tool for task automation and workflow orchestration using Lua scripts.</p> <p>Here you will find detailed guides, API references, and practical examples to help you make the most of Sloth-Runner's power.</p>"},{"location":"en/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Getting Started</li> <li>Core Concepts</li> <li>Distributed Task Execution</li> <li>CLI Commands</li> <li>Interactive REPL</li> <li>Built-in Modules:<ul> <li>AWS Module</li> <li>Azure Module</li> <li>Data Module</li> <li>DigitalOcean Module</li> <li>Docker Module</li> <li>Exec Module</li> <li>FS Module</li> <li>GCP Module</li> <li>Git Module</li> <li>Log Module</li> <li>Net Module</li> <li>Notifications Module</li> <li>Pulumi Module</li> <li>Python Module</li> <li>Salt Module</li> <li>Terraform Module</li> </ul> </li> <li>Advanced Examples</li> </ul> <p>English | Portugu\u00eas | \u4e2d\u6587</p>"},{"location":"en/CLI/","title":"\ud83d\ude80 Sloth Runner CLI Reference","text":"<p>Complete command-line interface reference for Sloth Runner - the AI-powered GitOps task orchestration platform.</p>"},{"location":"en/CLI/#overview","title":"Overview","text":"<p>Sloth Runner provides a comprehensive CLI for task execution, agent management, scheduling, and workflow orchestration.</p> <p>Main Commands:</p> <pre><code>sloth-runner [command] [flags]\n</code></pre> Command Description <code>run</code> Execute tasks from workflow files <code>agent</code> Manage distributed agents <code>master</code> Start the master coordination server <code>scheduler</code> Manage scheduled tasks <code>stack</code> Manage workflow stacks and state <code>ui</code> Start the web dashboard <code>workflow</code> Create and manage workflows <code>list</code> List tasks from workflow files <code>version</code> Show version information"},{"location":"en/CLI/#sloth-runner-run","title":"<code>sloth-runner run</code>","text":"<p>Execute tasks defined in <code>.sloth</code> workflow files with multiple output formats and state persistence.</p>"},{"location":"en/CLI/#usage","title":"Usage","text":"<pre><code>sloth-runner run [file.sloth|stack-name] [flags]\n</code></pre>"},{"location":"en/CLI/#flags","title":"Flags","text":"Flag Type Description <code>-f, --file</code> string Path to the Lua/Sloth task file <code>-o, --output</code> string Output style: <code>basic</code>, <code>enhanced</code>, <code>rich</code>, <code>modern</code>, <code>json</code> (default: <code>basic</code>) <code>-v, --values</code> string Path to values file (YAML/JSON) for parameterization <code>--interactive</code> bool Run in interactive mode with prompts <code>--yes</code> bool Skip confirmation prompts"},{"location":"en/CLI/#output-styles","title":"Output Styles","text":"<ul> <li>basic: Simple text output</li> <li>enhanced: Colored output with icons</li> <li>rich: Detailed output with progress bars</li> <li>modern: Modern UI with animations</li> <li>json: Machine-readable JSON output</li> </ul>"},{"location":"en/CLI/#examples","title":"Examples","text":"<pre><code># Run with modern output style\nsloth-runner run -f deploy.sloth -o modern\n\n# Run with values file\nsloth-runner run -f infra.sloth -v prod-values.yaml\n\n# Run from stack\nsloth-runner run prod-stack --yes\n\n# Interactive mode\nsloth-runner run -f tasks.sloth --interactive\n\n# JSON output for CI/CD\nsloth-runner run -f ci.sloth -o json\n</code></pre>"},{"location":"en/CLI/#sloth-runner-agent","title":"<code>sloth-runner agent</code>","text":"<p>Manage distributed agents for remote task execution.</p>"},{"location":"en/CLI/#subcommands","title":"Subcommands","text":""},{"location":"en/CLI/#agent-start","title":"<code>agent start</code>","text":"<p>Start an agent in agent mode to accept tasks from master server.</p> <pre><code>sloth-runner agent start [flags]\n</code></pre> <p>Flags: - <code>--master string</code>: Master server address (default: <code>localhost:50053</code>) - <code>--name string</code>: Agent name identifier - <code>--tags string</code>: Comma-separated tags for agent capabilities - <code>--daemon</code>: Run as background daemon</p> <p>Example: <pre><code># Start agent with tags\nsloth-runner agent start --master master.example.com:50053 \\\n  --name prod-agent-1 \\\n  --tags linux,docker,aws\n\n# Start as daemon\nsloth-runner agent start --daemon --name bg-agent\n</code></pre></p>"},{"location":"en/CLI/#agent-list","title":"<code>agent list</code>","text":"<p>List all registered agents with their status.</p> <pre><code>sloth-runner agent list [flags]\n</code></pre> <p>Flags: - <code>--master string</code>: Master server address</p> <p>Example: <pre><code>sloth-runner agent list --master master.example.com:50053\n</code></pre></p>"},{"location":"en/CLI/#agent-exec","title":"<code>agent exec</code>","text":"<p>Execute a command on a remote agent.</p> <pre><code>sloth-runner agent exec &lt;agent_name&gt; &lt;command&gt; [flags]\n</code></pre> <p>Flags: - <code>--master string</code>: Master server address (or use SLOTH_RUNNER_MASTER_ADDR env var) - <code>-o, --output string</code>: Output format: text or json (default: text)</p> <p>Example: <pre><code># Using --master flag\nsloth-runner agent exec prod-agent-1 \"docker ps\" --master master.example.com:50053\n\n# Using environment variable\nSLOTH_RUNNER_MASTER_ADDR=master.example.com:50053 sloth-runner agent exec prod-agent-1 \"docker ps\"\n</code></pre></p>"},{"location":"en/CLI/#agent-stop","title":"<code>agent stop</code>","text":"<p>Stop a remote agent gracefully.</p> <pre><code>sloth-runner agent stop [flags]\n</code></pre> <p>Flags: - <code>--agent string</code>: Agent name to stop - <code>--master string</code>: Master server address</p>"},{"location":"en/CLI/#agent-delete","title":"<code>agent delete</code>","text":"<p>Delete an agent from the registry.</p> <pre><code>sloth-runner agent delete [flags]\n</code></pre>"},{"location":"en/CLI/#sloth-runner-master","title":"<code>sloth-runner master</code>","text":"<p>Start the master coordination server for managing distributed agents.</p>"},{"location":"en/CLI/#usage_1","title":"Usage","text":"<pre><code>sloth-runner master [flags]\n</code></pre>"},{"location":"en/CLI/#flags_1","title":"Flags","text":"Flag Type Description <code>-p, --port</code> int Port to listen on (default: <code>50053</code>) <code>--daemon</code> bool Run as background daemon <code>--debug</code> bool Enable debug logging"},{"location":"en/CLI/#examples_1","title":"Examples","text":"<pre><code># Start master server\nsloth-runner master --port 50053\n\n# Start as daemon with debug\nsloth-runner master --daemon --debug\n\n# Custom port\nsloth-runner master --port 9000\n</code></pre>"},{"location":"en/CLI/#sloth-runner-scheduler","title":"<code>sloth-runner scheduler</code>","text":"<p>Manage scheduled tasks for automated execution.</p>"},{"location":"en/CLI/#subcommands_1","title":"Subcommands","text":""},{"location":"en/CLI/#scheduler-enable","title":"<code>scheduler enable</code>","text":"<p>Enable the scheduler service.</p> <pre><code>sloth-runner scheduler enable\n</code></pre>"},{"location":"en/CLI/#scheduler-disable","title":"<code>scheduler disable</code>","text":"<p>Disable the scheduler service.</p> <pre><code>sloth-runner scheduler disable\n</code></pre>"},{"location":"en/CLI/#scheduler-list","title":"<code>scheduler list</code>","text":"<p>List all scheduled tasks with their configuration.</p> <pre><code>sloth-runner scheduler list [flags]\n</code></pre> <p>Output: - Task name - Schedule (cron expression) - Next run time - Status (enabled/disabled)</p> <p>Example: <pre><code>sloth-runner scheduler list\n</code></pre></p>"},{"location":"en/CLI/#scheduler-delete","title":"<code>scheduler delete</code>","text":"<p>Delete a scheduled task.</p> <pre><code>sloth-runner scheduler delete [task-name]\n</code></pre>"},{"location":"en/CLI/#sloth-runner-stack","title":"<code>sloth-runner stack</code>","text":"<p>Manage workflow stacks for state persistence and environment isolation.</p>"},{"location":"en/CLI/#subcommands_2","title":"Subcommands","text":""},{"location":"en/CLI/#stack-new","title":"<code>stack new</code>","text":"<p>Create a new workflow stack.</p> <pre><code>sloth-runner stack new [stack-name] [flags]\n</code></pre> <p>Flags: - <code>-f, --file string</code>: Workflow file to associate - <code>--description string</code>: Stack description</p> <p>Example: <pre><code>sloth-runner stack new prod-infra \\\n  -f infrastructure.sloth \\\n  --description \"Production infrastructure stack\"\n</code></pre></p>"},{"location":"en/CLI/#stack-list","title":"<code>stack list</code>","text":"<p>List all workflow stacks.</p> <pre><code>sloth-runner stack list\n</code></pre> <p>Output: - Stack name - Workflow file - State status - Last updated</p>"},{"location":"en/CLI/#stack-show","title":"<code>stack show</code>","text":"<p>Show detailed information about a stack.</p> <pre><code>sloth-runner stack show [stack-name]\n</code></pre> <p>Output: - Stack configuration - State variables - Execution history - Associated resources</p>"},{"location":"en/CLI/#stack-delete","title":"<code>stack delete</code>","text":"<p>Delete a workflow stack and its state.</p> <pre><code>sloth-runner stack delete [stack-name] [flags]\n</code></pre> <p>Flags: - <code>--force</code>: Force deletion without confirmation</p>"},{"location":"en/CLI/#sloth-runner-ui","title":"<code>sloth-runner ui</code>","text":"<p>Start the web-based dashboard for visual management.</p>"},{"location":"en/CLI/#usage_2","title":"Usage","text":"<pre><code>sloth-runner ui [flags]\n</code></pre>"},{"location":"en/CLI/#flags_2","title":"Flags","text":"Flag Type Description <code>-p, --port</code> int Port for UI server (default: <code>8080</code>) <code>--daemon</code> bool Run as background daemon <code>--debug</code> bool Enable debug logging"},{"location":"en/CLI/#features","title":"Features","text":"<ul> <li>\ud83d\udcca Real-time task monitoring</li> <li>\ud83e\udd16 Agent health dashboard</li> <li>\ud83d\udcc5 Scheduler management</li> <li>\ud83d\udce6 Stack browser</li> <li>\ud83d\udcc8 Metrics and analytics</li> </ul>"},{"location":"en/CLI/#examples_2","title":"Examples","text":"<pre><code># Start UI on default port\nsloth-runner ui\n\n# Custom port\nsloth-runner ui --port 3000\n\n# Run as daemon\nsloth-runner ui --daemon --port 8080\n</code></pre> <p>Access at: <code>http://localhost:8080</code></p>"},{"location":"en/CLI/#sloth-runner-workflow","title":"<code>sloth-runner workflow</code>","text":"<p>Create and manage workflow projects with scaffolding.</p>"},{"location":"en/CLI/#subcommands_3","title":"Subcommands","text":""},{"location":"en/CLI/#workflow-init","title":"<code>workflow init</code>","text":"<p>Initialize a new workflow project with templates.</p> <pre><code>sloth-runner workflow init [project-name] [flags]\n</code></pre> <p>Flags: - <code>--template string</code>: Template to use (default: <code>basic</code>) - <code>--path string</code>: Target directory</p> <p>Available Templates: - <code>basic</code>: Simple task workflow - <code>cicd</code>: CI/CD pipeline - <code>infra</code>: Infrastructure automation - <code>gitops</code>: GitOps deployment</p> <p>Example: <pre><code># Create CI/CD project\nsloth-runner workflow init my-pipeline --template cicd\n\n# Custom path\nsloth-runner workflow init my-project --template infra --path ./projects/\n</code></pre></p>"},{"location":"en/CLI/#workflow-list-templates","title":"<code>workflow list-templates</code>","text":"<p>List all available workflow templates.</p> <pre><code>sloth-runner workflow list-templates\n</code></pre>"},{"location":"en/CLI/#sloth-runner-list","title":"<code>sloth-runner list</code>","text":"<p>List tasks and task groups from a workflow file without execution.</p>"},{"location":"en/CLI/#usage_3","title":"Usage","text":"<pre><code>sloth-runner list [flags]\nsloth-runner list [flags]\n</code></pre> <p>Flags:</p> <ul> <li><code>-f, --file string</code>: (Required) Path to the Lua task configuration file.</li> <li><code>-v, --values string</code>: Path to a YAML values file, in case your task definitions depend on it.</li> </ul>"},{"location":"en/CLI/#sloth-runner-new","title":"<code>sloth-runner new</code>","text":"<p>Generates a new boilerplate Lua task definition file from a template.</p> <p>Usage: <pre><code>sloth-runner new &lt;group-name&gt; [flags]\n</code></pre></p> <p>Arguments:</p> <ul> <li><code>&lt;group-name&gt;</code>: The name of the main task group to be created in the file.</li> </ul> <p>Flags:</p> <ul> <li><code>-t, --template string</code>: The template to use. Default is <code>simple</code>. Run <code>sloth-runner template list</code> to see all available options.</li> <li><code>-o, --output string</code>: The path to the output file. If not provided, the generated content will be printed to stdout.</li> </ul> <pre><code>sloth-runner list [flags]\n</code></pre>"},{"location":"en/CLI/#flags_3","title":"Flags","text":"Flag Type Description <code>-f, --file</code> string Path to workflow file"},{"location":"en/CLI/#output","title":"Output","text":"<ul> <li>Task groups</li> <li>Task names</li> <li>Descriptions</li> <li>Dependencies</li> <li>Conditions</li> </ul>"},{"location":"en/CLI/#example","title":"Example","text":"<pre><code>sloth-runner list -f deploy.sloth\n</code></pre>"},{"location":"en/CLI/#sloth-runner-version","title":"<code>sloth-runner version</code>","text":"<p>Display version and build information.</p>"},{"location":"en/CLI/#usage_4","title":"Usage","text":"<pre><code>sloth-runner version\n</code></pre>"},{"location":"en/CLI/#output_1","title":"Output","text":"<ul> <li>Version number</li> <li>Git commit hash</li> <li>Build date</li> <li>Go version</li> </ul>"},{"location":"en/CLI/#global-flags","title":"Global Flags","text":"<p>Available for all commands:</p> Flag Description <code>-h, --help</code> Show command help <code>--debug</code> Enable debug output <code>--config string</code> Config file path (default: <code>~/.sloth-runner/config.yaml</code>)"},{"location":"en/CLI/#configuration-file","title":"Configuration File","text":"<p>Sloth Runner supports configuration via <code>~/.sloth-runner/config.yaml</code>:</p> <pre><code># Master server settings\nmaster:\n  host: localhost\n  port: 50053\n\n# Agent settings\nagent:\n  name: my-agent\n  tags:\n    - linux\n    - docker\n  reconnect: true\n\n# UI settings\nui:\n  port: 8080\n  theme: dark\n\n# Scheduler settings\nscheduler:\n  enabled: true\n  timezone: UTC\n</code></pre>"},{"location":"en/CLI/#environment-variables","title":"Environment Variables","text":"<p>Override configuration with environment variables:</p> Variable Description <code>SLOTH_MASTER_HOST</code> Master server host <code>SLOTH_MASTER_PORT</code> Master server port <code>SLOTH_AGENT_NAME</code> Agent identifier <code>SLOTH_UI_PORT</code> UI server port <code>SLOTH_DEBUG</code> Enable debug mode"},{"location":"en/CLI/#exit-codes","title":"Exit Codes","text":"Code Meaning <code>0</code> Success <code>1</code> General error <code>2</code> Task execution failed <code>3</code> Configuration error <code>4</code> Network/connection error <code>5</code> State management error"},{"location":"en/CLI/#examples_3","title":"Examples","text":""},{"location":"en/CLI/#complete-cicd-pipeline","title":"Complete CI/CD Pipeline","text":"<pre><code># Initialize project\nsloth-runner workflow init my-app --template cicd\n\n# Run tests\nsloth-runner run -f my-app/.sloth/test.sloth -o rich\n\n# Deploy to staging\nsloth-runner run staging-stack --yes\n\n# Check agent status\nsloth-runner agent list --master ci-master:50053\n\n# Schedule nightly builds\nsloth-runner scheduler add nightly-build \\\n  --cron \"0 0 * * *\" \\\n  --workflow build.sloth\n</code></pre>"},{"location":"en/CLI/#infrastructure-automation","title":"Infrastructure Automation","text":"<pre><code># Create infrastructure stack\nsloth-runner stack new prod-infra -f infrastructure.sloth\n\n# Apply with modern output\nsloth-runner run prod-infra -o modern\n\n# Show stack state\nsloth-runner stack show prod-infra\n\n# Teardown\nsloth-runner stack delete prod-infra --force\n</code></pre>"},{"location":"en/CLI/#distributed-task-execution","title":"Distributed Task Execution","text":"<pre><code># Start master server\nsloth-runner master --port 50053 --daemon\n\n# Start agents on different servers\nsloth-runner agent start --master master:50053 --name web-1 --tags web,nginx\nsloth-runner agent start --master master:50053 --name db-1 --tags database,postgres\n\n# Execute on specific agent\nsloth-runner agent exec web-1 \"systemctl status nginx\" --master master:50053\n\n# Start UI for monitoring\nsloth-runner ui --port 8080\n</code></pre>"},{"location":"en/CLI/#best-practices","title":"Best Practices","text":""},{"location":"en/CLI/#1-use-stacks-for-state-management","title":"1. Use Stacks for State Management","text":"<pre><code># Don't: Run without state\nsloth-runner run -f deploy.sloth\n\n# Do: Use stacks for persistence\nsloth-runner stack new prod\nsloth-runner run prod\n</code></pre>"},{"location":"en/CLI/#2-specify-output-format-for-cicd","title":"2. Specify Output Format for CI/CD","text":"<pre><code># JSON for parsing\nsloth-runner run -f ci.sloth -o json &gt; results.json\n\n# Rich for interactive\nsloth-runner run -f deploy.sloth -o rich\n</code></pre>"},{"location":"en/CLI/#3-use-values-files-for-environments","title":"3. Use Values Files for Environments","text":"<pre><code># Development\nsloth-runner run -f app.sloth -v dev-values.yaml\n\n# Production\nsloth-runner run -f app.sloth -v prod-values.yaml\n</code></pre>"},{"location":"en/CLI/#4-tag-agents-appropriately","title":"4. Tag Agents Appropriately","text":"<pre><code># Specific capabilities\nsloth-runner agent start --tags \"linux,docker,aws,x86_64\"\n\n# Environment-based\nsloth-runner agent start --tags \"prod,us-east-1\"\n</code></pre>"},{"location":"en/CLI/#troubleshooting","title":"Troubleshooting","text":""},{"location":"en/CLI/#connection-issues","title":"Connection Issues","text":"<pre><code># Test master connectivity\ncurl http://master:50053/health\n\n# Check agent logs\nsloth-runner agent start --debug\n</code></pre>"},{"location":"en/CLI/#task-execution-failures","title":"Task Execution Failures","text":"<pre><code># Run with debug output\nsloth-runner run -f task.sloth --debug\n\n# Interactive mode for troubleshooting\nsloth-runner run -f task.sloth --interactive\n</code></pre>"},{"location":"en/CLI/#state-issues","title":"State Issues","text":"<pre><code># View stack state\nsloth-runner stack show my-stack\n\n# Reset stack (careful!)\nsloth-runner stack delete my-stack\nsloth-runner stack new my-stack -f workflow.sloth\n</code></pre>"},{"location":"en/CLI/#related-documentation","title":"Related Documentation","text":"<ul> <li>Getting Started</li> <li>Core Concepts</li> <li>Agent Architecture</li> <li>Scheduler Guide</li> <li>Web Dashboard</li> <li>Stack Management</li> </ul>"},{"location":"en/CLI/#see-also","title":"See Also","text":"<ul> <li>REPL Interactive Shell</li> <li>Modern DSL Syntax</li> <li>Module Reference</li> <li>Examples Repository</li> </ul> <p>Need more help? Run <code>sloth-runner [command] --help</code> for detailed information about any command.</p>"},{"location":"en/CLI/#sloth-runner-version_1","title":"<code>sloth-runner version</code>","text":"<p>Displays the current version of <code>sloth-runner</code>.</p> <pre><code>sloth-runner version\n</code></pre>"},{"location":"en/CLI/#sloth-runner-scheduler_1","title":"<code>sloth-runner scheduler</code>","text":"<p>Manages the <code>sloth-runner</code> task scheduler, allowing you to enable, disable, list, and delete scheduled tasks.</p> <p>For detailed information on scheduler commands and configuration, refer to the Task Scheduler documentation.</p> <p>Subcommands:</p> <ul> <li><code>sloth-runner scheduler enable</code>: Starts the scheduler as a background process.</li> <li><code>sloth-runner scheduler disable</code>: Stops the running scheduler process.</li> <li><code>sloth-runner scheduler list</code>: Lists all configured scheduled tasks.</li> <li><code>sloth-runner scheduler delete &lt;task_name&gt;</code>: Deletes a specific scheduled task.</li> </ul>"},{"location":"en/advanced-examples/","title":"Advanced Examples","text":"<p>This section presents more complex examples and use cases that combine multiple Sloth-Runner modules for end-to-end automation.</p>"},{"location":"en/advanced-examples/#full-example-end-to-end-cicd-pipeline","title":"Full Example: End-to-End CI/CD Pipeline","text":"<p>This tutorial demonstrates how to build a complete CI/CD pipeline using the <code>git</code>, <code>pulumi</code>, and <code>salt</code> modules to version code, provision infrastructure, and deploy an application.</p>"},{"location":"en/advanced-examples/#scenario","title":"Scenario","text":"<p>Imagine you have a Pulumi infrastructure project and an application project. You want to automate the following flow:</p> <ol> <li>Clone the infrastructure repository.</li> <li>Update a version file within the repository.</li> <li>Commit and push this change to Git.</li> <li>Execute <code>pulumi up</code> to provision or update the infrastructure (e.g., a staging environment).</li> <li>Use Salt to configure the provisioned servers and deploy the application.</li> </ol>"},{"location":"en/advanced-examples/#lua-script-examplespulumi_git_combined_examplesloth","title":"Lua Script (<code>examples/pulumi_git_combined_example.sloth</code>)","text":"<pre><code>-- examples/pulumi_git_combined_example.sloth\n\ncommand = function(params)\n    log.info(\"Starting combined Pulumi and Git example...\")\n\n    local pulumi_repo_url = \"https://github.com/my-org/my-pulumi-infra.git\" -- Example Pulumi repo\n    local pulumi_repo_path = \"./pulumi-infra-checkout\"\n    local new_infra_version = params.infra_version or \"v1.0.0-infra\"\n    local pulumi_project_workdir = pulumi_repo_path .. \"/my-vpc-project\" -- Subdirectory within the cloned repo\n    local repo\n\n    -- 1. Clone or open the Pulumi repository\n    log.info(\"Step 1: Cloning or opening Pulumi repository...\")\n    if not fs.exists(pulumi_repo_path) then\n        log.info(\"Cloning Pulumi repository: \" .. pulumi_repo_url)\n        local cloned_repo, clone_err = git.clone(pulumi_repo_url, pulumi_repo_path)\n        if clone_err then\n            log.error(\"Failed to clone Pulumi repository: \" .. clone_err)\n            return false, \"Git clone failed.\"\n        end\n        repo = cloned_repo\n    else\n        log.info(\"Pulumi repository already exists, opening local reference.\")\n        local opened_repo, open_err = git.repo(pulumi_repo_path)\n        if open_err then\n            log.error(\"Failed to open Pulumi repository: \" .. open_err)\n            return false, \"Git repo open failed.\"\n        end\n        repo = opened_repo\n    end\n\n    if not repo then\n        return false, \"Failed to get Pulumi repository reference.\"\n    end\n\n    -- 2. Update the repository (pull)\n    log.info(\"Step 2: Pulling latest changes from Pulumi repository...\")\n    repo:checkout(\"main\"):pull(\"origin\", \"main\")\n    local pull_result = repo:result()\n    if not pull_result.success then\n        log.error(\"Failed to pull Pulumi repository: \" .. pull_result.stderr)\n        return false, \"Git pull failed.\"\n    end\n    log.info(\"Pulumi repository updated. Stdout: \" .. pull_result.stdout)\n\n    -- 3. Simulate a change in the Pulumi code (e.g., update a version file)\n    log.info(\"Step 3: Simulating a change in Pulumi code (updating version file)...\")\n    local infra_version_file = pulumi_repo_path .. \"/INFRA_VERSION\"\n    fs.write(infra_version_file, new_infra_version)\n    log.info(\"Updated INFRA_VERSION file to: \" .. new_infra_version)\n\n    -- 4. Commit and push the changes\n    log.info(\"Step 4: Committing and pushing infrastructure version change...\")\n    local commit_message = \"ci: Bump infrastructure version to \" .. new_infra_version\n    repo:add(infra_version_file)\n        :commit(commit_message)\n        :push(\"origin\", \"main\") -- No follow_tags here, just the commit\n\n    local push_result = repo:result()\n    if not push_result.success then\n        log.error(\"Failed to push infrastructure changes: \" .. push_result.stderr)\n        return false, \"Git push failed for infra changes.\"\n    end\n    log.info(\"Infrastructure version change pushed. Stdout: \" .. push_result.stdout)\n\n    -- 5. Execute 'pulumi up' for the project\n    log.info(\"Step 5: Running pulumi up for the infrastructure project...\")\n    local infra_stack = pulumi.stack(\"my-org/my-infra/dev\", {\n        workdir = pulumi_project_workdir -- Use the subdirectory of the Pulumi project\n    })\n\n    local pulumi_up_result = infra_stack:up({ non_interactive = true })\n\n    if not pulumi_up_result.success then\n        log.error(\"Pulumi up failed: \" .. pulumi_up_result.stderr)\n        return false, \"Pulumi up failed.\"\n    end\n    log.info(\"Pulumi up completed successfully. Stdout: \" .. pulumi_up_result.stdout)\n\n    -- 6. Configure and deploy application using Salt (Example)\n    log.info(\"Step 6: Configuring and deploying application using Salt...\")\n    -- Assuming Pulumi up provided the server IP or hostname\n    -- For this example, we'll use a fictitious IP\n    local server_ip = \"192.168.1.100\" -- Replace with actual output from Pulumi, if any\n    local salt_target = salt.target(server_ip)\n\n    log.info(\"Running Salt test.ping on \" .. server_ip .. \"...\")\n    salt_target:ping()\n    local ping_result = salt_target:result()\n    if not ping_result.success then\n        log.error(\"Salt ping failed for \" .. server_ip .. \": \" .. ping_result.stderr)\n        return false, \"Salt ping failed.\"\n    end\n    log.info(\"Salt ping successful. Stdout: \" .. data.to_json(ping_result.stdout)) -- Assuming ping returns JSON\n\n    log.info(\"Applying Salt state 'app.install' on \" .. server_ip .. \"...\")\n    salt_target:cmd('state.apply', 'app.install')\n    local salt_apply_result = salt_target:result()\n    if not salt_apply_result.success then\n        log.error(\"Salt state.apply failed for \" .. server_ip .. \": \" .. salt_apply_result.stderr)\n        return false, \"Salt state.apply failed.\"\n    end\n    log.info(\"Salt state.apply successful. Stdout: \" .. data.to_json(salt_apply_result.stdout))\n\n    log.info(\"Combined Pulumi and Git example finished successfully.\")\n    return true, \"Combined Pulumi and Git example finished.\"\nend\n\nModern DSLs = {\n    pulumi_git_combined_example = {\n        description = \"Demonstrates combined usage of 'pulumi' and 'git' modules for CI/CD pipeline.\",\n        tasks = {\n            {\n                name = \"run_combined_example\",\n                command = command,\n                params = {\n                    infra_version = \"v1.0.0-test-combined\"\n                }\n            }\n        }\n    }\n}\n</code></pre> <p>English | Portugu\u00eas | \u4e2d\u6587</p>"},{"location":"en/advanced-features/","title":"\ud83c\udfaf Advanced Features","text":"<p>Sloth Runner provides powerful advanced features for enterprise deployments.</p>"},{"location":"en/advanced-features/#available-features","title":"Available Features","text":""},{"location":"en/advanced-features/#ai-integration","title":"\ud83e\udd16 AI Integration","text":"<p>Learn more: AI Integration</p>"},{"location":"en/advanced-features/#distributed-execution","title":"\ud83c\udf10 Distributed Execution","text":"<p>Learn more: Distributed Agents</p>"},{"location":"en/advanced-features/#web-dashboard","title":"\ud83d\udcca Web Dashboard","text":"<p>Learn more: Web Dashboard</p>"},{"location":"en/advanced-features/#advanced-scheduling","title":"\u23f0 Advanced Scheduling","text":"<p>Learn more: Advanced Scheduler</p>"},{"location":"en/advanced-features/#multi-cloud-support","title":"\u2601\ufe0f Multi-Cloud Support","text":"<p>Learn more: Multi-Cloud Excellence</p>"},{"location":"en/advanced-features/#stack-management","title":"\ud83d\uddc2\ufe0f Stack Management","text":"<p>Learn more: Stack Management</p>"},{"location":"en/advanced-features/#getting-started","title":"Getting Started","text":"<p>See Getting Started Guide for installation instructions.</p>"},{"location":"en/advanced-features/#examples","title":"Examples","text":"<p>Check out Advanced Examples for practical use cases.</p>"},{"location":"en/agent-improvements/","title":"\ud83d\ude80 Agent Improvements &amp; Future Enhancements","text":"<p>This document outlines the comprehensive improvements and new features that transform sloth-runner from a basic distributed execution system into an enterprise-grade orchestration platform.</p>"},{"location":"en/agent-improvements/#current-implementation-status","title":"\ud83d\udcca Current Implementation Status","text":""},{"location":"en/agent-improvements/#implemented-features","title":"\u2705 Implemented Features","text":""},{"location":"en/agent-improvements/#1-state-management-persistence-implemented","title":"1. \ud83d\udd04 State Management &amp; Persistence Implemented","text":"<ul> <li>SQLite-based persistent state with WAL mode</li> <li>47 Lua functions for comprehensive state management</li> <li>Atomic operations (increment, compare-and-swap, append)</li> <li>Distributed locks with automatic timeout handling</li> <li>TTL support with automatic expiration</li> <li>Pattern matching for bulk operations</li> </ul>"},{"location":"en/agent-improvements/#2-advanced-metrics-system-implemented","title":"2. \ud83d\udcca Advanced Metrics System Implemented","text":"<ul> <li>System metrics collection (CPU, memory, disk, network)</li> <li>Custom metrics (gauges, counters, histograms, timers)</li> <li>Automatic health checks with configurable thresholds</li> <li>Prometheus-compatible HTTP endpoints</li> <li>26 Lua functions for monitoring and alerting</li> </ul>"},{"location":"en/agent-improvements/#high-priority-improvements-planned","title":"\ud83c\udfaf High Priority Improvements Planned","text":""},{"location":"en/agent-improvements/#1-web-dashboard-real-time-monitoring","title":"1. \ud83d\udcf1 Web Dashboard &amp; Real-time Monitoring","text":"<pre><code>interface AgentDashboard {\n    realTimeMetrics: LiveMetricsDisplay;\n    taskExecution: TaskMonitor;\n    logStreaming: LogViewer;\n    healthStatus: HealthDashboard;\n    configManager: ConfigEditor;\n    alertCenter: AlertManager;\n}\n</code></pre> <p>Features: - Real-time metrics visualization with interactive charts - Live log streaming with filtering and search - Task execution monitoring with progress tracking - Health status overview with drill-down capabilities - Configuration management with validation - Alert management with notification routing</p> <p>Benefits: - Immediate visibility into system performance - Reduced time to identify and resolve issues - Enhanced user experience for operations teams - Centralized control and monitoring</p>"},{"location":"en/agent-improvements/#2-intelligent-resource-management","title":"2. \ud83c\udf9b\ufe0f Intelligent Resource Management","text":"<pre><code>type ResourceController struct {\n    CPULimits        ResourceLimits    `json:\"cpu_limits\"`\n    MemoryLimits     ResourceLimits    `json:\"memory_limits\"`\n    DiskIOLimits     ResourceLimits    `json:\"disk_limits\"`\n    NetworkLimits    ResourceLimits    `json:\"network_limits\"`\n    QueueManagement  QueueConfig       `json:\"queue_config\"`\n    LoadBalancer     LoadBalancerConfig `json:\"load_balancer\"`\n}\n\ntype ResourceLimits struct {\n    MaxUsagePercent  float64 `json:\"max_usage\"`\n    WarningThreshold float64 `json:\"warning_threshold\"`\n    ActionOnExceed   string  `json:\"action_on_exceed\"`\n    MonitoringWindow string  `json:\"monitoring_window\"`\n}\n</code></pre> <p>Capabilities: - Dynamic resource allocation based on current load - Task prioritization with queue management - Automatic scaling when resource thresholds are exceeded - Resource isolation using cgroups or containers - Predictive scaling using historical data</p>"},{"location":"en/agent-improvements/#3-advanced-load-balancing-task-distribution","title":"3. \ud83d\udd04 Advanced Load Balancing &amp; Task Distribution","text":"<pre><code>-- Intelligent load balancing in Lua\nlocal best_agent = load_balancer.select_agent({\n    strategy = \"weighted_round_robin\",\n    criteria = {\n        cpu_weight = 0.4,\n        memory_weight = 0.3,\n        network_weight = 0.2,\n        queue_weight = 0.1\n    },\n    constraints = {\n        max_cpu_percent = 80,\n        max_memory_percent = 85,\n        max_queue_size = 50\n    },\n    affinity = {\n        tags = {\"gpu\", \"ssd\"},\n        region = \"us-east-1\"\n    }\n})\n</code></pre> <p>Strategies: - Weighted round-robin based on system metrics - Least connections for even distribution - Resource-aware routing based on requirements - Affinity-based assignment for specialized tasks - Failure-aware routing with automatic failover</p>"},{"location":"en/agent-improvements/#4-advanced-health-monitoring","title":"4. \ud83c\udfe5 Advanced Health Monitoring","text":"<pre><code>type HealthChecker struct {\n    SystemChecks     []SystemHealthCheck     `json:\"system_checks\"`\n    ServiceChecks    []ServiceHealthCheck    `json:\"service_checks\"`\n    CustomChecks     []CustomHealthCheck     `json:\"custom_checks\"`\n    AlertRules       []HealthAlertRule       `json:\"alert_rules\"`\n    RecoveryActions  []RecoveryAction        `json:\"recovery_actions\"`\n}\n\ntype HealthCheck struct {\n    Name             string        `json:\"name\"`\n    Type             string        `json:\"type\"`\n    Interval         time.Duration `json:\"interval\"`\n    Timeout          time.Duration `json:\"timeout\"`\n    SuccessThreshold int           `json:\"success_threshold\"`\n    FailureThreshold int           `json:\"failure_threshold\"`\n    Command          string        `json:\"command,omitempty\"`\n    HTTPEndpoint     string        `json:\"http_endpoint,omitempty\"`\n}\n</code></pre> <p>Health Check Types: - System checks: CPU, memory, disk, network connectivity - Service checks: Database connectivity, API endpoints - Custom script checks: Application-specific validations - Dependency checks: External service availability - Performance checks: Response time, throughput</p>"},{"location":"en/agent-improvements/#medium-priority-enhancements-planned","title":"\ud83d\udd27 Medium Priority Enhancements Planned","text":""},{"location":"en/agent-improvements/#5-plugin-architecture-extensibility","title":"5. \ud83d\udd0c Plugin Architecture &amp; Extensibility","text":"<pre><code>type Plugin interface {\n    Name() string\n    Version() string\n    Description() string\n\n    Initialize(config PluginConfig) error\n    Execute(ctx context.Context, params PluginParams) (*PluginResult, error)\n    HealthCheck() (*PluginHealth, error)\n    Cleanup() error\n}\n\ntype PluginManager struct {\n    LoadedPlugins    map[string]Plugin      `json:\"loaded_plugins\"`\n    PluginConfigs    map[string]PluginConfig `json:\"plugin_configs\"`\n    PluginRegistry   PluginRegistry         `json:\"plugin_registry\"`\n    HookManager      HookManager            `json:\"hook_manager\"`\n}\n</code></pre> <p>Plugin Categories: - Infrastructure: Docker, Kubernetes, Terraform, Ansible - Cloud Providers: AWS, GCP, Azure, DigitalOcean enhanced - Databases: PostgreSQL, MySQL, Redis, MongoDB - Monitoring: Prometheus, Grafana, Datadog, New Relic - Notifications: Slack, Email, PagerDuty, Discord - Security: Vault, SOPS, certificate management</p>"},{"location":"en/agent-improvements/#6-enterprise-security-features","title":"6. \ud83d\udd12 Enterprise Security Features","text":"<pre><code>type SecurityConfig struct {\n    Authentication   AuthenticationConfig  `json:\"authentication\"`\n    Authorization    AuthorizationConfig   `json:\"authorization\"`\n    Encryption       EncryptionConfig      `json:\"encryption\"`\n    Audit           AuditConfig           `json:\"audit\"`\n    Compliance      ComplianceConfig      `json:\"compliance\"`\n}\n\ntype AuthenticationConfig struct {\n    Method          string        `json:\"method\"` // \"jwt\", \"oauth2\", \"mtls\", \"ldap\"\n    TokenTTL        time.Duration `json:\"token_ttl\"`\n    RefreshEnabled  bool          `json:\"refresh_enabled\"`\n    MFARequired     bool          `json:\"mfa_required\"`\n    SessionTimeout  time.Duration `json:\"session_timeout\"`\n}\n</code></pre> <p>Security Features: - mTLS authentication with automatic certificate rotation - RBAC (Role-Based Access Control) with fine-grained permissions - Audit logging of all actions with tamper-proof storage - Secret management integration with Vault/SOPS - Network policies and firewall rules - Compliance scanning (SOC2, PCI-DSS, HIPAA)</p>"},{"location":"en/agent-improvements/#7-advanced-caching-data-management","title":"7. \ud83d\udcbe Advanced Caching &amp; Data Management","text":"<pre><code>-- Enhanced caching with multiple backends\ncache.configure({\n    default_backend = \"redis\",\n    backends = {\n        redis = {\n            endpoints = {\"redis:6379\"},\n            cluster_mode = true,\n            password = secret(\"redis-password\")\n        },\n        memory = {\n            max_size_mb = 512,\n            eviction_policy = \"lru\"\n        },\n        disk = {\n            directory = \"/var/cache/sloth-runner\",\n            max_size_gb = 10,\n            compression = true\n        }\n    },\n    policies = {\n        artifacts = {backend = \"disk\", ttl = \"24h\"},\n        config = {backend = \"memory\", ttl = \"5m\"},\n        metrics = {backend = \"redis\", ttl = \"1h\"}\n    }\n})\n</code></pre>"},{"location":"en/agent-improvements/#advanced-features-beta","title":"\ud83c\udfa8 Advanced Features Beta","text":""},{"location":"en/agent-improvements/#8-ai-powered-optimization","title":"8. \ud83e\udd16 AI-Powered Optimization","text":"<pre><code>type AIAssistant struct {\n    PredictiveScaling      bool            `json:\"predictive_scaling\"`\n    AnomalyDetection      bool            `json:\"anomaly_detection\"`\n    PerformanceOptimization bool          `json:\"performance_optimization\"`\n    CapacityPlanning      bool            `json:\"capacity_planning\"`\n    AutoRemediation       bool            `json:\"auto_remediation\"`\n    CostOptimization      bool            `json:\"cost_optimization\"`\n}\n</code></pre> <p>AI Capabilities: - Predictive scaling based on historical patterns - Anomaly detection in metrics and behavior - Performance optimization recommendations - Capacity planning with growth projections - Automated remediation of common issues - Cost optimization suggestions</p>"},{"location":"en/agent-improvements/#9-advanced-workflow-engine","title":"9. \ud83c\udf10 Advanced Workflow Engine","text":"<pre><code>-- Visual workflow definition\nWorkflow = {\n    name = \"advanced_deployment_pipeline\",\n    description = \"Multi-stage deployment with rollback capabilities\",\n\n    stages = {\n        {\n            name = \"build_and_test\",\n            parallel = true,\n            tasks = {\n                {name = \"unit_tests\", timeout = \"10m\"},\n                {name = \"integration_tests\", timeout = \"15m\"},\n                {name = \"security_scan\", timeout = \"20m\"}\n            },\n            on_failure = \"abort\"\n        },\n        {\n            name = \"staging_deployment\",\n            condition = \"previous_stage_success\",\n            tasks = {\n                {name = \"deploy_staging\", agent_selector = \"staging_cluster\"},\n                {name = \"smoke_tests\", depends_on = \"deploy_staging\"}\n            },\n            approval_required = true,\n            approvers = [\"ops-team\", \"qa-team\"]\n        },\n        {\n            name = \"production_deployment\",\n            strategy = \"canary\",\n            rollback_trigger = {\n                error_rate = \"&gt; 5%\",\n                response_time = \"&gt; 1s\"\n            },\n            tasks = {\n                {name = \"deploy_canary\", percentage = 10},\n                {name = \"monitor_canary\", duration = \"10m\"},\n                {name = \"deploy_full\", condition = \"canary_success\"}\n            }\n        }\n    },\n\n    rollback = {\n        strategy = \"automatic\",\n        triggers = [\"error_threshold\", \"manual\"],\n        preserve_data = true\n    }\n}\n</code></pre>"},{"location":"en/agent-improvements/#10-multi-cloud-hybrid-support","title":"10. \ud83c\udf0d Multi-Cloud &amp; Hybrid Support","text":"<pre><code># Multi-cloud configuration\ncloud_providers:\n  aws:\n    regions: [\"us-east-1\", \"us-west-2\", \"eu-west-1\"]\n    services: [\"ecs\", \"fargate\", \"lambda\"]\n    cost_optimization: true\n\n  gcp:\n    regions: [\"us-central1\", \"europe-west1\"]\n    services: [\"gke\", \"cloud-run\", \"cloud-functions\"]\n\n  azure:\n    regions: [\"eastus\", \"westeurope\"]\n    services: [\"aci\", \"functions\"]\n\n  on_premises:\n    datacenters: [\"dc1\", \"dc2\"]\n    kubernetes_clusters: [\"prod\", \"staging\"]\n\ndeployment_strategy:\n  primary_cloud: \"aws\"\n  failover_cloud: \"gcp\"\n  cost_optimization: true\n  data_residency: \"eu-west-1\"\n  disaster_recovery: \"cross-cloud\"\n</code></pre>"},{"location":"en/agent-improvements/#implementation-roadmap","title":"\ud83d\udcca Implementation Roadmap","text":""},{"location":"en/agent-improvements/#phase-1-foundation-q1-2024-completed","title":"Phase 1: Foundation (Q1 2024) Completed","text":"<ul> <li>\u2705 State Management Module</li> <li>\u2705 Advanced Metrics System</li> <li>\u2705 Enhanced Documentation</li> </ul>"},{"location":"en/agent-improvements/#phase-2-core-improvements-q2-2024","title":"Phase 2: Core Improvements (Q2 2024)","text":"<ul> <li>\ud83d\udd04 Web Dashboard Development</li> <li>\ud83d\udd04 Resource Management Implementation</li> <li>\ud83d\udd04 Advanced Health Monitoring</li> </ul>"},{"location":"en/agent-improvements/#phase-3-platform-enhancement-q3-2024","title":"Phase 3: Platform Enhancement (Q3 2024)","text":"<ul> <li>\ud83d\udcc5 Plugin Architecture</li> <li>\ud83d\udcc5 Security Features</li> <li>\ud83d\udcc5 Load Balancing Improvements</li> </ul>"},{"location":"en/agent-improvements/#phase-4-intelligence-scale-q4-2024","title":"Phase 4: Intelligence &amp; Scale (Q4 2024)","text":"<ul> <li>\ud83d\udcc5 AI-Powered Features</li> <li>\ud83d\udcc5 Advanced Workflow Engine</li> <li>\ud83d\udcc5 Multi-Cloud Support</li> </ul>"},{"location":"en/agent-improvements/#expected-benefits","title":"\ud83c\udfaf Expected Benefits","text":""},{"location":"en/agent-improvements/#operational-excellence","title":"Operational Excellence","text":"<ul> <li>99.9% uptime with automatic failover</li> <li>50% reduction in manual operations</li> <li>Real-time visibility into all systems</li> <li>Automated remediation of common issues</li> </ul>"},{"location":"en/agent-improvements/#performance-scalability","title":"Performance &amp; Scalability","text":"<ul> <li>10x better resource utilization</li> <li>Sub-second task scheduling</li> <li>Linear scaling up to 10,000 agents</li> <li>Predictive capacity planning</li> </ul>"},{"location":"en/agent-improvements/#developer-experience","title":"Developer Experience","text":"<ul> <li>Visual workflow designer</li> <li>Integrated debugging tools</li> <li>Comprehensive API documentation</li> <li>Plugin ecosystem</li> </ul>"},{"location":"en/agent-improvements/#enterprise-features","title":"Enterprise Features","text":"<ul> <li>SOC2 compliance ready</li> <li>Multi-tenant isolation</li> <li>Audit trail for all operations</li> <li>Cost optimization recommendations</li> </ul>"},{"location":"en/agent-improvements/#competitive-advantage","title":"\ud83d\udcc8 Competitive Advantage","text":"Feature Sloth Runner Enhanced Jenkins GitLab CI GitHub Actions Airflow Lua Scripting \u2705 Native \u274c \u274c \u274c \u2705 Python State Management \u2705 Built-in \ud83d\udd0c Plugins \u274c \u274c \u2705 Database Real-time Metrics \u2705 Native \ud83d\udd0c Plugins \u26a0\ufe0f Basic \u26a0\ufe0f Basic \u2705 Native Distributed Agents \u2705 Native \u2705 Master/Slave \u2705 Runners \u2601\ufe0f Cloud \u2705 Celery AI Optimization \u2705 Built-in \u274c \u274c \u274c \ud83d\udd0c Plugins Multi-Cloud \u2705 Native \ud83d\udd0c Plugins \ud83d\udd0c Plugins \u2601\ufe0f Limited \ud83d\udd0c Plugins Visual Workflows \u2705 Built-in \ud83d\udd0c Plugins \u2705 Native \u2705 YAML \u2705 Native Enterprise Security \u2705 Built-in \ud83d\udd0c Plugins \u2705 Native \u2705 Native \u26a0\ufe0f Basic"},{"location":"en/agent-improvements/#getting-started-with-improvements","title":"\ud83d\ude80 Getting Started with Improvements","text":""},{"location":"en/agent-improvements/#enable-advanced-features","title":"Enable Advanced Features","text":"<pre><code># Enable metrics collection on agents\nsloth-runner agent start --metrics-port 8080 --health-checks\n\n# Start with enhanced monitoring\nsloth-runner master --dashboard-port 3000 --metrics-enabled\n\n# Configure advanced features\nsloth-runner config set features.ai_optimization=true\nsloth-runner config set features.predictive_scaling=true\n</code></pre>"},{"location":"en/agent-improvements/#monitor-implementation-progress","title":"Monitor Implementation Progress","text":"<pre><code>-- Check feature availability\nlocal features = system.available_features()\nfor feature, status in pairs(features) do\n    log.info(feature .. \": \" .. status)\nend\n\n-- Enable beta features\nsystem.enable_beta_features({\"workflow_engine\", \"ai_assistant\"})\n</code></pre>"},{"location":"en/agent-improvements/#additional-resources","title":"\ud83d\udcda Additional Resources","text":"<ul> <li>\ud83d\udcd6 State Management Guide</li> <li>\ud83d\udcca Metrics &amp; Monitoring Guide</li> <li>\ud83d\udd27 Plugin Development Guide</li> <li>\ud83c\udfd7\ufe0f Architecture Deep Dive</li> <li>\ud83d\ude80 Quick Start Tutorial</li> </ul> <p>The transformation of sloth-runner into an enterprise-grade orchestration platform represents a significant leap in capabilities, positioning it as a modern alternative to traditional CI/CD and workflow tools while maintaining the unique advantages of Lua scripting and distributed architecture! \ud83d\ude80</p>"},{"location":"en/ai-features/","title":"\ud83e\udd16 Intelligent Automation &amp; Analytics","text":"<p>Advanced Task Automation with Smart Analytics Sloth Runner provides intelligent automation features including predictive analytics, optimization algorithms, and adaptive workflows for modern infrastructure management.</p>"},{"location":"en/ai-features/#smart-automation-overview","title":"\ud83e\udde0 Smart Automation Overview","text":"<p>The intelligent automation features in Sloth Runner help optimize your workflows through data-driven insights, predictive analytics, and adaptive execution patterns.</p>"},{"location":"en/ai-features/#intelligent-features","title":"\u2728 Intelligent Features","text":""},{"location":"en/ai-features/#predictive-analytics","title":"\ud83d\udcca Predictive Analytics","text":"<ul> <li>Performance Prediction: Analyze historical data to predict system performance</li> <li>Failure Detection: Early warning system for potential task failures</li> <li>Resource Optimization: Predict and optimize resource usage patterns</li> <li>Trend Analysis: Identify patterns in workflow execution and performance</li> </ul>"},{"location":"en/ai-features/#adaptive-optimization","title":"\ud83c\udfaf Adaptive Optimization","text":"<ul> <li>Dynamic Resource Allocation: Automatically adjust resources based on demand</li> <li>Intelligent Retry Strategies: Adaptive retry patterns based on failure types</li> <li>Load Balancing Optimization: Smart distribution of tasks across agents</li> <li>Performance Tuning: Automatic optimization of task execution parameters</li> </ul>"},{"location":"en/ai-features/#self-healing-workflows","title":"\ud83d\udd04 Self-Healing Workflows","text":"<ul> <li>Automatic Recovery: Detect and recover from common failure scenarios</li> <li>Circuit Breaker Patterns: Prevent cascade failures with intelligent circuit breakers</li> <li>Health Monitoring: Continuous monitoring with automatic remediation</li> <li>Rollback Strategies: Intelligent rollback based on health metrics</li> </ul>"},{"location":"en/ai-features/#learning-adaptation","title":"\ud83d\udcc8 Learning &amp; Adaptation","text":"<ul> <li>Execution Pattern Learning: Learn from past executions to improve future runs</li> <li>Anomaly Detection: Identify unusual patterns in workflow execution</li> <li>Performance Baselines: Establish and monitor performance baselines</li> <li>Continuous Improvement: Automatically suggest workflow optimizations</li> </ul>"},{"location":"en/ai-features/#getting-started-with-intelligent-features","title":"\ud83d\ude80 Getting Started with Intelligent Features","text":""},{"location":"en/ai-features/#enable-predictive-analytics","title":"Enable Predictive Analytics","text":"<pre><code>local analytics = require(\"analytics\")\nlocal optimization = require(\"optimization\")\n\n-- Enable predictive analytics for a workflow\nworkflow.define(\"intelligent_deployment\", {\n    analytics_enabled = true,\n    optimization_level = \"aggressive\",\n\n    tasks = {\n        task(\"performance_analysis\")\n            :command(function()\n                -- Analyze historical performance data\n                local prediction = analytics.predict_performance({\n                    metric = \"deployment_time\",\n                    lookback_days = 30,\n                    confidence_threshold = 0.8\n                })\n\n                if prediction.expected_duration &gt; 300 then\n                    log.warn(\"Deployment expected to take \" .. prediction.expected_duration .. \" seconds\")\n                    analytics.alert(\"long_deployment_predicted\", prediction)\n                end\n\n                return prediction\n            end)\n            :build(),\n\n        task(\"optimized_deployment\")\n            :depends_on({\"performance_analysis\"})\n            :command(function(params, deps)\n                local prediction = deps.performance_analysis\n\n                -- Optimize deployment based on predictions\n                local strategy = optimization.recommend_strategy({\n                    predicted_duration = prediction.expected_duration,\n                    available_resources = system.get_resources(),\n                    priority_level = params.priority or \"normal\"\n                })\n\n                return exec.run_optimized(\"kubectl apply -f production.yaml\", strategy)\n            end)\n            :build()\n    }\n})\n</code></pre>"},{"location":"en/ai-features/#adaptive-resource-management","title":"Adaptive Resource Management","text":"<pre><code>local adaptive = require(\"adaptive\")\nlocal monitoring = require(\"monitoring\")\n\n-- Self-adjusting resource allocation\nlocal adaptive_pipeline = task(\"adaptive_processing\")\n    :command(function(params, deps)\n        -- Monitor current system load\n        local system_load = monitoring.get_system_metrics()\n\n        -- Adapt execution strategy based on load\n        local strategy = adaptive.calculate_strategy({\n            cpu_usage = system_load.cpu_percent,\n            memory_usage = system_load.memory_percent,\n            network_load = system_load.network_throughput,\n            historical_data = analytics.get_historical_load(24) -- 24 hours\n        })\n\n        -- Execute with adaptive parameters\n        return exec.run_with_strategy(\"./heavy-processing-task.sh\", {\n            parallelism = strategy.recommended_parallelism,\n            memory_limit = strategy.memory_allocation,\n            timeout = strategy.estimated_timeout,\n            retry_strategy = strategy.retry_config\n        })\n    end)\n    :build()\n</code></pre>"},{"location":"en/ai-features/#intelligent-error-handling","title":"Intelligent Error Handling","text":"<pre><code>local recovery = require(\"recovery\")\nlocal patterns = require(\"patterns\")\n\n-- Self-healing workflow with intelligent recovery\nworkflow.define(\"resilient_pipeline\", {\n    error_recovery = \"intelligent\",\n    learning_enabled = true,\n\n    on_task_failure = function(task_name, error, context)\n        -- Analyze failure pattern\n        local failure_analysis = patterns.analyze_failure({\n            task = task_name,\n            error = error,\n            context = context,\n            historical_failures = analytics.get_failure_history(task_name, 90)\n        })\n\n        -- Determine recovery strategy\n        local recovery_plan = recovery.generate_plan(failure_analysis)\n\n        log.info(\"Failure detected in \" .. task_name .. \": \" .. error.message)\n        log.info(\"Recovery strategy: \" .. recovery_plan.strategy)\n\n        if recovery_plan.auto_recoverable then\n            -- Attempt automatic recovery\n            local recovery_result = recovery.execute_plan(recovery_plan)\n\n            if recovery_result.success then\n                log.info(\"\u2705 Automatic recovery successful\")\n                return \"retry\"\n            else\n                log.error(\"\u274c Automatic recovery failed: \" .. recovery_result.error)\n                return \"fail\"\n            end\n        else\n            -- Manual intervention required\n            recovery.request_manual_intervention({\n                task = task_name,\n                error = error,\n                suggested_actions = recovery_plan.manual_steps\n            })\n            return \"pause\"\n        end\n    end,\n\n    tasks = {\n        task(\"database_migration\")\n            :command(\"./migrate-database.sh\")\n            :retry_strategy(\"intelligent\")\n            :build(),\n\n        task(\"service_deployment\")\n            :command(\"kubectl rollout deployment myapp\")\n            :health_check(function()\n                return monitoring.check_service_health(\"myapp\")\n            end)\n            :rollback_on_failure(true)\n            :build()\n    }\n})\n</code></pre>"},{"location":"en/ai-features/#performance-optimization","title":"Performance Optimization","text":"<pre><code>local optimizer = require(\"optimizer\")\nlocal profiler = require(\"profiler\")\n\n-- Continuous performance optimization\nlocal optimization_task = task(\"performance_optimization\")\n    :command(function(params, deps)\n        -- Profile current performance\n        local profile = profiler.analyze_workflow_performance({\n            workflow_id = params.workflow_id,\n            time_window = \"7d\",\n            metrics = {\"execution_time\", \"resource_usage\", \"error_rate\"}\n        })\n\n        -- Generate optimization recommendations\n        local recommendations = optimizer.analyze_performance(profile)\n\n        log.info(\"Performance Analysis Complete:\")\n        log.info(\"Average execution time: \" .. profile.avg_execution_time .. \"s\")\n        log.info(\"Resource efficiency: \" .. profile.resource_efficiency .. \"%\")\n        log.info(\"Error rate: \" .. profile.error_rate .. \"%\")\n\n        -- Apply optimizations if confidence is high\n        for _, rec in ipairs(recommendations) do\n            if rec.confidence &gt; 0.8 and rec.impact == \"high\" then\n                log.info(\"Applying optimization: \" .. rec.description)\n                optimizer.apply_optimization(rec)\n            else\n                log.info(\"Optimization suggestion: \" .. rec.description .. \" (confidence: \" .. rec.confidence .. \")\")\n            end\n        end\n\n        return {\n            optimizations_applied = #recommendations,\n            expected_improvement = optimizer.calculate_improvement(recommendations)\n        }\n    end)\n    :schedule(\"daily\")\n    :build()\n</code></pre>"},{"location":"en/ai-features/#analytics-dashboard-integration","title":"\ud83d\udcca Analytics Dashboard Integration","text":""},{"location":"en/ai-features/#real-time-analytics","title":"Real-time Analytics","text":"<pre><code>local dashboard = require(\"dashboard\")\nlocal realtime = require(\"realtime\")\n\n-- Real-time analytics dashboard\ndashboard.create_panel(\"workflow_intelligence\", {\n    title = \"Intelligent Workflow Analytics\",\n    refresh_interval = \"30s\",\n\n    widgets = {\n        {\n            type = \"prediction_chart\",\n            title = \"Performance Predictions\",\n            data_source = function()\n                return analytics.get_predictions({\n                    metrics = {\"execution_time\", \"success_rate\", \"resource_usage\"},\n                    forecast_days = 7\n                })\n            end\n        },\n\n        {\n            type = \"optimization_summary\",\n            title = \"Optimization Opportunities\",\n            data_source = function()\n                return optimizer.get_opportunities({\n                    priority = \"high\",\n                    confidence_threshold = 0.7\n                })\n            end\n        },\n\n        {\n            type = \"anomaly_detector\",\n            title = \"Detected Anomalies\",\n            data_source = function()\n                return analytics.detect_anomalies({\n                    time_window = \"24h\",\n                    sensitivity = \"medium\"\n                })\n            end\n        }\n    }\n})\n</code></pre>"},{"location":"en/ai-features/#configuration-options","title":"\ud83d\udd27 Configuration Options","text":""},{"location":"en/ai-features/#analytics-configuration","title":"Analytics Configuration","text":"<pre><code># sloth-runner.yaml\nanalytics:\n  enabled: true\n  data_retention: \"90d\"\n  prediction_models:\n    - execution_time\n    - resource_usage\n    - failure_probability\n\noptimization:\n  enabled: true\n  auto_apply_threshold: 0.8\n  learning_rate: 0.1\n\nmonitoring:\n  anomaly_detection: true\n  baseline_period: \"30d\"\n  alert_thresholds:\n    performance_degradation: 20%\n    error_rate_increase: 5%\n</code></pre>"},{"location":"en/ai-features/#benefits","title":"\ud83d\udcc8 Benefits","text":""},{"location":"en/ai-features/#operational-benefits","title":"Operational Benefits","text":"<ul> <li>Reduced Downtime: Predictive analytics help prevent failures before they occur</li> <li>Improved Performance: Continuous optimization leads to better resource utilization</li> <li>Lower Costs: Efficient resource usage reduces infrastructure costs</li> <li>Better Reliability: Self-healing capabilities improve overall system reliability</li> </ul>"},{"location":"en/ai-features/#developer-benefits","title":"Developer Benefits","text":"<ul> <li>Less Maintenance: Intelligent automation reduces manual intervention</li> <li>Faster Debugging: Anomaly detection helps identify issues quickly</li> <li>Data-Driven Decisions: Analytics provide insights for infrastructure improvements</li> <li>Continuous Learning: System improves over time without manual tuning</li> </ul>"},{"location":"en/ai-features/#next-steps","title":"\ud83d\ude80 Next Steps","text":"<ol> <li>Enable Analytics: Start by enabling basic analytics in your workflows</li> <li>Monitor Patterns: Observe workflow patterns and performance metrics</li> <li>Apply Optimizations: Implement recommended optimizations gradually</li> <li>Expand Coverage: Add analytics to more critical workflows</li> <li>Custom Models: Develop custom prediction models for specific use cases</li> </ol>"},{"location":"en/ai-features/#related-documentation","title":"\ud83d\udcda Related Documentation","text":"<ul> <li>Monitoring &amp; Metrics</li> <li>State Management</li> <li>Performance Tuning</li> <li>Error Handling</li> <li>Advanced Examples</li> </ul>"},{"location":"en/contributing/","title":"\ud83e\udd1d Contributing to Sloth Runner","text":"<p>Thank you for your interest in contributing to Sloth Runner! </p> <p>We welcome contributions from developers of all skill levels. Whether you're fixing bugs, adding features, improving documentation, or creating plugins, your help makes Sloth Runner better for everyone.</p>"},{"location":"en/contributing/#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"en/contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Go 1.21+ for core development</li> <li>Node.js 18+ for UI development  </li> <li>Lua 5.4+ for DSL development</li> <li>Git for version control</li> </ul>"},{"location":"en/contributing/#development-setup","title":"Development Setup","text":"<pre><code># Clone the repository\ngit clone https://github.com/chalkan3-sloth/sloth-runner.git\ncd sloth-runner\n\n# Install dependencies\ngo mod download\nnpm install  # for UI components\n\n# Run tests\nmake test\n\n# Build the project\nmake build\n</code></pre>"},{"location":"en/contributing/#ways-to-contribute","title":"\ud83d\udccb Ways to Contribute","text":""},{"location":"en/contributing/#bug-reports","title":"\ud83d\udc1b Bug Reports","text":"<p>Found a bug? Please help us fix it:</p> <ol> <li>Search existing issues to avoid duplicates</li> <li>Use our bug report template with:</li> <li>Sloth Runner version</li> <li>Operating system</li> <li>Steps to reproduce</li> <li>Expected vs actual behavior</li> <li>Error logs (if any)</li> </ol>"},{"location":"en/contributing/#feature-requests","title":"\ud83d\udca1 Feature Requests","text":"<p>Have an idea for improvement?</p> <ol> <li>Check the roadmap for planned features</li> <li>Open a feature request with:</li> <li>Clear description of the feature</li> <li>Use cases and benefits</li> <li>Possible implementation approach</li> </ol>"},{"location":"en/contributing/#code-contributions","title":"\ud83d\udd27 Code Contributions","text":"<p>Ready to code? Here's how:</p> <ol> <li>Fork the repository</li> <li>Create a feature branch (<code>git checkout -b feature/amazing-feature</code>)</li> <li>Make your changes following our coding standards</li> <li>Add tests for new functionality</li> <li>Update documentation if needed</li> <li>Commit with clear messages</li> <li>Push and create a Pull Request</li> </ol>"},{"location":"en/contributing/#documentation","title":"\ud83d\udcda Documentation","text":"<p>Help improve our docs:</p> <ul> <li>Fix typos and unclear explanations</li> <li>Add examples and tutorials</li> <li>Translate content to other languages</li> <li>Update API documentation</li> </ul>"},{"location":"en/contributing/#plugin-development","title":"\ud83d\udd0c Plugin Development","text":"<p>Create plugins for the community:</p> <ul> <li>Follow our Plugin Development Guide</li> <li>Submit to the plugin registry</li> <li>Maintain compatibility with core versions</li> </ul>"},{"location":"en/contributing/#development-guidelines","title":"\ud83d\udcd0 Development Guidelines","text":""},{"location":"en/contributing/#code-style","title":"Code Style","text":""},{"location":"en/contributing/#go-code","title":"Go Code","text":"<p>Follow standard Go conventions:</p> <pre><code>// Good: Clear function names and comments\nfunc ProcessWorkflowTasks(ctx context.Context, workflow *Workflow) error {\n    if workflow == nil {\n        return fmt.Errorf(\"workflow cannot be nil\")\n    }\n\n    for _, task := range workflow.Tasks {\n        if err := processTask(ctx, task); err != nil {\n            return fmt.Errorf(\"failed to process task %s: %w\", task.ID, err)\n        }\n    }\n\n    return nil\n}\n</code></pre>"},{"location":"en/contributing/#lua-dsl","title":"Lua DSL","text":"<p>Keep DSL code clean and readable:</p> <pre><code>-- Good: Clear task definition with proper chaining\nlocal deploy_task = task(\"deploy_application\")\n    :description(\"Deploy the application to production\")\n    :command(function(params, deps)\n        local result = exec.run(\"kubectl apply -f deployment.yaml\")\n        if not result.success then\n            log.error(\"Deployment failed: \" .. result.stderr)\n            return false\n        end\n        return true\n    end)\n    :timeout(300)\n    :retries(3)\n    :build()\n</code></pre>"},{"location":"en/contributing/#typescriptjavascript","title":"TypeScript/JavaScript","text":"<p>For UI components:</p> <pre><code>// Good: Proper typing and error handling\ninterface TaskResult {\n  id: string;\n  status: 'success' | 'failed' | 'running';\n  duration: number;\n}\n\nexport const TaskStatusCard: React.FC&lt;{ result: TaskResult }&gt; = ({ result }) =&gt; {\n  const statusColor = result.status === 'success' ? 'green' : \n                     result.status === 'failed' ? 'red' : 'blue';\n\n  return (\n    &lt;div className={`task-card status-${result.status}`}&gt;\n      &lt;h3&gt;{result.id}&lt;/h3&gt;\n      &lt;span style={{ color: statusColor }}&gt;{result.status}&lt;/span&gt;\n      &lt;small&gt;{result.duration}ms&lt;/small&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"en/contributing/#testing-standards","title":"Testing Standards","text":""},{"location":"en/contributing/#unit-tests","title":"Unit Tests","text":"<p>Write tests for all new functionality:</p> <pre><code>func TestProcessWorkflowTasks(t *testing.T) {\n    tests := []struct {\n        name     string\n        workflow *Workflow\n        wantErr  bool\n    }{\n        {\n            name:     \"nil workflow should return error\",\n            workflow: nil,\n            wantErr:  true,\n        },\n        {\n            name: \"valid workflow should process successfully\",\n            workflow: &amp;Workflow{\n                Tasks: []*Task{{ID: \"test-task\"}},\n            },\n            wantErr: false,\n        },\n    }\n\n    for _, tt := range tests {\n        t.Run(tt.name, func(t *testing.T) {\n            err := ProcessWorkflowTasks(context.Background(), tt.workflow)\n            if (err != nil) != tt.wantErr {\n                t.Errorf(\"ProcessWorkflowTasks() error = %v, wantErr %v\", err, tt.wantErr)\n            }\n        })\n    }\n}\n</code></pre>"},{"location":"en/contributing/#integration-tests","title":"Integration Tests","text":"<p>Test real-world scenarios:</p> <pre><code># Run integration tests\nmake test-integration\n\n# Test with different configurations\nmake test-configs\n</code></pre>"},{"location":"en/contributing/#documentation-standards","title":"Documentation Standards","text":"<ul> <li>Keep it simple - Use clear, concise language</li> <li>Include examples - Show don't just tell</li> <li>Update with changes - Keep docs in sync with code</li> <li>Test examples - Ensure all code examples work</li> </ul>"},{"location":"en/contributing/#pull-request-process","title":"\ud83d\udd04 Pull Request Process","text":""},{"location":"en/contributing/#before-submitting","title":"Before Submitting","text":"<ul> <li> Run tests - <code>make test</code></li> <li> Run linting - <code>make lint</code></li> <li> Update docs - If adding/changing features</li> <li> Add changelog entry - In <code>CHANGELOG.md</code></li> <li> Check compatibility - With existing features</li> </ul>"},{"location":"en/contributing/#pr-template","title":"PR Template","text":"<p>Use our pull request template:</p> <pre><code>## Description\nBrief description of changes\n\n## Type of Change\n- [ ] Bug fix\n- [ ] New feature\n- [ ] Breaking change\n- [ ] Documentation update\n\n## Testing\n- [ ] Unit tests added/updated\n- [ ] Integration tests pass\n- [ ] Manual testing completed\n\n## Checklist\n- [ ] Code follows style guidelines\n- [ ] Documentation updated\n- [ ] Changelog updated\n</code></pre>"},{"location":"en/contributing/#review-process","title":"Review Process","text":"<ol> <li>Automated checks run on all PRs</li> <li>Maintainer review for code quality and design</li> <li>Community feedback welcomed on all PRs</li> <li>Approval and merge by maintainers</li> </ol>"},{"location":"en/contributing/#project-structure","title":"\ud83c\udfd7\ufe0f Project Structure","text":"<p>Understanding the codebase:</p> <pre><code>sloth-runner/\n\u251c\u2500\u2500 cmd/                    # CLI commands\n\u251c\u2500\u2500 internal/              # Internal packages\n\u2502   \u251c\u2500\u2500 core/             # Core business logic\n\u2502   \u251c\u2500\u2500 dsl/              # DSL implementation\n\u2502   \u251c\u2500\u2500 execution/        # Task execution engine\n\u2502   \u2514\u2500\u2500 plugins/          # Plugin system\n\u251c\u2500\u2500 pkg/                   # Public packages\n\u251c\u2500\u2500 plugins/              # Built-in plugins\n\u251c\u2500\u2500 docs/                 # Documentation\n\u251c\u2500\u2500 web/                  # Web UI components\n\u2514\u2500\u2500 examples/             # Example workflows\n</code></pre>"},{"location":"en/contributing/#contribution-areas","title":"\ud83c\udfaf Contribution Areas","text":""},{"location":"en/contributing/#high-priority","title":"High Priority","text":"<ul> <li>\ud83d\udc1b Bug fixes - Always welcome</li> <li>\ud83d\udcc8 Performance improvements - Optimization opportunities</li> <li>\ud83e\uddea Test coverage - Increase test coverage</li> <li>\ud83d\udcda Documentation - Keep docs comprehensive</li> </ul>"},{"location":"en/contributing/#medium-priority","title":"Medium Priority","text":"<ul> <li>\u2728 New features - Following roadmap priorities</li> <li>\ud83d\udd0c Plugin ecosystem - More plugins and integrations</li> <li>\ud83c\udfa8 UI improvements - Better user experience</li> </ul>"},{"location":"en/contributing/#future-areas","title":"Future Areas","text":"<ul> <li>\ud83e\udd16 AI enhancements - Advanced ML capabilities  </li> <li>\u2601\ufe0f Cloud integrations - More cloud provider support</li> <li>\ud83d\udcca Analytics - Better insights and reporting</li> </ul>"},{"location":"en/contributing/#recognition","title":"\ud83c\udfc6 Recognition","text":"<p>Contributors are recognized in:</p> <ul> <li>CONTRIBUTORS.md - All contributors listed</li> <li>Release notes - Major contributions highlighted</li> <li>Community showcase - Featured contributions</li> <li>Contributor badges - GitHub profile recognition</li> </ul>"},{"location":"en/contributing/#getting-help","title":"\ud83d\udcde Getting Help","text":""},{"location":"en/contributing/#development-questions","title":"Development Questions","text":"<ul> <li>\ud83d\udcac Discord - <code>#development</code> channel</li> <li>\ud83d\udce7 Mailing List - dev@sloth-runner.io</li> <li>\ud83d\udcd6 Wiki - Development guides and FAQs</li> </ul>"},{"location":"en/contributing/#mentorship","title":"Mentorship","text":"<p>New to open source? We offer mentorship:</p> <ul> <li>\ud83d\udc65 Mentor matching - Paired with experienced contributors</li> <li>\ud83d\udcda Learning resources - Curated learning materials</li> <li>\ud83c\udfaf Guided contributions - Starter-friendly issues</li> </ul>"},{"location":"en/contributing/#code-of-conduct","title":"\ud83d\udcdc Code of Conduct","text":"<p>We are committed to providing a welcoming and inclusive environment. Please read our Code of Conduct.</p>"},{"location":"en/contributing/#our-standards","title":"Our Standards","text":"<ul> <li>\ud83e\udd1d Be respectful - Treat everyone with respect</li> <li>\ud83d\udca1 Be constructive - Provide helpful feedback</li> <li>\ud83c\udf0d Be inclusive - Welcome diverse perspectives</li> <li>\ud83d\udcda Be patient - Help others learn and grow</li> </ul>"},{"location":"en/contributing/#release-process","title":"\ud83d\ude80 Release Process","text":"<p>Understanding our releases:</p> <ul> <li>\ud83d\udd04 Continuous Integration - Automated testing and building</li> <li>\ud83d\udcc5 Regular Releases - Monthly feature releases</li> <li>\ud83d\udea8 Hotfixes - Critical bugs fixed immediately</li> <li>\ud83d\udcca Semantic Versioning - Clear version numbering</li> </ul>"},{"location":"en/contributing/#roadmap-participation","title":"\ud83d\udcc8 Roadmap Participation","text":"<p>Help shape the future:</p> <ul> <li>\ud83d\udccb Feature Planning - Participate in roadmap discussions</li> <li>\ud83d\uddf3\ufe0f Voting - Vote on feature priorities</li> <li>\ud83d\udcad RFC Process - Propose major changes through RFCs</li> </ul> <p>Ready to contribute? </p> <p>Start by exploring our Good First Issues or join our Discord community to introduce yourself!</p> <p>Thank you for helping make Sloth Runner better! \ud83e\udda5\u2728</p>"},{"location":"en/core-concepts/","title":"Core Concepts - Modern DSL","text":"<p>This document explains the fundamental concepts of <code>sloth-runner</code> using the Modern DSL, helping you understand how to define and orchestrate complex workflows with the new fluent API.</p>"},{"location":"en/core-concepts/#modern-dsl-overview","title":"Modern DSL Overview","text":"<p>The Modern DSL provides an intuitive, fluent API for defining workflows. You can use chainable methods to build tasks and define workflows declaratively.</p> <pre><code>-- my_pipeline.sloth - Modern DSL\nlocal my_task = task(\"task_name\")\n    :description(\"Task description\")\n    :command(function() ... end)\n    :build()\n\nworkflow.define(\"workflow_name\", {\n    description = \"Workflow description - Modern DSL\",\n    tasks = { my_task }\n})\n</code></pre>"},{"location":"en/core-concepts/#task-definition-with-modern-dsl","title":"Task Definition with Modern DSL","text":"<p>Tasks are now defined using the <code>task()</code> function and fluent API methods:</p>"},{"location":"en/core-concepts/#basic-task-structure","title":"Basic Task Structure","text":"<pre><code>local my_task = task(\"task_name\")\n    :description(\"What this task does\")\n    :command(function(params, deps)\n        -- Task logic here\n        return true, \"Success message\", { output_data = \"value\" }\n    end)\n    :timeout(\"5m\")\n    :retries(3, \"exponential\")\n    :build()\n</code></pre>"},{"location":"en/core-concepts/#task-builder-methods","title":"Task Builder Methods","text":"<p>Core Properties: *   <code>:description(string)</code> - Human-readable task description *   <code>:command(function|string)</code> - Task execution logic *   <code>:timeout(string)</code> - Maximum execution time (e.g., \"10s\", \"5m\", \"1h\") *   <code>:retries(number, strategy)</code> - Retry configuration with strategy (\"exponential\", \"linear\", \"fixed\") *   <code>:depends_on(array)</code> - Array of task names this task depends on</p> <p>Advanced Features: *   <code>:async(boolean)</code> - Enable asynchronous execution *   <code>:artifacts(array)</code> - Files to save after successful execution *   <code>:consumes(array)</code> - Artifacts from other tasks to use *   <code>:run_if(function|string)</code> - Conditional execution logic *   <code>:abort_if(function|string)</code> - Condition to abort entire workflow</p> <p>Lifecycle Hooks: *   <code>:on_success(function)</code> - Execute when task succeeds *   <code>:on_failure(function)</code> - Execute when task fails *   <code>:on_timeout(function)</code> - Execute when task times out *   <code>:pre_hook(function)</code> - Execute before main command *   <code>:post_hook(function)</code> - Execute after main command</p> <p>Example: <pre><code>-- Define a workflow with workdir management\nworkflow\n  .define(\"my_workflow\")\n  :description(\"A workflow that manages its own temporary directory\")\n  :config({\n    workdir = \"/tmp/my_workflow\",\n    cleanup = \"on_success\"  -- or \"always\", \"never\"\n  })\n  :tasks({\n    task(\"setup\")\n      :description(\"Setup task\")\n      :command(function()\n        print(\"Setting up...\")\n        return true\n      end)\n      :build()\n  })\n\n---\n\n## Individual Tasks\n\nA task is a single unit of work. It's defined as a table with several available properties to control its behavior.\n\n### Basic Properties\n\n*   `name` (string): The unique name of the task within its group.\n*   `description` (string): A brief description of what the task does.\n*   `command` (string or function): The core action of the task.\n    *   **As a string:** It's executed as a shell command.\n    *   **As a function:** The Lua function is executed. It receives two arguments: `params` (a table of its parameters) and `deps` (a table containing the outputs of its dependencies). The function must return:\n        1.  `boolean`: `true` for success, `false` for failure.\n        2.  `string`: A message describing the result.\n        3.  `table` (optional): A table of outputs that other tasks can depend on.\n\n### Dependency and Execution Flow\n\n*   `depends_on` (string or table): A list of task names that must complete successfully before this task can run.\n*   `next_if_fail` (string or table): A list of task names to run *only if* this task fails. This is useful for cleanup or notification tasks.\n*   `async` (boolean): If `true`, the task runs in the background, and the runner does not wait for it to complete before starting the next task in the execution order.\n\n### Error Handling and Robustness\n\n*   `retries` (number): The number of times to retry a task if it fails. Default is `0`.\n*   `timeout` (string): A duration (e.g., `\"10s\"`, `\"1m\"`) after which the task will be terminated if it's still running.\n\n### Conditional Execution\n\n*   `run_if` (string or function): The task will be skipped unless this condition is met.\n    *   **As a string:** A shell command. An exit code of `0` means the condition is met.\n    *   **As a function:** A Lua function that returns `true` if the task should run.\n*   `abort_if` (string or function): The entire workflow will be aborted if this condition is met.\n    *   **As a string:** A shell command. An exit code of `0` means abort.\n    *   **As a function:** A Lua function that returns `true` to abort.\n\n### Lifecycle Hooks\n\n*   `pre_exec` (function): A Lua function that runs *before* the main `command`.\n*   `post_exec` (function): A Lua function that runs *after* the main `command` has completed successfully.\n\n### Reusability\n\n*   `uses` (table): Specifies a pre-defined task from another file (loaded via `import`) to use as a base. The current task definition can then override properties like `params` or `description`.\n*   `params` (table): A dictionary of key-value pairs that can be passed to the task's `command` function.\n*   `artifacts` (string or table): A file pattern (glob) or a list of patterns specifying which files from the task's `workdir` should be saved as artifacts after a successful run.\n*   `consumes` (string or table): The name of an artifact (or a list of names) from a previous task that should be copied into this task's `workdir` before it runs.\n\n---\n\n## Artifact Management\n\nSloth-Runner allows tasks to share files with each other through an artifact mechanism. One task can \"produce\" one or more files as artifacts, and subsequent tasks can \"consume\" those artifacts.\n\nThis is useful for CI/CD pipelines where a build step might generate a binary (the artifact), which is then used by a testing or deployment step.\n\n### How It Works\n\n1.  **Producing Artifacts:** Add the `artifacts` key to your task definition. The value can be a single file pattern (e.g., `\"report.txt\"`) or a list (e.g., `{\"*.log\", \"app.bin\"}`). After the task runs successfully, the runner will find files in the task's `workdir` matching these patterns and copy them to a shared artifact storage for the pipeline.\n\n2.  **Consuming Artifacts:** Add the `consumes` key to another task's definition (which typically `depends_on` the producer task). The value should be the filename of the artifact you want to use (e.g., `\"report.txt\"`). Before this task runs, the runner will copy the named artifact from the shared storage into this task's `workdir`, making it available to the `command`.\n\n### Artifacts Example\n\n```lua\nModern DSLs = {\n  [\"ci-pipeline\"] = {\n    description = \"Demonstrates the use of artifacts.\",\n    create_workdir_before_run = true,\n    tasks = {\n      {\n        name = \"build\",\n        description = \"Creates a binary and declares it as an artifact.\",\n        command = \"echo 'binary_content' &gt; app.bin\",\n        artifacts = {\"app.bin\"}\n      },\n      {\n        name = \"test\",\n        description = \"Consumes the binary to run tests.\",\n        depends_on = \"build\",\n        consumes = {\"app.bin\"},\n        command = function(params)\n          -- At this point, 'app.bin' exists in this task's workdir\n          local content, err = fs.read(params.workdir .. \"/app.bin\")\n          if content == \"binary_content\" then\n            log.info(\"Successfully consumed artifact!\")\n            return true\n          else\n            return false, \"Artifact content was incorrect!\"\n          end\n        end\n      }\n    }\n  }\n}\n</code></pre></p>"},{"location":"en/core-concepts/#global-functions","title":"Global Functions","text":"<p><code>sloth-runner</code> provides global functions in the Lua environment to help orchestrate workflows.</p>"},{"location":"en/core-concepts/#importpath","title":"<code>import(path)</code>","text":"<p>Loads another sloth file and returns the value it returns. This is the primary mechanism for creating reusable task modules. The path is relative to the file calling <code>import</code>.</p> <p>Example (<code>reusable_tasks.sloth</code>): <pre><code>-- Import a module that returns a table of task definitions\nlocal docker_tasks = import(\"shared/docker.sloth\")\n\nModern DSLs = {\n  main = {\n    tasks = {\n      {\n        -- Use the 'build' task from the imported module\n        uses = docker_tasks.build,\n        params = { image_name = \"my-app\" }\n      }\n    }\n  }\n}\n</code></pre></p>"},{"location":"en/core-concepts/#paralleltasks","title":"<code>parallel(tasks)</code>","text":"<p>Executes a list of tasks concurrently and waits for all of them to complete.</p> <ul> <li><code>tasks</code> (table): A list of task tables to run in parallel.</li> </ul> <p>Example: <pre><code>command = function()\n  log.info(\"Starting 3 tasks in parallel...\")\n  local results, err = parallel({\n    { name = \"short_task\", command = \"sleep 1\" },\n    { name = \"medium_task\", command = \"sleep 2\" },\n    { name = \"long_task\", command = \"sleep 3\" }\n  })\n  if err then\n    return false, \"Parallel execution failed\"\n  end\n  return true, \"All parallel tasks finished.\"\nend\n</code></pre></p>"},{"location":"en/core-concepts/#exporttable","title":"<code>export(table)</code>","text":"<p>Exports data from any point in a script to the CLI. When the <code>--return</code> flag is used, all exported tables are merged with the final task's output into a single JSON object.</p> <ul> <li><code>table</code>: A Lua table to be exported.</li> </ul> <p>Example: <pre><code>command = function()\n  export({ important_value = \"data from the middle of a task\" })\n  return true, \"Task done\", { final_output = \"some result\" }\nend\n</code></pre> Running with <code>--return</code> would produce: <pre><code>{\n  \"important_value\": \"data from the middle of a task\",\n  \"final_output\": \"some result\"\n}\n</code></pre></p>"},{"location":"en/distributed/","title":"Distributed Task Execution","text":"<p><code>sloth-runner</code> supports distributed task execution, allowing you to run tasks on remote agents. This enables scalable and distributed workflows, where different parts of your pipeline can be executed on different machines.</p>"},{"location":"en/distributed/#how-it-works","title":"How it Works","text":"<p>The distributed execution model in <code>sloth-runner</code> follows a master-agent architecture:</p> <ol> <li>Master: The main <code>sloth-runner</code> instance acts as the master. It parses the workflow definition, identifies tasks configured to run on remote agents, and dispatches them.</li> <li>Agent: A <code>sloth-runner</code> instance running in <code>agent</code> mode on a remote machine. It listens for incoming task execution requests from the master, executes the tasks, and sends back the results.</li> </ol>"},{"location":"en/distributed/#configuring-remote-tasks","title":"Configuring Remote Tasks","text":"<p>To run a task on a remote agent, you need to specify the <code>delegate_to</code> field in either the task group or the individual task definition.</p>"},{"location":"en/distributed/#1-delegate-to-an-agent-at-the-task-group-level","title":"1. Delegate to an Agent at the Task Group Level","text":"<p>You can define the agent directly within your <code>Modern DSLs</code> group using the <code>delegate_to</code> field. All tasks within this group will then be delegated to this agent unless overridden by a task-specific <code>delegate_to</code>.</p> <pre><code>Modern DSLs = {\n  my_distributed_group = {\n    description = \"A task group with distributed tasks.\",\n    delegate_to = { address = \"localhost:50051\" }, -- Define the agent for the entire group\n    tasks = {\n      {\n        name = \"remote_hello\",\n        description = \"Runs a hello world task on a remote agent.\",\n        -- No 'delegate_to' field needed here, it inherits from the group\n        command = function(params)\n          log.info(\"Hello from remote agent!\")\n          return true, \"Remote task executed.\"\n        end\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"en/distributed/#2-delegate-to-an-agent-at-the-task-level","title":"2. Delegate to an Agent at the Task Level","text":"<p>Alternatively, you can specify the <code>delegate_to</code> field directly on an individual task. This will override any group-level delegation or allow for ad-hoc remote execution.</p> <pre><code>Modern DSLs = {\n  my_group = {\n    description = \"A task group with a specific remote task.\",\n    tasks = {\n      {\n        name = \"specific_remote_task\",\n        description = \"Runs this task on a specific remote agent.\",\n        delegate_to = { address = \"192.168.1.100:50051\" }, -- Define agent for this task only\n        command = function(params)\n          log.info(\"Hello from a specific remote agent!\")\n          return true, \"Specific remote task executed.\"\n        end\n      },\n      {\n        name = \"local_task\",\n        description = \"This task runs locally.\",\n        command = \"echo 'Hello from local machine!'\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"en/distributed/#running-an-agent","title":"Running an Agent","text":"<p>To start a <code>sloth-runner</code> instance in agent mode, use the <code>agent</code> command:</p> <pre><code>sloth-runner agent -p 50051\n</code></pre> <ul> <li><code>-p, --port</code>: Specifies the port the agent should listen on. Defaults to <code>50051</code>.</li> </ul> <p>When an agent starts, it will listen for incoming gRPC requests from the master <code>sloth-runner</code> instance. Upon receiving a task, it will execute it in its local environment and return the result, along with any updated workspace files, back to the master.</p>"},{"location":"en/distributed/#workspace-synchronization","title":"Workspace Synchronization","text":"<p>When a task is dispatched to a remote agent, <code>sloth-runner</code> automatically handles the synchronization of the task's workspace:</p> <ol> <li>Master to Agent: The master creates a tarball of the current task's working directory and sends it to the agent.</li> <li>Agent Execution: The agent extracts the tarball into a temporary directory, executes the task within that directory, and any changes made to the files in the temporary directory are captured.</li> <li>Agent to Master: After task completion, the agent creates a tarball of the modified temporary directory and sends it back to the master. The master then extracts this tarball, updating its local workspace with any changes made by the remote task.</li> </ol> <p>This ensures that remote tasks have access to all necessary files and that any modifications they make are reflected back in the main workflow.</p>"},{"location":"en/enhanced-agent-output/","title":"Enhanced <code>sloth-runner agent run</code> Output","text":""},{"location":"en/enhanced-agent-output/#purpose","title":"Purpose","text":"<p>This feature significantly improves the visual presentation and informational content of the <code>sloth-runner agent run</code> command's output. Previously, the output was a plain text dump, making it difficult to quickly ascertain the status and details of remote command executions. The enhancement aims to provide a more elegant, colorful, and robust user experience by leveraging the <code>pterm</code> library for terminal output.</p> <p>The primary goals of this enhancement are: *   Clarity: Clearly distinguish between successful and failed command executions. *   Readability: Present information in a structured and easy-to-digest format. *   Expressiveness: Utilize colors and visual elements to convey status and highlight important details. *   Completeness: Ensure all relevant information (command, stdout, stderr, error messages) is presented comprehensively.</p>"},{"location":"en/enhanced-agent-output/#usage","title":"Usage","text":"<p>The usage of the <code>sloth-runner agent run</code> command remains the same. You execute it from your local machine (where the master is running) to instruct a registered agent to execute a shell command.</p> <pre><code>go run ./cmd/sloth-runner agent run &lt;agent_name&gt; '&lt;command_to_execute&gt;'\n</code></pre> <ul> <li><code>&lt;agent_name&gt;</code>: The name of the agent registered with the master (e.g., <code>agent1</code>, <code>agent2</code>).</li> <li><code>&lt;command_to_execute&gt;</code>: The shell command you want the agent to execute. Ensure proper quoting to prevent your local shell from interpreting the command before it reaches the agent.</li> </ul>"},{"location":"en/enhanced-agent-output/#output-style","title":"Output Style","text":"<p>The enhanced output now utilizes <code>pterm.DefaultBox</code> to encapsulate the command execution results, providing a clear visual boundary. Different colors and prefixes are used to indicate success or failure, and sections for the command, standard output, and standard error are clearly delineated.</p>"},{"location":"en/enhanced-agent-output/#successful-command-execution","title":"Successful Command Execution","text":"<p>Upon successful execution of a command on a remote agent, the output will be presented within a green-bordered box, with a <code>SUCCESS</code> title. It will clearly state that the command was successful, show the executed command, and display any <code>Stdout</code> content.</p> <p>Example Command: <pre><code>go run ./cmd/sloth-runner agent run agent1 'echo \"Hello from agent1 on $(hostname)\"'\n</code></pre></p> <p>Example Output: <pre><code>\u250c\u2500  SUCCESS  Command Execution Result on agent1 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n|  SUCCESS  Command executed successfully!                |\n|  INFO  Command: echo \"Hello from agent1 on $(hostname)\" |\n| # Stdout:                                               |\n| Hello from agent1 on ladyguica                          |\n|                                                         |\n|                                                         |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p>"},{"location":"en/enhanced-agent-output/#failed-command-execution","title":"Failed Command Execution","text":"<p>In the event of a command failing on a remote agent, the output will be presented within a red-bordered box, with an <code>ERROR</code> title. It will clearly indicate that the command failed, show the executed command, and display any <code>Stdout</code>, <code>Stderr</code>, and the specific <code>Error</code> message returned by the agent.</p> <p>Example Command (Hypothetical Failure): <pre><code>go run ./cmd/sloth-runner agent run agent1 'non_existent_command'\n</code></pre></p> <p>Example Output (Hypothetical): <pre><code>\u250c\u2500  ERROR  Command Execution Result on agent1 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n|  ERROR  Command failed on agent1!                     |\n|  INFO  Command: non_existent_command                  |\n| # Stderr:                                             |\n| bash: non_existent_command: command not found         |\n| # Error:                                              |\n| exit status 127                                       |\n|                                                       |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p> <p>This enhanced output ensures that users receive immediate, clear, and visually distinct feedback on the status of their remote agent commands, significantly improving the debugging and monitoring experience.</p>"},{"location":"en/enterprise-features/","title":"\ud83c\udfe2 Enterprise Features","text":"<p>Production-Grade Automation Platform Sloth Runner provides enterprise-grade reliability, security, and scalability for mission-critical automation workflows.</p>"},{"location":"en/enterprise-features/#enterprise-grade-foundation","title":"\ud83c\udf1f Enterprise-Grade Foundation","text":""},{"location":"en/enterprise-features/#ai-powered-intelligence-unique-to-sloth-runner","title":"\ud83e\udd16 AI-Powered Intelligence \u2b50 Unique to Sloth Runner","text":"<ul> <li>Predictive Analytics: 90%+ accurate failure prediction</li> <li>Intelligent Optimization: 2-5x performance improvements</li> <li>Adaptive Learning: Gets smarter with every execution</li> <li>Risk Assessment: Automated risk analysis for critical operations</li> </ul>"},{"location":"en/enterprise-features/#gitops-native-industry-first","title":"\ud83d\udd04 GitOps Native \u2b50 Industry First","text":"<ul> <li>Zero-Config GitOps: Works out-of-the-box with any Git repository</li> <li>Intelligent Diff Preview: Visual change analysis before deployment</li> <li>Smart Rollback: Automatic rollback with state restoration</li> <li>Multi-Environment: Coordinated dev/staging/production workflows</li> </ul>"},{"location":"en/enterprise-features/#distributed-architecture","title":"\ud83c\udf10 Distributed Architecture","text":"<ul> <li>Master-Agent Topology: Scalable distributed execution</li> <li>Automatic Failover: High availability with zero downtime</li> <li>Load Balancing: Intelligent workload distribution</li> <li>Real-Time Streaming: Live task execution monitoring</li> </ul>"},{"location":"en/enterprise-features/#enterprise-security","title":"\ud83d\udd12 Enterprise Security","text":"<ul> <li>mTLS Authentication: Mutual TLS for all communications</li> <li>RBAC Authorization: Role-based access control</li> <li>Audit Logging: Comprehensive audit trail</li> <li>Secrets Management: Secure credential storage and rotation</li> </ul>"},{"location":"en/enterprise-features/#advanced-monitoring","title":"\ud83d\udcca Advanced Monitoring","text":"<ul> <li>Real-Time Metrics: Prometheus-compatible metrics</li> <li>Health Checks: Automated system health monitoring</li> <li>Alerting: Intelligent alerting with escalation</li> <li>Observability: Complete system observability</li> </ul>"},{"location":"en/enterprise-features/#enterprise-state-management","title":"\ud83d\udcbe Enterprise State Management","text":"<ul> <li>SQLite Backend: Reliable persistent state storage</li> <li>Atomic Operations: ACID-compliant state operations</li> <li>Distributed Locks: Coordination across multiple agents</li> <li>TTL Support: Automatic state cleanup and lifecycle management</li> </ul>"},{"location":"en/enterprise-features/#distributed-architecture_1","title":"\ud83c\udfd7\ufe0f Distributed Architecture","text":""},{"location":"en/enterprise-features/#master-agent-topology","title":"Master-Agent Topology","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Master Node   \u2502    \u2502   Agent Node    \u2502    \u2502   Agent Node    \u2502\n\u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502\n\u2502  \u2022 Task Queue   \u2502\u25c4\u2500\u2500\u25ba\u2502  \u2022 Execution    \u2502    \u2502  \u2022 Execution    \u2502\n\u2502  \u2022 Scheduling   \u2502    \u2502  \u2022 Monitoring   \u2502    \u2502  \u2022 Monitoring   \u2502\n\u2502  \u2022 Monitoring   \u2502    \u2502  \u2022 Health       \u2502    \u2502  \u2022 Health       \u2502\n\u2502  \u2022 Web UI       \u2502    \u2502  \u2022 Streaming    \u2502    \u2502  \u2022 Streaming    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"en/enterprise-features/#scalability-features","title":"Scalability Features","text":"<ul> <li>Horizontal Scaling: Add agents on-demand</li> <li>Auto-Discovery: Automatic agent registration</li> <li>Load Balancing: Intelligent task distribution</li> <li>Resource Optimization: Efficient resource utilization</li> </ul>"},{"location":"en/enterprise-features/#high-availability","title":"High Availability","text":"<ul> <li>Master Redundancy: Multiple master nodes for failover</li> <li>Agent Failover: Automatic task rescheduling on failure</li> <li>Data Replication: State replication across nodes</li> <li>Zero-Downtime Updates: Rolling updates without service interruption</li> </ul>"},{"location":"en/enterprise-features/#security-compliance","title":"\ud83d\udd12 Security &amp; Compliance","text":""},{"location":"en/enterprise-features/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<pre><code>-- RBAC Configuration Example\nsecurity.configure({\n    auth = {\n        type = \"mTLS\",\n        ca_cert = \"/etc/sloth/ca.pem\",\n        server_cert = \"/etc/sloth/server.pem\",\n        server_key = \"/etc/sloth/server.key\"\n    },\n    rbac = {\n        enabled = true,\n        policies = {\n            {\n                role = \"admin\",\n                permissions = [\"*\"],\n                users = [\"admin@company.com\"]\n            },\n            {\n                role = \"developer\", \n                permissions = [\"workflow:read\", \"workflow:execute\"],\n                users = [\"dev-team@company.com\"]\n            },\n            {\n                role = \"viewer\",\n                permissions = [\"workflow:read\", \"metrics:read\"],\n                users = [\"ops-team@company.com\"]\n            }\n        }\n    }\n})\n</code></pre>"},{"location":"en/enterprise-features/#secrets-management","title":"Secrets Management","text":"<pre><code>-- Secure secrets handling\nlocal secrets = require(\"secrets\")\n\nlocal deploy_task = task(\"secure_deploy\")\n    :command(function(params, deps)\n        -- Retrieve secrets securely\n        local api_key = secrets.get(\"api_key\", {\n            vault = \"production\",\n            rotation = true\n        })\n\n        local db_password = secrets.get(\"db_password\", {\n            vault = \"database\",\n            ttl = \"1h\"\n        })\n\n        -- Use secrets in deployment\n        return deploy_with_secrets(api_key, db_password)\n    end)\n    :build()\n</code></pre>"},{"location":"en/enterprise-features/#audit-compliance","title":"Audit &amp; Compliance","text":"<ul> <li>Complete Audit Trail: Every action logged with full context</li> <li>Compliance Reporting: SOC2, HIPAA, PCI-DSS compliance</li> <li>Data Encryption: Encryption at rest and in transit</li> <li>Access Logging: Detailed access and permission logs</li> </ul>"},{"location":"en/enterprise-features/#monitoring-observability","title":"\ud83d\udcca Monitoring &amp; Observability","text":""},{"location":"en/enterprise-features/#prometheus-integration","title":"Prometheus Integration","text":"<pre><code># prometheus.yml\nglobal:\n  scrape_interval: 15s\n\nscrape_configs:\n  - job_name: 'sloth-runner'\n    static_configs:\n      - targets: ['sloth-master:8080']\n    metrics_path: '/metrics'\n    scrape_interval: 5s\n</code></pre>"},{"location":"en/enterprise-features/#key-metrics","title":"Key Metrics","text":"<ul> <li>Task Execution Metrics: Duration, success rate, throughput</li> <li>System Metrics: CPU, memory, disk, network utilization</li> <li>AI Metrics: Optimization success rate, prediction accuracy</li> <li>GitOps Metrics: Deployment frequency, rollback rate, sync health</li> </ul>"},{"location":"en/enterprise-features/#alerting-rules","title":"Alerting Rules","text":"<pre><code># alerting_rules.yml\ngroups:\n  - name: sloth-runner\n    rules:\n      - alert: HighTaskFailureRate\n        expr: rate(sloth_task_failures_total[5m]) &gt; 0.1\n        for: 2m\n        labels:\n          severity: warning\n        annotations:\n          summary: \"High task failure rate detected\"\n\n      - alert: AIOptimizationDown\n        expr: sloth_ai_optimizations_total == 0\n        for: 5m\n        labels:\n          severity: critical\n        annotations:\n          summary: \"AI optimization system is not functioning\"\n</code></pre>"},{"location":"en/enterprise-features/#grafana-dashboards","title":"Grafana Dashboards","text":"<p>Pre-built dashboards for: - System Overview: High-level system health and performance - Task Execution: Task-specific metrics and trends - AI Intelligence: AI optimization and prediction metrics - GitOps Workflows: GitOps deployment and sync status - Agent Performance: Individual agent performance and health</p>"},{"location":"en/enterprise-features/#performance-scalability","title":"\u26a1 Performance &amp; Scalability","text":""},{"location":"en/enterprise-features/#horizontal-scaling","title":"Horizontal Scaling","text":"<pre><code># Add more agents for increased capacity\nsloth-runner agent start \\\n  --master=master.company.com:8080 \\\n  --capacity=100 \\\n  --tags=production,linux\n\n# Scale GitOps workflows\nsloth-runner gitops scale \\\n  --workflows=10 \\\n  --repositories=50 \\\n  --sync-workers=20\n</code></pre>"},{"location":"en/enterprise-features/#performance-optimization","title":"Performance Optimization","text":"<ul> <li>Connection Pooling: Efficient resource utilization</li> <li>Caching: Intelligent caching of frequently accessed data</li> <li>Parallel Execution: Concurrent task execution</li> <li>Resource Limits: Configurable resource constraints</li> </ul>"},{"location":"en/enterprise-features/#load-testing","title":"Load Testing","text":"<pre><code>-- Load testing configuration\nlocal load_test = workflow.define(\"load_test\", {\n    description = \"Performance load testing\",\n    config = {\n        parallel_tasks = 100,\n        duration = \"10m\",\n        ramp_up = \"2m\"\n    },\n\n    tasks = {\n        task(\"load_generator\")\n            :replicas(100)\n            :command(function()\n                -- Simulate realistic workload\n                return simulate_production_load()\n            end)\n    }\n})\n</code></pre>"},{"location":"en/enterprise-features/#deployment-options","title":"\ud83d\ude80 Deployment Options","text":""},{"location":"en/enterprise-features/#cloud-deployments","title":"Cloud Deployments","text":""},{"location":"en/enterprise-features/#aws-deployment","title":"AWS Deployment","text":"<pre><code># aws-deployment.yml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: sloth-runner-master\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: sloth-runner-master\n  template:\n    metadata:\n      labels:\n        app: sloth-runner-master\n    spec:\n      containers:\n      - name: sloth-runner\n        image: slothrunner/sloth-runner:latest\n        env:\n        - name: MODE\n          value: \"master\"\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: sloth-secrets\n              key: database-url\n</code></pre>"},{"location":"en/enterprise-features/#kubernetes-helm-chart","title":"Kubernetes Helm Chart","text":"<pre><code># Install with Helm\nhelm repo add sloth-runner https://charts.sloth-runner.dev\nhelm install sloth-runner sloth-runner/sloth-runner \\\n  --set master.replicas=3 \\\n  --set agent.replicas=10 \\\n  --set ai.enabled=true \\\n  --set gitops.enabled=true\n</code></pre>"},{"location":"en/enterprise-features/#on-premises-deployment","title":"On-Premises Deployment","text":"<pre><code># Docker Compose for on-premises\nversion: '3.8'\nservices:\n  sloth-master:\n    image: slothrunner/sloth-runner:latest\n    command: [\"master\", \"start\"]\n    environment:\n      - AI_ENABLED=true\n      - GITOPS_ENABLED=true\n    ports:\n      - \"8080:8080\"\n    volumes:\n      - sloth-data:/data\n\n  sloth-agent:\n    image: slothrunner/sloth-runner:latest\n    command: [\"agent\", \"start\"]\n    environment:\n      - MASTER_URL=http://sloth-master:8080\n    deploy:\n      replicas: 5\n</code></pre>"},{"location":"en/enterprise-features/#hybrid-cloud","title":"Hybrid Cloud","text":"<pre><code>-- Multi-cloud configuration\ninfrastructure.configure({\n    clouds = {\n        {\n            provider = \"aws\",\n            region = \"us-west-2\",\n            agents = 10,\n            capabilities = [\"compute\", \"storage\"]\n        },\n        {\n            provider = \"gcp\", \n            region = \"us-central1\",\n            agents = 5,\n            capabilities = [\"ai\", \"analytics\"]\n        },\n        {\n            provider = \"azure\",\n            region = \"eastus\",\n            agents = 8,\n            capabilities = [\"compliance\", \"security\"]\n        }\n    },\n    load_balancing = \"round_robin\",\n    failover = \"automatic\"\n})\n</code></pre>"},{"location":"en/enterprise-features/#configuration-management","title":"\ud83d\udd27 Configuration Management","text":""},{"location":"en/enterprise-features/#environment-configuration","title":"Environment Configuration","text":"<pre><code># production.yml\nsloth_runner:\n  master:\n    replicas: 3\n    resources:\n      cpu: \"2\"\n      memory: \"4Gi\"\n    database:\n      type: \"postgresql\"\n      url: \"${DATABASE_URL}\"\n      pool_size: 20\n\n  agent:\n    replicas: 20\n    resources:\n      cpu: \"1\"\n      memory: \"2Gi\"\n    capabilities:\n      - \"docker\"\n      - \"kubernetes\" \n      - \"terraform\"\n\n  ai:\n    enabled: true\n    optimization_level: 8\n    learning_mode: \"adaptive\"\n    models:\n      - \"optimization\"\n      - \"prediction\"\n      - \"analytics\"\n\n  gitops:\n    enabled: true\n    repositories: 50\n    sync_workers: 10\n    auto_sync_interval: \"5m\"\n\n  security:\n    auth_type: \"mTLS\"\n    rbac_enabled: true\n    audit_logging: true\n    secrets_backend: \"vault\"\n\n  monitoring:\n    metrics_enabled: true\n    prometheus_endpoint: \"/metrics\"\n    grafana_dashboards: true\n    alerting_enabled: true\n</code></pre>"},{"location":"en/enterprise-features/#dynamic-configuration","title":"Dynamic Configuration","text":"<pre><code>-- Runtime configuration updates\nconfig.update({\n    ai = {\n        optimization_level = 9,  -- Increase optimization\n        learning_mode = \"aggressive\"\n    },\n    gitops = {\n        auto_sync_interval = \"2m\"  -- More frequent sync\n    }\n})\n</code></pre>"},{"location":"en/enterprise-features/#enterprise-integrations","title":"\ud83d\udcc8 Enterprise Integrations","text":""},{"location":"en/enterprise-features/#identity-providers","title":"Identity Providers","text":"<ul> <li>Active Directory: Seamless AD integration</li> <li>LDAP: Standard LDAP authentication</li> <li>SAML 2.0: Single sign-on support</li> <li>OAuth 2.0: Modern OAuth integration</li> <li>OIDC: OpenID Connect support</li> </ul>"},{"location":"en/enterprise-features/#monitoring-systems","title":"Monitoring Systems","text":"<ul> <li>Prometheus: Native Prometheus metrics</li> <li>Grafana: Pre-built dashboards</li> <li>DataDog: DataDog integration</li> <li>New Relic: APM integration</li> <li>Splunk: Log aggregation and analysis</li> </ul>"},{"location":"en/enterprise-features/#notification-systems","title":"Notification Systems","text":"<ul> <li>Slack: Real-time notifications</li> <li>Microsoft Teams: Team collaboration</li> <li>PagerDuty: Incident management</li> <li>Email: Traditional email notifications</li> <li>Webhooks: Custom integrations</li> </ul>"},{"location":"en/enterprise-features/#external-systems","title":"External Systems","text":"<ul> <li>JIRA: Issue tracking integration</li> <li>ServiceNow: ITSM integration</li> <li>HashiCorp Vault: Secrets management</li> <li>Consul: Service discovery</li> <li>Jenkins: CI/CD pipeline integration</li> </ul>"},{"location":"en/enterprise-features/#enterprise-support","title":"\ud83d\udcbc Enterprise Support","text":""},{"location":"en/enterprise-features/#support-tiers","title":"Support Tiers","text":""},{"location":"en/enterprise-features/#professional-support","title":"Professional Support","text":"<ul> <li>8x5 support coverage</li> <li>Email and chat support</li> <li>2-business-day response SLA</li> <li>Knowledge base access</li> </ul>"},{"location":"en/enterprise-features/#enterprise-support_1","title":"Enterprise Support","text":"<ul> <li>24x7 support coverage</li> <li>Phone, email, and chat support</li> <li>4-hour response SLA for critical issues</li> <li>Dedicated customer success manager</li> </ul>"},{"location":"en/enterprise-features/#premium-support","title":"Premium Support","text":"<ul> <li>24x7 priority support</li> <li>1-hour response SLA for critical issues</li> <li>Direct escalation to engineering</li> <li>Custom feature development</li> <li>On-site consulting available</li> </ul>"},{"location":"en/enterprise-features/#professional-services","title":"Professional Services","text":"<ul> <li>Implementation Services: Expert-guided implementation</li> <li>Training Programs: Comprehensive training for teams</li> <li>Custom Development: Tailored features and integrations</li> <li>Performance Optimization: System performance tuning</li> <li>Security Audits: Security assessment and hardening</li> </ul>"},{"location":"en/enterprise-features/#sla-guarantees","title":"SLA &amp; Guarantees","text":"<ul> <li>99.9% Uptime SLA: Guaranteed system availability</li> <li>Performance SLA: Response time guarantees</li> <li>Data Recovery: Backup and disaster recovery</li> <li>Security: Regular security assessments</li> </ul>"},{"location":"en/enterprise-features/#enterprise-documentation","title":"\ud83d\udcda Enterprise Documentation","text":""},{"location":"en/enterprise-features/#administrator-guides","title":"Administrator Guides","text":"<ul> <li>Installation &amp; Setup</li> <li>Security Configuration</li> <li>Monitoring Setup</li> <li>Backup &amp; Recovery</li> </ul>"},{"location":"en/enterprise-features/#operations-guides","title":"Operations Guides","text":"<ul> <li>Day-to-Day Operations</li> <li>Troubleshooting Guide</li> <li>Performance Tuning</li> <li>Scaling Guidelines</li> </ul>"},{"location":"en/enterprise-features/#developer-guides","title":"Developer Guides","text":"<ul> <li>Enterprise API</li> <li>Custom Integrations</li> <li>Plugin Development</li> <li>Advanced Workflows</li> </ul>"},{"location":"en/enterprise-features/#why-choose-sloth-runner-enterprise","title":"\ud83c\udfaf Why Choose Sloth Runner Enterprise?","text":""},{"location":"en/enterprise-features/#competitive-advantages","title":"Competitive Advantages","text":"Feature Sloth Runner Jenkins GitHub Actions GitLab CI AI Intelligence \u2705 Native \u274c None \u274c None \u274c None GitOps Native \u2705 Built-in \u26a0\ufe0f Plugins \u26a0\ufe0f External \u26a0\ufe0f Basic Modern DSL \u2705 Lua \u274c Groovy \u274c YAML \u274c YAML Distributed \u2705 Native \u26a0\ufe0f Complex \u274c Cloud-only \u26a0\ufe0f Limited Real-time UI \u2705 Built-in \u26a0\ufe0f Basic \u274c Limited \u26a0\ufe0f Basic Enterprise Security \u2705 Complete \u26a0\ufe0f Plugins \u26a0\ufe0f Cloud \u2705 Good"},{"location":"en/enterprise-features/#return-on-investment","title":"Return on Investment","text":"<ul> <li>50%+ Faster Deployments: AI optimization and GitOps automation</li> <li>90% Fewer Failures: AI failure prediction and prevention</li> <li>75% Less Maintenance: Self-healing and adaptive systems</li> <li>60% Faster Development: Modern DSL and intelligent workflows</li> </ul>"},{"location":"en/enterprise-features/#enterprise-success-stories","title":"Enterprise Success Stories","text":"<p>\"Sloth Runner's AI capabilities reduced our deployment failures by 85% and cut our release cycle time in half.\" \u2014 Senior DevOps Engineer, Fortune 500 Financial Services</p> <p>\"The GitOps native integration eliminated our need for external tools and reduced complexity by 70%.\" \u2014 Platform Architect, Global Technology Company</p> <p>\"AI-powered optimization improved our build times by 3x and saved us thousands in compute costs.\" \u2014 Engineering Director, Cloud-Native Startup</p>"},{"location":"en/enterprise-features/#get-started-with-enterprise","title":"\ud83d\ude80 Get Started with Enterprise","text":""},{"location":"en/enterprise-features/#contact-sales","title":"Contact Sales","text":"<p>Ready to transform your automation with AI-powered intelligence and GitOps native workflows?</p> <ul> <li>\ud83d\udce7 Email: enterprise@sloth-runner.dev</li> <li>\ud83d\udcde Phone: +1-800-SLOTH-AI</li> <li>\ud83d\udcac Chat: Enterprise Chat</li> <li>\ud83d\udcc5 Demo: Schedule Demo</li> </ul>"},{"location":"en/enterprise-features/#trial-options","title":"Trial Options","text":"<ul> <li>30-Day Free Trial: Full enterprise features</li> <li>Proof of Concept: Custom PoC with your data</li> <li>Pilot Program: Limited production deployment</li> <li>Migration Assistance: Expert-guided migration from existing tools</li> </ul> <p>\ud83c\udfe2 Sloth Runner Enterprise - The future of intelligent automation is here</p> <p>Trusted by Fortune 500 companies worldwide for mission-critical automation workflows.</p>"},{"location":"en/getting-started/","title":"\ud83d\ude80 Getting Started with Sloth Runner","text":"<p>Welcome to Sloth Runner - the AI-powered GitOps task orchestration platform! This guide will get you up and running in minutes.</p>"},{"location":"en/getting-started/#installation","title":"\ud83d\udce6 Installation","text":""},{"location":"en/getting-started/#quick-install-recommended","title":"Quick Install (Recommended)","text":"<p>Install the latest release with our automated script:</p> <pre><code>curl -sSL https://raw.githubusercontent.com/chalkan3-sloth/sloth-runner/main/install.sh | bash\n</code></pre> <p>This script: - \u2705 Detects your OS and architecture automatically - \u2705 Downloads the latest release from GitHub - \u2705 Installs to <code>/usr/local/bin</code> - \u2705 Verifies installation</p> <p>Note: Requires <code>sudo</code> privileges.</p>"},{"location":"en/getting-started/#manual-installation","title":"Manual Installation","text":"<p>Download from GitHub Releases:</p> <pre><code># Linux AMD64\nwget https://github.com/chalkan3-sloth/sloth-runner/releases/latest/download/sloth-runner-linux-amd64.tar.gz\ntar xzf sloth-runner-linux-amd64.tar.gz\nsudo mv sloth-runner /usr/local/bin/\n\n# macOS ARM64 (Apple Silicon)\nwget https://github.com/chalkan3-sloth/sloth-runner/releases/latest/download/sloth-runner-darwin-arm64.tar.gz\ntar xzf sloth-runner-darwin-arm64.tar.gz\nsudo mv sloth-runner /usr/local/bin/\n</code></pre>"},{"location":"en/getting-started/#verify-installation","title":"Verify Installation","text":"<pre><code>sloth-runner version\n</code></pre>"},{"location":"en/getting-started/#quick-start","title":"\ud83c\udfaf Quick Start","text":""},{"location":"en/getting-started/#your-first-workflow","title":"Your First Workflow","text":"<p>Create a simple workflow file <code>hello.sloth</code>:</p> <pre><code>-- hello.sloth\ntask(\"hello\")\n  :description(\"My first task\")\n  :command(function()\n    print(\"\ud83e\udda5 Hello from Sloth Runner!\")\n    return true\n  end)\n  :build()\n</code></pre> <p>Run it:</p> <pre><code>sloth-runner run -f hello.sloth\n</code></pre>"},{"location":"en/getting-started/#modern-output-styles","title":"Modern Output Styles","text":"<p>Try different output formats:</p> <pre><code># Basic output\nsloth-runner run -f hello.sloth -o basic\n\n# Enhanced with colors and icons\nsloth-runner run -f hello.sloth -o enhanced\n\n# Rich with progress bars\nsloth-runner run -f hello.sloth -o rich\n\n# Modern UI\nsloth-runner run -f hello.sloth -o modern\n\n# JSON for CI/CD\nsloth-runner run -f hello.sloth -o json\n</code></pre>"},{"location":"en/getting-started/#core-concepts","title":"\ud83d\udcda Core Concepts","text":""},{"location":"en/getting-started/#file-extension","title":"File Extension","text":"<p>\ud83d\udcdd Important: Sloth Runner uses <code>.sloth</code> extension for workflow files (not <code>.lua</code>). The syntax is still Lua - only the extension changed for better identification.</p>"},{"location":"en/getting-started/#tasks","title":"Tasks","text":"<p>Tasks are the building blocks. Define with the builder pattern:</p> <pre><code>task(\"build\")\n  :description(\"Build the application\")\n  :command(\"go build -o app\")\n  :build()\n\ntask(\"test\")\n  :description(\"Run tests\")\n  :command(\"go test ./...\")\n  :depends_on(\"build\")\n  :build()\n</code></pre>"},{"location":"en/getting-started/#task-groups","title":"Task Groups","text":"<p>Organize related tasks:</p> <pre><code>task_group(\"ci\")\n  :description(\"CI pipeline\")\n  :tasks({\"build\", \"test\", \"lint\"})\n</code></pre>"},{"location":"en/getting-started/#stack-management","title":"\ud83d\uddc2\ufe0f Stack Management","text":"<p>Stacks provide state persistence and environment isolation.</p>"},{"location":"en/getting-started/#create-a-stack","title":"Create a Stack","text":"<pre><code>sloth-runner stack new prod-app \\\n  -f deploy.sloth \\\n  --description \"Production deployment\"\n</code></pre>"},{"location":"en/getting-started/#run-with-stack","title":"Run with Stack","text":"<pre><code># Run workflow on stack\nsloth-runner run prod-app --yes\n\n# Check stack state\nsloth-runner stack show prod-app\n\n# List all stacks\nsloth-runner stack list\n</code></pre>"},{"location":"en/getting-started/#stack-benefits","title":"Stack Benefits","text":"<ul> <li>\u2705 State persistence between runs</li> <li>\u2705 Environment isolation</li> <li>\u2705 History tracking</li> <li>\u2705 Resource management</li> </ul>"},{"location":"en/getting-started/#modern-dsl-features","title":"\ud83c\udfa8 Modern DSL Features","text":""},{"location":"en/getting-started/#task-builder-api","title":"Task Builder API","text":"<pre><code>task(\"deploy\")\n  :description(\"Deploy to production\")\n  :condition(function() return os.getenv(\"ENV\") == \"prod\" end)\n  :command(function()\n    log.info(\"Deploying...\")\n    return exec.run(\"kubectl apply -f k8s/\")\n  end)\n  :on_success(function()\n    log.success(\"\u2705 Deployed successfully!\")\n  end)\n  :on_error(function(err)\n    log.error(\"\u274c Deployment failed: \" .. err)\n  end)\n  :timeout(300)\n  :retry(3)\n  :build()\n</code></pre>"},{"location":"en/getting-started/#values-files","title":"Values Files","text":"<p>Parameterize workflows with values files:</p> <p>values.yaml: <pre><code>environment: production\nreplicas: 3\nimage: myapp:v1.2.3\n</code></pre></p> <p>deploy.sloth: <pre><code>local env = values.environment\nlocal replicas = values.replicas\n\ntask(\"deploy\")\n  :command(function()\n    log.info(\"Deploying to \" .. env)\n    log.info(\"Replicas: \" .. replicas)\n  end)\n  :build()\n</code></pre></p> <p>Run with values:</p> <pre><code>sloth-runner run -f deploy.sloth -v values.yaml\n</code></pre>"},{"location":"en/getting-started/#built-in-modules","title":"\ud83e\udd16 Built-in Modules","text":"<p>Sloth Runner includes powerful built-in modules:</p>"},{"location":"en/getting-started/#example-docker-deployment","title":"Example: Docker Deployment","text":"<pre><code>local docker = require(\"docker\")\n\ntask(\"deploy_container\")\n  :command(function()\n    -- Pull image\n    docker.pull(\"nginx:latest\")\n\n    -- Run container\n    docker.run({\n      image = \"nginx:latest\",\n      name = \"web-server\",\n      ports = {\"80:80\"},\n      detach = true\n    })\n\n    return true\n  end)\n  :build()\n</code></pre>"},{"location":"en/getting-started/#available-modules","title":"Available Modules","text":"<ul> <li>\ud83d\udc33 docker - Container management</li> <li>\u2601\ufe0f aws, azure, gcp - Cloud providers</li> <li>\ud83d\udd27 systemd - Service management</li> <li>\ud83d\udce6 pkg - Package management</li> <li>\ud83d\udcca metrics - Monitoring</li> <li>\ud83d\udd10 vault - Secrets management</li> <li>\ud83c\udf0d terraform - Infrastructure as Code</li> </ul> <p>See all modules \u2192</p>"},{"location":"en/getting-started/#common-workflows","title":"\ud83c\udfad Common Workflows","text":""},{"location":"en/getting-started/#cicd-pipeline","title":"CI/CD Pipeline","text":"<pre><code>task(\"lint\")\n  :command(\"golangci-lint run\")\n  :build()\n\ntask(\"test\")\n  :command(\"go test -v ./...\")\n  :depends_on(\"lint\")\n  :build()\n\ntask(\"build\")\n  :command(\"go build -o app\")\n  :depends_on(\"test\")\n  :build()\n\ntask(\"deploy\")\n  :command(function()\n    exec.run(\"docker build -t myapp .\")\n    exec.run(\"docker push myapp\")\n    exec.run(\"kubectl rollout restart deployment/myapp\")\n  end)\n  :depends_on(\"build\")\n  :build()\n</code></pre> <p>Run the pipeline:</p> <pre><code>sloth-runner run -f pipeline.sloth -o rich\n</code></pre>"},{"location":"en/getting-started/#infrastructure-automation","title":"Infrastructure Automation","text":"<pre><code>local terraform = require(\"terraform\")\n\ntask(\"plan\")\n  :command(function()\n    return terraform.plan({\n      dir = \"./terraform\",\n      var_file = \"prod.tfvars\"\n    })\n  end)\n  :build()\n\ntask(\"apply\")\n  :command(function()\n    return terraform.apply({\n      dir = \"./terraform\",\n      auto_approve = true\n    })\n  end)\n  :depends_on(\"plan\")\n  :build()\n</code></pre>"},{"location":"en/getting-started/#distributed-execution","title":"\ud83c\udf10 Distributed Execution","text":""},{"location":"en/getting-started/#start-master-server","title":"Start Master Server","text":"<pre><code>sloth-runner master --port 50053 --daemon\n</code></pre>"},{"location":"en/getting-started/#start-agents","title":"Start Agents","text":"<p>On different servers:</p> <pre><code># Web server agent\nsloth-runner agent start \\\n  --master master.example.com:50053 \\\n  --name web-01 \\\n  --tags web,nginx\n\n# Database agent  \nsloth-runner agent start \\\n  --master master.example.com:50053 \\\n  --name db-01 \\\n  --tags database,postgres\n</code></pre>"},{"location":"en/getting-started/#distribute-tasks","title":"Distribute Tasks","text":"<pre><code>task(\"deploy_web\")\n  :target_agent(\"web-01\")\n  :command(\"nginx -s reload\")\n  :build()\n\ntask(\"backup_db\")\n  :target_agent(\"db-01\")\n  :command(\"pg_dump mydb &gt; backup.sql\")\n  :build()\n</code></pre>"},{"location":"en/getting-started/#web-dashboard","title":"\ud83d\udcca Web Dashboard","text":"<p>Start the UI for visual management:</p> <pre><code>sloth-runner ui --port 8080\n</code></pre> <p>Access at: <code>http://localhost:8080</code></p> <p>Features: - \ud83d\udcc8 Real-time task monitoring - \ud83e\udd16 Agent health dashboard - \ud83d\udcc5 Scheduler management - \ud83d\udce6 Stack browser - \ud83d\udcca Metrics and analytics</p>"},{"location":"en/getting-started/#scheduler","title":"\ud83d\udd04 Scheduler","text":"<p>Schedule recurring tasks:</p> <pre><code>-- In your workflow\nschedule(\"nightly_backup\")\n  :cron(\"0 2 * * *\")  -- 2 AM daily\n  :task(\"backup\")\n  :build()\n</code></pre> <p>Manage from CLI:</p> <pre><code># Enable scheduler\nsloth-runner scheduler enable\n\n# List scheduled tasks\nsloth-runner scheduler list\n\n# Disable scheduler\nsloth-runner scheduler disable\n</code></pre>"},{"location":"en/getting-started/#tips-best-practices","title":"\ud83d\udca1 Tips &amp; Best Practices","text":""},{"location":"en/getting-started/#1-use-stacks-for-state-management","title":"1. Use Stacks for State Management","text":"<pre><code># \u2705 Good: Use stacks\nsloth-runner stack new myapp\nsloth-runner run myapp\n\n# \u274c Avoid: Direct execution without state\nsloth-runner run -f workflow.sloth\n</code></pre>"},{"location":"en/getting-started/#2-choose-the-right-output-format","title":"2. Choose the Right Output Format","text":"<pre><code># Interactive terminal\nsloth-runner run -f deploy.sloth -o rich\n\n# CI/CD pipelines\nsloth-runner run -f ci.sloth -o json\n\n# Simple scripts\nsloth-runner run -f task.sloth -o basic\n</code></pre>"},{"location":"en/getting-started/#3-use-values-files-for-environments","title":"3. Use Values Files for Environments","text":"<pre><code># Development\nsloth-runner run -f app.sloth -v dev-values.yaml\n\n# Production\nsloth-runner run -f app.sloth -v prod-values.yaml\n</code></pre>"},{"location":"en/getting-started/#4-leverage-built-in-modules","title":"4. Leverage Built-in Modules","text":"<pre><code>-- \u274c Don't shell out unnecessarily\ntask(\"install\"):command(\"apt-get install nginx\"):build()\n\n-- \u2705 Use built-in modules\nlocal pkg = require(\"pkg\")\ntask(\"install\"):command(function()\n  return pkg.install(\"nginx\")\nend):build()\n</code></pre>"},{"location":"en/getting-started/#next-steps","title":"\ud83d\udcd6 Next Steps","text":"<p>Now that you're started, explore more:</p> <ul> <li>\ud83d\udcd8 Core Concepts - Deep dive into architecture</li> <li>\ud83c\udfa8 Modern DSL - Advanced syntax</li> <li>\ud83d\udd27 CLI Reference - All commands</li> <li>\ud83d\udce6 Modules - Built-in capabilities</li> <li>\ud83c\udfad Examples - Real-world workflows</li> <li>\ud83e\udd16 AI Features - Intelligent optimization</li> <li>\ud83d\ude80 GitOps - Automated deployments</li> </ul>"},{"location":"en/getting-started/#getting-help","title":"\ud83c\udd98 Getting Help","text":"<ul> <li>\ud83d\udcd6 Documentation: Full docs</li> <li>\ud83d\udcac Community: GitHub Discussions</li> <li>\ud83d\udc1b Issues: Bug Reports</li> <li>\ud83d\udcdd Examples: Example Repository</li> </ul> <p>Ready to automate? Create your first workflow and start orchestrating! \ud83d\ude80</p> <p>English | Portugu\u00eas | \u4e2d\u6587</p>"},{"location":"en/gitops-features/","title":"\ud83d\udd04 GitOps Native Workflows","text":"<p>\ud83c\udf1f World's First Native GitOps Task Runner Sloth Runner revolutionizes deployment automation with built-in GitOps workflows, making infrastructure-as-code truly seamless.</p>"},{"location":"en/gitops-features/#overview","title":"\ud83c\udf0a Overview","text":"<p>GitOps Native brings declarative, Git-driven deployment workflows directly into your task automation. No external tools needed - everything is built-in and ready to use.</p>"},{"location":"en/gitops-features/#key-gitops-features","title":"\u2728 Key GitOps Features","text":""},{"location":"en/gitops-features/#declarative-workflows","title":"\ud83d\udd04 Declarative Workflows","text":"<ul> <li>Zero Configuration: Works out-of-the-box with any Git repository</li> <li>Multi-Repository: Manage multiple repos in a single workflow</li> <li>Branch Strategies: Support for GitFlow, GitHub Flow, and custom strategies</li> </ul>"},{"location":"en/gitops-features/#intelligent-diff-preview","title":"\ud83d\udd0d Intelligent Diff Preview","text":"<ul> <li>Visual Changes: See exactly what will change before deployment</li> <li>Conflict Detection: Automatic detection and resolution of conflicts</li> <li>Impact Analysis: Understand the impact of changes before applying</li> </ul>"},{"location":"en/gitops-features/#smart-rollback","title":"\ud83d\udee1\ufe0f Smart Rollback","text":"<ul> <li>Automatic Rollback: Roll back on failure detection</li> <li>State Backup: Automatic backup before every deployment</li> <li>Multiple Strategies: Rollback to previous commit, timestamp, or state</li> </ul>"},{"location":"en/gitops-features/#multi-environment-support","title":"\ud83c\udfe2 Multi-Environment Support","text":"<ul> <li>Environment Isolation: Separate workflows for dev/staging/production</li> <li>Progressive Deployment: Automatic promotion through environments</li> <li>Approval Gates: Manual approval for production deployments</li> </ul>"},{"location":"en/gitops-features/#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"en/gitops-features/#simple-gitops-workflow","title":"Simple GitOps Workflow","text":"<pre><code>local gitops = require(\"gitops\")\n\n-- Create a GitOps workflow with minimal configuration\nlocal workflow = gitops.workflow({\n    repo = \"https://github.com/company/infrastructure\",\n    branch = \"main\",\n    auto_sync = true,\n    diff_preview = true,\n    rollback_on_failure = true\n})\n\n-- That's it! GitOps is now active\nlog.info(\"GitOps workflow created: \" .. workflow.workflow_id)\n</code></pre>"},{"location":"en/gitops-features/#advanced-multi-environment-setup","title":"Advanced Multi-Environment Setup","text":"<pre><code>local gitops = require(\"gitops\")\n\n-- Define environments with different configurations\nlocal environments = {\n    {\n        name = \"development\",\n        repo = \"https://github.com/company/k8s-dev\",\n        branch = \"develop\",\n        auto_sync = true,        -- Auto-deploy in dev\n        sync_interval = \"5m\"\n    },\n    {\n        name = \"staging\",\n        repo = \"https://github.com/company/k8s-staging\", \n        branch = \"staging\",\n        auto_sync = true,        -- Auto-deploy in staging\n        sync_interval = \"10m\"\n    },\n    {\n        name = \"production\",\n        repo = \"https://github.com/company/k8s-prod\",\n        branch = \"main\",\n        auto_sync = false,       -- Manual deploys in production\n        approval_required = true\n    }\n}\n\n-- Create workflows for all environments\nfor _, env in ipairs(environments) do\n    local workflow_id = gitops.create_workflow({\n        name = env.name .. \" Environment\",\n        repository = gitops.register_repository({\n            url = env.repo,\n            branch = env.branch\n        }),\n        auto_sync = env.auto_sync,\n        diff_preview = true,\n        rollback_on_failure = true\n    })\n\n    log.info(\"Created GitOps workflow for \" .. env.name .. \": \" .. workflow_id)\nend\n</code></pre>"},{"location":"en/gitops-features/#diff-preview-change-analysis","title":"\ud83d\udd0d Diff Preview &amp; Change Analysis","text":""},{"location":"en/gitops-features/#preview-changes-before-deployment","title":"Preview Changes Before Deployment","text":"<pre><code>local deploy_task = task(\"preview_and_deploy\")\n    :description(\"Preview changes before deploying\")\n    :command(function(params, deps)\n        local workflow_id = params.workflow_id\n\n        -- Generate comprehensive diff\n        local diff = gitops.generate_diff(workflow_id)\n\n        if not diff then\n            log.info(\"\u2139\ufe0f No changes detected\")\n            return {success = true, message = \"No changes to deploy\"}\n        end\n\n        -- Display change summary\n        log.info(\"\ud83d\udcca Deployment Summary:\")\n        log.info(\"  \ud83d\udcdd Total changes: \" .. diff.summary.total_changes)\n        log.info(\"  \u2728 Created: \" .. diff.summary.created_resources)\n        log.info(\"  \ud83d\udd04 Updated: \" .. diff.summary.updated_resources)\n        log.info(\"  \ud83d\uddd1\ufe0f Deleted: \" .. diff.summary.deleted_resources)\n\n        -- Check for conflicts\n        if diff.summary.conflict_count &gt; 0 then\n            log.warn(\"\u26a0\ufe0f Conflicts detected:\")\n            for _, conflict in ipairs(diff.conflicts) do\n                log.warn(\"  \u274c \" .. conflict.resource .. \": \" .. conflict.description)\n            end\n\n            return {success = false, message = \"Conflicts must be resolved before deployment\"}\n        end\n\n        -- Check for high-impact changes\n        local high_impact_changes = 0\n        for _, change in ipairs(diff.changes) do\n            if change.impact == \"high\" or change.impact == \"critical\" then\n                high_impact_changes = high_impact_changes + 1\n                log.warn(\"\u26a0\ufe0f High-impact change: \" .. change.resource .. \" (\" .. change.type .. \")\")\n            end\n        end\n\n        -- Show warnings\n        if #diff.warnings &gt; 0 then\n            log.warn(\"\u26a0\ufe0f Warnings:\")\n            for _, warning in ipairs(diff.warnings) do\n                log.warn(\"  \u2022 \" .. warning)\n            end\n        end\n\n        -- Require confirmation for high-impact changes\n        if high_impact_changes &gt; 0 then\n            print(\"Proceed with \" .. high_impact_changes .. \" high-impact changes? (y/N)\")\n            local response = io.read()\n            if response:lower() ~= \"y\" then\n                return {success = false, message = \"Deployment cancelled by user\"}\n            end\n        end\n\n        -- Execute deployment\n        log.info(\"\ud83d\ude80 Executing deployment...\")\n        return gitops.sync_workflow(workflow_id)\n    end)\n    :build()\n</code></pre>"},{"location":"en/gitops-features/#sync-strategies","title":"\ud83d\udd04 Sync Strategies","text":""},{"location":"en/gitops-features/#automatic-synchronization","title":"Automatic Synchronization","text":"<pre><code>-- Enable auto-sync for non-production environments\nlocal dev_workflow = gitops.workflow({\n    repo = \"https://github.com/company/dev-config\",\n    auto_sync = true,\n    sync_interval = \"5m\",     -- Check for changes every 5 minutes\n    diff_preview = true,\n    rollback_on_failure = true\n})\n\n-- Start the auto-sync controller\ngitops.start_auto_sync()\nlog.info(\"\ud83d\udd04 Auto-sync controller started\")\n</code></pre>"},{"location":"en/gitops-features/#manual-synchronization-with-validation","title":"Manual Synchronization with Validation","text":"<pre><code>local production_deploy = task(\"production_deploy\")\n    :description(\"Manual production deployment with full validation\")\n    :command(function(params, deps)\n        local workflow_id = params.workflow_id\n\n        -- Step 1: Generate and review diff\n        local diff = gitops.generate_diff(workflow_id)\n\n        -- Step 2: Run pre-deployment validations\n        log.info(\"\ud83d\udd0d Running pre-deployment validations...\")\n\n        -- Check for breaking changes\n        local breaking_changes = false\n        for _, change in ipairs(diff.changes) do\n            if change.type == \"delete\" and change.resource:match(\"PersistentVolume\") then\n                breaking_changes = true\n                log.error(\"\ud83d\udca5 Breaking change detected: Deleting PersistentVolume\")\n            end\n        end\n\n        if breaking_changes then\n            return {success = false, message = \"Breaking changes detected - manual review required\"}\n        end\n\n        -- Step 3: Execute deployment\n        log.info(\"\ud83d\ude80 Executing production deployment...\")\n        local sync_result = gitops.sync_workflow(workflow_id)\n\n        if not sync_result then\n            log.error(\"\ud83d\udca5 Deployment failed!\")\n            return {success = false, message = \"Deployment failed\"}\n        end\n\n        -- Step 4: Verify deployment\n        log.info(\"\ud83d\udd0d Verifying deployment...\")\n        local status = gitops.get_workflow_status(workflow_id)\n\n        if status.status == \"synced\" and status.last_sync_result.status == \"succeeded\" then\n            log.info(\"\u2705 Production deployment successful!\")\n            return {success = true, message = \"Production deployed successfully\"}\n        else\n            log.error(\"\ud83d\udca5 Deployment verification failed!\")\n            return {success = false, message = \"Deployment verification failed\"}\n        end\n    end)\n    :build()\n</code></pre>"},{"location":"en/gitops-features/#rollback-strategies","title":"\ud83d\udee1\ufe0f Rollback Strategies","text":""},{"location":"en/gitops-features/#automatic-rollback-on-failure","title":"Automatic Rollback on Failure","text":"<pre><code>local resilient_deploy = task(\"resilient_deploy\")\n    :description(\"Deploy with automatic rollback on failure\")\n    :command(function(params, deps)\n        local workflow_id = params.workflow_id\n\n        -- Deploy with automatic rollback enabled\n        local sync_result = gitops.sync_workflow(workflow_id)\n\n        if not sync_result then\n            log.warn(\"\ud83d\udd04 Deployment failed, automatic rollback initiated\")\n\n            -- GitOps will automatically rollback due to rollback_on_failure = true\n            -- But we can also trigger manual rollback\n            local rollback_result = gitops.rollback_workflow(workflow_id, \"Deployment failed\")\n\n            if rollback_result then\n                log.info(\"\u2705 Rollback completed successfully\")\n                return {success = false, message = \"Deployment failed but rollback successful\"}\n            else\n                log.error(\"\ud83d\udca5 Rollback failed!\")\n                return {success = false, message = \"Deployment and rollback both failed\"}\n            end\n        end\n\n        return {success = true, message = \"Deployment successful\"}\n    end)\n    :build()\n</code></pre>"},{"location":"en/gitops-features/#manual-rollback","title":"Manual Rollback","text":"<pre><code>local manual_rollback = task(\"manual_rollback\")\n    :description(\"Manual rollback to previous state\")\n    :command(function(params, deps)\n        local workflow_id = params.workflow_id\n        local reason = params.reason or \"Manual rollback requested\"\n\n        log.info(\"\ud83d\udd04 Initiating manual rollback...\")\n        log.info(\"\ud83d\udccb Reason: \" .. reason)\n\n        local rollback_result = gitops.rollback_workflow(workflow_id, reason)\n\n        if rollback_result then\n            log.info(\"\u2705 Manual rollback completed successfully\")\n\n            -- Verify rollback\n            local status = gitops.get_workflow_status(workflow_id)\n            log.info(\"\ud83d\udcca Current status: \" .. status.status)\n\n            return {success = true, message = \"Manual rollback completed\"}\n        else\n            log.error(\"\ud83d\udca5 Manual rollback failed!\")\n            return {success = false, message = \"Manual rollback failed\"}\n        end\n    end)\n    :build()\n</code></pre>"},{"location":"en/gitops-features/#kubernetes-integration","title":"\u2638\ufe0f Kubernetes Integration","text":""},{"location":"en/gitops-features/#native-kubernetes-workflows","title":"Native Kubernetes Workflows","text":"<pre><code>local k8s_gitops = task(\"kubernetes_gitops\")\n    :description(\"GitOps for Kubernetes manifests\")\n    :command(function(params, deps)\n        -- Create GitOps workflow for Kubernetes\n        local k8s_workflow = gitops.workflow({\n            repo = \"https://github.com/company/k8s-manifests\",\n            branch = \"main\",\n            target_path = \"manifests/production\",  -- Focus on specific directory\n            auto_sync = false,\n            diff_preview = true,\n            rollback_on_failure = true\n        })\n\n        -- Preview Kubernetes changes\n        local diff = gitops.generate_diff(k8s_workflow.workflow_id)\n\n        -- Kubernetes-specific validations\n        local k8s_issues = {}\n        for _, change in ipairs(diff.changes) do\n            -- Check for dangerous operations\n            if change.type == \"delete\" and change.resource:match(\"Namespace\") then\n                table.insert(k8s_issues, \"Deleting namespace: \" .. change.resource)\n            end\n\n            if change.type == \"update\" and change.resource:match(\"Deployment\") then\n                -- Check for image changes\n                log.info(\"\ud83d\udce6 Deployment update detected: \" .. change.resource)\n            end\n        end\n\n        if #k8s_issues &gt; 0 then\n            log.warn(\"\u26a0\ufe0f Kubernetes issues detected:\")\n            for _, issue in ipairs(k8s_issues) do\n                log.warn(\"  \u2022 \" .. issue)\n            end\n        end\n\n        -- Deploy to Kubernetes\n        return gitops.sync_workflow(k8s_workflow.workflow_id)\n    end)\n    :build()\n</code></pre>"},{"location":"en/gitops-features/#gitops-api-reference","title":"\ud83d\udcca GitOps API Reference","text":""},{"location":"en/gitops-features/#workflow-management","title":"Workflow Management","text":"<pre><code>-- Create simple workflow\nlocal workflow = gitops.workflow({\n    repo = \"https://github.com/org/repo\",\n    branch = \"main\",\n    auto_sync = true,\n    diff_preview = true,\n    rollback_on_failure = true\n})\n\n-- Create detailed workflow\nlocal workflow_id = gitops.create_workflow({\n    name = \"Production Infrastructure\",\n    repository = repo_id,\n    target_path = \"k8s/production\",\n    auto_sync = false,\n    diff_preview = true,\n    rollback_on_failure = true\n})\n</code></pre>"},{"location":"en/gitops-features/#repository-management","title":"Repository Management","text":"<pre><code>-- Register repository\nlocal repo_id = gitops.register_repository({\n    url = \"https://github.com/company/infrastructure\",\n    branch = \"main\",\n    credentials = {\n        type = \"token\",\n        token = \"ghp_xxxxx\"\n    }\n})\n</code></pre>"},{"location":"en/gitops-features/#sync-operations","title":"Sync Operations","text":"<pre><code>-- Manual sync\nlocal success = gitops.sync_workflow(workflow_id)\n\n-- Get workflow status\nlocal status = gitops.get_workflow_status(workflow_id)\n\n-- List all workflows\nlocal workflows = gitops.list_workflows()\n</code></pre>"},{"location":"en/gitops-features/#diff-and-preview","title":"Diff and Preview","text":"<pre><code>-- Generate diff\nlocal diff = gitops.generate_diff(workflow_id)\n\n-- Alias for diff\nlocal preview = gitops.preview_changes(workflow_id)\n</code></pre>"},{"location":"en/gitops-features/#rollback-operations","title":"Rollback Operations","text":"<pre><code>-- Rollback workflow\nlocal success = gitops.rollback_workflow(workflow_id, \"Reason for rollback\")\n</code></pre>"},{"location":"en/gitops-features/#auto-sync-control","title":"Auto-Sync Control","text":"<pre><code>-- Start auto-sync for all auto_sync=true workflows\ngitops.start_auto_sync()\n\n-- Stop auto-sync\ngitops.stop_auto_sync()\n</code></pre>"},{"location":"en/gitops-features/#best-practices","title":"\ud83c\udfaf Best Practices","text":""},{"location":"en/gitops-features/#1-environment-strategy","title":"1. Environment Strategy","text":"<pre><code>-- Use different repositories for different environments\nlocal environments = {\n    dev = {repo = \"company/k8s-dev\", auto_sync = true},\n    staging = {repo = \"company/k8s-staging\", auto_sync = true},\n    prod = {repo = \"company/k8s-prod\", auto_sync = false}\n}\n</code></pre>"},{"location":"en/gitops-features/#2-always-preview-in-production","title":"2. Always Preview in Production","text":"<pre><code>-- Never deploy to production without diff preview\nif environment == \"production\" then\n    local diff = gitops.generate_diff(workflow_id)\n    if diff.summary.conflict_count &gt; 0 then\n        error(\"Conflicts detected in production deployment!\")\n    end\nend\n</code></pre>"},{"location":"en/gitops-features/#3-use-descriptive-rollback-reasons","title":"3. Use Descriptive Rollback Reasons","text":"<pre><code>-- Provide clear reasons for rollbacks\ngitops.rollback_workflow(workflow_id, \"Health check failed after 5 minutes\")\n</code></pre>"},{"location":"en/gitops-features/#4-monitor-sync-results","title":"4. Monitor Sync Results","text":"<pre><code>-- Always check sync results\nlocal status = gitops.get_workflow_status(workflow_id)\nif status.last_sync_result.status ~= \"succeeded\" then\n    -- Handle failure\nend\n</code></pre>"},{"location":"en/gitops-features/#advanced-configuration","title":"\ud83d\udd27 Advanced Configuration","text":""},{"location":"en/gitops-features/#multi-repository-workflows","title":"Multi-Repository Workflows","text":"<pre><code>-- Coordinate multiple repositories\nlocal frontend_workflow = gitops.workflow({\n    repo = \"https://github.com/company/frontend-config\"\n})\n\nlocal backend_workflow = gitops.workflow({\n    repo = \"https://github.com/company/backend-config\"\n})\n\nlocal database_workflow = gitops.workflow({\n    repo = \"https://github.com/company/database-config\"\n})\n\n-- Deploy in sequence\ngitops.sync_workflow(database_workflow.workflow_id)\ngitops.sync_workflow(backend_workflow.workflow_id)\ngitops.sync_workflow(frontend_workflow.workflow_id)\n</code></pre>"},{"location":"en/gitops-features/#custom-sync-policies","title":"Custom Sync Policies","text":"<pre><code>local workflow_id = gitops.create_workflow({\n    name = \"Custom Sync Policy\",\n    repository = repo_id,\n    sync_policy = {\n        auto_prune = true,\n        retry = {\n            limit = 5,\n            backoff = \"exponential\"\n        },\n        health_check = {\n            enabled = true,\n            timeout = \"10m\"\n        }\n    }\n})\n</code></pre>"},{"location":"en/gitops-features/#examples","title":"\ud83e\uddea Examples","text":"<p>Explore our comprehensive GitOps Examples directory:</p> <ul> <li>Multi-Environment Deployments: Dev/Staging/Prod workflows</li> <li>Kubernetes GitOps: Native K8s integration</li> <li>Blue-Green Deployments: Zero-downtime deployment strategies</li> <li>Canary Releases: Gradual rollout strategies</li> <li>Disaster Recovery: Backup and restore workflows</li> </ul>"},{"location":"en/gitops-features/#whats-next","title":"\ud83d\ude80 What's Next?","text":"<p>GitOps Native is continuously evolving. Upcoming features include:</p> <ul> <li>\ud83c\udfaf ArgoCD Integration: Seamless integration with ArgoCD</li> <li>\ud83d\udd04 Flux Compatibility: Work with Flux workflows  </li> <li>\ud83d\udcca Advanced Metrics: Deployment success rates and performance metrics</li> <li>\ud83c\udf10 Multi-Cluster: Deploy across multiple Kubernetes clusters</li> <li>\ud83d\udee1\ufe0f Policy Enforcement: OPA/Gatekeeper integration for policy validation</li> </ul> <p>\ud83d\udd04 Ready to revolutionize your deployments? Start with our GitOps Quick Setup Guide or explore the complete API reference.</p>"},{"location":"en/master-agent-architecture/","title":"Sloth-Runner Master-Agent Architecture","text":"<p><code>sloth-runner</code> is designed with a master-agent architecture to facilitate distributed task execution. This allows you to orchestrate and run tasks across multiple remote machines from a central control point.</p>"},{"location":"en/master-agent-architecture/#core-concepts","title":"Core Concepts","text":""},{"location":"en/master-agent-architecture/#master-server","title":"Master Server","text":"<p>The Master Server is the central component of the <code>sloth-runner</code> ecosystem. Its primary responsibilities include:</p> <ul> <li>Agent Registry: Maintains a registry of all connected and available agents.</li> <li>Task Orchestration: Receives task execution requests and dispatches them to the appropriate agents.</li> <li>Communication Hub: Acts as the communication hub between the user (via the CLI) and the agents.</li> </ul>"},{"location":"en/master-agent-architecture/#agent","title":"Agent","text":"<p>An Agent is a lightweight process that runs on a remote machine. Its main functions are:</p> <ul> <li>Registration: Registers itself with the Master Server upon startup, providing its network address and name.</li> <li>Task Execution: Receives commands and tasks from the Master Server and executes them locally.</li> <li>Status Reporting: Reports the status and output of executed tasks back to the Master Server.</li> </ul>"},{"location":"en/master-agent-architecture/#communication-protocol","title":"Communication Protocol","text":"<p>Master and Agents communicate using gRPC, a high-performance, open-source universal RPC framework. This ensures efficient and reliable communication between the distributed components.</p>"},{"location":"en/master-agent-architecture/#installation-and-startup","title":"Installation and Startup","text":""},{"location":"en/master-agent-architecture/#master-server-installation","title":"Master Server Installation","text":"<p>To set up the <code>sloth-runner</code> Master Server, you typically run it on your local machine or a designated control server. The master listens for agent connections on a specified port.</p> <p>Command:</p> <pre><code>go run ./cmd/sloth-runner master -p &lt;port&gt; [--daemon]\n</code></pre> <ul> <li><code>-p, --port &lt;port&gt;</code>: Specifies the port on which the master server will listen for agent connections. The default port is <code>50053</code>.</li> <li><code>--daemon</code>: (Optional) Runs the master server as a background daemon process. This is recommended for continuous operation.</li> </ul> <p>Example:</p> <p>To start the master server on port <code>50053</code> in daemon mode:</p> <pre><code>go run ./cmd/sloth-runner master -p 50053 --daemon\n</code></pre> <p>Upon successful startup, the master will log that it is listening for agent registrations.</p>"},{"location":"en/master-agent-architecture/#agent-installation","title":"Agent Installation","text":"<p>Agents are deployed on the remote machines where you intend to execute tasks. Each agent needs to be configured with a unique name and the address of the Master Server.</p> <p>Command:</p> <pre><code>sloth-runner agent start --name &lt;agent_name&gt; --master &lt;master_ip&gt;:&lt;master_port&gt; --port &lt;agent_port&gt; --bind-address &lt;agent_ip&gt; [--daemon]\n</code></pre> <ul> <li><code>--name &lt;agent_name&gt;</code>: A unique name for this agent (e.g., <code>agent1</code>, <code>web-server-agent</code>). This name is used by the master to identify and address the agent.</li> <li><code>--master &lt;master_ip&gt;:&lt;master_port&gt;</code>: The IP address and port of the running Master Server. Agents will connect to this address to register and receive tasks.</li> <li><code>--port &lt;agent_port&gt;</code>: The port on which the agent itself will listen for direct communication from the master (e.g., for task execution requests). The default port is <code>50051</code>.</li> <li><code>--bind-address &lt;agent_ip&gt;</code>: Crucial for remote agents. This specifies the specific IPv4 address that the agent should bind to and report to the master. This ensures the master can correctly connect to the agent, especially in environments with multiple network interfaces or IPv6 preference. Always set this to the remote machine's accessible IPv4 address.</li> <li><code>--daemon</code>: (Optional) Runs the agent as a background daemon process.</li> </ul> <p>Example:</p> <p>To start an agent named <code>agent1</code> on a machine with IP <code>192.168.1.16</code>, connecting to a master at <code>192.168.1.21:50053</code>, and listening on port <code>50051</code>:</p> <pre><code>sloth-runner agent start --name agent1 --master 192.168.1.21:50053 --port 50051 --bind-address 192.168.1.16 --daemon\n</code></pre>"},{"location":"en/master-agent-architecture/#task-execution-workflow","title":"Task Execution Workflow","text":"<ol> <li>Master Startup: The <code>sloth-runner</code> master server starts and begins listening for agent registrations.</li> <li>Agent Startup &amp; Registration: An agent starts on a remote machine, connects to the configured master, and registers itself, providing its unique name and accessible network address.</li> <li>Agent Listing: The user can list all registered agents using <code>sloth-runner agent list</code> from the master's machine.</li> <li>Task Request: The user initiates a task execution on a specific agent using <code>sloth-runner agent run &lt;agent_name&gt; &lt;command&gt;</code>.</li> <li>Task Dispatch: The master receives the request, looks up the agent's address in its registry, and dispatches the command to the target agent via gRPC.</li> <li>Task Execution: The agent receives the command, executes it locally (e.g., using <code>bash -c &lt;command&gt;</code>), and captures its standard output, standard error, and exit status.</li> <li>Result Reporting: The agent sends the execution results (stdout, stderr, success/failure) back to the master.</li> <li>Output Presentation: The master receives the results and presents them to the user in a clear, formatted, and colored output (as described in the Enhanced <code>sloth-runner agent run</code> Output documentation).</li> </ol> <p>This architecture provides a flexible and scalable way to manage and execute tasks across your infrastructure.</p>"},{"location":"en/master-agent-architecture/#special-configurations","title":"Special Configurations","text":""},{"location":"en/master-agent-architecture/#agents-in-incuslxc-containers","title":"Agents in Incus/LXC Containers","text":"<p>When deploying agents inside Incus (or LXC) containers, you need to configure port forwarding and use the <code>--report-address</code> flag because the container's internal IP is not accessible from the master.</p>"},{"location":"en/master-agent-architecture/#quick-start","title":"Quick Start","text":"<p>For a fast setup in an Incus container:</p> <pre><code># 1. On the HOST - Configure port forwarding\nsudo incus config device add main sloth-proxy proxy \\\n  listen=tcp:0.0.0.0:50052 \\\n  connect=tcp:127.0.0.1:50051\n\n# 2. In the CONTAINER - Install with bootstrap script\nsudo incus exec main -- bash -c \"curl -fsSL https://raw.githubusercontent.com/chalkan3-sloth/sloth-runner/master/bootstrap.sh | bash -s -- --name main --master 192.168.1.29:50053 --incus 192.168.1.17:50052\"\n\n# Done! The agent is now running and configured.\n</code></pre>"},{"location":"en/master-agent-architecture/#setup-steps","title":"Setup Steps","text":"<ol> <li>Configure Port Forwarding on the Host</li> </ol> <p>Add a proxy device to forward a host port to the container's agent port:</p> <pre><code># On the host machine running Incus\nsudo incus config device add &lt;container_name&gt; sloth-proxy proxy \\\n  listen=tcp:0.0.0.0:&lt;host_port&gt; \\\n  connect=tcp:127.0.0.1:&lt;agent_port&gt;\n</code></pre> <p>Example: <pre><code>sudo incus config device add main sloth-proxy proxy \\\n  listen=tcp:0.0.0.0:50052 \\\n  connect=tcp:127.0.0.1:50051\n</code></pre></p> <ol> <li>Start Agent with Report Address</li> </ol> <p>Inside the container, start the agent with:</p> <p>Option A: Using Bootstrap Script (Recommended)</p> <pre><code># Inside the container\nbash &lt;(curl -fsSL https://raw.githubusercontent.com/chalkan3-sloth/sloth-runner/master/bootstrap.sh) \\\n  --name &lt;agent_name&gt; \\\n  --master &lt;master_ip&gt;:&lt;master_port&gt; \\\n  --incus &lt;host_ip&gt;:&lt;host_port&gt;\n</code></pre> <p>The <code>--incus</code> flag automatically sets:    - <code>--bind-address 0.0.0.0</code> (listen on all interfaces)    - <code>--report-address &lt;host_ip&gt;:&lt;host_port&gt;</code> (master connects via host)    - Creates and enables systemd service</p> <p>Option B: Manual Configuration</p> <ul> <li><code>--bind-address 0.0.0.0</code> to listen on all interfaces</li> <li><code>--report-address &lt;host_ip&gt;:&lt;host_port&gt;</code> to tell the master how to reach this agent</li> </ul> <pre><code># Inside the container\nsloth-runner agent start \\\n  --name &lt;agent_name&gt; \\\n  --master &lt;master_ip&gt;:&lt;master_port&gt; \\\n  --port &lt;agent_port&gt; \\\n  --bind-address 0.0.0.0 \\\n  --report-address &lt;host_ip&gt;:&lt;host_port&gt; \\\n  --daemon\n</code></pre> <p>Example: <pre><code># Inside container \"main\" on host 192.168.1.17\nsloth-runner agent start \\\n  --name main \\\n  --master 192.168.1.29:50053 \\\n  --port 50051 \\\n  --bind-address 0.0.0.0 \\\n  --report-address 192.168.1.17:50052 \\\n  --daemon\n</code></pre></p> <ol> <li>Systemd Service Configuration (Recommended)</li> </ol> <p>Create a systemd service file at <code>/etc/systemd/system/sloth-runner-agent.service</code>:</p> <pre><code>[Unit]\nDescription=Sloth Runner Agent - &lt;agent_name&gt;\nDocumentation=https://chalkan3.github.io/sloth-runner/\nAfter=network-online.target\nWants=network-online.target\n\n[Service]\nType=simple\nUser=root\nWorkingDirectory=/var/lib/sloth-runner\nRestart=always\nRestartSec=5s\nStartLimitInterval=60s\nStartLimitBurst=5\n\n# Agent Configuration\nExecStart=/usr/local/bin/sloth-runner agent start \\\n  --name &lt;agent_name&gt; \\\n  --master &lt;master_ip&gt;:&lt;master_port&gt; \\\n  --port &lt;agent_port&gt; \\\n  --bind-address 0.0.0.0 \\\n  --report-address &lt;host_ip&gt;:&lt;host_port&gt;\n\n# Logging\nStandardOutput=journal\nStandardError=journal\nSyslogIdentifier=sloth-runner-agent\n\n# Performance\nLimitNOFILE=65536\n\n# Security\nNoNewPrivileges=true\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>Then enable and start the service:</p> <pre><code>systemctl daemon-reload\nsystemctl enable sloth-runner-agent\nsystemctl start sloth-runner-agent\n</code></pre>"},{"location":"en/master-agent-architecture/#port-mapping-summary","title":"Port Mapping Summary","text":"Component Internal IP:Port Exposed Host IP:Port Master Sees Container Agent 10.x.x.x:50051 host_ip:50052 host_ip:50052 Host Agent host_ip:50051 host_ip:50051 host_ip:50051"},{"location":"en/master-agent-architecture/#troubleshooting","title":"Troubleshooting","text":"<p>Agent shows as \"Active\" but commands timeout: - Verify port forwarding is configured: <code>incus config device list &lt;container_name&gt;</code> - Check the agent is using <code>--report-address</code> with the host's IP and forwarded port - Test connectivity: <code>nc -zv &lt;host_ip&gt; &lt;host_port&gt;</code> from the master machine</p> <p>Multiple containers on the same host: - Use different host ports for each container (e.g., 50052, 50053, 50054) - Update each agent's <code>--report-address</code> accordingly </p>"},{"location":"en/monitoring/","title":"\ud83d\udcca Monitoring","text":"<p>Comprehensive monitoring and observability for your workflows.</p>"},{"location":"en/monitoring/#overview","title":"Overview","text":"<p>Built-in monitoring capabilities:</p> <ul> <li>\ud83d\udcc8 Metrics collection</li> <li>\ud83d\udcca Dashboard visualization</li> <li>\u26a0\ufe0f Alerting</li> <li>\ud83d\udd0d Distributed tracing</li> </ul>"},{"location":"en/monitoring/#features","title":"Features","text":""},{"location":"en/monitoring/#metrics","title":"Metrics","text":"<p>Automatic collection of workflow metrics: - Execution time - Success/failure rates - Resource usage - Task dependencies</p>"},{"location":"en/monitoring/#web-dashboard","title":"Web Dashboard","text":"<p>Real-time visualization: - Workflow status - Task progress - Agent health - System metrics</p>"},{"location":"en/monitoring/#alerting","title":"Alerting","text":"<p>Configurable alerts: <pre><code>workflow.define(\"monitored_workflow\", {\n    monitoring = {\n        alerts = {\n            on_failure = true,\n            on_slow_execution = { threshold = \"10m\" },\n            channels = [\"slack\", \"email\"]\n        }\n    }\n})\n</code></pre></p>"},{"location":"en/monitoring/#integration","title":"Integration","text":"<p>Works with popular monitoring tools: - Prometheus - Grafana - Datadog - New Relic</p>"},{"location":"en/monitoring/#learn-more","title":"Learn More","text":"<ul> <li>Web Dashboard</li> <li>Metrics Module</li> </ul>"},{"location":"en/nvim-plugin/","title":"\ud83e\udda5 Neovim Plugin","text":"<p>IDE-grade support for Sloth Runner DSL in Neovim/LunarVim</p> <p>The Sloth Runner Neovim plugin provides comprehensive IDE features for working with <code>.sloth</code> workflow files, including syntax highlighting, code completion, and integrated task execution.</p>"},{"location":"en/nvim-plugin/#features","title":"\u2728 Features","text":""},{"location":"en/nvim-plugin/#rich-syntax-highlighting","title":"\ud83c\udfa8 Rich Syntax Highlighting","text":"<ul> <li>Custom colors for DSL keywords, methods, and modules</li> <li>String interpolation highlighting with <code>${variable}</code> syntax</li> <li>File path detection for script and configuration files</li> <li>Environment variable highlighting</li> <li>Comment support with proper spell checking</li> </ul>"},{"location":"en/nvim-plugin/#smart-file-detection","title":"\ud83d\udcc1 Smart File Detection","text":"<ul> <li>Auto-detects <code>.sloth</code> files and applies proper highlighting</li> <li>Backward compatibility with <code>.lua</code> extension</li> <li>Custom file icons (\ud83e\udda5) in file explorers</li> </ul>"},{"location":"en/nvim-plugin/#code-completion","title":"\u26a1 Code Completion","text":"<ul> <li>Intelligent completion for DSL methods: <code>command</code>, <code>description</code>, <code>timeout</code>, etc.</li> <li>Module completion for built-in modules: <code>exec</code>, <code>fs</code>, <code>net</code>, <code>aws</code>, etc.</li> <li>Function completion for common patterns: <code>task()</code>, <code>workflow.define()</code></li> </ul>"},{"location":"en/nvim-plugin/#integrated-runner","title":"\ud83d\udd27 Integrated Runner","text":"<ul> <li>Run workflows directly from Neovim with <code>&lt;leader&gt;sr</code></li> <li>List tasks in current file with <code>&lt;leader&gt;sl</code></li> <li>Dry-run support for testing workflows</li> </ul>"},{"location":"en/nvim-plugin/#code-snippets-templates","title":"\ud83d\udccb Code Snippets &amp; Templates","text":"<ul> <li>Quick task creation with <code>_task</code> abbreviation</li> <li>Workflow templates with <code>_workflow</code> abbreviation</li> <li>Function templates with <code>_cmd</code> abbreviation</li> <li>Auto-generated templates for new <code>.sloth</code> files</li> </ul>"},{"location":"en/nvim-plugin/#text-objects-navigation","title":"\ud83c\udfaf Text Objects &amp; Navigation","text":"<ul> <li>Select task blocks with <code>vit</code> (visual in task)</li> <li>Select workflow blocks with <code>viw</code> (visual in workflow)</li> <li>Smart folding for collapsible code sections</li> <li>Intelligent indentation for DSL chaining</li> </ul>"},{"location":"en/nvim-plugin/#quick-setup","title":"\ud83d\ude80 Quick Setup","text":""},{"location":"en/nvim-plugin/#for-lunarvim-users","title":"For LunarVim Users","text":"<p>Add to your <code>~/.config/lvim/config.lua</code>:</p> <pre><code>-- Disable auto-formatting (recommended)\nlvim.format_on_save.enabled = false\n\n-- Configure sloth file icons\nrequire('nvim-web-devicons').setup {\n  override_by_extension = {\n    [\"sloth\"] = {\n      icon = \"\ud83e\udda5\",\n      color = \"#8B4513\",\n      name = \"SlothDSL\"\n    }\n  }\n}\n\n-- Key mappings for sloth runner\nlvim.keys.normal_mode[\"&lt;leader&gt;sr\"] = function()\n  local file = vim.api.nvim_buf_get_name(0)\n  if file:match(\"%.sloth$\") then\n    vim.cmd(\"split | terminal sloth-runner run -f \" .. vim.fn.shellescape(file))\n  end\nend\n\nlvim.keys.normal_mode[\"&lt;leader&gt;sl\"] = function()\n  local file = vim.api.nvim_buf_get_name(0)\n  if file:match(\"%.sloth$\") then\n    vim.cmd(\"split | terminal sloth-runner list -f \" .. vim.fn.shellescape(file))\n  end\nend\n\n-- Manual formatting command\nlvim.keys.normal_mode[\"&lt;leader&gt;sf\"] = \":SlothFormat&lt;CR&gt;\"\n</code></pre>"},{"location":"en/nvim-plugin/#key-mappings","title":"\ud83d\udcdd Key Mappings","text":"Key Action Description <code>&lt;leader&gt;sr</code> Run File Execute current <code>.sloth</code> workflow <code>&lt;leader&gt;sl</code> List Tasks Show all tasks in current file <code>&lt;leader&gt;st</code> Dry Run Test workflow without execution <code>&lt;leader&gt;sd</code> Debug Run with debug output <code>&lt;leader&gt;sf</code> Format Format current file (manual)"},{"location":"en/nvim-plugin/#installation","title":"\ud83d\udee0\ufe0f Installation","text":""},{"location":"en/nvim-plugin/#manual-installation","title":"Manual Installation","text":"<ol> <li> <p>Copy plugin files to your Neovim config: <pre><code>cp -r /path/to/sloth-runner/nvim-plugin ~/.config/nvim/sloth-runner\n</code></pre></p> </li> <li> <p>Add to your Neovim configuration: <pre><code>-- Add to init.lua\nvim.opt.runtimepath:append(\"~/.config/nvim/sloth-runner\")\n</code></pre></p> </li> <li> <p>Restart Neovim and open a <code>.sloth</code> file</p> </li> </ol>"},{"location":"en/nvim-plugin/#code-snippets","title":"\ud83c\udfa8 Code Snippets","text":""},{"location":"en/nvim-plugin/#quick-task-creation","title":"Quick Task Creation","text":"<p>Type <code>_task</code> and press Tab:</p> <pre><code>local task_name = task(\"\")\n    :description(\"\")\n    :command(function(params, deps)\n        -- TODO: implement\n        return true\n    end)\n    :build()\n</code></pre>"},{"location":"en/nvim-plugin/#quick-workflow-creation","title":"Quick Workflow Creation","text":"<p>Type <code>_workflow</code> and press Tab:</p> <pre><code>workflow.define(\"\", {\n    description = \"\",\n    version = \"1.0.0\",\n    tasks = {\n        -- tasks here\n    }\n})\n</code></pre>"},{"location":"en/nvim-plugin/#configuration-options","title":"\ud83d\udd27 Configuration Options","text":"<p>The plugin automatically configures itself when you open <code>.sloth</code> files. Key features include:</p> <ul> <li>Automatic filetype detection for <code>.sloth</code> extensions</li> <li>Syntax highlighting with custom color scheme</li> <li>Code completion using omnifunc</li> <li>Smart indentation for DSL method chaining</li> <li>Code folding for task and workflow blocks</li> <li>Key mappings for common operations</li> </ul>"},{"location":"en/nvim-plugin/#troubleshooting","title":"\ud83d\udc1b Troubleshooting","text":""},{"location":"en/nvim-plugin/#syntax-highlighting-not-working","title":"Syntax Highlighting Not Working","text":"<ul> <li>Ensure the file has <code>.sloth</code> extension</li> <li>Run <code>:set filetype=sloth</code> manually if needed</li> <li>Check if plugin files are in correct location</li> </ul>"},{"location":"en/nvim-plugin/#key-mappings-not-working","title":"Key Mappings Not Working","text":"<ul> <li>Verify <code>sloth-runner</code> is in your PATH</li> <li>Check for conflicts with other plugins</li> <li>Use <code>:map &lt;leader&gt;sr</code> to verify mapping exists</li> </ul>"},{"location":"en/nvim-plugin/#code-completion-not-showing","title":"Code Completion Not Showing","text":"<ul> <li>Ensure completion is enabled: <code>:set completeopt=menu,menuone,noselect</code></li> <li>Try triggering manually with <code>&lt;C-x&gt;&lt;C-o&gt;</code></li> <li>Check omnifunc setting: <code>:set omnifunc?</code></li> </ul>"},{"location":"en/nvim-plugin/#example-workflow","title":"\ud83d\udcd6 Example Workflow","text":"<pre><code>-- deployment.sloth\nlocal deploy_task = task(\"deploy_app\")\n    :description(\"Deploy application to production\")\n    :command(function(params, deps)\n        local result = exec.run(\"kubectl apply -f deployment.yaml\")\n        if not result.success then\n            log.error(\"Deployment failed: \" .. result.stderr)\n            return false\n        end\n\n        log.info(\"\ud83d\ude80 Deployment successful!\")\n        return true\n    end)\n    :timeout(300)\n    :retries(3)\n    :build()\n\nworkflow.define(\"production_deployment\", {\n    description = \"Production deployment workflow\",\n    version = \"1.0.0\",\n    tasks = { deploy_task }\n})\n</code></pre> <p>With the plugin installed, this file will have: - Syntax highlighting for keywords, functions, and strings - Code completion when typing method names - Quick execution with <code>&lt;leader&gt;sr</code> - Task listing with <code>&lt;leader&gt;sl</code></p> <p>The Neovim plugin makes writing Sloth workflows a breeze with full IDE support. Start creating powerful automation workflows with confidence! \ud83e\udda5\u2728</p>"},{"location":"en/plugin-development/","title":"\ud83d\udd0c Plugin Development","text":"<p>Building Extensions for Sloth Runner Platform</p> <p>Sloth Runner provides a powerful plugin system that allows developers to extend the platform with custom functionality. This guide covers everything you need to know to develop your own plugins.</p>"},{"location":"en/plugin-development/#plugin-architecture","title":"\ud83c\udfd7\ufe0f Plugin Architecture","text":""},{"location":"en/plugin-development/#plugin-types","title":"Plugin Types","text":"<p>Sloth Runner supports several types of plugins:</p> <ol> <li>\ud83c\udf19 Lua Modules - Extend the DSL with new functions and capabilities</li> <li>\u26a1 Command Processors - Add new CLI commands and operations</li> <li>\ud83c\udfa8 UI Extensions - Enhance the web dashboard and interface</li> <li>\ud83d\udd17 Integrations - Connect with external tools and services</li> <li>\ud83e\udda5 Editor Plugins - IDE/Editor extensions (like our Neovim plugin)</li> </ol>"},{"location":"en/plugin-development/#core-components","title":"Core Components","text":"<pre><code>sloth-runner/\n\u251c\u2500\u2500 plugins/\n\u2502   \u251c\u2500\u2500 lua-modules/       # Lua DSL extensions\n\u2502   \u251c\u2500\u2500 commands/          # CLI command plugins\n\u2502   \u251c\u2500\u2500 ui/               # Web UI extensions\n\u2502   \u251c\u2500\u2500 integrations/     # Third-party integrations\n\u2502   \u2514\u2500\u2500 editors/          # Editor/IDE plugins\n\u2514\u2500\u2500 internal/\n    \u2514\u2500\u2500 plugin/           # Plugin system core\n</code></pre>"},{"location":"en/plugin-development/#developing-lua-module-plugins","title":"\ud83c\udf19 Developing Lua Module Plugins","text":""},{"location":"en/plugin-development/#basic-structure","title":"Basic Structure","text":"<p>Create a new Lua module that extends the DSL:</p> <pre><code>-- plugins/lua-modules/my-module/init.lua\nlocal M = {}\n\n-- Module metadata\nM._NAME = \"my-module\"\nM._VERSION = \"1.0.0\"\nM._DESCRIPTION = \"Custom functionality for Sloth Runner\"\n\n-- Public API\nfunction M.hello(name)\n    return string.format(\"Hello, %s from my custom module!\", name or \"World\")\nend\n\nfunction M.custom_task(config)\n    return {\n        execute = function(params)\n            log.info(\"\ud83d\udd0c Executing custom task: \" .. config.name)\n            -- Custom task logic here\n            return true\n        end,\n        validate = function()\n            return config.name ~= nil\n        end\n    }\nend\n\n-- Register module functions\nfunction M.register()\n    -- Make functions available in DSL\n    _G.my_module = M\n\n    -- Register custom task type\n    task.register_type(\"custom\", M.custom_task)\nend\n\nreturn M\n</code></pre>"},{"location":"en/plugin-development/#using-custom-modules-in-workflows","title":"Using Custom Modules in Workflows","text":"<pre><code>-- workflow.sloth\nlocal my_task = task(\"test_custom\")\n    :type(\"custom\", { name = \"test\" })\n    :description(\"Testing custom plugin\")\n    :build()\n\n-- Direct module usage\nlocal greeting = my_module.hello(\"Developer\")\nlog.info(greeting)\n\nworkflow.define(\"plugin_test\", {\n    description = \"Testing custom plugin\",\n    tasks = { my_task }\n})\n</code></pre>"},{"location":"en/plugin-development/#plugin-registration","title":"Plugin Registration","text":"<p>Create a plugin manifest:</p> <pre><code># plugins/lua-modules/my-module/plugin.yaml\nname: my-module\nversion: 1.0.0\ndescription: Custom functionality for Sloth Runner\ntype: lua-module\nauthor: Your Name\nlicense: MIT\n\nentry_point: init.lua\ndependencies:\n  - sloth-runner: \"&gt;=1.0.0\"\n\npermissions:\n  - filesystem.read\n  - network.http\n  - system.exec\n\nconfiguration:\n  settings:\n    api_key:\n      type: string\n      required: false\n      description: \"API key for external service\"\n</code></pre>"},{"location":"en/plugin-development/#command-plugin-development","title":"\u26a1 Command Plugin Development","text":""},{"location":"en/plugin-development/#cli-command-structure","title":"CLI Command Structure","text":"<pre><code>// plugins/commands/my-command/main.go\npackage main\n\nimport (\n    \"github.com/spf13/cobra\"\n    \"github.com/chalkan3-sloth/sloth-runner/pkg/plugin\"\n)\n\ntype MyCommandPlugin struct {\n    config *MyConfig\n}\n\ntype MyConfig struct {\n    Setting1 string `json:\"setting1\"`\n    Setting2 int    `json:\"setting2\"`\n}\n\nfunc (p *MyCommandPlugin) Name() string {\n    return \"my-command\"\n}\n\nfunc (p *MyCommandPlugin) Command() *cobra.Command {\n    cmd := &amp;cobra.Command{\n        Use:   \"my-command\",\n        Short: \"Custom command functionality\",\n        Long:  \"Extended description of custom command\",\n        RunE:  p.execute,\n    }\n\n    cmd.Flags().StringVar(&amp;p.config.Setting1, \"setting1\", \"\", \"Custom setting\")\n    cmd.Flags().IntVar(&amp;p.config.Setting2, \"setting2\", 0, \"Another setting\")\n\n    return cmd\n}\n\nfunc (p *MyCommandPlugin) execute(cmd *cobra.Command, args []string) error {\n    log.Info(\"\ud83d\udd0c Executing custom command with settings:\", \n        \"setting1\", p.config.Setting1,\n        \"setting2\", p.config.Setting2)\n\n    // Custom command logic here\n    return nil\n}\n\nfunc main() {\n    plugin := &amp;MyCommandPlugin{\n        config: &amp;MyConfig{},\n    }\n\n    plugin.Register()\n}\n</code></pre>"},{"location":"en/plugin-development/#command-plugin-manifest","title":"Command Plugin Manifest","text":"<pre><code># plugins/commands/my-command/plugin.yaml\nname: my-command\nversion: 1.0.0\ndescription: Custom CLI command for Sloth Runner\ntype: command\nauthor: Your Name\n\nbuild:\n  binary: my-command\n  source: main.go\n\ninstallation:\n  target: commands/my-command\n</code></pre>"},{"location":"en/plugin-development/#ui-extension-development","title":"\ud83c\udfa8 UI Extension Development","text":""},{"location":"en/plugin-development/#react-component-plugin","title":"React Component Plugin","text":"<pre><code>// plugins/ui/my-dashboard/src/MyDashboardPlugin.tsx\nimport React from 'react';\nimport { PluginComponent, useSlothApi } from '@sloth-runner/ui-sdk';\n\ninterface MyDashboardProps {\n  config: {\n    title: string;\n    refreshInterval: number;\n  };\n}\n\nexport const MyDashboardPlugin: PluginComponent&lt;MyDashboardProps&gt; = ({ config }) =&gt; {\n  const { data, loading } = useSlothApi('/api/custom-metrics');\n\n  return (\n    &lt;div className=\"my-dashboard-plugin\"&gt;\n      &lt;h2&gt;{config.title}&lt;/h2&gt;\n      {loading ? (\n        &lt;div&gt;Loading custom metrics...&lt;/div&gt;\n      ) : (\n        &lt;div className=\"metrics-grid\"&gt;\n          {data?.map((metric: any) =&gt; (\n            &lt;div key={metric.id} className=\"metric-card\"&gt;\n              &lt;h3&gt;{metric.name}&lt;/h3&gt;\n              &lt;div className=\"metric-value\"&gt;{metric.value}&lt;/div&gt;\n            &lt;/div&gt;\n          ))}\n        &lt;/div&gt;\n      )}\n    &lt;/div&gt;\n  );\n};\n\n// Plugin registration\nexport const plugin = {\n  name: 'my-dashboard',\n  version: '1.0.0',\n  component: MyDashboardPlugin,\n  defaultConfig: {\n    title: 'Custom Dashboard',\n    refreshInterval: 30000,\n  },\n};\n</code></pre>"},{"location":"en/plugin-development/#ui-plugin-manifest","title":"UI Plugin Manifest","text":"<pre><code># plugins/ui/my-dashboard/plugin.yaml\nname: my-dashboard\nversion: 1.0.0\ndescription: Custom dashboard for Sloth Runner\ntype: ui-extension\nauthor: Your Name\n\nbuild:\n  framework: react\n  entry: src/index.tsx\n  output: dist/\n\ninstallation:\n  target: ui/plugins/my-dashboard\n\ndependencies:\n  - \"@sloth-runner/ui-sdk\": \"^1.0.0\"\n  - \"react\": \"^18.0.0\"\n</code></pre>"},{"location":"en/plugin-development/#integration-plugin-development","title":"\ud83d\udd17 Integration Plugin Development","text":""},{"location":"en/plugin-development/#external-service-integration","title":"External Service Integration","text":"<pre><code>// plugins/integrations/my-service/integration.go\npackage main\n\nimport (\n    \"context\"\n    \"net/http\"\n    \"github.com/chalkan3-sloth/sloth-runner/pkg/integration\"\n)\n\ntype MyServiceIntegration struct {\n    client *http.Client\n    apiKey string\n}\n\nfunc (i *MyServiceIntegration) Name() string {\n    return \"my-service\"\n}\n\nfunc (i *MyServiceIntegration) Initialize(config map[string]interface{}) error {\n    i.apiKey = config[\"api_key\"].(string)\n    i.client = &amp;http.Client{}\n    return nil\n}\n\nfunc (i *MyServiceIntegration) GetMetrics(ctx context.Context) ([]integration.Metric, error) {\n    // Fetch metrics from external service\n    metrics := []integration.Metric{\n        {\n            Name:  \"custom_metric\",\n            Value: 42,\n            Tags:  map[string]string{\"source\": \"my-service\"},\n        },\n    }\n    return metrics, nil\n}\n\nfunc (i *MyServiceIntegration) SendNotification(ctx context.Context, msg integration.Message) error {\n    // Send notification via external service\n    return nil\n}\n\nfunc main() {\n    integration := &amp;MyServiceIntegration{}\n    integration.Register()\n}\n</code></pre>"},{"location":"en/plugin-development/#plugin-development-tools","title":"\ud83d\udee0\ufe0f Plugin Development Tools","text":""},{"location":"en/plugin-development/#plugin-generator","title":"Plugin Generator","text":"<p>Create new plugins quickly with the generator:</p> <pre><code># Generate a new Lua module plugin\nsloth-runner plugin generate --type=lua-module --name=my-module\n\n# Generate a CLI command plugin\nsloth-runner plugin generate --type=command --name=my-command\n\n# Generate a UI extension\nsloth-runner plugin generate --type=ui --name=my-dashboard\n</code></pre>"},{"location":"en/plugin-development/#development-environment","title":"Development Environment","text":"<pre><code># Start development server with plugin hot-reload\nsloth-runner dev --plugins-dir=./plugins\n\n# Test plugin locally\nsloth-runner plugin test ./plugins/my-plugin\n\n# Build plugin for distribution\nsloth-runner plugin build ./plugins/my-plugin --output=dist/\n</code></pre>"},{"location":"en/plugin-development/#plugin-testing","title":"Plugin Testing","text":"<pre><code>// plugins/my-plugin/plugin_test.go\npackage main\n\nimport (\n    \"testing\"\n    \"github.com/chalkan3-sloth/sloth-runner/pkg/plugin/testing\"\n)\n\nfunc TestMyPlugin(t *testing.T) {\n    // Create test environment\n    env := plugintest.NewEnvironment(t)\n\n    // Load plugin\n    plugin, err := env.LoadPlugin(\"./\")\n    if err != nil {\n        t.Fatal(err)\n    }\n\n    // Test plugin functionality\n    result, err := plugin.Execute(map[string]interface{}{\n        \"test_param\": \"value\",\n    })\n\n    if err != nil {\n        t.Fatal(err)\n    }\n\n    // Verify results\n    if result.Status != \"success\" {\n        t.Errorf(\"Expected success, got %s\", result.Status)\n    }\n}\n</code></pre>"},{"location":"en/plugin-development/#plugin-distribution","title":"\ud83d\udce6 Plugin Distribution","text":""},{"location":"en/plugin-development/#plugin-registry","title":"Plugin Registry","text":"<p>Publish your plugin to the Sloth Runner plugin registry:</p> <pre><code># Login to registry\nsloth-runner registry login\n\n# Publish plugin\nsloth-runner plugin publish ./my-plugin\n\n# Install published plugin\nsloth-runner plugin install my-username/my-plugin\n</code></pre>"},{"location":"en/plugin-development/#plugin-marketplace","title":"Plugin Marketplace","text":"<p>Browse and discover plugins:</p> <pre><code># Search plugins\nsloth-runner plugin search \"kubernetes\"\n\n# Get plugin info\nsloth-runner plugin info kubernetes-operator\n\n# Install from marketplace\nsloth-runner plugin install --marketplace kubernetes-operator\n</code></pre>"},{"location":"en/plugin-development/#security-best-practices","title":"\ud83d\udd12 Security &amp; Best Practices","text":""},{"location":"en/plugin-development/#security-guidelines","title":"Security Guidelines","text":"<ol> <li>\ud83d\udee1\ufe0f Principle of Least Privilege - Request only necessary permissions</li> <li>\ud83d\udd10 Input Validation - Always validate user input and configuration</li> <li>\ud83d\udeab Avoid Global State - Keep plugin state isolated</li> <li>\ud83d\udcdd Error Handling - Provide clear error messages and logging</li> <li>\ud83e\uddea Testing - Write comprehensive tests for all functionality</li> </ol>"},{"location":"en/plugin-development/#code-quality","title":"Code Quality","text":"<pre><code>// Good: Clear error handling\nfunc (p *MyPlugin) Execute(params map[string]interface{}) (*Result, error) {\n    value, ok := params[\"required_param\"].(string)\n    if !ok {\n        return nil, fmt.Errorf(\"required_param must be a string\")\n    }\n\n    if value == \"\" {\n        return nil, fmt.Errorf(\"required_param cannot be empty\")\n    }\n\n    // Process with validated input\n    result := p.process(value)\n    return result, nil\n}\n</code></pre>"},{"location":"en/plugin-development/#documentation-standards","title":"Documentation Standards","text":"<p>Every plugin should include:</p> <ul> <li>\ud83d\udccb README.md - Installation and usage instructions</li> <li>\ud83d\udcda API Documentation - Function/method documentation</li> <li>\ud83d\udcd6 Examples - Working code examples</li> <li>\ud83e\uddea Tests - Unit and integration tests</li> <li>\ud83d\udcc4 License - Clear licensing information</li> </ul>"},{"location":"en/plugin-development/#advanced-plugin-features","title":"\ud83d\ude80 Advanced Plugin Features","text":""},{"location":"en/plugin-development/#plugin-hooks","title":"Plugin Hooks","text":"<pre><code>-- Respond to system events\nfunction M.on_task_start(task_id, context)\n    log.info(\"\ud83d\udd0c Task starting: \" .. task_id)\n    -- Custom logic before task execution\nend\n\nfunction M.on_task_complete(task_id, result)\n    log.info(\"\ud83d\udd0c Task completed: \" .. task_id)\n    -- Custom logic after task completion\nend\n\n-- Register hooks\nM.hooks = {\n    [\"task.start\"] = M.on_task_start,\n    [\"task.complete\"] = M.on_task_complete,\n}\n</code></pre>"},{"location":"en/plugin-development/#plugin-communication","title":"Plugin Communication","text":"<pre><code>-- Inter-plugin communication\nfunction M.send_to_plugin(plugin_name, message)\n    local plugin = sloth.plugins.get(plugin_name)\n    if plugin and plugin.receive_message then\n        return plugin.receive_message(message)\n    end\n    return nil\nend\n\nfunction M.receive_message(message)\n    log.info(\"\ud83d\udd0c Received message: \" .. message.type)\n    -- Handle incoming message\n    return { status = \"received\" }\nend\n</code></pre>"},{"location":"en/plugin-development/#configuration-management","title":"Configuration Management","text":"<pre><code># plugins/my-plugin/config.schema.json\n{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"api_endpoint\": {\n      \"type\": \"string\",\n      \"format\": \"uri\",\n      \"description\": \"API endpoint URL\"\n    },\n    \"timeout\": {\n      \"type\": \"integer\",\n      \"minimum\": 1,\n      \"maximum\": 300,\n      \"default\": 30\n    }\n  },\n  \"required\": [\"api_endpoint\"]\n}\n</code></pre>"},{"location":"en/plugin-development/#examples-templates","title":"\ud83d\udcda Examples &amp; Templates","text":""},{"location":"en/plugin-development/#complete-plugin-example","title":"Complete Plugin Example","text":"<p>Check out these example plugins:</p> <ul> <li>Kubernetes Operator Plugin - Manage K8s resources</li> <li>Slack Integration Plugin - Send notifications</li> <li>Monitoring Dashboard Plugin - Custom metrics UI</li> </ul>"},{"location":"en/plugin-development/#plugin-templates","title":"Plugin Templates","text":"<p>Use official templates for quick starts:</p> <pre><code># Use template\nsloth-runner plugin init --template=lua-module my-plugin\nsloth-runner plugin init --template=go-command my-command\nsloth-runner plugin init --template=react-ui my-dashboard\n</code></pre>"},{"location":"en/plugin-development/#community-support","title":"\ud83d\udcac Community &amp; Support","text":""},{"location":"en/plugin-development/#getting-help","title":"Getting Help","text":"<ul> <li>\ud83d\udcd6 Plugin API Documentation</li> <li>\ud83d\udcac Discord Community - #plugin-development</li> <li>\ud83d\udc1b GitHub Issues - Bug reports and feature requests</li> <li>\ud83d\udce7 Plugin Mailing List - Development discussions</li> </ul>"},{"location":"en/plugin-development/#contributing","title":"Contributing","text":"<p>We welcome plugin contributions! See our Contributing Guide for details on:</p> <ul> <li>Plugin submission process</li> <li>Code review guidelines</li> <li>Documentation requirements</li> <li>Testing standards</li> </ul> <p>Start building amazing plugins for Sloth Runner today! The platform's extensible architecture makes it easy to add exactly the functionality you need. \ud83d\udd0c\u2728</p>"},{"location":"en/quick-start/","title":"\u26a1 Quick Start Guide","text":"<p>Get up and running with Sloth Runner in under 10 minutes! This guide will walk you through installation, basic usage, and your first distributed task execution.</p>"},{"location":"en/quick-start/#installation","title":"\ud83d\ude80 Installation","text":""},{"location":"en/quick-start/#option-1-download-binary","title":"Option 1: Download Binary","text":"<pre><code># Download latest release\ncurl -L https://github.com/chalkan3-sloth/sloth-runner/releases/latest/download/sloth-runner-linux-amd64 -o sloth-runner\nchmod +x sloth-runner\nsudo mv sloth-runner /usr/local/bin/\n</code></pre>"},{"location":"en/quick-start/#option-2-build-from-source","title":"Option 2: Build from Source","text":"<pre><code># Clone repository\ngit clone https://github.com/chalkan3-sloth/sloth-runner.git\ncd sloth-runner\n\n# Build binary\ngo build -o sloth-runner ./cmd/sloth-runner\n\n# Add to PATH\nexport PATH=$PATH:$(pwd)\n</code></pre>"},{"location":"en/quick-start/#option-3-docker","title":"Option 3: Docker","text":"<pre><code># Pull official image\ndocker pull slothrunner/sloth-runner:latest\n\n# Create alias for easy usage\nalias sloth-runner='docker run --rm -v $(pwd):/workspace slothrunner/sloth-runner'\n</code></pre>"},{"location":"en/quick-start/#verify-installation","title":"\ud83d\udccb Verify Installation","text":"<pre><code># Check version\nsloth-runner --version\n\n# View available commands\nsloth-runner --help\n</code></pre> <p>Expected output: <pre><code>Sloth Runner v2.0.0\nA powerful task orchestration platform with Lua scripting\n</code></pre></p>"},{"location":"en/quick-start/#your-first-task","title":"\ud83c\udfaf Your First Task","text":"<p>Create your first Lua task file:</p> <pre><code># Create a simple task file\ncat &gt; hello-world.sloth &lt;&lt; 'EOF'\nModern DSLs = {\n    hello_world = {\n        description = \"My first Sloth Runner task\",\n        tasks = {\n            greet = {\n                name = \"greet\",\n                description = \"Say hello to the world\",\n                command = function()\n                    log.info(\"\ud83c\udf89 Hello from Sloth Runner!\")\n\n                    -- Get system information\n                    local hostname, _ = exec.run(\"hostname\")\n                    local whoami, _ = exec.run(\"whoami\")\n\n                    log.info(\"Running on: \" .. hostname)\n                    log.info(\"User: \" .. whoami)\n\n                    -- Use state management\n                    state.set(\"last_greeting\", os.time())\n                    local count = state.increment(\"greeting_count\", 1)\n\n                    log.info(\"This is greeting #\" .. count)\n\n                    return true, \"Hello World task completed successfully!\"\n                end\n            },\n\n            system_info = {\n                name = \"system_info\", \n                description = \"Display system metrics\",\n                depends_on = \"greet\",\n                command = function()\n                    log.info(\"\ud83d\udcca System Information:\")\n\n                    -- Get system metrics\n                    local cpu = metrics.system_cpu()\n                    local memory = metrics.system_memory()\n                    local disk = metrics.system_disk()\n\n                    log.info(\"CPU Usage: \" .. string.format(\"%.1f%%\", cpu))\n                    log.info(\"Memory: \" .. string.format(\"%.1f%% (%.0f MB used)\", \n                        memory.percent, memory.used_mb))\n                    log.info(\"Disk: \" .. string.format(\"%.1f%% (%.1f GB used)\", \n                        disk.percent, disk.used_gb))\n\n                    -- Record metrics\n                    metrics.gauge(\"quickstart_cpu\", cpu)\n                    metrics.gauge(\"quickstart_memory\", memory.percent)\n\n                    return true, \"System info collected\"\n                end\n            }\n        }\n    }\n}\nEOF\n</code></pre>"},{"location":"en/quick-start/#run-your-first-task","title":"\ud83c\udfc3\u200d\u2642\ufe0f Run Your First Task","text":"<pre><code># Execute the task\nsloth-runner run -f hello-world.sloth\n\n# Or run specific task\nsloth-runner run -f hello-world.sloth -t greet\n</code></pre> <p>Expected output: <pre><code>2024-01-15 10:30:00 INFO \ud83c\udf89 Hello from Sloth Runner!\n2024-01-15 10:30:00 INFO Running on: my-computer\n2024-01-15 10:30:00 INFO User: myuser\n2024-01-15 10:30:00 INFO This is greeting #1\n2024-01-15 10:30:01 INFO \ud83d\udcca System Information:\n2024-01-15 10:30:01 INFO CPU Usage: 15.2%\n2024-01-15 10:30:01 INFO Memory: 45.8% (7520 MB used)\n2024-01-15 10:30:01 INFO Disk: 67.3% (234.5 GB used)\n\u2705 Task 'hello_world' completed successfully!\n</code></pre></p>"},{"location":"en/quick-start/#setting-up-distributed-execution","title":"\ud83c\udf10 Setting Up Distributed Execution","text":""},{"location":"en/quick-start/#step-1-start-master-server","title":"Step 1: Start Master Server","text":"<pre><code># Start master on your main machine (e.g., 192.168.1.100)\nsloth-runner master --port 50053 --bind-address 192.168.1.100\n\n# Or with enhanced features\nsloth-runner master --port 50053 --metrics-port 8080 --dashboard-port 3000\n</code></pre>"},{"location":"en/quick-start/#step-2-deploy-remote-agents","title":"Step 2: Deploy Remote Agents","text":"<p>On remote machine 1 (192.168.1.101): <pre><code># Download sloth-runner binary to remote machine\nscp sloth-runner user@192.168.1.101:/usr/local/bin/\n\n# SSH and start agent\nssh user@192.168.1.101\nsloth-runner agent start \\\n    --name agent-1 \\\n    --master 192.168.1.100:50053 \\\n    --port 50051 \\\n    --bind-address 192.168.1.101\n</code></pre></p> <p>On remote machine 2 (192.168.1.102): <pre><code># SSH and start agent  \nssh user@192.168.1.102\nsloth-runner agent start \\\n    --name agent-2 \\\n    --master 192.168.1.100:50053 \\\n    --port 50051 \\\n    --bind-address 192.168.1.102\n</code></pre></p>"},{"location":"en/quick-start/#step-3-verify-agent-registration","title":"Step 3: Verify Agent Registration","text":"<pre><code># List registered agents\nsloth-runner agent list --master 192.168.1.100:50053\n</code></pre> <p>Expected output: <pre><code>Registered Agents:\n  agent-1    192.168.1.101:50051    Active    2s ago\n  agent-2    192.168.1.102:50051    Active    1s ago\n</code></pre></p>"},{"location":"en/quick-start/#step-4-run-distributed-tasks","title":"Step 4: Run Distributed Tasks","text":"<pre><code># Execute command on specific agent\nsloth-runner agent run agent-1 \"echo 'Hello from Agent 1'\" --master 192.168.1.100:50053\n\n# Execute on all agents\nsloth-runner agent run agent-1 \"uptime\" --master 192.168.1.100:50053 &amp;\nsloth-runner agent run agent-2 \"uptime\" --master 192.168.1.100:50053 &amp;\nwait\n</code></pre>"},{"location":"en/quick-start/#exploring-advanced-features","title":"\ud83d\udcca Exploring Advanced Features","text":""},{"location":"en/quick-start/#state-management-example","title":"State Management Example","text":"<pre><code>-- Create state-demo.sloth\nModern DSLs = {\n    state_demo = {\n        description = \"Demonstrate state management capabilities\",\n        tasks = {\n            setup_state = {\n                name = \"setup_state\",\n                description = \"Initialize application state\", \n                command = function()\n                    -- Initialize configuration\n                    state.set(\"app_config\", {\n                        version = \"1.0.0\",\n                        environment = \"development\",\n                        debug = true\n                    })\n\n                    -- Set TTL for session data (5 minutes)\n                    state.set(\"session_token\", \"abc123xyz\", 300)\n\n                    -- Initialize counters\n                    state.set(\"api_calls\", 0)\n                    state.set(\"errors\", 0)\n\n                    log.info(\"\u2705 Application state initialized\")\n                    return true, \"State setup completed\"\n                end\n            },\n\n            simulate_usage = {\n                name = \"simulate_usage\",\n                description = \"Simulate application usage\",\n                depends_on = \"setup_state\",\n                command = function()\n                    -- Simulate API calls\n                    for i = 1, 10 do\n                        local calls = state.increment(\"api_calls\", 1)\n\n                        -- Simulate occasional error\n                        if math.random(1, 10) &gt; 8 then\n                            state.increment(\"errors\", 1)\n                            log.warn(\"Simulated error occurred\")\n                        end\n\n                        -- Add to processing queue\n                        state.list_push(\"processing_queue\", {\n                            id = \"req_\" .. i,\n                            timestamp = os.time(),\n                            status = \"pending\"\n                        })\n\n                        exec.run(\"sleep 0.1\") -- Small delay\n                    end\n\n                    local total_calls = state.get(\"api_calls\")\n                    local total_errors = state.get(\"errors\")\n                    local queue_size = state.list_length(\"processing_queue\")\n\n                    log.info(\"\ud83d\udcca Usage Summary:\")\n                    log.info(\"  API Calls: \" .. total_calls)\n                    log.info(\"  Errors: \" .. total_errors)\n                    log.info(\"  Queue Size: \" .. queue_size)\n\n                    return true, \"Usage simulation completed\"\n                end\n            },\n\n            process_queue = {\n                name = \"process_queue\",\n                description = \"Process items in queue with locking\",\n                depends_on = \"simulate_usage\",\n                command = function()\n                    -- Process queue with distributed lock\n                    state.with_lock(\"queue_processing\", function()\n                        log.info(\"\ud83d\udd12 Processing queue with exclusive lock...\")\n\n                        local processed = 0\n                        while state.list_length(\"processing_queue\") &gt; 0 do\n                            local item = state.list_pop(\"processing_queue\")\n                            log.info(\"Processing item: \" .. item.id)\n                            processed = processed + 1\n                        end\n\n                        log.info(\"\u2705 Processed \" .. processed .. \" items\")\n                        state.set(\"last_processing_time\", os.time())\n\n                    end, 30) -- 30 second timeout\n\n                    return true, \"Queue processing completed\"\n                end\n            }\n        }\n    }\n}\n</code></pre> <p>Run the state demo: <pre><code>sloth-runner run -f state-demo.sloth\n</code></pre></p>"},{"location":"en/quick-start/#metrics-monitoring-example","title":"Metrics Monitoring Example","text":"<pre><code>-- Create metrics-demo.sloth  \nModern DSLs = {\n    metrics_demo = {\n        description = \"Demonstrate metrics and monitoring\",\n        tasks = {\n            collect_metrics = {\n                name = \"collect_metrics\",\n                description = \"Collect system and custom metrics\",\n                command = function()\n                    log.info(\"\ud83d\udcca Collecting system metrics...\")\n\n                    -- System metrics\n                    local cpu = metrics.system_cpu()\n                    local memory = metrics.system_memory() \n                    local disk = metrics.system_disk()\n\n                    log.info(\"System Status:\")\n                    log.info(\"  CPU: \" .. string.format(\"%.1f%%\", cpu))\n                    log.info(\"  Memory: \" .. string.format(\"%.1f%%\", memory.percent))\n                    log.info(\"  Disk: \" .. string.format(\"%.1f%%\", disk.percent))\n\n                    -- Custom metrics\n                    metrics.gauge(\"demo_cpu_usage\", cpu)\n                    metrics.counter(\"demo_executions\", 1)\n\n                    -- Performance timer\n                    local processing_time = metrics.timer(\"data_processing\", function()\n                        -- Simulate data processing\n                        local sum = 0\n                        for i = 1, 1000000 do\n                            sum = sum + math.sqrt(i)\n                        end\n                        return sum\n                    end)\n\n                    log.info(\"\u23f1\ufe0f Processing took: \" .. string.format(\"%.2f ms\", processing_time))\n\n                    -- Health check\n                    local health = metrics.health_status()\n                    log.info(\"\ud83c\udfe5 Overall health: \" .. health.overall)\n\n                    -- Alert if CPU is high\n                    if cpu &gt; 50 then\n                        metrics.alert(\"high_cpu_demo\", {\n                            level = \"warning\",\n                            message = \"CPU usage is elevated: \" .. string.format(\"%.1f%%\", cpu),\n                            value = cpu\n                        })\n                    end\n\n                    return true, \"Metrics collection completed\"\n                end\n            }\n        }\n    }\n}\n</code></pre> <p>Run the metrics demo: <pre><code>sloth-runner run -f metrics-demo.sloth\n</code></pre></p>"},{"location":"en/quick-start/#access-web-dashboard","title":"\ud83c\udf10 Access Web Dashboard","text":"<p>If you started the master with dashboard support:</p> <pre><code># Open web dashboard\nopen http://192.168.1.100:3000\n\n# View metrics endpoint\ncurl http://192.168.1.100:8080/metrics\n\n# Check health status\ncurl http://192.168.1.100:8080/health\n</code></pre>"},{"location":"en/quick-start/#whats-next","title":"\ud83d\udcda What's Next?","text":""},{"location":"en/quick-start/#explore-core-concepts","title":"Explore Core Concepts","text":"<ul> <li>\ud83d\udcd6 Core Concepts - Understand tasks, workflows, and state</li> <li>\ud83d\udd27 CLI Commands - Master all available commands</li> <li>\ud83c\udf19 Lua API - Deep dive into scripting capabilities</li> </ul>"},{"location":"en/quick-start/#advanced-features","title":"Advanced Features","text":"<ul> <li>\ud83d\udcbe State Management - Persistent state and locks</li> <li>\ud83d\udcca Metrics &amp; Monitoring - Observability and alerting</li> <li>\ud83d\ude80 Agent Improvements - Enterprise features</li> </ul>"},{"location":"en/quick-start/#cloud-integrations","title":"Cloud Integrations","text":"<ul> <li>\u2601\ufe0f AWS Integration - Deploy and manage AWS resources</li> <li>\ud83c\udf29\ufe0f GCP Integration - Google Cloud Platform tasks</li> <li>\ud83d\udd37 Azure Integration - Microsoft Azure automation</li> </ul>"},{"location":"en/quick-start/#infrastructure-as-code","title":"Infrastructure as Code","text":"<ul> <li>\ud83d\udc33 Docker - Container management</li> <li>\ud83c\udfd7\ufe0f Pulumi - Modern infrastructure as code</li> <li>\ud83c\udf0d Terraform - Infrastructure provisioning</li> </ul>"},{"location":"en/quick-start/#getting-help","title":"\ud83c\udd98 Getting Help","text":""},{"location":"en/quick-start/#documentation","title":"Documentation","text":"<ul> <li>\ud83d\udcda Full Documentation</li> <li>\ud83d\udd0d API Reference</li> <li>\ud83d\udca1 Examples</li> </ul>"},{"location":"en/quick-start/#community","title":"Community","text":"<ul> <li>\ud83d\udcac GitHub Discussions</li> <li>\ud83d\udc1b Issue Tracker</li> <li>\ud83d\udce7 Email Support</li> </ul>"},{"location":"en/quick-start/#quick-troubleshooting","title":"Quick Troubleshooting","text":"<p>Agent won't connect to master? <pre><code># Check network connectivity\ntelnet 192.168.1.100 50053\n\n# Verify master is running\nsloth-runner agent list --master 192.168.1.100:50053\n\n# Check firewall settings\nsudo ufw status\n</code></pre></p> <p>Tasks failing with permission errors? <pre><code># Check user permissions\nls -la /usr/local/bin/sloth-runner\n\n# Run with appropriate user\nsudo -u myuser sloth-runner run -f task.sloth\n</code></pre></p> <p>State database issues? <pre><code># Check state database location\nls -la ~/.sloth-runner/\n\n# View state statistics\nsloth-runner state stats\n\n# Clear corrupted state (careful!)\nrm ~/.sloth-runner/state.db*\n</code></pre></p>"},{"location":"en/quick-start/#congratulations","title":"\ud83c\udf89 Congratulations!\ud83d\ude80 Ready for More?","text":"<p>You've successfully: - \u2705 Installed Sloth Runner - \u2705 Executed your first task - \u2705 Set up distributed agents - \u2705 Explored state management - \u2705 Monitored system metrics</p> <p>You're now ready to build powerful, distributed task orchestration workflows with Sloth Runner! \ud83d\ude80</p> <p>Explore advanced features and build production-ready workflows</p> Advanced Features \u2192 More Examples \u2192"},{"location":"en/repl/","title":"Interactive REPL","text":"<p>The <code>sloth-runner repl</code> command drops you into an interactive Read-Eval-Print Loop (REPL) session. This is a powerful tool for debugging, exploration, and quick experimentation with the sloth-runner modules.</p>"},{"location":"en/repl/#starting-the-repl","title":"Starting the REPL","text":"<p>To start a session, simply run: <pre><code>sloth-runner repl\n</code></pre></p> <p>You can also pre-load a workflow file to have its <code>Modern DSLs</code> and any helper functions available in the session. This is incredibly useful for debugging an existing pipeline.</p> <pre><code>sloth-runner repl -f /path/to/your/pipeline.sloth\n</code></pre>"},{"location":"en/repl/#features","title":"Features","text":""},{"location":"en/repl/#live-environment","title":"Live Environment","text":"<p>The REPL provides a live Lua environment where you can execute any Lua code. All the built-in sloth-runner modules (<code>aws</code>, <code>docker</code>, <code>fs</code>, <code>log</code>, etc.) are pre-loaded and ready to use.</p> <pre><code>sloth&gt; log.info(\"Hello from the REPL!\")\nsloth&gt; result = fs.read(\"README.md\")\nsloth&gt; print(string.sub(result, 1, 50))\n</code></pre>"},{"location":"en/repl/#autocompletion","title":"Autocompletion","text":"<p>The REPL has a sophisticated autocompletion system. - Start typing the name of a global variable or module (e.g., <code>aws</code>) and press <code>Tab</code> to see suggestions. - Type a module name followed by a dot (e.g., <code>docker.</code>) and press <code>Tab</code> to see all the functions available in that module.</p>"},{"location":"en/repl/#history","title":"History","text":"<p>The REPL keeps a history of your commands. Use the up and down arrow keys to navigate through previous commands.</p>"},{"location":"en/repl/#example-session","title":"Example Session","text":"<p>Here is an example of using the REPL to debug a Docker command.</p> <pre><code>$ sloth-runner repl\nSloth-Runner Interactive REPL\nType 'exit' or 'quit' to leave.\nsloth&gt; result = docker.exec({\"ps\", \"-a\"})\nsloth&gt; print(result.stdout)\nCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES\nsloth&gt; -- Now let's try to build an image\nsloth&gt; build_result = docker.build({tag=\"my-test\", path=\"./examples/docker\"})\nsloth&gt; print(build_result.success)\ntrue\nsloth&gt; exit\nBye!\n</code></pre>"},{"location":"en/security/","title":"\ud83d\udd12 Security","text":"<p>Enterprise-grade security features for production deployments.</p>"},{"location":"en/security/#overview","title":"Overview","text":"<p>Sloth Runner provides comprehensive security features:</p> <ul> <li>\ud83d\udd10 Secrets management</li> <li>\ud83d\udee1\ufe0f Access control</li> <li>\ud83d\udcdd Audit logging</li> <li>\ud83d\udd12 Encryption</li> </ul>"},{"location":"en/security/#key-features","title":"Key Features","text":""},{"location":"en/security/#secrets-management","title":"Secrets Management","text":"<p>Secure storage and injection of sensitive data.</p> <pre><code>local secret = require(\"secrets\")\n\nlocal deploy_task = task(\"secure_deploy\")\n    :command(function()\n        local api_key = secret.get(\"API_KEY\")\n        -- Use securely\n    end)\n    :build()\n</code></pre>"},{"location":"en/security/#access-control","title":"Access Control","text":"<p>Role-based access control (RBAC) for workflows and resources.</p>"},{"location":"en/security/#audit-trail","title":"Audit Trail","text":"<p>Complete logging of all actions for compliance.</p>"},{"location":"en/security/#encryption","title":"Encryption","text":"<p>Data encryption at rest and in transit.</p>"},{"location":"en/security/#best-practices","title":"Best Practices","text":"<ul> <li>\u2705 Use secret management for credentials</li> <li>\u2705 Enable audit logging</li> <li>\u2705 Implement least privilege access</li> <li>\u2705 Regular security audits</li> <li>\u2705 Encrypt sensitive data</li> </ul>"},{"location":"en/security/#learn-more","title":"Learn More","text":"<ul> <li>Enterprise Features</li> <li>Best Practices</li> </ul>"},{"location":"en/stack-management/","title":"\ud83d\uddc2\ufe0f Stack Management","text":"<p>Sloth Runner provides a complete stack management system similar to Pulumi, allowing you to persist workflow state and track executions over time.</p>"},{"location":"en/stack-management/#introduction","title":"\ud83d\ude80 Introduction","text":"<p>Stack Management in Sloth Runner enables:</p> <ul> <li>Persist state between executions</li> <li>Track outputs exported from pipeline</li> <li>Complete history of executions</li> <li>Intuitive CLI management</li> <li>Isolation by environment/project</li> </ul>"},{"location":"en/stack-management/#basic-syntax","title":"\ud83d\udcdd Basic Syntax","text":""},{"location":"en/stack-management/#running-with-stack","title":"Running with Stack","text":"<pre><code># New syntax - stack name as positional argument\nsloth-runner run {stack-name} --file workflow.sloth\n\n# Practical examples\nsloth-runner run production-app -f deploy.sloth --output enhanced\nsloth-runner run dev-environment -f test.sloth -o rich\nsloth-runner run my-cicd -f pipeline.sloth\n</code></pre>"},{"location":"en/stack-management/#managing-stacks","title":"Managing Stacks","text":"<pre><code># List all stacks\nsloth-runner stack list\n\n# Show stack details\nsloth-runner stack show production-app\n\n# Delete stack\nsloth-runner stack delete old-environment\n</code></pre>"},{"location":"en/stack-management/#core-concepts","title":"\ud83c\udfaf Core Concepts","text":""},{"location":"en/stack-management/#stack-state","title":"Stack State","text":"<p>Each stack maintains:</p> <ul> <li>Unique ID (UUID)</li> <li>Stack name</li> <li>Current status (created, running, completed, failed)</li> <li>Exported outputs from pipeline</li> <li>Execution history</li> <li>Metadata and configurations</li> </ul>"},{"location":"en/stack-management/#lifecycle","title":"Lifecycle","text":"<ol> <li>Creation: Stack is automatically created on first execution</li> <li>Execution: State is updated during execution</li> <li>Persistence: Outputs and results are saved</li> <li>Reuse: Subsequent executions reuse the stack</li> </ol>"},{"location":"en/stack-management/#state-persistence","title":"\ud83d\udcbe State Persistence","text":""},{"location":"en/stack-management/#database","title":"Database","text":"<p>Sloth Runner uses SQLite to persist state:</p> <pre><code>~/.sloth-runner/stacks.db\n</code></pre>"},{"location":"en/stack-management/#tables","title":"Tables","text":"<ul> <li>stacks: Main stack information</li> <li>stack_executions: Detailed execution history</li> </ul>"},{"location":"en/stack-management/#exported-outputs","title":"\ud83d\udcca Exported Outputs","text":""},{"location":"en/stack-management/#automatic-capture","title":"Automatic Capture","text":"<p>The system automatically captures:</p> <ul> <li>TaskRunner exports (<code>runner.Exports</code>)</li> <li>Global <code>outputs</code> variable from Lua</li> <li>Execution metadata</li> </ul>"},{"location":"en/stack-management/#export-example","title":"Export Example","text":"<pre><code>local deploy_task = task(\"deploy\")\n    :command(function(params, deps)\n        -- Deploy logic...\n\n        -- Export outputs to stack\n        runner.Export({\n            app_url = \"https://myapp.example.com\",\n            version = \"1.2.3\",\n            environment = \"production\",\n            deployed_at = os.date()\n        })\n\n        return true, \"Deploy successful\", deploy_info\n    end)\n    :build()\n</code></pre>"},{"location":"en/stack-management/#cli-interface","title":"\ud83d\udda5\ufe0f CLI Interface","text":""},{"location":"en/stack-management/#stack-list","title":"Stack List","text":"<pre><code>$ sloth-runner stack list\n\nWorkflow Stacks     \n\nNAME                  STATUS     LAST RUN           DURATION     EXECUTIONS\n----                  ------     --------           --------     ----------\nproduction-app        completed  2025-09-29 19:27   6.8s         5\ndev-environment       running    2025-09-29 19:25   2.1s         12\nstaging-api           failed     2025-09-29 19:20   4.2s         3\n</code></pre>"},{"location":"en/stack-management/#stack-details","title":"Stack Details","text":"<pre><code>$ sloth-runner stack show production-app\n\nStack: production-app     \n\nID: abc123-def456-789\nStatus: completed\nCreated: 2025-09-29 15:30:21\nUpdated: 2025-09-29 19:27:15\nExecutions: 5\nLast Duration: 6.8s\n\n     Outputs     \n\napp_url: \"https://myapp.example.com\"\nversion: \"1.2.3\"\nenvironment: \"production\"\ndeployed_at: \"2025-09-29 19:27:15\"\n\n     Recent Executions     \n\nSTARTED            STATUS     DURATION   TASKS   SUCCESS   FAILED\n-------            ------     --------   -----   -------   ------\n2025-09-29 19:27   completed  6.8s       3       3         0\n2025-09-29 18:45   completed  7.2s       3       3         0\n2025-09-29 17:30   failed     4.1s       3       2         1\n</code></pre>"},{"location":"en/stack-management/#output-styles","title":"\ud83c\udfa8 Output Styles","text":""},{"location":"en/stack-management/#configurable-per-execution","title":"Configurable per Execution","text":"<pre><code># Basic output (default)\nsloth-runner run my-stack -f workflow.sloth\n\n# Enhanced output\nsloth-runner run my-stack -f workflow.sloth --output enhanced\nsloth-runner run my-stack -f workflow.sloth -o rich\nsloth-runner run my-stack -f workflow.sloth --output modern\n</code></pre>"},{"location":"en/stack-management/#pulumi-style","title":"Pulumi Style","text":"<p>The <code>enhanced</code> output provides rich formatting similar to Pulumi:</p> <pre><code>\ud83e\udda5 Sloth Runner\n\n     Workflow: production-app     \n\nStarted at: 2025-09-29 19:27:15\n\n\u2713 build (2.1s) completed\n\u2713 test (3.2s) completed  \n\u2713 deploy (1.5s) completed\n\n     Workflow Completed Successfully     \n\n\u2713 production-app\nDuration: 6.8s\nTasks executed: 3\n\n     Outputs     \n\n\u251c\u2500 exports:\n  \u2502 app_url: \"https://myapp.example.com\"\n  \u2502 version: \"1.2.3\"\n  \u2502 environment: \"production\"\n</code></pre>"},{"location":"en/stack-management/#use-cases","title":"\ud83d\udd27 Use Cases","text":""},{"location":"en/stack-management/#separate-environments","title":"Separate Environments","text":"<pre><code># Development\nsloth-runner run dev-app -f app.sloth\n\n# Staging  \nsloth-runner run staging-app -f app.sloth\n\n# Production\nsloth-runner run prod-app -f app.sloth --output enhanced\n</code></pre>"},{"location":"en/stack-management/#cicd-integration","title":"CI/CD Integration","text":"<pre><code># In CI/CD pipeline\nsloth-runner run ${ENVIRONMENT}-${APP_NAME} -f pipeline.sloth\n\n# Examples:\nsloth-runner run prod-frontend -f frontend-deploy.sloth\nsloth-runner run staging-api -f api-deploy.sloth\n</code></pre>"},{"location":"en/stack-management/#monitoring","title":"Monitoring","text":"<pre><code># View status of all environments\nsloth-runner stack list\n\n# Check last production deployment\nsloth-runner stack show prod-app\n\n# Clean up test environments\nsloth-runner stack delete temp-test-env\n</code></pre>"},{"location":"en/stack-management/#best-practices","title":"\ud83d\udee0\ufe0f Best Practices","text":""},{"location":"en/stack-management/#stack-naming","title":"Stack Naming","text":"<pre><code># Use pattern: {environment}-{application}\nsloth-runner run prod-frontend -f deploy.sloth\nsloth-runner run staging-api -f deploy.sloth\nsloth-runner run dev-database -f setup.sloth\n</code></pre>"},{"location":"en/stack-management/#output-exports","title":"Output Exports","text":"<pre><code>-- Export relevant information\nrunner.Export({\n    -- Important URLs\n    app_url = deploy_info.url,\n    admin_url = deploy_info.admin_url,\n\n    -- Version information\n    version = build_info.version,\n    commit_hash = build_info.commit,\n\n    -- Environment settings\n    environment = config.environment,\n    region = config.region,\n\n    -- Timestamps\n    deployed_at = os.date(),\n    build_time = build_info.timestamp\n})\n</code></pre>"},{"location":"en/stack-management/#lifecycle-management","title":"Lifecycle Management","text":"<pre><code># Active development\nsloth-runner run dev-app -f app.sloth\n\n# When ready for staging\nsloth-runner run staging-app -f app.sloth\n\n# Deploy to production\nsloth-runner run prod-app -f app.sloth --output enhanced\n\n# Clean up old environments\nsloth-runner stack delete old-test-branch\n</code></pre>"},{"location":"en/stack-management/#migration","title":"\ud83d\udd04 Migration","text":""},{"location":"en/stack-management/#old-vs-new-commands","title":"Old vs New Commands","text":"<pre><code># Before\nsloth-runner run -f workflow.sloth --stack my-stack\n\n# Now\nsloth-runner run my-stack -f workflow.sloth\n</code></pre>"},{"location":"en/stack-management/#compatibility","title":"Compatibility","text":"<ul> <li>Existing workflows continue to work</li> <li>Stack is optional - can run without specifying</li> <li>Outputs are captured automatically when stack is used</li> </ul>"},{"location":"en/stack-management/#next-steps","title":"\ud83d\udcda Next Steps","text":"<ul> <li>Output Styles - Output style configuration</li> <li>Workflow Scaffolding - Project creation</li> <li>Examples - Practical examples</li> <li>CLI Reference - Complete command reference</li> </ul>"},{"location":"en/testing/","title":"Testing Workflows","text":"<p>The sloth-runner includes a built-in testing framework that allows you to write unit and integration tests for your task workflows. Writing tests for your automation is crucial for ensuring reliability, preventing regressions, and having confidence when making changes.</p>"},{"location":"en/testing/#the-test-command","title":"The <code>test</code> Command","text":"<p>You can run a test file using the <code>sloth-runner test</code> command. It requires two main files: the workflow you want to test and the test script itself.</p> <pre><code>sloth-runner test -w &lt;path_to_workflow.sloth&gt; -f &lt;path_to_test_file.sloth&gt;\n</code></pre> <ul> <li><code>-w, --workflow</code>: Specifies the path to the main <code>Modern DSLs</code> file that you want to test.</li> <li><code>-f, --file</code>: Specifies the path to your test file.</li> </ul>"},{"location":"en/testing/#writing-tests","title":"Writing Tests","text":"<p>Tests are written in Lua and use two new global modules provided by the test runner: <code>test</code> and <code>assert</code>.</p>"},{"location":"en/testing/#the-test-module","title":"The <code>test</code> Module","text":"<p>The <code>test</code> module is used to structure your tests and to run specific tasks from your workflow.</p> <ul> <li><code>test.describe(suite_name, function)</code>: Groups related tests into a \"suite\". This is for organization.</li> <li><code>test.it(function)</code>: Defines an individual test case. The description of the test should be included in the assertion messages inside this function.</li> <li><code>test.run_task(task_name)</code>: This is the core function of the testing framework. It executes a single task by its name from the loaded workflow file. It returns a <code>result</code> table containing the execution details.</li> </ul> <p>The <code>result</code> table returned by <code>run_task</code> has the following structure:</p> <pre><code>{\n  success = true, -- boolean: true if the task succeeded, false otherwise\n  message = \"Task executed successfully\", -- string: The message returned by the task\n  duration = \"1.23ms\", -- string: The execution duration\n  output = { ... }, -- table: The output table returned by the task\n  error = nil -- string: The error message if the task failed\n}\n</code></pre>"},{"location":"en/testing/#the-assert-module","title":"The <code>assert</code> Module","text":"<p>The <code>assert</code> module provides functions to check the results of your task executions.</p> <ul> <li><code>assert.is_true(value, message)</code>: Checks if the <code>value</code> is true.</li> <li><code>assert.equals(actual, expected, message)</code>: Checks if the <code>actual</code> value is equal to the <code>expected</code> value.</li> </ul>"},{"location":"en/testing/#mocking-modules","title":"Mocking Modules","text":"<p>To test the logic of your pipelines without making real external calls (e.g., to AWS, Docker, or Terraform), the testing framework includes a powerful mocking feature.</p>"},{"location":"en/testing/#strict-mocking-policy","title":"Strict Mocking Policy","text":"<p>The test runner enforces a strict mocking policy. When running in test mode, any call to a module function (like <code>aws.exec</code> or <code>docker.build</code>) that has not been explicitly mocked will cause the test to fail immediately. This ensures that your tests are fully self-contained, deterministic, and do not have unintended side effects.</p>"},{"location":"en/testing/#testmockfunction_name-mock_definition","title":"<code>test.mock(function_name, mock_definition)</code>","text":"<p>This function allows you to define a fake return value for any mockable module function.</p> <ul> <li><code>function_name</code> (string): The full name of the function to mock (e.g., <code>\"aws.s3.sync\"</code>, <code>\"docker.build\"</code>).</li> <li><code>mock_definition</code> (table): A table that defines what the mocked function should return. It must contain a <code>returns</code> key, which is a list of the values the function will return.</li> </ul> <p>The <code>returns</code> list is crucial because Lua functions can return multiple values.</p> <p>Example:</p> <pre><code>-- Mock a function that returns a single result table\ntest.mock(\"docker.build\", {\n  returns = {\n    { success = true, stdout = \"Successfully built image\" }\n  }\n})\n\n-- Mock a function that returns two values (e.g., a value and an error)\n-- This simulates a successful call to terraform.output\ntest.mock(\"terraform.output\", {\n  returns = { \"my_file.txt\", nil }\n})\n\n-- This simulates a failed call\ntest.mock(\"terraform.output\", {\n  returns = { nil, \"output not found\" }\n})\n</code></pre>"},{"location":"en/testing/#complete-mocking-example","title":"Complete Mocking Example","text":"<p>Let's say you have a task that calls <code>aws.exec</code> and has logic that depends on the output.</p> <p>Task in <code>my_workflow.sloth</code>: <pre><code>-- ...\n{\n  name = \"check-account\",\n  command = function()\n    local result = aws.exec({\"sts\", \"get-caller-identity\"})\n    local data = data.parse_json(result.stdout)\n    if data.Account == \"123456789012\" then\n      return true, \"Correct account.\"\n    else\n      return false, \"Wrong account.\"\n    end\n  end\n}\n-- ...\n</code></pre></p> <p>Test in <code>my_test.sloth</code>: <pre><code>test.describe(\"Account Check Logic\", function()\n  test.it(function()\n    -- Mock the return value of aws.exec\n    test.mock(\"aws.exec\", {\n      returns = {\n        {\n          success = true,\n          stdout = '{\"Account\": \"123456789012\"}'\n        }\n      }\n    })\n\n    -- Run the task that uses the mock\n    local result = test.run_task(\"check-account\")\n\n    -- Assert that the task's logic worked correctly with the mocked data\n    assert.is_true(result.success, \"Task should succeed with the correct account ID\")\n    assert.equals(result.message, \"Correct account.\", \"Message should be correct\")\n  end)\nend)\n</code></pre></p>"},{"location":"en/ai/optimization/","title":"\u26a1 AI-Powered Optimization","text":"<p>Sloth Runner includes intelligent optimization capabilities powered by machine learning.</p>"},{"location":"en/ai/optimization/#overview","title":"Overview","text":"<p>The AI optimization engine analyzes your workflows and provides recommendations for:</p> <ul> <li>\u26a1 Performance improvements</li> <li>\ud83d\udd04 Resource allocation</li> <li>\u23f1\ufe0f Execution timing</li> <li>\ud83d\udcca Bottleneck detection</li> </ul>"},{"location":"en/ai/optimization/#key-features","title":"Key Features","text":""},{"location":"en/ai/optimization/#automatic-optimization","title":"Automatic Optimization","text":"<p>The system automatically suggests optimizations based on historical data.</p>"},{"location":"en/ai/optimization/#resource-prediction","title":"Resource Prediction","text":"<p>Predicts resource usage patterns to optimize allocation.</p>"},{"location":"en/ai/optimization/#execution-planning","title":"Execution Planning","text":"<p>Suggests optimal task execution order based on dependencies and resource availability.</p>"},{"location":"en/ai/optimization/#usage","title":"Usage","text":"<pre><code>-- Enable AI optimization\nworkflow.define(\"optimized_workflow\", {\n    ai_optimization = true,\n    tasks = { ... }\n})\n</code></pre>"},{"location":"en/ai/optimization/#learn-more","title":"Learn More","text":"<ul> <li>AI Integration Overview</li> <li>Performance Best Practices</li> <li>Advanced Examples</li> </ul>"},{"location":"en/ai/prediction/","title":"\ud83d\udd2e Failure Prediction","text":"<p>AI-powered failure prediction helps prevent issues before they occur.</p>"},{"location":"en/ai/prediction/#overview","title":"Overview","text":"<p>The failure prediction system uses historical data to:</p> <ul> <li>\ud83c\udfaf Predict potential failures</li> <li>\ud83d\udcca Identify risk patterns</li> <li>\u26a0\ufe0f Alert before issues occur</li> <li>\ud83d\udd04 Suggest preventive actions</li> </ul>"},{"location":"en/ai/prediction/#features","title":"Features","text":""},{"location":"en/ai/prediction/#pattern-recognition","title":"Pattern Recognition","text":"<p>Analyzes historical failures to identify common patterns.</p>"},{"location":"en/ai/prediction/#early-warning-system","title":"Early Warning System","text":"<p>Alerts you when conditions match failure patterns.</p>"},{"location":"en/ai/prediction/#automated-recovery","title":"Automated Recovery","text":"<p>Suggests or implements automatic recovery strategies.</p>"},{"location":"en/ai/prediction/#configuration","title":"Configuration","text":"<pre><code>workflow.define(\"safe_workflow\", {\n    failure_prediction = {\n        enabled = true,\n        confidence_threshold = 0.75,\n        auto_prevent = true\n    },\n    tasks = { ... }\n})\n</code></pre>"},{"location":"en/ai/prediction/#learn-more","title":"Learn More","text":"<ul> <li>AI Integration</li> <li>Error Handling Best Practices</li> </ul>"},{"location":"en/examples/cicd/","title":"\ud83d\udd04 CI/CD Pipeline Example","text":"<p>Complete CI/CD pipeline example using Sloth Runner.</p>"},{"location":"en/examples/cicd/#overview","title":"Overview","text":"<p>This example demonstrates a full CI/CD pipeline with: - Build - Test - Deploy - Monitoring</p>"},{"location":"en/examples/cicd/#complete-example","title":"Complete Example","text":"<pre><code>-- Build stage\ntask(\"build\", {\n    description = \"Build application\",\n    command = function()\n        log.info(\"\ud83d\udd28 Building...\")\n        local result = exec.run({ cmd = \"go build -o app ./cmd\" })\n        if not result.success then\n            return false, \"Build failed: \" .. result.stderr\n        end\n        return true, result.stdout\n    end\n})\n\n-- Test stage\ntask(\"test\", {\n    description = \"Run tests\",\n    depends_on = {\"build\"},\n    command = function()\n        log.info(\"\ud83e\uddea Testing...\")\n        local result = exec.run({ cmd = \"go test -v ./...\" })\n        if not result.success then\n            return false, \"Tests failed: \" .. result.stderr\n        end\n        return true, result.stdout\n    end\n})\n\n-- Deploy stage\ntask(\"deploy\", {\n    description = \"Deploy to production\",\n    depends_on = {\"build\", \"test\"},\n    command = function()\n        log.info(\"\ud83d\ude80 Deploying...\")\n        local result = exec.run({ cmd = \"kubectl apply -f k8s/\" })\n        if not result.success then\n            return false, \"Deploy failed: \" .. result.stderr\n        end\n        return true, \"Deployment completed successfully\"\n    end\n})\n</code></pre>"},{"location":"en/examples/cicd/#features-demonstrated","title":"Features Demonstrated","text":"<ul> <li>\u2705 Multi-stage pipeline</li> <li>\u2705 Task dependencies</li> <li>\u2705 Error handling</li> <li>\u2705 Logging</li> <li>\u2705 Deployment automation</li> </ul>"},{"location":"en/examples/cicd/#learn-more","title":"Learn More","text":"<ul> <li>GitOps Features</li> <li>Advanced Examples</li> </ul>"},{"location":"en/examples/iac/","title":"\ud83c\udfd7\ufe0f Infrastructure as Code Example","text":"<p>Managing infrastructure with Sloth Runner and Terraform/Pulumi.</p>"},{"location":"en/examples/iac/#overview","title":"Overview","text":"<p>Use Sloth Runner to orchestrate infrastructure deployments: - \ud83c\udf0d Terraform - \ud83c\udfd7\ufe0f Pulumi - \u2601\ufe0f Multi-cloud</p>"},{"location":"en/examples/iac/#terraform-example","title":"Terraform Example","text":"<pre><code>task(\"tf_plan\", {\n    description = \"Plan infrastructure changes\",\n    command = function()\n        log.info(\"\ud83d\udccb Planning...\")\n        local result = terraform.plan({\n            workdir = \"./terraform\"\n        })\n        if not result.success then\n            return false, \"Plan failed: \" .. result.stderr\n        end\n        return true, \"Plan completed\"\n    end\n})\n\ntask(\"tf_apply\", {\n    description = \"Apply infrastructure changes\",\n    depends_on = {\"tf_plan\"},\n    command = function()\n        log.info(\"\ud83d\ude80 Applying...\")\n        local result = terraform.apply({\n            workdir = \"./terraform\",\n            auto_approve = true\n        })\n        if not result.success then\n            return false, \"Apply failed: \" .. result.stderr\n        end\n        return true, \"Apply completed\"\n    end\n})\n</code></pre>"},{"location":"en/examples/iac/#pulumi-example","title":"Pulumi Example","text":"<pre><code>task(\"pulumi_deploy\", {\n    description = \"Deploy with Pulumi\",\n    command = function()\n        local stack = pulumi.stack({\n            name = \"my-org/project/production\",\n            workdir = \"./infra\"\n        })\n\n        local result = stack:up({ yes = true })\n        if not result.success then\n            return false, \"Deploy failed: \" .. result.stderr\n        end\n        return true, \"Deploy completed\"\n    end\n})\n</code></pre>"},{"location":"en/examples/iac/#learn-more","title":"Learn More","text":"<ul> <li>Terraform Module</li> <li>Pulumi Module</li> <li>Multi-Cloud</li> </ul>"},{"location":"en/examples/multi-cloud/","title":"\u2601\ufe0f Multi-Cloud Deployment Example","text":"<p>Deploy applications across multiple cloud providers.</p>"},{"location":"en/examples/multi-cloud/#overview","title":"Overview","text":"<p>Sloth Runner supports deployment to: - \u2601\ufe0f AWS - \ud83d\udd37 Azure - \ud83c\udf29\ufe0f GCP - \ud83c\udf0a DigitalOcean</p>"},{"location":"en/examples/multi-cloud/#example-deploy-to-multiple-clouds","title":"Example: Deploy to Multiple Clouds","text":"<pre><code>-- Deploy to AWS\ntask(\"deploy_aws\", {\n    description = \"Deploy to AWS\",\n    command = function()\n        log.info(\"\u2601\ufe0f Deploying to AWS...\")\n        local result = aws.s3.sync({\n            source = \"./build\",\n            destination = \"s3://my-app-bucket/static\",\n            delete = true\n        })\n        if not result then\n            return false, \"AWS deployment failed\"\n        end\n        return true, \"AWS deployment completed\"\n    end\n})\n\n-- Deploy to Azure\ntask(\"deploy_azure\", {\n    description = \"Deploy to Azure\",\n    command = function()\n        log.info(\"\ud83d\udd37 Deploying to Azure...\")\n        local result = azure.exec({\n            \"storage\", \"blob\", \"upload-batch\",\n            \"--destination\", \"mycontainer\",\n            \"--source\", \"./build\"\n        })\n        if result.exit_code ~= 0 then\n            return false, \"Azure deployment failed: \" .. result.stderr\n        end\n        return true, \"Azure deployment completed\"\n    end\n})\n\n-- Deploy to GCP\ntask(\"deploy_gcp\", {\n    description = \"Deploy to GCP\",\n    command = function()\n        log.info(\"\ud83c\udf29\ufe0f Deploying to GCP...\")\n        local result = gcp.exec({\n            \"storage\", \"rsync\", \"-r\", \"./build\",\n            \"gs://my-app-bucket/\"\n        })\n        if result.exit_code ~= 0 then\n            return false, \"GCP deployment failed: \" .. result.stderr\n        end\n        return true, \"GCP deployment completed\"\n    end\n})\n</code></pre>"},{"location":"en/examples/multi-cloud/#features","title":"Features","text":"<ul> <li>\u2705 Parallel deployment</li> <li>\u2705 Provider-specific configuration</li> <li>\u2705 Unified interface</li> <li>\u2705 Automatic failover</li> </ul>"},{"location":"en/examples/multi-cloud/#learn-more","title":"Learn More","text":"<ul> <li>Multi-Cloud Excellence</li> <li>AWS Module</li> <li>Azure Module</li> <li>GCP Module</li> </ul>"},{"location":"en/gitops/kubernetes/","title":"\u2638\ufe0f Kubernetes Integration","text":"<p>Native Kubernetes integration for GitOps workflows.</p>"},{"location":"en/gitops/kubernetes/#overview","title":"Overview","text":"<p>Sloth Runner integrates seamlessly with Kubernetes:</p> <ul> <li>\ud83d\udce6 Deploy applications</li> <li>\ud83d\udd04 Manage resources</li> <li>\ud83d\udcca Monitor status</li> <li>\ud83d\udd01 Rolling updates</li> </ul>"},{"location":"en/gitops/kubernetes/#basic-usage","title":"Basic Usage","text":"<pre><code>local k8s = require(\"kubernetes\")\n\nlocal deploy_task = task(\"k8s_deploy\")\n    :description(\"Deploy to Kubernetes\")\n    :command(function()\n        -- Apply manifest\n        local result = k8s.apply(\"deployment.yaml\")\n\n        -- Wait for rollout\n        k8s.wait_for_rollout(\"deployment/myapp\", {\n            timeout = \"5m\"\n        })\n\n        return result.success\n    end)\n    :build()\n</code></pre>"},{"location":"en/gitops/kubernetes/#features","title":"Features","text":""},{"location":"en/gitops/kubernetes/#manifest-management","title":"Manifest Management","text":"<ul> <li>Apply/delete manifests</li> <li>Template rendering</li> <li>Diff preview</li> </ul>"},{"location":"en/gitops/kubernetes/#resource-monitoring","title":"Resource Monitoring","text":"<ul> <li>Pod status</li> <li>Deployment health</li> <li>Service endpoints</li> </ul>"},{"location":"en/gitops/kubernetes/#gitops-workflow","title":"GitOps Workflow","text":"<ul> <li>Git-based source of truth</li> <li>Automated sync</li> <li>Drift detection</li> </ul>"},{"location":"en/gitops/kubernetes/#learn-more","title":"Learn More","text":"<ul> <li>GitOps Overview</li> <li>Multi-Cloud Support</li> </ul>"},{"location":"en/gitops/multi-env/","title":"\ud83c\udfe2 Multi-Environment GitOps","text":"<p>Deploy and manage applications across multiple environments with GitOps.</p>"},{"location":"en/gitops/multi-env/#overview","title":"Overview","text":"<p>Sloth Runner provides native multi-environment support:</p> <ul> <li>\ud83d\udd04 Development</li> <li>\ud83e\uddea Staging</li> <li>\ud83d\ude80 Production</li> <li>\ud83c\udf0d Multi-region</li> </ul>"},{"location":"en/gitops/multi-env/#environment-configuration","title":"Environment Configuration","text":"<pre><code>-- Define environment-specific settings\nlocal environments = {\n    dev = {\n        replicas = 1,\n        resources = { cpu = \"100m\", memory = \"128Mi\" }\n    },\n    staging = {\n        replicas = 2,\n        resources = { cpu = \"200m\", memory = \"256Mi\" }\n    },\n    production = {\n        replicas = 5,\n        resources = { cpu = \"1\", memory = \"1Gi\" }\n    }\n}\n\n-- Deploy to specific environment\nworkflow.define(\"multi_env_deploy\", {\n    environment = params.env or \"dev\",\n    tasks = { deploy_task }\n})\n</code></pre>"},{"location":"en/gitops/multi-env/#features","title":"Features","text":"<ul> <li>\u2705 Environment isolation</li> <li>\u2705 Progressive rollout</li> <li>\u2705 Environment-specific secrets</li> <li>\u2705 Cross-environment promotion</li> </ul>"},{"location":"en/gitops/multi-env/#learn-more","title":"Learn More","text":"<ul> <li>GitOps Features</li> <li>Stack Management</li> </ul>"},{"location":"en/modules/ai/","title":"\ud83e\udd16 AI Module - Complete API Reference","text":"<p>The AI module provides artificial intelligence capabilities for task optimization, failure prediction, and performance analytics.</p>"},{"location":"en/modules/ai/#module-overview","title":"\ud83d\udccb Module Overview","text":"<pre><code>local ai = require(\"ai\")\n</code></pre> <p>The AI module is the core of Sloth Runner's intelligence features, providing:</p> <ul> <li>\ud83d\udd2e Predictive Failure Detection - Predict task failures before they happen</li> <li>\u26a1 Intelligent Optimization - Automatically optimize commands for better performance  </li> <li>\ud83d\udcca Performance Analytics - Analyze execution patterns and trends</li> <li>\ud83e\udde0 Adaptive Learning - Continuous improvement from execution history</li> </ul>"},{"location":"en/modules/ai/#configuration","title":"\ud83d\udd27 Configuration","text":""},{"location":"en/modules/ai/#aiconfigureconfig","title":"<code>ai.configure(config)</code>","text":"<p>Configure AI behavior and capabilities.</p> <pre><code>ai.configure({\n    enabled = true,                    -- Enable/disable AI features\n    learning_mode = \"adaptive\",        -- adaptive | aggressive | conservative\n    optimization_level = 8,            -- 1-10 (higher = more aggressive)\n    failure_prediction = true,         -- Enable failure prediction\n    auto_optimize = true,              -- Automatically apply optimizations\n    confidence_threshold = 0.7         -- Minimum confidence for auto-apply\n})\n</code></pre> <p>Parameters: - <code>enabled</code> (boolean): Enable or disable all AI features - <code>learning_mode</code> (string): Learning aggressiveness level - <code>optimization_level</code> (number): Optimization aggressiveness (1-10) - <code>failure_prediction</code> (boolean): Enable predictive failure detection - <code>auto_optimize</code> (boolean): Automatically apply high-confidence optimizations - <code>confidence_threshold</code> (number): Minimum confidence score for auto-application</p>"},{"location":"en/modules/ai/#aiget_config","title":"<code>ai.get_config()</code>","text":"<p>Get current AI configuration.</p> <pre><code>local config = ai.get_config()\n-- Returns: {enabled: true, learning_mode: \"adaptive\", ...}\n</code></pre>"},{"location":"en/modules/ai/#optimization","title":"\u26a1 Optimization","text":""},{"location":"en/modules/ai/#aioptimize_commandcommand-options","title":"<code>ai.optimize_command(command, options)</code>","text":"<p>Get AI optimization suggestions for a command.</p> <pre><code>local result = ai.optimize_command(\"go build -o app ./cmd/main.go\", {\n    history = ai.get_task_history(\"go build\"),\n    system_resources = {\n        cpu_usage = 45,\n        memory_usage = 60,\n        load_avg = 1.2\n    },\n    similar_tasks = ai.find_similar_tasks(\"go build\", 10),\n    environment = \"production\"\n})\n</code></pre> <p>Parameters: - <code>command</code> (string): Original command to optimize - <code>options</code> (table): Optimization context   - <code>history</code> (array): Historical executions of this command   - <code>system_resources</code> (table): Current system resource usage   - <code>similar_tasks</code> (array): Similar task executions   - <code>environment</code> (string): Execution environment (dev/staging/prod)</p> <p>Returns: <pre><code>{\n    original_command = \"go build -o app ./cmd/main.go\",\n    optimized_command = \"go build -p 4 -ldflags='-s -w' -o app ./cmd/main.go\",\n    confidence_score = 0.85,           -- 0.0-1.0\n    expected_speedup = 2.3,            -- Expected performance multiplier\n    optimizations = {                  -- Applied optimizations\n        {\n            type = \"parallelization\",\n            description = \"Added -p 4 for parallel compilation\",\n            impact = 1.8\n        },\n        {\n            type = \"size_optimization\", \n            description = \"Added -ldflags='-s -w' to reduce binary size\",\n            impact = 0.5\n        }\n    },\n    resource_savings = {\n        estimated_time_saved = \"1.2s\",\n        memory_efficiency = \"+15%\"\n    },\n    rationale = \"Command shows parallelization opportunities based on system CPU count\"\n}\n</code></pre></p>"},{"location":"en/modules/ai/#failure-prediction","title":"\ud83d\udd2e Failure Prediction","text":""},{"location":"en/modules/ai/#aipredict_failuretask_name-command-options","title":"<code>ai.predict_failure(task_name, command, options)</code>","text":"<p>Predict the probability of task failure.</p> <pre><code>local prediction = ai.predict_failure(\"deploy_task\", \"kubectl apply -f deployment.yaml\", {\n    history = ai.get_task_history(\"kubectl apply\"),\n    environment = \"production\",\n    system_state = {\n        disk_usage = 85,\n        network_latency = 120\n    }\n})\n</code></pre> <p>Parameters: - <code>task_name</code> (string): Name of the task being analyzed - <code>command</code> (string): Command to be executed - <code>options</code> (table): Prediction context   - <code>history</code> (array): Historical executions   - <code>environment</code> (string): Execution environment   - <code>system_state</code> (table): Current system state</p> <p>Returns: <pre><code>{\n    failure_probability = 0.23,        -- 0.0-1.0\n    confidence = 0.78,                 -- Confidence in prediction\n    risk_factors = {                   -- Identified risk factors\n        {\n            type = \"resource_contention\",\n            description = \"High disk usage detected (85%)\",\n            impact = 0.6,\n            severity = \"medium\"\n        },\n        {\n            type = \"network_latency\",\n            description = \"Elevated network latency (120ms)\",\n            impact = 0.3,\n            severity = \"low\"\n        }\n    },\n    recommendations = {                -- AI-generated recommendations\n        \"Consider waiting for disk usage to decrease below 80%\",\n        \"Add timeout configuration to handle network latency\",\n        \"Implement retry logic with exponential backoff\"\n    },\n    similar_failures = {               -- Historical similar failures\n        count = 3,\n        common_causes = [\"network_timeout\", \"resource_exhaustion\"]\n    }\n}\n</code></pre></p>"},{"location":"en/modules/ai/#performance-analytics","title":"\ud83d\udcca Performance Analytics","text":""},{"location":"en/modules/ai/#aianalyze_performancecommand-options","title":"<code>ai.analyze_performance(command, options)</code>","text":"<p>Analyze performance patterns for a command or task.</p> <pre><code>local analysis = ai.analyze_performance(\"go build\", {\n    time_range = \"30d\",                -- 1d, 7d, 30d, 90d\n    environment = \"all\",               -- all, dev, staging, prod\n    include_failures = true\n})\n</code></pre> <p>Parameters: - <code>command</code> (string): Command to analyze - <code>options</code> (table): Analysis options   - <code>time_range</code> (string): Time range for analysis   - <code>environment</code> (string): Environment filter   - <code>include_failures</code> (boolean): Include failed executions</p> <p>Returns: <pre><code>{\n    total_executions = 156,\n    success_rate = 0.94,               -- 94% success rate\n    avg_execution_time = \"2.3s\",\n    fastest_execution = \"1.1s\",\n    slowest_execution = \"5.7s\",\n    performance_trend = \"improving\",    -- improving | stable | degrading\n    insights = {                       -- AI-generated insights\n        \"Performance improved 23% over the last 30 days\",\n        \"Failures primarily occur during high system load\",\n        \"Consider caching to improve cold-start performance\"\n    },\n    recommendations = {\n        \"Enable build caching to reduce average execution time\",\n        \"Implement resource monitoring for failure prevention\"\n    },\n    patterns = {                       -- Detected patterns\n        peak_hours = [\"09:00-10:00\", \"14:00-15:00\"],\n        failure_correlation = [\"high_cpu_usage\", \"memory_pressure\"]\n    }\n}\n</code></pre></p>"},{"location":"en/modules/ai/#aiget_task_statstask_name","title":"<code>ai.get_task_stats(task_name)</code>","text":"<p>Get aggregated statistics for a specific task.</p> <pre><code>local stats = ai.get_task_stats(\"build_application\")\n</code></pre> <p>Returns: <pre><code>{\n    task_name = \"build_application\",\n    total_runs = 89,\n    success_count = 84,\n    failure_count = 5,\n    success_rate = 0.944,              -- 94.4%\n    total_time = \"3m 45s\",\n    avg_time = \"2.5s\",\n    fastest_time = \"1.2s\",\n    slowest_time = \"8.1s\",\n    last_execution = \"2024-01-15T10:30:00Z\",\n    trend = \"stable\"\n}\n</code></pre></p>"},{"location":"en/modules/ai/#learning-history","title":"\ud83e\udde0 Learning &amp; History","text":""},{"location":"en/modules/ai/#airecord_executionexecution_data","title":"<code>ai.record_execution(execution_data)</code>","text":"<p>Record task execution for AI learning.</p> <pre><code>ai.record_execution({\n    task_name = \"build_application\",\n    command = \"go build -o app ./cmd/main.go\",\n    success = true,\n    execution_time = \"2.5s\",\n    start_time = os.time(),\n    end_time = os.time() + 2.5,\n    parameters = {\n        environment = \"development\",\n        go_version = \"1.21.0\",\n        parallel = true\n    },\n    system_resources = {\n        cpu_usage = 45,\n        memory_usage = 60,\n        disk_usage = 30\n    },\n    error_message = nil,               -- If success = false\n    optimization_applied = true,\n    ai_confidence = 0.85\n})\n</code></pre> <p>Parameters: - <code>task_name</code> (string): Name of the executed task - <code>command</code> (string): Command that was executed - <code>success</code> (boolean): Whether execution was successful - <code>execution_time</code> (string): Time taken to execute - <code>parameters</code> (table): Execution parameters and context - <code>system_resources</code> (table): System resource state during execution - <code>error_message</code> (string): Error message if failed - <code>optimization_applied</code> (boolean): Whether AI optimization was used - <code>ai_confidence</code> (number): Confidence score if optimization was applied</p>"},{"location":"en/modules/ai/#aiget_task_historycommand-limit","title":"<code>ai.get_task_history(command, limit)</code>","text":"<p>Get execution history for a command.</p> <pre><code>local history = ai.get_task_history(\"go build\", 20)\n-- Returns array of execution records\n</code></pre>"},{"location":"en/modules/ai/#aifind_similar_taskscommand-limit","title":"<code>ai.find_similar_tasks(command, limit)</code>","text":"<p>Find tasks similar to the given command.</p> <pre><code>local similar = ai.find_similar_tasks(\"go build -o app\", 10)\n-- Returns array of similar task executions\n</code></pre>"},{"location":"en/modules/ai/#insights-recommendations","title":"\ud83d\udca1 Insights &amp; Recommendations","text":""},{"location":"en/modules/ai/#aigenerate_insightsoptions","title":"<code>ai.generate_insights(options)</code>","text":"<p>Generate AI-powered insights about task execution patterns.</p> <pre><code>local insights = ai.generate_insights({\n    scope = \"global\",                  -- global | task | command\n    task_name = \"build_application\",   -- if scope = \"task\"\n    time_range = \"7d\"\n})\n</code></pre> <p>Returns: <pre><code>{\n    \"Tasks executed during business hours have 15% lower failure rate\",\n    \"Commands with parallel flags show 40% better performance\", \n    \"Memory-intensive tasks perform better with explicit heap size settings\",\n    \"Network-dependent tasks should include timeout and retry configurations\"\n}\n</code></pre></p>"},{"location":"en/modules/ai/#best-practices","title":"\ud83c\udfaf Best Practices","text":""},{"location":"en/modules/ai/#1-always-record-executions","title":"1. Always Record Executions","text":"<pre><code>-- Record every execution for AI learning\nworkflow.define(\"my_pipeline\", {\n    on_task_complete = function(task_name, success, output)\n        ai.record_execution({\n            task_name = task_name,\n            command = output.command,\n            success = success,\n            execution_time = output.duration\n        })\n    end\n})\n</code></pre>"},{"location":"en/modules/ai/#2-use-confidence-thresholds","title":"2. Use Confidence Thresholds","text":"<pre><code>-- Only apply high-confidence optimizations\nlocal optimization = ai.optimize_command(command)\nif optimization.confidence_score &gt; 0.8 then\n    command = optimization.optimized_command\n    log.info(\"Applied AI optimization with \" .. (optimization.confidence_score * 100) .. \"% confidence\")\nend\n</code></pre>"},{"location":"en/modules/ai/#3-monitor-predictions","title":"3. Monitor Predictions","text":"<pre><code>-- Always check predictions for critical tasks\nlocal prediction = ai.predict_failure(task_name, command)\nif prediction.failure_probability &gt; 0.3 then\n    log.warn(\"High failure risk detected: \" .. (prediction.failure_probability * 100) .. \"%\")\n    for _, rec in ipairs(prediction.recommendations) do\n        log.info(\"Recommendation: \" .. rec)\n    end\nend\n</code></pre>"},{"location":"en/modules/ai/#4-regular-analysis","title":"4. Regular Analysis","text":"<pre><code>-- Periodic performance analysis\nlocal analysis = ai.analyze_performance(\"critical_task\")\nif analysis.performance_trend == \"degrading\" then\n    log.warn(\"Performance degradation detected for critical_task\")\n    -- Take action\nend\n</code></pre>"},{"location":"en/modules/ai/#advanced-features","title":"\ud83d\udd2c Advanced Features","text":""},{"location":"en/modules/ai/#learning-modes","title":"Learning Modes","text":"<ul> <li>Adaptive: Balanced learning and optimization (recommended)</li> <li>Aggressive: Maximum optimization attempts, higher risk</li> <li>Conservative: Minimal changes, maximum safety</li> </ul>"},{"location":"en/modules/ai/#optimization-strategies","title":"Optimization Strategies","text":"<p>The AI system includes multiple built-in optimization strategies: - Parallelization: Detect parallel execution opportunities - Memory Optimization: Adjust memory settings for optimal performance - Compiler Optimization: Suggest better compiler flags and options - Caching: Implement intelligent caching strategies - Network Optimization: Optimize network operations and timeouts - I/O Optimization: Improve file and disk operations</p>"},{"location":"en/modules/ai/#custom-metrics","title":"Custom Metrics","text":"<p>You can provide custom metrics to improve AI analysis:</p> <pre><code>ai.record_execution({\n    task_name = \"custom_task\",\n    success = true,\n    execution_time = \"1.5s\",\n    custom_metrics = {\n        memory_peak = \"512MB\",\n        cache_hit_rate = 0.85,\n        network_requests = 15,\n        database_queries = 8\n    }\n})\n</code></pre>"},{"location":"en/modules/ai/#integration-examples","title":"\ud83d\ude80 Integration Examples","text":""},{"location":"en/modules/ai/#with-modern-dsl","title":"With Modern DSL","text":"<pre><code>local build_task = task(\"ai_optimized_build\")\n    :description(\"Build with AI optimization\")\n    :command(function(params, deps)\n        local cmd = \"go build -o app ./cmd/main.go\"\n        local optimization = ai.optimize_command(cmd, {\n            history = ai.get_task_history(cmd)\n        })\n\n        if optimization.confidence_score &gt; 0.7 then\n            return exec.run(optimization.optimized_command)\n        else\n            return exec.run(cmd)\n        end\n    end)\n    :on_success(function(params, output)\n        ai.record_execution({\n            task_name = \"ai_optimized_build\",\n            command = output.command,\n            success = true,\n            execution_time = output.duration\n        })\n    end)\n    :build()\n</code></pre>"},{"location":"en/modules/ai/#with-gitops","title":"With GitOps","text":"<pre><code>local gitops_task = task(\"intelligent_deploy\")\n    :command(function(params, deps)\n        local deploy_cmd = \"kubectl apply -f manifests/\"\n\n        -- AI failure prediction\n        local prediction = ai.predict_failure(\"intelligent_deploy\", deploy_cmd)\n        if prediction.failure_probability &gt; 0.25 then\n            log.warn(\"High deployment risk detected\")\n            return {success = false, message = \"Deployment blocked by AI risk assessment\"}\n        end\n\n        -- GitOps deployment\n        return gitops.sync_workflow(params.workflow_id)\n    end)\n    :build()\n</code></pre>"},{"location":"en/modules/ai/#see-also","title":"\ud83d\udcda See Also","text":"<ul> <li>AI Features Overview</li> <li>Performance Optimization Guide</li> <li>Failure Prediction Guide</li> <li>AI Best Practices</li> </ul>"},{"location":"en/modules/aws/","title":"AWS Module","text":"<p>The <code>aws</code> module provides a comprehensive interface for interacting with Amazon Web Services using the AWS CLI. It is designed to work seamlessly with standard AWS credential chains and also has first-class support for <code>aws-vault</code> for enhanced security.</p>"},{"location":"en/modules/aws/#configuration","title":"Configuration","text":"<p>No specific configuration in <code>values.yaml</code> is required. The module relies on your environment being configured to interact with AWS. This can be achieved through: - IAM roles for EC2 instances or ECS/EKS tasks. - Standard environment variables (<code>AWS_ACCESS_KEY_ID</code>, <code>AWS_SECRET_ACCESS_KEY</code>, etc.). - A configured <code>~/.aws/credentials</code> file. - Using <code>aws-vault</code> with a named profile.</p>"},{"location":"en/modules/aws/#generic-executor","title":"Generic Executor","text":""},{"location":"en/modules/aws/#awsexecargs-opts","title":"<code>aws.exec(args, opts)</code>","text":"<p>This is the core function of the module. It executes any AWS CLI command and returns the result.</p> <p>Parameters:</p> <ul> <li><code>args</code> (table): Required. A table of strings representing the command and arguments to pass to the AWS CLI (e.g., <code>{\"s3\", \"ls\", \"--recursive\"}</code>).</li> <li><code>opts</code> (table): Optional. A table of options for the execution.<ul> <li><code>profile</code> (string): If provided, the command will be executed using <code>aws-vault exec &lt;profile&gt; -- aws ...</code>. If omitted, it will run <code>aws ...</code> directly.</li> </ul> </li> </ul> <p>Returns:</p> <p>A table containing the following fields: - <code>stdout</code> (string): The standard output from the command. - <code>stderr</code> (string): The standard error from the command. - <code>exit_code</code> (number): The exit code of the command. <code>0</code> typically indicates success.</p> <p>Example:</p> <pre><code>-- Using default credentials\nlocal result = aws.exec({\"sts\", \"get-caller-identity\"})\nif result.exit_code == 0 then\n  print(result.stdout)\nend\n\n-- Using an aws-vault profile\nlocal result_with_profile = aws.exec({\"ec2\", \"describe-instances\"}, {profile = \"my-prod-profile\"})\n</code></pre>"},{"location":"en/modules/aws/#s3-helpers","title":"S3 Helpers","text":""},{"location":"en/modules/aws/#awss3syncparams","title":"<code>aws.s3.sync(params)</code>","text":"<p>A high-level wrapper for the <code>aws s3 sync</code> command, useful for synchronizing directories with S3.</p> <p>Parameters:</p> <ul> <li><code>params</code> (table): A table containing the following fields:<ul> <li><code>source</code> (string): Required. The source directory or S3 path.</li> <li><code>destination</code> (string): Required. The destination directory or S3 path.</li> <li><code>profile</code> (string): Optional. The <code>aws-vault</code> profile to use.</li> <li><code>delete</code> (boolean): Optional. If <code>true</code>, adds the <code>--delete</code> flag to the sync command.</li> </ul> </li> </ul> <p>Returns:</p> <ul> <li><code>true</code> on success.</li> <li><code>false, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>local ok, err = aws.s3.sync({\n  source = \"./build\",\n  destination = \"s3://my-app-bucket/static\",\n  profile = \"deployment-profile\",\n  delete = true\n})\nif not ok then\n  log.error(\"S3 sync failed: \" .. err)\nend\n</code></pre>"},{"location":"en/modules/aws/#secrets-manager-helpers","title":"Secrets Manager Helpers","text":""},{"location":"en/modules/aws/#awssecretsmanagerget_secretparams","title":"<code>aws.secretsmanager.get_secret(params)</code>","text":"<p>Retrieves a secret's value from AWS Secrets Manager. This function simplifies the process by directly returning the <code>SecretString</code>.</p> <p>Parameters:</p> <ul> <li><code>params</code> (table): A table containing the following fields:<ul> <li><code>secret_id</code> (string): Required. The name or ARN of the secret to retrieve.</li> <li><code>profile</code> (string): Optional. The <code>aws-vault</code> profile to use.</li> </ul> </li> </ul> <p>Returns:</p> <ul> <li><code>secret_string</code> (string) on success.</li> <li><code>nil, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>local db_password, err = aws.secretsmanager.get_secret({\n  secret_id = \"production/database/password\",\n  profile = \"my-app-profile\"\n})\n\nif not db_password then\n  log.error(\"Failed to get secret: \" .. err)\n  return false, \"Config failed.\"\nend\n\n-- Now you can use the db_password variable\n</code></pre>"},{"location":"en/modules/azure/","title":"Azure Module","text":"<p>The <code>azure</code> module provides an interface for interacting with Microsoft Azure using the <code>az</code> command-line tool.</p>"},{"location":"en/modules/azure/#configuration","title":"Configuration","text":"<p>This module requires the <code>az</code> CLI to be installed and authenticated. Before running pipelines that use this module, you must log in to your Azure account:</p> <pre><code>az login\n</code></pre> <p>The module will use your logged-in credentials for all commands.</p>"},{"location":"en/modules/azure/#generic-executor","title":"Generic Executor","text":""},{"location":"en/modules/azure/#azureexecargs","title":"<code>azure.exec(args)</code>","text":"<p>Executes any <code>az</code> command. This function automatically adds the <code>--output json</code> flag (if not already present) to ensure that the output is machine-parsable.</p> <p>Parameters:</p> <ul> <li><code>args</code> (table): Required. A table of strings representing the command and arguments to pass to <code>az</code> (e.g., <code>{\"group\", \"list\", \"--location\", \"eastus\"}</code>).</li> </ul> <p>Returns:</p> <p>A table containing the following fields: - <code>stdout</code> (string): The standard output from the command (as a JSON string). - <code>stderr</code> (string): The standard error from the command. - <code>exit_code</code> (number): The exit code of the command. <code>0</code> typically indicates success.</p> <p>Example:</p> <pre><code>local result = azure.exec({\"account\", \"show\"})\nif result.exit_code == 0 then\n  local account_info, err = data.parse_json(result.stdout)\n  if account_info then\n    log.info(\"Logged in as: \" .. account_info.user.name)\n  end\nend\n</code></pre>"},{"location":"en/modules/azure/#resource-group-rg-helpers","title":"Resource Group (RG) Helpers","text":""},{"location":"en/modules/azure/#azurergdeleteparams","title":"<code>azure.rg.delete(params)</code>","text":"<p>Deletes a resource group.</p> <p>Parameters:</p> <ul> <li><code>params</code> (table): A table containing the following fields:<ul> <li><code>name</code> (string): Required. The name of the resource group to delete.</li> <li><code>yes</code> (boolean): Optional. If <code>true</code>, adds the <code>--yes</code> flag to bypass the confirmation prompt.</li> </ul> </li> </ul> <p>Returns:</p> <ul> <li><code>true</code> on success.</li> <li><code>false, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>local ok, err = azure.rg.delete({\n  name = \"my-test-rg\",\n  yes = true\n})\nif not ok then\n  log.error(\"Failed to delete resource group: \" .. err)\nend\n</code></pre>"},{"location":"en/modules/azure/#virtual-machine-vm-helpers","title":"Virtual Machine (VM) Helpers","text":""},{"location":"en/modules/azure/#azurevmlistparams","title":"<code>azure.vm.list(params)</code>","text":"<p>Lists virtual machines.</p> <p>Parameters:</p> <ul> <li><code>params</code> (table): Optional. A table containing the following fields:<ul> <li><code>resource_group</code> (string): The name of a resource group to scope the list to. If omitted, lists VMs in the entire subscription.</li> </ul> </li> </ul> <p>Returns:</p> <ul> <li><code>vms</code> (table) on success, where the table is a parsed JSON array of your VM objects.</li> <li><code>nil, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>-- List all VMs in the subscription\nlocal all_vms, err1 = azure.vm.list()\n\n-- List VMs in a specific resource group\nlocal specific_vms, err2 = azure.vm.list({resource_group = \"my-production-rg\"})\nif specific_vms then\n  for _, vm in ipairs(specific_vms) do\n    print(\"Found VM: \" .. vm.name)\n  end\nend\n</code></pre>"},{"location":"en/modules/data/","title":"Data Module","text":"<p>The <code>data</code> module provides functions for parsing and serializing data between Lua tables and common data formats like JSON and YAML.</p> <p>---\\n</p>"},{"location":"en/modules/data/#dataparse_jsonjson_string","title":"<code>data.parse_json(json_string)</code>","text":"<p>Parses a JSON string into a Lua table.</p> <ul> <li>Parameters:<ul> <li><code>json_string</code> (string): The JSON formatted string to parse.</li> </ul> </li> <li>Returns:<ul> <li><code>table</code>: The resulting Lua table.</li> <li><code>error</code>: An error object if parsing fails.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"en/modules/data/#datato_jsonlua_table","title":"<code>data.to_json(lua_table)</code>","text":"<p>Serializes a Lua table into a JSON string.</p> <ul> <li>Parameters:<ul> <li><code>lua_table</code> (table): The Lua table to serialize.</li> </ul> </li> <li>Returns:<ul> <li><code>string</code>: The resulting JSON string.</li> <li><code>error</code>: An error object if serialization fails.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"en/modules/data/#dataparse_yamlyaml_string","title":"<code>data.parse_yaml(yaml_string)</code>","text":"<p>Parses a YAML string into a Lua table.</p> <ul> <li>Parameters:<ul> <li><code>yaml_string</code> (string): The YAML formatted string to parse.</li> </ul> </li> <li>Returns:<ul> <li><code>table</code>: The resulting Lua table.</li> <li><code>error</code>: An error object if parsing fails.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"en/modules/data/#datato_yamllua_table","title":"<code>data.to_yaml(lua_table)</code>","text":"<p>Serializes a Lua table into a YAML string.</p> <ul> <li>Parameters:<ul> <li><code>lua_table</code> (table): The Lua table to serialize.</li> </ul> </li> <li>Returns:<ul> <li><code>string</code>: The resulting YAML string.</li> <li><code>error</code>: An error object if serialization fails.</li> </ul> </li> </ul>"},{"location":"en/modules/data/#example","title":"Example","text":"<pre><code>command = function()\n  local data = require(\"data\")\n\n  -- JSON Example\n  log.info(\"Testing JSON serialization...\")\n  local my_table = { name = \"sloth-runner\", version = 1.0, features = { \"tasks\", \"lua\" } }\n  local json_str, err = data.to_json(my_table)\n  if err then\n    return false, \"Failed to serialize to JSON: \" .. err\n  end\n  print(\"Serialized JSON: \" .. json_str)\n\n  log.info(\"Testing JSON parsing...\")\n  local parsed_table, err = data.parse_json(json_str)\n  if err then\n    return false, \"Failed to parse JSON: \" .. err\n  end\n  log.info(\"Parsed name from JSON: \" .. parsed_table.name)\n\n  -- YAML Example\n  log.info(\"Testing YAML serialization...\")\n  local yaml_str, err = data.to_yaml(my_table)\n  if err then\n    return false, \"Failed to serialize to YAML: \" .. err\n  end\n  print(\"Serialized YAML:\\n\" .. yaml_str)\n\n  log.info(\"Testing YAML parsing...\")\n  parsed_table, err = data.parse_yaml(yaml_str)\n  if err then\n    return false, \"Failed to parse YAML: \" .. err\n  end\n  log.info(\"Parsed version from YAML: \" .. parsed_table.version)\n\n  return true, \"Data module operations successful.\"\nend\n</code></pre>"},{"location":"en/modules/digitalocean/","title":"DigitalOcean Module","text":"<p>The <code>digitalocean</code> module provides an interface for interacting with your DigitalOcean resources using the <code>doctl</code> command-line tool.</p>"},{"location":"en/modules/digitalocean/#configuration","title":"Configuration","text":"<p>This module requires the <code>doctl</code> CLI to be installed and authenticated. The standard way to do this is to generate a personal access token in your DigitalOcean control panel and set it as the <code>DIGITALOCEAN_ACCESS_TOKEN</code> environment variable.</p> <pre><code>export DIGITALOCEAN_ACCESS_TOKEN=\"your_do_api_token_here\"\n</code></pre> <p>The module will automatically use this token for all commands.</p>"},{"location":"en/modules/digitalocean/#generic-executor","title":"Generic Executor","text":""},{"location":"en/modules/digitalocean/#digitaloceanexecargs","title":"<code>digitalocean.exec(args)</code>","text":"<p>Executes any <code>doctl</code> command. This function automatically adds the <code>--output json</code> flag to ensure that the output is machine-parsable.</p> <p>Parameters:</p> <ul> <li><code>args</code> (table): Required. A table of strings representing the command and arguments to pass to <code>doctl</code> (e.g., <code>{\"compute\", \"droplet\", \"list\"}</code>).</li> </ul> <p>Returns:</p> <p>A table containing the following fields: - <code>stdout</code> (string): The standard output from the command (as a JSON string). - <code>stderr</code> (string): The standard error from the command. - <code>exit_code</code> (number): The exit code of the command. <code>0</code> typically indicates success.</p> <p>Example:</p> <pre><code>local result = digitalocean.exec({\"account\", \"get\"})\nif result.exit_code == 0 then\n  local account_info, err = data.parse_json(result.stdout)\n  if account_info then\n    log.info(\"Account status: \" .. account_info.status)\n  end\nend\n</code></pre>"},{"location":"en/modules/digitalocean/#droplets-helpers","title":"Droplets Helpers","text":""},{"location":"en/modules/digitalocean/#digitaloceandropletslist","title":"<code>digitalocean.droplets.list()</code>","text":"<p>A high-level wrapper to list all Droplets in your account.</p> <p>Returns:</p> <ul> <li><code>droplets</code> (table) on success, where the table is a parsed JSON array of your Droplet objects.</li> <li><code>nil, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>local droplets, err = digitalocean.droplets.list()\nif droplets then\n  for _, droplet in ipairs(droplets) do\n    print(\"Found Droplet: \" .. droplet.name)\n  end\nend\n</code></pre>"},{"location":"en/modules/digitalocean/#digitaloceandropletsdeleteparams","title":"<code>digitalocean.droplets.delete(params)</code>","text":"<p>Deletes a specific Droplet by its ID.</p> <p>Parameters:</p> <ul> <li><code>params</code> (table): A table containing the following fields:<ul> <li><code>id</code> (string): Required. The ID of the Droplet to delete.</li> <li><code>force</code> (boolean): Optional. If <code>true</code>, adds the <code>--force</code> flag to bypass the confirmation prompt. Defaults to <code>false</code>.</li> </ul> </li> </ul> <p>Returns:</p> <ul> <li><code>true</code> on success.</li> <li><code>false, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>local ok, err = digitalocean.droplets.delete({\n  id = \"123456789\",\n  force = true\n})\nif not ok then\n  log.error(\"Failed to delete droplet: \" .. err)\nend\n</code></pre>"},{"location":"en/modules/docker/","title":"Docker Module","text":"<p>The <code>docker</code> module provides a convenient interface for interacting with the Docker daemon, allowing you to build, run, and push Docker images as part of your pipelines.</p>"},{"location":"en/modules/docker/#configuration","title":"Configuration","text":"<p>This module requires the <code>docker</code> CLI to be installed and the Docker daemon to be running and accessible.</p>"},{"location":"en/modules/docker/#functions","title":"Functions","text":""},{"location":"en/modules/docker/#dockerexecargs","title":"<code>docker.exec(args)</code>","text":"<p>Executes any raw <code>docker</code> command.</p> <ul> <li><code>args</code> (table): Required. A list of arguments to pass to the <code>docker</code> command (e.g., <code>{\"ps\", \"-a\"}</code>).</li> <li>Returns: A result table with <code>success</code>, <code>stdout</code>, <code>stderr</code>, and <code>exit_code</code>.</li> </ul>"},{"location":"en/modules/docker/#dockerbuildparams","title":"<code>docker.build(params)</code>","text":"<p>Builds a Docker image using <code>docker build</code>.</p> <ul> <li><code>params</code> (table):<ul> <li><code>tag</code> (string): Required. The tag for the image (e.g., <code>my-app:latest</code>).</li> <li><code>path</code> (string): Required. The build context path.</li> <li><code>dockerfile</code> (string): Optional. The path to the Dockerfile.</li> <li><code>build_args</code> (table): Optional. A table of build arguments (e.g., <code>{VERSION = \"1.0\"}</code>).</li> </ul> </li> <li>Returns: A result table.</li> </ul>"},{"location":"en/modules/docker/#dockerpushparams","title":"<code>docker.push(params)</code>","text":"<p>Pushes a Docker image to a registry using <code>docker push</code>.</p> <ul> <li><code>params</code> (table):<ul> <li><code>tag</code> (string): Required. The tag of the image to push.</li> </ul> </li> <li>Returns: A result table.</li> </ul>"},{"location":"en/modules/docker/#dockerrunparams","title":"<code>docker.run(params)</code>","text":"<p>Runs a Docker container using <code>docker run</code>.</p> <ul> <li><code>params</code> (table):<ul> <li><code>image</code> (string): Required. The image to run.</li> <li><code>name</code> (string): Optional. The name for the container.</li> <li><code>detach</code> (boolean): Optional. If <code>true</code>, runs the container in the background (<code>-d</code>).</li> <li><code>ports</code> (table): Optional. A list of port mappings (e.g., <code>{\"8080:80\"}</code>).</li> <li><code>env</code> (table): Optional. A table of environment variables (e.g., <code>{MY_VAR = \"value\"}</code>).</li> </ul> </li> <li>Returns: A result table.</li> </ul>"},{"location":"en/modules/docker/#example","title":"Example","text":"<pre><code>local image_tag = \"my-test-image:latest\"\n\n-- Task 1: Build\nlocal result_build = docker.build({\n  tag = image_tag,\n  path = \"./app\"\n})\nif not result_build.success then return false, \"Build failed\" end\n\n-- Task 2: Run\nlocal result_run = docker.run({\n  image = image_tag,\n  name = \"my-test-container\",\n  ports = {\"8080:80\"}\n})\nif not result_run.success then return false, \"Run failed\" end\n\n-- Task 3: Push (after successful testing)\nlocal result_push = docker.push({tag = image_tag})\nif not result_push.success then return false, \"Push failed\" end\n</code></pre>"},{"location":"en/modules/exec/","title":"Exec Module","text":"<p>The <code>exec</code> module is one of the most fundamental modules in <code>sloth-runner</code>. It provides a powerful function to execute arbitrary shell commands, giving you full control over the execution environment.</p>"},{"location":"en/modules/exec/#execruncommand-options","title":"<code>exec.run(command, [options])</code>","text":"<p>Executes a shell command using <code>bash -c</code>.</p>"},{"location":"en/modules/exec/#parameters","title":"Parameters","text":"<ul> <li><code>command</code> (string): The shell command to execute.</li> <li><code>options</code> (table, optional): A table of options to control the execution.<ul> <li><code>workdir</code> (string): The working directory where the command should be executed. If not provided, it runs in the task group's temporary directory (if available) or the current directory.</li> <li><code>env</code> (table): A dictionary of environment variables (key-value pairs) to set for the command's execution. These are added to the existing environment.</li> </ul> </li> </ul>"},{"location":"en/modules/exec/#returns","title":"Returns","text":"<p>A table containing the result of the command execution:</p> <ul> <li><code>success</code> (boolean): <code>true</code> if the command exited with a code of <code>0</code>, otherwise <code>false</code>.</li> <li><code>stdout</code> (string): The standard output from the command.</li> <li><code>stderr</code> (string): The standard error output from the command.</li> </ul>"},{"location":"en/modules/exec/#example","title":"Example","text":"<p>This example demonstrates how to use <code>exec.run</code> with a custom working directory and environment variables.</p> <pre><code>-- examples/exec_module_example.sloth\n\nModern DSLs = {\n  main = {\n    description = \"A task to demonstrate the exec module.\",\n    tasks = {\n      {\n        name = \"run-with-options\",\n        description = \"Executes a command with a custom workdir and environment.\",\n        command = function()\n          log.info(\"Preparing to run a custom command...\")\n\n          local exec = require(\"exec\")\n\n          -- Create a temporary directory for the example\n          local temp_dir = \"/tmp/sloth-exec-test\"\n          fs.mkdir(temp_dir)\n          fs.write(temp_dir .. \"/test.txt\", \"hello from test file\")\n\n          -- Define options\n          local options = {\n            workdir = temp_dir,\n            env = {\n              MY_VAR = \"SlothRunner\",\n              ANOTHER_VAR = \"is_awesome\"\n            }\n          }\n\n          -- Execute the command\n          local result = exec.run(\"echo 'MY_VAR is $MY_VAR' &amp;&amp; ls -l &amp;&amp; cat test.txt\", options)\n\n          -- Clean up the temporary directory\n          fs.rm_r(temp_dir)\n\n          if result.success then\n            log.info(\"Command executed successfully!\")\n            print(\"--- STDOUT ---\")\n            print(result.stdout)\n            print(\"--------------\")\n            return true, \"Exec command successful.\"\n          else\n            log.error(\"Exec command failed.\")\n            log.error(\"Stderr: \" .. result.stderr)\n            return false, \"Exec command failed.\"\n          end\n        end\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"en/modules/fs/","title":"FS Module","text":"<p>The <code>fs</code> module provides essential functions for interacting with the file system directly from your Lua scripts.</p>"},{"location":"en/modules/fs/#fsreadpath","title":"<code>fs.read(path)</code>","text":"<p>Reads the entire content of a file.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The path to the file.</li> </ul> </li> <li>Returns:<ul> <li><code>string</code>: The content of the file.</li> <li><code>error</code>: An error object if the read fails.</li> </ul> </li> </ul>"},{"location":"en/modules/fs/#fswritepath-content","title":"<code>fs.write(path, content)</code>","text":"<p>Writes content to a file, overwriting it if it already exists.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The path to the file.</li> <li><code>content</code> (string): The content to write.</li> </ul> </li> <li>Returns:<ul> <li><code>error</code>: An error object if the write fails.</li> </ul> </li> </ul>"},{"location":"en/modules/fs/#fsappendpath-content","title":"<code>fs.append(path, content)</code>","text":"<p>Appends content to the end of a file. Creates the file if it doesn't exist.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The path to the file.</li> <li><code>content</code> (string): The content to append.</li> </ul> </li> <li>Returns:<ul> <li><code>error</code>: An error object if the append fails.</li> </ul> </li> </ul>"},{"location":"en/modules/fs/#fsexistspath","title":"<code>fs.exists(path)</code>","text":"<p>Checks if a file or directory exists at the given path.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The path to check.</li> </ul> </li> <li>Returns:<ul> <li><code>boolean</code>: <code>true</code> if the path exists, <code>false</code> otherwise.</li> </ul> </li> </ul>"},{"location":"en/modules/fs/#fsmkdirpath","title":"<code>fs.mkdir(path)</code>","text":"<p>Creates a directory at the given path, including any necessary parent directories (like <code>mkdir -p</code>).</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The directory path to create.</li> </ul> </li> <li>Returns:<ul> <li><code>error</code>: An error object if the creation fails.</li> </ul> </li> </ul>"},{"location":"en/modules/fs/#fsrmpath","title":"<code>fs.rm(path)</code>","text":"<p>Removes a single file.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The path to the file to remove.</li> </ul> </li> <li>Returns:<ul> <li><code>error</code>: An error object if the removal fails.</li> </ul> </li> </ul>"},{"location":"en/modules/fs/#fsrm_rpath","title":"<code>fs.rm_r(path)</code>","text":"<p>Removes a file or directory recursively (like <code>rm -rf</code>).</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The path to remove.</li> </ul> </li> <li>Returns:<ul> <li><code>error</code>: An error object if the removal fails.</li> </ul> </li> </ul>"},{"location":"en/modules/fs/#fslspath","title":"<code>fs.ls(path)</code>","text":"<p>Lists the contents of a directory.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The path to the directory.</li> </ul> </li> <li>Returns:<ul> <li><code>table</code>: A table containing the names of files and subdirectories.</li> <li><code>error</code>: An error object if the listing fails.</li> </ul> </li> </ul>"},{"location":"en/modules/fs/#fstmpname","title":"<code>fs.tmpname()</code>","text":"<p>Generates a unique temporary directory path. Note: This function only returns the name; it does not create the directory.</p> <ul> <li>Returns:<ul> <li><code>string</code>: A unique path suitable for a temporary directory.</li> <li><code>error</code>: An error object if a name could not be generated.</li> </ul> </li> </ul>"},{"location":"en/modules/fs/#example","title":"Example","text":"<pre><code>command = function()\n  local fs = require(\"fs\")\n\n  local tmp_dir = \"/tmp/fs-example\"\n  log.info(\"Creating directory: \" .. tmp_dir)\n  fs.mkdir(tmp_dir)\n\n  local file_path = tmp_dir .. \"/my_file.txt\"\n  log.info(\"Writing to file: \" .. file_path)\n  fs.write(file_path, \"Hello, Sloth Runner!\\n\")\n\n  log.info(\"Appending to file...\")\n  fs.append(file_path, \"This is a new line.\")\n\n  if fs.exists(file_path) then\n    log.info(\"File content: \" .. fs.read(file_path))\n  end\n\n  log.info(\"Listing contents of \" .. tmp_dir)\n  local contents = fs.ls(tmp_dir)\n  for i, name in ipairs(contents) do\n    print(\"- \" .. name)\n  end\n\n  log.info(\"Cleaning up...\")\n  fs.rm_r(tmp_dir)\n\n  return true, \"FS module operations successful.\"\nend\n</code></pre>"},{"location":"en/modules/gcp/","title":"GCP Module","text":"<p>The <code>gcp</code> module provides a simple interface for executing Google Cloud CLI (<code>gcloud</code>) commands from within a <code>sloth-runner</code> task.</p>"},{"location":"en/modules/gcp/#gcpexecargs","title":"<code>gcp.exec(args)</code>","text":"<p>Executes a <code>gcloud</code> command with the specified arguments.</p>"},{"location":"en/modules/gcp/#parameters","title":"Parameters","text":"<ul> <li><code>args</code> (table): A Lua table (array) of strings representing the arguments to pass to the <code>gcloud</code> command. For example, <code>{\"compute\", \"instances\", \"list\"}</code>.</li> </ul>"},{"location":"en/modules/gcp/#returns","title":"Returns","text":"<p>A table containing the result of the command execution with the following keys:</p> <ul> <li><code>stdout</code> (string): The standard output from the command.</li> <li><code>stderr</code> (string): The standard error output from the command.</li> <li><code>exit_code</code> (number): The exit code of the command. An exit code of <code>0</code> typically indicates success.</li> </ul>"},{"location":"en/modules/gcp/#example","title":"Example","text":"<p>This example defines a task that lists all Compute Engine instances in the <code>us-central1</code> region for a specific project.</p> <pre><code>-- examples/gcp_cli_example.sloth\n\nModern DSLs = {\n  main = {\n    description = \"A task to list GCP compute instances.\",\n    tasks = {\n      {\n        name = \"list-instances\",\n        description = \"Lists GCE instances in us-central1.\",\n        command = function()\n          log.info(\"Listing GCP instances...\")\n\n          -- require the gcp module to make it available\n          local gcp = require(\"gcp\")\n\n          -- Execute the gcloud command\n          local result = gcp.exec({\n            \"compute\", \n            \"instances\", \n            \"list\", \n            \"--project\", \"my-gcp-project-id\",\n            \"--zones\", \"us-central1-a,us-central1-b\"\n          })\n\n          -- Check the result\n          if result and result.exit_code == 0 then\n            log.info(\"Successfully listed instances.\")\n            print(\"--- INSTANCE LIST ---\")\n            print(result.stdout)\n            print(\"---------------------\")\n            return true, \"GCP command successful.\"\n          else\n            log.error(\"Failed to list GCP instances.\")\n            if result then\n              log.error(\"Stderr: \" .. result.stderr)\n            end\n            return false, \"GCP command failed.\"\n          end\n        end\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"en/modules/git/","title":"Git Module","text":"<p>The <code>git</code> module provides a fluent API to interact with Git repositories, allowing you to automate common version control operations like cloning, committing, and pushing.</p>"},{"location":"en/modules/git/#gitcloneurl-path","title":"<code>git.clone(url, path)</code>","text":"<p>Clones a Git repository to a local path.</p> <ul> <li>Parameters:<ul> <li><code>url</code> (string): The URL of the repository to clone.</li> <li><code>path</code> (string): The local directory to clone into.</li> </ul> </li> <li>Returns:<ul> <li><code>repo</code> (object): A <code>GitRepo</code> object on success.</li> <li><code>error</code>: An error object if the clone fails.</li> </ul> </li> </ul>"},{"location":"en/modules/git/#gitrepopath","title":"<code>git.repo(path)</code>","text":"<p>Opens an existing local Git repository.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The path to the existing local repository.</li> </ul> </li> <li>Returns:<ul> <li><code>repo</code> (object): A <code>GitRepo</code> object on success.</li> <li><code>error</code>: An error object if the path is not a valid Git repository.</li> </ul> </li> </ul>"},{"location":"en/modules/git/#the-gitrepo-object","title":"The <code>GitRepo</code> Object","text":"<p>This object represents a local repository and provides chainable methods for performing Git operations.</p>"},{"location":"en/modules/git/#repocheckoutref","title":"<code>repo:checkout(ref)</code>","text":"<p>Checks out a specific branch, tag, or commit.</p> <ul> <li>Parameters: <code>ref</code> (string).</li> </ul>"},{"location":"en/modules/git/#repopullremote-branch","title":"<code>repo:pull(remote, branch)</code>","text":"<p>Pulls changes from a remote.</p> <ul> <li>Parameters: <code>remote</code> (string), <code>branch</code> (string).</li> </ul>"},{"location":"en/modules/git/#repoaddpattern","title":"<code>repo:add(pattern)</code>","text":"<p>Stages files for a commit.</p> <ul> <li>Parameters: <code>pattern</code> (string), e.g., <code>\".\"</code> or <code>\"path/to/file.txt\"</code>.</li> </ul>"},{"location":"en/modules/git/#repocommitmessage","title":"<code>repo:commit(message)</code>","text":"<p>Creates a commit.</p> <ul> <li>Parameters: <code>message</code> (string).</li> </ul>"},{"location":"en/modules/git/#repotagname-message","title":"<code>repo:tag(name, [message])</code>","text":"<p>Creates a new tag.</p> <ul> <li>Parameters: <code>name</code> (string), <code>message</code> (string, optional).</li> </ul>"},{"location":"en/modules/git/#repopushremote-branch-options","title":"<code>repo:push(remote, branch, [options])</code>","text":"<p>Pushes commits to a remote.</p> <ul> <li>Parameters:<ul> <li><code>remote</code> (string).</li> <li><code>branch</code> (string).</li> <li><code>options</code> (table, optional): e.g., <code>{ follow_tags = true }</code>.</li> </ul> </li> </ul>"},{"location":"en/modules/git/#reporesult","title":"<code>repo:result()</code>","text":"<p>This method is called at the end of a chain to get the result of the last operation.</p> <ul> <li>Returns:<ul> <li><code>result</code> (table): A table containing <code>success</code> (boolean), <code>stdout</code> (string), and <code>stderr</code> (string).</li> </ul> </li> </ul>"},{"location":"en/modules/git/#example","title":"Example","text":"<p>This example demonstrates a full CI/CD-like workflow: clone, create a version file, add, commit, tag, and push.</p> <pre><code>command = function()\n  local git = require(\"git\")\n  local repo_path = \"/tmp/git-example-repo\"\n\n  -- Clean up previous runs\n  fs.rm_r(repo_path)\n\n  -- 1. Clone the repository\n  log.info(\"Cloning repository...\")\n  local repo, err = git.clone(\"https://github.com/chalkan3-sloth/sloth-runner.git\", repo_path)\n  if err then\n    return false, \"Failed to clone: \" .. err\n  end\n\n  -- 2. Create and write a version file\n  fs.write(repo_path .. \"/VERSION\", \"1.2.3\")\n\n  -- 3. Chain Git commands: add -&gt; commit -&gt; tag -&gt; push\n  log.info(\"Adding, committing, tagging, and pushing...\")\n  repo:add(\".\"):commit(\"ci: Bump version to 1.2.3\"):tag(\"v1.2.3\"):push(\"origin\", \"main\", { follow_tags = true })\n\n  -- 4. Get the result of the final operation (push)\n  local result = repo:result()\n\n  if not result.success then\n    log.error(\"Git push failed: \" .. result.stderr)\n    return false, \"Git push failed.\"\n  end\n\n  log.info(\"Successfully pushed new version tag.\")\n  return true, \"Git operations successful.\"\nend\n</code></pre>"},{"location":"en/modules/gitops/","title":"\ud83d\udd04 GitOps Module - Complete API Reference","text":"<p>The GitOps module provides native Git-driven deployment workflows with intelligent diff preview, automatic rollback, and multi-environment support.</p>"},{"location":"en/modules/gitops/#module-overview","title":"\ud83d\udccb Module Overview","text":"<pre><code>local gitops = require(\"gitops\")\n</code></pre> <p>The GitOps module enables:</p> <ul> <li>\ud83c\udf0a Declarative Workflows - Git-driven deployment automation</li> <li>\ud83d\udd0d Intelligent Diff Preview - Visual change analysis before deployment</li> <li>\ud83d\udee1\ufe0f Smart Rollback - Automatic rollback on failure with state backup</li> <li>\ud83c\udfe2 Multi-Environment - Separate workflows for dev/staging/production</li> <li>\u2638\ufe0f Kubernetes Native - First-class Kubernetes integration</li> </ul>"},{"location":"en/modules/gitops/#quick-setup","title":"\ud83d\ude80 Quick Setup","text":""},{"location":"en/modules/gitops/#gitopsworkflowconfig","title":"<code>gitops.workflow(config)</code>","text":"<p>Create a simple GitOps workflow with minimal configuration.</p> <pre><code>local workflow = gitops.workflow({\n    repo = \"https://github.com/company/infrastructure\",\n    branch = \"main\",\n    auto_sync = true,\n    diff_preview = true,\n    rollback_on_failure = true\n})\n\n-- Returns: {workflow_id: \"workflow-123\", repository_id: \"repo-123\", status: \"created\"}\n</code></pre> <p>Parameters: - <code>repo</code> (string): Git repository URL - <code>branch</code> (string): Git branch to track (default: \"main\") - <code>auto_sync</code> (boolean): Enable automatic synchronization - <code>diff_preview</code> (boolean): Enable diff preview before sync - <code>rollback_on_failure</code> (boolean): Enable automatic rollback on failure</p> <p>Returns: <pre><code>{\n    workflow_id = \"workflow-1234567890\",\n    repository_id = \"repo-1234567890\", \n    status = \"created\",\n    auto_sync = true,\n    diff_preview = true,\n    rollback_on_failure = true\n}\n</code></pre></p>"},{"location":"en/modules/gitops/#repository-management","title":"\ud83c\udfd7\ufe0f Repository Management","text":""},{"location":"en/modules/gitops/#gitopsregister_repositoryconfig","title":"<code>gitops.register_repository(config)</code>","text":"<p>Register a Git repository for GitOps workflows.</p> <pre><code>local repo_id = gitops.register_repository({\n    id = \"production-repo\",           -- Optional custom ID\n    url = \"https://github.com/company/k8s-manifests\",\n    branch = \"main\",\n    credentials = {                   -- Optional authentication\n        type = \"token\",\n        token = \"ghp_xxxxxxxxxxxx\"\n    },\n    poll_interval = \"30s\"            -- How often to check for changes\n})\n</code></pre> <p>Parameters: - <code>id</code> (string): Custom repository ID (auto-generated if not provided) - <code>url</code> (string): Git repository URL - <code>branch</code> (string): Git branch to track - <code>credentials</code> (table): Authentication credentials   - <code>type</code> (string): \"token\", \"ssh\", or \"userpass\"   - <code>token</code> (string): Personal access token (for type=\"token\")   - <code>username</code> (string): Username (for type=\"userpass\")   - <code>password</code> (string): Password (for type=\"userpass\")   - <code>ssh_key</code> (string): SSH private key (for type=\"ssh\") - <code>poll_interval</code> (string): Polling interval for auto-sync</p>"},{"location":"en/modules/gitops/#workflow-management","title":"\ud83d\udd27 Workflow Management","text":""},{"location":"en/modules/gitops/#gitopscreate_workflowconfig","title":"<code>gitops.create_workflow(config)</code>","text":"<p>Create a detailed GitOps workflow with advanced configuration.</p> <pre><code>local workflow_id = gitops.create_workflow({\n    id = \"production-workflow\",       -- Optional custom ID\n    name = \"Production Infrastructure\",\n    repository = \"production-repo\",   -- Repository ID\n    target_path = \"k8s/production\",   -- Path within repository\n    auto_sync = false,                -- Manual sync for production\n    diff_preview = true,\n    rollback_on_failure = true,\n    sync_policy = {                   -- Advanced sync configuration\n        auto_prune = true,            -- Remove orphaned resources\n        retry = {\n            limit = 3,\n            backoff = \"exponential\"\n        },\n        health_check = {\n            enabled = true,\n            timeout = \"10m\"\n        }\n    }\n})\n</code></pre> <p>Parameters: - <code>id</code> (string): Custom workflow ID - <code>name</code> (string): Human-readable workflow name - <code>repository</code> (string): Repository ID to use - <code>target_path</code> (string): Path within repository to sync - <code>auto_sync</code> (boolean): Enable automatic synchronization - <code>diff_preview</code> (boolean): Enable diff preview - <code>rollback_on_failure</code> (boolean): Enable automatic rollback - <code>sync_policy</code> (table): Advanced synchronization policies</p>"},{"location":"en/modules/gitops/#gitopsget_workflow_statusworkflow_id","title":"<code>gitops.get_workflow_status(workflow_id)</code>","text":"<p>Get the current status of a GitOps workflow.</p> <pre><code>local status = gitops.get_workflow_status(\"workflow-123\")\n</code></pre> <p>Returns: <pre><code>{\n    id = \"workflow-123\",\n    name = \"Production Infrastructure\",\n    status = \"synced\",                -- active | syncing | synced | failed | degraded\n    auto_sync = false,\n    repository = \"production-repo\",\n    last_sync_result = {              -- Last synchronization result\n        id = \"sync-1234567890\",\n        status = \"succeeded\",         -- running | succeeded | failed\n        start_time = \"2024-01-15T10:30:00Z\",\n        commit_hash = \"abc123def456\",\n        message = \"Sync completed successfully\",\n        metrics = {\n            duration = \"45.2s\",\n            resources_processed = 15,\n            resources_applied = 8,\n            resources_skipped = 7,\n            conflicts_resolved = 0\n        }\n    }\n}\n</code></pre></p>"},{"location":"en/modules/gitops/#gitopslist_workflows","title":"<code>gitops.list_workflows()</code>","text":"<p>List all registered GitOps workflows.</p> <pre><code>local workflows = gitops.list_workflows()\n-- Returns array of workflow objects\n</code></pre>"},{"location":"en/modules/gitops/#synchronization","title":"\ud83d\udd04 Synchronization","text":""},{"location":"en/modules/gitops/#gitopssync_workflowworkflow_id","title":"<code>gitops.sync_workflow(workflow_id)</code>","text":"<p>Manually trigger synchronization for a workflow.</p> <pre><code>local success = gitops.sync_workflow(\"workflow-123\")\n-- Returns: true on success, false on failure\n</code></pre>"},{"location":"en/modules/gitops/#gitopsstart_auto_sync","title":"<code>gitops.start_auto_sync()</code>","text":"<p>Start the auto-sync controller for all workflows with <code>auto_sync = true</code>.</p> <pre><code>gitops.start_auto_sync()\n-- Starts background polling for all auto-sync enabled workflows\n</code></pre>"},{"location":"en/modules/gitops/#gitopsstop_auto_sync","title":"<code>gitops.stop_auto_sync()</code>","text":"<p>Stop the auto-sync controller.</p> <pre><code>gitops.stop_auto_sync()\n-- Stops all background synchronization\n</code></pre>"},{"location":"en/modules/gitops/#diff-preview","title":"\ud83d\udd0d Diff &amp; Preview","text":""},{"location":"en/modules/gitops/#gitopsgenerate_diffworkflow_id","title":"<code>gitops.generate_diff(workflow_id)</code>","text":"<p>Generate a comprehensive diff preview for pending changes.</p> <pre><code>local diff = gitops.generate_diff(\"workflow-123\")\n</code></pre> <p>Returns: <pre><code>{\n    workflow_id = \"workflow-123\",\n    generated_at = \"2024-01-15T10:30:00Z\",\n    summary = {                       -- High-level summary\n        total_changes = 5,\n        created_resources = 2,\n        updated_resources = 2,\n        deleted_resources = 1,\n        conflict_count = 0,\n        warning_count = 1\n    },\n    changes = {                       -- Detailed changes\n        {\n            type = \"create\",          -- create | update | delete\n            resource = \"Deployment/web-app\",\n            desired_state = {...},    -- New resource definition\n            diff = \"+ Creating Deployment/web-app with 3 replicas\",\n            impact = \"medium\"         -- low | medium | high | critical\n        },\n        {\n            type = \"update\", \n            resource = \"Service/web-svc\",\n            current_state = {...},    -- Current resource state\n            desired_state = {...},    -- Desired resource state\n            diff = \"~ Updating Service/web-svc:\\n  port: 80 -&gt; 8080\",\n            impact = \"low\"\n        }\n    },\n    conflicts = {                     -- Detected conflicts\n        {\n            resource = \"ConfigMap/app-config\",\n            type = \"validation\",      -- resource_exists | out_of_sync | validation\n            description = \"Resource modified outside of GitOps\",\n            current_state = {...},\n            desired_state = {...},\n            suggestions = [\n                \"Review manual changes before proceeding\",\n                \"Consider updating the Git repository\"\n            ]\n        }\n    },\n    warnings = [                      -- Warnings and recommendations\n        \"High-impact change detected: Deployment/critical-app\"\n    ]\n}\n</code></pre></p>"},{"location":"en/modules/gitops/#gitopspreview_changesworkflow_id","title":"<code>gitops.preview_changes(workflow_id)</code>","text":"<p>Alias for <code>gitops.generate_diff()</code> for better readability.</p> <pre><code>local preview = gitops.preview_changes(\"workflow-123\")\n-- Same as gitops.generate_diff()\n</code></pre>"},{"location":"en/modules/gitops/#rollback","title":"\ud83d\udee1\ufe0f Rollback","text":""},{"location":"en/modules/gitops/#gitopsrollback_workflowworkflow_id-reason","title":"<code>gitops.rollback_workflow(workflow_id, reason)</code>","text":"<p>Rollback a workflow to its previous state.</p> <pre><code>local success = gitops.rollback_workflow(\"workflow-123\", \"Health check failed\")\n-- Returns: true on success, false on failure\n</code></pre> <p>Parameters: - <code>workflow_id</code> (string): Workflow to rollback - <code>reason</code> (string): Reason for rollback (for audit logging)</p>"},{"location":"en/modules/gitops/#complete-examples","title":"\ud83c\udfaf Complete Examples","text":""},{"location":"en/modules/gitops/#multi-environment-setup","title":"Multi-Environment Setup","text":"<pre><code>local gitops = require(\"gitops\")\nlocal log = require(\"log\")\n\n-- Define environments\nlocal environments = {\n    {\n        name = \"development\",\n        repo = \"https://github.com/company/k8s-dev\",\n        branch = \"develop\",\n        auto_sync = true,\n        sync_interval = \"5m\"\n    },\n    {\n        name = \"staging\",\n        repo = \"https://github.com/company/k8s-staging\",\n        branch = \"staging\", \n        auto_sync = true,\n        sync_interval = \"10m\"\n    },\n    {\n        name = \"production\",\n        repo = \"https://github.com/company/k8s-prod\",\n        branch = \"main\",\n        auto_sync = false,      -- Manual deployments in production\n        approval_required = true\n    }\n}\n\n-- Create workflows for all environments\nlocal workflows = {}\nfor _, env in ipairs(environments) do\n    -- Register repository\n    local repo_id = gitops.register_repository({\n        id = env.name .. \"-repo\",\n        url = env.repo,\n        branch = env.branch\n    })\n\n    -- Create workflow\n    local workflow_id = gitops.create_workflow({\n        id = env.name .. \"-workflow\",\n        name = env.name .. \" Environment\", \n        repository = repo_id,\n        target_path = \"manifests\",\n        auto_sync = env.auto_sync,\n        diff_preview = true,\n        rollback_on_failure = true\n    })\n\n    workflows[env.name] = workflow_id\n    log.info(\"Created GitOps workflow for \" .. env.name .. \": \" .. workflow_id)\nend\n\n-- Start auto-sync controller\ngitops.start_auto_sync()\n</code></pre>"},{"location":"en/modules/gitops/#production-deployment-with-validation","title":"Production Deployment with Validation","text":"<pre><code>local production_deploy = task(\"production_deploy\")\n    :description(\"Production deployment with full GitOps validation\")\n    :command(function(params, deps)\n        local workflow_id = workflows.production\n\n        -- Step 1: Generate diff and validate\n        log.info(\"\ud83d\udd0d Analyzing changes for production deployment...\")\n        local diff = gitops.generate_diff(workflow_id)\n\n        if not diff then\n            log.info(\"\u2139\ufe0f No changes detected\")\n            return {success = true, message = \"No changes to deploy\"}\n        end\n\n        -- Step 2: Display change summary\n        log.info(\"\ud83d\udcca Production Deployment Summary:\")\n        log.info(\"  \ud83d\udcdd Total changes: \" .. diff.summary.total_changes)\n        log.info(\"  \u2728 Created: \" .. diff.summary.created_resources)\n        log.info(\"  \ud83d\udd04 Updated: \" .. diff.summary.updated_resources)\n        log.info(\"  \ud83d\uddd1\ufe0f Deleted: \" .. diff.summary.deleted_resources)\n\n        -- Step 3: Check for conflicts and high-impact changes\n        if diff.summary.conflict_count &gt; 0 then\n            log.error(\"\ud83d\udca5 Conflicts detected - manual resolution required\")\n            return {success = false, message = \"Conflicts must be resolved\"}\n        end\n\n        local high_impact_changes = 0\n        for _, change in ipairs(diff.changes) do\n            if change.impact == \"high\" or change.impact == \"critical\" then\n                high_impact_changes = high_impact_changes + 1\n                log.warn(\"\u26a0\ufe0f High-impact: \" .. change.resource .. \" (\" .. change.type .. \")\")\n            end\n        end\n\n        -- Step 4: Show warnings\n        if #diff.warnings &gt; 0 then\n            log.warn(\"\u26a0\ufe0f Warnings:\")\n            for _, warning in ipairs(diff.warnings) do\n                log.warn(\"  \u2022 \" .. warning)\n            end\n        end\n\n        -- Step 5: Require approval for production\n        if high_impact_changes &gt; 0 then\n            print(\"\ud83d\udd12 High-impact changes detected. Proceed? (y/N)\")\n            local response = io.read()\n            if response:lower() ~= \"y\" then\n                return {success = false, message = \"Deployment cancelled\"}\n            end\n        end\n\n        -- Step 6: Execute deployment\n        log.info(\"\ud83d\ude80 Executing production deployment...\")\n        local sync_success = gitops.sync_workflow(workflow_id)\n\n        if not sync_success then\n            log.error(\"\ud83d\udca5 Production deployment failed!\")\n            return {success = false, message = \"Deployment failed\"}\n        end\n\n        -- Step 7: Verify deployment\n        log.info(\"\ud83d\udd0d Verifying deployment...\")\n        local status = gitops.get_workflow_status(workflow_id)\n\n        if status.status == \"synced\" and status.last_sync_result.status == \"succeeded\" then\n            log.info(\"\u2705 Production deployment successful!\")\n            log.info(\"\ud83d\udcca Applied \" .. status.last_sync_result.metrics.resources_applied .. \" resources\")\n            log.info(\"\u23f1\ufe0f Completed in \" .. status.last_sync_result.metrics.duration)\n            return {success = true, message = \"Production deployed successfully\"}\n        else\n            log.error(\"\ud83d\udca5 Deployment verification failed!\")\n\n            -- Automatic rollback\n            log.warn(\"\ud83d\udd04 Initiating automatic rollback...\")\n            local rollback_success = gitops.rollback_workflow(workflow_id, \"Deployment verification failed\")\n\n            if rollback_success then\n                log.info(\"\u2705 Automatic rollback completed\")\n                return {success = false, message = \"Deployment failed, rollback successful\"}\n            else\n                log.error(\"\ud83d\udca5 Rollback also failed!\")\n                return {success = false, message = \"Deployment and rollback both failed\"}\n            end\n        end\n    end)\n    :build()\n</code></pre>"},{"location":"en/modules/gitops/#kubernetes-specific-gitops","title":"Kubernetes-Specific GitOps","text":"<pre><code>local k8s_deploy = task(\"kubernetes_gitops_deploy\")\n    :description(\"Kubernetes-native GitOps deployment\")\n    :command(function(params, deps)\n        local workflow_id = params.workflow_id\n\n        -- Generate diff with Kubernetes-specific analysis\n        local diff = gitops.generate_diff(workflow_id)\n\n        -- Kubernetes-specific validations\n        local k8s_issues = {}\n        for _, change in ipairs(diff.changes) do\n            -- Check for dangerous Kubernetes operations\n            if change.type == \"delete\" then\n                if change.resource:match(\"Namespace\") then\n                    table.insert(k8s_issues, \"\ud83d\udea8 CRITICAL: Deleting namespace \" .. change.resource)\n                elseif change.resource:match(\"PersistentVolume\") then\n                    table.insert(k8s_issues, \"\u26a0\ufe0f WARNING: Deleting PersistentVolume \" .. change.resource)\n                end\n            end\n\n            if change.type == \"update\" and change.resource:match(\"Deployment\") then\n                log.info(\"\ud83d\udce6 Deployment update: \" .. change.resource)\n                -- Could add image change detection here\n            end\n        end\n\n        if #k8s_issues &gt; 0 then\n            log.warn(\"\ud83d\udea8 Kubernetes-specific issues detected:\")\n            for _, issue in ipairs(k8s_issues) do\n                log.warn(\"  \" .. issue)\n            end\n\n            print(\"Proceed despite Kubernetes warnings? (y/N)\")\n            local response = io.read()\n            if response:lower() ~= \"y\" then\n                return {success = false, message = \"Deployment cancelled due to K8s issues\"}\n            end\n        end\n\n        -- Execute Kubernetes deployment\n        local sync_success = gitops.sync_workflow(workflow_id)\n\n        if sync_success then\n            -- Kubernetes-specific post-deployment checks\n            log.info(\"\ud83d\udd0d Running Kubernetes health checks...\")\n\n            -- Could add kubectl-based health checks here\n            -- kubectl get pods --all-namespaces\n            -- kubectl get services\n            -- kubectl get ingress\n\n            return {success = true, message = \"Kubernetes deployment successful\"}\n        else\n            return {success = false, message = \"Kubernetes deployment failed\"}\n        end\n    end)\n    :build()\n</code></pre>"},{"location":"en/modules/gitops/#best-practices","title":"\ud83c\udfaf Best Practices","text":""},{"location":"en/modules/gitops/#1-environment-separation","title":"1. Environment Separation","text":"<pre><code>-- Use different repositories for different environments\nlocal env_repos = {\n    dev = \"company/k8s-dev\",\n    staging = \"company/k8s-staging\", \n    prod = \"company/k8s-prod\"\n}\n</code></pre>"},{"location":"en/modules/gitops/#2-always-preview-in-production","title":"2. Always Preview in Production","text":"<pre><code>-- Never deploy to production without reviewing changes\nif environment == \"production\" then\n    local diff = gitops.generate_diff(workflow_id)\n    if diff.summary.conflict_count &gt; 0 or has_high_impact_changes(diff) then\n        -- Require manual approval\n    end\nend\n</code></pre>"},{"location":"en/modules/gitops/#3-descriptive-rollback-reasons","title":"3. Descriptive Rollback Reasons","text":"<pre><code>-- Provide clear audit trail\ngitops.rollback_workflow(workflow_id, \"Health check failed after 5 minutes - CPU usage &gt; 90%\")\n</code></pre>"},{"location":"en/modules/gitops/#4-monitor-sync-results","title":"4. Monitor Sync Results","text":"<pre><code>-- Always verify deployment success\nlocal status = gitops.get_workflow_status(workflow_id)\nif status.last_sync_result.status ~= \"succeeded\" then\n    -- Handle failure appropriately\nend\n</code></pre>"},{"location":"en/modules/gitops/#5-use-auto-sync-judiciously","title":"5. Use Auto-Sync Judiciously","text":"<pre><code>-- Auto-sync for dev/staging, manual for production\nlocal auto_sync = environment ~= \"production\"\n</code></pre>"},{"location":"en/modules/gitops/#advanced-features","title":"\ud83d\udd27 Advanced Features","text":""},{"location":"en/modules/gitops/#custom-sync-policies","title":"Custom Sync Policies","text":"<pre><code>local workflow_id = gitops.create_workflow({\n    name = \"Advanced Sync Policy\",\n    repository = repo_id,\n    sync_policy = {\n        auto_prune = true,            -- Remove resources not in Git\n        retry = {\n            limit = 5,\n            backoff = \"exponential\",  -- exponential | linear | fixed\n            max_duration = \"10m\"\n        },\n        health_check = {\n            enabled = true,\n            timeout = \"10m\",\n            failure_mode = \"rollback\"  -- ignore | fail | rollback\n        },\n        pre_sync_hooks = [            -- Commands to run before sync\n            \"kubectl cluster-info\",\n            \"helm repo update\"\n        ],\n        post_sync_hooks = [           -- Commands to run after sync\n            \"kubectl rollout status deployment/app\",\n            \"curl -f http://app/health\"\n        ]\n    }\n})\n</code></pre>"},{"location":"en/modules/gitops/#multi-repository-coordination","title":"Multi-Repository Coordination","text":"<pre><code>-- Coordinate deployments across multiple repositories\nlocal repos = {\n    frontend = gitops.workflow({repo = \"company/frontend-config\"}),\n    backend = gitops.workflow({repo = \"company/backend-config\"}),\n    database = gitops.workflow({repo = \"company/database-config\"})\n}\n\n-- Deploy in dependency order\ngitops.sync_workflow(repos.database.workflow_id)\ngitops.sync_workflow(repos.backend.workflow_id) \ngitops.sync_workflow(repos.frontend.workflow_id)\n</code></pre>"},{"location":"en/modules/gitops/#integration-examples","title":"\ud83d\ude80 Integration Examples","text":""},{"location":"en/modules/gitops/#with-ai-module","title":"With AI Module","text":"<pre><code>local ai = require(\"ai\")\nlocal gitops = require(\"gitops\")\n\nlocal intelligent_deploy = task(\"ai_gitops_deploy\")\n    :command(function(params, deps)\n        local deploy_cmd = \"kubectl apply -f manifests/\"\n\n        -- AI failure prediction before GitOps deployment\n        local prediction = ai.predict_failure(\"ai_gitops_deploy\", deploy_cmd)\n\n        if prediction.failure_probability &gt; 0.25 then\n            log.warn(\"\ud83e\udd16 AI detected high deployment risk: \" .. \n                    string.format(\"%.1f%%\", prediction.failure_probability * 100))\n\n            for _, rec in ipairs(prediction.recommendations) do\n                log.info(\"\ud83d\udca1 AI Recommendation: \" .. rec)\n            end\n        end\n\n        -- GitOps deployment with AI insights\n        local workflow_id = params.gitops_workflow_id\n        local success = gitops.sync_workflow(workflow_id)\n\n        -- Record execution for AI learning\n        ai.record_execution({\n            task_name = \"ai_gitops_deploy\",\n            command = deploy_cmd,\n            success = success,\n            execution_time = \"30s\",\n            ai_prediction_used = true,\n            predicted_failure_probability = prediction.failure_probability\n        })\n\n        return {success = success}\n    end)\n    :build()\n</code></pre>"},{"location":"en/modules/gitops/#with-modern-dsl-workflows","title":"With Modern DSL Workflows","text":"<pre><code>workflow.define(\"gitops_pipeline\", {\n    description = \"Complete GitOps deployment pipeline\",\n    version = \"2.0.0\",\n\n    metadata = {\n        author = \"DevOps Team\",\n        tags = {\"gitops\", \"kubernetes\", \"production\"}\n    },\n\n    tasks = {\n        production_deploy,\n        k8s_deploy\n    },\n\n    on_task_start = function(task_name)\n        log.info(\"\ud83d\ude80 Starting GitOps task: \" .. task_name)\n    end,\n\n    on_task_complete = function(task_name, success, output)\n        if success then\n            log.info(\"\u2705 GitOps task completed: \" .. task_name)\n        else\n            log.error(\"\u274c GitOps task failed: \" .. task_name)\n\n            -- Could trigger emergency rollback here\n            if task_name == \"production_deploy\" then\n                log.warn(\"\ud83d\udd04 Triggering emergency rollback...\")\n                gitops.rollback_workflow(production_workflow_id, \"Emergency rollback due to task failure\")\n            end\n        end\n    end,\n\n    on_complete = function(success, results)\n        if success then\n            log.info(\"\ud83c\udf89 GitOps pipeline completed successfully!\")\n        else\n            log.error(\"\ud83d\udca5 GitOps pipeline failed - check logs for details\")\n        end\n    end\n})\n</code></pre>"},{"location":"en/modules/gitops/#see-also","title":"\ud83d\udcda See Also","text":"<ul> <li>GitOps Features Overview</li> <li>GitOps Quick Setup</li> <li>Multi-Environment GitOps</li> <li>Kubernetes Integration</li> <li>Rollback Strategies</li> </ul>"},{"location":"en/modules/log/","title":"Log Module","text":"<p>The <code>log</code> module provides a simple and essential interface for logging messages from within your Lua scripts to the <code>sloth-runner</code> console. Using this module is the standard way to provide feedback and debug information during a task's execution.</p>"},{"location":"en/modules/log/#loginfomessage","title":"<code>log.info(message)</code>","text":"<p>Logs a message at the INFO level. This is the standard level for general, informative messages.</p> <ul> <li>Parameters:<ul> <li><code>message</code> (string): The message to log.</li> </ul> </li> </ul>"},{"location":"en/modules/log/#logwarnmessage","title":"<code>log.warn(message)</code>","text":"<p>Logs a message at the WARN level. This is suitable for non-critical issues that should be brought to the user's attention.</p> <ul> <li>Parameters:<ul> <li><code>message</code> (string): The message to log.</li> </ul> </li> </ul>"},{"location":"en/modules/log/#logerrormessage","title":"<code>log.error(message)</code>","text":"<p>Logs a message at the ERROR level. This should be used for significant errors that might cause a task to fail.</p> <ul> <li>Parameters:<ul> <li><code>message</code> (string): The message to log.</li> </ul> </li> </ul>"},{"location":"en/modules/log/#logdebugmessage","title":"<code>log.debug(message)</code>","text":"<p>Logs a message at the DEBUG level. These messages are typically hidden unless the runner is in a verbose or debug mode. They are useful for detailed diagnostic information.</p> <ul> <li>Parameters:<ul> <li><code>message</code> (string): The message to log.</li> </ul> </li> </ul>"},{"location":"en/modules/log/#example","title":"Example","text":"<pre><code>command = function()\n  -- The log module is globally available and does not need to be required.\n\n  log.info(\"Starting the logging example task.\")\n\n  local user_name = \"Sloth\"\n  log.debug(\"Current user is: \" .. user_name)\n\n  if user_name ~= \"Sloth\" then\n    log.warn(\"The user is not the expected one.\")\n  end\n\n  log.info(\"Task is performing its main action...\")\n\n  local success = true -- Simulate a successful operation\n  if not success then\n    log.error(\"The main action failed unexpectedly!\")\n    return false, \"Main action failed\"\n  end\n\n  log.info(\"Logging example task finished successfully.\")\n  return true, \"Logging demonstrated.\"\nend\n</code></pre>"},{"location":"en/modules/metrics/","title":"\ud83d\udcca Metrics &amp; Monitoring Module","text":"<p>The Metrics &amp; Monitoring module provides comprehensive system monitoring, custom metrics collection, and health checking capabilities. It enables real-time observability of both system resources and application performance.</p>"},{"location":"en/modules/metrics/#key-features","title":"\ud83d\ude80 Key Features","text":"<ul> <li>System Metrics: Automatic collection of CPU, memory, disk, and network metrics</li> <li>Runtime Metrics: Go runtime information (goroutines, heap, GC)</li> <li>Custom Metrics: Gauges, counters, histograms, and timers</li> <li>Health Checks: Automatic system health monitoring</li> <li>HTTP Endpoints: Prometheus-compatible metrics export</li> <li>Alerting: Threshold-based alerts</li> <li>JSON API: Complete metrics data for integrations</li> </ul>"},{"location":"en/modules/metrics/#system-metrics","title":"\ud83d\udcca System Metrics","text":""},{"location":"en/modules/metrics/#cpu-memory-and-disk-monitoring","title":"CPU, Memory, and Disk Monitoring","text":"<pre><code>-- Get current CPU usage\nlocal cpu_usage = metrics.system_cpu()\nlog.info(\"CPU Usage: \" .. string.format(\"%.1f%%\", cpu_usage))\n\n-- Get memory information\nlocal memory_info = metrics.system_memory()\nlog.info(\"Memory: \" .. string.format(\"%.1f%% (%.0f/%.0f MB)\", \n    memory_info.percent, memory_info.used_mb, memory_info.total_mb))\n\n-- Get disk usage\nlocal disk_info = metrics.system_disk(\"/\")\nlog.info(\"Disk: \" .. string.format(\"%.1f%% (%.1f/%.1f GB)\", \n    disk_info.percent, disk_info.used_gb, disk_info.total_gb))\n\n-- Check specific disk path\nlocal var_disk = metrics.system_disk(\"/var\")\nlog.info(\"Var disk usage: \" .. string.format(\"%.1f%%\", var_disk.percent))\n</code></pre>"},{"location":"en/modules/metrics/#runtime-information","title":"Runtime Information","text":"<pre><code>-- Get Go runtime metrics\nlocal runtime = metrics.runtime_info()\nlog.info(\"Runtime Information:\")\nlog.info(\"  Goroutines: \" .. runtime.goroutines)\nlog.info(\"  CPU cores: \" .. runtime.num_cpu)\nlog.info(\"  Heap allocated: \" .. string.format(\"%.1f MB\", runtime.heap_alloc_mb))\nlog.info(\"  Heap system: \" .. string.format(\"%.1f MB\", runtime.heap_sys_mb))\nlog.info(\"  GC cycles: \" .. runtime.num_gc)\nlog.info(\"  Go version: \" .. runtime.go_version)\n</code></pre>"},{"location":"en/modules/metrics/#custom-metrics","title":"\ud83d\udcc8 Custom Metrics","text":""},{"location":"en/modules/metrics/#gauge-metrics-current-values","title":"Gauge Metrics (Current Values)","text":"<pre><code>-- Set simple gauge values\nmetrics.gauge(\"cpu_temperature\", 65.4)\nmetrics.gauge(\"active_connections\", 142)\nmetrics.gauge(\"queue_size\", 23)\n\n-- Set gauge with tags\nmetrics.gauge(\"memory_usage\", memory_percent, {\n    server = \"web-01\",\n    environment = \"production\",\n    region = \"us-east-1\"\n})\n\n-- Update deployment status\nmetrics.gauge(\"deployment_progress\", 75.5, {\n    app = \"frontend\",\n    version = \"v2.1.0\"\n})\n</code></pre>"},{"location":"en/modules/metrics/#counter-metrics-incremental-values","title":"Counter Metrics (Incremental Values)","text":"<pre><code>-- Increment counters\nlocal total_requests = metrics.counter(\"http_requests_total\", 1)\nlocal error_count = metrics.counter(\"http_errors_total\", 1, {\n    status_code = \"500\",\n    endpoint = \"/api/users\"\n})\n\n-- Bulk increment\nlocal processed = metrics.counter(\"messages_processed\", 50, {\n    queue = \"user_notifications\",\n    priority = \"high\"\n})\n\nlog.info(\"Total requests processed: \" .. total_requests)\n</code></pre>"},{"location":"en/modules/metrics/#histogram-metrics-value-distributions","title":"Histogram Metrics (Value Distributions)","text":"<pre><code>-- Record response times\nmetrics.histogram(\"response_time_ms\", 245.6, {\n    endpoint = \"/api/users\",\n    method = \"GET\"\n})\n\n-- Record payload sizes\nmetrics.histogram(\"payload_size_bytes\", 1024, {\n    content_type = \"application/json\"\n})\n\n-- Record batch sizes\nmetrics.histogram(\"batch_size\", 150, {\n    operation = \"bulk_insert\",\n    table = \"user_events\"\n})\n</code></pre>"},{"location":"en/modules/metrics/#timer-metrics-function-execution-time","title":"Timer Metrics (Function Execution Time)","text":"<pre><code>-- Time function execution automatically\nlocal duration = metrics.timer(\"database_query\", function()\n    -- Simulate database query\n    local result = exec.run(\"sleep 0.1\")\n    return result\nend, {\n    query_type = \"select\",\n    table = \"users\"\n})\n\nlog.info(\"Database query took: \" .. string.format(\"%.2f ms\", duration))\n\n-- Time complex operations\nlocal processing_time = metrics.timer(\"data_processing\", function()\n    -- Process large dataset\n    local data = {}\n    for i = 1, 100000 do\n        data[i] = math.sqrt(i) * 2.5\n    end\n    return #data\nend, {\n    operation = \"mathematical_computation\",\n    size = \"large\"\n})\n\nlog.info(\"Data processing completed in: \" .. string.format(\"%.2f ms\", processing_time))\n</code></pre>"},{"location":"en/modules/metrics/#health-monitoring","title":"\ud83c\udfe5 Health Monitoring","text":""},{"location":"en/modules/metrics/#automatic-health-status","title":"Automatic Health Status","text":"<pre><code>-- Get comprehensive health status\nlocal health = metrics.health_status()\nlog.info(\"Overall Health Status: \" .. health.overall)\n\n-- Check individual components\nlocal components = {\"cpu\", \"memory\", \"disk\"}\nfor _, component in ipairs(components) do\n    local comp_info = health[component]\n    if comp_info then\n        local status_icon = \"\u2705\"\n        if comp_info.status == \"warning\" then\n            status_icon = \"\u26a0\ufe0f\"\n        elseif comp_info.status == \"critical\" then\n            status_icon = \"\u274c\"\n        end\n\n        log.info(string.format(\"  %s %s: %.1f%% (%s)\", \n            status_icon, component:upper(), comp_info.usage, comp_info.status))\n    end\nend\n</code></pre>"},{"location":"en/modules/metrics/#custom-health-checks","title":"Custom Health Checks","text":"<pre><code>-- Create health check function\nfunction check_application_health()\n    local health_score = 100\n    local issues = {}\n\n    -- Check database connectivity\n    local db_result = exec.run(\"pg_isready -h localhost -p 5432\")\n    if db_result ~= \"\" then\n        health_score = health_score - 20\n        table.insert(issues, \"Database connection failed\")\n    end\n\n    -- Check disk space\n    local disk = metrics.system_disk(\"/\")\n    if disk.percent &gt; 90 then\n        health_score = health_score - 30\n        table.insert(issues, \"Disk space critical: \" .. string.format(\"%.1f%%\", disk.percent))\n    end\n\n    -- Check memory usage\n    local memory = metrics.system_memory()\n    if memory.percent &gt; 85 then\n        health_score = health_score - 25\n        table.insert(issues, \"Memory usage high: \" .. string.format(\"%.1f%%\", memory.percent))\n    end\n\n    -- Record health score\n    metrics.gauge(\"application_health_score\", health_score)\n\n    if health_score &lt; 70 then\n        metrics.alert(\"application_health\", {\n            level = \"warning\",\n            message = \"Application health degraded: \" .. table.concat(issues, \", \"),\n            score = health_score\n        })\n    end\n\n    return health_score &gt;= 70\nend\n\n-- Use in tasks\nModern DSLs = {\n    health_monitoring = {\n        tasks = {\n            health_check = {\n                command = function()\n                    local healthy = check_application_health()\n                    return healthy, healthy and \"System healthy\" or \"System health issues detected\"\n                end\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"en/modules/metrics/#alerting-system","title":"\ud83d\udea8 Alerting System","text":""},{"location":"en/modules/metrics/#creating-alerts","title":"Creating Alerts","text":"<pre><code>-- Simple threshold alert\nlocal cpu = metrics.system_cpu()\nif cpu &gt; 80 then\n    metrics.alert(\"high_cpu_usage\", {\n        level = \"warning\",\n        message = \"CPU usage is high: \" .. string.format(\"%.1f%%\", cpu),\n        threshold = 80,\n        value = cpu,\n        severity = \"medium\"\n    })\nend\n\n-- Complex alert with multiple conditions\nlocal memory = metrics.system_memory()\nlocal disk = metrics.system_disk()\n\nif memory.percent &gt; 90 and disk.percent &gt; 85 then\n    metrics.alert(\"resource_exhaustion\", {\n        level = \"critical\",\n        message = string.format(\"Critical resource usage - Memory: %.1f%%, Disk: %.1f%%\", \n            memory.percent, disk.percent),\n        memory_usage = memory.percent,\n        disk_usage = disk.percent,\n        recommended_action = \"Scale up resources immediately\"\n    })\nend\n\n-- Application-specific alerts\nlocal queue_size = state.get(\"task_queue_size\", 0)\nif queue_size &gt; 1000 then\n    metrics.alert(\"queue_backlog\", {\n        level = \"warning\", \n        message = \"Task queue backlog detected: \" .. queue_size .. \" items\",\n        queue_size = queue_size,\n        estimated_processing_time = queue_size * 2 .. \" seconds\"\n    })\nend\n</code></pre>"},{"location":"en/modules/metrics/#metrics-management","title":"\ud83d\udd0d Metrics Management","text":""},{"location":"en/modules/metrics/#retrieving-custom-metrics","title":"Retrieving Custom Metrics","text":"<pre><code>-- Get specific custom metric\nlocal cpu_metric = metrics.get_custom(\"cpu_temperature\")\nif cpu_metric then\n    log.info(\"CPU Temperature metric: \" .. data.to_json(cpu_metric))\nend\n\n-- List all custom metrics\nlocal all_metrics = metrics.list_custom()\nlog.info(\"Total custom metrics: \" .. #all_metrics)\nfor i, metric_name in ipairs(all_metrics) do\n    log.info(\"  \" .. i .. \". \" .. metric_name)\nend\n</code></pre>"},{"location":"en/modules/metrics/#performance-monitoring-example","title":"Performance Monitoring Example","text":"<pre><code>Modern DSLs = {\n    performance_monitoring = {\n        tasks = {\n            monitor_api_performance = {\n                command = function()\n                    -- Start monitoring session\n                    log.info(\"Starting API performance monitoring...\")\n\n                    -- Simulate API calls and measure performance\n                    for i = 1, 10 do\n                        local api_time = metrics.timer(\"api_call_\" .. i, function()\n                            -- Simulate API call\n                            exec.run(\"curl -s -o /dev/null -w '%{time_total}' https://api.example.com/health\")\n                        end, {\n                            endpoint = \"health\",\n                            call_number = tostring(i)\n                        })\n\n                        -- Record response time\n                        metrics.histogram(\"api_response_time\", api_time, {\n                            endpoint = \"health\"\n                        })\n\n                        -- Check if response time is acceptable\n                        if api_time &gt; 1000 then -- 1 second\n                            metrics.counter(\"slow_api_calls\", 1, {\n                                endpoint = \"health\"\n                            })\n\n                            metrics.alert(\"slow_api_response\", {\n                                level = \"warning\",\n                                message = string.format(\"Slow API response: %.2f ms\", api_time),\n                                response_time = api_time,\n                                threshold = 1000\n                            })\n                        end\n\n                        -- Brief delay between calls\n                        exec.run(\"sleep 0.1\")\n                    end\n\n                    -- Get summary statistics\n                    local system_health = metrics.health_status()\n                    log.info(\"System health after API tests: \" .. system_health.overall)\n\n                    return true, \"API performance monitoring completed\"\n                end\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"en/modules/metrics/#http-endpoints","title":"\ud83c\udf10 HTTP Endpoints","text":"<p>The metrics module automatically exposes HTTP endpoints for external monitoring systems:</p>"},{"location":"en/modules/metrics/#prometheus-format-metrics","title":"Prometheus Format (<code>/metrics</code>)","text":"<pre><code># Access Prometheus-compatible metrics\ncurl http://agent:8080/metrics\n\n# Example output:\n# sloth_agent_cpu_usage_percent 15.4\n# sloth_agent_memory_usage_mb 2048.5\n# sloth_agent_disk_usage_percent 67.2\n# sloth_agent_tasks_total 142\n</code></pre>"},{"location":"en/modules/metrics/#json-format-metricsjson","title":"JSON Format (<code>/metrics/json</code>)","text":"<pre><code># Get complete metrics in JSON format\ncurl http://agent:8080/metrics/json\n\n# Example response:\n{\n  \"agent_name\": \"myagent1\",\n  \"timestamp\": \"2024-01-15T10:30:00Z\",\n  \"system\": {\n    \"cpu_usage_percent\": 15.4,\n    \"memory_usage_mb\": 2048.5,\n    \"disk_usage_percent\": 67.2\n  },\n  \"runtime\": {\n    \"num_goroutines\": 25,\n    \"heap_alloc_mb\": 45.2\n  },\n  \"custom\": {\n    \"api_response_time\": {...},\n    \"deployment_progress\": 85.5\n  }\n}\n</code></pre>"},{"location":"en/modules/metrics/#health-check-health","title":"Health Check (<code>/health</code>)","text":"<pre><code># Check agent health status\ncurl http://agent:8080/health\n\n# Example response:\n{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2024-01-15T10:30:00Z\",\n  \"checks\": {\n    \"cpu\": {\"usage\": 15.4, \"status\": \"healthy\"},\n    \"memory\": {\"usage\": 45.8, \"status\": \"healthy\"},\n    \"disk\": {\"usage\": 67.2, \"status\": \"healthy\"}\n  }\n}\n</code></pre>"},{"location":"en/modules/metrics/#api-reference","title":"\ud83d\udccb API Reference","text":""},{"location":"en/modules/metrics/#system-metrics_1","title":"System Metrics","text":"Function Parameters Return Description <code>metrics.system_cpu()</code> - usage: number Get current CPU usage percentage <code>metrics.system_memory()</code> - info: table Get memory usage information <code>metrics.system_disk(path?)</code> path?: string info: table Get disk usage for path (default: \"/\") <code>metrics.runtime_info()</code> - info: table Get Go runtime information"},{"location":"en/modules/metrics/#custom-metrics_1","title":"Custom Metrics","text":"Function Parameters Return Description <code>metrics.gauge(name, value, tags?)</code> name: string, value: number, tags?: table success: boolean Set gauge metric <code>metrics.counter(name, increment?, tags?)</code> name: string, increment?: number, tags?: table new_value: number Increment counter <code>metrics.histogram(name, value, tags?)</code> name: string, value: number, tags?: table success: boolean Record histogram value <code>metrics.timer(name, function, tags?)</code> name: string, func: function, tags?: table duration: number Time function execution"},{"location":"en/modules/metrics/#health-and-monitoring","title":"Health and Monitoring","text":"Function Parameters Return Description <code>metrics.health_status()</code> - status: table Get comprehensive health status <code>metrics.alert(name, data)</code> name: string, data: table success: boolean Create alert"},{"location":"en/modules/metrics/#utilities","title":"Utilities","text":"Function Parameters Return Description <code>metrics.get_custom(name)</code> name: string metric: table | nil Get custom metric by name <code>metrics.list_custom()</code> - names: table List all custom metric names"},{"location":"en/modules/metrics/#best-practices","title":"\ud83c\udfaf Best Practices","text":"<ol> <li>Use appropriate metric types - gauges for current values, counters for totals, histograms for distributions</li> <li>Add meaningful tags to categorize and filter metrics</li> <li>Set reasonable alert thresholds to avoid alert fatigue</li> <li>Monitor performance impact of extensive metrics collection</li> <li>Use timers for performance-critical operations to identify bottlenecks</li> <li>Implement health checks for all critical system components</li> <li>Export metrics to external systems like Prometheus for long-term storage</li> </ol> <p>The Metrics &amp; Monitoring module provides comprehensive observability for your distributed sloth-runner environment! \ud83d\udcca\ud83d\ude80</p>"},{"location":"en/modules/net/","title":"Net Module","text":"<p>The <code>net</code> module provides functions for making HTTP requests and downloading files, allowing your tasks to interact with web services and remote resources.</p>"},{"location":"en/modules/net/#nethttp_geturl","title":"<code>net.http_get(url)</code>","text":"<p>Performs an HTTP GET request to the specified URL.</p> <ul> <li>Parameters:<ul> <li><code>url</code> (string): The URL to send the GET request to.</li> </ul> </li> <li>Returns:<ul> <li><code>body</code> (string): The response body as a string.</li> <li><code>status_code</code> (number): The HTTP status code of the response.</li> <li><code>headers</code> (table): A table containing the response headers.</li> <li><code>error</code> (string): An error message if the request failed.</li> </ul> </li> </ul>"},{"location":"en/modules/net/#nethttp_posturl-body-headers","title":"<code>net.http_post(url, body, [headers])</code>","text":"<p>Performs an HTTP POST request to the specified URL.</p> <ul> <li>Parameters:<ul> <li><code>url</code> (string): The URL to send the POST request to.</li> <li><code>body</code> (string): The request body to send.</li> <li><code>headers</code> (table, optional): A table of request headers to set.</li> </ul> </li> <li>Returns:<ul> <li><code>body</code> (string): The response body as a string.</li> <li><code>status_code</code> (number): The HTTP status code of the response.</li> <li><code>headers</code> (table): A table containing the response headers.</li> <li><code>error</code> (string): An error message if the request failed.</li> </ul> </li> </ul>"},{"location":"en/modules/net/#netdownloadurl-destination_path","title":"<code>net.download(url, destination_path)</code>","text":"<p>Downloads a file from a URL and saves it to a local path.</p> <ul> <li>Parameters:<ul> <li><code>url</code> (string): The URL of the file to download.</li> <li><code>destination_path</code> (string): The local file path to save the downloaded content.</li> </ul> </li> <li>Returns:<ul> <li><code>error</code>: An error object if the download fails.</li> </ul> </li> </ul>"},{"location":"en/modules/net/#example","title":"Example","text":"<pre><code>command = function()\n  local net = require(\"net\")\n\n  -- Example GET request\n  log.info(\"Performing GET request to httpbin.org...\")\n  local body, status, headers, err = net.http_get(\"https://httpbin.org/get\")\n  if err then\n    log.error(\"GET request failed: \" .. err)\n    return false, \"GET request failed\"\n  end\n  log.info(\"GET request successful! Status: \" .. status)\n  -- print(\"Response Body: \" .. body)\n\n  -- Example POST request\n  log.info(\"Performing POST request to httpbin.org...\")\n  local post_body = '{\"name\": \"sloth-runner\", \"awesome\": true}'\n  local post_headers = { [\"Content-Type\"] = \"application/json\" }\n  body, status, headers, err = net.http_post(\"https://httpbin.org/post\", post_body, post_headers)\n  if err then\n    log.error(\"POST request failed: \" .. err)\n    return false, \"POST request failed\"\n  end\n  log.info(\"POST request successful! Status: \" .. status)\n  -- print(\"Response Body: \" .. body)\n\n  -- Example Download\n  local download_path = \"/tmp/sloth-runner-logo.svg\"\n  log.info(\"Downloading file to \" .. download_path)\n  local err = net.download(\"https://raw.githubusercontent.com/chalkan3-sloth/sloth-runner/master/assets/sloth-runner-logo.svg\", download_path)\n  if err then\n    log.error(\"Download failed: \" .. err)\n    return false, \"Download failed\"\n  end\n  log.info(\"File downloaded successfully.\")\n  fs.rm(download_path) -- Clean up\n\n  return true, \"Net module operations successful.\"\nend\n</code></pre>"},{"location":"en/modules/notifications/","title":"Notifications Module","text":"<p>The <code>notifications</code> module provides a simple way to send messages to various notification services from your pipelines. This is particularly useful for reporting the success or failure of a CI/CD workflow.</p> <p>Currently, the following services are supported: - Slack - ntfy</p>"},{"location":"en/modules/notifications/#configuration","title":"Configuration","text":"<p>Before using the module, you need to add the required credentials or URLs to your <code>configs/values.yaml</code> file. The module will read these values at runtime.</p> <pre><code># configs/values.yaml\n\nnotifications:\n  slack:\n    # Your Slack Incoming Webhook URL\n    webhook_url: \"https://hooks.slack.com/services/...\"\n  ntfy:\n    # The ntfy server to use. Can be the public one or self-hosted.\n    server: \"https://ntfy.sh\"\n    # The topic to publish the notification to.\n    topic: \"your-sloth-runner-topic\"\n</code></pre>"},{"location":"en/modules/notifications/#slack","title":"Slack","text":""},{"location":"en/modules/notifications/#notificationsslacksendparams","title":"<code>notifications.slack.send(params)</code>","text":"<p>Sends a message to a Slack channel via an Incoming Webhook.</p> <p>Parameters:</p> <ul> <li><code>params</code> (table): A table containing the following fields:<ul> <li><code>webhook_url</code> (string): Required. The Slack Incoming Webhook URL. It's recommended to get this from the <code>values</code> module.</li> <li><code>message</code> (string): Required. The main text of the message.</li> <li><code>pipeline</code> (string): Optional. The name of the pipeline, which will be displayed in the message attachment for context.</li> <li><code>error_details</code> (string): Optional. Any error details to include in the message attachment. This is useful for failure notifications.</li> </ul> </li> </ul> <p>Returns:</p> <ul> <li><code>true</code> on success.</li> <li><code>false, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>local values = require(\"values\")\n\nlocal slack_webhook = values.get(\"notifications.slack.webhook_url\")\n\nif slack_webhook and slack_webhook ~= \"\" then\n  -- On success\n  notifications.slack.send({\n    webhook_url = slack_webhook,\n    message = \"\u2705 Pipeline executed successfully!\",\n    pipeline = \"my-awesome-pipeline\"\n  })\n\n  -- On failure\n  notifications.slack.send({\n    webhook_url = slack_webhook,\n    message = \"\u274c Pipeline execution failed!\",\n    pipeline = \"my-awesome-pipeline\",\n    error_details = \"Could not connect to database.\"\n  })\nend\n</code></pre>"},{"location":"en/modules/notifications/#ntfy","title":"ntfy","text":""},{"location":"en/modules/notifications/#notificationsntfysendparams","title":"<code>notifications.ntfy.send(params)</code>","text":"<p>Sends a message to an ntfy.sh topic.</p> <p>Parameters:</p> <ul> <li><code>params</code> (table): A table containing the following fields:<ul> <li><code>server</code> (string): Required. The ntfy server URL.</li> <li><code>topic</code> (string): Required. The topic to send the message to.</li> <li><code>message</code> (string): Required. The body of the notification.</li> <li><code>title</code> (string): Optional. The title of the notification.</li> <li><code>priority</code> (string): Optional. Notification priority (e.g., <code>high</code>, <code>default</code>, <code>low</code>).</li> <li><code>tags</code> (table): Optional. A list of tags (emojis) to add to the notification.</li> </ul> </li> </ul> <p>Returns:</p> <ul> <li><code>true</code> on success.</li> <li><code>false, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>local values = require(\"values\")\n\nlocal ntfy_server = values.get(\"notifications.ntfy.server\")\nlocal ntfy_topic = values.get(\"notifications.ntfy.topic\")\n\nif ntfy_topic and ntfy_topic ~= \"\" then\n  -- On success\n  notifications.ntfy.send({\n    server = ntfy_server,\n    topic = ntfy_topic,\n    title = \"Pipeline Success\",\n    message = \"The pipeline finished without errors.\",\n    priority = \"default\",\n    tags = {\"tada\"}\n  })\n\n  -- On failure\n  notifications.ntfy.send({\n    server = ntfy_server,\n    topic = ntfy_topic,\n    title = \"Pipeline Failed!\",\n    message = \"The pipeline failed with an error.\",\n    priority = \"high\",\n    tags = {\"skull\", \"warning\"}\n  })\nend\n</code></pre>"},{"location":"en/modules/pkg/","title":"\ud83d\udce6 Package Manager Module","text":"<p>The <code>pkg</code> module provides comprehensive cross-platform package management functionality. It automatically detects the system's package manager and provides a unified interface for managing packages.</p>"},{"location":"en/modules/pkg/#supported-package-managers","title":"\ud83c\udfaf Supported Package Managers","text":"<ul> <li>apt / apt-get (Debian/Ubuntu)</li> <li>yum / dnf (RHEL/CentOS/Fedora)</li> <li>pacman (Arch Linux)</li> <li>zypper (openSUSE)</li> <li>brew (macOS - Homebrew)</li> </ul>"},{"location":"en/modules/pkg/#functions-overview","title":"\ud83d\udcda Functions Overview","text":"Function Description <code>pkg.install({packages = ...})</code> Install one or more packages <code>pkg.remove({packages = ...})</code> Remove one or more packages <code>pkg.update({})</code> Update package cache/list <code>pkg.upgrade({})</code> Upgrade all packages <code>pkg.search({query = ...})</code> Search for packages <code>pkg.info({package = ...})</code> Get package information <code>pkg.list({})</code> List installed packages <code>pkg.is_installed({package = ...})</code> Check if package is installed <code>pkg.get_manager({})</code> Get detected package manager <code>pkg.clean({})</code> Clean package cache <code>pkg.autoremove({})</code> Remove unused dependencies <code>pkg.which({executable = ...})</code> Find executable path <code>pkg.version({package = ...})</code> Get package version <code>pkg.deps({package = ...})</code> List package dependencies <code>pkg.install_local({file = ...})</code> Install from local file"},{"location":"en/modules/pkg/#detailed-documentation","title":"\ud83d\udcd6 Detailed Documentation","text":""},{"location":"en/modules/pkg/#installation-removal","title":"Installation &amp; Removal","text":""},{"location":"en/modules/pkg/#pkginstallpackages","title":"<code>pkg.install({packages = ...})</code>","text":"<p>Installs one or more packages.</p> <p>Parameters: - <code>packages</code>: String (single package) or Table (multiple packages)</p> <p>Returns: - <code>success</code> (boolean): <code>true</code> on success, <code>false</code> on failure - <code>output</code> (string): Command output</p> <p>Examples:</p> Modern DSLWith delegate_toSingle Package <pre><code>local pkg = require(\"pkg\")\n\nlocal install_tools = task(\"install_tools\")\n    :description(\"Install development tools\")\n    :command(function(this, params)\n        log.info(\"Installing tools...\")\n\n        -- Install multiple packages\n        local tools = {\"git\", \"curl\", \"wget\", \"vim\"}\n        local success, output = pkg.install({packages = tools})\n\n        if success then\n            log.info(\"\u2705 Tools installed successfully!\")\n            return true, \"Installed\"\n        else\n            log.error(\"\u274c Failed: \" .. output)\n            return false, \"Failed\"\n        end\n    end)\n    :timeout(\"300s\")\n    :build()\n\nworkflow.define(\"setup\")\n    :tasks({ install_tools })\n</code></pre> <pre><code>local pkg = require(\"pkg\")\n\nlocal install_on_agent = task(\"install_on_agent\")\n    :description(\"Install packages on remote agent\")\n    :command(function(this, params)\n        log.info(\"Installing on remote agent...\")\n\n        local success, output = pkg.install({packages = {\"htop\", \"ncdu\"}})\n\n        if success then\n            log.info(\"\u2705 Installed on agent!\")\n            return true, \"OK\"\n        else\n            return false, \"Failed\"\n        end\n    end)\n    :delegate_to(\"production-server\")\n    :timeout(\"300s\")\n    :build()\n\nworkflow.define(\"remote_install\")\n    :tasks({ install_on_agent })\n</code></pre> <pre><code>local pkg = require(\"pkg\")\n\nlocal install_nginx = task(\"install_nginx\")\n    :description(\"Install nginx web server\")\n    :command(function(this, params)\n        -- Install single package\n        local success, output = pkg.install({packages = \"nginx\"})\n\n        if success then\n            log.info(\"\u2705 nginx installed!\")\n            return true, \"OK\"\n        else\n            return false, \"Failed: \" .. output\n        end\n    end)\n    :timeout(\"300s\")\n    :build()\n</code></pre>"},{"location":"en/modules/pkg/#pkgremovepackages","title":"<code>pkg.remove({packages = ...})</code>","text":"<p>Removes one or more packages.</p> <p>Parameters: - <code>packages</code>: String or Table</p> <p>Returns: - <code>success</code> (boolean), <code>output</code> (string)</p> <p>Example:</p> <pre><code>local pkg = require(\"pkg\")\n\nlocal cleanup = task(\"cleanup\")\n    :description(\"Remove unnecessary packages\")\n    :command(function(this, params)\n        local packages = {\"package1\", \"package2\"}\n        local success, output = pkg.remove({packages = packages})\n\n        if success then\n            log.info(\"\u2705 Packages removed\")\n            return true, \"Removed\"\n        end\n        return false, \"Failed\"\n    end)\n    :timeout(\"180s\")\n    :build()\n</code></pre>"},{"location":"en/modules/pkg/#package-information","title":"Package Information","text":""},{"location":"en/modules/pkg/#pkgsearchquery","title":"<code>pkg.search({query = ...})</code>","text":"<p>Searches for packages.</p> <p>Example:</p> <pre><code>local pkg = require(\"pkg\")\n\nlocal search_python = task(\"search_python\")\n    :description(\"Search for Python packages\")\n    :command(function(this, params)\n        local success, results = pkg.search({query = \"python3\"})\n\n        if success then\n            log.info(\"Search results:\")\n            local count = 0\n            for line in results:gmatch(\"[^\\r\\n]+\") do\n                if count &lt; 10 then\n                    log.info(\"  \u2022 \" .. line)\n                end\n                count = count + 1\n            end\n            return true, count .. \" results\"\n        end\n        return false, \"Search failed\"\n    end)\n    :timeout(\"60s\")\n    :build()\n</code></pre>"},{"location":"en/modules/pkg/#pkginfopackage","title":"<code>pkg.info({package = ...})</code>","text":"<p>Gets package information.</p> <p>Example:</p> <pre><code>local success, info = pkg.info({package = \"curl\"})\nif success then\n    log.info(\"Package info:\\n\" .. info)\nend\n</code></pre>"},{"location":"en/modules/pkg/#pkglist","title":"<code>pkg.list({})</code>","text":"<p>Lists installed packages.</p> <p>Returns: <code>success</code> (boolean), <code>packages</code> (table)</p> <p>Example:</p> <pre><code>local success, packages = pkg.list({})\nif success and type(packages) == \"table\" then\n    local count = 0\n    for _ in pairs(packages) do count = count + 1 end\n    log.info(\"\ud83d\udce6 Total: \" .. count .. \" packages\")\nend\n</code></pre>"},{"location":"en/modules/pkg/#system-maintenance","title":"System Maintenance","text":""},{"location":"en/modules/pkg/#pkgupdate","title":"<code>pkg.update({})</code>","text":"<p>Updates package cache.</p> <p>Example:</p> <pre><code>local update_cache = task(\"update_cache\")\n    :description(\"Update package cache\")\n    :command(function(this, params)\n        log.info(\"Updating...\")\n        return pkg.update({})\n    end)\n    :timeout(\"120s\")\n    :build()\n</code></pre>"},{"location":"en/modules/pkg/#pkgupgrade","title":"<code>pkg.upgrade({})</code>","text":"<p>Upgrades all packages.</p>"},{"location":"en/modules/pkg/#pkgclean","title":"<code>pkg.clean({})</code>","text":"<p>Cleans package cache.</p>"},{"location":"en/modules/pkg/#pkgautoremove","title":"<code>pkg.autoremove({})</code>","text":"<p>Removes unused dependencies.</p> <p>Example:</p> <pre><code>local maintenance = task(\"maintenance\")\n    :description(\"System maintenance\")\n    :command(function(this, params)\n        -- Update\n        pkg.update({})\n\n        -- Upgrade\n        pkg.upgrade({})\n\n        -- Clean\n        pkg.clean({})\n        pkg.autoremove({})\n\n        return true, \"Maintenance complete\"\n    end)\n    :timeout(\"600s\")\n    :build()\n</code></pre>"},{"location":"en/modules/pkg/#advanced-functions","title":"Advanced Functions","text":""},{"location":"en/modules/pkg/#pkgis_installedpackage","title":"<code>pkg.is_installed({package = ...})</code>","text":"<p>Checks if installed.</p> <p>Example:</p> <pre><code>local pkg = require(\"pkg\")\n\nlocal check_requirements = task(\"check_requirements\")\n    :description(\"Check required packages\")\n    :command(function(this, params)\n        local required = {\"git\", \"curl\", \"wget\"}\n        local missing = {}\n\n        for _, pkg_name in ipairs(required) do\n            local installed, _ = pkg.is_installed({package = pkg_name})\n            if not installed then\n                table.insert(missing, pkg_name)\n            end\n        end\n\n        if #missing &gt; 0 then\n            return false, \"Missing: \" .. table.concat(missing, \", \")\n        end\n\n        return true, \"All OK\"\n    end)\n    :build()\n</code></pre>"},{"location":"en/modules/pkg/#pkgget_manager","title":"<code>pkg.get_manager({})</code>","text":"<p>Returns package manager name.</p> <p>Example:</p> <pre><code>local manager, err = pkg.get_manager({})\nlog.info(\"Manager: \" .. (manager or \"unknown\"))\n</code></pre>"},{"location":"en/modules/pkg/#pkgwhichexecutable","title":"<code>pkg.which({executable = ...})</code>","text":"<p>Finds executable path.</p> <p>Example:</p> <pre><code>local path, err = pkg.which({executable = \"git\"})\nif path then\n    log.info(\"Git at: \" .. path)\nend\n</code></pre>"},{"location":"en/modules/pkg/#pkgversionpackage","title":"<code>pkg.version({package = ...})</code>","text":"<p>Gets package version.</p>"},{"location":"en/modules/pkg/#pkgdepspackage","title":"<code>pkg.deps({package = ...})</code>","text":"<p>Lists dependencies.</p>"},{"location":"en/modules/pkg/#pkginstall_localfile","title":"<code>pkg.install_local({file = ...})</code>","text":"<p>Installs from local file (.deb, .rpm).</p> <p>Example:</p> <pre><code>local success, output = pkg.install_local({file = \"/path/to/package.deb\"})\nif success then\n    log.info(\"\u2705 Package installed from local file\")\nend\n</code></pre>"},{"location":"en/modules/pkg/#complete-examples","title":"\ud83c\udfaf Complete Examples","text":""},{"location":"en/modules/pkg/#development-environment-setup","title":"Development Environment Setup","text":"<pre><code>local pkg = require(\"pkg\")\n\nlocal update = task(\"update\")\n    :command(function() return pkg.update({}) end)\n    :build()\n\nlocal install_tools = task(\"install_tools\")\n    :command(function()\n        local tools = {\"git\", \"curl\", \"wget\", \"vim\", \"htop\"}\n        return pkg.install({packages = tools})\n    end)\n    :depends_on({\"update\"})\n    :build()\n\nlocal verify = task(\"verify\")\n    :command(function()\n        for _, tool in ipairs({\"git\", \"curl\"}) do\n            local installed, _ = pkg.is_installed({package = tool})\n            if installed then\n                local path, _ = pkg.which({executable = tool})\n                log.info(\"\u2705 \" .. tool .. \" (\" .. (path or \"unknown\") .. \")\")\n            end\n        end\n        return true, \"OK\"\n    end)\n    :depends_on({\"install_tools\"})\n    :build()\n\nworkflow.define(\"setup_dev\")\n    :tasks({ update, install_tools, verify })\n</code></pre>"},{"location":"en/modules/pkg/#distributed-management","title":"Distributed Management","text":"<pre><code>local pkg = require(\"pkg\")\n\nlocal update_servers = task(\"update_servers\")\n    :command(function() return pkg.update({}) end)\n    :delegate_to(\"prod-server-1\")\n    :build()\n\nlocal install_monitoring = task(\"install_monitoring\")\n    :command(function()\n        return pkg.install({packages = {\"htop\", \"iotop\", \"nethogs\"}})\n    end)\n    :delegate_to(\"prod-server-1\")\n    :depends_on({\"update_servers\"})\n    :build()\n\nworkflow.define(\"setup_monitoring\")\n    :tasks({ update_servers, install_monitoring })\n</code></pre>"},{"location":"en/modules/pkg/#system-audit","title":"System Audit","text":"<pre><code>local pkg = require(\"pkg\")\n\nlocal audit = task(\"audit\")\n    :command(function()\n        log.info(\"\ud83d\udcca System Audit\")\n        log.info(string.rep(\"=\", 60))\n\n        local manager, _ = pkg.get_manager({})\n        log.info(\"Manager: \" .. (manager or \"unknown\"))\n\n        local _, packages = pkg.list({})\n        local count = 0\n        if type(packages) == \"table\" then\n            for _ in pairs(packages) do count = count + 1 end\n        end\n        log.info(\"Packages: \" .. count)\n\n        local critical = {\"openssl\", \"curl\"}\n        for _, p in ipairs(critical) do\n            local installed, _ = pkg.is_installed({package = p})\n            log.info((installed and \"\u2705\" or \"\u274c\") .. \" \" .. p)\n        end\n\n        return true, \"OK\"\n    end)\n    :build()\n\nworkflow.define(\"audit\")\n    :tasks({ audit })\n</code></pre>"},{"location":"en/modules/pkg/#best-practices","title":"\ud83d\ude80 Best Practices","text":"<ol> <li> <p>Update before installing: <pre><code>pkg.update({})\npkg.install({packages = \"package\"})\n</code></pre></p> </li> <li> <p>Check before installing: <pre><code>local installed, _ = pkg.is_installed({package = \"git\"})\nif not installed then\n    pkg.install({packages = \"git\"})\nend\n</code></pre></p> </li> <li> <p>Cleanup after operations: <pre><code>pkg.clean({})\npkg.autoremove({})\n</code></pre></p> </li> <li> <p>Use delegate_to for remote: <pre><code>:delegate_to(\"server-name\")\n</code></pre></p> </li> </ol>"},{"location":"en/modules/pkg/#platform-notes","title":"\u26a0\ufe0f Platform Notes","text":"<ul> <li>Linux: Requires sudo</li> <li>macOS: Homebrew doesn't need sudo</li> <li>Arch: Uses pacman syntax</li> <li>openSUSE: Uses zypper</li> </ul>"},{"location":"en/modules/pkg/#see-also","title":"\ud83d\udd17 See Also","text":"<ul> <li>exec Module</li> <li>Modern DSL Guide</li> <li>Distributed Agents</li> </ul>"},{"location":"en/modules/pulumi/","title":"Pulumi Module","text":"<p>The <code>pulumi</code> module provides a fluent API to orchestrate Pulumi stacks, enabling you to manage your Infrastructure as Code (IaC) workflows directly from <code>sloth-runner</code>.</p>"},{"location":"en/modules/pulumi/#pulumistackname-options","title":"<code>pulumi.stack(name, options)</code>","text":"<p>Creates a Pulumi stack object.</p> <ul> <li>Parameters:<ul> <li><code>name</code> (string): The full name of the stack (e.g., <code>\"my-org/my-project/dev\"</code>).</li> <li><code>options</code> (table): A table of options.<ul> <li><code>workdir</code> (string): Required. The path to the Pulumi project directory.</li> </ul> </li> </ul> </li> <li>Returns:<ul> <li><code>stack</code> (object): A <code>PulumiStack</code> object.</li> <li><code>error</code>: An error object if the stack cannot be initialized.</li> </ul> </li> </ul>"},{"location":"en/modules/pulumi/#the-pulumistack-object","title":"The <code>PulumiStack</code> Object","text":"<p>This object represents a specific Pulumi stack and provides methods for interaction.</p>"},{"location":"en/modules/pulumi/#stackupoptions","title":"<code>stack:up([options])</code>","text":"<p>Creates or updates the stack's resources by running <code>pulumi up</code>.</p> <ul> <li>Parameters:<ul> <li><code>options</code> (table, optional):<ul> <li><code>yes</code> (boolean): If <code>true</code>, passes <code>--yes</code> to approve the update automatically.</li> <li><code>config</code> (table): A dictionary of configuration values to pass to the stack.</li> <li><code>args</code> (table): A list of additional string arguments to pass to the command.</li> </ul> </li> </ul> </li> <li>Returns:<ul> <li><code>result</code> (table): A table containing <code>success</code> (boolean), <code>stdout</code> (string), and <code>stderr</code> (string).</li> </ul> </li> </ul>"},{"location":"en/modules/pulumi/#stackpreviewoptions","title":"<code>stack:preview([options])</code>","text":"<p>Previews the changes that would be made by an update by running <code>pulumi preview</code>.</p> <ul> <li>Parameters: Same as <code>stack:up</code>.</li> <li>Returns: Same as <code>stack:up</code>.</li> </ul>"},{"location":"en/modules/pulumi/#stackrefreshoptions","title":"<code>stack:refresh([options])</code>","text":"<p>Refreshes the stack's state by running <code>pulumi refresh</code>.</p> <ul> <li>Parameters: Same as <code>stack:up</code>.</li> <li>Returns: Same as <code>stack:up</code>.</li> </ul>"},{"location":"en/modules/pulumi/#stackdestroyoptions","title":"<code>stack:destroy([options])</code>","text":"<p>Destroys all resources in the stack by running <code>pulumi destroy</code>.</p> <ul> <li>Parameters: Same as <code>stack:up</code>.</li> <li>Returns: Same as <code>stack:up</code>.</li> </ul>"},{"location":"en/modules/pulumi/#stackoutputs","title":"<code>stack:outputs()</code>","text":"<p>Retrieves the outputs of a deployed stack.</p> <ul> <li>Returns:<ul> <li><code>outputs</code> (table): A Lua table of the stack's outputs.</li> <li><code>error</code>: An error object if fetching outputs fails.</li> </ul> </li> </ul>"},{"location":"en/modules/pulumi/#example","title":"Example","text":"<p>This example shows a common pattern: deploying a networking stack (VPC) and then using its output (<code>vpcId</code>) to configure and deploy an application stack.</p> <pre><code>command = function()\n  local pulumi = require(\"pulumi\")\n\n  -- 1. Define the VPC stack\n  local vpc_stack = pulumi.stack(\"my-org/vpc/prod\", { workdir = \"./pulumi/vpc\" })\n\n  -- 2. Deploy the VPC\n  log.info(\"Deploying VPC stack...\")\n  local vpc_result = vpc_stack:up({ yes = true })\n  if not vpc_result.success then\n    return false, \"VPC deployment failed: \" .. vpc_result.stderr\n  end\n\n  -- 3. Get the VPC ID from its outputs\n  log.info(\"Fetching VPC outputs...\")\n  local vpc_outputs, err = vpc_stack:outputs()\n  if err then\n    return false, \"Failed to get VPC outputs: \" .. err\n  end\n  local vpc_id = vpc_outputs.vpcId\n\n  -- 4. Define the App stack\n  local app_stack = pulumi.stack(\"my-org/app/prod\", { workdir = \"./pulumi/app\" })\n\n  -- 5. Deploy the App, passing the vpcId as configuration\n  log.info(\"Deploying App stack into VPC: \" .. vpc_id)\n  local app_result = app_stack:up({\n    yes = true,\n    config = { [\"my-app:vpcId\"] = vpc_id }\n  })\n  if not app_result.success then\n    return false, \"App deployment failed: \" .. app_result.stderr\n  end\n\n  log.info(\"All stacks deployed successfully.\")\n  return true, \"Pulumi orchestration complete.\"\nend\n</code></pre>"},{"location":"en/modules/python/","title":"Python Module","text":"<p>The <code>python</code> module provides a convenient way to manage Python virtual environments (<code>venv</code>) and execute scripts from within your <code>sloth-runner</code> tasks. This is particularly useful for workflows that involve Python-based tools or scripts.</p>"},{"location":"en/modules/python/#pythonvenvpath","title":"<code>python.venv(path)</code>","text":"<p>Creates a Python virtual environment object. Note that this only creates the object in Lua; the environment itself is not created on the file system until you call <code>:create()</code>.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The file system path where the virtual environment should be created (e.g., <code>./.venv</code>).</li> </ul> </li> <li>Returns:<ul> <li><code>venv</code> (object): A virtual environment object with methods to interact with it.</li> </ul> </li> </ul>"},{"location":"en/modules/python/#venvcreate","title":"<code>venv:create()</code>","text":"<p>Creates the virtual environment on the file system at the specified path.</p> <ul> <li>Returns:<ul> <li><code>error</code>: An error object if the creation fails.</li> </ul> </li> </ul>"},{"location":"en/modules/python/#venvpipcommand","title":"<code>venv:pip(command)</code>","text":"<p>Executes a <code>pip</code> command within the context of the virtual environment.</p> <ul> <li>Parameters:<ul> <li><code>command</code> (string): The arguments to pass to <code>pip</code> (e.g., <code>install -r requirements.txt</code>).</li> </ul> </li> <li>Returns:<ul> <li><code>result</code> (table): A table containing the <code>stdout</code>, <code>stderr</code>, and <code>exit_code</code> of the <code>pip</code> command.</li> </ul> </li> </ul>"},{"location":"en/modules/python/#venvexecscript_path","title":"<code>venv:exec(script_path)</code>","text":"<p>Executes a Python script using the Python interpreter from the virtual environment.</p> <ul> <li>Parameters:<ul> <li><code>script_path</code> (string): The path to the Python script to execute.</li> </ul> </li> <li>Returns:<ul> <li><code>result</code> (table): A table containing the <code>stdout</code>, <code>stderr</code>, and <code>exit_code</code> of the script execution.</li> </ul> </li> </ul>"},{"location":"en/modules/python/#example","title":"Example","text":"<p>This example demonstrates a complete lifecycle: creating a virtual environment, installing dependencies from a <code>requirements.txt</code> file, and running a Python script.</p> <pre><code>-- examples/python_venv_lifecycle_example.sloth\n\nModern DSLs = {\n  main = {\n    description = \"A task to demonstrate the Python venv lifecycle.\",\n    create_workdir_before_run = true, -- Use a temporary workdir\n    tasks = {\n      {\n        name = \"run-python-script\",\n        description = \"Creates a venv, installs dependencies, and runs a script.\",\n        command = function(params)\n          local python = require(\"python\")\n          local workdir = params.workdir -- Get the temp workdir from the group\n\n          -- 1. Write our Python script and dependencies to the workdir\n          fs.write(workdir .. \"/requirements.txt\", \"requests==2.28.1\")\n          fs.write(workdir .. \"/main.py\", \"import requests\\nprint(f'Hello from Python! Using requests version: {requests.__version__}')\")\n\n          -- 2. Create a venv object\n          local venv_path = workdir .. \"/.venv\"\n          log.info(\"Setting up virtual environment at: \" .. venv_path)\n          local venv = python.venv(venv_path)\n\n          -- 3. Create the venv on the filesystem\n          venv:create()\n\n          -- 4. Install dependencies using pip\n          log.info(\"Installing dependencies from requirements.txt...\")\n          local pip_result = venv:pip(\"install -r \" .. workdir .. \"/requirements.txt\")\n          if pip_result.exit_code ~= 0 then\n            log.error(\"Pip install failed: \" .. pip_result.stderr)\n            return false, \"Failed to install Python dependencies.\"\n          end\n\n          -- 5. Execute the script\n          log.info(\"Running the Python script...\")\n          local exec_result = venv:exec(workdir .. \"/main.py\")\n          if exec_result.exit_code ~= 0 then\n            log.error(\"Python script failed: \" .. exec_result.stderr)\n            return false, \"Python script execution failed.\"\n          end\n\n          log.info(\"Python script executed successfully.\")\n          print(\"---\\n--- Python Script Output ---\")\n          print(exec_result.stdout)\n          print(\"----------------------------\")\n\n          return true, \"Python venv lifecycle complete.\"\n        end\n      }\n    }\n  }\n}\n</code></pre> <p>```</p>"},{"location":"en/modules/reliability/","title":"\ud83d\udee1\ufe0f Reliability Module","text":"<p>The Reliability module provides enterprise-grade reliability patterns including circuit breakers, retry logic with exponential backoff, and failure handling strategies. These patterns help build resilient systems that can gracefully handle failures and recover automatically.</p>"},{"location":"en/modules/reliability/#key-features","title":"\ud83d\ude80 Key Features","text":"<ul> <li>Circuit Breaker Pattern: Prevents cascading failures by stopping calls to failing services</li> <li>Retry Logic: Configurable retry strategies with backoff algorithms</li> <li>Failure Tracking: Persistent failure state across task executions</li> <li>Multiple Strategies: Fixed delay, exponential backoff, linear backoff, custom</li> <li>Jitter Support: Randomization to prevent thundering herd problems</li> <li>State Integration: Uses state module for persistent failure tracking</li> <li>Callback Support: Custom callbacks for retry and state change events</li> </ul>"},{"location":"en/modules/reliability/#basic-usage","title":"\ud83d\udccb Basic Usage","text":""},{"location":"en/modules/reliability/#simple-retry","title":"Simple Retry","text":"<pre><code>-- Retry a function up to 3 times with 1 second initial delay\nlocal result = reliability.retry(3, 1, function()\n    -- Your potentially failing code here\n    if math.random() &gt; 0.7 then\n        return \"Success!\"\n    else\n        return nil, \"Random failure\"\n    end\nend)\n\nif result then\n    log.info(\"Operation succeeded: \" .. result)\nelse \n    log.error(\"All retries failed\")\nend\n</code></pre>"},{"location":"en/modules/reliability/#advanced-retry-configuration","title":"Advanced Retry Configuration","text":"<pre><code>local config = {\n    max_attempts = 5,\n    initial_delay = 0.5,  -- 500ms\n    max_delay = 10,       -- 10 seconds max\n    strategy = reliability.strategy.EXPONENTIAL_BACKOFF,\n    multiplier = 2.0,\n    jitter = true,\n    on_retry = function(attempt, delay, error)\n        log.warn(\"Retry attempt \" .. attempt .. \" in \" .. delay .. \"s: \" .. error)\n    end\n}\n\nlocal result = reliability.retry_with_config(config, function()\n    -- Your code here\n    return call_external_service()\nend)\n</code></pre>"},{"location":"en/modules/reliability/#circuit-breaker","title":"Circuit Breaker","text":"<pre><code>local cb_config = {\n    max_failures = 3,     -- Open after 3 failures\n    timeout = 30,         -- Wait 30 seconds before trying half-open\n    success_threshold = 2, -- Need 2 successes to close circuit\n    on_state_change = function(from_state, to_state)\n        log.info(\"Circuit breaker: \" .. from_state .. \" -&gt; \" .. to_state)\n    end\n}\n\nlocal result = reliability.circuit_breaker(\"external_api\", cb_config, function()\n    -- Call that might fail\n    return http.get(\"https://api.example.com/data\")\nend)\n</code></pre>"},{"location":"en/modules/reliability/#retry-strategies","title":"\ud83d\udd04 Retry Strategies","text":""},{"location":"en/modules/reliability/#available-strategy-types","title":"Available Strategy Types","text":"<pre><code>-- Fixed delay between retries\nreliability.strategy.FIXED_DELAY\n\n-- Exponential backoff (delay doubles each time)\nreliability.strategy.EXPONENTIAL_BACKOFF  \n\n-- Linear backoff (delay increases linearly)\nreliability.strategy.LINEAR_BACKOFF\n\n-- Custom delay function\nreliability.strategy.CUSTOM_BACKOFF\n</code></pre>"},{"location":"en/modules/reliability/#custom-delay-function","title":"Custom Delay Function","text":"<pre><code>local config = {\n    max_attempts = 5,\n    strategy = reliability.strategy.CUSTOM_BACKOFF,\n    custom_delay = function(attempt)\n        -- Custom fibonacci-like delays\n        if attempt == 1 then return 1 end\n        if attempt == 2 then return 1 end\n        return (attempt - 1) + (attempt - 2)\n    end\n}\n</code></pre>"},{"location":"en/modules/reliability/#circuit-breaker-states","title":"\u26a1 Circuit Breaker States","text":""},{"location":"en/modules/reliability/#state-transitions","title":"State Transitions","text":"<ul> <li>Closed \u2192 Open: After max_failures consecutive failures</li> <li>Open \u2192 Half-Open: After timeout period expires  </li> <li>Half-Open \u2192 Closed: After success_threshold successes</li> <li>Half-Open \u2192 Open: After any failure</li> </ul>"},{"location":"en/modules/reliability/#monitoring-circuit-state","title":"Monitoring Circuit State","text":"<pre><code>-- Get current statistics\nlocal stats = reliability.get_circuit_stats(\"my_service\")\nif stats then\n    log.info(\"Circuit state: \" .. stats.state)\n    log.info(\"Total requests: \" .. stats.requests)\n    log.info(\"Success rate: \" .. (stats.total_success / stats.requests * 100) .. \"%\")\nend\n\n-- List all circuit breakers\nlocal circuits = reliability.list_circuits()\nfor _, name in ipairs(circuits) do\n    log.info(\"Circuit: \" .. name)\nend\n\n-- Reset circuit breaker\nreliability.reset_circuit(\"my_service\")\n</code></pre>"},{"location":"en/modules/reliability/#integration-with-state-module","title":"\ud83d\udd17 Integration with State Module","text":""},{"location":"en/modules/reliability/#persistent-failure-tracking","title":"Persistent Failure Tracking","text":"<pre><code>-- Track failures across task executions\nlocal service_name = \"payment_service\"\nlocal failure_key = \"failures:\" .. service_name\n\nlocal function make_payment_call()\n    local success = make_api_call()\n\n    if success then\n        -- Reset failure count on success\n        state.set(failure_key, \"0\")\n        return true\n    else\n        -- Increment failure counter\n        local failures = state.increment(failure_key, 1)\n\n        -- Circuit break if too many failures\n        if failures &gt;= 5 then\n            return nil, \"Service circuit opened - too many failures\"\n        end\n\n        return nil, \"Temporary service failure\"\n    end\nend\n\n-- Use with retry\nlocal result = reliability.retry(3, 2, make_payment_call)\n</code></pre>"},{"location":"en/modules/reliability/#distributed-lock-with-retry","title":"Distributed Lock with Retry","text":"<pre><code>-- Combine distributed locking with retry logic\nlocal retry_config = {\n    max_attempts = 5,\n    initial_delay = 0.5,\n    strategy = reliability.strategy.LINEAR_BACKOFF\n}\n\nlocal result = reliability.retry_with_config(retry_config, function()\n    -- Try to acquire distributed lock\n    if not state.try_lock(\"critical_resource\", 10) then\n        return nil, \"Could not acquire lock\"\n    end\n\n    -- Do critical work\n    local work_result = perform_critical_operation()\n\n    -- Release lock\n    state.unlock(\"critical_resource\")\n\n    return work_result\nend)\n</code></pre>"},{"location":"en/modules/reliability/#advanced-patterns","title":"\ud83d\udcca Advanced Patterns","text":""},{"location":"en/modules/reliability/#combine-multiple-patterns","title":"Combine Multiple Patterns","text":"<pre><code>-- Deployment with circuit breaker, retry, and state tracking\nlocal deployment_steps = {\"validate\", \"backup\", \"deploy\", \"verify\"}\n\nfor _, step in ipairs(deployment_steps) do\n    local step_result = reliability.retry_with_config({\n        max_attempts = 3,\n        initial_delay = 1,\n        strategy = reliability.strategy.EXPONENTIAL_BACKOFF,\n        on_retry = function(attempt, delay, error)\n            state.append(\"deployment_log\", \n                step .. \" retry \" .. attempt .. \": \" .. error, \"\\n\")\n        end\n    }, function()\n        return reliability.circuit_breaker(\"deployment_service\", {\n            max_failures = 2,\n            timeout = 30,\n            on_state_change = function(from, to)\n                state.set(\"deployment_cb_state\", to)\n            end\n        }, function()\n            return execute_deployment_step(step)\n        end)\n    end)\n\n    if not step_result then\n        state.set(\"deployment_status\", \"failed_at_\" .. step)\n        return false, \"Deployment failed at: \" .. step\n    end\n\n    -- Update progress\n    local progress = math.floor((step_index / #deployment_steps) * 100)\n    state.set(\"deployment_progress\", progress)\nend\n\nstate.set(\"deployment_status\", \"completed\")\n</code></pre>"},{"location":"en/modules/reliability/#health-check-with-backoff","title":"Health Check with Backoff","text":"<pre><code>-- Health check with exponential backoff\nlocal health_config = {\n    max_attempts = 10,\n    initial_delay = 1,\n    max_delay = 60,\n    strategy = reliability.strategy.EXPONENTIAL_BACKOFF,\n    multiplier = 1.5,\n    jitter = true\n}\n\nlocal health_status = reliability.retry_with_config(health_config, function()\n    local response = http.get(\"http://localhost:8080/health\")\n\n    if response.status == 200 then\n        return response.body\n    else\n        return nil, \"Health check failed: \" .. response.status\n    end\nend)\n</code></pre>"},{"location":"en/modules/reliability/#configuration-reference","title":"\ud83c\udf9b\ufe0f Configuration Reference","text":""},{"location":"en/modules/reliability/#retry-configuration","title":"Retry Configuration","text":"<pre><code>{\n    max_attempts = 3,           -- Maximum retry attempts\n    initial_delay = 1,          -- Initial delay in seconds\n    max_delay = 30,             -- Maximum delay in seconds  \n    strategy = \"exponential\",   -- Retry strategy\n    multiplier = 2.0,           -- Backoff multiplier\n    jitter = true,              -- Add random jitter\n    on_retry = function(attempt, delay, error)\n        -- Retry callback\n    end\n}\n</code></pre>"},{"location":"en/modules/reliability/#circuit-breaker-configuration","title":"Circuit Breaker Configuration","text":"<pre><code>{\n    max_failures = 5,           -- Failures before opening\n    timeout = 60,               -- Seconds before half-open\n    success_threshold = 1,      -- Successes needed to close\n    on_state_change = function(from, to)\n        -- State change callback  \n    end\n}\n</code></pre>"},{"location":"en/modules/reliability/#error-handling","title":"\ud83d\udea8 Error Handling","text":""},{"location":"en/modules/reliability/#custom-error-predicates","title":"Custom Error Predicates","text":"<pre><code>-- Retry only on specific errors\nlocal config = {\n    max_attempts = 3,\n    should_retry = function(error)\n        -- Only retry on network errors\n        return string.find(error, \"network\") or string.find(error, \"timeout\")\n    end\n}\n</code></pre>"},{"location":"en/modules/reliability/#error-types","title":"Error Types","text":"<ul> <li>RetryableError: Explicitly marked as retryable</li> <li>NonRetryableError: Should not be retried</li> <li>CircuitBreakerError: Circuit is open, don't retry immediately</li> </ul>"},{"location":"en/modules/reliability/#monitoring-and-observability","title":"\ud83d\udcc8 Monitoring and Observability","text":""},{"location":"en/modules/reliability/#metrics-collection","title":"Metrics Collection","text":"<pre><code>-- Circuit breaker metrics\nlocal cb_stats = reliability.get_circuit_stats(\"service_name\")\n-- Returns: requests, total_success, total_failures, consecutive_success, \n--          consecutive_failures, state, last_success_time, last_failure_time\n\n-- State-based metrics\nlocal failure_count = tonumber(state.get(\"service_failures\", \"0\"))\nlocal success_rate = calculate_success_rate()\n\n-- Log metrics\nlog.info(\"Service metrics\", {\n    circuit_state = cb_stats.state,\n    failure_count = failure_count,\n    success_rate = success_rate\n})\n</code></pre> <p>The reliability module provides the foundation for building resilient, fault-tolerant automation workflows that can handle failures gracefully and recover automatically.</p>"},{"location":"en/modules/salt/","title":"Salt Module","text":"<p>The <code>salt</code> module provides a fluent API to interact with SaltStack, allowing you to run remote execution commands and manage configurations from your <code>sloth-runner</code> workflows.</p>"},{"location":"en/modules/salt/#saltclientoptions","title":"<code>salt.client([options])</code>","text":"<p>Creates a Salt client object.</p> <ul> <li>Parameters:<ul> <li><code>options</code> (table, optional): A table of options.<ul> <li><code>config_path</code> (string): Path to the Salt master configuration file.</li> </ul> </li> </ul> </li> <li>Returns:<ul> <li><code>client</code> (object): A <code>SaltClient</code> object.</li> </ul> </li> </ul>"},{"location":"en/modules/salt/#the-saltclient-object","title":"The <code>SaltClient</code> Object","text":"<p>This object represents a client for a Salt master and provides methods for targeting minions.</p>"},{"location":"en/modules/salt/#clienttargettarget_string-expr_form","title":"<code>client:target(target_string, [expr_form])</code>","text":"<p>Specifies the minion(s) to target for a command.</p> <ul> <li>Parameters:<ul> <li><code>target_string</code> (string): The target expression (e.g., <code>\"*\"</code> for all minions, <code>\"web-server-1\"</code>, or a grain value).</li> <li><code>expr_form</code> (string, optional): The type of targeting to use (e.g., <code>\"glob\"</code>, <code>\"grain\"</code>, <code>\"list\"</code>). Defaults to glob.</li> </ul> </li> <li>Returns:<ul> <li><code>target</code> (object): A <code>SaltTarget</code> object.</li> </ul> </li> </ul>"},{"location":"en/modules/salt/#the-salttarget-object","title":"The <code>SaltTarget</code> Object","text":"<p>This object represents a specific target and provides chainable methods for executing Salt functions.</p>"},{"location":"en/modules/salt/#targetcmdfunction-arg1-arg2","title":"<code>target:cmd(function, [arg1, arg2, ...])</code>","text":"<p>Executes a Salt execution module function on the target.</p> <ul> <li>Parameters:<ul> <li><code>function</code> (string): The name of the function to run (e.g., <code>\"test.ping\"</code>, <code>\"state.apply\"</code>, <code>\"cmd.run\"</code>).</li> <li><code>arg1</code>, <code>arg2</code>, ... (any): Additional arguments to pass to the Salt function.</li> </ul> </li> <li>Returns:<ul> <li><code>result</code> (table): A table containing <code>success</code> (boolean), <code>stdout</code> (string or table), and <code>stderr</code> (string). If the Salt command returns JSON, <code>stdout</code> will be a parsed Lua table.</li> </ul> </li> </ul>"},{"location":"en/modules/salt/#example","title":"Example","text":"<p>This example demonstrates targeting minions to ping them and apply a Salt state.</p> <pre><code>command = function()\n  local salt = require(\"salt\")\n\n  -- 1. Create a Salt client\n  local client = salt.client()\n\n  -- 2. Target all minions and ping them\n  log.info(\"Pinging all minions...\")\n  local ping_result = client:target(\"*\"):cmd(\"test.ping\")\n  if not ping_result.success then\n    return false, \"Failed to ping minions: \" .. ping_result.stderr\n  end\n  print(\"Ping Results:\")\n  print(data.to_yaml(ping_result.stdout)) -- stdout is a table\n\n  -- 3. Target a specific web server and apply a state\n  log.info(\"Applying 'nginx' state to web-server-1...\")\n  local apply_result = client:target(\"web-server-1\", \"glob\"):cmd(\"state.apply\", \"nginx\")\n  if not apply_result.success then\n    return false, \"Failed to apply state: \" .. apply_result.stderr\n  end\n\n  log.info(\"State applied successfully.\")\n  return true, \"Salt operations complete.\"\nend\n</code></pre>"},{"location":"en/modules/state/","title":"\ud83d\udcbe State Management Module","text":"<p>The State Management module provides powerful persistent state capabilities with atomic operations, distributed locks, and TTL (Time To Live) functionality. All data is stored locally using SQLite with WAL mode for maximum performance and reliability.</p>"},{"location":"en/modules/state/#key-features","title":"\ud83d\ude80 Key Features","text":"<ul> <li>SQLite Persistence: Reliable storage with WAL mode</li> <li>Atomic Operations: Thread-safe increment, compare-and-swap, append</li> <li>Distributed Locks: Critical sections with automatic timeout</li> <li>TTL (Time To Live): Automatic key expiration</li> <li>Data Types: String, number, boolean, table, list</li> <li>Pattern Matching: Wildcard key searches</li> <li>Auto Cleanup: Background cleanup of expired data</li> <li>Statistics: Usage and performance metrics</li> </ul>"},{"location":"en/modules/state/#basic-usage","title":"\ud83d\udccb Basic Usage","text":""},{"location":"en/modules/state/#setting-and-getting-values","title":"Setting and Getting Values","text":"<pre><code>-- Set values\nstate.set(\"app_version\", \"v1.2.3\")\nstate.set(\"user_count\", 1000)\nstate.set(\"config\", {\n    debug = true,\n    max_connections = 100\n})\n\n-- Get values\nlocal version = state.get(\"app_version\")\nlocal count = state.get(\"user_count\")\nlocal config = state.get(\"config\")\n\n-- Get with default value\nlocal theme = state.get(\"ui_theme\", \"dark\")\n\n-- Check existence\nif state.exists(\"app_version\") then\n    log.info(\"App version is configured\")\nend\n\n-- Delete key\nstate.delete(\"old_key\")\n</code></pre>"},{"location":"en/modules/state/#ttl-time-to-live","title":"TTL (Time To Live)","text":"<pre><code>-- Set with TTL (60 seconds)\nstate.set(\"session_token\", \"abc123\", 60)\n\n-- Set TTL for existing key\nstate.set_ttl(\"user_session\", 300) -- 5 minutes\n\n-- Check remaining TTL\nlocal ttl = state.get_ttl(\"session_token\")\nlog.info(\"Token expires in \" .. ttl .. \" seconds\")\n</code></pre>"},{"location":"en/modules/state/#atomic-operations","title":"Atomic Operations","text":"<pre><code>-- Atomic increment\nlocal counter = state.increment(\"page_views\", 1)\nlocal bulk_counter = state.increment(\"downloads\", 50)\n\n-- Atomic decrement  \nlocal remaining = state.decrement(\"inventory\", 5)\n\n-- String append\nstate.set(\"log_messages\", \"Starting application\")\nlocal new_length = state.append(\"log_messages\", \" -&gt; Connecting to database\")\n\n-- Atomic compare-and-swap\nlocal old_version = state.get(\"config_version\")\nlocal success = state.compare_swap(\"config_version\", old_version, old_version + 1)\nif success then\n    log.info(\"Configuration updated safely\")\nend\n</code></pre>"},{"location":"en/modules/state/#list-operations","title":"List Operations","text":"<pre><code>-- Add items to list\nstate.list_push(\"deployment_queue\", {\n    app = \"frontend\",\n    version = \"v2.1.0\",\n    environment = \"staging\"\n})\n\n-- Check list size\nlocal queue_size = state.list_length(\"deployment_queue\")\nlog.info(\"Items in queue: \" .. queue_size)\n\n-- Process list (pop removes last item)\nwhile state.list_length(\"deployment_queue\") &gt; 0 do\n    local deployment = state.list_pop(\"deployment_queue\")\n    log.info(\"Processing deployment: \" .. deployment.app)\n    -- Process deployment...\nend\n</code></pre>"},{"location":"en/modules/state/#distributed-locks-and-critical-sections","title":"Distributed Locks and Critical Sections","text":"<pre><code>-- Try to acquire lock (no waiting)\nlocal lock_acquired = state.try_lock(\"deployment_lock\", 30) -- 30 seconds TTL\nif lock_acquired then\n    -- Critical work\n    state.unlock(\"deployment_lock\")\nend\n\n-- Lock with wait and timeout\nlocal acquired = state.lock(\"database_migration\", 60) -- wait up to 60s\nif acquired then\n    -- Execute migration\n    state.unlock(\"database_migration\")\nend\n\n-- Critical section with automatic lock management\nstate.with_lock(\"critical_section\", function()\n    log.info(\"Executing critical operation...\")\n\n    -- Update global counter\n    local counter = state.increment(\"global_counter\", 1)\n\n    -- Update timestamp\n    state.set(\"last_operation\", os.time())\n\n    log.info(\"Critical operation completed - counter: \" .. counter)\n\n    -- Lock is automatically released when function returns\n    return \"operation_success\"\nend, 15) -- 15 second timeout\n</code></pre>"},{"location":"en/modules/state/#api-reference","title":"\ud83d\udd0d API Reference","text":""},{"location":"en/modules/state/#basic-operations","title":"Basic Operations","text":"Function Parameters Return Description <code>state.set(key, value, ttl?)</code> key: string, value: any, ttl?: number success: boolean Set a value with optional TTL <code>state.get(key, default?)</code> key: string, default?: any value: any Get a value or return default <code>state.delete(key)</code> key: string success: boolean Remove a key <code>state.exists(key)</code> key: string exists: boolean Check if key exists <code>state.clear(pattern?)</code> pattern?: string success: boolean Remove keys by pattern"},{"location":"en/modules/state/#ttl-operations","title":"TTL Operations","text":"Function Parameters Return Description <code>state.set_ttl(key, seconds)</code> key: string, seconds: number success: boolean Set TTL for existing key <code>state.get_ttl(key)</code> key: string ttl: number Get remaining TTL (-1 = no TTL, -2 = not exists)"},{"location":"en/modules/state/#atomic-operations_1","title":"Atomic Operations","text":"Function Parameters Return Description <code>state.increment(key, delta?)</code> key: string, delta?: number new_value: number Atomically increment value <code>state.decrement(key, delta?)</code> key: string, delta?: number new_value: number Atomically decrement value <code>state.append(key, value)</code> key: string, value: string new_length: number Atomically append string <code>state.compare_swap(key, old, new)</code> key: string, old: any, new: any success: boolean Atomic compare-and-swap"},{"location":"en/modules/state/#list-operations_1","title":"List Operations","text":"Function Parameters Return Description <code>state.list_push(key, item)</code> key: string, item: any length: number Add item to end of list <code>state.list_pop(key)</code> key: string item: any | nil Remove and return last item <code>state.list_length(key)</code> key: string length: number Get list length"},{"location":"en/modules/state/#distributed-locks","title":"Distributed Locks","text":"Function Parameters Return Description <code>state.try_lock(name, ttl)</code> name: string, ttl: number success: boolean Try to acquire lock without waiting <code>state.lock(name, timeout?)</code> name: string, timeout?: number success: boolean Acquire lock with timeout <code>state.unlock(name)</code> name: string success: boolean Release lock <code>state.with_lock(name, fn, timeout?)</code> name: string, fn: function, timeout?: number result: any Execute function with automatic lock"},{"location":"en/modules/state/#utilities","title":"Utilities","text":"Function Parameters Return Description <code>state.keys(pattern?)</code> pattern?: string keys: table List keys by pattern <code>state.stats()</code> - stats: table Get system statistics"},{"location":"en/modules/state/#practical-use-cases","title":"\ud83d\udca1 Practical Use Cases","text":""},{"location":"en/modules/state/#1-deployment-version-control","title":"1. Deployment Version Control","text":"<pre><code>Modern DSLs = {\n    deployment_pipeline = {\n        tasks = {\n            prepare_deploy = {\n                command = function()\n                    -- Check last deployed version\n                    local last_version = state.get(\"last_deployed_version\", \"v0.0.0\")\n                    local new_version = \"v1.2.3\"\n\n                    -- Check if already deployed\n                    if last_version == new_version then\n                        log.warn(\"Version \" .. new_version .. \" already deployed\")\n                        return false, \"Version already deployed\"\n                    end\n\n                    -- Register deployment start\n                    state.set(\"deploy_status\", \"in_progress\")\n                    state.set(\"deploy_start_time\", os.time())\n                    state.increment(\"total_deploys\", 1)\n\n                    return true, \"Deploy preparation completed\"\n                end\n            },\n\n            execute_deploy = {\n                depends_on = \"prepare_deploy\",\n                command = function()\n                    -- Critical section for deployment\n                    return state.with_lock(\"deployment_lock\", function()\n                        log.info(\"Executing deployment with lock...\")\n\n                        -- Simulate deployment\n                        exec.run(\"sleep 5\")\n\n                        -- Update state\n                        state.set(\"last_deployed_version\", \"v1.2.3\")\n                        state.set(\"deploy_status\", \"completed\")\n                        state.set(\"deploy_end_time\", os.time())\n\n                        -- Record history\n                        state.list_push(\"deploy_history\", {\n                            version = \"v1.2.3\",\n                            timestamp = os.time(),\n                            duration = state.get(\"deploy_end_time\") - state.get(\"deploy_start_time\")\n                        })\n\n                        return true, \"Deploy completed successfully\"\n                    end, 300) -- 5 minutes timeout\n                end\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"en/modules/state/#2-intelligent-caching-with-ttl","title":"2. Intelligent Caching with TTL","text":"<pre><code>-- Helper function for caching\nfunction get_cached_data(cache_key, fetch_function, ttl)\n    local cached = state.get(cache_key)\n    if cached then\n        log.info(\"Cache hit: \" .. cache_key)\n        return cached\n    end\n\n    log.info(\"Cache miss: \" .. cache_key .. \" - fetching...\")\n    local data = fetch_function()\n    state.set(cache_key, data, ttl or 300) -- 5 minutes default\n    return data\nend\n\n-- Usage in tasks\nModern DSLs = {\n    data_processing = {\n        tasks = {\n            fetch_user_data = {\n                command = function()\n                    local user_data = get_cached_data(\"user:123:profile\", function()\n                        -- Simulate expensive fetch\n                        return {\n                            name = \"Alice\",\n                            email = \"alice@example.com\",\n                            preferences = {\"dark_mode\", \"notifications\"}\n                        }\n                    end, 600) -- Cache for 10 minutes\n\n                    log.info(\"User data: \" .. data.to_json(user_data))\n                    return true, \"User data retrieved\"\n                end\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"en/modules/state/#3-rate-limiting","title":"3. Rate Limiting","text":"<pre><code>function check_rate_limit(identifier, max_requests, window_seconds)\n    local key = \"rate_limit:\" .. identifier\n    local current_count = state.get(key, 0)\n\n    if current_count &gt;= max_requests then\n        return false, \"Rate limit exceeded\"\n    end\n\n    -- Increment counter\n    if current_count == 0 then\n        -- First request in window\n        state.set(key, 1, window_seconds)\n    else\n        -- Increment existing counter\n        state.increment(key, 1)\n    end\n\n    return true, \"Request allowed\"\nend\n\n-- Usage in tasks\nModern DSLs = {\n    api_tasks = {\n        tasks = {\n            make_api_call = {\n                command = function()\n                    local allowed, msg = check_rate_limit(\"api_calls\", 100, 3600) -- 100 calls/hour\n\n                    if not allowed then\n                        log.error(msg)\n                        return false, msg\n                    end\n\n                    -- Make API call\n                    log.info(\"Making API call...\")\n                    return true, \"API call completed\"\n                end\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"en/modules/state/#configuration-and-storage","title":"\u2699\ufe0f Configuration and Storage","text":""},{"location":"en/modules/state/#database-location","title":"Database Location","text":"<p>By default, the SQLite database is created at: - Linux/macOS: <code>~/.sloth-runner/state.db</code> - Windows: <code>%USERPROFILE%\\.sloth-runner\\state.db</code></p>"},{"location":"en/modules/state/#technical-characteristics","title":"Technical Characteristics","text":"<ul> <li>Engine: SQLite 3 with WAL mode</li> <li>Concurrent Access: Support for multiple simultaneous connections</li> <li>Auto-cleanup: Automatic cleanup of expired data every 5 minutes</li> <li>Lock Timeout: Expired locks are cleaned automatically</li> <li>Serialization: JSON for complex objects, native format for simple types</li> </ul>"},{"location":"en/modules/state/#limitations","title":"Limitations","text":"<ul> <li>Local Scope: State is persisted only on local machine</li> <li>Concurrency: Locks are effective only within local process</li> <li>Size: Suitable for small to medium datasets (&lt; 1GB)</li> </ul>"},{"location":"en/modules/state/#best-practices","title":"\ud83d\udd04 Best Practices","text":"<ol> <li>Use TTL for temporary data to prevent storage bloat</li> <li>Use locks for critical sections to avoid race conditions  </li> <li>Use patterns for bulk operations to manage related keys</li> <li>Monitor storage size using <code>state.stats()</code> </li> <li>Use atomic operations instead of read-modify-write patterns</li> <li>Clean up expired keys regularly with <code>state.clear(pattern)</code></li> </ol> <p>The State Management module transforms sloth-runner into a stateful, reliable platform for complex task orchestration! \ud83d\ude80</p>"},{"location":"en/modules/systemd/","title":"\u2699\ufe0f Systemd Module","text":"<p>The <code>systemd</code> module provides comprehensive systemd service management functionality for Linux systems. It allows you to create, manage, and monitor systemd services programmatically.</p>"},{"location":"en/modules/systemd/#overview","title":"\ud83c\udfaf Overview","text":"<p>The systemd module enables you to: - Create and configure systemd service files - Start, stop, restart, and reload services - Enable and disable services - Check service status and activity - List all services - Manage systemd daemon configuration</p>"},{"location":"en/modules/systemd/#functions-overview","title":"\ud83d\udcda Functions Overview","text":"Function Description <code>systemd.create_service(name, config)</code> Create a new systemd service <code>systemd.start(service)</code> Start a service <code>systemd.stop(service)</code> Stop a service <code>systemd.restart(service)</code> Restart a service <code>systemd.reload(service)</code> Reload a service <code>systemd.enable(service)</code> Enable service at boot <code>systemd.disable(service)</code> Disable service at boot <code>systemd.status(service)</code> Get service status <code>systemd.is_active(service)</code> Check if service is active <code>systemd.is_enabled(service)</code> Check if service is enabled <code>systemd.daemon_reload()</code> Reload systemd daemon <code>systemd.remove_service(service)</code> Remove a service <code>systemd.list_services(opts)</code> List all services <code>systemd.show(service)</code> Show detailed service info"},{"location":"en/modules/systemd/#detailed-documentation","title":"\ud83d\udcd6 Detailed Documentation","text":""},{"location":"en/modules/systemd/#service-creation","title":"Service Creation","text":""},{"location":"en/modules/systemd/#systemdcreate_servicename-config","title":"<code>systemd.create_service(name, config)</code>","text":"<p>Creates a new systemd service file at <code>/etc/systemd/system/{name}.service</code>.</p> <p>Parameters: - <code>name</code> (string): Service name (without .service extension) - <code>config</code> (table): Service configuration</p> <p>Configuration Options:</p> <pre><code>{\n    -- [Unit] section\n    description = \"Service description\",\n    after = \"network.target\",\n    wants = \"other.service\",\n    requires = \"required.service\",\n\n    -- [Service] section (required)\n    exec_start = \"/path/to/executable\",\n    exec_stop = \"/path/to/stop/script\",\n    exec_reload = \"/path/to/reload/script\",\n    type = \"simple\",  -- simple, forking, oneshot, dbus, notify, idle\n    user = \"username\",\n    group = \"groupname\",\n    working_directory = \"/path/to/workdir\",\n    restart = \"always\",  -- no, on-success, on-failure, on-abnormal, on-abort, always\n    restart_sec = \"5s\",\n    environment = {\n        VAR1 = \"value1\",\n        VAR2 = \"value2\"\n    },\n\n    -- [Install] section\n    wanted_by = \"multi-user.target\"\n}\n</code></pre> <p>Returns: - <code>success</code> (boolean): <code>true</code> if service was created - <code>message</code> (string): Result message</p> <p>Examples:</p> Modern DSLWith delegate_to <pre><code>local systemd = require(\"systemd\")\n\nlocal create_web_service = task(\"create_web_service\")\n    :description(\"Create web application service\")\n    :command(function(this, params)\n        log.info(\"Creating web service...\")\n\n        local config = {\n            description = \"Web Application Server\",\n            after = \"network.target\",\n            exec_start = \"/usr/bin/node /app/server.js\",\n            type = \"simple\",\n            user = \"webapp\",\n            working_directory = \"/app\",\n            restart = \"always\",\n            restart_sec = \"10s\",\n            environment = {\n                NODE_ENV = \"production\",\n                PORT = \"3000\"\n            }\n        }\n\n        local success, msg = systemd.create_service(\"webapp\", config)\n\n        if success then\n            log.info(\"\u2705 Service created!\")\n            -- Reload daemon and enable\n            systemd.daemon_reload()\n            systemd.enable(\"webapp\")\n            systemd.start(\"webapp\")\n            return true, \"Service deployed\"\n        else\n            log.error(\"\u274c Failed: \" .. msg)\n            return false, msg\n        end\n    end)\n    :timeout(\"60s\")\n    :build()\n\nworkflow.define(\"deploy_service\")\n    :tasks({ create_web_service })\n</code></pre> <pre><code>local systemd = require(\"systemd\")\n\nlocal deploy_remote_service = task(\"deploy_remote_service\")\n    :description(\"Deploy service on remote agent\")\n    :command(function(this, params)\n        local config = {\n            description = \"Remote Monitoring Agent\",\n            after = \"network.target\",\n            exec_start = \"/opt/monitor/agent\",\n            type = \"simple\",\n            user = \"monitor\",\n            restart = \"always\"\n        }\n\n        local success, msg = systemd.create_service(\"monitor-agent\", config)\n\n        if success then\n            systemd.daemon_reload()\n            systemd.enable(\"monitor-agent\")\n            systemd.start(\"monitor-agent\")\n            log.info(\"\u2705 Deployed on \" .. (this.agent or \"local\"))\n            return true, \"OK\"\n        end\n\n        return false, \"Failed\"\n    end)\n    :delegate_to(\"production-server\")\n    :timeout(\"60s\")\n    :build()\n\nworkflow.define(\"remote_deploy\")\n    :tasks({ deploy_remote_service })\n</code></pre>"},{"location":"en/modules/systemd/#service-control","title":"Service Control","text":""},{"location":"en/modules/systemd/#systemdstartservice","title":"<code>systemd.start(service)</code>","text":"<p>Starts a systemd service.</p> <p>Parameters: - <code>service</code> (string): Service name</p> <p>Returns: - <code>success</code> (boolean), <code>output</code> (string)</p> <p>Example: <pre><code>local success, output = systemd.start(\"nginx\")\nif success then\n    log.info(\"\u2705 Nginx started\")\nend\n</code></pre></p>"},{"location":"en/modules/systemd/#systemdstopservice","title":"<code>systemd.stop(service)</code>","text":"<p>Stops a systemd service.</p> <p>Example: <pre><code>local success, output = systemd.stop(\"nginx\")\n</code></pre></p>"},{"location":"en/modules/systemd/#systemdrestartservice","title":"<code>systemd.restart(service)</code>","text":"<p>Restarts a systemd service.</p> <p>Example: <pre><code>local success, output = systemd.restart(\"nginx\")\n</code></pre></p>"},{"location":"en/modules/systemd/#systemdreloadservice","title":"<code>systemd.reload(service)</code>","text":"<p>Reloads a systemd service configuration without restarting.</p> <p>Example: <pre><code>local success, output = systemd.reload(\"nginx\")\n</code></pre></p>"},{"location":"en/modules/systemd/#service-status","title":"Service Status","text":""},{"location":"en/modules/systemd/#systemdstatusservice","title":"<code>systemd.status(service)</code>","text":"<p>Gets detailed status of a service.</p> <p>Returns: - <code>status</code> (string): Status output - <code>error</code> (string): Error message if any</p> <p>Example: <pre><code>local status, err = systemd.status(\"nginx\")\nlog.info(\"Status:\\n\" .. status)\n</code></pre></p>"},{"location":"en/modules/systemd/#systemdis_activeservice","title":"<code>systemd.is_active(service)</code>","text":"<p>Checks if a service is currently active/running.</p> <p>Returns: - <code>active</code> (boolean): <code>true</code> if active - <code>state</code> (string): Service state</p> <p>Example: <pre><code>local active, state = systemd.is_active(\"nginx\")\nif active then\n    log.info(\"\u2705 Service is running\")\nelse\n    log.warn(\"\u274c Service is \" .. state)\nend\n</code></pre></p>"},{"location":"en/modules/systemd/#systemdis_enabledservice","title":"<code>systemd.is_enabled(service)</code>","text":"<p>Checks if a service is enabled to start at boot.</p> <p>Returns: - <code>enabled</code> (boolean): <code>true</code> if enabled - <code>state</code> (string): Enable state</p> <p>Example: <pre><code>local enabled, state = systemd.is_enabled(\"nginx\")\n</code></pre></p>"},{"location":"en/modules/systemd/#service-management","title":"Service Management","text":""},{"location":"en/modules/systemd/#systemdenableservice","title":"<code>systemd.enable(service)</code>","text":"<p>Enables a service to start automatically at boot.</p> <p>Example: <pre><code>local success, output = systemd.enable(\"nginx\")\n</code></pre></p>"},{"location":"en/modules/systemd/#systemddisableservice","title":"<code>systemd.disable(service)</code>","text":"<p>Disables a service from starting at boot.</p> <p>Example: <pre><code>local success, output = systemd.disable(\"nginx\")\n</code></pre></p>"},{"location":"en/modules/systemd/#systemddaemon_reload","title":"<code>systemd.daemon_reload()</code>","text":"<p>Reloads systemd daemon configuration. Required after creating or modifying service files.</p> <p>Example: <pre><code>local success, output = systemd.daemon_reload()\n</code></pre></p>"},{"location":"en/modules/systemd/#systemdremove_serviceservice","title":"<code>systemd.remove_service(service)</code>","text":"<p>Removes a systemd service completely (stops, disables, and deletes the service file).</p> <p>Example: <pre><code>local success, msg = systemd.remove_service(\"old-service\")\n</code></pre></p>"},{"location":"en/modules/systemd/#service-information","title":"Service Information","text":""},{"location":"en/modules/systemd/#systemdlist_servicesoptions","title":"<code>systemd.list_services(options)</code>","text":"<p>Lists systemd services with optional filters.</p> <p>Parameters: - <code>options</code> (table, optional): Filter options   - <code>state</code>: Filter by state (e.g., \"active\", \"failed\", \"inactive\")   - <code>no_header</code>: Boolean, exclude header in output</p> <p>Returns: - <code>list</code> (string): Service list - <code>error</code> (string): Error if any</p> <p>Example: <pre><code>-- List all services\nlocal list, err = systemd.list_services()\nlog.info(list)\n\n-- List only active services\nlocal active, err = systemd.list_services({ state = \"active\" })\n\n-- List failed services without header\nlocal failed, err = systemd.list_services({ \n    state = \"failed\", \n    no_header = true \n})\n</code></pre></p>"},{"location":"en/modules/systemd/#systemdshowservice","title":"<code>systemd.show(service)</code>","text":"<p>Shows detailed properties of a service.</p> <p>Returns: - <code>info</code> (string): Detailed service information - <code>error</code> (string): Error if any</p> <p>Example: <pre><code>local info, err = systemd.show(\"nginx\")\nlog.info(\"Service details:\\n\" .. info)\n</code></pre></p>"},{"location":"en/modules/systemd/#complete-examples","title":"\ud83c\udfaf Complete Examples","text":""},{"location":"en/modules/systemd/#web-application-deployment","title":"Web Application Deployment","text":"<pre><code>local systemd = require(\"systemd\")\n\nlocal deploy_webapp = task(\"deploy_webapp\")\n    :description(\"Deploy and configure web application\")\n    :command(function(this, params)\n        log.info(\"\ud83d\ude80 Deploying web application...\")\n\n        -- Create service\n        local config = {\n            description = \"Node.js Web Application\",\n            after = \"network.target postgresql.service\",\n            requires = \"postgresql.service\",\n            exec_start = \"/usr/bin/node /var/www/app/server.js\",\n            exec_reload = \"/bin/kill -HUP $MAINPID\",\n            type = \"simple\",\n            user = \"webapp\",\n            group = \"webapp\",\n            working_directory = \"/var/www/app\",\n            restart = \"always\",\n            restart_sec = \"10s\",\n            environment = {\n                NODE_ENV = \"production\",\n                PORT = \"3000\",\n                DB_HOST = \"localhost\"\n            },\n            wanted_by = \"multi-user.target\"\n        }\n\n        local success, msg = systemd.create_service(\"webapp\", config)\n        if not success then\n            return false, \"Failed to create service: \" .. msg\n        end\n\n        log.info(\"\u2705 Service file created\")\n\n        -- Reload daemon\n        systemd.daemon_reload()\n        log.info(\"\u2705 Daemon reloaded\")\n\n        -- Enable and start\n        systemd.enable(\"webapp\")\n        log.info(\"\u2705 Service enabled\")\n\n        systemd.start(\"webapp\")\n        log.info(\"\u2705 Service started\")\n\n        -- Verify it's running\n        local active, state = systemd.is_active(\"webapp\")\n        if active then\n            log.info(\"\u2705 Service is running!\")\n            return true, \"Deployment successful\"\n        else\n            log.error(\"\u274c Service failed to start: \" .. state)\n            return false, \"Service not running\"\n        end\n    end)\n    :timeout(\"120s\")\n    :build()\n\nworkflow.define(\"deploy\")\n    :tasks({ deploy_webapp })\n</code></pre>"},{"location":"en/modules/systemd/#service-health-check","title":"Service Health Check","text":"<pre><code>local systemd = require(\"systemd\")\n\nlocal health_check = task(\"health_check\")\n    :description(\"Check critical services health\")\n    :command(function(this, params)\n        log.info(\"\ud83d\udd0d Health Check Starting...\")\n        log.info(string.rep(\"=\", 60))\n\n        local services = {\n            \"nginx\",\n            \"postgresql\",\n            \"redis\",\n            \"webapp\"\n        }\n\n        local all_healthy = true\n\n        for _, service in ipairs(services) do\n            local active, state = systemd.is_active(service)\n            local enabled, enable_state = systemd.is_enabled(service)\n\n            log.info(\"\\n\ud83d\udce6 \" .. service .. \":\")\n            log.info(\"  Active: \" .. (active and \"\u2705 YES\" or \"\u274c NO (\" .. state .. \")\"))\n            log.info(\"  Enabled: \" .. (enabled and \"\u2705 YES\" or \"\u26a0\ufe0f  NO\"))\n\n            if not active then\n                all_healthy = false\n                log.warn(\"  \u26a0\ufe0f  Service is not running!\")\n            end\n        end\n\n        log.info(\"\\n\" .. string.rep(\"=\", 60))\n\n        if all_healthy then\n            log.info(\"\u2705 All services healthy\")\n            return true, \"All OK\"\n        else\n            log.error(\"\u274c Some services are down\")\n            return false, \"Services down\"\n        end\n    end)\n    :timeout(\"60s\")\n    :build()\n\nworkflow.define(\"health_check\")\n    :tasks({ health_check })\n</code></pre>"},{"location":"en/modules/systemd/#distributed-service-management","title":"Distributed Service Management","text":"<pre><code>local systemd = require(\"systemd\")\n\nlocal restart_all_servers = task(\"restart_nginx\")\n    :description(\"Restart nginx on all servers\")\n    :command(function(this, params)\n        log.info(\"\ud83d\udd04 Restarting nginx...\")\n\n        local success, output = systemd.restart(\"nginx\")\n\n        if success then\n            -- Wait a bit for restart\n            os.execute(\"sleep 2\")\n\n            -- Verify it's running\n            local active, state = systemd.is_active(\"nginx\")\n            if active then\n                log.info(\"\u2705 Nginx restarted on \" .. (this.agent or \"local\"))\n                return true, \"OK\"\n            else\n                log.error(\"\u274c Nginx failed to start: \" .. state)\n                return false, \"Failed\"\n            end\n        end\n\n        return false, \"Restart failed\"\n    end)\n    :delegate_to(\"web-server-1\")\n    :timeout(\"60s\")\n    :build()\n\nworkflow.define(\"rolling_restart\")\n    :tasks({ restart_all_servers })\n</code></pre>"},{"location":"en/modules/systemd/#service-monitoring","title":"Service Monitoring","text":"<pre><code>local systemd = require(\"systemd\")\n\nlocal monitor_services = task(\"monitor_services\")\n    :description(\"Monitor and report service status\")\n    :command(function(this, params)\n        log.info(\"\ud83d\udcca Service Monitoring Report\")\n        log.info(string.rep(\"=\", 60))\n\n        -- List all failed services\n        local failed, _ = systemd.list_services({ \n            state = \"failed\",\n            no_header = true \n        })\n\n        if failed and failed ~= \"\" then\n            log.warn(\"\\n\u26a0\ufe0f  Failed Services:\")\n            log.warn(failed)\n        else\n            log.info(\"\\n\u2705 No failed services\")\n        end\n\n        -- List active services count\n        local active, _ = systemd.list_services({ \n            state = \"active\",\n            no_header = true \n        })\n\n        if active then\n            local count = 0\n            for _ in active:gmatch(\"[^\\r\\n]+\") do\n                count = count + 1\n            end\n            log.info(\"\\n\ud83d\udcca Active services: \" .. count)\n        end\n\n        log.info(\"\\n\" .. string.rep(\"=\", 60))\n        return true, \"Report complete\"\n    end)\n    :timeout(\"60s\")\n    :build()\n\nworkflow.define(\"monitor\")\n    :tasks({ monitor_services })\n</code></pre>"},{"location":"en/modules/systemd/#service-update-workflow","title":"Service Update Workflow","text":"<pre><code>local systemd = require(\"systemd\")\n\nlocal update_service = task(\"update_service\")\n    :description(\"Update service configuration\")\n    :command(function(this, params)\n        local service_name = \"webapp\"\n\n        log.info(\"\ud83d\udd04 Updating \" .. service_name .. \"...\")\n\n        -- Check if running\n        local was_active, _ = systemd.is_active(service_name)\n\n        -- Stop if running\n        if was_active then\n            log.info(\"Stopping service...\")\n            systemd.stop(service_name)\n        end\n\n        -- Update service configuration\n        local new_config = {\n            description = \"Updated Web Application\",\n            after = \"network.target\",\n            exec_start = \"/usr/bin/node /app/server.js\",\n            type = \"simple\",\n            user = \"webapp\",\n            working_directory = \"/app\",\n            restart = \"always\",\n            environment = {\n                NODE_ENV = \"production\",\n                PORT = \"3000\",\n                VERSION = \"2.0\"  -- New version\n            }\n        }\n\n        systemd.create_service(service_name, new_config)\n        systemd.daemon_reload()\n\n        -- Start if it was running before\n        if was_active then\n            log.info(\"Starting service...\")\n            systemd.start(service_name)\n\n            -- Verify\n            local active, _ = systemd.is_active(service_name)\n            if active then\n                log.info(\"\u2705 Service updated and running\")\n                return true, \"Updated\"\n            end\n        end\n\n        return true, \"Configuration updated\"\n    end)\n    :timeout(\"120s\")\n    :build()\n\nworkflow.define(\"update\")\n    :tasks({ update_service })\n</code></pre>"},{"location":"en/modules/systemd/#best-practices","title":"\ud83d\ude80 Best Practices","text":"<ol> <li> <p>Always reload daemon after creating/modifying services: <pre><code>systemd.create_service(\"myservice\", config)\nsystemd.daemon_reload()\n</code></pre></p> </li> <li> <p>Verify service started successfully: <pre><code>systemd.start(\"myservice\")\nlocal active, state = systemd.is_active(\"myservice\")\nif not active then\n    log.error(\"Service failed: \" .. state)\nend\n</code></pre></p> </li> <li> <p>Enable services for persistence: <pre><code>systemd.enable(\"myservice\")  -- Start at boot\n</code></pre></p> </li> <li> <p>Use proper service types:</p> </li> <li><code>simple</code>: Default, process doesn't fork</li> <li><code>forking</code>: Process forks and parent exits</li> <li><code>oneshot</code>: Process exits before systemd continues</li> <li> <p><code>notify</code>: Process sends notification when ready</p> </li> <li> <p>Set restart policies: <pre><code>restart = \"always\"  -- Always restart\nrestart_sec = \"10s\"  -- Wait 10s between restarts\n</code></pre></p> </li> <li> <p>Use delegate_to for distributed management: <pre><code>:delegate_to(\"server-name\")\n</code></pre></p> </li> </ol>"},{"location":"en/modules/systemd/#security-considerations","title":"\u26a0\ufe0f Security Considerations","text":"<ul> <li>Service files are created in <code>/etc/systemd/system/</code> (requires root/sudo)</li> <li>Always specify <code>user</code> and <code>group</code> to avoid running as root</li> <li>Use <code>WorkingDirectory</code> to isolate service environment</li> <li>Validate environment variables before setting them</li> <li>Use proper file permissions (0644 for service files)</li> </ul>"},{"location":"en/modules/systemd/#platform-support","title":"\ud83d\udc27 Platform Support","text":"<ul> <li>Linux: Full support (systemd-based distributions)</li> <li>Ubuntu/Debian: \u2705 Supported</li> <li>CentOS/RHEL: \u2705 Supported</li> <li>Fedora: \u2705 Supported</li> <li>Arch Linux: \u2705 Supported</li> <li>macOS: \u274c Not supported (use launchd instead)</li> <li>Windows: \u274c Not supported (use sc.exe or nssm)</li> </ul>"},{"location":"en/modules/systemd/#see-also","title":"\ud83d\udd17 See Also","text":"<ul> <li>exec Module - For running custom systemctl commands</li> <li>Modern DSL Guide - DSL syntax reference</li> <li>Distributed Agents - Remote execution with delegate_to</li> <li>Official systemd documentation</li> </ul>"},{"location":"en/modules/terraform/","title":"Terraform Module","text":"<p>The <code>terraform</code> module provides a high-level interface for orchestrating <code>terraform</code> CLI commands, allowing you to manage your infrastructure lifecycle directly from within a Sloth-Runner pipeline.</p>"},{"location":"en/modules/terraform/#configuration","title":"Configuration","text":"<p>This module requires the <code>terraform</code> CLI to be installed and available in the system's PATH. All commands must be executed within a specific <code>workdir</code> where your <code>.tf</code> files are located.</p>"},{"location":"en/modules/terraform/#functions","title":"Functions","text":""},{"location":"en/modules/terraform/#terraforminitparams","title":"<code>terraform.init(params)</code>","text":"<p>Initializes a Terraform working directory.</p> <ul> <li><code>params</code> (table):<ul> <li><code>workdir</code> (string): Required. The path to the directory containing the Terraform files.</li> </ul> </li> <li>Returns: A result table with <code>success</code>, <code>stdout</code>, <code>stderr</code>, and <code>exit_code</code>.</li> </ul>"},{"location":"en/modules/terraform/#terraformplanparams","title":"<code>terraform.plan(params)</code>","text":"<p>Creates a Terraform execution plan.</p> <ul> <li><code>params</code> (table):<ul> <li><code>workdir</code> (string): Required. The path to the directory.</li> <li><code>out</code> (string): Optional. The filename to save the generated plan to.</li> </ul> </li> <li>Returns: A result table.</li> </ul>"},{"location":"en/modules/terraform/#terraformapplyparams","title":"<code>terraform.apply(params)</code>","text":"<p>Applies a Terraform plan.</p> <ul> <li><code>params</code> (table):<ul> <li><code>workdir</code> (string): Required. The path to the directory.</li> <li><code>plan</code> (string): Optional. The path to a plan file to apply.</li> <li><code>auto_approve</code> (boolean): Optional. If <code>true</code>, applies changes without interactive approval.</li> </ul> </li> <li>Returns: A result table.</li> </ul>"},{"location":"en/modules/terraform/#terraformdestroyparams","title":"<code>terraform.destroy(params)</code>","text":"<p>Destroys Terraform-managed infrastructure.</p> <ul> <li><code>params</code> (table):<ul> <li><code>workdir</code> (string): Required. The path to the directory.</li> <li><code>auto_approve</code> (boolean): Optional. If <code>true</code>, destroys resources without interactive approval.</li> </ul> </li> <li>Returns: A result table.</li> </ul>"},{"location":"en/modules/terraform/#terraformoutputparams","title":"<code>terraform.output(params)</code>","text":"<p>Reads an output variable from a Terraform state file.</p> <ul> <li><code>params</code> (table):<ul> <li><code>workdir</code> (string): Required. The path to the directory.</li> <li><code>name</code> (string): Optional. The name of a specific output to read. If omitted, all outputs are returned as a table.</li> </ul> </li> <li>Returns:<ul> <li>On success: The parsed JSON value of the output (can be a string, table, etc.).</li> <li>On failure: <code>nil, error_message</code>.</li> </ul> </li> </ul>"},{"location":"en/modules/terraform/#full-lifecycle-example","title":"Full Lifecycle Example","text":"<pre><code>local tf_workdir = \"./examples/terraform\"\n\n-- Task 1: Init\nlocal result_init = terraform.init({workdir = tf_workdir})\nif not result_init.success then return false, \"Init failed\" end\n\n-- Task 2: Plan\nlocal result_plan = terraform.plan({workdir = tf_workdir})\nif not result_plan.success then return false, \"Plan failed\" end\n\n-- Task 3: Apply\nlocal result_apply = terraform.apply({workdir = tf_workdir, auto_approve = true})\nif not result_apply.success then return false, \"Apply failed\" end\n\n-- Task 4: Get Output\nlocal filename, err = terraform.output({workdir = tf_workdir, name = \"report_filename\"})\nif not filename then return false, \"Output failed: \" .. err end\nlog.info(\"Terraform created file: \" .. filename)\n\n-- Task 5: Destroy\nlocal result_destroy = terraform.destroy({workdir = tf_workdir, auto_approve = true})\nif not result_destroy.success then return false, \"Destroy failed\" end\n</code></pre>"},{"location":"en/telemetry/","title":"\ud83d\udcca Telemetry &amp; Observability","text":""},{"location":"en/telemetry/#overview","title":"Overview","text":"<p>Sloth Runner provides comprehensive telemetry and observability features through native Prometheus integration and a rich terminal-based Grafana-style dashboard. Monitor your agent fleet, track task execution metrics, analyze performance, and gain deep insights into your infrastructure automation.</p> <p>Enterprise-Grade Observability</p> <p>Built-in Prometheus metrics server with auto-discovery, real-time dashboards, and zero-configuration setup.</p>"},{"location":"en/telemetry/#key-features","title":"Key Features","text":""},{"location":"en/telemetry/#prometheus-integration","title":"\ud83c\udfaf Prometheus Integration","text":"<ul> <li>Native Metrics Exporter: Built-in HTTP server exposing Prometheus-compatible metrics</li> <li>Auto-Discovery: Metrics endpoint automatically configured on agent startup</li> <li>Standard Format: Compatible with Prometheus, Grafana, and all observability tools</li> <li>Zero Configuration: Telemetry enabled by default with sensible defaults</li> </ul>"},{"location":"en/telemetry/#terminal-dashboard","title":"\ud83d\udcca Terminal Dashboard","text":"<ul> <li>Rich Visualization: Beautiful terminal-based dashboard with tables, charts, and progress bars</li> <li>Real-time Updates: Watch mode with configurable refresh intervals</li> <li>Comprehensive Metrics: System resources, task performance, gRPC stats, and error tracking</li> <li>Color-Coded Insights: Visual indicators for performance and health status</li> </ul>"},{"location":"en/telemetry/#metrics-categories","title":"\ud83d\udcc8 Metrics Categories","text":""},{"location":"en/telemetry/#task-metrics","title":"Task Metrics","text":"<ul> <li>Total tasks executed (by status: success, failed, skipped)</li> <li>Currently running tasks</li> <li>Task duration histograms (P50, P99 latencies)</li> <li>Per-task and per-group performance tracking</li> </ul>"},{"location":"en/telemetry/#system-metrics","title":"System Metrics","text":"<ul> <li>Agent uptime</li> <li>Memory allocation</li> <li>Goroutines count</li> <li>Agent version and build information</li> </ul>"},{"location":"en/telemetry/#grpc-metrics","title":"gRPC Metrics","text":"<ul> <li>Request counts per method</li> <li>Request duration histograms</li> <li>Success/error rates</li> </ul>"},{"location":"en/telemetry/#error-tracking","title":"Error Tracking","text":"<ul> <li>Error counts by type</li> <li>Failed task tracking</li> <li>System error monitoring</li> </ul>"},{"location":"en/telemetry/#quick-start","title":"Quick Start","text":""},{"location":"en/telemetry/#enable-telemetry-on-agent","title":"Enable Telemetry on Agent","text":"<p>Telemetry is enabled by default. Start your agent:</p> <pre><code>./sloth-runner agent start --name my-agent --master localhost:50053\n</code></pre> <p>To explicitly configure telemetry:</p> <pre><code># Enable telemetry with custom port\n./sloth-runner agent start \\\n  --name my-agent \\\n  --master localhost:50053 \\\n  --telemetry \\\n  --metrics-port 9090\n</code></pre> <p>To disable telemetry:</p> <pre><code>./sloth-runner agent start \\\n  --name my-agent \\\n  --master localhost:50053 \\\n  --telemetry=false\n</code></pre>"},{"location":"en/telemetry/#access-metrics","title":"Access Metrics","text":""},{"location":"en/telemetry/#get-prometheus-endpoint","title":"Get Prometheus Endpoint","text":"<pre><code>./sloth-runner agent metrics prom my-agent\n</code></pre> <p>Output: <pre><code>\u2705 Metrics Endpoint:\n  URL: http://192.168.1.100:9090/metrics\n\n\ud83d\udcdd Usage:\n  # View metrics in browser:\n  open http://192.168.1.100:9090/metrics\n\n  # Fetch metrics via curl:\n  curl http://192.168.1.100:9090/metrics\n\n  # Configure Prometheus scraper:\n  - job_name: 'sloth-runner-agents'\n    static_configs:\n      - targets: ['192.168.1.100:9090']\n</code></pre></p>"},{"location":"en/telemetry/#view-snapshot","title":"View Snapshot","text":"<pre><code>./sloth-runner agent metrics prom my-agent --snapshot\n</code></pre>"},{"location":"en/telemetry/#view-dashboard","title":"View Dashboard","text":""},{"location":"en/telemetry/#single-view","title":"Single View","text":"<pre><code>./sloth-runner agent metrics grafana my-agent\n</code></pre>"},{"location":"en/telemetry/#watch-mode-auto-refresh","title":"Watch Mode (Auto-Refresh)","text":"<pre><code># Refresh every 5 seconds (default)\n./sloth-runner agent metrics grafana my-agent --watch\n\n# Custom refresh interval (2 seconds)\n./sloth-runner agent metrics grafana my-agent --watch --interval 2\n</code></pre>"},{"location":"en/telemetry/#architecture","title":"Architecture","text":"<pre><code>graph LR\n    A[Sloth Runner Agent] --&gt; B[Telemetry Server :9090]\n    B --&gt; C[/metrics endpoint]\n    B --&gt; D[/health endpoint]\n    B --&gt; E[/info endpoint]\n\n    C --&gt; F[Prometheus Scraper]\n    C --&gt; G[CLI: agent metrics prom]\n    C --&gt; H[CLI: agent metrics grafana]\n\n    F --&gt; I[Prometheus Server]\n    I --&gt; J[Grafana Dashboards]\n\n    style B fill:#4CAF50\n    style C fill:#2196F3\n    style H fill:#FF9800</code></pre>"},{"location":"en/telemetry/#components","title":"Components","text":"<ol> <li>Telemetry Server (<code>internal/telemetry/server.go</code>)</li> <li>HTTP server running on configurable port (default: 9090)</li> <li>Serves Prometheus metrics in text format</li> <li> <p>Provides health check and service info endpoints</p> </li> <li> <p>Metrics Collector (<code>internal/telemetry/metrics.go</code>)</p> </li> <li>Defines all Prometheus metrics (counters, gauges, histograms)</li> <li>Thread-safe global singleton</li> <li> <p>Automatic runtime metrics collection</p> </li> <li> <p>Visualizer (<code>internal/telemetry/visualizer.go</code>)</p> </li> <li>Fetches and parses Prometheus metrics</li> <li>Rich terminal dashboard rendering</li> <li> <p>Historical trends support</p> </li> <li> <p>CLI Commands</p> </li> <li><code>agent metrics prom</code>: Get endpoint URL or raw metrics</li> <li><code>agent metrics grafana</code>: Display rich dashboard</li> </ol>"},{"location":"en/telemetry/#use-cases","title":"Use Cases","text":""},{"location":"en/telemetry/#development","title":"Development","text":"<p>Monitor your tasks during development:</p> <pre><code># Terminal 1: Watch dashboard\n./sloth-runner agent metrics grafana dev-agent --watch --interval 1\n\n# Terminal 2: Execute tasks\n./sloth-runner run -f deploy.sloth --values dev.yaml\n</code></pre>"},{"location":"en/telemetry/#production-monitoring","title":"Production Monitoring","text":"<p>Integrate with Prometheus and Grafana:</p> <pre><code># prometheus.yml\nglobal:\n  scrape_interval: 15s\n\nscrape_configs:\n  - job_name: 'sloth-runner-production'\n    static_configs:\n      - targets:\n          - 'agent1:9090'\n          - 'agent2:9090'\n          - 'agent3:9090'\n        labels:\n          environment: production\n</code></pre>"},{"location":"en/telemetry/#performance-analysis","title":"Performance Analysis","text":"<p>Identify slow tasks and bottlenecks:</p> <pre><code># View detailed performance metrics\n./sloth-runner agent metrics grafana prod-agent\n\n# Check P99 latencies in Task Performance section\n# Tasks with \ud83d\udd34 Slow indicator need optimization\n</code></pre>"},{"location":"en/telemetry/#debugging","title":"Debugging","text":"<p>Track errors and failures:</p> <pre><code># View error counts\n./sloth-runner agent metrics grafana my-agent\n\n# Check Errors section for error types\n# Cross-reference with Task Metrics for failed tasks\n</code></pre>"},{"location":"en/telemetry/#next-steps","title":"Next Steps","text":"<ul> <li>Prometheus Metrics Reference - Complete metrics documentation</li> <li>Grafana Dashboard Guide - Dashboard features and usage</li> <li>Deployment Guide - Production deployment and integration</li> </ul>"},{"location":"en/telemetry/#supported-platforms","title":"Supported Platforms","text":"<ul> <li>\u2705 Linux (amd64, arm64)</li> <li>\u2705 macOS (Intel, Apple Silicon)</li> <li>\u2705 Windows (via WSL2)</li> <li>\u2705 Containers (Docker, Incus/LXC)</li> <li>\u2705 Kubernetes (via DaemonSet)</li> </ul>"},{"location":"en/telemetry/#performance-impact","title":"Performance Impact","text":"<p>Telemetry has minimal performance overhead:</p> <ul> <li>Memory: ~10-20MB additional</li> <li>CPU: &lt;1% under normal load</li> <li>Network: Metrics served only on-demand (pull model)</li> <li>Storage: Metrics stored in-memory, no persistence</li> </ul>"},{"location":"en/telemetry/#security-considerations","title":"Security Considerations","text":"<p>Network Exposure</p> <p>The metrics endpoint is exposed on all network interfaces by default. In production:</p> <ul> <li>Use firewall rules to restrict access</li> <li>Consider binding to localhost only and using reverse proxy</li> <li>Enable authentication via reverse proxy (Prometheus doesn't support auth natively)</li> </ul> <p>Best Practice</p> <p>Run agents in private networks and expose metrics only to monitoring infrastructure.</p>"},{"location":"en/telemetry/#troubleshooting","title":"Troubleshooting","text":""},{"location":"en/telemetry/#telemetry-not-starting","title":"Telemetry Not Starting","text":"<p>Check agent logs for errors:</p> <pre><code>tail -f agent.log | grep -i telemetry\n</code></pre> <p>Verify port availability:</p> <pre><code>netstat -tuln | grep 9090\n</code></pre> <p>Try different port:</p> <pre><code>./sloth-runner agent start --name my-agent --metrics-port 9091\n</code></pre>"},{"location":"en/telemetry/#cannot-access-metrics","title":"Cannot Access Metrics","text":"<p>Test from agent host:</p> <pre><code>curl http://localhost:9090/metrics\n</code></pre> <p>Test from remote:</p> <pre><code>curl http://agent-ip:9090/metrics\n</code></pre> <p>Check firewall:</p> <pre><code># Allow port 9090\nsudo ufw allow 9090/tcp\n\n# Or use firewalld\nsudo firewall-cmd --permanent --add-port=9090/tcp\nsudo firewall-cmd --reload\n</code></pre>"},{"location":"en/telemetry/#dashboard-shows-no-data","title":"Dashboard Shows No Data","text":"<p>Verify agent is running with telemetry:</p> <pre><code>./sloth-runner agent list\n</code></pre> <p>Check metrics endpoint directly:</p> <pre><code>./sloth-runner agent metrics prom my-agent --snapshot\n</code></pre> <p>Ensure tasks have been executed (initial metrics are zero):</p> <pre><code>./sloth-runner agent run my-agent \"echo test\"\n</code></pre>"},{"location":"en/telemetry/#further-reading","title":"Further Reading","text":"<ul> <li>Prometheus Documentation</li> <li>Grafana Documentation</li> <li>pterm Library (used for terminal visualization)</li> </ul>"},{"location":"en/telemetry/deployment/","title":"\ud83d\ude80 Telemetry Deployment Guide","text":""},{"location":"en/telemetry/deployment/#overview","title":"Overview","text":"<p>This guide covers deploying telemetry in production, integrating with Prometheus, and setting up Grafana dashboards.</p>"},{"location":"en/telemetry/deployment/#quick-start","title":"Quick Start","text":""},{"location":"en/telemetry/deployment/#enable-telemetry","title":"Enable Telemetry","text":"<p>Telemetry is enabled by default in Sloth Runner. Simply start your agent:</p> <pre><code>./sloth-runner agent start --name my-agent --master master-host:50053\n</code></pre>"},{"location":"en/telemetry/deployment/#custom-configuration","title":"Custom Configuration","text":"<pre><code>./sloth-runner agent start \\\n  --name my-agent \\\n  --master master-host:50053 \\\n  --metrics-port 9090 \\          # Custom metrics port\n  --telemetry                     # Explicitly enable\n</code></pre>"},{"location":"en/telemetry/deployment/#disable-telemetry","title":"Disable Telemetry","text":"<pre><code>./sloth-runner agent start \\\n  --name my-agent \\\n  --master master-host:50053 \\\n  --telemetry=false\n</code></pre>"},{"location":"en/telemetry/deployment/#prometheus-integration","title":"Prometheus Integration","text":""},{"location":"en/telemetry/deployment/#configure-prometheus-scraping","title":"Configure Prometheus Scraping","text":""},{"location":"en/telemetry/deployment/#static-configuration","title":"Static Configuration","text":"<p>Create or update <code>prometheus.yml</code>:</p> <pre><code>global:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n\nscrape_configs:\n  - job_name: 'sloth-runner-agents'\n    static_configs:\n      - targets:\n          - 'agent1.example.com:9090'\n          - 'agent2.example.com:9090'\n          - 'agent3.example.com:9090'\n        labels:\n          environment: 'production'\n          cluster: 'main'\n</code></pre>"},{"location":"en/telemetry/deployment/#service-discovery","title":"Service Discovery","text":"KubernetesConsulFile SD <pre><code>scrape_configs:\n  - job_name: 'sloth-runner-k8s'\n    kubernetes_sd_configs:\n      - role: pod\n    relabel_configs:\n      - source_labels: [__meta_kubernetes_pod_label_app]\n        action: keep\n        regex: sloth-runner-agent\n      - source_labels: [__meta_kubernetes_pod_ip]\n        action: replace\n        target_label: __address__\n        replacement: '$1:9090'\n</code></pre> <pre><code>scrape_configs:\n  - job_name: 'sloth-runner-consul'\n    consul_sd_configs:\n      - server: 'consul.example.com:8500'\n        services: ['sloth-runner-agent']\n    relabel_configs:\n      - source_labels: [__meta_consul_service]\n        action: keep\n        regex: sloth-runner-agent\n</code></pre> <pre><code>scrape_configs:\n  - job_name: 'sloth-runner-file'\n    file_sd_configs:\n      - files:\n          - '/etc/prometheus/targets/sloth-runner-*.json'\n        refresh_interval: 30s\n</code></pre> <p>Create <code>/etc/prometheus/targets/sloth-runner-prod.json</code>: <pre><code>[\n  {\n    \"targets\": [\n      \"agent1:9090\",\n      \"agent2:9090\"\n    ],\n    \"labels\": {\n      \"environment\": \"production\",\n      \"datacenter\": \"us-east-1\"\n    }\n  }\n]\n</code></pre></p>"},{"location":"en/telemetry/deployment/#verify-scraping","title":"Verify Scraping","text":"<p>Check Prometheus targets:</p> <pre><code>http://prometheus-host:9090/targets\n</code></pre> <p>Query metrics:</p> <pre><code>up{job=\"sloth-runner-agents\"}\n</code></pre> <p>Expected output: <pre><code>up{instance=\"agent1:9090\",job=\"sloth-runner-agents\"} 1\nup{instance=\"agent2:9090\",job=\"sloth-runner-agents\"} 1\n</code></pre></p>"},{"location":"en/telemetry/deployment/#grafana-integration","title":"Grafana Integration","text":""},{"location":"en/telemetry/deployment/#import-dashboard","title":"Import Dashboard","text":""},{"location":"en/telemetry/deployment/#option-1-from-json","title":"Option 1: From JSON","text":"<ol> <li> <p>Download the dashboard JSON from GitHub:    <pre><code>curl -O https://raw.githubusercontent.com/chalkan3-sloth/sloth-runner/master/grafana-dashboard.json\n</code></pre></p> </li> <li> <p>In Grafana UI:</p> </li> <li>Navigate to Dashboards \u2192 Import</li> <li>Upload <code>grafana-dashboard.json</code></li> <li>Select Prometheus data source</li> <li>Click Import</li> </ol>"},{"location":"en/telemetry/deployment/#option-2-manual-creation","title":"Option 2: Manual Creation","text":"<p>Create a new dashboard with these panels:</p> Task Success RateTask Execution RateTask P99 LatencyMemory UsageActive Agents <pre><code>sum(rate(sloth_tasks_total{status=\"success\"}[5m]))\n/\nsum(rate(sloth_tasks_total[5m]))\n* 100\n</code></pre> <ul> <li>Type: Stat</li> <li>Unit: Percent (0-100)</li> <li>Thresholds: 95 (yellow), 98 (green)</li> </ul> <pre><code>sum(rate(sloth_tasks_total[5m])) by (status)\n</code></pre> <ul> <li>Type: Graph</li> <li>Legend: <code>{{status}}</code></li> <li>Stack: Yes</li> </ul> <pre><code>histogram_quantile(0.99,\n  sum(rate(sloth_task_duration_seconds_bucket[5m])) by (task, le)\n)\n</code></pre> <ul> <li>Type: Graph</li> <li>Legend: <code>{{task}}</code></li> <li>Unit: seconds (s)</li> </ul> <pre><code>sloth_memory_allocated_bytes / 1024 / 1024\n</code></pre> <ul> <li>Type: Graph</li> <li>Unit: MiB</li> <li>Thresholds: 400 (yellow), 500 (red)</li> </ul> <pre><code>count(up{job=\"sloth-runner-agents\"} == 1)\n</code></pre> <ul> <li>Type: Stat</li> <li>Color: Value-based</li> </ul>"},{"location":"en/telemetry/deployment/#dashboard-template","title":"Dashboard Template","text":"<p>Full dashboard configuration:</p> <pre><code>{\n  \"dashboard\": {\n    \"title\": \"Sloth Runner - Agent Fleet\",\n    \"tags\": [\"sloth-runner\", \"automation\"],\n    \"timezone\": \"browser\",\n    \"panels\": [\n      {\n        \"title\": \"Active Agents\",\n        \"targets\": [\n          {\n            \"expr\": \"count(up{job=\\\"sloth-runner-agents\\\"} == 1)\"\n          }\n        ],\n        \"type\": \"stat\"\n      },\n      {\n        \"title\": \"Task Success Rate\",\n        \"targets\": [\n          {\n            \"expr\": \"sum(rate(sloth_tasks_total{status=\\\"success\\\"}[5m])) / sum(rate(sloth_tasks_total[5m])) * 100\"\n          }\n        ],\n        \"type\": \"gauge\",\n        \"fieldConfig\": {\n          \"defaults\": {\n            \"unit\": \"percent\",\n            \"thresholds\": {\n              \"steps\": [\n                { \"value\": 0, \"color\": \"red\" },\n                { \"value\": 95, \"color\": \"yellow\" },\n                { \"value\": 98, \"color\": \"green\" }\n              ]\n            }\n          }\n        }\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"en/telemetry/deployment/#docker-deployment","title":"Docker Deployment","text":""},{"location":"en/telemetry/deployment/#docker-compose","title":"Docker Compose","text":"<p>Complete monitoring stack with Sloth Runner:</p> <pre><code>version: '3.8'\n\nservices:\n  # Sloth Runner Agent\n  sloth-agent:\n    image: slothrunner/agent:latest\n    container_name: sloth-agent-1\n    command:\n      - agent\n      - start\n      - --name=agent-1\n      - --master=sloth-master:50053\n      - --telemetry\n      - --metrics-port=9090\n    ports:\n      - \"9090:9090\"  # Metrics port\n    networks:\n      - monitoring\n    restart: unless-stopped\n\n  # Prometheus\n  prometheus:\n    image: prom/prometheus:latest\n    container_name: prometheus\n    command:\n      - '--config.file=/etc/prometheus/prometheus.yml'\n      - '--storage.tsdb.path=/prometheus'\n      - '--storage.tsdb.retention.time=30d'\n    volumes:\n      - ./prometheus.yml:/etc/prometheus/prometheus.yml\n      - prometheus-data:/prometheus\n    ports:\n      - \"9091:9090\"\n    networks:\n      - monitoring\n    restart: unless-stopped\n\n  # Grafana\n  grafana:\n    image: grafana/grafana:latest\n    container_name: grafana\n    environment:\n      - GF_SECURITY_ADMIN_PASSWORD=admin\n      - GF_USERS_ALLOW_SIGN_UP=false\n    volumes:\n      - grafana-data:/var/lib/grafana\n      - ./grafana-dashboards:/etc/grafana/provisioning/dashboards\n      - ./grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml\n    ports:\n      - \"3000:3000\"\n    networks:\n      - monitoring\n    restart: unless-stopped\n\nvolumes:\n  prometheus-data:\n  grafana-data:\n\nnetworks:\n  monitoring:\n</code></pre> <p><code>prometheus.yml</code> for Docker Compose:</p> <pre><code>global:\n  scrape_interval: 15s\n\nscrape_configs:\n  - job_name: 'sloth-runner'\n    static_configs:\n      - targets: ['sloth-agent:9090']\n</code></pre> <p><code>grafana-datasources.yml</code>:</p> <pre><code>apiVersion: 1\n\ndatasources:\n  - name: Prometheus\n    type: prometheus\n    access: proxy\n    url: http://prometheus:9090\n    isDefault: true\n</code></pre> <p>Start the stack:</p> <pre><code>docker-compose up -d\n</code></pre> <p>Access: - Grafana: http://localhost:3000 (admin/admin) - Prometheus: http://localhost:9091 - Metrics: http://localhost:9090/metrics</p>"},{"location":"en/telemetry/deployment/#kubernetes-deployment","title":"Kubernetes Deployment","text":""},{"location":"en/telemetry/deployment/#agent-daemonset","title":"Agent DaemonSet","text":"<p>Deploy agents as DaemonSet:</p> <pre><code>apiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: sloth-runner-agent\n  namespace: automation\nspec:\n  selector:\n    matchLabels:\n      app: sloth-runner-agent\n  template:\n    metadata:\n      labels:\n        app: sloth-runner-agent\n      annotations:\n        prometheus.io/scrape: \"true\"\n        prometheus.io/port: \"9090\"\n        prometheus.io/path: \"/metrics\"\n    spec:\n      containers:\n        - name: agent\n          image: slothrunner/agent:v1.2.3\n          args:\n            - agent\n            - start\n            - --name=$(NODE_NAME)\n            - --master=sloth-master.automation.svc.cluster.local:50053\n            - --telemetry\n            - --metrics-port=9090\n          env:\n            - name: NODE_NAME\n              valueFrom:\n                fieldRef:\n                  fieldPath: spec.nodeName\n          ports:\n            - name: metrics\n              containerPort: 9090\n              protocol: TCP\n          resources:\n            requests:\n              cpu: 100m\n              memory: 128Mi\n            limits:\n              cpu: 500m\n              memory: 512Mi\n          livenessProbe:\n            httpGet:\n              path: /health\n              port: 9090\n            initialDelaySeconds: 10\n            periodSeconds: 30\n          readinessProbe:\n            httpGet:\n              path: /health\n              port: 9090\n            initialDelaySeconds: 5\n            periodSeconds: 10\n</code></pre>"},{"location":"en/telemetry/deployment/#servicemonitor","title":"ServiceMonitor","text":"<p>For Prometheus Operator:</p> <pre><code>apiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: sloth-runner-agents\n  namespace: automation\n  labels:\n    app: sloth-runner\nspec:\n  selector:\n    matchLabels:\n      app: sloth-runner-agent\n  endpoints:\n    - port: metrics\n      interval: 15s\n      path: /metrics\n</code></pre>"},{"location":"en/telemetry/deployment/#grafana-dashboard-configmap","title":"Grafana Dashboard ConfigMap","text":"<pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: sloth-runner-dashboard\n  namespace: monitoring\n  labels:\n    grafana_dashboard: \"1\"\ndata:\n  sloth-runner.json: |\n    {\n      \"dashboard\": {\n        \"title\": \"Sloth Runner - Kubernetes Fleet\",\n        ...\n      }\n    }\n</code></pre>"},{"location":"en/telemetry/deployment/#network-configuration","title":"Network Configuration","text":""},{"location":"en/telemetry/deployment/#firewall-rules","title":"Firewall Rules","text":""},{"location":"en/telemetry/deployment/#iptables","title":"iptables","text":"<p>Allow metrics port:</p> <pre><code># Allow from Prometheus server\nsudo iptables -A INPUT -p tcp -s prometheus-ip --dport 9090 -j ACCEPT\n\n# Allow from monitoring subnet\nsudo iptables -A INPUT -p tcp -s 10.0.0.0/24 --dport 9090 -j ACCEPT\n\n# Save rules\nsudo iptables-save &gt; /etc/iptables/rules.v4\n</code></pre>"},{"location":"en/telemetry/deployment/#firewalld","title":"firewalld","text":"<pre><code># Add metrics port\nsudo firewall-cmd --permanent --add-port=9090/tcp\n\n# Or create service\nsudo firewall-cmd --permanent --new-service=sloth-metrics\nsudo firewall-cmd --permanent --service=sloth-metrics --add-port=9090/tcp\nsudo firewall-cmd --permanent --add-service=sloth-metrics\n\n# Reload\nsudo firewall-cmd --reload\n</code></pre>"},{"location":"en/telemetry/deployment/#ufw","title":"ufw","text":"<pre><code># Allow from specific IP\nsudo ufw allow from prometheus-ip to any port 9090\n\n# Allow from subnet\nsudo ufw allow from 10.0.0.0/24 to any port 9090\n</code></pre>"},{"location":"en/telemetry/deployment/#reverse-proxy","title":"Reverse Proxy","text":"<p>For auth and TLS termination:</p> NginxCaddy <pre><code>server {\n    listen 443 ssl;\n    server_name metrics.example.com;\n\n    ssl_certificate /etc/ssl/certs/metrics.crt;\n    ssl_certificate_key /etc/ssl/private/metrics.key;\n\n    location /metrics {\n        auth_basic \"Metrics\";\n        auth_basic_user_file /etc/nginx/.htpasswd;\n\n        proxy_pass http://localhost:9090/metrics;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n\n    location /health {\n        proxy_pass http://localhost:9090/health;\n        allow 10.0.0.0/24;\n        deny all;\n    }\n}\n</code></pre> <pre><code>metrics.example.com {\n    reverse_proxy /metrics localhost:9090 {\n        basic_auth {\n            prometheus $2a$14$...\n        }\n    }\n\n    reverse_proxy /health localhost:9090 {\n        @denied not remote_ip 10.0.0.0/24\n        respond @denied 403\n    }\n}\n</code></pre>"},{"location":"en/telemetry/deployment/#security","title":"Security","text":""},{"location":"en/telemetry/deployment/#authentication","title":"Authentication","text":"<p>Prometheus doesn't support native auth. Use reverse proxy:</p> <pre><code># Create htpasswd file\nhtpasswd -c /etc/nginx/.htpasswd prometheus\n\n# Configure Nginx (see above)\n</code></pre> <p>Update Prometheus config:</p> <pre><code>scrape_configs:\n  - job_name: 'sloth-runner-secure'\n    basic_auth:\n      username: prometheus\n      password: your-password\n    static_configs:\n      - targets: ['agent:443']\n    scheme: https\n</code></pre>"},{"location":"en/telemetry/deployment/#tls","title":"TLS","text":"<p>Generate self-signed cert:</p> <pre><code>openssl req -x509 -newkey rsa:4096 \\\n  -keyout key.pem -out cert.pem \\\n  -days 365 -nodes \\\n  -subj \"/CN=agent.example.com\"\n</code></pre> <p>Configure reverse proxy with TLS (see Nginx example above).</p>"},{"location":"en/telemetry/deployment/#network-isolation","title":"Network Isolation","text":"<p>Best practices:</p> <ol> <li>Private Network: Deploy agents in private subnet</li> <li>VPN: Access metrics through VPN</li> <li>SSH Tunnel: For ad-hoc access:    <pre><code>ssh -L 9090:localhost:9090 agent-host\n# Access at http://localhost:9090/metrics\n</code></pre></li> </ol>"},{"location":"en/telemetry/deployment/#monitoring-the-monitors","title":"Monitoring the Monitors","text":""},{"location":"en/telemetry/deployment/#prometheus-self-monitoring","title":"Prometheus Self-Monitoring","text":"<p>Alert on scrape failures:</p> <pre><code>groups:\n  - name: monitoring\n    rules:\n      - alert: SlothAgentDown\n        expr: up{job=\"sloth-runner-agents\"} == 0\n        for: 1m\n        annotations:\n          summary: \"Sloth agent {{ $labels.instance }} is down\"\n\n      - alert: SlothAgentScrapeFailed\n        expr: up{job=\"sloth-runner-agents\"} == 0\n        for: 5m\n        annotations:\n          summary: \"Cannot scrape {{ $labels.instance }}\"\n</code></pre>"},{"location":"en/telemetry/deployment/#health-checks","title":"Health Checks","text":"<p>Monitor telemetry health:</p> <pre><code># Simple health check script\n#!/bin/bash\nAGENT_HOST=\"agent.example.com\"\nMETRICS_PORT=\"9090\"\n\n# Check health endpoint\nif curl -sf http://$AGENT_HOST:$METRICS_PORT/health &gt; /dev/null; then\n  echo \"\u2713 Telemetry is healthy\"\n  exit 0\nelse\n  echo \"\u2717 Telemetry is down\"\n  exit 1\nfi\n</code></pre> <p>Add to cron or monitoring system:</p> <pre><code>*/5 * * * * /usr/local/bin/check-telemetry.sh || /usr/local/bin/alert-ops.sh\n</code></pre>"},{"location":"en/telemetry/deployment/#performance-tuning","title":"Performance Tuning","text":""},{"location":"en/telemetry/deployment/#metrics-cardinality","title":"Metrics Cardinality","text":"<p>Monitor label cardinality:</p> <pre><code># Count unique label combinations\ncount(sloth_tasks_total) by (__name__)\n</code></pre> <p>Best practices:</p> <ul> <li>\u2705 Use <code>group</code> label for task groups</li> <li>\u2705 Use <code>task</code> label for individual tasks</li> <li>\u274c Don't use high-cardinality labels (user IDs, timestamps, etc.)</li> <li>\u274c Don't create metrics for every unique value</li> </ul>"},{"location":"en/telemetry/deployment/#scrape-interval","title":"Scrape Interval","text":"<p>Recommendations:</p> Environment Scrape Interval Retention Development 5s 7 days Staging 15s 15 days Production 15-30s 30-90 days"},{"location":"en/telemetry/deployment/#resource-limits","title":"Resource Limits","text":"<p>Telemetry resource usage:</p> <pre><code># Kubernetes resources\nresources:\n  requests:\n    cpu: 50m\n    memory: 64Mi\n  limits:\n    cpu: 200m\n    memory: 256Mi\n</code></pre>"},{"location":"en/telemetry/deployment/#troubleshooting","title":"Troubleshooting","text":""},{"location":"en/telemetry/deployment/#metrics-not-appearing","title":"Metrics Not Appearing","text":"<ol> <li> <p>Check agent logs:    <pre><code>tail -f agent.log | grep telemetry\n</code></pre></p> </li> <li> <p>Verify endpoint:    <pre><code>curl http://localhost:9090/metrics\n</code></pre></p> </li> <li> <p>Check Prometheus targets:    Navigate to <code>http://prometheus:9090/targets</code></p> </li> <li> <p>Validate config:    <pre><code>promtool check config prometheus.yml\n</code></pre></p> </li> </ol>"},{"location":"en/telemetry/deployment/#high-memory-usage","title":"High Memory Usage","text":"<p>If telemetry uses too much memory:</p> <ol> <li>Reduce scrape interval: Change from 15s to 30s or 60s</li> <li>Limit metric labels: Remove unnecessary labels</li> <li>Increase retention: Allow Prometheus to aggregate older data</li> </ol>"},{"location":"en/telemetry/deployment/#connection-issues","title":"Connection Issues","text":"<p>Test connectivity:</p> <pre><code># From Prometheus host\ntelnet agent-host 9090\n\n# Test scrape\ncurl -v http://agent-host:9090/metrics\n\n# Check firewall\nnmap -p 9090 agent-host\n</code></pre>"},{"location":"en/telemetry/deployment/#best-practices","title":"Best Practices","text":""},{"location":"en/telemetry/deployment/#production-checklist","title":"Production Checklist","text":"<ul> <li> Telemetry enabled on all agents</li> <li> Prometheus scraping configured</li> <li> Grafana dashboards imported</li> <li> Alerts configured</li> <li> Firewall rules applied</li> <li> TLS/auth configured (if needed)</li> <li> Backup Prometheus data</li> <li> Document runbooks</li> </ul>"},{"location":"en/telemetry/deployment/#monitoring-strategy","title":"Monitoring Strategy","text":"<ol> <li>Real-time: Terminal dashboard for immediate feedback</li> <li>Short-term: Prometheus for recent trends (1-7 days)</li> <li>Long-term: Export to long-term storage (S3, BigQuery)</li> </ol>"},{"location":"en/telemetry/deployment/#alert-guidelines","title":"Alert Guidelines","text":"Metric Threshold Action Task failure rate &gt; 10% Investigate failing tasks gRPC latency P99 &gt; 1s Check network/master Memory usage &gt; 80% Scale or optimize Agent down &gt; 1m Restart agent"},{"location":"en/telemetry/deployment/#next-steps","title":"Next Steps","text":"<ul> <li>Prometheus Metrics Reference - Learn about available metrics</li> <li>Grafana Dashboard Guide - Use the terminal dashboard</li> <li>Telemetry Overview - Back to overview</li> </ul>"},{"location":"en/telemetry/deployment/#external-resources","title":"External Resources","text":"<ul> <li>Prometheus Documentation</li> <li>Grafana Documentation</li> <li>Prometheus Operator</li> <li>Best Practices for Monitoring</li> </ul>"},{"location":"en/telemetry/grafana-dashboard/","title":"\ud83d\udcca Grafana-Style Terminal Dashboard","text":""},{"location":"en/telemetry/grafana-dashboard/#overview","title":"Overview","text":"<p>The <code>agent metrics grafana</code> command provides a comprehensive, Grafana-inspired dashboard directly in your terminal. View real-time metrics, performance indicators, and system health without leaving the command line.</p> <p>No External Dependencies</p> <p>The terminal dashboard is completely self-contained. No Grafana installation required!</p>"},{"location":"en/telemetry/grafana-dashboard/#features","title":"Features","text":""},{"location":"en/telemetry/grafana-dashboard/#rich-visualization","title":"\ud83c\udfa8 Rich Visualization","text":"<ul> <li>Tables: Formatted data with headers and borders</li> <li>Progress Bars: Visual representation of resource usage</li> <li>Color Coding: Green/yellow/red indicators for status</li> <li>Sections: Organized layout with clear separators</li> <li>Summary Box: At-a-glance statistics</li> </ul>"},{"location":"en/telemetry/grafana-dashboard/#real-time-updates","title":"\ud83d\udd04 Real-Time Updates","text":"<ul> <li>Watch Mode: Auto-refresh at configurable intervals</li> <li>Live Metrics: See changes as tasks execute</li> <li>Screen Clearing: Clean updates without scrolling</li> </ul>"},{"location":"en/telemetry/grafana-dashboard/#comprehensive-metrics","title":"\ud83d\udcc8 Comprehensive Metrics","text":"<ul> <li>Agent information and build details</li> <li>System resources (memory, goroutines)</li> <li>Task execution statistics</li> <li>Performance metrics (P50, P99 latencies)</li> <li>gRPC request statistics</li> <li>Error tracking</li> </ul>"},{"location":"en/telemetry/grafana-dashboard/#quick-start","title":"Quick Start","text":""},{"location":"en/telemetry/grafana-dashboard/#basic-usage","title":"Basic Usage","text":"<p>View dashboard once:</p> <pre><code>./sloth-runner agent metrics grafana &lt;agent_name&gt;\n</code></pre>"},{"location":"en/telemetry/grafana-dashboard/#watch-mode","title":"Watch Mode","text":"<p>Auto-refresh every 5 seconds (default):</p> <pre><code>./sloth-runner agent metrics grafana &lt;agent_name&gt; --watch\n</code></pre> <p>Custom refresh interval (e.g., every 2 seconds):</p> <pre><code>./sloth-runner agent metrics grafana &lt;agent_name&gt; --watch --interval 2\n</code></pre> <p>Stop watching: Press <code>Ctrl+C</code></p>"},{"location":"en/telemetry/grafana-dashboard/#dashboard-sections","title":"Dashboard Sections","text":""},{"location":"en/telemetry/grafana-dashboard/#1-agent-information","title":"1. \ud83d\udd27 Agent Information","text":"<p>Displays agent metadata and configuration.</p> <p>Fields:</p> Field Description Example Version Agent build version <code>v1.2.3</code>, <code>dev</code> OS Operating system <code>linux</code>, <code>darwin</code> Architecture CPU architecture <code>arm64</code>, <code>amd64</code> Uptime Time since agent start <code>2h 34m</code>, <code>5d 12h 45m</code> Last Updated Metrics snapshot timestamp <code>2025-10-05 15:42:30</code> <p>Example Output: <pre><code>\ud83d\udd27 Agent Information\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Version      \u2502 v1.2.3                      \u2502\n\u2502 OS           \u2502 linux                       \u2502\n\u2502 Architecture \u2502 arm64                       \u2502\n\u2502 Uptime       \u2502 2h 34m                      \u2502\n\u2502 Last Updated \u2502 2025-10-05 15:42:30         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p>"},{"location":"en/telemetry/grafana-dashboard/#2-system-resources","title":"2. \ud83d\udcbb System Resources","text":"<p>Visual progress bars showing resource utilization.</p> <p>Metrics:</p>"},{"location":"en/telemetry/grafana-dashboard/#goroutines","title":"Goroutines","text":"<ul> <li>Current count vs. threshold (default: 1000)</li> <li>Color coding:<ul> <li>\ud83d\udfe2 Green: &lt; 60% (healthy)</li> <li>\ud83d\udfe1 Yellow: 60-80% (moderate)</li> <li>\ud83d\udd34 Red: &gt; 80% (high)</li> </ul> </li> </ul>"},{"location":"en/telemetry/grafana-dashboard/#memory-mb","title":"Memory (MB)","text":"<ul> <li>Allocated memory in megabytes</li> <li>Threshold: 512MB default</li> <li>Same color coding as goroutines</li> </ul> <p>Example Output: <pre><code>\ud83d\udcbb System Resources\n\nGoroutines: [\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591] 342/1000 (34.2%)\nMemory (MB): [\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591] 78/512 (15.2%)\n</code></pre></p> <p>Interpretation: - Green bars: System is healthy - Yellow bars: Monitor closely, may need attention - Red bars: Resource pressure, investigate</p>"},{"location":"en/telemetry/grafana-dashboard/#3-task-metrics","title":"3. \ud83d\udccb Task Metrics","text":"<p>Summary of task execution results.</p> <p>Status Table:</p> Status Icon Color Description Success \u2713 Green Tasks completed successfully Failed \u2717 Red Tasks that failed Skipped \u2298 Yellow Tasks skipped (conditions not met) <p>Running Tasks Bar: - Current concurrent tasks - Threshold: 10 (configurable)</p> <p>Example Output: <pre><code>\ud83d\udccb Task Metrics\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Status   \u2502 Count  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 \u2713 Success \u2502 145    \u2502\n\u2502 \u2717 Failed  \u2502 3      \u2502\n\u2502 \u2298 Skipped \u2502 12     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nRunning Tasks: [\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591] 2/10 (20.0%)\n</code></pre></p> <p>Use Cases: - Quick health check: Low failure rate is good - Capacity monitoring: High running tasks may indicate bottleneck - Audit trail: Total tasks executed</p>"},{"location":"en/telemetry/grafana-dashboard/#4-task-performance","title":"4. \u23f1\ufe0f Task Performance","text":"<p>Detailed latency metrics for executed tasks.</p> <p>Columns:</p> Column Description Task Task name from <code>.sloth</code> file P50 (ms) Median execution time (50th percentile) P99 (ms) 99th percentile latency Status Performance indicator <p>Performance Indicators:</p> Indicator Criteria Meaning \ud83d\udfe2 Fast P99 &lt; 1000ms Excellent performance \ud83d\udfe1 Normal P99 &lt; 5000ms Acceptable performance \ud83d\udd34 Slow P99 &gt;= 5000ms Needs optimization <p>Example Output: <pre><code>\u23f1\ufe0f  Task Performance\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502      Task        \u2502 P50 (ms) \u2502 P99 (ms) \u2502  Status  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 install_packages \u2502 234.56   \u2502 567.89   \u2502 \ud83d\udfe1 Normal\u2502\n\u2502 check_service    \u2502 12.34    \u2502 45.67    \u2502 \ud83d\udfe2 Fast  \u2502\n\u2502 deploy_app       \u2502 1234.56  \u2502 5678.90  \u2502 \ud83d\udd34 Slow  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p> <p>Action Items: - \ud83d\udfe2 Fast tasks: No action needed - \ud83d\udfe1 Normal tasks: Monitor trends - \ud83d\udd34 Slow tasks: Investigate and optimize</p>"},{"location":"en/telemetry/grafana-dashboard/#5-grpc-metrics","title":"5. \ud83c\udf10 gRPC Metrics","text":"<p>Statistics for master-agent communication.</p> <p>Columns:</p> Column Description Method gRPC method name Requests Total requests for this method Avg Latency (ms) P50 latency in milliseconds <p>Common Methods:</p> Method Description <code>ExecuteTask</code> Task execution requests <code>ExecuteCommand</code> Direct command execution <code>GetAgentInfo</code> Agent info queries <code>RegisterAgent</code> Agent registration <p>Example Output: <pre><code>\ud83c\udf10 gRPC Metrics\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502     Method      \u2502 Requests \u2502 Avg Latency (ms) \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 ExecuteTask     \u2502 156      \u2502 234.56           \u2502\n\u2502 ExecuteCommand  \u2502 45       \u2502 12.34            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p> <p>Interpretation: - High request count: Agent is actively used - High latency: Network or master performance issues - Low latency (&lt;50ms): Excellent connectivity</p>"},{"location":"en/telemetry/grafana-dashboard/#6-errors","title":"6. \u26a0\ufe0f Errors","text":"<p>Error tracking by type (only shown if errors exist).</p> <p>Columns:</p> Column Description Error Type Category of error Count Number of occurrences (red) <p>Common Error Types:</p> Type Description <code>task_execution</code> Errors during task execution <code>grpc_timeout</code> gRPC request timeouts <code>module_error</code> Module-specific errors <code>network_error</code> Network connectivity issues <p>Example Output: <pre><code>\u26a0\ufe0f  Errors\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Error Type    \u2502 Count \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 task_execution \u2502 12    \u2502\n\u2502 grpc_timeout   \u2502 3     \u2502\n\u2502 module_error   \u2502 5     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p> <p>Action Items: - Investigate errors with highest counts - Check logs for error details - Review failing tasks in Task Metrics section</p>"},{"location":"en/telemetry/grafana-dashboard/#7-summary","title":"7. \ud83d\udcc8 Summary","text":"<p>Consolidated overview in a highlighted box.</p> <p>Metrics:</p> Metric Description Color Total Tasks All tasks executed Cyan Running Currently executing Yellow Memory Current allocation (MB) Green Goroutines Active goroutines Magenta <p>Example Output: <pre><code>\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n\u2551                    \ud83d\udcc8 Summary                       \u2551\n\u2560\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2563\n\u2551 Total Tasks: 160 | Running: 2 | Memory: 78 MB |     \u2551\n\u2551 Goroutines: 342                                     \u2551\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n</code></pre></p>"},{"location":"en/telemetry/grafana-dashboard/#use-cases","title":"Use Cases","text":""},{"location":"en/telemetry/grafana-dashboard/#development-workflow","title":"Development Workflow","text":"<p>Monitor tasks during development:</p> ScenarioCommandBenefit <p>You're developing a deployment script and want to see metrics in real-time.</p> <pre><code># Terminal 1: Watch dashboard\n./sloth-runner agent metrics grafana dev-agent --watch --interval 1\n\n# Terminal 2: Execute tasks repeatedly\nfor i in {1..10}; do\n  ./sloth-runner run -f deploy.sloth\n  sleep 2\ndone\n</code></pre> <ul> <li>See task counts increment</li> <li>Monitor latency changes</li> <li>Catch errors immediately</li> </ul>"},{"location":"en/telemetry/grafana-dashboard/#performance-tuning","title":"Performance Tuning","text":"<p>Identify bottlenecks:</p> ScenarioCommandAction <p>Production tasks are slower than expected.</p> <pre><code>./sloth-runner agent metrics grafana prod-agent\n</code></pre> <ol> <li>Check Task Performance section</li> <li>Identify \ud83d\udd34 Slow tasks</li> <li>Review P99 latencies</li> <li>Optimize those specific tasks</li> </ol>"},{"location":"en/telemetry/grafana-dashboard/#production-monitoring","title":"Production Monitoring","text":"<p>Quick health checks:</p> ScenarioCommandChecks <p>Check agent health during on-call.</p> <pre><code>./sloth-runner agent metrics grafana prod-agent\n</code></pre> <ul> <li>\u2705 Low error count in Errors section</li> <li>\u2705 Green resource bars (System Resources)</li> <li>\u2705 Low failure rate in Task Metrics</li> <li>\u2705 Low gRPC latency</li> </ul>"},{"location":"en/telemetry/grafana-dashboard/#capacity-planning","title":"Capacity Planning","text":"<p>Determine if you need more agents:</p> ScenarioCommandDecision Criteria <p>Deciding if current agent fleet is sufficient.</p> <pre><code># Check multiple agents\nfor agent in agent1 agent2 agent3; do\n  echo \"=== $agent ===\"\n  ./sloth-runner agent metrics grafana $agent | grep -A2 \"System Resources\"\ndone\n</code></pre> <ul> <li>\ud83d\udd34 Red resource bars: Add more agents</li> <li>\ud83d\udfe1 Yellow consistently: Monitor closely</li> <li>\ud83d\udfe2 Green: Current capacity is good</li> </ul>"},{"location":"en/telemetry/grafana-dashboard/#advanced-features","title":"Advanced Features","text":""},{"location":"en/telemetry/grafana-dashboard/#watch-mode_1","title":"Watch Mode","text":"<p>Continuous monitoring with auto-refresh:</p> <pre><code># Refresh every 5 seconds (default)\n./sloth-runner agent metrics grafana my-agent --watch\n\n# Fast refresh (1 second) for development\n./sloth-runner agent metrics grafana my-agent --watch --interval 1\n\n# Slow refresh (30 seconds) for overview\n./sloth-runner agent metrics grafana my-agent --watch --interval 30\n</code></pre> <p>Features: - Clears screen between updates for clean display - Press <code>Ctrl+C</code> to stop - Ideal for monitoring during task execution</p>"},{"location":"en/telemetry/grafana-dashboard/#comparison","title":"Comparison","text":"<p>Compare metrics across multiple agents:</p> <pre><code>#!/bin/bash\n# compare-agents.sh\n\nagents=(\"agent1\" \"agent2\" \"agent3\")\n\nfor agent in \"${agents[@]}\"; do\n  echo \"=========================================\"\n  echo \"Agent: $agent\"\n  echo \"=========================================\"\n  ./sloth-runner agent metrics grafana $agent\n  echo \"\"\n  read -p \"Press Enter for next agent...\"\ndone\n</code></pre>"},{"location":"en/telemetry/grafana-dashboard/#scripting","title":"Scripting","text":"<p>Extract specific metrics for automation:</p> <pre><code># Get current running tasks\n./sloth-runner agent metrics grafana my-agent | grep \"Running Tasks\"\n\n# Check for errors\n./sloth-runner agent metrics grafana my-agent | grep -A10 \"\u26a0\ufe0f  Errors\"\n\n# Extract memory usage\n./sloth-runner agent metrics grafana my-agent | grep \"Memory (MB)\"\n</code></pre>"},{"location":"en/telemetry/grafana-dashboard/#color-reference","title":"Color Reference","text":""},{"location":"en/telemetry/grafana-dashboard/#status-colors","title":"Status Colors","text":"Color Hex Usage \ud83d\udfe2 Green <code>#4CAF50</code> Success, healthy, fast \ud83d\udfe1 Yellow <code>#FFC107</code> Warning, moderate, skipped \ud83d\udd34 Red <code>#F44336</code> Error, high, slow \ud83d\udd35 Cyan <code>#00BCD4</code> Information, totals \ud83d\udfe3 Magenta <code>#9C27B0</code> Secondary metrics"},{"location":"en/telemetry/grafana-dashboard/#visual-indicators","title":"Visual Indicators","text":"Symbol Meaning \u2713 Success \u2717 Failure \u2298 Skipped \ud83d\udfe2 Fast/Healthy \ud83d\udfe1 Normal/Warning \ud83d\udd34 Slow/Critical"},{"location":"en/telemetry/grafana-dashboard/#troubleshooting","title":"Troubleshooting","text":""},{"location":"en/telemetry/grafana-dashboard/#dashboard-shows-no-data","title":"Dashboard Shows \"No Data\"","text":"<p>Symptoms: All metrics are zero or empty</p> <p>Causes: 1. Agent just started (no tasks executed yet) 2. Telemetry disabled 3. Metrics endpoint unreachable</p> <p>Solutions:</p> <pre><code># Check if agent has telemetry enabled\n./sloth-runner agent list\n\n# Verify metrics endpoint\n./sloth-runner agent metrics prom my-agent --snapshot\n\n# Execute a test task to generate metrics\n./sloth-runner agent run my-agent \"echo test\"\n\n# Try dashboard again\n./sloth-runner agent metrics grafana my-agent\n</code></pre>"},{"location":"en/telemetry/grafana-dashboard/#connection-refused","title":"Connection Refused","text":"<p>Symptoms: \"Failed to fetch metrics: connection refused\"</p> <p>Causes: 1. Agent is down 2. Metrics port is blocked 3. Wrong agent name</p> <p>Solutions:</p> <pre><code># Verify agent is running\n./sloth-runner agent list\n\n# Check metrics endpoint\ncurl http://agent-ip:9090/health\n\n# Check firewall\ntelnet agent-ip 9090\n</code></pre>"},{"location":"en/telemetry/grafana-dashboard/#incomplete-dashboard","title":"Incomplete Dashboard","text":"<p>Symptoms: Some sections missing</p> <p>Causes: 1. No data for that metric category (e.g., no errors = no Errors section) 2. Old agent version without all metrics</p> <p>Solutions: - This is normal! Sections only appear when data exists. - For Errors section: Only shown when errors &gt; 0 - For Task Performance: Only shown when tasks have been executed</p>"},{"location":"en/telemetry/grafana-dashboard/#watch-mode-not-updating","title":"Watch Mode Not Updating","text":"<p>Symptoms: Dashboard frozen in watch mode</p> <p>Causes: 1. Terminal doesn't support ANSI escape codes 2. Very long refresh interval</p> <p>Solutions:</p> <pre><code># Use shorter interval\n./sloth-runner agent metrics grafana my-agent --watch --interval 2\n\n# Try different terminal\n# (e.g., iTerm2, modern Terminal.app, Windows Terminal)\n\n# Fallback: Run without watch mode\n./sloth-runner agent metrics grafana my-agent\n</code></pre>"},{"location":"en/telemetry/grafana-dashboard/#best-practices","title":"Best Practices","text":""},{"location":"en/telemetry/grafana-dashboard/#refresh-intervals","title":"Refresh Intervals","text":"Use Case Recommended Interval Active development 1-2 seconds Task execution monitoring 5 seconds (default) Background monitoring 10-30 seconds Overview checks Single run (no watch)"},{"location":"en/telemetry/grafana-dashboard/#when-to-use","title":"When to Use","text":"<p>\u2705 Use Dashboard For: - Quick health checks - Real-time task monitoring - Performance troubleshooting - Development feedback</p> <p>\u274c Don't Use Dashboard For: - Historical analysis (use Grafana web UI) - Alerting (use Prometheus alerts) - Long-term trends (use time-series visualization) - Multi-agent comparison (manually run for each)</p>"},{"location":"en/telemetry/grafana-dashboard/#complementary-tools","title":"Complementary Tools","text":"Tool When to Use Terminal Dashboard Quick checks, development Prometheus Historical queries, alerting Grafana Web UI Long-term trends, dashboards <code>agent metrics prom</code> Get endpoint URL, raw metrics"},{"location":"en/telemetry/grafana-dashboard/#examples","title":"Examples","text":""},{"location":"en/telemetry/grafana-dashboard/#example-1-healthy-agent","title":"Example 1: Healthy Agent","text":"<pre><code>\ud83d\udcca Sloth Runner Metrics Dashboard - Agent: production-1\n\n\ud83d\udd27 Agent Information\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Version      \u2502 v1.2.3              \u2502\n\u2502 OS           \u2502 linux               \u2502\n\u2502 Architecture \u2502 amd64               \u2502\n\u2502 Uptime       \u2502 7d 14h 23m          \u2502\n\u2502 Last Updated \u2502 2025-10-05 10:30:15 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\ud83d\udcbb System Resources\nGoroutines: [\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591] 125/1000 (12.5%)\nMemory (MB): [\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591] 45/512 (8.8%)\n\n\ud83d\udccb Task Metrics\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Status   \u2502 Count \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 \u2713 Success \u2502 1,234 \u2502\n\u2502 \u2717 Failed  \u2502 5     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nRunning Tasks: [\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591] 0/10 (0.0%)\n\n\u23f1\ufe0f  Task Performance\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    Task     \u2502 P50 (ms) \u2502 P99 (ms) \u2502 Status  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 health_check\u2502 5.23     \u2502 12.45    \u2502 \ud83d\udfe2 Fast \u2502\n\u2502 deploy      \u2502 456.78   \u2502 892.34   \u2502 \ud83d\udfe1 Normal\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n\u2551              \ud83d\udcc8 Summary                    \u2551\n\u2560\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2563\n\u2551 Total Tasks: 1,239 | Running: 0 |          \u2551\n\u2551 Memory: 45 MB | Goroutines: 125           \u2551\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n</code></pre>"},{"location":"en/telemetry/grafana-dashboard/#example-2-agent-under-load","title":"Example 2: Agent Under Load","text":"<pre><code>\ud83d\udcca Sloth Runner Metrics Dashboard - Agent: worker-3\n\n\ud83d\udcbb System Resources\nGoroutines: [\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591] 857/1000 (85.7%)\nMemory (MB): [\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591] 412/512 (80.5%)\n\n\ud83d\udccb Task Metrics\nRunning Tasks: [\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591] 8/10 (80.0%)\n\n\u23f1\ufe0f  Task Performance\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    Task    \u2502 P50 (ms) \u2502 P99 (ms) \u2502 Status  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 big_deploy \u2502 3456.78  \u2502 8932.12  \u2502 \ud83d\udd34 Slow \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u26a0\ufe0f  Errors\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Error Type    \u2502 Count \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 task_timeout   \u2502 23    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Interpretation: This agent is under heavy load. Consider: - Reducing concurrent tasks - Optimizing slow tasks - Adding more agents to distribute load - Investigating task timeouts</p>"},{"location":"en/telemetry/grafana-dashboard/#next-steps","title":"Next Steps","text":"<ul> <li>Prometheus Metrics Reference - Detailed metric documentation</li> <li>Deployment Guide - Set up production monitoring</li> <li>Telemetry Overview - Back to overview</li> </ul>"},{"location":"en/telemetry/grafana-dashboard/#further-reading","title":"Further Reading","text":"<ul> <li>pterm Library Documentation - Terminal visualization library used</li> <li>Prometheus Best Practices - Metric naming and usage</li> </ul>"},{"location":"en/telemetry/prometheus-metrics/","title":"\ud83d\udcc8 Prometheus Metrics Reference","text":""},{"location":"en/telemetry/prometheus-metrics/#overview","title":"Overview","text":"<p>Sloth Runner exposes comprehensive metrics in Prometheus text format. All metrics are prefixed with <code>sloth_</code> and follow Prometheus naming conventions.</p>"},{"location":"en/telemetry/prometheus-metrics/#metrics-endpoint","title":"Metrics Endpoint","text":""},{"location":"en/telemetry/prometheus-metrics/#http-endpoints","title":"HTTP Endpoints","text":"Endpoint Description <code>/metrics</code> Prometheus metrics in text format <code>/health</code> Health check endpoint (returns <code>OK</code>) <code>/info</code> Service information JSON"},{"location":"en/telemetry/prometheus-metrics/#access-methods","title":"Access Methods","text":"CLIcURLBrowser <pre><code># Get endpoint URL\n./sloth-runner agent metrics prom &lt;agent_name&gt;\n\n# View raw metrics\n./sloth-runner agent metrics prom &lt;agent_name&gt; --snapshot\n</code></pre> <pre><code>curl http://agent-host:9090/metrics\n</code></pre> <pre><code>http://agent-host:9090/metrics\n</code></pre>"},{"location":"en/telemetry/prometheus-metrics/#metric-types","title":"Metric Types","text":"<p>Sloth Runner uses three types of Prometheus metrics:</p> <ul> <li>Counter: Monotonically increasing value (e.g., total tasks executed)</li> <li>Gauge: Value that can go up or down (e.g., running tasks, memory usage)</li> <li>Histogram: Distribution of values with quantiles (e.g., task duration)</li> </ul>"},{"location":"en/telemetry/prometheus-metrics/#task-metrics","title":"Task Metrics","text":""},{"location":"en/telemetry/prometheus-metrics/#sloth_tasks_total","title":"sloth_tasks_total","text":"<p>Type: Counter Description: Total number of tasks executed Labels: - <code>status</code>: Task result status (<code>success</code>, <code>failed</code>, <code>skipped</code>) - <code>group</code>: Task group name (from <code>.sloth</code> file)</p> <p>Example: <pre><code># HELP sloth_tasks_total Total number of tasks executed by status\n# TYPE sloth_tasks_total counter\nsloth_tasks_total{group=\"web-deployment\",status=\"success\"} 145\nsloth_tasks_total{group=\"web-deployment\",status=\"failed\"} 3\nsloth_tasks_total{group=\"database-setup\",status=\"success\"} 67\n</code></pre></p> <p>Use Cases: - Track total tasks executed per group - Calculate success rate: <code>success / (success + failed)</code> - Identify failing task groups</p> <p>PromQL Examples: <pre><code># Total successful tasks\nsum(sloth_tasks_total{status=\"success\"})\n\n# Task failure rate\nsum(rate(sloth_tasks_total{status=\"failed\"}[5m]))\n\n# Success rate by group\nsum(sloth_tasks_total{status=\"success\"}) by (group) /\nsum(sloth_tasks_total) by (group)\n</code></pre></p>"},{"location":"en/telemetry/prometheus-metrics/#sloth_tasks_running","title":"sloth_tasks_running","text":"<p>Type: Gauge Description: Number of currently executing tasks Labels: None</p> <p>Example: <pre><code># HELP sloth_tasks_running Number of tasks currently executing\n# TYPE sloth_tasks_running gauge\nsloth_tasks_running 3\n</code></pre></p> <p>Use Cases: - Monitor concurrent task execution - Detect task queue buildup - Track agent capacity utilization</p> <p>PromQL Examples: <pre><code># Current running tasks\nsloth_tasks_running\n\n# Average running tasks over time\navg_over_time(sloth_tasks_running[1h])\n\n# Max concurrent tasks in last hour\nmax_over_time(sloth_tasks_running[1h])\n</code></pre></p>"},{"location":"en/telemetry/prometheus-metrics/#sloth_task_duration_seconds","title":"sloth_task_duration_seconds","text":"<p>Type: Histogram Description: Task execution duration in seconds Labels: - <code>group</code>: Task group name - <code>task</code>: Task name</p> <p>Buckets: <code>.005, .01, .025, .05, .1, .25, .5, 1, 2.5, 5, 10</code> (seconds)</p> <p>Example: <pre><code># HELP sloth_task_duration_seconds Task execution duration in seconds\n# TYPE sloth_task_duration_seconds histogram\nsloth_task_duration_seconds_bucket{group=\"web\",task=\"deploy\",le=\"0.005\"} 0\nsloth_task_duration_seconds_bucket{group=\"web\",task=\"deploy\",le=\"0.01\"} 0\nsloth_task_duration_seconds_bucket{group=\"web\",task=\"deploy\",le=\"1\"} 45\nsloth_task_duration_seconds_bucket{group=\"web\",task=\"deploy\",le=\"+Inf\"} 145\nsloth_task_duration_seconds_sum{group=\"web\",task=\"deploy\"} 234.56\nsloth_task_duration_seconds_count{group=\"web\",task=\"deploy\"} 145\n</code></pre></p> <p>Quantiles Available: - <code>quantile=\"0.5\"</code> (P50, median) - <code>quantile=\"0.9\"</code> (P90) - <code>quantile=\"0.99\"</code> (P99)</p> <p>Use Cases: - Identify slow tasks - Track performance degradation - Set SLO/SLA thresholds</p> <p>PromQL Examples: <pre><code># P99 latency by task\nhistogram_quantile(0.99,\n  rate(sloth_task_duration_seconds_bucket[5m]))\n\n# Average task duration\nrate(sloth_task_duration_seconds_sum[5m]) /\nrate(sloth_task_duration_seconds_count[5m])\n\n# Tasks slower than 5 seconds\ncount(sloth_task_duration_seconds_bucket{le=\"5\"} == 0)\n</code></pre></p>"},{"location":"en/telemetry/prometheus-metrics/#grpc-metrics","title":"gRPC Metrics","text":""},{"location":"en/telemetry/prometheus-metrics/#sloth_grpc_requests_total","title":"sloth_grpc_requests_total","text":"<p>Type: Counter Description: Total number of gRPC requests Labels: - <code>method</code>: gRPC method name (e.g., <code>ExecuteTask</code>, <code>ExecuteCommand</code>) - <code>status</code>: Request status (<code>ok</code>, <code>error</code>)</p> <p>Example: <pre><code># HELP sloth_grpc_requests_total Total number of gRPC requests\n# TYPE sloth_grpc_requests_total counter\nsloth_grpc_requests_total{method=\"ExecuteTask\",status=\"ok\"} 234\nsloth_grpc_requests_total{method=\"ExecuteTask\",status=\"error\"} 5\nsloth_grpc_requests_total{method=\"ExecuteCommand\",status=\"ok\"} 89\n</code></pre></p> <p>Use Cases: - Monitor gRPC call volume - Track error rates - Identify failing methods</p> <p>PromQL Examples: <pre><code># gRPC request rate\nsum(rate(sloth_grpc_requests_total[5m])) by (method)\n\n# gRPC error rate\nsum(rate(sloth_grpc_requests_total{status=\"error\"}[5m])) by (method)\n\n# gRPC success percentage\nsum(sloth_grpc_requests_total{status=\"ok\"}) /\nsum(sloth_grpc_requests_total) * 100\n</code></pre></p>"},{"location":"en/telemetry/prometheus-metrics/#sloth_grpc_request_duration_seconds","title":"sloth_grpc_request_duration_seconds","text":"<p>Type: Histogram Description: gRPC request duration in seconds Labels: - <code>method</code>: gRPC method name</p> <p>Buckets: <code>.001, .005, .01, .025, .05, .1, .25, .5, 1, 2.5, 5, 10</code> (seconds)</p> <p>Example: <pre><code># HELP sloth_grpc_request_duration_seconds gRPC request duration in seconds\n# TYPE sloth_grpc_request_duration_seconds histogram\nsloth_grpc_request_duration_seconds_bucket{method=\"ExecuteTask\",le=\"0.1\"} 200\nsloth_grpc_request_duration_seconds_bucket{method=\"ExecuteTask\",le=\"+Inf\"} 234\nsloth_grpc_request_duration_seconds_sum{method=\"ExecuteTask\"} 45.67\nsloth_grpc_request_duration_seconds_count{method=\"ExecuteTask\"} 234\n</code></pre></p> <p>Use Cases: - Monitor gRPC latency - Detect network issues - Track API performance</p> <p>PromQL Examples: <pre><code># P99 gRPC latency\nhistogram_quantile(0.99,\n  rate(sloth_grpc_request_duration_seconds_bucket[5m]))\n\n# Slow gRPC calls (&gt;1s)\nsum(rate(sloth_grpc_request_duration_seconds_bucket{le=\"1\"}[5m])) == 0\n</code></pre></p>"},{"location":"en/telemetry/prometheus-metrics/#system-metrics","title":"System Metrics","text":""},{"location":"en/telemetry/prometheus-metrics/#sloth_agent_uptime_seconds","title":"sloth_agent_uptime_seconds","text":"<p>Type: Gauge Description: Agent uptime in seconds Labels: None</p> <p>Example: <pre><code># HELP sloth_agent_uptime_seconds Agent uptime in seconds\n# TYPE sloth_agent_uptime_seconds gauge\nsloth_agent_uptime_seconds 3600\n</code></pre></p> <p>Use Cases: - Monitor agent availability - Track restart frequency - Calculate uptime percentage</p> <p>PromQL Examples: <pre><code># Uptime in hours\nsloth_agent_uptime_seconds / 3600\n\n# Agents that restarted recently (&lt; 5 minutes)\nsloth_agent_uptime_seconds &lt; 300\n</code></pre></p>"},{"location":"en/telemetry/prometheus-metrics/#sloth_agent_info","title":"sloth_agent_info","text":"<p>Type: Gauge (always 1) Description: Agent build information Labels: - <code>version</code>: Agent version - <code>os</code>: Operating system (linux, darwin, windows) - <code>arch</code>: Architecture (amd64, arm64)</p> <p>Example: <pre><code># HELP sloth_agent_info Agent build information\n# TYPE sloth_agent_info gauge\nsloth_agent_info{version=\"v1.2.3\",os=\"linux\",arch=\"arm64\"} 1\n</code></pre></p> <p>Use Cases: - Track agent versions across fleet - Identify agents needing updates - Monitor platform distribution</p> <p>PromQL Examples: <pre><code># Count agents by version\ncount(sloth_agent_info) by (version)\n\n# Count agents by OS\ncount(sloth_agent_info) by (os)\n\n# Find outdated agents\nsloth_agent_info{version!=\"v1.2.3\"}\n</code></pre></p>"},{"location":"en/telemetry/prometheus-metrics/#sloth_goroutines","title":"sloth_goroutines","text":"<p>Type: Gauge Description: Number of goroutines Labels: None</p> <p>Example: <pre><code># HELP sloth_goroutines Number of goroutines\n# TYPE sloth_goroutines gauge\nsloth_goroutines 342\n</code></pre></p> <p>Use Cases: - Monitor goroutine leaks - Track concurrency patterns - Identify resource issues</p> <p>PromQL Examples: <pre><code># Goroutine growth rate\nrate(sloth_goroutines[5m])\n\n# High goroutine count (&gt; 1000)\nsloth_goroutines &gt; 1000\n\n# Average goroutines\navg_over_time(sloth_goroutines[1h])\n</code></pre></p>"},{"location":"en/telemetry/prometheus-metrics/#sloth_memory_allocated_bytes","title":"sloth_memory_allocated_bytes","text":"<p>Type: Gauge Description: Memory allocated by Go runtime in bytes Labels: None</p> <p>Example: <pre><code># HELP sloth_memory_allocated_bytes Memory allocated by Go runtime\n# TYPE sloth_memory_allocated_bytes gauge\nsloth_memory_allocated_bytes 81788928\n</code></pre></p> <p>Use Cases: - Monitor memory usage - Detect memory leaks - Capacity planning</p> <p>PromQL Examples: <pre><code># Memory in MB\nsloth_memory_allocated_bytes / 1024 / 1024\n\n# Memory growth rate\nrate(sloth_memory_allocated_bytes[5m])\n\n# High memory usage (&gt; 500MB)\nsloth_memory_allocated_bytes &gt; 524288000\n</code></pre></p>"},{"location":"en/telemetry/prometheus-metrics/#error-metrics","title":"Error Metrics","text":""},{"location":"en/telemetry/prometheus-metrics/#sloth_errors_total","title":"sloth_errors_total","text":"<p>Type: Counter Description: Total number of errors Labels: - <code>type</code>: Error type (e.g., <code>task_execution</code>, <code>grpc_timeout</code>, <code>module_error</code>)</p> <p>Example: <pre><code># HELP sloth_errors_total Total number of errors by type\n# TYPE sloth_errors_total counter\nsloth_errors_total{type=\"task_execution\"} 12\nsloth_errors_total{type=\"grpc_timeout\"} 3\nsloth_errors_total{type=\"module_error\"} 5\n</code></pre></p> <p>Use Cases: - Track error frequency - Identify error patterns - Alert on error spikes</p> <p>PromQL Examples: <pre><code># Error rate by type\nsum(rate(sloth_errors_total[5m])) by (type)\n\n# Total errors\nsum(sloth_errors_total)\n\n# Error increase in last hour\nincrease(sloth_errors_total[1h])\n</code></pre></p>"},{"location":"en/telemetry/prometheus-metrics/#metric-update-frequency","title":"Metric Update Frequency","text":"Metric Category Update Trigger Task Metrics On task completion gRPC Metrics On each gRPC call System Metrics Every 15 seconds (automatic) Error Metrics When errors occur"},{"location":"en/telemetry/prometheus-metrics/#best-practices","title":"Best Practices","text":""},{"location":"en/telemetry/prometheus-metrics/#querying","title":"Querying","text":"<ol> <li> <p>Use rate() for counters:    <pre><code>rate(sloth_tasks_total[5m])\n</code></pre></p> </li> <li> <p>Use histogram_quantile() for latencies:    <pre><code>histogram_quantile(0.99, rate(sloth_task_duration_seconds_bucket[5m]))\n</code></pre></p> </li> <li> <p>Aggregate with by():    <pre><code>sum(sloth_tasks_total) by (group, status)\n</code></pre></p> </li> </ol>"},{"location":"en/telemetry/prometheus-metrics/#alerting","title":"Alerting","text":"<p>Example Prometheus alert rules:</p> <pre><code>groups:\n  - name: sloth_runner_alerts\n    interval: 30s\n    rules:\n      - alert: HighTaskFailureRate\n        expr: |\n          sum(rate(sloth_tasks_total{status=\"failed\"}[5m]))\n          /\n          sum(rate(sloth_tasks_total[5m]))\n          &gt; 0.1\n        for: 5m\n        labels:\n          severity: warning\n        annotations:\n          summary: \"High task failure rate on {{ $labels.instance }}\"\n\n      - alert: SlowTaskExecution\n        expr: |\n          histogram_quantile(0.99,\n            rate(sloth_task_duration_seconds_bucket[5m])\n          ) &gt; 10\n        for: 5m\n        labels:\n          severity: warning\n        annotations:\n          summary: \"Slow task execution detected\"\n\n      - alert: AgentDown\n        expr: up{job=\"sloth-runner\"} == 0\n        for: 1m\n        labels:\n          severity: critical\n        annotations:\n          summary: \"Agent {{ $labels.instance }} is down\"\n\n      - alert: HighMemoryUsage\n        expr: sloth_memory_allocated_bytes &gt; 536870912\n        for: 10m\n        labels:\n          severity: warning\n        annotations:\n          summary: \"High memory usage (&gt; 512MB)\"\n</code></pre>"},{"location":"en/telemetry/prometheus-metrics/#recording-rules","title":"Recording Rules","text":"<p>Precompute expensive queries:</p> <pre><code>groups:\n  - name: sloth_runner_recording_rules\n    interval: 30s\n    rules:\n      - record: job:sloth_task_success_rate:5m\n        expr: |\n          sum(rate(sloth_tasks_total{status=\"success\"}[5m])) by (job)\n          /\n          sum(rate(sloth_tasks_total[5m])) by (job)\n\n      - record: job:sloth_task_p99_latency:5m\n        expr: |\n          histogram_quantile(0.99,\n            sum(rate(sloth_task_duration_seconds_bucket[5m])) by (job, le)\n          )\n</code></pre>"},{"location":"en/telemetry/prometheus-metrics/#next-steps","title":"Next Steps","text":"<ul> <li>Grafana Dashboard Guide - Visualize these metrics</li> <li>Deployment Guide - Set up Prometheus scraping</li> <li>Telemetry Overview - Back to overview</li> </ul>"},{"location":"examples/delegate_to_file_operations/","title":"Exemplo: Deploy de Configura\u00e7\u00e3o com delegate_to","text":"<p>Este exemplo demonstra como usar o <code>delegate_to</code> junto com opera\u00e7\u00f5es de arquivo para fazer deploy de configura\u00e7\u00f5es em servidores remotos.</p>"},{"location":"examples/delegate_to_file_operations/#arquitetura","title":"Arquitetura","text":"<pre><code>Master (local)\n\u251c\u2500\u2500 deploy.sloth          # Script de deploy\n\u251c\u2500\u2500 templates/\n\u2502   \u251c\u2500\u2500 nginx.conf.tmpl   # Template de configura\u00e7\u00e3o\n\u2502   \u2514\u2500\u2500 app.env.tmpl      # Template de vari\u00e1veis de ambiente\n\u2514\u2500\u2500 files/\n    \u2514\u2500\u2500 app.tar.gz        # Aplica\u00e7\u00e3o para deploy\n\nRemote Agent (production-server)\n\u2514\u2500\u2500 /etc/nginx/           # Destino do deploy\n    \u2514\u2500\u2500 sites-available/\n</code></pre>"},{"location":"examples/delegate_to_file_operations/#script-de-deploy-deploysloth","title":"Script de Deploy (deploy.sloth)","text":"<pre><code>local file_ops = require(\"file_ops\")\nlocal exec = require(\"exec\")\n\n-- Task: Deploy de configura\u00e7\u00e3o do Nginx\nlocal deploy_nginx_task = task(\"deploy_nginx_config\")\n    :description(\"Deploy Nginx configuration to production server\")\n    :command(function(this, params)\n        log.info(\"\ud83d\ude80 Deploying Nginx configuration...\")\n\n        -- 1. Renderizar template do Nginx\n        local result, err = file_ops.template(\n            \"templates/nginx.conf.tmpl\",      -- Template no master\n            \"/tmp/nginx.conf\",                -- Destino tempor\u00e1rio no agente\n            {\n                server_name = params.server_name or \"example.com\",\n                port = params.port or \"80\",\n                root_path = \"/var/www/html\",\n                proxy_pass = params.backend_url or \"http://localhost:3000\"\n            }\n        )\n\n        if not result then\n            return false, \"Failed to render template: \" .. tostring(err)\n        end\n\n        log.info(\"\u2705 Template rendered successfully\")\n\n        -- 2. Copiar para o local final (requer sudo)\n        local copy_result = exec.run(\"sudo\", \"cp\", \"/tmp/nginx.conf\", \n                                     \"/etc/nginx/sites-available/myapp\")\n\n        if copy_result.exit_code ~= 0 then\n            return false, \"Failed to copy config: \" .. copy_result.stderr\n        end\n\n        -- 3. Criar symlink se n\u00e3o existir\n        exec.run(\"sudo\", \"ln\", \"-sf\", \n                \"/etc/nginx/sites-available/myapp\",\n                \"/etc/nginx/sites-enabled/myapp\")\n\n        -- 4. Testar configura\u00e7\u00e3o\n        local test_result = exec.run(\"sudo\", \"nginx\", \"-t\")\n\n        if test_result.exit_code ~= 0 then\n            log.error(\"\u274c Nginx config test failed!\")\n            log.error(test_result.stderr)\n            return false, \"Nginx configuration is invalid\"\n        end\n\n        log.info(\"\u2705 Nginx configuration test passed\")\n\n        -- 5. Reload Nginx\n        local reload_result = exec.run(\"sudo\", \"systemctl\", \"reload\", \"nginx\")\n\n        if reload_result.exit_code ~= 0 then\n            return false, \"Failed to reload Nginx: \" .. reload_result.stderr\n        end\n\n        log.info(\"\u2705 Nginx reloaded successfully\")\n\n        return true\n    end)\n    :delegate_to(\"production-server\")  -- Executa no servidor remoto\n    :timeout(\"2m\")\n    :retry(3)\n    :build()\n\n-- Task: Deploy de aplica\u00e7\u00e3o\nlocal deploy_app_task = task(\"deploy_application\")\n    :description(\"Deploy application files to production server\")\n    :depends_on({ \"deploy_nginx_config\" })\n    :command(function(this, params)\n        log.info(\"\ud83d\udce6 Deploying application...\")\n\n        -- 1. Extrair aplica\u00e7\u00e3o\n        local result, err = file_ops.unarchive(\n            \"files/app.tar.gz\",              -- Arquivo no master\n            \"/var/www/html\",                 -- Destino no agente\n            { remote_src = false }           -- Arquivo vem do master\n        )\n\n        if not result then\n            return false, \"Failed to extract app: \" .. tostring(err)\n        end\n\n        log.info(\"\u2705 Application extracted successfully\")\n\n        -- 2. Configurar permiss\u00f5es\n        exec.run(\"sudo\", \"chown\", \"-R\", \"www-data:www-data\", \"/var/www/html\")\n        exec.run(\"sudo\", \"chmod\", \"-R\", \"755\", \"/var/www/html\")\n\n        log.info(\"\u2705 Permissions configured\")\n\n        return true\n    end)\n    :delegate_to(\"production-server\")\n    :timeout(\"3m\")\n    :build()\n\n-- Task: Verificar deploy\nlocal verify_deploy_task = task(\"verify_deployment\")\n    :description(\"Verify deployment is working\")\n    :depends_on({ \"deploy_application\" })\n    :command(function(this, params)\n        log.info(\"\ud83d\udd0d Verifying deployment...\")\n\n        local http = require(\"http\")\n\n        -- Testar endpoint\n        local response, err = http.get(\"http://localhost\")\n\n        if not response or response.status_code ~= 200 then\n            return false, \"Health check failed: \" .. tostring(err)\n        end\n\n        log.info(\"\u2705 Deployment verified successfully\")\n        log.info(\"Status code: \" .. response.status_code)\n\n        return true\n    end)\n    :delegate_to(\"production-server\")\n    :timeout(\"1m\")\n    :build()\n\n-- Workflow de deploy\nworkflow.define(\"production_deployment\")\n    :description(\"Complete production deployment workflow\")\n    :version(\"1.0.0\")\n    :tasks({\n        deploy_nginx_task,\n        deploy_app_task,\n        verify_deploy_task\n    })\n    :config({\n        timeout = \"10m\",\n        on_error = \"rollback\"\n    })\n    :on_complete(function(success, results)\n        if success then\n            log.info(\"\ud83c\udf89 Deployment completed successfully!\")\n        else\n            log.error(\"\u274c Deployment failed!\")\n            -- Aqui voc\u00ea poderia implementar rollback\n        end\n        return true\n    end)\n</code></pre>"},{"location":"examples/delegate_to_file_operations/#template-de-nginx-templatesnginxconftmpl","title":"Template de Nginx (templates/nginx.conf.tmpl)","text":"<pre><code>server {\n    listen {{.port}};\n    server_name {{.server_name}};\n\n    root {{.root_path}};\n    index index.html index.htm;\n\n    location / {\n        try_files $uri $uri/ @proxy;\n    }\n\n    location @proxy {\n        proxy_pass {{.proxy_pass}};\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n\n    # Logs\n    access_log /var/log/nginx/{{.server_name}}_access.log;\n    error_log /var/log/nginx/{{.server_name}}_error.log;\n}\n</code></pre>"},{"location":"examples/delegate_to_file_operations/#executando-o-deploy","title":"Executando o Deploy","text":"<pre><code># Deploy para produ\u00e7\u00e3o\nsloth-runner run deploy.sloth\n\n# Deploy com par\u00e2metros customizados\nsloth-runner run deploy.sloth --set server_name=myapp.com --set port=8080\n</code></pre>"},{"location":"examples/delegate_to_file_operations/#como-funciona","title":"Como Funciona","text":"<ol> <li>Master: O <code>sloth-runner run</code> \u00e9 executado no master</li> <li>Empacotamento: O workspace inteiro (incluindo templates e arquivos) \u00e9 empacotado em um tarball</li> <li>Envio: O tarball \u00e9 enviado para o agente <code>production-server</code> via gRPC</li> <li>Extra\u00e7\u00e3o: O agente extrai o tarball em um diret\u00f3rio tempor\u00e1rio</li> <li>Mudan\u00e7a de Diret\u00f3rio: O agente muda para o workspace extra\u00eddo (<code>os.Chdir</code>)</li> <li>Execu\u00e7\u00e3o: As tasks s\u00e3o executadas, e as opera\u00e7\u00f5es de arquivo (template, copy) funcionam corretamente porque:</li> <li>Os arquivos de origem (<code>templates/nginx.conf.tmpl</code>) existem no workspace extra\u00eddo</li> <li>Os paths relativos funcionam corretamente</li> <li>Retorno: O workspace atualizado \u00e9 empacotado e retornado ao master</li> </ol>"},{"location":"examples/delegate_to_file_operations/#vantagens","title":"Vantagens","text":"<p>\u2705 Centralizado: Templates e arquivos ficam no master \u2705 Versionado: Tudo pode ser versionado no Git \u2705 Seguro: N\u00e3o \u00e9 necess\u00e1rio ter arquivos nos agentes \u2705 Consistente: Mesmos templates para m\u00faltiplos ambientes \u2705 Audit\u00e1vel: Todas as mudan\u00e7as s\u00e3o rastre\u00e1veis</p>"},{"location":"examples/delegate_to_file_operations/#boas-praticas","title":"Boas Pr\u00e1ticas","text":"<ol> <li>Use paths relativos: Sempre use paths relativos ao workspace</li> <li>Template everything: Use templates para configura\u00e7\u00f5es vari\u00e1veis</li> <li>Verifique antes de aplicar: Sempre teste configura\u00e7\u00f5es (ex: <code>nginx -t</code>)</li> <li>Implemente rollback: Em caso de falha, reverta para a vers\u00e3o anterior</li> <li>Use depend\u00eancias: Garanta ordem de execu\u00e7\u00e3o com <code>depends_on()</code></li> </ol>"},{"location":"features/agent-update/","title":"\ud83d\udd04 Agent Update via gRPC","text":""},{"location":"features/agent-update/#overview","title":"Overview","text":"<p>O comando <code>sloth-runner agent update</code> permite atualizar agentes remotos automaticamente via gRPC, sem necessidade de acesso SSH. O agente baixa e instala a atualiza\u00e7\u00e3o localmente, garantindo uma atualiza\u00e7\u00e3o segura e aut\u00f4noma.</p> <p>Caracter\u00edsticas principais: - \u2705 Atualiza\u00e7\u00e3o via gRPC (sem SSH) - \u2705 Download direto do GitHub no agente - \u2705 Rein\u00edcio autom\u00e1tico ap\u00f3s atualiza\u00e7\u00e3o - \u2705 Backup autom\u00e1tico do bin\u00e1rio - \u2705 Rollback em caso de falha</p>"},{"location":"features/agent-update/#como-funciona","title":"Como Funciona","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Master  \u2502                    \u2502   Agent     \u2502                    \u2502  GitHub    \u2502\n\u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2518                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518                    \u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n     \u2502                                \u2502                                  \u2502\n     \u2502 1. UpdateAgent(gRPC) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500&gt;\u2502                                  \u2502\n     \u2502                                \u2502                                  \u2502\n     \u2502                                \u2502 2. Fetch latest release \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500&gt;\u2502\n     \u2502                                \u2502&lt;\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502\n     \u2502                                \u2502                                  \u2502\n     \u2502                                \u2502 3. Download binary \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500&gt;\u2502\n     \u2502                                \u2502&lt;\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502\n     \u2502                                \u2502                                  \u2502\n     \u2502                                \u2502 4. Create update script          \u2502\n     \u2502&lt;\u2500\u2500\u2500\u2500\u2500 5. Success \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502                                  \u2502\n     \u2502                                \u2502                                  \u2502\n     \u2502                                \u2502 6. Shutdown (3s delay)           \u2502\n     \u2502                                \u2502                                  \u2502\n     \u2502                                \u2502 7. Update script runs:           \u2502\n     \u2502                                \u2502    - Replace binary              \u2502\n     \u2502                                \u2502    - Restart agent               \u2502\n     \u2502                                \u2502                                  \u2502\n     \u2502                                \u2502 8. Agent restarted               \u2502\n     \u2502&lt;\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Heartbeat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502                                  \u2502\n</code></pre>"},{"location":"features/agent-update/#uso","title":"Uso","text":""},{"location":"features/agent-update/#atualizar-um-agente","title":"Atualizar um Agente","text":"<pre><code>sloth-runner agent update &lt;agent-name&gt;\n</code></pre> <p>Exemplo: <pre><code>sloth-runner agent update lady-arch\n</code></pre></p> <p>Sa\u00edda: <pre><code>Connecting to agent 'lady-arch'...\nSending update command to agent at 192.168.1.16:50052...\n\u2713 Agent 'lady-arch' updated successfully\n\nOld version: v4.18.3\nNew version: v4.18.4\nAgent update prepared. Shutting down for binary replacement and restart.\n</code></pre></p>"},{"location":"features/agent-update/#atualizar-para-versao-especifica","title":"Atualizar para Vers\u00e3o Espec\u00edfica","text":"<pre><code>sloth-runner agent update &lt;agent-name&gt; --version &lt;version&gt;\n</code></pre> <p>Exemplo: <pre><code>sloth-runner agent update lady-arch --version v4.18.3\n</code></pre></p>"},{"location":"features/agent-update/#forcar-atualizacao","title":"For\u00e7ar Atualiza\u00e7\u00e3o","text":"<p>For\u00e7a a atualiza\u00e7\u00e3o mesmo se j\u00e1 estiver na vers\u00e3o mais recente:</p> <pre><code>sloth-runner agent update &lt;agent-name&gt; --force\n</code></pre>"},{"location":"features/agent-update/#pular-reinicio-automatico","title":"Pular Rein\u00edcio Autom\u00e1tico","text":"<p>Atualiza mas n\u00e3o reinicia o agente automaticamente:</p> <pre><code>sloth-runner agent update &lt;agent-name&gt; --skip-restart\n</code></pre>"},{"location":"features/agent-update/#opcoes-de-comando","title":"Op\u00e7\u00f5es de Comando","text":"Flag Descri\u00e7\u00e3o <code>--force</code> For\u00e7a atualiza\u00e7\u00e3o mesmo se j\u00e1 estiver na \u00faltima vers\u00e3o <code>--version string</code> Vers\u00e3o espec\u00edfica para instalar (padr\u00e3o: latest) <code>--skip-restart</code> Pula rein\u00edcio autom\u00e1tico do servi\u00e7o"},{"location":"features/agent-update/#fluxo-de-atualizacao-detalhado","title":"Fluxo de Atualiza\u00e7\u00e3o Detalhado","text":""},{"location":"features/agent-update/#1-conexao-grpc","title":"1. Conex\u00e3o gRPC","text":"<p>O master se conecta ao agente via gRPC obtendo o endere\u00e7o do master registry:</p> <pre><code>Connecting to agent 'lady-arch'...\nSending update command to agent at 192.168.1.16:50052...\n</code></pre>"},{"location":"features/agent-update/#2-verificacao-de-versao","title":"2. Verifica\u00e7\u00e3o de Vers\u00e3o","text":"<p>O agente verifica a vers\u00e3o atual e compara com o GitHub:</p> <pre><code>Current version: v4.18.3\nLatest version: v4.18.4\n</code></pre> <p>Se j\u00e1 estiver atualizado (sem <code>--force</code>), retorna imediatamente.</p>"},{"location":"features/agent-update/#3-download-do-binario","title":"3. Download do Bin\u00e1rio","text":"<p>O agente determina a arquitetura e baixa o bin\u00e1rio apropriado:</p> <ul> <li>Linux ARM64: <code>sloth-runner_v4.18.4_linux_arm64.tar.gz</code></li> <li>Linux AMD64: <code>sloth-runner_v4.18.4_linux_amd64.tar.gz</code></li> <li>Darwin ARM64: <code>sloth-runner_v4.18.4_darwin_arm64.tar.gz</code></li> </ul>"},{"location":"features/agent-update/#4-criacao-do-script-de-atualizacao","title":"4. Cria\u00e7\u00e3o do Script de Atualiza\u00e7\u00e3o","text":"<p>O agente cria <code>/tmp/agent-update.sh</code>:</p> <pre><code>#!/bin/bash\n# Wait for agent to stop\nsleep 2\n\n# Replace binary\ncp /usr/local/bin/sloth-runner /usr/local/bin/sloth-runner.backup\nmv /tmp/sloth-runner-new /usr/local/bin/sloth-runner\nchmod +x /usr/local/bin/sloth-runner\n\n# Restart service or agent\nif systemctl is-active --quiet sloth-runner-agent 2&gt;/dev/null; then\n    systemctl restart sloth-runner-agent\nelif systemctl is-active --quiet sloth-agent 2&gt;/dev/null; then\n    systemctl restart sloth-agent\nelse\n    # Restart via nohup if no systemd service\n    cd /home/igor &amp;&amp; nohup /usr/local/bin/sloth-runner agent start \\\n        --name lady-arch \\\n        --master 192.168.1.29:50053 \\\n        --port 50051 \\\n        --bind-address 0.0.0.0 \\\n        --report-address 192.168.1.16:50052 \\\n        --telemetry \\\n        --metrics-port 9090 &gt; agent.log 2&gt;&amp;1 &amp;\nfi\n\n# Cleanup\nrm -f /tmp/sloth-runner-new /usr/local/bin/sloth-runner.backup /tmp/agent-update.sh\n</code></pre>"},{"location":"features/agent-update/#5-shutdown-programado","title":"5. Shutdown Programado","text":"<ol> <li>Agente responde sucesso ao master</li> <li>Ap\u00f3s 3 segundos, agente faz shutdown (<code>os.Exit(0)</code>)</li> <li>Script de atualiza\u00e7\u00e3o executa em background</li> <li>Bin\u00e1rio \u00e9 substitu\u00eddo</li> <li>Agente reinicia automaticamente</li> </ol>"},{"location":"features/agent-update/#exemplos-praticos","title":"Exemplos Pr\u00e1ticos","text":""},{"location":"features/agent-update/#exemplo-1-atualizacao-simples","title":"Exemplo 1: Atualiza\u00e7\u00e3o Simples","text":"<pre><code>$ sloth-runner agent update lady-arch\nConnecting to agent 'lady-arch'...\nSending update command to agent at 192.168.1.16:50052...\n\u2713 Agent 'lady-arch' updated successfully\n\nOld version: v4.18.3\nNew version: v4.18.4\nAgent update prepared. Shutting down for binary replacement and restart.\n</code></pre>"},{"location":"features/agent-update/#exemplo-2-ja-atualizado","title":"Exemplo 2: J\u00e1 Atualizado","text":"<pre><code>$ sloth-runner agent update lady-arch\nConnecting to agent 'lady-arch'...\nSending update command to agent at 192.168.1.16:50052...\n\u2713 Agent 'lady-arch' updated successfully\n\nOld version: v4.18.4\nNew version: v4.18.4\nAlready running the latest version\n</code></pre>"},{"location":"features/agent-update/#exemplo-3-versao-especifica","title":"Exemplo 3: Vers\u00e3o Espec\u00edfica","text":"<pre><code>$ sloth-runner agent update lady-arch --version v4.18.2\nConnecting to agent 'lady-arch'...\nSending update command to agent at 192.168.1.16:50052...\n\u2713 Agent 'lady-arch' updated successfully\n\nOld version: v4.18.4\nNew version: v4.18.2\nAgent update prepared. Shutting down for binary replacement and restart.\n</code></pre>"},{"location":"features/agent-update/#integracao-com-cicd","title":"Integra\u00e7\u00e3o com CI/CD","text":""},{"location":"features/agent-update/#github-actions","title":"GitHub Actions","text":"<p>O workflow de release atualiza automaticamente os agentes:</p> <pre><code>name: Release\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  release:\n    name: Release\n    runs-on: ubuntu-latest\n    steps:\n      - name: Run GoReleaser\n        uses: goreleaser/goreleaser-action@v5\n        with:\n          args: release --clean\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Update agent lady-arch\n        run: |\n          sloth-runner agent update lady-arch\n</code></pre>"},{"location":"features/agent-update/#script-de-atualizacao-em-lote","title":"Script de Atualiza\u00e7\u00e3o em Lote","text":"<pre><code>#!/bin/bash\n# update-all-agents.sh\n\nAGENTS=(\"lady-arch\" \"keite-guica\" \"prod-server-01\")\n\nfor agent in \"${AGENTS[@]}\"; do\n    echo \"Updating agent: $agent\"\n    sloth-runner agent update \"$agent\" || echo \"Failed to update $agent\"\n\n    # Aguarda 30 segundos antes do pr\u00f3ximo\n    sleep 30\ndone\n</code></pre>"},{"location":"features/agent-update/#atualizacao-programada-com-cron","title":"Atualiza\u00e7\u00e3o Programada com Cron","text":"<pre><code># crontab -e\n# Atualiza agentes todas as segundas \u00e0s 03:00\n0 3 * * 1 /usr/local/bin/sloth-runner agent update lady-arch &gt;&gt; /var/log/agent-update.log 2&gt;&amp;1\n</code></pre>"},{"location":"features/agent-update/#requisitos","title":"Requisitos","text":""},{"location":"features/agent-update/#no-master","title":"No Master","text":"<ul> <li>\u2705 Conex\u00e3o com o master registry</li> <li>\u2705 Acesso ao agente via gRPC</li> <li>\u2705 Rede acess\u00edvel ao GitHub (para verificar vers\u00f5es)</li> </ul>"},{"location":"features/agent-update/#no-agente","title":"No Agente","text":"<ul> <li>\u2705 Conex\u00e3o com GitHub para download</li> <li>\u2705 Permiss\u00f5es para substituir <code>/usr/local/bin/sloth-runner</code></li> <li>\u2705 Espa\u00e7o em disco em <code>/tmp</code> e <code>/usr/local/bin</code></li> <li>\u2705 Bash dispon\u00edvel para executar script de update</li> </ul>"},{"location":"features/agent-update/#seguranca","title":"Seguran\u00e7a","text":""},{"location":"features/agent-update/#comunicacao","title":"Comunica\u00e7\u00e3o","text":"<ul> <li>\u2705 gRPC entre master e agente</li> <li>\u2705 HTTPS para downloads do GitHub</li> <li>\u2705 Apenas de <code>https://github.com/chalkan3-sloth/sloth-runner/releases</code></li> </ul>"},{"location":"features/agent-update/#backup-automatico","title":"Backup Autom\u00e1tico","text":"<p>O script sempre cria backup antes de substituir:</p> <pre><code>/usr/local/bin/sloth-runner.backup\n</code></pre>"},{"location":"features/agent-update/#rollback-manual","title":"Rollback Manual","text":"<p>Se a atualiza\u00e7\u00e3o falhar, restaure o backup:</p> <pre><code>sudo mv /usr/local/bin/sloth-runner.backup /usr/local/bin/sloth-runner\nsudo systemctl restart sloth-runner-agent\n</code></pre>"},{"location":"features/agent-update/#troubleshooting","title":"Troubleshooting","text":""},{"location":"features/agent-update/#agente-nao-reconecta","title":"Agente N\u00e3o Reconecta","text":"<p>Problema: Agente n\u00e3o aparece ap\u00f3s atualiza\u00e7\u00e3o.</p> <p>Solu\u00e7\u00e3o: Verifique logs e reinicie manualmente:</p> <pre><code># Via systemd\nsudo systemctl status sloth-runner-agent\nsudo systemctl start sloth-runner-agent\n\n# Logs\nsudo journalctl -u sloth-runner-agent -f\n\n# Manualmente (se sem systemd)\ncd /home/igor\nnohup /usr/local/bin/sloth-runner agent start \\\n    --name lady-arch \\\n    --master 192.168.1.29:50053 \\\n    --port 50051 \\\n    --bind-address 0.0.0.0 \\\n    --report-address 192.168.1.16:50052 \\\n    &gt; agent.log 2&gt;&amp;1 &amp;\n</code></pre>"},{"location":"features/agent-update/#erro-de-conexao-grpc","title":"Erro de Conex\u00e3o gRPC","text":"<p>Problema: <code>ERROR Failed to connect to agent: context deadline exceeded</code></p> <p>Solu\u00e7\u00e3o: Verifique conectividade:</p> <pre><code># Verificar porta gRPC\nnc -zv 192.168.1.16 50052\n\n# Verificar se agente est\u00e1 rodando\nsloth-runner agent list\n</code></pre>"},{"location":"features/agent-update/#timeout-no-download","title":"Timeout no Download","text":"<p>Problema: Download do GitHub demora muito ou falha.</p> <p>Solu\u00e7\u00e3o:</p> <pre><code># Verificar acesso ao GitHub do agente\nssh agent-host \"curl -I https://github.com\"\n\n# Download manual e upload\nwget https://github.com/chalkan3-sloth/sloth-runner/releases/download/v4.18.4/sloth-runner_v4.18.4_linux_arm64.tar.gz\nscp sloth-runner_v4.18.4_linux_arm64.tar.gz agent-host:/tmp/\n</code></pre>"},{"location":"features/agent-update/#permissoes-insuficientes","title":"Permiss\u00f5es Insuficientes","text":"<p>Problema: <code>permission denied</code> ao substituir bin\u00e1rio</p> <p>Solu\u00e7\u00e3o: Verifique permiss\u00f5es:</p> <pre><code># Verificar propriet\u00e1rio e permiss\u00f5es\nls -la /usr/local/bin/sloth-runner\n\n# Corrigir se necess\u00e1rio\nsudo chown root:root /usr/local/bin/sloth-runner\nsudo chmod 755 /usr/local/bin/sloth-runner\n</code></pre>"},{"location":"features/agent-update/#binario-ocupado","title":"Bin\u00e1rio Ocupado","text":"<p>Problema: <code>text file busy</code> ao substituir</p> <p>Solu\u00e7\u00e3o: O script aguarda o shutdown. Se persistir:</p> <pre><code># Matar processo manualmente\nsudo pkill -9 sloth-runner\n\n# Substituir bin\u00e1rio\nsudo mv /tmp/sloth-runner-new /usr/local/bin/sloth-runner\nsudo chmod +x /usr/local/bin/sloth-runner\n\n# Reiniciar\nsudo systemctl start sloth-runner-agent\n</code></pre>"},{"location":"features/agent-update/#melhores-praticas","title":"Melhores Pr\u00e1ticas","text":""},{"location":"features/agent-update/#1-teste-primeiro","title":"1. Teste Primeiro","text":"<ul> <li>Atualize agentes de desenvolvimento/staging primeiro</li> <li>Verifique funcionamento antes de produ\u00e7\u00e3o</li> <li>Teste com <code>--skip-restart</code> se necess\u00e1rio</li> </ul>"},{"location":"features/agent-update/#2-monitore-apos-update","title":"2. Monitore Ap\u00f3s Update","text":"<pre><code># Verificar status\nsloth-runner agent list\n\n# Ver logs do agente\nssh agent-host \"tail -f /path/to/agent.log\"\n\n# Testar execu\u00e7\u00e3o de task\nsloth-runner run test-task --delegate-to agent-name\n</code></pre>"},{"location":"features/agent-update/#3-mantenha-backups","title":"3. Mantenha Backups","text":"<ul> <li>Backups s\u00e3o criados automaticamente em <code>.backup</code></li> <li>Mantenha c\u00f3pias dos bin\u00e1rios importantes</li> <li>Documente configura\u00e7\u00f5es customizadas</li> </ul>"},{"location":"features/agent-update/#4-atualizacoes-programadas","title":"4. Atualiza\u00e7\u00f5es Programadas","text":"<ul> <li>Use janelas de manuten\u00e7\u00e3o</li> <li>Atualize em lotes para grandes deploys</li> <li>Configure alertas para falhas</li> </ul>"},{"location":"features/agent-update/#diferencas-da-versao-anterior","title":"Diferen\u00e7as da Vers\u00e3o Anterior","text":""},{"location":"features/agent-update/#antes-ssh","title":"Antes (SSH)","text":"<p>\u274c Requeria acesso SSH ao host \u274c Executava comandos remotamente via SSH \u274c Dependia de chaves SSH configuradas \u274c Mais complexo para troubleshooting</p>"},{"location":"features/agent-update/#agora-grpc","title":"Agora (gRPC)","text":"<p>\u2705 Usa canal gRPC existente \u2705 Agente executa update localmente \u2705 Sem depend\u00eancia de SSH \u2705 Mais simples e confi\u00e1vel</p>"},{"location":"features/agent-update/#referencias","title":"Refer\u00eancias","text":"<ul> <li>Agent Setup - Como configurar agentes</li> <li>Distributed Agents - Arquitetura distribu\u00edda</li> <li>GitHub Releases - Vers\u00f5es dispon\u00edveis</li> <li>gRPC Protocol - Sobre gRPC</li> </ul>"},{"location":"features/global-modules/","title":"\ud83c\udf0d Global Modules - No require() Needed!","text":"<p>Starting from the latest version of Sloth Runner, all native infrastructure modules are available globally without needing to call <code>require()</code>.</p>"},{"location":"features/global-modules/#what-changed","title":"\u2728 What Changed?","text":""},{"location":"features/global-modules/#before-old-way","title":"\u274c Before (Old Way)","text":"<pre><code>-- Had to require every module\nlocal pkg = require(\"pkg\")\nlocal user = require(\"user\")\nlocal systemd = require(\"systemd\")\nlocal file_ops = require(\"file_ops\")\n\ntask(\"setup\")\n    :command(function()\n        pkg.install({ name = \"nginx\" })\n        user.create({ name = \"webapp\" })\n        systemd.enable(\"nginx\")\n    end)\n    :build()\n</code></pre>"},{"location":"features/global-modules/#after-new-way-recommended","title":"\u2705 After (New Way - Recommended)","text":"<pre><code>-- All native modules available globally!\ntask(\"setup\")\n    :command(function()\n        pkg.install({ name = \"nginx\" })\n        user.create({ name = \"webapp\" })\n        systemd.enable(\"nginx\")\n        file_ops.copy({\n            src = \"nginx.conf\",\n            dest = \"/etc/nginx/nginx.conf\"\n        })\n    end)\n    :build()\n</code></pre>"},{"location":"features/global-modules/#available-global-modules","title":"\ud83d\udce6 Available Global Modules","text":"<p>All these modules are automatically available in your Sloth scripts:</p> Module Description <code>pkg</code> Package management (apt, yum, pacman, etc.) <code>user</code> User and group management <code>ssh</code> SSH connections and file transfers <code>file_ops</code> File operations (Ansible-like) <code>systemd</code> Systemd service management <code>state</code> Persistent state management <code>terraform</code> Terraform infrastructure <code>pulumi</code> Pulumi infrastructure <code>kubernetes</code> Kubernetes operations <code>helm</code> Helm chart management <code>salt</code> Salt Stack integration <code>infra_test</code> Infrastructure testing"},{"location":"features/global-modules/#best-practices","title":"\ud83c\udfaf Best Practices","text":""},{"location":"features/global-modules/#do-use-global-modules-directly","title":"\u2705 DO: Use Global Modules Directly","text":"<pre><code>task(\"deploy_app\")\n    :command(function()\n        -- Clean and simple!\n        pkg.install({ name = \"nginx\" })\n        systemd.enable(\"nginx\")\n        systemd.start(\"nginx\")\n\n        -- Test the deployment\n        infra_test.service_is_running(\"nginx\")\n        infra_test.port_is_listening(80)\n    end)\n    :build()\n</code></pre>"},{"location":"features/global-modules/#do-combine-with-delegate_to","title":"\u2705 DO: Combine with :delegate_to()","text":"<pre><code>task(\"deploy_remote\")\n    :delegate_to(\"prod-server-01\")\n    :command(function()\n        -- All modules work remotely too!\n        pkg.update()\n        pkg.install({ name = \"postgresql\" })\n        systemd.enable(\"postgresql\")\n    end)\n    :build()\n</code></pre>"},{"location":"features/global-modules/#still-need-require-non-infrastructure-modules","title":"\u26a0\ufe0f STILL NEED require(): Non-Infrastructure Modules","text":"<p>Some modules still require <code>require()</code> because they're not infrastructure-focused:</p> <pre><code>task(\"complex_workflow\")\n    :command(function()\n        -- These STILL need require()\n        local git = require(\"git\")\n        local http = require(\"http\")\n        local data = require(\"data\")\n        local crypto = require(\"crypto\")\n\n        -- But native modules don't!\n        pkg.install({ name = \"git\" })\n        user.create({ name = \"developer\" })\n\n        -- Mix and match as needed\n        git.clone(\"https://github.com/user/repo\", \"/tmp/repo\")\n    end)\n    :build()\n</code></pre> <p>Modules that still need <code>require()</code>: - <code>git</code> - Git operations - <code>http</code> - HTTP requests - <code>data</code> - Data transformation - <code>crypto</code> - Cryptography - <code>math</code> - Advanced math - <code>strings</code> - String manipulation - <code>time</code> - Time operations - <code>observability</code> - Monitoring - <code>security</code> - Security operations</p>"},{"location":"features/global-modules/#migration-guide","title":"\ud83d\udd04 Migration Guide","text":"<p>If you have existing scripts with <code>require()</code> calls for native modules, they will still work! The old way is backwards compatible.</p>"},{"location":"features/global-modules/#example-migration","title":"Example Migration","text":"<p>Old Script (Still Works): <pre><code>local pkg = require(\"pkg\")\nlocal systemd = require(\"systemd\")\n\ntask(\"install_nginx\")\n    :command(function()\n        pkg.install({ name = \"nginx\" })\n        systemd.start(\"nginx\")\n    end)\n    :build()\n</code></pre></p> <p>New Script (Recommended): <pre><code>-- Just remove the require() lines!\ntask(\"install_nginx\")\n    :command(function()\n        pkg.install({ name = \"nginx\" })\n        systemd.start(\"nginx\")\n    end)\n    :build()\n</code></pre></p>"},{"location":"features/global-modules/#benefits","title":"\ud83c\udfa8 Benefits","text":"<ol> <li>Less Boilerplate: No need to require common modules</li> <li>Cleaner Code: Focus on what you're doing, not imports</li> <li>Better DX: Faster to write infrastructure automation</li> <li>Backwards Compatible: Old scripts keep working</li> <li>Consistent: All native modules follow the same pattern</li> </ol>"},{"location":"features/global-modules/#complete-example","title":"\ud83d\udcda Complete Example","text":""},{"location":"features/global-modules/#complete-server-setup","title":"Complete Server Setup","text":"<pre><code>task(\"setup_web_server\")\n    :description(\"Complete web server setup\")\n    :delegate_to(\"web-01\")\n    :command(function()\n        -- Update system\n        pkg.update()\n\n        -- Install packages\n        pkg.install({\n            name = \"nginx\",\n            version = \"latest\"\n        })\n        pkg.install({ name = \"certbot\" })\n\n        -- Create user\n        user.create({\n            name = \"webapp\",\n            home = \"/var/www\",\n            shell = \"/bin/bash\",\n            groups = {\"www-data\"}\n        })\n\n        -- Copy config\n        file_ops.template({\n            src = \"templates/nginx.conf.j2\",\n            dest = \"/etc/nginx/nginx.conf\",\n            vars = {\n                server_name = \"example.com\",\n                port = 80\n            },\n            mode = 0o644\n        })\n\n        -- Start service\n        systemd.enable(\"nginx\")\n        systemd.start(\"nginx\")\n\n        -- Validate\n        infra_test.service_is_running(\"nginx\")\n        infra_test.port_is_listening(80)\n        infra_test.file_exists(\"/etc/nginx/nginx.conf\")\n\n        log.info(\"\u2705 Web server setup complete!\")\n        return true\n    end)\n    :build()\n</code></pre>"},{"location":"features/global-modules/#related-documentation","title":"\ud83d\udd17 Related Documentation","text":"<ul> <li>Package Manager Module</li> <li>User Management Module</li> <li>Systemd Module</li> <li>File Operations Module</li> <li>SSH Module</li> <li>Infrastructure Testing Module</li> <li>Modern DSL Guide</li> </ul>"},{"location":"features/multi-host-execution/","title":"\ud83c\udf10 Multi-Host Execution","text":""},{"location":"features/multi-host-execution/#overview","title":"Overview","text":"<p>Sloth Runner now supports parallel execution of tasks on multiple remote hosts simultaneously. This powerful feature enables you to:</p> <ul> <li>Deploy applications to multiple servers in parallel</li> <li>Run maintenance tasks across your entire infrastructure</li> <li>Collect system information from multiple hosts at once</li> <li>Execute health checks on distributed systems</li> <li>Perform rolling updates with parallel execution</li> </ul>"},{"location":"features/multi-host-execution/#how-it-works","title":"How It Works","text":"<p>The multi-host execution feature uses parallel gRPC connections to execute tasks on multiple agents simultaneously. Each host receives the same task definition and executes it independently, with results collected and displayed in a unified summary.</p>"},{"location":"features/multi-host-execution/#architecture","title":"Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Sloth Runner\u2502\n\u2502   (Master)  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n      \u2502 Parallel Execution\n      \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n      \u2502                 \u2502\n      \u25bc                 \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Agent 1 \u2502      \u2502  Agent 2 \u2502\n\u2502lady-arch \u2502      \u2502keite-guica\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"features/multi-host-execution/#usage-methods","title":"Usage Methods","text":""},{"location":"features/multi-host-execution/#method-1-command-line-override","title":"Method 1: Command Line Override","text":"<p>Use multiple <code>--delegate-to</code> flags when running your task:</p> <pre><code>sloth-runner run -f deploy.sloth --delegate-to host1 --delegate-to host2 --delegate-to host3\n</code></pre> <p>Example: <pre><code>sloth-runner run -f examples/test_multi_host.sloth --delegate-to lady-arch --delegate-to keite-guica\n</code></pre></p>"},{"location":"features/multi-host-execution/#method-2-file-based-configuration","title":"Method 2: File-Based Configuration","text":"<p>Define multiple hosts in your <code>.sloth</code> file:</p> <pre><code>workflow({\n    name = \"deployment\",\n    description = \"Deploy to multiple servers\",\n    delegate_to = {\"web-server-1\", \"web-server-2\", \"web-server-3\"},\n    tasks = {\n        {\n            name = \"deploy_app\",\n            description = \"Deploy application\",\n            run = function()\n                log.info(\"Deploying on \" .. exec.run(\"hostname\").output)\n                -- Your deployment logic here\n                return {changed = true, message = \"Deployment successful\"}\n            end\n        }\n    }\n})\n</code></pre>"},{"location":"features/multi-host-execution/#method-3-mixed-approach","title":"Method 3: Mixed Approach","text":"<p>You can override file-based configuration with CLI flags:</p> <pre><code>-- In file: delegate_to = \"production-server\"\n</code></pre> <pre><code># Override with multiple hosts at runtime\nsloth-runner run -f deploy.sloth --delegate-to staging-1 --delegate-to staging-2\n</code></pre>"},{"location":"features/multi-host-execution/#complete-examples","title":"Complete Examples","text":""},{"location":"features/multi-host-execution/#example-1-system-information-collection","title":"Example 1: System Information Collection","text":"<pre><code>-- file: system_check.sloth\nworkflow({\n    name = \"system_check\",\n    description = \"Collect system info from all hosts\",\n    tasks = {\n        {\n            name = \"collect_info\",\n            description = \"Get system information\",\n            run = function()\n                log.info(\"=== System Information ===\")\n\n                -- Hostname\n                local hostname = exec.run(\"hostname\")\n                if hostname.success then\n                    log.info(\"Host: \" .. hostname.output)\n                end\n\n                -- System info\n                local uname = exec.run(\"uname -a\")\n                if uname.success then\n                    log.info(\"System: \" .. uname.output)\n                end\n\n                -- CPU info\n                local cpu = exec.run(\"nproc\")\n                if cpu.success then\n                    log.info(\"CPUs: \" .. cpu.output)\n                end\n\n                -- Memory info\n                local mem = exec.run(\"free -h | grep Mem\")\n                if mem.success then\n                    log.info(\"Memory: \" .. mem.output)\n                end\n\n                -- Disk usage\n                local disk = exec.run(\"df -h /\")\n                if disk.success then\n                    log.info(\"Disk: \" .. disk.output)\n                end\n\n                return {changed = false, message = \"System info collected\"}\n            end\n        }\n    }\n})\n</code></pre> <p>Run on multiple hosts: <pre><code>sloth-runner run -f system_check.sloth --delegate-to server1 --delegate-to server2 --delegate-to server3\n</code></pre></p>"},{"location":"features/multi-host-execution/#example-2-application-deployment","title":"Example 2: Application Deployment","text":"<pre><code>-- file: deploy_app.sloth\nworkflow({\n    name = \"deploy_application\",\n    description = \"Deploy application to multiple servers\",\n    tasks = {\n        {\n            name = \"stop_service\",\n            description = \"Stop the application service\",\n            run = function()\n                log.info(\"Stopping service...\")\n                exec.run(\"systemctl stop myapp\")\n                return {changed = true, message = \"Service stopped\"}\n            end\n        },\n        {\n            name = \"update_code\",\n            description = \"Update application code\",\n            depends_on = {\"stop_service\"},\n            run = function()\n                log.info(\"Updating application...\")\n                exec.run(\"cd /opt/myapp &amp;&amp; git pull\")\n                exec.run(\"cd /opt/myapp &amp;&amp; npm install\")\n                return {changed = true, message = \"Code updated\"}\n            end\n        },\n        {\n            name = \"start_service\",\n            description = \"Start the application service\",\n            depends_on = {\"update_code\"},\n            run = function()\n                log.info(\"Starting service...\")\n                exec.run(\"systemctl start myapp\")\n\n                -- Verify service is running\n                local status = exec.run(\"systemctl is-active myapp\")\n                if status.output:match(\"active\") then\n                    log.info(\"Service started successfully\")\n                    return {changed = true, message = \"Service running\"}\n                else\n                    return {failed = true, message = \"Service failed to start\"}\n                end\n            end\n        }\n    }\n})\n</code></pre> <p>Deploy to production servers: <pre><code>sloth-runner run -f deploy_app.sloth \\\n    --delegate-to prod-web-1 \\\n    --delegate-to prod-web-2 \\\n    --delegate-to prod-web-3\n</code></pre></p>"},{"location":"features/multi-host-execution/#example-3-health-checks","title":"Example 3: Health Checks","text":"<pre><code>-- file: health_check.sloth\nworkflow({\n    name = \"health_check\",\n    description = \"Run health checks on all nodes\",\n    tasks = {\n        {\n            name = \"check_services\",\n            description = \"Check critical services\",\n            run = function()\n                local all_ok = true\n                local services = {\"nginx\", \"postgresql\", \"redis\", \"myapp\"}\n\n                for _, service in ipairs(services) do\n                    local status = exec.run(\"systemctl is-active \" .. service)\n                    if status.output:match(\"active\") then\n                        log.info(\"\u2705 \" .. service .. \" is running\")\n                    else\n                        log.error(\"\u274c \" .. service .. \" is not running\")\n                        all_ok = false\n                    end\n                end\n\n                -- Check disk space\n                local disk = exec.run(\"df -h / | awk 'NR==2 {print $5}' | sed 's/%//'\")\n                local usage = tonumber(disk.output)\n                if usage &gt; 80 then\n                    log.warn(\"\u26a0\ufe0f Disk usage is high: \" .. usage .. \"%\")\n                else\n                    log.info(\"\u2705 Disk usage is normal: \" .. usage .. \"%\")\n                end\n\n                -- Check load average\n                local load = exec.run(\"uptime | awk -F'load average:' '{print $2}'\")\n                log.info(\"Load average: \" .. load.output)\n\n                if all_ok then\n                    return {changed = false, message = \"All checks passed\"}\n                else\n                    return {failed = true, message = \"Some checks failed\"}\n                end\n            end\n        }\n    }\n})\n</code></pre>"},{"location":"features/multi-host-execution/#execution-output","title":"Execution Output","text":"<p>When running tasks on multiple hosts, you'll see a comprehensive execution summary:</p> <pre><code>\ud83d\ude80 Executing task 'system_info' on 3 hosts\n\nHost         | Status\n-------------|------------\nweb-server-1 | \u23f3 Pending\nweb-server-2 | \u23f3 Pending\nweb-server-3 | \u23f3 Pending\n\n\ud83d\udd17 Connecting to 192.168.1.10:50051...\n\ud83d\udd17 Connecting to 192.168.1.11:50051...\n\ud83d\udd17 Connecting to 192.168.1.12:50051...\n\n\u2705 Success on 192.168.1.10:50051\n\u2705 Success on 192.168.1.11:50051\n\u2705 Success on 192.168.1.12:50051\n\n\ud83d\udcca Multi-Host Execution Results\n\nHost         | Status     | Details\n-------------|------------|------------------------\nweb-server-1 | \u2705 Success | Completed successfully\nweb-server-2 | \u2705 Success | Completed successfully\nweb-server-3 | \u2705 Success | Completed successfully\n\n\u250c\u2500 \u2705 Execution Summary \u2500\u2510\n\u2502 Task:      system_info \u2502\n\u2502 Total:     3 hosts     \u2502\n\u2502 Success:   3           \u2502\n\u2502 Failed:    0           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"features/multi-host-execution/#agent-configuration","title":"Agent Configuration","text":"<p>Before using multi-host execution, ensure your agents are properly configured and running:</p>"},{"location":"features/multi-host-execution/#1-start-agents-on-remote-hosts","title":"1. Start Agents on Remote Hosts","text":"<p>On each remote host: <pre><code>sloth-runner agent start &lt;agent-name&gt; --port &lt;port&gt;\n</code></pre></p>"},{"location":"features/multi-host-execution/#2-register-agents","title":"2. Register Agents","text":"<p>Agents should be registered with the master: <pre><code>sloth-runner agent list\n</code></pre></p> <p>Output: <pre><code>AGENT NAME     ADDRESS              STATUS\n----------     -------              ------\nlady-arch      192.168.1.16:50052   Active\nkeite-guica    192.168.1.17:50051   Active\nlady-guica     192.168.1.16:50051   Active\n</code></pre></p>"},{"location":"features/multi-host-execution/#3-use-agent-names-or-addresses","title":"3. Use Agent Names or Addresses","text":"<p>You can use either agent names or direct addresses:</p> <pre><code># Using agent names\nsloth-runner run -f task.sloth --delegate-to lady-arch --delegate-to keite-guica\n\n# Using addresses\nsloth-runner run -f task.sloth --delegate-to 192.168.1.16:50052 --delegate-to 192.168.1.17:50051\n</code></pre>"},{"location":"features/multi-host-execution/#advanced-features","title":"Advanced Features","text":""},{"location":"features/multi-host-execution/#conditional-execution","title":"Conditional Execution","text":"<p>Execute on different hosts based on conditions:</p> <pre><code>workflow({\n    name = \"conditional_deploy\",\n    description = \"Conditional deployment\",\n    tasks = {\n        {\n            name = \"deploy\",\n            run = function()\n                local hostname = exec.run(\"hostname\").output:gsub(\"\\n\", \"\")\n\n                if hostname:match(\"prod\") then\n                    log.info(\"Production deployment\")\n                    -- Production specific logic\n                elseif hostname:match(\"staging\") then\n                    log.info(\"Staging deployment\")\n                    -- Staging specific logic\n                else\n                    log.info(\"Development deployment\")\n                    -- Development specific logic\n                end\n\n                return {changed = true, message = \"Deployment completed for \" .. hostname}\n            end\n        }\n    }\n})\n</code></pre>"},{"location":"features/multi-host-execution/#rolling-updates","title":"Rolling Updates","text":"<p>Combine with dependencies for rolling updates:</p> <pre><code>workflow({\n    name = \"rolling_update\",\n    description = \"Rolling update across hosts\",\n    tasks = {\n        {\n            name = \"update_batch_1\",\n            delegate_to = {\"server1\", \"server2\"},\n            run = function()\n                -- Update first batch\n                return {changed = true, message = \"Batch 1 updated\"}\n            end\n        },\n        {\n            name = \"verify_batch_1\",\n            depends_on = {\"update_batch_1\"},\n            delegate_to = {\"server1\", \"server2\"},\n            run = function()\n                -- Verify first batch\n                return {changed = false, message = \"Batch 1 verified\"}\n            end\n        },\n        {\n            name = \"update_batch_2\",\n            depends_on = {\"verify_batch_1\"},\n            delegate_to = {\"server3\", \"server4\"},\n            run = function()\n                -- Update second batch\n                return {changed = true, message = \"Batch 2 updated\"}\n            end\n        }\n    }\n})\n</code></pre>"},{"location":"features/multi-host-execution/#best-practices","title":"Best Practices","text":""},{"location":"features/multi-host-execution/#1-use-meaningful-host-names","title":"1. Use Meaningful Host Names","text":"<p>Instead of IP addresses, use descriptive agent names: <pre><code>sloth-runner agent start web-prod-1\nsloth-runner agent start db-prod-1\nsloth-runner agent start cache-prod-1\n</code></pre></p>"},{"location":"features/multi-host-execution/#2-group-related-hosts","title":"2. Group Related Hosts","text":"<p>Create task definitions for specific host groups: <pre><code>-- Web servers\nweb_servers = {\"web-1\", \"web-2\", \"web-3\"}\n\n-- Database servers\ndb_servers = {\"db-primary\", \"db-replica-1\", \"db-replica-2\"}\n\n-- Cache servers\ncache_servers = {\"redis-1\", \"redis-2\"}\n</code></pre></p>"},{"location":"features/multi-host-execution/#3-error-handling","title":"3. Error Handling","text":"<p>Always check for host-specific failures: <pre><code>run = function()\n    local result = exec.run(\"critical-command\")\n    if not result.success then\n        log.error(\"Failed on \" .. exec.run(\"hostname\").output)\n        return {failed = true, message = result.stderr}\n    end\n    return {changed = true, message = \"Success\"}\nend\n</code></pre></p>"},{"location":"features/multi-host-execution/#4-idempotency","title":"4. Idempotency","text":"<p>Ensure tasks are idempotent for safe re-execution: <pre><code>run = function()\n    -- Check if already done\n    local check = exec.run(\"test -f /opt/myapp/.deployed\")\n    if check.success then\n        log.info(\"Already deployed, skipping\")\n        return {changed = false, message = \"Already deployed\"}\n    end\n\n    -- Perform deployment\n    exec.run(\"deploy-application\")\n    exec.run(\"touch /opt/myapp/.deployed\")\n\n    return {changed = true, message = \"Newly deployed\"}\nend\n</code></pre></p>"},{"location":"features/multi-host-execution/#troubleshooting","title":"Troubleshooting","text":""},{"location":"features/multi-host-execution/#issue-agent-not-found","title":"Issue: Agent Not Found","text":"<p>Error: <pre><code>Failed to resolve agent 'host-name': agent not found\n</code></pre></p> <p>Solution: 1. Check agent is running: <code>sloth-runner agent list</code> 2. Verify agent name spelling 3. Ensure agent is registered with master</p>"},{"location":"features/multi-host-execution/#issue-connection-failed","title":"Issue: Connection Failed","text":"<p>Error: <pre><code>Failed to connect to 192.168.1.10:50051\n</code></pre></p> <p>Solution: 1. Check network connectivity 2. Verify firewall rules allow gRPC port 3. Ensure agent is listening on correct port</p>"},{"location":"features/multi-host-execution/#issue-partial-failures","title":"Issue: Partial Failures","text":"<p>Behavior: Some hosts succeed, others fail</p> <p>Solution: 1. Check individual host logs 2. Verify all hosts have required dependencies 3. Ensure consistent environment across hosts</p>"},{"location":"features/multi-host-execution/#performance-considerations","title":"Performance Considerations","text":""},{"location":"features/multi-host-execution/#parallel-execution","title":"Parallel Execution","text":"<ul> <li>All hosts execute simultaneously</li> <li>No performance penalty for multiple hosts</li> <li>Results collected asynchronously</li> </ul>"},{"location":"features/multi-host-execution/#resource-usage","title":"Resource Usage","text":"<ul> <li>Each host connection uses minimal memory</li> <li>Network bandwidth scales linearly with hosts</li> <li>Master node coordinates without bottlenecks</li> </ul>"},{"location":"features/multi-host-execution/#scaling-limits","title":"Scaling Limits","text":"<ul> <li>Tested with up to 100 simultaneous hosts</li> <li>Network latency may affect large deployments</li> <li>Consider batching for very large infrastructures</li> </ul>"},{"location":"features/multi-host-execution/#migration-guide","title":"Migration Guide","text":""},{"location":"features/multi-host-execution/#from-single-host-to-multi-host","title":"From Single Host to Multi-Host","text":"<p>Before: <pre><code>delegate_to = \"production-server\"\n</code></pre></p> <p>After (Option 1 - CLI Override): <pre><code>sloth-runner run -f task.sloth \\\n    --delegate-to prod-1 \\\n    --delegate-to prod-2 \\\n    --delegate-to prod-3\n</code></pre></p> <p>After (Option 2 - File-Based): <pre><code>delegate_to = {\"prod-1\", \"prod-2\", \"prod-3\"}\n</code></pre></p>"},{"location":"features/multi-host-execution/#from-sequential-to-parallel","title":"From Sequential to Parallel","text":"<p>Before (Sequential): <pre><code>for host in server1 server2 server3; do\n    sloth-runner run -f task.sloth --delegate-to $host\ndone\n</code></pre></p> <p>After (Parallel): <pre><code>sloth-runner run -f task.sloth \\\n    --delegate-to server1 \\\n    --delegate-to server2 \\\n    --delegate-to server3\n</code></pre></p>"},{"location":"features/multi-host-execution/#summary","title":"Summary","text":"<p>The multi-host execution feature transforms Sloth Runner into a powerful orchestration tool for distributed systems. Key benefits include:</p> <ul> <li>Parallel execution - All hosts execute simultaneously</li> <li>Unified results - Single summary for all executions</li> <li>Flexible configuration - CLI or file-based host specification</li> <li>Production ready - Error handling and progress tracking</li> <li>Scalable - Handles large infrastructures efficiently</li> </ul> <p>Use multi-host execution whenever you need to: - Deploy to multiple servers - Collect information from distributed systems - Run maintenance tasks across infrastructure - Perform health checks on multiple nodes - Execute rolling updates or migrations</p>"},{"location":"features/sloth-management/","title":"\ud83e\udda5 Sloth Management - Saved Workflows","text":""},{"location":"features/sloth-management/#overview","title":"Overview","text":"<p>The Sloth Management System allows you to save <code>.sloth</code> workflow files in a SQLite database for easy reuse across your infrastructure. Instead of specifying file paths every time, you can reference workflows by name, making your automation more maintainable and consistent.</p>"},{"location":"features/sloth-management/#why-use-saved-sloths","title":"Why Use Saved Sloths?","text":""},{"location":"features/sloth-management/#benefits","title":"Benefits","text":"<ul> <li>\ud83c\udfaf Centralized Management: All workflows stored in one database</li> <li>\ud83d\udcdd Version Control: Track usage statistics and last execution times</li> <li>\ud83d\udd04 Reusability: Reference workflows by name instead of file path</li> <li>\ud83c\udf9a\ufe0f Control: Activate/deactivate workflows without deleting them</li> <li>\ud83d\udcca Analytics: Monitor which workflows are being used and how often</li> <li>\ud83d\udd10 Consistency: Ensure teams use the same approved workflows</li> </ul>"},{"location":"features/sloth-management/#use-cases","title":"Use Cases","text":"<ol> <li>Standard Operating Procedures: Store approved deployment workflows</li> <li>Multi-Environment Deployments: Reuse the same workflow across dev/staging/prod</li> <li>Team Collaboration: Share workflows across team members</li> <li>Compliance: Maintain auditable history of workflow executions</li> <li>CI/CD Integration: Reference workflows by name in pipelines</li> </ol>"},{"location":"features/sloth-management/#quick-start","title":"Quick Start","text":""},{"location":"features/sloth-management/#save-your-first-workflow","title":"Save Your First Workflow","text":"<pre><code># Create a workflow file\ncat &gt; my-deployment.sloth &lt;&lt; 'EOF'\nworkflow({\n    name = \"deploy_app\",\n    description = \"Deploy application to production\",\n    tasks = {\n        {\n            name = \"build\",\n            run = function()\n                print(\"Building application...\")\n                return {changed = true, message = \"Build completed\"}\n            end\n        },\n        {\n            name = \"deploy\",\n            depends_on = {\"build\"},\n            run = function()\n                print(\"Deploying to production...\")\n                return {changed = true, message = \"Deployment completed\"}\n            end\n        }\n    }\n})\nEOF\n\n# Save it to the sloth database\nsloth-runner sloth add prod-deploy \\\n    --file my-deployment.sloth \\\n    --description \"Production deployment workflow\"\n</code></pre>"},{"location":"features/sloth-management/#use-the-saved-workflow","title":"Use the Saved Workflow","text":"<pre><code># Run using the saved sloth\nsloth-runner run deploy --sloth prod-deploy --yes\n\n# The workflow will be loaded from the database automatically\n</code></pre>"},{"location":"features/sloth-management/#commands-reference","title":"Commands Reference","text":""},{"location":"features/sloth-management/#sloth-add-save-a-workflow","title":"<code>sloth add</code> - Save a Workflow","text":"<p>Add a new <code>.sloth</code> file to the database:</p> <pre><code>sloth-runner sloth add &lt;name&gt; --file &lt;path&gt; [options]\n</code></pre> <p>Arguments: - <code>&lt;name&gt;</code>: Unique identifier for the sloth (required)</p> <p>Flags: - <code>--file, -f &lt;path&gt;</code>: Path to the <code>.sloth</code> file (required) - <code>--description, -d &lt;text&gt;</code>: Description of what the workflow does - <code>--active</code>: Set as active (default: <code>true</code>)</p> <p>Examples:</p> <pre><code># Basic usage\nsloth-runner sloth add backup --file /path/to/backup.sloth\n\n# With description\nsloth-runner sloth add db-migration \\\n    --file migration.sloth \\\n    --description \"Database schema migration workflow\"\n\n# Save as inactive (won't be runnable until activated)\nsloth-runner sloth add experimental-deploy \\\n    --file deploy-v2.sloth \\\n    --active=false \\\n    --description \"Testing new deployment process\"\n</code></pre> <p>Output: <pre><code>\u2139 INFO  Name: prod-deploy\n\u2139 INFO  File: /path/to/my-deployment.sloth\n\u2139 INFO  Description: Production deployment workflow\n\u2139 INFO  Active: true\n\nAdding sloth 'prod-deploy'...\n\u2713 SUCCESS  Sloth 'prod-deploy' added successfully\n</code></pre></p>"},{"location":"features/sloth-management/#sloth-list-view-all-workflows","title":"<code>sloth list</code> - View All Workflows","text":"<p>List all saved sloths:</p> <pre><code>sloth-runner sloth list [--active]\n</code></pre> <p>Flags: - <code>--active, -a</code>: Show only active sloths</p> <p>Examples:</p> <pre><code># List all sloths\nsloth-runner sloth list\n\n# List only active sloths\nsloth-runner sloth list --active\n</code></pre> <p>Output: <pre><code>     All Sloths\n\nName           | Description                   | Active | Usage | Last Used       | Created\nprod-deploy    | Production deployment         | \u2713      | 42    | 2025-10-06 14:30| 2025-10-01\ndb-backup      | Daily database backup         | \u2713      | 120   | 2025-10-06 03:00| 2025-09-15\ntest-workflow  | Integration tests             | \u2713      | 15    | 2025-10-05 18:20| 2025-10-03\nold-deploy     | Legacy deployment (deprecated)|        | 5     | 2025-09-20 10:00| 2025-08-01\n</code></pre></p>"},{"location":"features/sloth-management/#sloth-get-view-workflow-details","title":"<code>sloth get</code> - View Workflow Details","text":"<p>Get detailed information about a specific sloth:</p> <pre><code>sloth-runner sloth get &lt;name&gt;\n</code></pre> <p>Examples:</p> <pre><code>sloth-runner sloth get prod-deploy\n</code></pre> <p>Output: <pre><code>     Sloth: prod-deploy\n\n\u2139 INFO  ID: a88f200f-274c-4b9b-8ccf-9eeff1984317\n\u2139 INFO  Name: prod-deploy\n\u2139 INFO  Description: Production deployment workflow\n\u2139 INFO  File Path: /path/to/my-deployment.sloth\n\u2139 INFO  Active: Yes\n\u2139 INFO  Created: 2025-10-01 09:00:00\n\u2139 INFO  Updated: 2025-10-01 09:00:00\n\u2139 INFO  Last Used: 2025-10-06 14:30:15\n\u2139 INFO  Usage Count: 42\n\u2139 INFO  File Hash: d966e74684f5b6a2883b902c041f528b848afc1aca440d35b5d91f59838c9f59\n</code></pre></p>"},{"location":"features/sloth-management/#sloth-remove-delete-a-workflow","title":"<code>sloth remove</code> - Delete a Workflow","text":"<p>Remove a sloth from the database:</p> <pre><code>sloth-runner sloth remove &lt;name&gt;\n# or\nsloth-runner sloth delete &lt;name&gt;\n</code></pre> <p>Examples:</p> <pre><code>sloth-runner sloth remove old-deploy\n</code></pre> <p>Interactive Confirmation: <pre><code>Are you sure you want to remove sloth 'old-deploy'? [y/N]: y\n\u2713 SUCCESS  Sloth 'old-deploy' removed successfully\n</code></pre></p>"},{"location":"features/sloth-management/#sloth-activate-sloth-deactivate-control-availability","title":"<code>sloth activate</code> / <code>sloth deactivate</code> - Control Availability","text":"<p>Control whether a sloth can be executed:</p> <pre><code>sloth-runner sloth activate &lt;name&gt;\nsloth-runner sloth deactivate &lt;name&gt;\n</code></pre> <p>Examples:</p> <pre><code># Deactivate a workflow (makes it non-runnable)\nsloth-runner sloth deactivate experimental-deploy\n\n# Activate it later when ready\nsloth-runner sloth activate experimental-deploy\n</code></pre> <p>Output: <pre><code>Deactivating sloth 'experimental-deploy'...\n\u26a0 WARNING  Sloth 'experimental-deploy' is now inactive\n</code></pre></p>"},{"location":"features/sloth-management/#integration-with-run-command","title":"Integration with <code>run</code> Command","text":"<p>The power of saved sloths comes from seamless integration with the <code>run</code> command.</p>"},{"location":"features/sloth-management/#using-sloth-flag","title":"Using <code>--sloth</code> Flag","text":"<pre><code>sloth-runner run &lt;task&gt; --sloth &lt;name&gt; [options]\n</code></pre> <p>Important: The <code>--sloth</code> flag takes precedence over <code>--file</code>. If both are specified, <code>--file</code> is ignored.</p> <p>Examples:</p> <pre><code># Run a task using saved sloth\nsloth-runner run deploy --sloth prod-deploy --yes\n\n# With delegation to remote agents\nsloth-runner run backup --sloth db-backup --delegate-to db-server --yes\n\n# With custom values file\nsloth-runner run deploy --sloth prod-deploy --values prod-values.yaml --yes\n</code></pre>"},{"location":"features/sloth-management/#how-it-works","title":"How It Works","text":"<p>When you use <code>--sloth</code>:</p> <ol> <li>\u2705 Sloth content is retrieved from the database</li> <li>\u2705 System checks if the sloth is active</li> <li>\u2705 Temporary <code>.sloth</code> file is created with the content</li> <li>\u2705 Workflow is executed using the temporary file</li> <li>\u2705 Usage counter is incremented</li> <li>\u2705 Last used timestamp is updated</li> <li>\u2705 Temporary file is cleaned up</li> </ol> <p>If sloth is inactive: <pre><code>$ sloth-runner run deploy --sloth old-deploy\nERROR execution failed\n\u2514 err: failed to use sloth 'old-deploy': sloth is not active\n</code></pre></p>"},{"location":"features/sloth-management/#workflow-examples","title":"Workflow Examples","text":""},{"location":"features/sloth-management/#example-1-environment-specific-deployments","title":"Example 1: Environment-Specific Deployments","text":"<pre><code># Save different environment configurations\nsloth-runner sloth add dev-deploy --file deploy.sloth --description \"Development deployment\"\nsloth-runner sloth add staging-deploy --file deploy.sloth --description \"Staging deployment\"\nsloth-runner sloth add prod-deploy --file deploy.sloth --description \"Production deployment\"\n\n# Use with environment-specific values\nsloth-runner run deploy --sloth dev-deploy --values dev-values.yaml --yes\nsloth-runner run deploy --sloth staging-deploy --values staging-values.yaml --yes\nsloth-runner run deploy --sloth prod-deploy --values prod-values.yaml --yes\n</code></pre>"},{"location":"features/sloth-management/#example-2-team-standard-procedures","title":"Example 2: Team Standard Procedures","text":"<pre><code># Save approved SOPs\nsloth-runner sloth add incident-response \\\n    --file sops/incident.sloth \\\n    --description \"Standard incident response procedure\"\n\nsloth-runner sloth add security-audit \\\n    --file sops/audit.sloth \\\n    --description \"Monthly security audit checklist\"\n\n# Team members run approved procedures\nsloth-runner run respond --sloth incident-response --yes\n</code></pre>"},{"location":"features/sloth-management/#example-3-cicd-integration","title":"Example 3: CI/CD Integration","text":"<pre><code># .github/workflows/deploy.yml\nname: Deploy\non:\n  push:\n    branches: [main]\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Deploy using saved sloth\n        run: |\n          sloth-runner run deploy \\\n            --sloth prod-deploy \\\n            --delegate-to prod-server \\\n            --yes\n</code></pre>"},{"location":"features/sloth-management/#example-4-workflow-rotation","title":"Example 4: Workflow Rotation","text":"<pre><code># Deactivate old version\nsloth-runner sloth deactivate deploy-v1\n\n# Activate new version\nsloth-runner sloth activate deploy-v2\n\n# Now all references to 'deploy-v2' will use the new version\nsloth-runner run deploy --sloth deploy-v2 --yes\n</code></pre>"},{"location":"features/sloth-management/#database-and-storage","title":"Database and Storage","text":""},{"location":"features/sloth-management/#location","title":"Location","text":"<p>Sloths are stored in: <pre><code>~/.sloth-runner/sloths.db\n</code></pre></p>"},{"location":"features/sloth-management/#schema","title":"Schema","text":"<pre><code>CREATE TABLE sloths (\n    id TEXT PRIMARY KEY,\n    name TEXT NOT NULL UNIQUE,\n    description TEXT,\n    file_path TEXT NOT NULL,\n    content TEXT NOT NULL,\n    is_active BOOLEAN NOT NULL DEFAULT 1,\n    created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    last_used_at DATETIME,\n    usage_count INTEGER DEFAULT 0,\n    tags TEXT,\n    file_hash TEXT NOT NULL\n);\n\nCREATE INDEX idx_sloths_name ON sloths(name);\nCREATE INDEX idx_sloths_active ON sloths(is_active);\n</code></pre>"},{"location":"features/sloth-management/#backup","title":"Backup","text":"<p>To backup your sloths:</p> <pre><code># Backup database\ncp ~/.sloth-runner/sloths.db ~/backups/sloths-$(date +%Y%m%d).db\n\n# Restore from backup\ncp ~/backups/sloths-20251006.db ~/.sloth-runner/sloths.db\n</code></pre>"},{"location":"features/sloth-management/#best-practices","title":"Best Practices","text":""},{"location":"features/sloth-management/#1-use-descriptive-names","title":"1. Use Descriptive Names","text":"<pre><code># Good\nsloth-runner sloth add prod-k8s-deploy --file deploy.sloth\n\n# Avoid\nsloth-runner sloth add temp1 --file deploy.sloth\n</code></pre>"},{"location":"features/sloth-management/#2-add-meaningful-descriptions","title":"2. Add Meaningful Descriptions","text":"<pre><code>sloth-runner sloth add db-migration \\\n    --file migration.sloth \\\n    --description \"PostgreSQL schema migration for v2.0 - includes user table changes\"\n</code></pre>"},{"location":"features/sloth-management/#3-deactivate-instead-of-delete","title":"3. Deactivate Instead of Delete","text":"<p>Preserve history and usage statistics:</p> <pre><code># Don't delete\n# sloth-runner sloth remove old-workflow\n\n# Instead, deactivate\nsloth-runner sloth deactivate old-workflow\n</code></pre>"},{"location":"features/sloth-management/#4-use-active-only-listing","title":"4. Use Active-Only Listing","text":"<p>For operational use, focus on active workflows:</p> <pre><code>sloth-runner sloth list --active\n</code></pre>"},{"location":"features/sloth-management/#5-monitor-usage-statistics","title":"5. Monitor Usage Statistics","text":"<p>Regularly check which workflows are being used:</p> <pre><code># Check details of frequently used workflows\nsloth-runner sloth get prod-deploy\n</code></pre>"},{"location":"features/sloth-management/#6-version-your-workflows","title":"6. Version Your Workflows","text":"<p>Use naming conventions for versions:</p> <pre><code>sloth-runner sloth add deploy-v1 --file deploy-v1.sloth\nsloth-runner sloth add deploy-v2 --file deploy-v2.sloth\n\n# When ready to switch\nsloth-runner sloth deactivate deploy-v1\nsloth-runner sloth activate deploy-v2\n</code></pre>"},{"location":"features/sloth-management/#7-combine-with-delegation","title":"7. Combine with Delegation","text":"<p>Use saved sloths with remote execution:</p> <pre><code>sloth-runner run setup \\\n    --sloth server-setup \\\n    --delegate-to prod-server-01 \\\n    --delegate-to prod-server-02 \\\n    --yes\n</code></pre>"},{"location":"features/sloth-management/#troubleshooting","title":"Troubleshooting","text":""},{"location":"features/sloth-management/#sloth-is-inactive","title":"Sloth is Inactive","text":"<p>Error: <pre><code>ERROR: failed to use sloth 'my-workflow': sloth is not active\n</code></pre></p> <p>Solution: <pre><code>sloth-runner sloth activate my-workflow\n</code></pre></p>"},{"location":"features/sloth-management/#sloth-not-found","title":"Sloth Not Found","text":"<p>Error: <pre><code>ERROR: sloth not found\n</code></pre></p> <p>Solution: <pre><code># List available sloths\nsloth-runner sloth list\n\n# Add the sloth if it doesn't exist\nsloth-runner sloth add my-workflow --file workflow.sloth\n</code></pre></p>"},{"location":"features/sloth-management/#duplicate-name","title":"Duplicate Name","text":"<p>Error: <pre><code>ERROR: sloth with this name already exists\n</code></pre></p> <p>Solution: <pre><code># Option 1: Use different name\nsloth-runner sloth add my-workflow-v2 --file workflow.sloth\n\n# Option 2: Remove existing and re-add\nsloth-runner sloth remove my-workflow\nsloth-runner sloth add my-workflow --file workflow.sloth\n</code></pre></p>"},{"location":"features/sloth-management/#file-not-found","title":"File Not Found","text":"<p>Error: <pre><code>ERROR: failed to read file: open workflow.sloth: no such file or directory\n</code></pre></p> <p>Solution: <pre><code># Verify file exists\nls -la workflow.sloth\n\n# Use absolute path\nsloth-runner sloth add my-workflow --file /absolute/path/to/workflow.sloth\n</code></pre></p>"},{"location":"features/sloth-management/#architecture","title":"Architecture","text":"<p>The Sloth Management System follows clean architecture principles:</p>"},{"location":"features/sloth-management/#layers","title":"Layers","text":"<ol> <li>Commands: CLI interface (<code>cmd/sloth-runner/commands/sloth/</code>)</li> <li>Services: Business logic (<code>cmd/sloth-runner/services/sloth_service.go</code>)</li> <li>Repository: Data access (<code>internal/sloth/sqlite_repository.go</code>)</li> <li>Domain: Models and interfaces (<code>internal/sloth/sloth.go</code>)</li> </ol>"},{"location":"features/sloth-management/#design-patterns","title":"Design Patterns","text":"<ul> <li>Repository Pattern: Abstracts database operations</li> <li>Service Layer Pattern: Encapsulates business logic</li> <li>Factory Pattern: Dependency injection for testability</li> <li>Command Pattern: CLI command structure</li> </ul> <p>For detailed architecture information, see Architecture Documentation.</p>"},{"location":"features/sloth-management/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>\u2705 Fast Lookups: Indexed by name for O(1) retrieval</li> <li>\u2705 Minimal Overhead: Direct database access, no network calls</li> <li>\u2705 Efficient Storage: SQLite with WAL mode</li> <li>\u2705 Quick Execution: Temporary files created in <code>/tmp</code></li> </ul>"},{"location":"features/sloth-management/#security","title":"Security","text":"<ul> <li>\ud83d\udd12 Database file permissions: <code>0600</code></li> <li>\ud83d\udd12 Temporary files cleaned up after execution</li> <li>\ud83d\udd12 No sensitive data logged</li> <li>\ud83d\udd12 SHA256 file hashing for integrity verification</li> </ul>"},{"location":"features/sloth-management/#comparison-file-vs-sloth","title":"Comparison: File vs Sloth","text":"Aspect Using <code>--file</code> Using <code>--sloth</code> Repeatability Specify path every time Reference by name Version Control Manual file management Automatic tracking Usage Analytics Not available Tracked automatically Team Sharing Share file paths Share sloth names Active Control Not available Can activate/deactivate History No built-in history Full execution history Portability Path-dependent Database-portable"},{"location":"features/sloth-management/#future-enhancements","title":"Future Enhancements","text":"<p>Planned features for the Sloth Management System:</p> <ol> <li>Update Command: Update sloth content from file</li> <li>Tags: Categorize sloths with tags</li> <li>Search: Find sloths by description or tags</li> <li>Export/Import: Share sloths between systems</li> <li>Version History: Track changes to sloth content</li> <li>Clone: Duplicate sloth with new name</li> <li>Validation: Syntax check before saving</li> <li>Web UI: Browser-based management interface</li> </ol>"},{"location":"features/sloth-management/#related-documentation","title":"Related Documentation","text":"<ul> <li>Architecture</li> <li>Run Command</li> <li>DSL Reference</li> <li>Agent Management</li> <li>SSH Management</li> </ul>"},{"location":"features/sloth-management/#summary","title":"Summary","text":"<p>The Sloth Management System transforms how you organize and execute workflows:</p> <p>\u2705 Centralized - All workflows in one database \u2705 Trackable - Usage statistics and history \u2705 Controllable - Activate/deactivate as needed \u2705 Reusable - Reference by name, not path \u2705 Scalable - Works with distributed agents \u2705 Professional - Enterprise-grade workflow management</p> <p>Start using saved sloths today to streamline your infrastructure automation! \ud83d\ude80</p>"},{"location":"features/user-field/","title":"Task User Field","text":"<p>The <code>:user()</code> method allows you to specify which user should run the task on the agent. By default, tasks run as the <code>root</code> user (or the user running the agent).</p>"},{"location":"features/user-field/#syntax","title":"Syntax","text":"<pre><code>task(\"task-name\")\n    :user(\"username\")\n    :command(function()\n        -- Task code here\n    end)\n    :build()\n</code></pre>"},{"location":"features/user-field/#parameters","title":"Parameters","text":"<ul> <li><code>username</code> (string): The username to run the task as. Must be a valid user on the target system.</li> </ul>"},{"location":"features/user-field/#example-running-task-as-specific-user","title":"Example: Running Task as Specific User","text":"<pre><code>task(\"deploy-app\")\n    :description(\"Deploy application as app user\")\n    :delegate_to(\"prod-server\")\n    :user(\"appuser\")  -- Run as 'appuser' instead of root\n    :command(function()\n        -- This will execute as 'appuser'\n        cmd.execute(\"cd /app &amp;&amp; ./deploy.sh\")\n    end)\n    :build()\n</code></pre>"},{"location":"features/user-field/#example-different-users-for-different-tasks","title":"Example: Different Users for Different Tasks","text":"<pre><code>workflow.define(\"multi-user-deploy\")\n    :description(\"Deploy with different users\")\n    :tasks({\n        -- Database migration as postgres user\n        task(\"db-migrate\")\n            :delegate_to(\"db-server\")\n            :user(\"postgres\")\n            :command(function()\n                cmd.execute(\"psql -c 'SELECT version();'\")\n            end)\n            :build(),\n\n        -- Application deployment as app user\n        task(\"app-deploy\")\n            :delegate_to(\"app-server\")\n            :user(\"appuser\")\n            :command(function()\n                file_ops.copy({\n                    src = \"/tmp/app.tar.gz\",\n                    dest = \"/opt/app/releases/\",\n                    mode = \"0644\"\n                })\n                cmd.execute(\"cd /opt/app &amp;&amp; ./deploy.sh\")\n            end)\n            :build(),\n\n        -- Nginx config as root (default)\n        task(\"nginx-reload\")\n            :delegate_to(\"web-server\")\n            -- No :user() specified, runs as root\n            :command(function()\n                cmd.execute(\"nginx -t &amp;&amp; systemctl reload nginx\")\n            end)\n            :build()\n    })\n    :on_complete(function()\n        print(\"\u2705 Multi-user deployment completed\")\n    end)\n</code></pre>"},{"location":"features/user-field/#implementation-details","title":"Implementation Details","text":"<ul> <li>When <code>user</code> is specified and is not <code>root</code>, the agent uses <code>sudo -u &lt;user&gt;</code> to run the command</li> <li>The specified user must exist on the target system</li> <li>The agent must have permission to run commands as that user (usually requires agent to run as root)</li> <li>If no user is specified, the task runs as the agent's user (typically root)</li> </ul>"},{"location":"features/user-field/#security-considerations","title":"Security Considerations","text":"<ul> <li>Ensure the specified user has appropriate permissions for the task</li> <li>Consider using dedicated service accounts for specific tasks</li> <li>Avoid running unnecessary tasks as root when a less privileged user would suffice</li> <li>The agent must be running as root or have sudo privileges to switch users</li> </ul>"},{"location":"features/user-field/#related","title":"Related","text":"<ul> <li><code>:delegate_to()</code> - Specify which agent runs the task</li> <li><code>:workdir()</code> - Specify the working directory for the task</li> </ul>"},{"location":"guides/values-delegate-to/","title":"Usando Values com delegate_to","text":"<p>O <code>delegate_to</code> agora suporta valores din\u00e2micos atrav\u00e9s de vari\u00e1veis locais que capturam dados de <code>values.yaml</code>. Isso permite que voc\u00ea execute as mesmas tasks em diferentes ambientes apenas mudando o arquivo de values.</p>"},{"location":"guides/values-delegate-to/#conceito-basico","title":"Conceito B\u00e1sico","text":""},{"location":"guides/values-delegate-to/#1-crie-um-arquivo-valuesyaml","title":"1. Crie um arquivo values.yaml","text":"<pre><code>host: mariaguica\nenvironment: production\nregion: us-east-1\nagents:\n  web: mariaguica\n  db: lady-guica\n  cache: keite-guica\n</code></pre>"},{"location":"guides/values-delegate-to/#2-use-os-valores-no-seu-script","title":"2. Use os valores no seu script","text":"<pre><code>-- \u2728 Capture o valor em uma vari\u00e1vel local\nlocal target_agent = values and values.host or \"default-agent\"\n\n-- Use a vari\u00e1vel no delegate_to\nlocal my_task = task(\"my_task\")\n    :description(\"Task that runs on dynamic agent\")\n    :command(function(this, params)\n        log.info(\"\ud83d\ude80 Running on remote agent\")\n        return true\n    end)\n    :delegate_to(target_agent)  -- \u2728 Usa a vari\u00e1vel\n    :build()\n</code></pre>"},{"location":"guides/values-delegate-to/#3-execute-com-o-values","title":"3. Execute com o values","text":"<pre><code>sloth-runner run -f script.sloth workflow_name --values values.yaml\n</code></pre>"},{"location":"guides/values-delegate-to/#exemplo-rapido","title":"Exemplo R\u00e1pido","text":"<pre><code>-- Captura o host do values\nlocal agent = values and values.host or \"mariaguica\"\n\nlocal test_task = task(\"test\")\n    :description(\"Test delegate_to with values\")\n    :command(function(this, params)\n        local hostname, _, _ = exec.run(\"hostname\")\n        log.info(\"Running on: \" .. hostname)\n        return true\n    end)\n    :delegate_to(agent)  -- \u2728 Usa valor de values.host\n    :build()\n\nworkflow.define(\"test\")\n    :tasks({ test_task })\n</code></pre> <p>Execute com: <pre><code>sloth-runner run -f test.sloth test --values values.yaml\n</code></pre></p>"},{"location":"guides/values-delegate-to/#resumo","title":"Resumo","text":"<p>O suporte a <code>values</code> no <code>delegate_to</code> torna o Sloth Runner extremamente flex\u00edvel para:</p> <ul> <li>\u2705 Deploy multi-ambiente (dev, staging, prod)</li> <li>\u2705 Teste A/B em diferentes servers</li> <li>\u2705 Blue/Green deployments</li> <li>\u2705 Disaster recovery e failover</li> <li>\u2705 Geographic distribution</li> <li>\u2705 Load testing em diferentes clusters</li> </ul> <p>Voc\u00ea escreve o script uma vez e reutiliza em todos os ambientes! \ud83c\udf89</p>"},{"location":"modern-dsl/","title":"\ud83c\udfa8 Modern DSL - Sloth Runner","text":"<p>Welcome to the Sloth Runner Modern DSL documentation!</p>"},{"location":"modern-dsl/#overview","title":"Overview","text":"<p>Sloth Runner uses a modern, expressive DSL (Domain Specific Language) based on Lua that makes it easy to define workflows, tasks, and orchestrate complex operations.</p>"},{"location":"modern-dsl/#key-features","title":"Key Features","text":"<ul> <li>\ud83d\udd04 Chainable API - Fluent, readable syntax</li> <li>\ud83c\udfaf Type Safety - Clear error messages</li> <li>\ud83e\udde9 Modular Design - Reusable components</li> <li>\ud83d\udce6 Rich Standard Library - Built-in modules for common tasks</li> <li>\ud83c\udf10 Distributed Execution - Native support for distributed workflows</li> <li>\ud83d\udcbe State Management - Persistent state across runs</li> <li>\ud83d\udcca Stack Management - Pulumi-style stack support</li> </ul>"},{"location":"modern-dsl/#quick-example","title":"Quick Example","text":"<pre><code>-- Define a simple task\nlocal build_task = task(\"build\")\n    :description(\"Build the application\")\n    :command(function(params, deps)\n        local exec = require(\"exec\")\n        local result = exec.run(\"go build -o app ./cmd\")\n        return result.success, result.stdout\n    end)\n    :timeout(\"5m\")\n    :retries(3)\n    :build()\n\n-- Create a workflow\nworkflow.define(\"my_workflow\", {\n    description = \"My first workflow\",\n    version = \"1.0.0\",\n    tasks = { build_task }\n})\n</code></pre>"},{"location":"modern-dsl/#documentation-sections","title":"Documentation Sections","text":""},{"location":"modern-dsl/#getting-started","title":"\ud83d\udcd6 Getting Started","text":"<ul> <li>Introduction - Start here to learn the basics</li> <li>Best Practices - Learn how to write effective workflows</li> <li>Reference Guide - Complete API reference</li> </ul>"},{"location":"modern-dsl/#core-concepts","title":"\ud83d\udd27 Core Concepts","text":""},{"location":"modern-dsl/#tasks","title":"Tasks","text":"<p>Tasks are the building blocks of workflows. They define individual units of work.</p> <pre><code>local my_task = task(\"task_name\")\n    :description(\"What this task does\")\n    :command(function(params, deps)\n        -- Your code here\n        return true  -- success\n    end)\n    :build()\n</code></pre>"},{"location":"modern-dsl/#workflows","title":"Workflows","text":"<p>Workflows orchestrate multiple tasks with dependencies.</p> <pre><code>workflow.define(\"workflow_name\", {\n    description = \"Workflow description\",\n    tasks = { task1, task2, task3 },\n    on_success = function(results)\n        print(\"Success!\")\n    end\n})\n</code></pre>"},{"location":"modern-dsl/#dependencies","title":"Dependencies","text":"<p>Tasks can depend on other tasks:</p> <pre><code>local test_task = task(\"test\")\n    :depends_on({\"build\"})  -- Runs after build\n    :command(function(params, deps)\n        local build_result = deps.build\n        -- Use build result\n    end)\n    :build()\n</code></pre>"},{"location":"modern-dsl/#built-in-modules","title":"\ud83d\udce6 Built-in Modules","text":"<p>Sloth Runner provides a rich set of built-in modules:</p> <ul> <li>exec - Execute commands</li> <li>fs - File system operations</li> <li>net - Network operations</li> <li>log - Logging</li> <li>state - State management</li> <li>metrics - Metrics collection</li> </ul> <p>See all modules</p>"},{"location":"modern-dsl/#common-patterns","title":"\ud83c\udfaf Common Patterns","text":""},{"location":"modern-dsl/#error-handling","title":"Error Handling","text":"<pre><code>:command(function()\n    local success, error = pcall(function()\n        -- Your code\n    end)\n    return success, error\nend)\n</code></pre>"},{"location":"modern-dsl/#conditional-execution","title":"Conditional Execution","text":"<pre><code>:condition(function(params)\n    return params.environment == \"production\"\nend)\n</code></pre>"},{"location":"modern-dsl/#callbacks","title":"Callbacks","text":"<pre><code>:on_success(function(params, output)\n    log.info(\"Task succeeded!\")\nend)\n:on_failure(function(params, error)\n    log.error(\"Task failed: \" .. error)\nend)\n</code></pre>"},{"location":"modern-dsl/#advanced-features","title":"Advanced Features","text":""},{"location":"modern-dsl/#stack-management","title":"\ud83d\uddc2\ufe0f Stack Management","text":"<pre><code>-- Use stacks for environment isolation\nsloth-runner stack run -f workflow.sloth --stack production\n</code></pre>"},{"location":"modern-dsl/#distributed-execution","title":"\ud83c\udf10 Distributed Execution","text":"<pre><code>local remote_task = task(\"remote_work\")\n    :agent(\"worker-01\")\n    :run_on(\"remote_cluster\")\n    :command(function()\n        -- Runs on remote agent\n    end)\n    :build()\n</code></pre>"},{"location":"modern-dsl/#output-formats","title":"\ud83d\udcca Output Formats","text":"<pre><code># Enhanced output with emojis\nsloth-runner run -f workflow.sloth --output enhanced\n\n# JSON output for automation\nsloth-runner run -f workflow.sloth --output json\n\n# Modern styled output\nsloth-runner run -f workflow.sloth --output modern\n</code></pre>"},{"location":"modern-dsl/#examples","title":"Examples","text":""},{"location":"modern-dsl/#cicd-pipeline","title":"CI/CD Pipeline","text":"<p>See CI/CD Example</p>"},{"location":"modern-dsl/#infrastructure-as-code","title":"Infrastructure as Code","text":"<p>See IaC Example</p>"},{"location":"modern-dsl/#multi-cloud-deployment","title":"Multi-Cloud Deployment","text":"<p>See Multi-Cloud Example</p>"},{"location":"modern-dsl/#learn-more","title":"Learn More","text":"<ul> <li>Core Concepts</li> <li>Advanced Features</li> <li>Examples</li> <li>Lua API Reference</li> </ul>"},{"location":"modern-dsl/#community-support","title":"Community &amp; Support","text":"<ul> <li>\ud83d\udcda Documentation Home</li> <li>\ud83d\udc1b Report Issues</li> <li>\ud83d\udcac Discussions</li> </ul> <p>Ready to get started? Check out the Introduction!</p>"},{"location":"modern-dsl/best-practices/","title":"\ud83c\udfaf Modern DSL Best Practices","text":"<p>This guide provides comprehensive best practices for writing efficient, maintainable, and robust automation workflows using Sloth Runner's Modern DSL.</p>"},{"location":"modern-dsl/best-practices/#table-of-contents","title":"\ud83d\udccb Table of Contents","text":"<ul> <li>Code Organization</li> <li>Module Usage Patterns</li> <li>Error Handling</li> <li>Performance Optimization</li> <li>Security Best Practices</li> <li>Testing and Validation</li> <li>Documentation Standards</li> </ul>"},{"location":"modern-dsl/best-practices/#code-organization","title":"Code Organization","text":""},{"location":"modern-dsl/best-practices/#structure-your-files","title":"Structure Your Files","text":"<pre><code>-- \u2705 Good: Organized structure\n-- file: deployments/production.lua\n\n-- Configuration at the top\nlocal config = require(\"config/production\")\nlocal utils = require(\"lib/utils\")\n\n-- Constants\nlocal APP_NAME = \"myapp\"\nlocal ENVIRONMENT = \"production\"\n\n-- Helper functions\nlocal function validate_deployment(params)\n    -- validation logic\nend\n\nlocal function get_replica_count(env)\n    local replicas = {\n        dev = 1,\n        staging = 2,\n        production = 5\n    }\n    return replicas[env] or 1\nend\n\n-- Main workflow definition\nname = \"production-deployment\"\nversion = \"1.0.0\"\ndescription = \"Production deployment workflow\"\n\n-- Task groups\ngroup \"preparation\" {\n    -- tasks\n}\n\ngroup \"deployment\" {\n    -- tasks\n}\n\ngroup \"verification\" {\n    -- tasks\n}\n</code></pre>"},{"location":"modern-dsl/best-practices/#modularize-common-patterns","title":"Modularize Common Patterns","text":"<pre><code>-- file: lib/deployment_helpers.lua\nlocal M = {}\n\n-- Reusable function for creating deployment tasks\nfunction M.create_deployment_task(environment, config)\n    return task(\"deploy_to_\" .. environment) {\n        module = \"k8s\",\n        action = \"deploy\",\n        namespace = environment,\n        image = config.image,\n        replicas = config.replicas[environment],\n        resources = config.resources[environment],\n\n        on_success = function(result)\n            state.set(\"last_deployment.\" .. environment, {\n                version = config.version,\n                timestamp = os.time(),\n                pods = result.ready_pods\n            })\n        end\n    }\nend\n\n-- Reusable health check\nfunction M.health_check(service, environment)\n    return task(\"health_check_\" .. service) {\n        module = \"infra_test\",\n        action = \"http_check\",\n        url = \"https://\" .. environment .. \".example.com/health\",\n        expected_status = 200,\n        timeout = 30\n    }\nend\n\nreturn M\n\n-- Usage in main file:\nlocal deploy_helpers = require(\"lib/deployment_helpers\")\n\ngroup \"deployment\" {\n    deploy_helpers.create_deployment_task(\"production\", config),\n    deploy_helpers.health_check(\"api\", \"production\")\n}\n</code></pre>"},{"location":"modern-dsl/best-practices/#module-usage-patterns","title":"Module Usage Patterns","text":""},{"location":"modern-dsl/best-practices/#package-management-best-practices","title":"Package Management Best Practices","text":"<pre><code>-- \u2705 Good: Idempotent package installation with verification\ngroup \"system_setup\" {\n    task \"install_dependencies\" {\n        module = \"pkg\",\n        action = \"install\",\n        packages = function()\n            -- Dynamically determine packages based on OS\n            local os_family = facts.get_os().family\n            local base_packages = {\"curl\", \"git\", \"vim\"}\n\n            if os_family == \"debian\" then\n                table.insert(base_packages, \"apt-transport-https\")\n            elseif os_family == \"redhat\" then\n                table.insert(base_packages, \"yum-utils\")\n            end\n\n            return base_packages\n        end,\n        state = \"present\",\n\n        -- Verify installation\n        post_install = function()\n            for _, pkg in ipairs(packages) do\n                if not pkg.is_installed(pkg) then\n                    return false, pkg .. \" failed to install\"\n                end\n            end\n            return true\n        end\n    }\n}\n</code></pre>"},{"location":"modern-dsl/best-practices/#service-management-patterns","title":"Service Management Patterns","text":"<pre><code>-- \u2705 Good: Graceful service management with checks\ngroup \"service_management\" {\n    task \"restart_service_safely\" {\n        module = \"systemd\",\n        action = \"custom\",\n\n        execute = function(params)\n            local service_name = params.service\n\n            -- Check if service exists\n            if not systemd.service_exists({service = service_name}) then\n                return false, \"Service \" .. service_name .. \" does not exist\"\n            end\n\n            -- Check current status\n            local status = systemd.status({service = service_name})\n\n            -- Graceful restart with health check\n            if status.active then\n                -- Reload if config changed\n                if params.config_changed then\n                    systemd.reload({service = service_name})\n                    goroutine.sleep(2000)\n                end\n\n                -- Graceful restart\n                systemd.restart({service = service_name})\n            else\n                -- Start if not running\n                systemd.start({service = service_name})\n            end\n\n            -- Wait and verify\n            goroutine.sleep(5000)\n\n            local new_status = systemd.status({service = service_name})\n            if not new_status.active then\n                return false, \"Service failed to start after restart\"\n            end\n\n            return true, \"Service \" .. service_name .. \" restarted successfully\"\n        end\n    }\n}\n</code></pre>"},{"location":"modern-dsl/best-practices/#docker-module-patterns","title":"Docker Module Patterns","text":"<pre><code>-- \u2705 Good: Container lifecycle management\ngroup \"container_deployment\" {\n    task \"deploy_with_zero_downtime\" {\n        module = \"docker\",\n        action = \"custom\",\n\n        execute = function(params)\n            local container_name = params.container\n            local image = params.image\n\n            -- Pull new image first\n            docker.pull({image = image})\n\n            -- Check if container exists\n            local existing = docker.inspect({container = container_name})\n\n            if existing then\n                -- Create new container with temporary name\n                local temp_name = container_name .. \"_new\"\n                docker.run({\n                    name = temp_name,\n                    image = image,\n                    ports = params.ports,\n                    environment = params.environment,\n                    detach = true\n                })\n\n                -- Health check new container\n                goroutine.sleep(5000)\n                local health = docker.exec({\n                    container = temp_name,\n                    command = \"curl -f http://localhost/health\"\n                })\n\n                if health.exit_code == 0 then\n                    -- Stop old container\n                    docker.stop({container = container_name})\n                    docker.remove({container = container_name})\n\n                    -- Rename new container\n                    docker.rename({\n                        from = temp_name,\n                        to = container_name\n                    })\n                else\n                    -- Rollback\n                    docker.stop({container = temp_name})\n                    docker.remove({container = temp_name})\n                    return false, \"Health check failed on new container\"\n                end\n            else\n                -- Fresh deployment\n                docker.run({\n                    name = container_name,\n                    image = image,\n                    ports = params.ports,\n                    environment = params.environment,\n                    restart = \"always\",\n                    detach = true\n                })\n            end\n\n            return true, \"Container deployed successfully\"\n        end\n    }\n}\n</code></pre>"},{"location":"modern-dsl/best-practices/#error-handling","title":"Error Handling","text":""},{"location":"modern-dsl/best-practices/#comprehensive-error-handling","title":"Comprehensive Error Handling","text":"<pre><code>-- \u2705 Good: Multiple levels of error handling\ngroup \"robust_deployment\" {\n    on_error = \"continue\",  -- Continue with other tasks on error\n\n    task \"deploy_application\" {\n        module = \"custom\",\n        action = \"deploy\",\n\n        execute = function(params)\n            -- Wrap in pcall for unexpected errors\n            local success, result = pcall(function()\n                -- Validate inputs\n                if not params.version then\n                    error(\"Version is required\")\n                end\n\n                -- Try deployment with timeout\n                local deploy_result = with_timeout(30, function()\n                    return deploy_app(params)\n                end)\n\n                if not deploy_result.success then\n                    -- Specific error handling\n                    if deploy_result.error:match(\"timeout\") then\n                        error(\"Deployment timed out after 30 seconds\")\n                    elseif deploy_result.error:match(\"auth\") then\n                        error(\"Authentication failed - check credentials\")\n                    else\n                        error(\"Deployment failed: \" .. deploy_result.error)\n                    end\n                end\n\n                return deploy_result\n            end)\n\n            if not success then\n                -- Log error with context\n                log.error(\"Deployment failed\", {\n                    version = params.version,\n                    environment = params.environment,\n                    error = result\n                })\n\n                -- Send alert\n                notification.send(\"slack\", {\n                    channel = \"#ops-alerts\",\n                    message = \"Deployment failed: \" .. result\n                })\n\n                return false, result\n            end\n\n            return true, \"Deployment successful\", result\n        end,\n\n        -- Retry with exponential backoff\n        retry_policy = {\n            max_attempts = 3,\n            backoff = \"exponential\",\n            initial_delay = 5,\n            max_delay = 60,\n\n            should_retry = function(error)\n                -- Only retry on specific errors\n                return error:match(\"timeout\") or error:match(\"connection\")\n            end\n        }\n    }\n}\n</code></pre>"},{"location":"modern-dsl/best-practices/#circuit-breaker-pattern","title":"Circuit Breaker Pattern","text":"<pre><code>-- \u2705 Good: Circuit breaker for external services\nlocal circuit_breakers = {}\n\nfunction create_circuit_breaker(name, threshold, timeout)\n    circuit_breakers[name] = {\n        failures = 0,\n        threshold = threshold or 5,\n        timeout = timeout or 60,\n        open_until = 0,\n        state = \"closed\"  -- closed, open, half-open\n    }\nend\n\nfunction call_with_circuit_breaker(name, fn)\n    local cb = circuit_breakers[name]\n    if not cb then\n        create_circuit_breaker(name)\n        cb = circuit_breakers[name]\n    end\n\n    -- Check if circuit is open\n    if cb.state == \"open\" then\n        if os.time() &lt; cb.open_until then\n            return false, \"Circuit breaker is open\"\n        else\n            -- Try half-open\n            cb.state = \"half-open\"\n        end\n    end\n\n    -- Execute function\n    local success, result = pcall(fn)\n\n    if success then\n        -- Reset on success\n        if cb.state == \"half-open\" then\n            cb.state = \"closed\"\n            cb.failures = 0\n        end\n        return true, result\n    else\n        -- Record failure\n        cb.failures = cb.failures + 1\n\n        if cb.failures &gt;= cb.threshold then\n            cb.state = \"open\"\n            cb.open_until = os.time() + cb.timeout\n            log.warn(\"Circuit breaker opened for: \" .. name)\n        end\n\n        return false, result\n    end\nend\n\n-- Usage\ntask \"call_external_api\" {\n    module = \"custom\",\n    execute = function(params)\n        return call_with_circuit_breaker(\"payment_api\", function()\n            return http.post(\"https://api.payment.com/charge\", {\n                amount = params.amount\n            })\n        end)\n    end\n}\n</code></pre>"},{"location":"modern-dsl/best-practices/#performance-optimization","title":"Performance Optimization","text":""},{"location":"modern-dsl/best-practices/#parallel-execution","title":"Parallel Execution","text":"<pre><code>-- \u2705 Good: Efficient parallel execution with worker pool\ngroup \"parallel_processing\" {\n    task \"process_large_dataset\" {\n        module = \"goroutine\",\n        action = \"custom\",\n\n        execute = function(params)\n            local files = fs.list(params.input_dir)\n            local results = {}\n            local errors = {}\n\n            -- Create worker pool\n            local worker_pool = goroutine.WorkerPool({\n                size = params.workers or 4,\n                queue_size = 100\n            })\n\n            -- Process files in parallel\n            for _, file in ipairs(files) do\n                worker_pool:submit(function()\n                    local success, result = pcall(function()\n                        return process_file(file)\n                    end)\n\n                    if success then\n                        results[file] = result\n                    else\n                        errors[file] = result\n                    end\n                end)\n            end\n\n            -- Wait for completion\n            worker_pool:wait()\n            worker_pool:shutdown()\n\n            -- Check results\n            if #errors &gt; 0 then\n                local error_rate = #errors / #files\n                if error_rate &gt; 0.1 then  -- More than 10% errors\n                    return false, \"Too many errors: \" .. #errors .. \"/\" .. #files\n                end\n            end\n\n            return true, \"Processing complete\", {\n                total = #files,\n                successful = #results,\n                failed = #errors\n            }\n        end\n    }\n}\n</code></pre>"},{"location":"modern-dsl/best-practices/#resource-management","title":"Resource Management","text":"<pre><code>-- \u2705 Good: Efficient resource usage\ngroup \"resource_efficient\" {\n    task \"process_stream\" {\n        module = \"custom\",\n\n        execute = function(params)\n            -- Use streaming for large files\n            local input = io.open(params.input_file, \"r\")\n            local output = io.open(params.output_file, \"w\")\n\n            local line_count = 0\n            local batch = {}\n            local batch_size = 1000\n\n            -- Process in batches\n            for line in input:lines() do\n                table.insert(batch, line)\n                line_count = line_count + 1\n\n                if #batch &gt;= batch_size then\n                    -- Process batch\n                    local processed = process_batch(batch)\n                    for _, item in ipairs(processed) do\n                        output:write(item .. \"\\n\")\n                    end\n\n                    -- Clear batch\n                    batch = {}\n\n                    -- Yield periodically\n                    if line_count % 10000 == 0 then\n                        coroutine.yield()\n                        log.info(\"Processed \" .. line_count .. \" lines\")\n                    end\n                end\n            end\n\n            -- Process remaining\n            if #batch &gt; 0 then\n                local processed = process_batch(batch)\n                for _, item in ipairs(processed) do\n                    output:write(item .. \"\\n\")\n                end\n            end\n\n            input:close()\n            output:close()\n\n            return true, \"Processed \" .. line_count .. \" lines\"\n        end\n    }\n}\n</code></pre>"},{"location":"modern-dsl/best-practices/#security-best-practices","title":"Security Best Practices","text":""},{"location":"modern-dsl/best-practices/#secret-management","title":"Secret Management","text":"<pre><code>-- \u2705 Good: Secure secret handling\ngroup \"secure_deployment\" {\n    task \"deploy_with_secrets\" {\n        module = \"custom\",\n\n        execute = function(params)\n            -- Never hardcode secrets\n            -- \u274c Bad: local password = \"supersecret\"\n\n            -- \u2705 Good: Get from secure source\n            local db_password = os.getenv(\"DB_PASSWORD\") or\n                               vault.get(\"secrets/database/password\")\n\n            if not db_password then\n                return false, \"Database password not available\"\n            end\n\n            -- Use secret without logging\n            local conn = database.connect({\n                host = params.db_host,\n                username = params.db_user,\n                password = db_password,  -- Never log this\n                database = params.db_name\n            })\n\n            -- Clear from memory after use\n            db_password = nil\n            collectgarbage()\n\n            return true, \"Connected to database\"\n        end\n    }\n}\n</code></pre>"},{"location":"modern-dsl/best-practices/#input-validation","title":"Input Validation","text":"<pre><code>-- \u2705 Good: Comprehensive input validation\nfunction validate_input(params)\n    local validators = {\n        -- Required fields\n        required = {\"username\", \"email\", \"action\"},\n\n        -- Type validation\n        types = {\n            username = \"string\",\n            email = \"string\",\n            age = \"number\",\n            active = \"boolean\"\n        },\n\n        -- Pattern validation\n        patterns = {\n            email = \"^[%w._%+-]+@[%w.-]+%.[%w]+$\",\n            username = \"^[a-zA-Z0-9_]+$\"\n        },\n\n        -- Range validation\n        ranges = {\n            age = {min = 18, max = 120}\n        }\n    }\n\n    -- Check required fields\n    for _, field in ipairs(validators.required) do\n        if not params[field] then\n            return false, \"Missing required field: \" .. field\n        end\n    end\n\n    -- Check types\n    for field, expected_type in pairs(validators.types) do\n        if params[field] and type(params[field]) ~= expected_type then\n            return false, field .. \" must be \" .. expected_type\n        end\n    end\n\n    -- Check patterns\n    for field, pattern in pairs(validators.patterns) do\n        if params[field] and not params[field]:match(pattern) then\n            return false, field .. \" has invalid format\"\n        end\n    end\n\n    -- Check ranges\n    for field, range in pairs(validators.ranges) do\n        if params[field] then\n            if params[field] &lt; range.min or params[field] &gt; range.max then\n                return false, field .. \" out of range\"\n            end\n        end\n    end\n\n    return true\nend\n\n-- Usage\ntask \"process_user_request\" {\n    module = \"custom\",\n\n    execute = function(params)\n        local valid, error = validate_input(params)\n        if not valid then\n            return false, \"Validation failed: \" .. error\n        end\n\n        -- Process validated input\n        return process_request(params)\n    end\n}\n</code></pre>"},{"location":"modern-dsl/best-practices/#testing-and-validation","title":"Testing and Validation","text":""},{"location":"modern-dsl/best-practices/#infrastructure-testing","title":"Infrastructure Testing","text":"<pre><code>-- \u2705 Good: Comprehensive infrastructure validation\ngroup \"deployment_validation\" {\n    task \"validate_deployment\" {\n        module = \"infra_test\",\n        action = \"suite\",\n\n        tests = {\n            -- Service checks\n            {\n                name = \"nginx_running\",\n                type = \"service_running\",\n                service = \"nginx\",\n                critical = true\n            },\n\n            -- Port checks\n            {\n                name = \"http_port_open\",\n                type = \"port_listening\",\n                port = 80,\n                protocol = \"tcp\",\n                critical = true\n            },\n\n            -- File checks\n            {\n                name = \"config_exists\",\n                type = \"file_exists\",\n                path = \"/etc/nginx/nginx.conf\",\n                critical = false\n            },\n\n            -- HTTP checks\n            {\n                name = \"health_endpoint\",\n                type = \"http_check\",\n                url = \"http://localhost/health\",\n                expected_status = 200,\n                timeout = 10,\n                retries = 3\n            },\n\n            -- Custom validation\n            {\n                name = \"custom_check\",\n                type = \"custom\",\n                validator = function()\n                    local result = exec.run(\"nginx -t\")\n                    return result.exit_code == 0\n                end\n            }\n        },\n\n        on_failure = function(test, error)\n            log.error(\"Validation failed\", {\n                test = test.name,\n                type = test.type,\n                error = error\n            })\n\n            if test.critical then\n                -- Rollback if critical test fails\n                rollback()\n            end\n        end\n    }\n}\n</code></pre>"},{"location":"modern-dsl/best-practices/#dry-run-support","title":"Dry Run Support","text":"<pre><code>-- \u2705 Good: Support for dry-run mode\ngroup \"deployment\" {\n    task \"deploy_with_dry_run\" {\n        module = \"custom\",\n\n        execute = function(params)\n            local dry_run = params.dry_run or false\n\n            if dry_run then\n                log.info(\"[DRY-RUN] Would deploy version: \" .. params.version)\n                log.info(\"[DRY-RUN] Would update servers: \" .. table.concat(params.servers, \", \"))\n                log.info(\"[DRY-RUN] Would use configuration: \" .. params.config_file)\n\n                -- Simulate validation\n                local validation_result = validate_deployment_params(params)\n                if not validation_result.valid then\n                    return false, \"[DRY-RUN] Validation failed: \" .. validation_result.error\n                end\n\n                return true, \"[DRY-RUN] Deployment would succeed\"\n            end\n\n            -- Actual deployment\n            return deploy_application(params)\n        end\n    }\n}\n</code></pre>"},{"location":"modern-dsl/best-practices/#documentation-standards","title":"Documentation Standards","text":""},{"location":"modern-dsl/best-practices/#task-documentation","title":"Task Documentation","text":"<pre><code>-- \u2705 Good: Well-documented task\ntask \"complex_deployment\" {\n    -- Clear description\n    description = \"Deploy application with blue-green strategy\",\n\n    -- Document parameters\n    parameters = {\n        version = {\n            type = \"string\",\n            required = true,\n            description = \"Version to deploy (e.g., v1.2.3)\"\n        },\n        environment = {\n            type = \"string\",\n            required = true,\n            enum = {\"dev\", \"staging\", \"production\"},\n            description = \"Target environment\"\n        },\n        strategy = {\n            type = \"string\",\n            default = \"blue-green\",\n            enum = {\"blue-green\", \"canary\", \"rolling\"},\n            description = \"Deployment strategy\"\n        }\n    },\n\n    -- Document outputs\n    outputs = {\n        deployment_id = \"Unique deployment identifier\",\n        active_color = \"Current active color (blue/green)\",\n        endpoint = \"Application endpoint URL\"\n    },\n\n    -- Examples\n    examples = {\n        {\n            description = \"Deploy to production\",\n            params = {\n                version = \"v1.2.3\",\n                environment = \"production\",\n                strategy = \"blue-green\"\n            }\n        }\n    },\n\n    -- Actual implementation\n    module = \"custom\",\n    execute = function(params)\n        -- Implementation\n    end\n}\n</code></pre>"},{"location":"modern-dsl/best-practices/#workflow-documentation","title":"Workflow Documentation","text":"<pre><code>-- \u2705 Good: Complete workflow documentation\n--[[\nWorkflow: Production Deployment Pipeline\nAuthor: Platform Team\nVersion: 2.0.0\nLast Updated: 2024-01-15\n\nDescription:\n  This workflow handles the complete production deployment process including:\n  - Building and testing the application\n  - Deploying to staging for validation\n  - Blue-green deployment to production\n  - Automated rollback on failure\n\nPrerequisites:\n  - Docker installed and running\n  - Kubernetes cluster access configured\n  - Vault credentials available\n  - Slack webhook configured\n\nUsage:\n  sloth-runner run production-deployment.lua --version=v1.2.3\n\nEnvironment Variables:\n  - DOCKER_REGISTRY: Docker registry URL\n  - VAULT_TOKEN: Vault authentication token\n  - SLACK_WEBHOOK: Slack webhook for notifications\n  - KUBE_CONFIG: Path to Kubernetes config\n\nOutputs:\n  - Deployment report in ./reports/deployment-{timestamp}.json\n  - Metrics exported to Prometheus\n  - Notifications sent to #deployments Slack channel\n--]]\n\nname = \"production-deployment\"\nversion = \"2.0.0\"\n-- ... rest of workflow\n</code></pre>"},{"location":"modern-dsl/best-practices/#summary","title":"Summary","text":"<p>Following these best practices will help you create: - Maintainable workflows that are easy to understand and modify - Reliable automation that handles errors gracefully - Efficient processes that make optimal use of resources - Secure implementations that protect sensitive data - Well-documented code that others can understand and use</p> <p>Remember to: 1. Start simple and iterate 2. Test thoroughly in non-production environments 3. Document your workflows and decisions 4. Monitor and measure performance 5. Keep security in mind at all times 6. Use modules effectively - they're tested and optimized 7. Contribute improvements back to the community</p> <p>For more information, see: - Module API Examples - Reference Guide - Introduction</p>"},{"location":"modern-dsl/introduction/","title":"\ud83c\udfa8 Modern DSL Introduction","text":""},{"location":"modern-dsl/introduction/#overview","title":"Overview","text":"<p>The Modern DSL is Sloth Runner's Lua-based workflow definition language using a Builder Pattern with method chaining. Workflows are defined in <code>.sloth</code> files with clean, expressive syntax.</p>"},{"location":"modern-dsl/introduction/#why-modern-dsl","title":"Why Modern DSL?","text":"<ul> <li>\ud83c\udfaf Fluent &amp; Expressive: Builder pattern with method chaining</li> <li>\ud83d\udce6 Global Modules: All modules available without imports</li> <li>\ud83d\udd04 Dynamic: Use Lua's full power - loops, conditionals, functions</li> <li>\u26a1 Fast: Direct Lua execution</li> <li>\ud83e\udde9 Composable: Build complex workflows from reusable tasks</li> </ul>"},{"location":"modern-dsl/introduction/#basic-structure","title":"Basic Structure","text":"<p>Every <code>.sloth</code> file defines tasks using the <code>task()</code> builder, then composes them into a workflow with <code>workflow.define()</code>:</p> <pre><code>-- Define a task using the builder pattern\nlocal my_task = task(\"task-name\")\n    :description(\"What this task does\")\n    :command(function(this, params)\n        -- Your task code here\n        return true, \"Task completed successfully\"\n    end)\n    :build()\n\n-- Compose tasks into a workflow\nworkflow\n    .define(\"workflow_name\")\n    :description(\"What this workflow does\")\n    :version(\"1.0.0\")\n    :tasks({my_task})\n    :on_complete(function(success, results)\n        if success then\n            log.info(\"\u2705 Workflow completed!\")\n        end\n    end)\n</code></pre>"},{"location":"modern-dsl/introduction/#complete-example","title":"Complete Example","text":"<pre><code>-- Install and configure nginx on a remote server\nlocal install_nginx = task(\"install-nginx\")\n    :description(\"Install nginx package\")\n    :delegate_to(\"web-server\")\n    :command(function(this, params)\n        local success, msg = pkg.install({\n            packages = {\"nginx\", \"certbot\"}\n        })\n\n        if not success then\n            return false, \"Failed to install: \" .. tostring(msg)\n        end\n\n        return true, \"Nginx installed successfully\"\n    end)\n    :build()\n\nlocal start_nginx = task(\"start-nginx\")\n    :description(\"Start and enable nginx service\")\n    :delegate_to(\"web-server\")\n    :command(function(this, params)\n        local systemd = require(\"systemd\")\n\n        local success, msg = systemd.start(\"nginx\")\n        if not success then\n            return false, \"Failed to start nginx\"\n        end\n\n        systemd.enable(\"nginx\")\n        return true, \"Nginx started and enabled\"\n    end)\n    :build()\n\nworkflow\n    .define(\"nginx_deployment\")\n    :description(\"Deploy nginx web server\")\n    :version(\"1.0.0\")\n    :tasks({install_nginx, start_nginx})\n    :config({\n        timeout = \"10m\",\n        max_parallel_tasks = 1\n    })\n    :on_complete(function(success, results)\n        if success then\n            log.info(\"\ud83c\udf89 Nginx deployment completed!\")\n        else\n            log.error(\"\u274c Deployment failed\")\n        end\n    end)\n</code></pre>"},{"location":"modern-dsl/introduction/#task-builder-api","title":"Task Builder API","text":"<p>The <code>task()</code> builder provides these methods:</p> <pre><code>local my_task = task(\"unique-task-name\")\n    :description(\"Human-readable description\")\n    :delegate_to(\"agent-name\")         -- Execute on remote agent\n    :user(\"username\")                   -- Run as specific user\n    :workdir(\"/path/to/directory\")      -- Set working directory\n    :timeout(\"5m\")                      -- Task timeout\n    :retries(3)                         -- Retry count on failure\n    :command(function(this, params)     -- Task function\n        -- Task implementation\n        return true, \"Success message\"\n        -- or\n        -- return false, \"Error message\"\n    end)\n    :build()  -- MUST call .build() to finalize the task\n</code></pre>"},{"location":"modern-dsl/introduction/#task-return-values","title":"Task Return Values","text":"<p>Tasks return two values: <code>(success, message)</code></p> <pre><code>:command(function(this, params)\n    -- Success\n    return true, \"Operation completed successfully\"\n\n    -- Failure\n    return false, \"Error: operation failed\"\n\n    -- Optional third return value for data\n    return true, \"Data fetched\", {count = 42, items = {...}}\nend)\n</code></pre>"},{"location":"modern-dsl/introduction/#workflow-builder-api","title":"Workflow Builder API","text":"<p>The <code>workflow.define()</code> builder provides these methods:</p> <pre><code>workflow\n    .define(\"workflow_name\")\n    :description(\"What this workflow does\")\n    :version(\"1.0.0\")\n    :tasks({task1, task2, task3})  -- Array of built tasks\n    :config({\n        timeout = \"30m\",\n        max_parallel_tasks = 2\n    })\n    :on_complete(function(success, results)\n        -- Called after workflow completes\n        if success then\n            log.info(\"All tasks completed\")\n        else\n            log.error(\"Workflow failed\")\n        end\n    end)\n</code></pre>"},{"location":"modern-dsl/introduction/#global-modules-no-require","title":"Global Modules (No require!)","text":"<p>Most modules are globally available - just use them:</p> <pre><code>:command(function(this, params)\n    -- Package management\n    pkg.install({packages = {\"nginx\", \"postgresql\"}})\n    pkg.update()\n    pkg.remove({package = \"oldpackage\"})\n\n    -- User management\n    user.create({\n        username = \"webuser\",\n        password = \"changeme123\",\n        home = \"/home/webuser\",\n        shell = \"/bin/bash\",\n        groups = {\"wheel\", \"docker\"},\n        create_home = true\n    })\n\n    -- Git operations\n    git.clone({\n        url = \"https://github.com/user/repo\",\n        local_path = \"/opt/repo\",\n        clean = false\n    })\n\n    -- File operations\n    file_ops.copy({src = \"/source\", dest = \"/dest\"})\n    file_ops.mkdir({path = \"/opt/app\", mode = \"0755\"})\n\n    -- Stow (dotfiles management)\n    stow.link({\n        package = \"zsh\",\n        source_dir = \"/home/user/dotfiles\",\n        target_dir = \"/home/user\",\n        create_target = true\n    })\n\n    -- System facts\n    local os_info = facts.os()\n    local cpu_count = facts.cpu_count()\n\n    -- Logging\n    log.info(\"Information message\")\n    log.warn(\"Warning message\")\n    log.error(\"Error message\")\n\n    -- Shell commands\n    local result = exec.run(\"hostname\")\n\n    return true, \"All operations completed\"\nend)\n</code></pre>"},{"location":"modern-dsl/introduction/#modules-that-need-require","title":"Modules That Need require()","text":"<p>Only a few modules need <code>require()</code>:</p> <pre><code>:command(function(this, params)\n    -- Systemd module\n    local systemd = require(\"systemd\")\n    systemd.start(\"nginx\")\n    systemd.enable(\"nginx\")\n\n    -- Parallel execution\n    local goroutine = require(\"goroutine\")\n    local handle = goroutine.async(function()\n        -- runs in parallel\n    end)\n    local results = goroutine.await_all({handle})\n\n    return true, \"Done\"\nend)\n</code></pre>"},{"location":"modern-dsl/introduction/#task-dependencies","title":"Task Dependencies","text":"<p>Tasks are executed in the order they appear in the <code>tasks</code> array. For complex dependencies, use multiple workflows or order tasks explicitly:</p> <pre><code>-- Tasks execute in order: build \u2192 test \u2192 deploy\nworkflow\n    .define(\"deployment\")\n    :tasks({\n        build_task,    -- Runs first\n        test_task,     -- Runs after build\n        deploy_task    -- Runs after test\n    })\n</code></pre>"},{"location":"modern-dsl/introduction/#remote-execution","title":"Remote Execution","text":"<p>Use <code>:delegate_to()</code> to execute tasks on remote agents:</p> <pre><code>local setup_server = task(\"setup-server\")\n    :description(\"Setup remote server\")\n    :delegate_to(\"production-server\")  -- Execute on agent\n    :user(\"deployer\")                   -- Run as deployer user\n    :workdir(\"/opt/app\")                -- Set working directory\n    :command(function(this, params)\n        pkg.install({packages = {\"nginx\"}})\n        return true, \"Server configured\"\n    end)\n    :build()\n</code></pre>"},{"location":"modern-dsl/introduction/#dynamic-workflows","title":"Dynamic Workflows","text":"<p>Use Lua to generate tasks programmatically:</p> <pre><code>-- Generate tasks for multiple servers\nlocal servers = {\"web-01\", \"web-02\", \"web-03\"}\nlocal tasks = {}\n\nfor _, server in ipairs(servers) do\n    local t = task(\"setup-\" .. server)\n        :description(\"Setup \" .. server)\n        :delegate_to(server)\n        :command(function(this, params)\n            pkg.install({packages = {\"nginx\"}})\n            log.info(\"\u2713 \" .. server .. \" configured\")\n            return true, server .. \" ready\"\n        end)\n        :build()\n\n    table.insert(tasks, t)\nend\n\nworkflow\n    .define(\"multi_server_setup\")\n    :description(\"Setup multiple servers\")\n    :tasks(tasks)\n</code></pre>"},{"location":"modern-dsl/introduction/#conditional-logic","title":"Conditional Logic","text":"<p>Use Lua conditionals inside task commands:</p> <pre><code>local os_specific_setup = task(\"os-setup\")\n    :description(\"Install OS-specific packages\")\n    :command(function(this, params)\n        local os_info = facts.os()\n\n        if os_info.family == \"debian\" then\n            pkg.install({packages = {\"apt-transport-https\"}})\n        elseif os_info.family == \"redhat\" then\n            pkg.install({packages = {\"yum-utils\"}})\n        else\n            log.warn(\"Unknown OS: \" .. os_info.family)\n        end\n\n        return true, \"OS-specific setup completed\"\n    end)\n    :build()\n</code></pre>"},{"location":"modern-dsl/introduction/#error-handling","title":"Error Handling","text":"<p>Use Lua's <code>pcall</code> for safe error handling:</p> <pre><code>local safe_operation = task(\"safe-op\")\n    :description(\"Operation with error handling\")\n    :command(function(this, params)\n        local success, err = pcall(function()\n            file_ops.copy({\n                src = \"/important/file\",\n                dest = \"/backup/file\"\n            })\n        end)\n\n        if success then\n            return true, \"File backed up successfully\"\n        else\n            log.error(\"Backup failed: \" .. tostring(err))\n            return false, \"Backup failed: \" .. tostring(err)\n        end\n    end)\n    :build()\n</code></pre>"},{"location":"modern-dsl/introduction/#parallel-execution","title":"Parallel Execution","text":"<p>Execute operations in parallel using the goroutine module:</p> <pre><code>local parallel_deploy = task(\"parallel-deploy\")\n    :description(\"Deploy to multiple servers in parallel\")\n    :command(function(this, params)\n        local goroutine = require(\"goroutine\")\n\n        local servers = {\"web-01\", \"web-02\", \"web-03\"}\n        local handles = {}\n\n        -- Start parallel deployments\n        for _, server in ipairs(servers) do\n            local handle = goroutine.async(function()\n                log.info(\"Deploying to \" .. server)\n                -- Deployment logic\n                goroutine.sleep(1000)\n                return server, \"success\"\n            end)\n            table.insert(handles, handle)\n        end\n\n        -- Wait for all to complete\n        local results = goroutine.await_all(handles)\n\n        -- Process results\n        for _, result in ipairs(results) do\n            if result.success then\n                local server_name = result.values[1]\n                log.info(\"\u2705 \" .. server_name .. \" deployed\")\n            else\n                log.error(\"\u274c Failed: \" .. result.error)\n            end\n        end\n\n        return true, \"All deployments completed\"\n    end)\n    :build()\n</code></pre>"},{"location":"modern-dsl/introduction/#complete-real-world-example","title":"Complete Real-World Example","text":"<pre><code>-- User environment setup with dotfiles\nlocal install_packages = task(\"install-packages\")\n    :description(\"Install default packages\")\n    :delegate_to(\"lady-arch\")\n    :command(function(this, params)\n        local success, msg = pkg.install({\n            packages = {\"kitty-terminfo\", \"stow\", \"git\", \"zsh\", \"lsd\", \"fzf\"}\n        })\n\n        if not success then\n            return false, \"Failed to install packages: \" .. tostring(msg)\n        end\n\n        return true, \"Packages installed successfully\"\n    end)\n    :build()\n\nlocal create_user = task(\"create-user\")\n    :description(\"Create and configure user\")\n    :delegate_to(\"lady-arch\")\n    :command(function(this, params)\n        local success, msg = user.create({\n            username = \"igor\",\n            password = \"changeme123\",\n            home = \"/home/igor\",\n            shell = \"/bin/zsh\",\n            groups = {\"wheel\"},\n            create_home = true\n        })\n\n        if not success then\n            return false, \"Failed to create user: \" .. tostring(msg)\n        end\n\n        return true, \"User created successfully\"\n    end)\n    :build()\n\nlocal clone_dotfiles = task(\"clone-dotfiles\")\n    :description(\"Clone dotfiles repository\")\n    :delegate_to(\"lady-arch\")\n    :user(\"igor\")\n    :workdir(\"/home/igor\")\n    :command(function(this, params)\n        local repo, err = git.clone({\n            url = \"https://github.com/chalkan3/dotfiles.git\",\n            local_path = \"/home/igor/dotfiles\",\n            clean = false\n        })\n\n        if err then\n            return false, \"Failed to clone dotfiles: \" .. err\n        end\n\n        if repo.exists then\n            log.info(\"\u2713 Dotfiles repository already exists\")\n        else\n            log.info(\"\u2713 Dotfiles cloned successfully\")\n        end\n\n        return true, \"Dotfiles ready\"\n    end)\n    :build()\n\nlocal stow_config = task(\"stow-zsh-config\")\n    :description(\"Stow zsh configuration files\")\n    :delegate_to(\"lady-arch\")\n    :user(\"igor\")\n    :command(function(this, params)\n        -- Ensure target directory exists\n        local ok_dir, msg_dir = stow.ensure_target({\n            path = \"/home/igor/.zsh\",\n            owner = \"igor\",\n            mode = \"0755\"\n        })\n\n        if not ok_dir then\n            return false, \"Failed to create directory: \" .. msg_dir\n        end\n\n        -- Stow configuration\n        local ok_stow, msg_stow = stow.link({\n            package = \".\",\n            source_dir = \"/home/igor/dotfiles/zsh\",\n            target_dir = \"/home/igor/.zsh\",\n            create_target = true,\n            verbose = true\n        })\n\n        if not ok_stow then\n            return false, \"Failed to stow config: \" .. msg_stow\n        end\n\n        return true, \"Configuration stowed successfully\"\n    end)\n    :build()\n\nworkflow\n    .define(\"user_environment_setup\")\n    :description(\"Complete user environment setup with dotfiles\")\n    :version(\"2.0.0\")\n    :tasks({\n        install_packages,\n        create_user,\n        clone_dotfiles,\n        stow_config\n    })\n    :config({\n        timeout = \"30m\",\n        max_parallel_tasks = 1\n    })\n    :on_complete(function(success, results)\n        if success then\n            log.info(\"\ud83c\udf89 User environment setup completed successfully!\")\n            log.info(\"\ud83d\udccb Summary:\")\n            log.info(\"  \u2713 Packages installed\")\n            log.info(\"  \u2713 User created\")\n            log.info(\"  \u2713 Dotfiles cloned\")\n            log.info(\"  \u2713 Configuration stowed\")\n        else\n            log.error(\"\u274c Setup failed\")\n        end\n    end)\n</code></pre>"},{"location":"modern-dsl/introduction/#available-modules","title":"Available Modules","text":"<p>Run <code>sloth-runner modules list</code> to see all available modules:</p> <ul> <li><code>pkg</code> - Package management (apt, yum, dnf, pacman)</li> <li><code>user</code> - User and group management</li> <li><code>file_ops</code> - File operations</li> <li><code>git</code> - Git operations</li> <li><code>stow</code> - Dotfiles management with GNU Stow</li> <li><code>systemd</code> - Service management (requires <code>require()</code>)</li> <li><code>incus</code> - LXC/VM container management</li> <li><code>facts</code> - System information</li> <li><code>goroutine</code> - Parallel execution (requires <code>require()</code>)</li> <li><code>exec</code> - Shell command execution</li> <li><code>log</code> - Logging functions</li> <li>And many more...</li> </ul>"},{"location":"modern-dsl/introduction/#best-practices","title":"Best Practices","text":"<ol> <li>Always call <code>:build()</code> - Tasks must end with <code>:build()</code></li> <li>Use descriptive names - Make task and workflow names self-documenting</li> <li>Add descriptions - Document what each task does</li> <li>Handle errors - Use <code>pcall</code> for critical operations</li> <li>Log appropriately - Use <code>log.info</code>, <code>log.warn</code>, <code>log.error</code></li> <li>Delegate wisely - Use <code>:delegate_to()</code> for remote execution</li> <li>Set timeouts - Prevent hanging tasks with <code>:timeout()</code></li> <li>Keep focused - One responsibility per task</li> <li>Test incrementally - Build and test tasks individually</li> </ol>"},{"location":"modern-dsl/introduction/#quick-reference-template","title":"Quick Reference Template","text":"<pre><code>-- Define tasks\nlocal my_task = task(\"task-name\")\n    :description(\"What this task does\")\n    :delegate_to(\"agent-name\")  -- Optional: remote execution\n    :user(\"username\")            -- Optional: run as user\n    :workdir(\"/path\")            -- Optional: working directory\n    :timeout(\"5m\")               -- Optional: timeout\n    :retries(3)                  -- Optional: retry count\n    :command(function(this, params)\n        -- Your code here\n\n        -- Return success\n        return true, \"Success message\"\n\n        -- Or return failure\n        -- return false, \"Error message\"\n    end)\n    :build()  -- Required!\n\n-- Compose workflow\nworkflow\n    .define(\"workflow_name\")\n    :description(\"What this workflow does\")\n    :version(\"1.0.0\")\n    :tasks({my_task})  -- Array of tasks\n    :config({\n        timeout = \"30m\",\n        max_parallel_tasks = 1\n    })\n    :on_complete(function(success, results)\n        if success then\n            log.info(\"\u2705 Workflow completed!\")\n        end\n    end)\n</code></pre>"},{"location":"modern-dsl/introduction/#next-steps","title":"Next Steps","text":"<ul> <li>\ud83d\udcda Module API Examples - Real-world module usage</li> <li>\ud83c\udfaf Best Practices - Advanced patterns</li> <li>\ud83d\udcd6 Reference Guide - Complete API reference</li> <li>\ud83d\udd27 Modules List - All available modules</li> </ul> <p>Start building powerful, composable workflows with the Modern DSL Builder Pattern!</p>"},{"location":"modern-dsl/module-api-examples/","title":"\ud83d\udcda Module API Examples - Modern DSL","text":"<p>This guide provides comprehensive examples of using Sloth Runner modules with the Modern DSL. All examples follow best practices and demonstrate real-world scenarios.</p>"},{"location":"modern-dsl/module-api-examples/#package-management-module-pkg","title":"\ud83d\udce6 Package Management Module (<code>pkg</code>)","text":"<p>The package management module provides cross-platform package installation and management.</p>"},{"location":"modern-dsl/module-api-examples/#basic-package-installation","title":"Basic Package Installation","text":"<pre><code>name = \"package-setup\"\nversion = \"1.0.0\"\n\ngroup \"system_packages\" {\n    task \"update_repositories\" {\n        module = \"pkg\",\n        action = \"update\",\n        -- Automatically detects the package manager (apt, yum, dnf, etc.)\n    }\n\n    task \"install_essentials\" {\n        module = \"pkg\",\n        action = \"install\",\n        packages = {\"curl\", \"git\", \"vim\", \"htop\"},\n        state = \"present\"  -- Ensure packages are installed\n    }\n\n    task \"install_development_tools\" {\n        module = \"pkg\",\n        action = \"install\",\n        packages = {\"gcc\", \"make\", \"python3-pip\", \"nodejs\", \"npm\"},\n        state = \"latest\"  -- Ensure latest versions\n    }\n}\n</code></pre>"},{"location":"modern-dsl/module-api-examples/#advanced-package-management","title":"Advanced Package Management","text":"<pre><code>-- Package management with version control\ngroup \"versioned_packages\" {\n    task \"install_specific_versions\" {\n        module = \"pkg\",\n        action = \"install\",\n        packages = {\n            {name = \"postgresql\", version = \"14\"},\n            {name = \"redis\", version = \"7.0*\"},\n            {name = \"nginx\", version = \"&gt;=1.20\"}\n        }\n    }\n\n    task \"remove_unwanted\" {\n        module = \"pkg\",\n        action = \"remove\",\n        packages = {\"apache2\", \"mysql-server\"},\n        state = \"absent\",\n        purge = true  -- Remove configuration files too\n    }\n}\n</code></pre>"},{"location":"modern-dsl/module-api-examples/#systemd-module","title":"\u2699\ufe0f Systemd Module","text":"<p>Managing system services with the systemd module.</p>"},{"location":"modern-dsl/module-api-examples/#service-management","title":"Service Management","text":"<pre><code>group \"service_configuration\" {\n    task \"configure_nginx\" {\n        module = \"systemd\",\n        action = \"service\",\n        name = \"nginx\",\n        state = \"started\",\n        enabled = true,\n        daemon_reload = true  -- Reload systemd if unit files changed\n    }\n\n    task \"configure_multiple_services\" {\n        module = \"systemd\",\n        action = \"multi_service\",\n        services = {\n            {name = \"postgresql\", state = \"started\", enabled = true},\n            {name = \"redis\", state = \"started\", enabled = true},\n            {name = \"memcached\", state = \"stopped\", enabled = false}\n        }\n    }\n}\n</code></pre>"},{"location":"modern-dsl/module-api-examples/#custom-service-creation","title":"Custom Service Creation","text":"<pre><code>group \"custom_service\" {\n    task \"create_app_service\" {\n        module = \"fs\",\n        action = \"write\",\n        path = \"/etc/systemd/system/myapp.service\",\n        content = [[\n[Unit]\nDescription=My Application\nAfter=network.target\n\n[Service]\nType=simple\nUser=appuser\nWorkingDirectory=/opt/myapp\nExecStart=/opt/myapp/bin/start.sh\nRestart=always\nRestartSec=10\n\n[Install]\nWantedBy=multi-user.target\n        ]],\n        mode = \"0644\"\n    }\n\n    task \"reload_and_start\" {\n        module = \"systemd\",\n        action = \"daemon_reload\"\n    }\n\n    task \"start_custom_service\" {\n        module = \"systemd\",\n        action = \"service\",\n        name = \"myapp\",\n        state = \"started\",\n        enabled = true\n    }\n}\n</code></pre>"},{"location":"modern-dsl/module-api-examples/#docker-module","title":"\ud83d\udc33 Docker Module","text":"<p>Container management with Docker.</p>"},{"location":"modern-dsl/module-api-examples/#container-deployment","title":"Container Deployment","text":"<pre><code>group \"docker_deployment\" {\n    task \"pull_images\" {\n        module = \"docker\",\n        action = \"pull\",\n        images = {\n            \"nginx:latest\",\n            \"postgres:14-alpine\",\n            \"redis:7-alpine\"\n        }\n    }\n\n    task \"run_database\" {\n        module = \"docker\",\n        action = \"container\",\n        name = \"app-postgres\",\n        image = \"postgres:14-alpine\",\n        state = \"started\",\n        restart_policy = \"always\",\n        environment = {\n            POSTGRES_DB = \"myapp\",\n            POSTGRES_USER = \"appuser\",\n            POSTGRES_PASSWORD = state.get(\"db_password\")\n        },\n        volumes = {\n            \"/data/postgres:/var/lib/postgresql/data\"\n        },\n        ports = {\"5432:5432\"}\n    }\n\n    task \"run_application\" {\n        module = \"docker\",\n        action = \"container\",\n        name = \"myapp\",\n        image = \"myapp:latest\",\n        state = \"started\",\n        restart_policy = \"always\",\n        environment = {\n            DATABASE_URL = \"postgresql://appuser@app-postgres/myapp\",\n            REDIS_URL = \"redis://app-redis:6379\"\n        },\n        links = {\"app-postgres\", \"app-redis\"},\n        ports = {\"80:3000\"},\n        healthcheck = {\n            test = [\"CMD\", \"curl\", \"-f\", \"http://localhost:3000/health\"],\n            interval = \"30s\",\n            timeout = \"10s\",\n            retries = 3\n        }\n    }\n}\n</code></pre>"},{"location":"modern-dsl/module-api-examples/#docker-compose","title":"Docker Compose","text":"<pre><code>group \"compose_deployment\" {\n    task \"deploy_stack\" {\n        module = \"docker\",\n        action = \"compose\",\n        project_name = \"myapp\",\n        compose_file = \"./docker-compose.yml\",\n        state = \"present\",\n        pull = true,\n        build = true\n    }\n\n    task \"scale_services\" {\n        module = \"docker\",\n        action = \"compose_scale\",\n        project_name = \"myapp\",\n        services = {\n            web = 3,\n            worker = 2\n        }\n    }\n}\n</code></pre>"},{"location":"modern-dsl/module-api-examples/#terraform-module","title":"\ud83c\udfd7\ufe0f Terraform Module","text":"<p>Infrastructure as Code with Terraform.</p>"},{"location":"modern-dsl/module-api-examples/#complete-terraform-workflow","title":"Complete Terraform Workflow","text":"<pre><code>group \"terraform_infrastructure\" {\n    description = \"Deploy AWS infrastructure with Terraform\",\n\n    task \"init_terraform\" {\n        module = \"terraform\",\n        action = \"init\",\n        working_dir = \"./terraform/environments/production\",\n        backend_config = {\n            bucket = \"terraform-state-bucket\",\n            key = \"production/terraform.tfstate\",\n            region = \"us-east-1\"\n        }\n    }\n\n    task \"plan_infrastructure\" {\n        module = \"terraform\",\n        action = \"plan\",\n        working_dir = \"./terraform/environments/production\",\n        var_file = \"./terraform/environments/production/terraform.tfvars\",\n        out = \"/tmp/production.tfplan\",\n        variables = {\n            environment = \"production\",\n            instance_count = 3\n        }\n    }\n\n    task \"apply_infrastructure\" {\n        module = \"terraform\",\n        action = \"apply\",\n        working_dir = \"./terraform/environments/production\",\n        plan_file = \"/tmp/production.tfplan\",\n        auto_approve = true,\n\n        on_success = function(result)\n            -- Store outputs in state\n            local outputs = terraform.get_outputs({\n                working_dir = \"./terraform/environments/production\"\n            })\n            state.set(\"vpc_id\", outputs.vpc_id)\n            state.set(\"subnet_ids\", outputs.subnet_ids)\n            log.info(\"Infrastructure deployed: VPC \" .. outputs.vpc_id)\n        end\n    }\n}\n</code></pre>"},{"location":"modern-dsl/module-api-examples/#git-module","title":"\ud83d\udd00 Git Module","text":"<p>Version control operations.</p>"},{"location":"modern-dsl/module-api-examples/#git-operations","title":"Git Operations","text":"<pre><code>group \"git_operations\" {\n    task \"clone_repository\" {\n        module = \"git\",\n        action = \"clone\",\n        repository = \"https://github.com/myorg/myapp.git\",\n        dest = \"/opt/myapp\",\n        branch = \"main\",\n        depth = 1  -- Shallow clone for faster operation\n    }\n\n    task \"update_code\" {\n        module = \"git\",\n        action = \"pull\",\n        repo_path = \"/opt/myapp\",\n        branch = \"main\",\n\n        before = function()\n            -- Save current commit hash\n            local current = git.get_commit({path = \"/opt/myapp\"})\n            state.set(\"previous_commit\", current)\n        end,\n\n        after = function()\n            local new_commit = git.get_commit({path = \"/opt/myapp\"})\n            log.info(\"Updated from \" .. state.get(\"previous_commit\") .. \" to \" .. new_commit)\n        end\n    }\n\n    task \"tag_release\" {\n        module = \"git\",\n        action = \"tag\",\n        repo_path = \"/opt/myapp\",\n        tag = \"v\" .. state.get(\"version\"),\n        message = \"Release version \" .. state.get(\"version\"),\n        push = true\n    }\n}\n</code></pre>"},{"location":"modern-dsl/module-api-examples/#stow-module-dotfiles-management","title":"\ud83d\udd17 Stow Module (Dotfiles Management)","text":"<p>Managing dotfiles and configuration symlinks.</p>"},{"location":"modern-dsl/module-api-examples/#dotfiles-setup","title":"Dotfiles Setup","text":"<pre><code>group \"dotfiles_management\" {\n    task \"clone_dotfiles\" {\n        module = \"git\",\n        action = \"clone\",\n        repository = \"https://github.com/user/dotfiles.git\",\n        dest = \"$HOME/.dotfiles\"\n    }\n\n    task \"stow_configurations\" {\n        module = \"stow\",\n        action = \"stow\",\n        source = \"$HOME/.dotfiles\",\n        packages = {\"vim\", \"tmux\", \"zsh\", \"git\"},\n        target = \"$HOME\",\n\n        on_conflict = function(conflict)\n            log.warn(\"Conflict detected: \" .. conflict.file)\n            -- Backup existing file\n            fs.move({\n                src = conflict.file,\n                dest = conflict.file .. \".backup\"\n            })\n            return \"retry\"  -- Retry stow operation\n        end\n    }\n\n    task \"unstow_old_configs\" {\n        module = \"stow\",\n        action = \"unstow\",\n        source = \"$HOME/.dotfiles\",\n        packages = {\"old-config\"},\n        target = \"$HOME\"\n    }\n}\n</code></pre>"},{"location":"modern-dsl/module-api-examples/#incus-module-lxcvm-management","title":"\ud83d\udce6 Incus Module (LXC/VM Management)","text":"<p>Container and VM orchestration with Incus.</p>"},{"location":"modern-dsl/module-api-examples/#container-creation-and-management","title":"Container Creation and Management","text":"<pre><code>group \"incus_containers\" {\n    task \"create_web_container\" {\n        module = \"incus\",\n        action = \"container\",\n        name = \"web-01\",\n        image = \"ubuntu:22.04\",\n        state = \"started\",\n        profiles = {\"default\", \"web\"},\n        config = {\n            \"limits.cpu\" = \"2\",\n            \"limits.memory\" = \"2GB\",\n            \"security.nesting\" = \"true\"\n        },\n        devices = {\n            root = {\n                type = \"disk\",\n                pool = \"default\",\n                size = \"20GB\"\n            },\n            eth0 = {\n                type = \"nic\",\n                network = \"lxdbr0\",\n                [\"ipv4.address\"] = \"10.0.0.100\"\n            }\n        }\n    }\n\n    task \"configure_container\" {\n        module = \"incus\",\n        action = \"exec\",\n        container = \"web-01\",\n        command = {\n            \"apt-get\", \"update\", \"&amp;&amp;\",\n            \"apt-get\", \"install\", \"-y\", \"nginx\"\n        }\n    }\n\n    task \"snapshot_container\" {\n        module = \"incus\",\n        action = \"snapshot\",\n        container = \"web-01\",\n        name = \"after-nginx-install\",\n        stateful = false\n    }\n}\n</code></pre>"},{"location":"modern-dsl/module-api-examples/#infrastructure-testing-module-infra_test","title":"\ud83e\uddea Infrastructure Testing Module (<code>infra_test</code>)","text":"<p>Validate infrastructure state and configuration.</p>"},{"location":"modern-dsl/module-api-examples/#comprehensive-testing-suite","title":"Comprehensive Testing Suite","text":"<pre><code>group \"infrastructure_validation\" {\n    description = \"Validate deployed infrastructure\",\n\n    task \"test_web_server\" {\n        module = \"infra_test\",\n        action = \"suite\",\n        tests = {\n            -- File tests\n            {type = \"file_exists\", path = \"/etc/nginx/nginx.conf\"},\n            {type = \"file_contains\", path = \"/etc/nginx/nginx.conf\", pattern = \"worker_processes auto\"},\n            {type = \"file_mode\", path = \"/etc/nginx/nginx.conf\", mode = \"0644\"},\n            {type = \"file_owner\", path = \"/etc/nginx/nginx.conf\", owner = \"root\", group = \"root\"},\n\n            -- Service tests\n            {type = \"service_running\", name = \"nginx\"},\n            {type = \"service_enabled\", name = \"nginx\"},\n\n            -- Port tests\n            {type = \"port_listening\", port = 80, protocol = \"tcp\"},\n            {type = \"port_listening\", port = 443, protocol = \"tcp\"},\n\n            -- Process tests\n            {type = \"process_running\", pattern = \"nginx: master process\"},\n\n            -- Command tests\n            {type = \"command_succeeds\", command = \"nginx -t\"},\n            {type = \"command_output\", command = \"nginx -v\", pattern = \"nginx/1.2\"},\n\n            -- HTTP tests\n            {type = \"http_response\", url = \"http://localhost\", status = 200},\n            {type = \"http_contains\", url = \"http://localhost\", content = \"Welcome\"},\n\n            -- SSL tests\n            {type = \"ssl_certificate_valid\", host = \"example.com\", port = 443},\n            {type = \"ssl_days_remaining\", host = \"example.com\", min_days = 30}\n        },\n\n        on_failure = function(test, error)\n            notification.send(\"slack\", {\n                channel = \"#ops-alerts\",\n                message = \"Infrastructure test failed: \" .. test.type .. \" - \" .. error\n            })\n        end\n    }\n}\n</code></pre>"},{"location":"modern-dsl/module-api-examples/#parallel-execution-with-goroutines","title":"\u26a1 Parallel Execution with Goroutines","text":"<p>Execute tasks concurrently for improved performance.</p>"},{"location":"modern-dsl/module-api-examples/#parallel-multi-server-deployment","title":"Parallel Multi-Server Deployment","text":"<pre><code>group \"parallel_deployment\" {\n    task \"deploy_to_all_servers\" {\n        module = \"goroutine\",\n        action = \"parallel\",\n\n        execute = function()\n            local servers = {\"web-01\", \"web-02\", \"web-03\", \"app-01\", \"app-02\"}\n            local results = {}\n            local wg = goroutine.WaitGroup()\n\n            for _, server in ipairs(servers) do\n                wg:Add(1)\n                goroutine.Go(function()\n                    log.info(\"Deploying to \" .. server)\n\n                    -- Copy application files\n                    fs.sync({\n                        source = \"./dist/\",\n                        dest = server .. \":/opt/app/\",\n                        delete = true\n                    })\n\n                    -- Restart service\n                    systemd.restart({\n                        service = \"myapp\",\n                        host = server\n                    })\n\n                    -- Verify deployment\n                    local ok = infra_test.http_response({\n                        url = \"http://\" .. server .. \":3000/health\",\n                        status = 200\n                    })\n\n                    results[server] = ok\n                    wg:Done()\n                end)\n            end\n\n            wg:Wait()\n\n            -- Check results\n            local failed = {}\n            for server, ok in pairs(results) do\n                if not ok then\n                    table.insert(failed, server)\n                end\n            end\n\n            if #failed &gt; 0 then\n                return false, \"Deployment failed on: \" .. table.concat(failed, \", \")\n            end\n\n            return true, \"Successfully deployed to all servers\"\n        end\n    }\n}\n</code></pre>"},{"location":"modern-dsl/module-api-examples/#parallel-cloud-provisioning","title":"Parallel Cloud Provisioning","text":"<pre><code>group \"multi_cloud_provisioning\" {\n    task \"provision_all_clouds\" {\n        module = \"goroutine\",\n        action = \"parallel\",\n\n        execute = function()\n            local tasks = {\n                aws = function()\n                    terraform.apply({\n                        working_dir = \"./terraform/aws\",\n                        auto_approve = true\n                    })\n                end,\n\n                azure = function()\n                    terraform.apply({\n                        working_dir = \"./terraform/azure\",\n                        auto_approve = true\n                    })\n                end,\n\n                gcp = function()\n                    terraform.apply({\n                        working_dir = \"./terraform/gcp\",\n                        auto_approve = true\n                    })\n                end\n            }\n\n            local results = goroutine.RunParallel(tasks)\n\n            for cloud, result in pairs(results) do\n                if not result.success then\n                    log.error(cloud .. \" provisioning failed: \" .. result.error)\n                    return false, \"Multi-cloud provisioning failed\"\n                end\n            end\n\n            return true, \"All clouds provisioned successfully\"\n        end\n    }\n}\n</code></pre>"},{"location":"modern-dsl/module-api-examples/#state-management-module","title":"\ud83d\udcbe State Management Module","text":"<p>Persistent state management across task executions.</p>"},{"location":"modern-dsl/module-api-examples/#state-operations","title":"State Operations","text":"<pre><code>group \"state_management\" {\n    task \"save_deployment_info\" {\n        module = \"state\",\n        action = \"batch\",\n\n        operations = function()\n            -- Set multiple values\n            state.set(\"deployment.version\", \"2.1.0\")\n            state.set(\"deployment.timestamp\", os.time())\n            state.set(\"deployment.commit\", git.get_commit({path = \".\"}))\n\n            -- Set complex objects\n            state.set(\"deployment.servers\", {\n                web = {\"web-01\", \"web-02\"},\n                app = {\"app-01\", \"app-02\"},\n                db = {\"db-01\"}\n            })\n\n            -- Increment counter\n            local deploy_count = state.get(\"deployment.count\", 0)\n            state.set(\"deployment.count\", deploy_count + 1)\n\n            -- Conditional state\n            if state.get(\"environment\") == \"production\" then\n                state.set(\"deployment.approval_required\", true)\n            end\n        end\n    }\n\n    task \"load_previous_state\" {\n        module = \"state\",\n        action = \"load\",\n\n        execute = function()\n            local last_version = state.get(\"deployment.version\", \"unknown\")\n            local last_timestamp = state.get(\"deployment.timestamp\", 0)\n\n            if last_timestamp &gt; 0 then\n                local last_date = os.date(\"%Y-%m-%d %H:%M:%S\", last_timestamp)\n                log.info(\"Last deployment: \" .. last_version .. \" at \" .. last_date)\n            end\n\n            -- Get nested values\n            local servers = state.get(\"deployment.servers\")\n            if servers then\n                for role, list in pairs(servers) do\n                    log.info(role .. \" servers: \" .. table.concat(list, \", \"))\n                end\n            end\n        end\n    }\n}\n</code></pre>"},{"location":"modern-dsl/module-api-examples/#notifications-module","title":"\ud83d\udd14 Notifications Module","text":"<p>Send notifications to various channels.</p>"},{"location":"modern-dsl/module-api-examples/#multi-channel-notifications","title":"Multi-Channel Notifications","text":"<pre><code>group \"notifications\" {\n    task \"send_deployment_notifications\" {\n        module = \"notification\",\n        action = \"multi_send\",\n\n        execute = function()\n            local version = state.get(\"deployment.version\")\n            local environment = state.get(\"environment\")\n\n            -- Slack notification\n            notification.send(\"slack\", {\n                webhook_url = os.getenv(\"SLACK_WEBHOOK\"),\n                channel = \"#deployments\",\n                username = \"Deployment Bot\",\n                icon_emoji = \":rocket:\",\n                message = \"Deployment started\",\n                attachments = {\n                    {\n                        color = \"good\",\n                        title = \"Deployment Details\",\n                        fields = {\n                            {title = \"Version\", value = version, short = true},\n                            {title = \"Environment\", value = environment, short = true},\n                            {title = \"Triggered by\", value = os.getenv(\"USER\"), short = true}\n                        }\n                    }\n                }\n            })\n\n            -- Email notification\n            notification.send(\"email\", {\n                to = {\"ops-team@example.com\"},\n                subject = \"Deployment: \" .. version,\n                body = \"Deployment of version \" .. version .. \" to \" .. environment .. \" has started.\",\n                smtp_server = \"smtp.example.com\",\n                smtp_port = 587,\n                smtp_user = \"notifications@example.com\",\n                smtp_password = os.getenv(\"SMTP_PASSWORD\")\n            })\n\n            -- Discord notification\n            notification.send(\"discord\", {\n                webhook_url = os.getenv(\"DISCORD_WEBHOOK\"),\n                content = \"**Deployment Alert**\",\n                embeds = {\n                    {\n                        title = \"New Deployment\",\n                        description = \"Version \" .. version .. \" is being deployed\",\n                        color = 5763719,  -- Green\n                        fields = {\n                            {name = \"Environment\", value = environment},\n                            {name = \"Status\", value = \"In Progress\"}\n                        }\n                    }\n                }\n            })\n        end\n    }\n}\n</code></pre>"},{"location":"modern-dsl/module-api-examples/#network-module","title":"\ud83c\udf10 Network Module","text":"<p>Network operations and testing.</p>"},{"location":"modern-dsl/module-api-examples/#network-configuration-and-testing","title":"Network Configuration and Testing","text":"<pre><code>group \"network_setup\" {\n    task \"configure_firewall\" {\n        module = \"net\",\n        action = \"firewall\",\n        rules = {\n            {action = \"allow\", port = 22, protocol = \"tcp\", source = \"10.0.0.0/8\"},\n            {action = \"allow\", port = 80, protocol = \"tcp\"},\n            {action = \"allow\", port = 443, protocol = \"tcp\"},\n            {action = \"deny\", port = 3306, protocol = \"tcp\", source = \"0.0.0.0/0\"}\n        }\n    }\n\n    task \"test_connectivity\" {\n        module = \"net\",\n        action = \"test\",\n        tests = {\n            {type = \"ping\", host = \"8.8.8.8\", count = 3},\n            {type = \"tcp\", host = \"github.com\", port = 443},\n            {type = \"http\", url = \"https://api.github.com\", status = 200},\n            {type = \"dns\", hostname = \"example.com\", expected = \"93.184.216.34\"}\n        }\n    }\n\n    task \"download_artifacts\" {\n        module = \"net\",\n        action = \"download\",\n        downloads = {\n            {\n                url = \"https://releases.example.com/app-v2.tar.gz\",\n                dest = \"/tmp/app.tar.gz\",\n                checksum = \"sha256:abcdef123456...\",\n                headers = {\n                    [\"Authorization\"] = \"Bearer \" .. os.getenv(\"GITHUB_TOKEN\")\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"modern-dsl/module-api-examples/#complete-real-world-example","title":"\ud83d\udcca Complete Real-World Example","text":"<p>A complete deployment pipeline using multiple modules:</p> <pre><code>name = \"production-deployment\"\nversion = \"1.0.0\"\ndescription = \"Complete production deployment pipeline\"\n\n-- Configuration\nlocal config = {\n    app_name = \"myapp\",\n    environment = \"production\",\n    version = os.getenv(\"VERSION\") or \"latest\",\n    servers = {\n        web = {\"web-01\", \"web-02\", \"web-03\"},\n        app = {\"app-01\", \"app-02\"},\n        db = {\"db-01\", \"db-02\"}\n    }\n}\n\n-- Pre-deployment checks\ngroup \"pre_deployment\" {\n    task \"validate_environment\" {\n        module = \"infra_test\",\n        action = \"suite\",\n        tests = {\n            -- Check all servers are accessible\n            {type = \"ping\", hosts = config.servers.web},\n            {type = \"ping\", hosts = config.servers.app},\n            {type = \"ping\", hosts = config.servers.db},\n\n            -- Check required services\n            {type = \"service_running\", name = \"docker\", hosts = config.servers.app},\n            {type = \"port_listening\", port = 5432, hosts = config.servers.db}\n        }\n    }\n\n    task \"backup_database\" {\n        module = \"exec\",\n        action = \"command\",\n        command = \"pg_dump -h db-01 -U postgres myapp &gt; /backups/myapp-$(date +%Y%m%d-%H%M%S).sql\",\n        host = \"backup-server\"\n    }\n}\n\n-- Build and prepare\ngroup \"build\" {\n    task \"build_application\" {\n        module = \"docker\",\n        action = \"build\",\n        context = \"./\",\n        dockerfile = \"./Dockerfile\",\n        tag = config.app_name .. \":\" .. config.version,\n        build_args = {\n            VERSION = config.version,\n            BUILD_DATE = os.date(\"%Y-%m-%d\")\n        }\n    }\n\n    task \"push_to_registry\" {\n        module = \"docker\",\n        action = \"push\",\n        image = config.app_name .. \":\" .. config.version,\n        registry = \"registry.example.com\"\n    }\n}\n\n-- Deploy to servers\ngroup \"deployment\" {\n    task \"deploy_web_servers\" {\n        module = \"goroutine\",\n        action = \"parallel\",\n\n        execute = function()\n            local tasks = {}\n\n            for _, server in ipairs(config.servers.web) do\n                tasks[server] = function()\n                    -- Update nginx config\n                    fs.template({\n                        source = \"./templates/nginx.conf.j2\",\n                        dest = \"/etc/nginx/sites-available/\" .. config.app_name,\n                        variables = {\n                            app_name = config.app_name,\n                            upstream_servers = config.servers.app\n                        },\n                        host = server\n                    })\n\n                    -- Reload nginx\n                    systemd.reload({\n                        service = \"nginx\",\n                        host = server\n                    })\n                end\n            end\n\n            return goroutine.RunParallel(tasks)\n        end\n    }\n\n    task \"deploy_app_servers\" {\n        module = \"goroutine\",\n        action = \"parallel\",\n\n        execute = function()\n            local tasks = {}\n\n            for _, server in ipairs(config.servers.app) do\n                tasks[server] = function()\n                    -- Pull new image\n                    docker.pull({\n                        image = config.app_name .. \":\" .. config.version,\n                        host = server\n                    })\n\n                    -- Stop old container\n                    docker.stop({\n                        container = config.app_name,\n                        host = server\n                    })\n\n                    -- Start new container\n                    docker.run({\n                        name = config.app_name,\n                        image = config.app_name .. \":\" .. config.version,\n                        ports = {\"3000:3000\"},\n                        environment = {\n                            NODE_ENV = config.environment,\n                            DATABASE_URL = \"postgresql://db-01:5432/myapp\"\n                        },\n                        restart = \"always\",\n                        host = server\n                    })\n                end\n            end\n\n            return goroutine.RunParallel(tasks)\n        end\n    }\n}\n\n-- Post-deployment\ngroup \"post_deployment\" {\n    task \"verify_deployment\" {\n        module = \"infra_test\",\n        action = \"suite\",\n        tests = {\n            -- Check application health\n            {type = \"http_response\", url = \"https://example.com/health\", status = 200},\n            {type = \"http_contains\", url = \"https://example.com/version\", content = config.version},\n\n            -- Check all app servers\n            {type = \"docker_container_running\", name = config.app_name, hosts = config.servers.app}\n        }\n    }\n\n    task \"send_notifications\" {\n        module = \"notification\",\n        action = \"send\",\n        channel = \"slack\",\n        message = \"Deployment completed successfully!\",\n        details = {\n            Version = config.version,\n            Environment = config.environment,\n            Servers = table.concat(config.servers.app, \", \")\n        }\n    }\n\n    task \"update_monitoring\" {\n        module = \"exec\",\n        action = \"command\",\n        command = \"curl -X POST https://monitoring.example.com/api/deployments\",\n        data = {\n            application = config.app_name,\n            version = config.version,\n            timestamp = os.time()\n        }\n    }\n}\n\n-- Rollback group (if needed)\ngroup \"rollback\" {\n    enabled = false,  -- Enable manually if rollback needed\n\n    task \"rollback_to_previous\" {\n        module = \"state\",\n        action = \"execute\",\n\n        execute = function()\n            local previous_version = state.get(\"previous_version\")\n            if not previous_version then\n                return false, \"No previous version found\"\n            end\n\n            log.warning(\"Rolling back to version: \" .. previous_version)\n\n            -- Re-deploy previous version\n            for _, server in ipairs(config.servers.app) do\n                docker.stop({\n                    container = config.app_name,\n                    host = server\n                })\n\n                docker.run({\n                    name = config.app_name,\n                    image = config.app_name .. \":\" .. previous_version,\n                    ports = {\"3000:3000\"},\n                    restart = \"always\",\n                    host = server\n                })\n            end\n\n            return true, \"Rolled back to \" .. previous_version\n        end\n    }\n}\n</code></pre>"},{"location":"modern-dsl/module-api-examples/#best-practices","title":"\ud83c\udfaf Best Practices","text":"<ol> <li>Use Functions for Reusability: Create helper functions for common patterns</li> <li>Leverage Parallel Execution: Use goroutines for operations that can run concurrently</li> <li>Implement Proper Error Handling: Always check return values and handle failures</li> <li>Use State Management: Track deployment state for rollbacks and auditing</li> <li>Test Infrastructure: Use <code>infra_test</code> module to verify deployments</li> <li>Send Notifications: Keep team informed about deployment status</li> <li>Version Everything: Tag and version your deployments</li> <li>Document Complex Logic: Add comments to explain non-obvious code</li> </ol>"},{"location":"modern-dsl/module-api-examples/#next-steps","title":"\ud83d\udcd6 Next Steps","text":"<ul> <li>Best Practices Guide</li> <li>Reference Guide</li> <li>Migration from YAML</li> <li>Custom Module Development</li> </ul>"},{"location":"modern-dsl/reference-guide/","title":"\ud83d\udcd6 Modern DSL Reference Guide","text":"<p>Complete API reference for Sloth Runner's Modern DSL, covering all modules, functions, and patterns.</p>"},{"location":"modern-dsl/reference-guide/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Core Syntax</li> <li>Module Reference</li> <li>Global Functions</li> <li>Task Definition</li> <li>Group Definition</li> <li>State Management</li> <li>Error Handling</li> <li>Advanced Patterns</li> </ul>"},{"location":"modern-dsl/reference-guide/#core-syntax","title":"Core Syntax","text":""},{"location":"modern-dsl/reference-guide/#basic-structure","title":"Basic Structure","text":"<pre><code>-- File metadata\nname = \"workflow-name\"\nversion = \"1.0.0\"\ndescription = \"Workflow description\"\nauthor = \"Your Name\"\ntags = {\"automation\", \"deployment\"}\n\n-- Import modules (optional - most are global)\nlocal utils = require(\"lib/utils\")\n\n-- Define groups\ngroup \"group_name\" {\n    -- Group properties and tasks\n}\n\n-- Define individual tasks\ntask \"task_name\" {\n    -- Task properties\n}\n</code></pre>"},{"location":"modern-dsl/reference-guide/#module-reference","title":"Module Reference","text":""},{"location":"modern-dsl/reference-guide/#package-management-pkg","title":"Package Management (<code>pkg</code>)","text":"<pre><code>-- Update package repositories\ntask \"update_repos\" {\n    module = \"pkg\",\n    action = \"update\"\n}\n\n-- Install packages\ntask \"install_packages\" {\n    module = \"pkg\",\n    action = \"install\",\n    packages = {\"nginx\", \"postgresql\", \"redis\"},\n    state = \"present\"  -- present, absent, latest\n}\n\n-- Remove packages\ntask \"remove_packages\" {\n    module = \"pkg\",\n    action = \"remove\",\n    packages = {\"apache2\"},\n    state = \"absent\",\n    purge = true  -- Remove config files\n}\n\n-- Upgrade all packages\ntask \"upgrade_system\" {\n    module = \"pkg\",\n    action = \"upgrade\",\n    dist_upgrade = true  -- For Debian/Ubuntu\n}\n</code></pre>"},{"location":"modern-dsl/reference-guide/#systemd-service-management","title":"Systemd Service Management","text":"<pre><code>-- Manage service state\ntask \"manage_nginx\" {\n    module = \"systemd\",\n    action = \"service\",\n    name = \"nginx\",\n    state = \"started\",  -- started, stopped, restarted, reloaded\n    enabled = true,     -- Enable on boot\n    daemon_reload = true\n}\n\n-- Multiple services\ntask \"manage_services\" {\n    module = \"systemd\",\n    action = \"batch\",\n    services = {\n        {name = \"nginx\", state = \"started\", enabled = true},\n        {name = \"postgresql\", state = \"started\", enabled = true},\n        {name = \"redis\", state = \"started\", enabled = false}\n    }\n}\n\n-- Custom systemd operations\ntask \"reload_daemon\" {\n    module = \"systemd\",\n    action = \"daemon_reload\"\n}\n\ntask \"mask_service\" {\n    module = \"systemd\",\n    action = \"mask\",\n    name = \"bluetooth\"\n}\n</code></pre>"},{"location":"modern-dsl/reference-guide/#docker-operations","title":"Docker Operations","text":"<pre><code>-- Pull images\ntask \"pull_images\" {\n    module = \"docker\",\n    action = \"pull\",\n    images = {\"nginx:latest\", \"postgres:14\", \"redis:7-alpine\"}\n}\n\n-- Run container\ntask \"run_database\" {\n    module = \"docker\",\n    action = \"container\",\n    name = \"myapp-db\",\n    image = \"postgres:14\",\n    state = \"started\",\n    ports = {\"5432:5432\"},\n    volumes = {\n        \"/data/postgres:/var/lib/postgresql/data\",\n        \"myapp-config:/etc/postgresql\"\n    },\n    environment = {\n        POSTGRES_DB = \"myapp\",\n        POSTGRES_USER = \"appuser\",\n        POSTGRES_PASSWORD = \"${DB_PASSWORD}\"  -- From environment\n    },\n    networks = {\"myapp-network\"},\n    restart = \"unless-stopped\",\n    healthcheck = {\n        test = [\"CMD\", \"pg_isready\", \"-U\", \"appuser\"],\n        interval = \"30s\",\n        timeout = \"10s\",\n        retries = 3\n    }\n}\n\n-- Docker Compose\ntask \"deploy_stack\" {\n    module = \"docker\",\n    action = \"compose\",\n    project = \"myapp\",\n    compose_files = {\"docker-compose.yml\", \"docker-compose.prod.yml\"},\n    env_file = \".env.production\",\n    pull = true,\n    build = true,\n    remove_orphans = true\n}\n\n-- Build image\ntask \"build_app\" {\n    module = \"docker\",\n    action = \"build\",\n    tag = \"myapp:${VERSION}\",\n    context = \".\",\n    dockerfile = \"Dockerfile.prod\",\n    build_args = {\n        VERSION = \"${VERSION}\",\n        BUILD_DATE = os.date(\"%Y-%m-%d\")\n    },\n    labels = {\n        maintainer = \"team@example.com\",\n        version = \"${VERSION}\"\n    }\n}\n</code></pre>"},{"location":"modern-dsl/reference-guide/#terraform-infrastructure","title":"Terraform Infrastructure","text":"<pre><code>-- Initialize Terraform\ntask \"terraform_init\" {\n    module = \"terraform\",\n    action = \"init\",\n    working_dir = \"./terraform/production\",\n    backend = true,\n    backend_config = {\n        bucket = \"terraform-state\",\n        key = \"production/terraform.tfstate\",\n        region = \"us-east-1\"\n    }\n}\n\n-- Plan changes\ntask \"terraform_plan\" {\n    module = \"terraform\",\n    action = \"plan\",\n    working_dir = \"./terraform/production\",\n    var_file = \"production.tfvars\",\n    variables = {\n        environment = \"production\",\n        region = \"us-east-1\"\n    },\n    out = \"production.tfplan\",\n    refresh = true\n}\n\n-- Apply changes\ntask \"terraform_apply\" {\n    module = \"terraform\",\n    action = \"apply\",\n    working_dir = \"./terraform/production\",\n    plan_file = \"production.tfplan\",\n    auto_approve = true,\n    parallelism = 10\n}\n\n-- Destroy infrastructure\ntask \"terraform_destroy\" {\n    module = \"terraform\",\n    action = \"destroy\",\n    working_dir = \"./terraform/production\",\n    var_file = \"production.tfvars\",\n    auto_approve = false,  -- Require confirmation\n    target = [\"aws_instance.web\"]  -- Specific resources\n}\n</code></pre>"},{"location":"modern-dsl/reference-guide/#git-operations","title":"Git Operations","text":"<pre><code>-- Clone repository\ntask \"clone_repo\" {\n    module = \"git\",\n    action = \"clone\",\n    repository = \"https://github.com/myorg/myapp.git\",\n    dest = \"/opt/myapp\",\n    branch = \"main\",\n    depth = 1,  -- Shallow clone\n    single_branch = true\n}\n\n-- Pull latest changes\ntask \"update_code\" {\n    module = \"git\",\n    action = \"pull\",\n    repo_path = \"/opt/myapp\",\n    branch = \"main\",\n    rebase = true,\n    force = false\n}\n\n-- Checkout branch/tag\ntask \"checkout_version\" {\n    module = \"git\",\n    action = \"checkout\",\n    repo_path = \"/opt/myapp\",\n    ref = \"v${VERSION}\",  -- Can be branch, tag, or commit\n    create = false  -- Don't create new branch\n}\n\n-- Create and push tag\ntask \"tag_release\" {\n    module = \"git\",\n    action = \"tag\",\n    repo_path = \"/opt/myapp\",\n    tag = \"v${VERSION}\",\n    message = \"Release version ${VERSION}\",\n    push = true,\n    force = false\n}\n</code></pre>"},{"location":"modern-dsl/reference-guide/#file-system-operations","title":"File System Operations","text":"<pre><code>-- Create directory\ntask \"create_dirs\" {\n    module = \"fs\",\n    action = \"mkdir\",\n    paths = {\"/opt/myapp\", \"/var/log/myapp\", \"/etc/myapp\"},\n    mode = \"0755\",\n    parents = true  -- Create parent directories\n}\n\n-- Copy files\ntask \"copy_config\" {\n    module = \"fs\",\n    action = \"copy\",\n    src = \"./configs/app.conf\",\n    dest = \"/etc/myapp/app.conf\",\n    mode = \"0644\",\n    owner = \"appuser\",\n    group = \"appgroup\",\n    backup = true  -- Backup existing file\n}\n\n-- Template file\ntask \"render_config\" {\n    module = \"fs\",\n    action = \"template\",\n    src = \"./templates/nginx.conf.j2\",\n    dest = \"/etc/nginx/sites-available/myapp\",\n    variables = {\n        server_name = \"example.com\",\n        app_port = 3000,\n        ssl_cert = \"/etc/ssl/certs/example.com.crt\"\n    },\n    mode = \"0644\",\n    validate = \"nginx -t -c %s\"  -- Validate before replacing\n}\n\n-- Manage symlinks\ntask \"create_symlink\" {\n    module = \"fs\",\n    action = \"symlink\",\n    src = \"/etc/nginx/sites-available/myapp\",\n    dest = \"/etc/nginx/sites-enabled/myapp\",\n    force = true\n}\n\n-- Archive operations\ntask \"create_backup\" {\n    module = \"fs\",\n    action = \"archive\",\n    src = \"/opt/myapp\",\n    dest = \"/backups/myapp-${TIMESTAMP}.tar.gz\",\n    format = \"tar.gz\",\n    exclude = {\".git\", \"node_modules\", \"*.log\"}\n}\n</code></pre>"},{"location":"modern-dsl/reference-guide/#incuslxd-container-management","title":"Incus/LXD Container Management","text":"<pre><code>-- Create container\ntask \"create_container\" {\n    module = \"incus\",\n    action = \"container\",\n    name = \"web-01\",\n    image = \"ubuntu:22.04\",\n    state = \"started\",\n    profiles = {\"default\", \"web\"},\n    config = {\n        \"limits.cpu\" = \"2\",\n        \"limits.memory\" = \"2GB\",\n        \"boot.autostart\" = \"true\"\n    },\n    devices = {\n        root = {\n            type = \"disk\",\n            pool = \"default\",\n            size = \"20GB\"\n        },\n        eth0 = {\n            type = \"nic\",\n            network = \"lxdbr0\",\n            [\"ipv4.address\"] = \"10.0.0.100\"\n        }\n    }\n}\n\n-- Execute commands in container\ntask \"configure_container\" {\n    module = \"incus\",\n    action = \"exec\",\n    container = \"web-01\",\n    commands = {\n        \"apt-get update\",\n        \"apt-get install -y nginx\",\n        \"systemctl start nginx\"\n    }\n}\n\n-- Container snapshots\ntask \"snapshot_container\" {\n    module = \"incus\",\n    action = \"snapshot\",\n    container = \"web-01\",\n    snapshot_name = \"before-upgrade\",\n    stateful = false\n}\n\n-- Copy files to container\ntask \"deploy_to_container\" {\n    module = \"incus\",\n    action = \"file_push\",\n    container = \"web-01\",\n    src = \"./app.tar.gz\",\n    dest = \"/tmp/app.tar.gz\"\n}\n</code></pre>"},{"location":"modern-dsl/reference-guide/#infrastructure-testing","title":"Infrastructure Testing","text":"<pre><code>-- Test suite\ntask \"validate_infrastructure\" {\n    module = \"infra_test\",\n    action = \"suite\",\n    tests = {\n        -- File tests\n        {type = \"file_exists\", path = \"/etc/nginx/nginx.conf\"},\n        {type = \"file_contains\", path = \"/etc/nginx/nginx.conf\",\n         pattern = \"worker_processes\"},\n        {type = \"file_mode\", path = \"/etc/ssl/private\", mode = \"0700\"},\n        {type = \"file_owner\", path = \"/var/www\", owner = \"www-data\"},\n\n        -- Directory tests\n        {type = \"directory_exists\", path = \"/opt/myapp\"},\n        {type = \"directory_empty\", path = \"/tmp/build\"},\n\n        -- Service tests\n        {type = \"service_running\", name = \"nginx\"},\n        {type = \"service_enabled\", name = \"nginx\"},\n\n        -- Port tests\n        {type = \"port_listening\", port = 80, protocol = \"tcp\"},\n        {type = \"port_reachable\", host = \"example.com\", port = 443},\n\n        -- Process tests\n        {type = \"process_running\", pattern = \"nginx: master\"},\n        {type = \"process_count\", pattern = \"worker\", min = 2, max = 8},\n\n        -- Command tests\n        {type = \"command_succeeds\", command = \"nginx -t\"},\n        {type = \"command_output\", command = \"nginx -v\",\n         contains = \"nginx/1.\"},\n\n        -- HTTP tests\n        {type = \"http_ok\", url = \"http://localhost/health\"},\n        {type = \"http_status\", url = \"https://example.com\", status = 200},\n        {type = \"http_contains\", url = \"http://localhost\",\n         text = \"Welcome\"},\n\n        -- DNS tests\n        {type = \"dns_resolves\", hostname = \"example.com\"},\n        {type = \"dns_record\", hostname = \"example.com\",\n         record_type = \"A\", expected = \"93.184.216.34\"}\n    }\n}\n</code></pre>"},{"location":"modern-dsl/reference-guide/#global-functions","title":"Global Functions","text":""},{"location":"modern-dsl/reference-guide/#logging","title":"Logging","text":"<pre><code>-- Log levels\nlog.debug(\"Debug message\")\nlog.info(\"Information message\")\nlog.warn(\"Warning message\")\nlog.error(\"Error message\")\nlog.fatal(\"Fatal error - will exit\")\n\n-- Structured logging\nlog.info(\"Processing\", {\n    file = filename,\n    size = filesize,\n    user = username\n})\n</code></pre>"},{"location":"modern-dsl/reference-guide/#state-management","title":"State Management","text":"<pre><code>-- Set state values\nstate.set(\"deployment.version\", \"1.2.3\")\nstate.set(\"deployment.timestamp\", os.time())\nstate.set(\"servers\", {\"web-01\", \"web-02\", \"web-03\"})\n\n-- Get state values\nlocal version = state.get(\"deployment.version\")\nlocal servers = state.get(\"servers\", {})  -- Default value\n\n-- Check existence\nif state.has(\"deployment.version\") then\n    -- Key exists\nend\n\n-- Delete state\nstate.delete(\"temporary.data\")\n\n-- Clear all state\nstate.clear()\n</code></pre>"},{"location":"modern-dsl/reference-guide/#facts-system-information","title":"Facts (System Information)","text":"<pre><code>-- Get OS information\nlocal os_info = facts.get_os()\n-- Returns: {family = \"debian\", distro = \"ubuntu\", version = \"22.04\"}\n\n-- Get network information\nlocal network = facts.get_network()\n-- Returns: {interfaces = {...}, routes = {...}}\n\n-- Get hardware information\nlocal hardware = facts.get_hardware()\n-- Returns: {cpu_count = 8, memory_mb = 16384, disk_gb = 500}\n\n-- Get all facts\nlocal all_facts = facts.get_all()\n\n-- Custom fact collection\nfacts.set_custom(\"app_version\", get_app_version())\nlocal custom = facts.get_custom(\"app_version\")\n</code></pre>"},{"location":"modern-dsl/reference-guide/#http-operations","title":"HTTP Operations","text":"<pre><code>-- GET request\nlocal response = http.get(\"https://api.example.com/data\", {\n    headers = {\n        [\"Authorization\"] = \"Bearer \" .. token,\n        [\"Accept\"] = \"application/json\"\n    },\n    timeout = 30\n})\n\n-- POST request\nlocal response = http.post(\"https://api.example.com/data\", {\n    body = json.encode(data),\n    headers = {\n        [\"Content-Type\"] = \"application/json\"\n    }\n})\n\n-- PUT request\nlocal response = http.put(\"https://api.example.com/data/123\", {\n    body = json.encode(updated_data)\n})\n\n-- DELETE request\nlocal response = http.delete(\"https://api.example.com/data/123\")\n\n-- Response handling\nif response.status == 200 then\n    local data = json.decode(response.body)\n    log.info(\"Success: \" .. data.message)\nelse\n    log.error(\"HTTP error: \" .. response.status)\nend\n</code></pre>"},{"location":"modern-dsl/reference-guide/#json-operations","title":"JSON Operations","text":"<pre><code>-- Encode to JSON\nlocal json_string = json.encode({\n    name = \"myapp\",\n    version = \"1.2.3\",\n    features = {\"auth\", \"api\", \"ui\"}\n})\n\n-- Decode from JSON\nlocal data = json.decode(json_string)\n\n-- Pretty print\nlocal pretty = json.encode_pretty(data, \"  \")  -- 2-space indent\n\n-- Read JSON file\nlocal config = json.decode(fs.read(\"/etc/myapp/config.json\"))\n\n-- Write JSON file\nfs.write(\"/etc/myapp/config.json\", json.encode_pretty(config))\n</code></pre>"},{"location":"modern-dsl/reference-guide/#environment-variables","title":"Environment Variables","text":"<pre><code>-- Get environment variable\nlocal home = os.getenv(\"HOME\")\nlocal token = os.getenv(\"API_TOKEN\") or \"default-token\"\n\n-- Set environment variable (for child processes)\nos.setenv(\"APP_ENV\", \"production\")\n\n-- Check if variable exists\nif os.getenv(\"DEBUG\") then\n    log.debug_enabled = true\nend\n</code></pre>"},{"location":"modern-dsl/reference-guide/#execution-control","title":"Execution Control","text":"<pre><code>-- Execute command\nlocal result = exec.run(\"ls -la /opt\")\nif result.exit_code == 0 then\n    log.info(\"Output: \" .. result.stdout)\nelse\n    log.error(\"Error: \" .. result.stderr)\nend\n\n-- Execute with timeout\nlocal result = exec.run_timeout(\"long-running-command\", 60)\n\n-- Execute in background\nlocal pid = exec.background(\"server --port 8080\")\n\n-- Check if process is running\nif exec.is_running(pid) then\n    log.info(\"Server is running\")\nend\n\n-- Kill process\nexec.kill(pid, 15)  -- SIGTERM\n</code></pre>"},{"location":"modern-dsl/reference-guide/#task-definition","title":"Task Definition","text":""},{"location":"modern-dsl/reference-guide/#complete-task-api","title":"Complete Task API","text":"<pre><code>task \"complete_example\" {\n    -- Basic properties\n    module = \"custom\",  -- Module to use\n    action = \"execute\", -- Action within module\n    description = \"Complete task example\",\n\n    -- Dependencies\n    depends_on = {\"other_task\", \"another_task\"},\n\n    -- Execution control\n    enabled = true,  -- Enable/disable task\n    when = function() return os.getenv(\"ENV\") == \"prod\" end,\n    unless = function() return file_exists(\"/tmp/skip\") end,\n\n    -- Timeout and retries\n    timeout = 300,  -- Seconds\n    retries = 3,\n    retry_delay = 5,  -- Seconds between retries\n\n    -- Main execution\n    execute = function(params)\n        -- Task logic here\n        return true, \"Success message\", {output = \"data\"}\n    end,\n\n    -- Hooks\n    before = function()\n        log.info(\"Before task execution\")\n    end,\n\n    after = function()\n        log.info(\"After task execution\")\n    end,\n\n    on_success = function(result)\n        log.info(\"Task succeeded: \" .. result.message)\n    end,\n\n    on_failure = function(error)\n        log.error(\"Task failed: \" .. error)\n        -- Cleanup or rollback\n    end,\n\n    on_retry = function(attempt, error)\n        log.warn(\"Retry \" .. attempt .. \": \" .. error)\n    end,\n\n    -- Error handling\n    ignore_errors = false,\n    continue_on_error = false,\n\n    -- Resource limits\n    max_memory = \"2GB\",\n    max_cpu = \"2\",\n\n    -- Variables\n    vars = {\n        custom_var = \"value\"\n    },\n\n    -- Register output\n    register = \"task_result\"  -- Store result in variable\n}\n</code></pre>"},{"location":"modern-dsl/reference-guide/#group-definition","title":"Group Definition","text":""},{"location":"modern-dsl/reference-guide/#complete-group-api","title":"Complete Group API","text":"<pre><code>group \"group_name\" {\n    -- Basic properties\n    description = \"Group description\",\n    tags = {\"deployment\", \"production\"},\n\n    -- Execution control\n    enabled = true,\n    when = function() return should_run() end,\n\n    -- Parallel execution\n    parallel = true,  -- Run tasks in parallel\n    max_parallel = 3,  -- Max parallel tasks\n\n    -- Error handling\n    on_error = \"continue\",  -- continue, stop, rollback\n    ignore_failures = false,\n\n    -- Hooks\n    before = function()\n        log.info(\"Starting group execution\")\n    end,\n\n    after = function()\n        log.info(\"Group execution completed\")\n    end,\n\n    on_failure = function(failed_tasks)\n        log.error(\"Group failed: \" .. #failed_tasks .. \" tasks failed\")\n    end,\n\n    -- Tasks\n    task \"task1\" {\n        module = \"shell\",\n        command = \"echo 'Task 1'\"\n    },\n\n    task \"task2\" {\n        module = \"shell\",\n        command = \"echo 'Task 2'\"\n    },\n\n    -- Can include other groups\n    include_group(\"other_group\"),\n\n    -- Variables scoped to group\n    vars = {\n        environment = \"production\"\n    }\n}\n</code></pre>"},{"location":"modern-dsl/reference-guide/#advanced-patterns","title":"Advanced Patterns","text":""},{"location":"modern-dsl/reference-guide/#parallel-execution-with-goroutines","title":"Parallel Execution with Goroutines","text":"<pre><code>task \"parallel_deployment\" {\n    module = \"goroutine\",\n    execute = function()\n        local servers = {\"web-01\", \"web-02\", \"web-03\"}\n        local wg = goroutine.WaitGroup()\n\n        for _, server in ipairs(servers) do\n            wg:Add(1)\n            goroutine.Go(function()\n                deploy_to_server(server)\n                wg:Done()\n            end)\n        end\n\n        wg:Wait()\n        return true, \"Deployed to all servers\"\n    end\n}\n</code></pre>"},{"location":"modern-dsl/reference-guide/#dynamic-task-generation","title":"Dynamic Task Generation","text":"<pre><code>-- Generate tasks based on configuration\nlocal environments = {\"dev\", \"staging\", \"prod\"}\n\nfor _, env in ipairs(environments) do\n    task(\"deploy_\" .. env) {\n        module = \"k8s\",\n        action = \"deploy\",\n        namespace = env,\n        manifest = \"./k8s/\" .. env .. \"/deployment.yaml\",\n        when = function()\n            return os.getenv(\"DEPLOY_ENV\") == env\n        end\n    }\nend\n</code></pre>"},{"location":"modern-dsl/reference-guide/#template-functions","title":"Template Functions","text":"<pre><code>-- Create reusable task templates\nfunction create_deployment_task(name, config)\n    return task(name) {\n        module = \"k8s\",\n        action = \"deploy\",\n        namespace = config.namespace,\n        image = config.image,\n        replicas = config.replicas,\n        resources = config.resources\n    }\nend\n\n-- Use template\ngroup \"deployments\" {\n    create_deployment_task(\"deploy_frontend\", {\n        namespace = \"production\",\n        image = \"frontend:latest\",\n        replicas = 3,\n        resources = {cpu = \"100m\", memory = \"256Mi\"}\n    }),\n\n    create_deployment_task(\"deploy_backend\", {\n        namespace = \"production\",\n        image = \"backend:latest\",\n        replicas = 5,\n        resources = {cpu = \"500m\", memory = \"1Gi\"}\n    })\n}\n</code></pre>"},{"location":"modern-dsl/reference-guide/#error-recovery-pattern","title":"Error Recovery Pattern","text":"<pre><code>task \"with_recovery\" {\n    module = \"custom\",\n    execute = function()\n        local success, result = pcall(function()\n            -- Main operation\n            return risky_operation()\n        end)\n\n        if not success then\n            log.warn(\"Operation failed, attempting recovery\")\n\n            -- Recovery logic\n            local recovered = attempt_recovery()\n            if recovered then\n                return true, \"Recovered from failure\"\n            else\n                return false, \"Recovery failed: \" .. result\n            end\n        end\n\n        return true, \"Operation successful\", result\n    end\n}\n</code></pre>"},{"location":"modern-dsl/reference-guide/#complete-example","title":"Complete Example","text":"<pre><code>-- production-deployment.lua\nname = \"production-deployment\"\nversion = \"2.0.0\"\ndescription = \"Production deployment with full validation\"\n\n-- Helper functions\nlocal function validate_environment()\n    local required_vars = {\"API_TOKEN\", \"DB_PASSWORD\", \"DEPLOY_KEY\"}\n    for _, var in ipairs(required_vars) do\n        if not os.getenv(var) then\n            error(\"Missing required environment variable: \" .. var)\n        end\n    end\nend\n\n-- Pre-flight checks\ngroup \"preflight\" {\n    task \"validate_env\" {\n        module = \"custom\",\n        execute = validate_environment\n    }\n\n    task \"check_services\" {\n        module = \"infra_test\",\n        tests = {\n            {type = \"service_running\", name = \"docker\"},\n            {type = \"port_reachable\", host = \"registry.example.com\", port = 443}\n        }\n    }\n}\n\n-- Build and test\ngroup \"build\" {\n    depends_on = {\"preflight\"},\n\n    task \"build_image\" {\n        module = \"docker\",\n        action = \"build\",\n        tag = \"myapp:${VERSION}\",\n        context = \".\",\n        dockerfile = \"Dockerfile.prod\"\n    }\n\n    task \"run_tests\" {\n        module = \"docker\",\n        action = \"run\",\n        image = \"myapp:${VERSION}\",\n        command = \"npm test\",\n        remove = true\n    }\n\n    task \"push_image\" {\n        module = \"docker\",\n        action = \"push\",\n        image = \"myapp:${VERSION}\",\n        registry = \"registry.example.com\"\n    }\n}\n\n-- Deploy\ngroup \"deploy\" {\n    depends_on = {\"build\"},\n    parallel = true,\n\n    task \"deploy_backend\" {\n        module = \"k8s\",\n        action = \"deploy\",\n        manifest = \"./k8s/backend.yaml\",\n        namespace = \"production\",\n        wait = true,\n        timeout = 600\n    }\n\n    task \"deploy_frontend\" {\n        module = \"k8s\",\n        action = \"deploy\",\n        manifest = \"./k8s/frontend.yaml\",\n        namespace = \"production\",\n        wait = true,\n        timeout = 600\n    }\n}\n\n-- Verify deployment\ngroup \"verify\" {\n    depends_on = {\"deploy\"},\n\n    task \"health_checks\" {\n        module = \"infra_test\",\n        tests = {\n            {type = \"http_ok\", url = \"https://api.example.com/health\"},\n            {type = \"http_ok\", url = \"https://example.com\"},\n            {type = \"http_contains\", url = \"https://example.com\",\n             text = \"Welcome\"}\n        }\n    }\n\n    task \"smoke_tests\" {\n        module = \"custom\",\n        execute = function()\n            return run_smoke_tests()\n        end\n    }\n\n    on_success = function()\n        notification.send(\"slack\", {\n            channel = \"#deployments\",\n            message = \"Production deployment successful! Version: ${VERSION}\"\n        })\n    end,\n\n    on_failure = function()\n        notification.send(\"pagerduty\", {\n            severity = \"critical\",\n            message = \"Production deployment failed!\"\n        })\n        -- Trigger rollback\n        rollback()\n    end\n}\n</code></pre>"},{"location":"modern-dsl/reference-guide/#summary","title":"Summary","text":"<p>This reference guide covers the complete Modern DSL API for Sloth Runner. Key points:</p> <ol> <li>Modules provide specialized functionality for different tasks</li> <li>Global functions are available without imports</li> <li>Tasks and groups organize your automation workflow</li> <li>Error handling ensures reliability</li> <li>Parallel execution improves performance</li> <li>Templates enable code reuse</li> </ol> <p>For more examples and patterns, see: - Module API Examples - Best Practices - Introduction</p>"},{"location":"modules/","title":"\ud83d\udce6 Modules Reference","text":"<p>Sloth Runner provides a comprehensive set of built-in modules for common operations.</p>"},{"location":"modules/#featured-examples","title":"\ud83c\udf1f Featured Examples","text":""},{"location":"modules/#incus-deploy-web-cluster-with-parallel-execution","title":"\ud83d\ude80 Incus: Deploy Web Cluster with Parallel Execution","text":"<p>Deploy a complete web cluster in seconds using Incus containers and parallel goroutines:</p> <pre><code>task({\n    name = \"deploy-web-cluster\",\n    delegate_to = \"incus-host-01\",\n    run = function()\n        -- Create isolated network\n        incus.network({\n            name = \"web-dmz\",\n            type = \"bridge\"\n        }):set_config({\n            [\"ipv4.address\"] = \"10.10.0.1/24\"\n        }):create()\n\n        -- Parallel deploy\n        goroutine.map({\"web-01\", \"web-02\", \"web-03\"}, function(name)\n            incus.instance({\n                name = name,\n                image = \"ubuntu:22.04\"\n            }):create()\n              :start()\n              :wait_running()\n              :exec(\"apt install -y nginx\")\n        end)\n    end\n})\n</code></pre> <p>\ud83d\udcd6 Full Incus Documentation \u2192</p>"},{"location":"modules/#facts-intelligent-deployment-based-on-system-state","title":"\ud83d\udcca Facts: Intelligent Deployment Based on System State","text":"<p>Use system facts to make smart deployment decisions:</p> <pre><code>task({\n    name = \"intelligent-deploy\",\n    run = function()\n        -- Collect system info\n        local info, err = facts.get_all({ agent = \"prod-server-01\" })\n\n        log.info(\"Platform: \" .. info.platform.os)\n        log.info(\"Memory: \" .. string.format(\"%.2f GB\", \n            info.memory.total / 1024 / 1024 / 1024))\n\n        -- Validate requirements\n        local mem_gb = info.memory.total / 1024 / 1024 / 1024\n        if mem_gb &lt; 4 then\n            error(\"Insufficient memory!\")\n        end\n\n        -- Check if Docker is installed\n        local docker, _ = facts.get_package({ \n            agent = \"prod-server-01\", \n            name = \"docker\" \n        })\n\n        if not docker.installed then\n            pkg.install({ packages = {\"docker.io\"} })\n               :delegate_to(\"prod-server-01\")\n        end\n\n        -- Deploy based on architecture\n        if info.platform.architecture == \"arm64\" then\n            -- Use ARM image\n        else\n            -- Use x86 image\n        end\n    end\n})\n</code></pre> <p>\ud83d\udcd6 Full Facts Documentation \u2192</p>"},{"location":"modules/#overview","title":"Overview","text":"<p>All modules are globally available - no <code>require()</code> needed! Just use them directly in your tasks.</p> <pre><code>-- Old way (still works)\nlocal pkg = require(\"pkg\")\n\n-- New way (recommended) - modules are global!\npkg.install({ packages = {\"nginx\"} })\n</code></pre>"},{"location":"modules/#core-modules","title":"Core Modules","text":""},{"location":"modules/#execution-system","title":"\u26a1 Execution &amp; System","text":"<ul> <li>exec - Execute shell commands and processes</li> <li>fs - File system operations (read, write, copy, move)</li> <li>net - Network operations (HTTP, TCP, DNS)</li> <li>log - Structured logging with levels</li> </ul>"},{"location":"modules/#testing-validation","title":"\ud83e\uddea Testing &amp; Validation \ud83d\udd25","text":"<ul> <li>infra_test - Infrastructure testing and validation (NEW!)</li> <li>Test files, permissions, services, ports, processes</li> <li>Remote agent testing support</li> <li>Fail-fast validation for deployments</li> </ul>"},{"location":"modules/#data-state","title":"\ud83d\udcbe Data &amp; State","text":"<ul> <li>state - Persistent state management</li> <li>data - Data processing (JSON, YAML, CSV)</li> <li>metrics - Metrics collection and reporting</li> </ul>"},{"location":"modules/#cloud-providers","title":"Cloud Providers","text":""},{"location":"modules/#aws","title":"\u2601\ufe0f AWS","text":"<p>AWS Module Documentation</p> <p>Amazon Web Services integration: - EC2, ECS, Lambda - S3, DynamoDB - CloudFormation - IAM, Secrets Manager</p>"},{"location":"modules/#azure","title":"\ud83d\udd37 Azure","text":"<p>Azure Module Documentation</p> <p>Microsoft Azure integration: - Virtual Machines, Container Instances - Blob Storage, Cosmos DB - ARM Templates - Key Vault</p>"},{"location":"modules/#gcp","title":"\ud83c\udf29\ufe0f GCP","text":"<p>GCP Module Documentation</p> <p>Google Cloud Platform integration: - Compute Engine, Cloud Run - Cloud Storage, Firestore - Deployment Manager - Secret Manager</p>"},{"location":"modules/#digitalocean","title":"\ud83c\udf0a DigitalOcean","text":"<p>DigitalOcean Module Documentation</p> <p>DigitalOcean integration: - Droplets, Kubernetes - Spaces (Object Storage) - Load Balancers - Databases</p>"},{"location":"modules/#infrastructure-tools","title":"Infrastructure Tools","text":""},{"location":"modules/#docker","title":"\ud83d\udc33 Docker","text":"<p>Docker Module Documentation</p> <p>Container management: - Build images - Run containers - Manage networks - Docker Compose</p>"},{"location":"modules/#kubernetes","title":"\u2638\ufe0f Kubernetes","text":"<p>Integration via kubectl and native API</p>"},{"location":"modules/#terraform","title":"\ud83c\udf0d Terraform","text":"<p>Terraform Module Documentation</p> <p>Infrastructure as Code: - Plan and apply - State management - Output parsing - Multi-workspace</p>"},{"location":"modules/#pulumi","title":"\ud83c\udfd7\ufe0f Pulumi","text":"<p>Pulumi Module Documentation</p> <p>Modern Infrastructure as Code: - Stack management - State backends - Output exports - Preview changes</p>"},{"location":"modules/#saltstack","title":"\ud83e\uddc2 SaltStack","text":"<p>SaltStack Module Documentation</p> <p>Configuration management: - Execute states - Run commands - Manage minions - Highstate application</p>"},{"location":"modules/#version-control","title":"Version Control","text":""},{"location":"modules/#git","title":"\ud83d\udc19 Git","text":"<p>Git Module Documentation</p> <p>Git operations: - Clone repositories - Commit changes - Push/pull - Branch management - Tag management</p>"},{"location":"modules/#notifications","title":"Notifications","text":""},{"location":"modules/#notifications_1","title":"\ud83d\udd14 Notifications","text":"<p>Notifications Module Documentation</p> <p>Multi-channel notifications: - Slack - Email - Webhook - Discord - Microsoft Teams</p>"},{"location":"modules/#system-management","title":"System Management","text":""},{"location":"modules/#systemd","title":"\u2699\ufe0f Systemd","text":"<p>Systemd Module Documentation</p> <p>Linux service management: - Start/stop services - Enable/disable - Status checking - Journal logs</p>"},{"location":"modules/#package-management","title":"\ud83d\udce6 Package Management","text":"<ul> <li>pkg - Package manager integration</li> <li>apt (Debian/Ubuntu)</li> <li>yum/dnf (RedHat/CentOS)</li> <li>pacman (Arch Linux)</li> <li>brew (macOS)</li> </ul>"},{"location":"modules/#module-usage-patterns","title":"Module Usage Patterns","text":""},{"location":"modules/#basic-usage","title":"Basic Usage","text":"<pre><code>-- Load module\nlocal exec = require(\"exec\")\n\n-- Use module\nlocal result = exec.run(\"echo 'Hello World'\")\nif result.success then\n    print(result.stdout)\nend\n</code></pre>"},{"location":"modules/#error-handling","title":"Error Handling","text":"<pre><code>local fs = require(\"fs\")\n\nlocal success, content = pcall(function()\n    return fs.read(\"/path/to/file\")\nend)\n\nif not success then\n    log.error(\"Failed to read file: \" .. content)\nend\n</code></pre>"},{"location":"modules/#combining-modules","title":"Combining Modules","text":"<pre><code>local git = require(\"git\")\nlocal exec = require(\"exec\")\nlocal notification = require(\"notification\")\n\n-- Clone repo\ngit.clone(\"https://github.com/user/repo.git\", \"/tmp/repo\")\n\n-- Build\nexec.run(\"cd /tmp/repo &amp;&amp; make build\")\n\n-- Notify\nnotification.slack({\n    webhook = os.getenv(\"SLACK_WEBHOOK\"),\n    message = \"Build completed!\"\n})\n</code></pre>"},{"location":"modules/#module-configuration","title":"Module Configuration","text":"<p>Some modules require configuration:</p> <pre><code>-- AWS credentials\nlocal aws = require(\"aws\")\naws.config({\n    region = \"us-east-1\",\n    access_key = os.getenv(\"AWS_ACCESS_KEY\"),\n    secret_key = os.getenv(\"AWS_SECRET_KEY\")\n})\n\n-- Use AWS\naws.s3.upload(\"bucket-name\", \"file.txt\", \"/local/file.txt\")\n</code></pre>"},{"location":"modules/#custom-modules","title":"Custom Modules","text":"<p>You can also create custom modules:</p> <pre><code>-- mymodule.lua\nlocal M = {}\n\nfunction M.hello(name)\n    return \"Hello, \" .. name .. \"!\"\nend\n\nreturn M\n</code></pre> <p>Use it in your workflow: <pre><code>local mymodule = require(\"mymodule\")\nprint(mymodule.hello(\"World\"))\n</code></pre></p>"},{"location":"modules/#best-practices","title":"Best Practices","text":""},{"location":"modules/#1-check-return-values","title":"1. Check Return Values","text":"<p>Always check if operations succeeded: <pre><code>local result = exec.run(\"command\")\nif not result.success then\n    return false, result.stderr\nend\n</code></pre></p>"},{"location":"modules/#2-handle-errors-gracefully","title":"2. Handle Errors Gracefully","text":"<p>Use pcall for operations that might fail: <pre><code>local ok, err = pcall(function()\n    fs.remove(\"/important/file\")\nend)\n</code></pre></p>"},{"location":"modules/#3-use-environment-variables","title":"3. Use Environment Variables","text":"<p>Never hardcode credentials: <pre><code>local api_key = os.getenv(\"API_KEY\")\nif not api_key then\n    error(\"API_KEY not set\")\nend\n</code></pre></p>"},{"location":"modules/#4-log-important-operations","title":"4. Log Important Operations","text":"<pre><code>log.info(\"Starting deployment...\")\nlocal result = deploy()\nlog.info(\"Deployment \" .. (result.success and \"succeeded\" or \"failed\"))\n</code></pre>"},{"location":"modules/#module-reference-quick-links","title":"Module Reference Quick Links","text":""},{"location":"modules/#core","title":"Core","text":"<ul> <li>exec | fs | net | log</li> </ul>"},{"location":"modules/#testing","title":"Testing \ud83d\udd25","text":"<ul> <li>infra_test - Infrastructure testing and validation</li> </ul>"},{"location":"modules/#cloud","title":"Cloud","text":"<ul> <li>AWS | Azure | GCP | DigitalOcean</li> </ul>"},{"location":"modules/#infrastructure","title":"Infrastructure","text":"<ul> <li>Docker | Terraform | Pulumi | Salt</li> </ul>"},{"location":"modules/#tools","title":"Tools","text":"<ul> <li>Git | Pkg | Systemd | Notifications</li> </ul>"},{"location":"modules/#parallel-testing","title":"Parallel &amp; Testing \ud83d\udd25","text":"<ul> <li>Goroutine | infra_test</li> </ul>"},{"location":"modules/#learn-more","title":"Learn More","text":"<ul> <li>Modern DSL Guide</li> <li>Core Concepts</li> <li>Advanced Examples</li> <li>Lua API Reference</li> </ul> <p>Need help? Check the documentation home or file an issue.</p>"},{"location":"modules/ai/","title":"\ud83e\udd16 AI Module - Complete API Reference","text":"<p>The AI module provides artificial intelligence capabilities for task optimization, failure prediction, and performance analytics.</p>"},{"location":"modules/ai/#module-overview","title":"\ud83d\udccb Module Overview","text":"<pre><code>local ai = require(\"ai\")\n</code></pre> <p>The AI module is the core of Sloth Runner's intelligence features, providing:</p> <ul> <li>\ud83d\udd2e Predictive Failure Detection - Predict task failures before they happen</li> <li>\u26a1 Intelligent Optimization - Automatically optimize commands for better performance  </li> <li>\ud83d\udcca Performance Analytics - Analyze execution patterns and trends</li> <li>\ud83e\udde0 Adaptive Learning - Continuous improvement from execution history</li> </ul>"},{"location":"modules/ai/#configuration","title":"\ud83d\udd27 Configuration","text":""},{"location":"modules/ai/#aiconfigureconfig","title":"<code>ai.configure(config)</code>","text":"<p>Configure AI behavior and capabilities.</p> <pre><code>ai.configure({\n    enabled = true,                    -- Enable/disable AI features\n    learning_mode = \"adaptive\",        -- adaptive | aggressive | conservative\n    optimization_level = 8,            -- 1-10 (higher = more aggressive)\n    failure_prediction = true,         -- Enable failure prediction\n    auto_optimize = true,              -- Automatically apply optimizations\n    confidence_threshold = 0.7         -- Minimum confidence for auto-apply\n})\n</code></pre> <p>Parameters: - <code>enabled</code> (boolean): Enable or disable all AI features - <code>learning_mode</code> (string): Learning aggressiveness level - <code>optimization_level</code> (number): Optimization aggressiveness (1-10) - <code>failure_prediction</code> (boolean): Enable predictive failure detection - <code>auto_optimize</code> (boolean): Automatically apply high-confidence optimizations - <code>confidence_threshold</code> (number): Minimum confidence score for auto-application</p>"},{"location":"modules/ai/#aiget_config","title":"<code>ai.get_config()</code>","text":"<p>Get current AI configuration.</p> <pre><code>local config = ai.get_config()\n-- Returns: {enabled: true, learning_mode: \"adaptive\", ...}\n</code></pre>"},{"location":"modules/ai/#optimization","title":"\u26a1 Optimization","text":""},{"location":"modules/ai/#aioptimize_commandcommand-options","title":"<code>ai.optimize_command(command, options)</code>","text":"<p>Get AI optimization suggestions for a command.</p> <pre><code>local result = ai.optimize_command(\"go build -o app ./cmd/main.go\", {\n    history = ai.get_task_history(\"go build\"),\n    system_resources = {\n        cpu_usage = 45,\n        memory_usage = 60,\n        load_avg = 1.2\n    },\n    similar_tasks = ai.find_similar_tasks(\"go build\", 10),\n    environment = \"production\"\n})\n</code></pre> <p>Parameters: - <code>command</code> (string): Original command to optimize - <code>options</code> (table): Optimization context   - <code>history</code> (array): Historical executions of this command   - <code>system_resources</code> (table): Current system resource usage   - <code>similar_tasks</code> (array): Similar task executions   - <code>environment</code> (string): Execution environment (dev/staging/prod)</p> <p>Returns: <pre><code>{\n    original_command = \"go build -o app ./cmd/main.go\",\n    optimized_command = \"go build -p 4 -ldflags='-s -w' -o app ./cmd/main.go\",\n    confidence_score = 0.85,           -- 0.0-1.0\n    expected_speedup = 2.3,            -- Expected performance multiplier\n    optimizations = {                  -- Applied optimizations\n        {\n            type = \"parallelization\",\n            description = \"Added -p 4 for parallel compilation\",\n            impact = 1.8\n        },\n        {\n            type = \"size_optimization\", \n            description = \"Added -ldflags='-s -w' to reduce binary size\",\n            impact = 0.5\n        }\n    },\n    resource_savings = {\n        estimated_time_saved = \"1.2s\",\n        memory_efficiency = \"+15%\"\n    },\n    rationale = \"Command shows parallelization opportunities based on system CPU count\"\n}\n</code></pre></p>"},{"location":"modules/ai/#failure-prediction","title":"\ud83d\udd2e Failure Prediction","text":""},{"location":"modules/ai/#aipredict_failuretask_name-command-options","title":"<code>ai.predict_failure(task_name, command, options)</code>","text":"<p>Predict the probability of task failure.</p> <pre><code>local prediction = ai.predict_failure(\"deploy_task\", \"kubectl apply -f deployment.yaml\", {\n    history = ai.get_task_history(\"kubectl apply\"),\n    environment = \"production\",\n    system_state = {\n        disk_usage = 85,\n        network_latency = 120\n    }\n})\n</code></pre> <p>Parameters: - <code>task_name</code> (string): Name of the task being analyzed - <code>command</code> (string): Command to be executed - <code>options</code> (table): Prediction context   - <code>history</code> (array): Historical executions   - <code>environment</code> (string): Execution environment   - <code>system_state</code> (table): Current system state</p> <p>Returns: <pre><code>{\n    failure_probability = 0.23,        -- 0.0-1.0\n    confidence = 0.78,                 -- Confidence in prediction\n    risk_factors = {                   -- Identified risk factors\n        {\n            type = \"resource_contention\",\n            description = \"High disk usage detected (85%)\",\n            impact = 0.6,\n            severity = \"medium\"\n        },\n        {\n            type = \"network_latency\",\n            description = \"Elevated network latency (120ms)\",\n            impact = 0.3,\n            severity = \"low\"\n        }\n    },\n    recommendations = {                -- AI-generated recommendations\n        \"Consider waiting for disk usage to decrease below 80%\",\n        \"Add timeout configuration to handle network latency\",\n        \"Implement retry logic with exponential backoff\"\n    },\n    similar_failures = {               -- Historical similar failures\n        count = 3,\n        common_causes = [\"network_timeout\", \"resource_exhaustion\"]\n    }\n}\n</code></pre></p>"},{"location":"modules/ai/#performance-analytics","title":"\ud83d\udcca Performance Analytics","text":""},{"location":"modules/ai/#aianalyze_performancecommand-options","title":"<code>ai.analyze_performance(command, options)</code>","text":"<p>Analyze performance patterns for a command or task.</p> <pre><code>local analysis = ai.analyze_performance(\"go build\", {\n    time_range = \"30d\",                -- 1d, 7d, 30d, 90d\n    environment = \"all\",               -- all, dev, staging, prod\n    include_failures = true\n})\n</code></pre> <p>Parameters: - <code>command</code> (string): Command to analyze - <code>options</code> (table): Analysis options   - <code>time_range</code> (string): Time range for analysis   - <code>environment</code> (string): Environment filter   - <code>include_failures</code> (boolean): Include failed executions</p> <p>Returns: <pre><code>{\n    total_executions = 156,\n    success_rate = 0.94,               -- 94% success rate\n    avg_execution_time = \"2.3s\",\n    fastest_execution = \"1.1s\",\n    slowest_execution = \"5.7s\",\n    performance_trend = \"improving\",    -- improving | stable | degrading\n    insights = {                       -- AI-generated insights\n        \"Performance improved 23% over the last 30 days\",\n        \"Failures primarily occur during high system load\",\n        \"Consider caching to improve cold-start performance\"\n    },\n    recommendations = {\n        \"Enable build caching to reduce average execution time\",\n        \"Implement resource monitoring for failure prevention\"\n    },\n    patterns = {                       -- Detected patterns\n        peak_hours = [\"09:00-10:00\", \"14:00-15:00\"],\n        failure_correlation = [\"high_cpu_usage\", \"memory_pressure\"]\n    }\n}\n</code></pre></p>"},{"location":"modules/ai/#aiget_task_statstask_name","title":"<code>ai.get_task_stats(task_name)</code>","text":"<p>Get aggregated statistics for a specific task.</p> <pre><code>local stats = ai.get_task_stats(\"build_application\")\n</code></pre> <p>Returns: <pre><code>{\n    task_name = \"build_application\",\n    total_runs = 89,\n    success_count = 84,\n    failure_count = 5,\n    success_rate = 0.944,              -- 94.4%\n    total_time = \"3m 45s\",\n    avg_time = \"2.5s\",\n    fastest_time = \"1.2s\",\n    slowest_time = \"8.1s\",\n    last_execution = \"2024-01-15T10:30:00Z\",\n    trend = \"stable\"\n}\n</code></pre></p>"},{"location":"modules/ai/#learning-history","title":"\ud83e\udde0 Learning &amp; History","text":""},{"location":"modules/ai/#airecord_executionexecution_data","title":"<code>ai.record_execution(execution_data)</code>","text":"<p>Record task execution for AI learning.</p> <pre><code>ai.record_execution({\n    task_name = \"build_application\",\n    command = \"go build -o app ./cmd/main.go\",\n    success = true,\n    execution_time = \"2.5s\",\n    start_time = os.time(),\n    end_time = os.time() + 2.5,\n    parameters = {\n        environment = \"development\",\n        go_version = \"1.21.0\",\n        parallel = true\n    },\n    system_resources = {\n        cpu_usage = 45,\n        memory_usage = 60,\n        disk_usage = 30\n    },\n    error_message = nil,               -- If success = false\n    optimization_applied = true,\n    ai_confidence = 0.85\n})\n</code></pre> <p>Parameters: - <code>task_name</code> (string): Name of the executed task - <code>command</code> (string): Command that was executed - <code>success</code> (boolean): Whether execution was successful - <code>execution_time</code> (string): Time taken to execute - <code>parameters</code> (table): Execution parameters and context - <code>system_resources</code> (table): System resource state during execution - <code>error_message</code> (string): Error message if failed - <code>optimization_applied</code> (boolean): Whether AI optimization was used - <code>ai_confidence</code> (number): Confidence score if optimization was applied</p>"},{"location":"modules/ai/#aiget_task_historycommand-limit","title":"<code>ai.get_task_history(command, limit)</code>","text":"<p>Get execution history for a command.</p> <pre><code>local history = ai.get_task_history(\"go build\", 20)\n-- Returns array of execution records\n</code></pre>"},{"location":"modules/ai/#aifind_similar_taskscommand-limit","title":"<code>ai.find_similar_tasks(command, limit)</code>","text":"<p>Find tasks similar to the given command.</p> <pre><code>local similar = ai.find_similar_tasks(\"go build -o app\", 10)\n-- Returns array of similar task executions\n</code></pre>"},{"location":"modules/ai/#insights-recommendations","title":"\ud83d\udca1 Insights &amp; Recommendations","text":""},{"location":"modules/ai/#aigenerate_insightsoptions","title":"<code>ai.generate_insights(options)</code>","text":"<p>Generate AI-powered insights about task execution patterns.</p> <pre><code>local insights = ai.generate_insights({\n    scope = \"global\",                  -- global | task | command\n    task_name = \"build_application\",   -- if scope = \"task\"\n    time_range = \"7d\"\n})\n</code></pre> <p>Returns: <pre><code>{\n    \"Tasks executed during business hours have 15% lower failure rate\",\n    \"Commands with parallel flags show 40% better performance\", \n    \"Memory-intensive tasks perform better with explicit heap size settings\",\n    \"Network-dependent tasks should include timeout and retry configurations\"\n}\n</code></pre></p>"},{"location":"modules/ai/#best-practices","title":"\ud83c\udfaf Best Practices","text":""},{"location":"modules/ai/#1-always-record-executions","title":"1. Always Record Executions","text":"<pre><code>-- Record every execution for AI learning\nworkflow.define(\"my_pipeline\", {\n    on_task_complete = function(task_name, success, output)\n        ai.record_execution({\n            task_name = task_name,\n            command = output.command,\n            success = success,\n            execution_time = output.duration\n        })\n    end\n})\n</code></pre>"},{"location":"modules/ai/#2-use-confidence-thresholds","title":"2. Use Confidence Thresholds","text":"<pre><code>-- Only apply high-confidence optimizations\nlocal optimization = ai.optimize_command(command)\nif optimization.confidence_score &gt; 0.8 then\n    command = optimization.optimized_command\n    log.info(\"Applied AI optimization with \" .. (optimization.confidence_score * 100) .. \"% confidence\")\nend\n</code></pre>"},{"location":"modules/ai/#3-monitor-predictions","title":"3. Monitor Predictions","text":"<pre><code>-- Always check predictions for critical tasks\nlocal prediction = ai.predict_failure(task_name, command)\nif prediction.failure_probability &gt; 0.3 then\n    log.warn(\"High failure risk detected: \" .. (prediction.failure_probability * 100) .. \"%\")\n    for _, rec in ipairs(prediction.recommendations) do\n        log.info(\"Recommendation: \" .. rec)\n    end\nend\n</code></pre>"},{"location":"modules/ai/#4-regular-analysis","title":"4. Regular Analysis","text":"<pre><code>-- Periodic performance analysis\nlocal analysis = ai.analyze_performance(\"critical_task\")\nif analysis.performance_trend == \"degrading\" then\n    log.warn(\"Performance degradation detected for critical_task\")\n    -- Take action\nend\n</code></pre>"},{"location":"modules/ai/#advanced-features","title":"\ud83d\udd2c Advanced Features","text":""},{"location":"modules/ai/#learning-modes","title":"Learning Modes","text":"<ul> <li>Adaptive: Balanced learning and optimization (recommended)</li> <li>Aggressive: Maximum optimization attempts, higher risk</li> <li>Conservative: Minimal changes, maximum safety</li> </ul>"},{"location":"modules/ai/#optimization-strategies","title":"Optimization Strategies","text":"<p>The AI system includes multiple built-in optimization strategies: - Parallelization: Detect parallel execution opportunities - Memory Optimization: Adjust memory settings for optimal performance - Compiler Optimization: Suggest better compiler flags and options - Caching: Implement intelligent caching strategies - Network Optimization: Optimize network operations and timeouts - I/O Optimization: Improve file and disk operations</p>"},{"location":"modules/ai/#custom-metrics","title":"Custom Metrics","text":"<p>You can provide custom metrics to improve AI analysis:</p> <pre><code>ai.record_execution({\n    task_name = \"custom_task\",\n    success = true,\n    execution_time = \"1.5s\",\n    custom_metrics = {\n        memory_peak = \"512MB\",\n        cache_hit_rate = 0.85,\n        network_requests = 15,\n        database_queries = 8\n    }\n})\n</code></pre>"},{"location":"modules/ai/#integration-examples","title":"\ud83d\ude80 Integration Examples","text":""},{"location":"modules/ai/#with-modern-dsl","title":"With Modern DSL","text":"<pre><code>local build_task = task(\"ai_optimized_build\")\n    :description(\"Build with AI optimization\")\n    :command(function(params, deps)\n        local cmd = \"go build -o app ./cmd/main.go\"\n        local optimization = ai.optimize_command(cmd, {\n            history = ai.get_task_history(cmd)\n        })\n\n        if optimization.confidence_score &gt; 0.7 then\n            return exec.run(optimization.optimized_command)\n        else\n            return exec.run(cmd)\n        end\n    end)\n    :on_success(function(params, output)\n        ai.record_execution({\n            task_name = \"ai_optimized_build\",\n            command = output.command,\n            success = true,\n            execution_time = output.duration\n        })\n    end)\n    :build()\n</code></pre>"},{"location":"modules/ai/#with-gitops","title":"With GitOps","text":"<pre><code>local gitops_task = task(\"intelligent_deploy\")\n    :command(function(params, deps)\n        local deploy_cmd = \"kubectl apply -f manifests/\"\n\n        -- AI failure prediction\n        local prediction = ai.predict_failure(\"intelligent_deploy\", deploy_cmd)\n        if prediction.failure_probability &gt; 0.25 then\n            log.warn(\"High deployment risk detected\")\n            return {success = false, message = \"Deployment blocked by AI risk assessment\"}\n        end\n\n        -- GitOps deployment\n        return gitops.sync_workflow(params.workflow_id)\n    end)\n    :build()\n</code></pre>"},{"location":"modules/ai/#see-also","title":"\ud83d\udcda See Also","text":"<ul> <li>AI Features Overview</li> <li>Performance Optimization Guide</li> <li>Failure Prediction Guide</li> <li>AI Best Practices</li> </ul>"},{"location":"modules/aws/","title":"AWS Module","text":"<p>The <code>aws</code> module provides a comprehensive interface for interacting with Amazon Web Services using the AWS CLI. It is designed to work seamlessly with standard AWS credential chains and also has first-class support for <code>aws-vault</code> for enhanced security.</p>"},{"location":"modules/aws/#configuration","title":"Configuration","text":"<p>No specific configuration in <code>values.yaml</code> is required. The module relies on your environment being configured to interact with AWS. This can be achieved through: - IAM roles for EC2 instances or ECS/EKS tasks. - Standard environment variables (<code>AWS_ACCESS_KEY_ID</code>, <code>AWS_SECRET_ACCESS_KEY</code>, etc.). - A configured <code>~/.aws/credentials</code> file. - Using <code>aws-vault</code> with a named profile.</p>"},{"location":"modules/aws/#generic-executor","title":"Generic Executor","text":""},{"location":"modules/aws/#awsexecargs-opts","title":"<code>aws.exec(args, opts)</code>","text":"<p>This is the core function of the module. It executes any AWS CLI command and returns the result.</p> <p>Parameters:</p> <ul> <li><code>args</code> (table): Required. A table of strings representing the command and arguments to pass to the AWS CLI (e.g., <code>{\"s3\", \"ls\", \"--recursive\"}</code>).</li> <li><code>opts</code> (table): Optional. A table of options for the execution.<ul> <li><code>profile</code> (string): If provided, the command will be executed using <code>aws-vault exec &lt;profile&gt; -- aws ...</code>. If omitted, it will run <code>aws ...</code> directly.</li> </ul> </li> </ul> <p>Returns:</p> <p>A table containing the following fields: - <code>stdout</code> (string): The standard output from the command. - <code>stderr</code> (string): The standard error from the command. - <code>exit_code</code> (number): The exit code of the command. <code>0</code> typically indicates success.</p> <p>Example:</p> <pre><code>-- Using default credentials\nlocal result = aws.exec({\"sts\", \"get-caller-identity\"})\nif result.exit_code == 0 then\n  print(result.stdout)\nend\n\n-- Using an aws-vault profile\nlocal result_with_profile = aws.exec({\"ec2\", \"describe-instances\"}, {profile = \"my-prod-profile\"})\n</code></pre>"},{"location":"modules/aws/#s3-helpers","title":"S3 Helpers","text":""},{"location":"modules/aws/#awss3syncparams","title":"<code>aws.s3.sync(params)</code>","text":"<p>A high-level wrapper for the <code>aws s3 sync</code> command, useful for synchronizing directories with S3.</p> <p>Parameters:</p> <ul> <li><code>params</code> (table): A table containing the following fields:<ul> <li><code>source</code> (string): Required. The source directory or S3 path.</li> <li><code>destination</code> (string): Required. The destination directory or S3 path.</li> <li><code>profile</code> (string): Optional. The <code>aws-vault</code> profile to use.</li> <li><code>delete</code> (boolean): Optional. If <code>true</code>, adds the <code>--delete</code> flag to the sync command.</li> </ul> </li> </ul> <p>Returns:</p> <ul> <li><code>true</code> on success.</li> <li><code>false, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>local ok, err = aws.s3.sync({\n  source = \"./build\",\n  destination = \"s3://my-app-bucket/static\",\n  profile = \"deployment-profile\",\n  delete = true\n})\nif not ok then\n  log.error(\"S3 sync failed: \" .. err)\nend\n</code></pre>"},{"location":"modules/aws/#secrets-manager-helpers","title":"Secrets Manager Helpers","text":""},{"location":"modules/aws/#awssecretsmanagerget_secretparams","title":"<code>aws.secretsmanager.get_secret(params)</code>","text":"<p>Retrieves a secret's value from AWS Secrets Manager. This function simplifies the process by directly returning the <code>SecretString</code>.</p> <p>Parameters:</p> <ul> <li><code>params</code> (table): A table containing the following fields:<ul> <li><code>secret_id</code> (string): Required. The name or ARN of the secret to retrieve.</li> <li><code>profile</code> (string): Optional. The <code>aws-vault</code> profile to use.</li> </ul> </li> </ul> <p>Returns:</p> <ul> <li><code>secret_string</code> (string) on success.</li> <li><code>nil, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>local db_password, err = aws.secretsmanager.get_secret({\n  secret_id = \"production/database/password\",\n  profile = \"my-app-profile\"\n})\n\nif not db_password then\n  log.error(\"Failed to get secret: \" .. err)\n  return false, \"Config failed.\"\nend\n\n-- Now you can use the db_password variable\n</code></pre>"},{"location":"modules/azure/","title":"Azure Module","text":"<p>The <code>azure</code> module provides an interface for interacting with Microsoft Azure using the <code>az</code> command-line tool.</p>"},{"location":"modules/azure/#configuration","title":"Configuration","text":"<p>This module requires the <code>az</code> CLI to be installed and authenticated. Before running pipelines that use this module, you must log in to your Azure account:</p> <pre><code>az login\n</code></pre> <p>The module will use your logged-in credentials for all commands.</p>"},{"location":"modules/azure/#generic-executor","title":"Generic Executor","text":""},{"location":"modules/azure/#azureexecargs","title":"<code>azure.exec(args)</code>","text":"<p>Executes any <code>az</code> command. This function automatically adds the <code>--output json</code> flag (if not already present) to ensure that the output is machine-parsable.</p> <p>Parameters:</p> <ul> <li><code>args</code> (table): Required. A table of strings representing the command and arguments to pass to <code>az</code> (e.g., <code>{\"group\", \"list\", \"--location\", \"eastus\"}</code>).</li> </ul> <p>Returns:</p> <p>A table containing the following fields: - <code>stdout</code> (string): The standard output from the command (as a JSON string). - <code>stderr</code> (string): The standard error from the command. - <code>exit_code</code> (number): The exit code of the command. <code>0</code> typically indicates success.</p> <p>Example:</p> <pre><code>local result = azure.exec({\"account\", \"show\"})\nif result.exit_code == 0 then\n  local account_info, err = data.parse_json(result.stdout)\n  if account_info then\n    log.info(\"Logged in as: \" .. account_info.user.name)\n  end\nend\n</code></pre>"},{"location":"modules/azure/#resource-group-rg-helpers","title":"Resource Group (RG) Helpers","text":""},{"location":"modules/azure/#azurergdeleteparams","title":"<code>azure.rg.delete(params)</code>","text":"<p>Deletes a resource group.</p> <p>Parameters:</p> <ul> <li><code>params</code> (table): A table containing the following fields:<ul> <li><code>name</code> (string): Required. The name of the resource group to delete.</li> <li><code>yes</code> (boolean): Optional. If <code>true</code>, adds the <code>--yes</code> flag to bypass the confirmation prompt.</li> </ul> </li> </ul> <p>Returns:</p> <ul> <li><code>true</code> on success.</li> <li><code>false, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>local ok, err = azure.rg.delete({\n  name = \"my-test-rg\",\n  yes = true\n})\nif not ok then\n  log.error(\"Failed to delete resource group: \" .. err)\nend\n</code></pre>"},{"location":"modules/azure/#virtual-machine-vm-helpers","title":"Virtual Machine (VM) Helpers","text":""},{"location":"modules/azure/#azurevmlistparams","title":"<code>azure.vm.list(params)</code>","text":"<p>Lists virtual machines.</p> <p>Parameters:</p> <ul> <li><code>params</code> (table): Optional. A table containing the following fields:<ul> <li><code>resource_group</code> (string): The name of a resource group to scope the list to. If omitted, lists VMs in the entire subscription.</li> </ul> </li> </ul> <p>Returns:</p> <ul> <li><code>vms</code> (table) on success, where the table is a parsed JSON array of your VM objects.</li> <li><code>nil, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>-- List all VMs in the subscription\nlocal all_vms, err1 = azure.vm.list()\n\n-- List VMs in a specific resource group\nlocal specific_vms, err2 = azure.vm.list({resource_group = \"my-production-rg\"})\nif specific_vms then\n  for _, vm in ipairs(specific_vms) do\n    print(\"Found VM: \" .. vm.name)\n  end\nend\n</code></pre>"},{"location":"modules/data/","title":"Data Module","text":"<p>The <code>data</code> module provides functions for parsing and serializing data between Lua tables and common data formats like JSON and YAML.</p> <p>---\\n</p>"},{"location":"modules/data/#dataparse_jsonjson_string","title":"<code>data.parse_json(json_string)</code>","text":"<p>Parses a JSON string into a Lua table.</p> <ul> <li>Parameters:<ul> <li><code>json_string</code> (string): The JSON formatted string to parse.</li> </ul> </li> <li>Returns:<ul> <li><code>table</code>: The resulting Lua table.</li> <li><code>error</code>: An error object if parsing fails.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"modules/data/#datato_jsonlua_table","title":"<code>data.to_json(lua_table)</code>","text":"<p>Serializes a Lua table into a JSON string.</p> <ul> <li>Parameters:<ul> <li><code>lua_table</code> (table): The Lua table to serialize.</li> </ul> </li> <li>Returns:<ul> <li><code>string</code>: The resulting JSON string.</li> <li><code>error</code>: An error object if serialization fails.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"modules/data/#dataparse_yamlyaml_string","title":"<code>data.parse_yaml(yaml_string)</code>","text":"<p>Parses a YAML string into a Lua table.</p> <ul> <li>Parameters:<ul> <li><code>yaml_string</code> (string): The YAML formatted string to parse.</li> </ul> </li> <li>Returns:<ul> <li><code>table</code>: The resulting Lua table.</li> <li><code>error</code>: An error object if parsing fails.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"modules/data/#datato_yamllua_table","title":"<code>data.to_yaml(lua_table)</code>","text":"<p>Serializes a Lua table into a YAML string.</p> <ul> <li>Parameters:<ul> <li><code>lua_table</code> (table): The Lua table to serialize.</li> </ul> </li> <li>Returns:<ul> <li><code>string</code>: The resulting YAML string.</li> <li><code>error</code>: An error object if serialization fails.</li> </ul> </li> </ul>"},{"location":"modules/data/#example","title":"Example","text":"<pre><code>command = function()\n  local data = require(\"data\")\n\n  -- JSON Example\n  log.info(\"Testing JSON serialization...\")\n  local my_table = { name = \"sloth-runner\", version = 1.0, features = { \"tasks\", \"lua\" } }\n  local json_str, err = data.to_json(my_table)\n  if err then\n    return false, \"Failed to serialize to JSON: \" .. err\n  end\n  print(\"Serialized JSON: \" .. json_str)\n\n  log.info(\"Testing JSON parsing...\")\n  local parsed_table, err = data.parse_json(json_str)\n  if err then\n    return false, \"Failed to parse JSON: \" .. err\n  end\n  log.info(\"Parsed name from JSON: \" .. parsed_table.name)\n\n  -- YAML Example\n  log.info(\"Testing YAML serialization...\")\n  local yaml_str, err = data.to_yaml(my_table)\n  if err then\n    return false, \"Failed to serialize to YAML: \" .. err\n  end\n  print(\"Serialized YAML:\\n\" .. yaml_str)\n\n  log.info(\"Testing YAML parsing...\")\n  parsed_table, err = data.parse_yaml(yaml_str)\n  if err then\n    return false, \"Failed to parse YAML: \" .. err\n  end\n  log.info(\"Parsed version from YAML: \" .. parsed_table.version)\n\n  return true, \"Data module operations successful.\"\nend\n</code></pre>"},{"location":"modules/digitalocean/","title":"DigitalOcean Module","text":"<p>The <code>digitalocean</code> module provides an interface for interacting with your DigitalOcean resources using the <code>doctl</code> command-line tool.</p>"},{"location":"modules/digitalocean/#configuration","title":"Configuration","text":"<p>This module requires the <code>doctl</code> CLI to be installed and authenticated. The standard way to do this is to generate a personal access token in your DigitalOcean control panel and set it as the <code>DIGITALOCEAN_ACCESS_TOKEN</code> environment variable.</p> <pre><code>export DIGITALOCEAN_ACCESS_TOKEN=\"your_do_api_token_here\"\n</code></pre> <p>The module will automatically use this token for all commands.</p>"},{"location":"modules/digitalocean/#generic-executor","title":"Generic Executor","text":""},{"location":"modules/digitalocean/#digitaloceanexecargs","title":"<code>digitalocean.exec(args)</code>","text":"<p>Executes any <code>doctl</code> command. This function automatically adds the <code>--output json</code> flag to ensure that the output is machine-parsable.</p> <p>Parameters:</p> <ul> <li><code>args</code> (table): Required. A table of strings representing the command and arguments to pass to <code>doctl</code> (e.g., <code>{\"compute\", \"droplet\", \"list\"}</code>).</li> </ul> <p>Returns:</p> <p>A table containing the following fields: - <code>stdout</code> (string): The standard output from the command (as a JSON string). - <code>stderr</code> (string): The standard error from the command. - <code>exit_code</code> (number): The exit code of the command. <code>0</code> typically indicates success.</p> <p>Example:</p> <pre><code>local result = digitalocean.exec({\"account\", \"get\"})\nif result.exit_code == 0 then\n  local account_info, err = data.parse_json(result.stdout)\n  if account_info then\n    log.info(\"Account status: \" .. account_info.status)\n  end\nend\n</code></pre>"},{"location":"modules/digitalocean/#droplets-helpers","title":"Droplets Helpers","text":""},{"location":"modules/digitalocean/#digitaloceandropletslist","title":"<code>digitalocean.droplets.list()</code>","text":"<p>A high-level wrapper to list all Droplets in your account.</p> <p>Returns:</p> <ul> <li><code>droplets</code> (table) on success, where the table is a parsed JSON array of your Droplet objects.</li> <li><code>nil, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>local droplets, err = digitalocean.droplets.list()\nif droplets then\n  for _, droplet in ipairs(droplets) do\n    print(\"Found Droplet: \" .. droplet.name)\n  end\nend\n</code></pre>"},{"location":"modules/digitalocean/#digitaloceandropletsdeleteparams","title":"<code>digitalocean.droplets.delete(params)</code>","text":"<p>Deletes a specific Droplet by its ID.</p> <p>Parameters:</p> <ul> <li><code>params</code> (table): A table containing the following fields:<ul> <li><code>id</code> (string): Required. The ID of the Droplet to delete.</li> <li><code>force</code> (boolean): Optional. If <code>true</code>, adds the <code>--force</code> flag to bypass the confirmation prompt. Defaults to <code>false</code>.</li> </ul> </li> </ul> <p>Returns:</p> <ul> <li><code>true</code> on success.</li> <li><code>false, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>local ok, err = digitalocean.droplets.delete({\n  id = \"123456789\",\n  force = true\n})\nif not ok then\n  log.error(\"Failed to delete droplet: \" .. err)\nend\n</code></pre>"},{"location":"modules/docker/","title":"Docker Module","text":"<p>The <code>docker</code> module provides a convenient interface for interacting with the Docker daemon, allowing you to build, run, and push Docker images as part of your pipelines.</p>"},{"location":"modules/docker/#configuration","title":"Configuration","text":"<p>This module requires the <code>docker</code> CLI to be installed and the Docker daemon to be running and accessible.</p>"},{"location":"modules/docker/#functions","title":"Functions","text":""},{"location":"modules/docker/#dockerexecargs","title":"<code>docker.exec(args)</code>","text":"<p>Executes any raw <code>docker</code> command.</p> <ul> <li><code>args</code> (table): Required. A list of arguments to pass to the <code>docker</code> command (e.g., <code>{\"ps\", \"-a\"}</code>).</li> <li>Returns: A result table with <code>success</code>, <code>stdout</code>, <code>stderr</code>, and <code>exit_code</code>.</li> </ul>"},{"location":"modules/docker/#dockerbuildparams","title":"<code>docker.build(params)</code>","text":"<p>Builds a Docker image using <code>docker build</code>.</p> <ul> <li><code>params</code> (table):<ul> <li><code>tag</code> (string): Required. The tag for the image (e.g., <code>my-app:latest</code>).</li> <li><code>path</code> (string): Required. The build context path.</li> <li><code>dockerfile</code> (string): Optional. The path to the Dockerfile.</li> <li><code>build_args</code> (table): Optional. A table of build arguments (e.g., <code>{VERSION = \"1.0\"}</code>).</li> </ul> </li> <li>Returns: A result table.</li> </ul>"},{"location":"modules/docker/#dockerpushparams","title":"<code>docker.push(params)</code>","text":"<p>Pushes a Docker image to a registry using <code>docker push</code>.</p> <ul> <li><code>params</code> (table):<ul> <li><code>tag</code> (string): Required. The tag of the image to push.</li> </ul> </li> <li>Returns: A result table.</li> </ul>"},{"location":"modules/docker/#dockerrunparams","title":"<code>docker.run(params)</code>","text":"<p>Runs a Docker container using <code>docker run</code>.</p> <ul> <li><code>params</code> (table):<ul> <li><code>image</code> (string): Required. The image to run.</li> <li><code>name</code> (string): Optional. The name for the container.</li> <li><code>detach</code> (boolean): Optional. If <code>true</code>, runs the container in the background (<code>-d</code>).</li> <li><code>ports</code> (table): Optional. A list of port mappings (e.g., <code>{\"8080:80\"}</code>).</li> <li><code>env</code> (table): Optional. A table of environment variables (e.g., <code>{MY_VAR = \"value\"}</code>).</li> </ul> </li> <li>Returns: A result table.</li> </ul>"},{"location":"modules/docker/#example","title":"Example","text":"<pre><code>local image_tag = \"my-test-image:latest\"\n\n-- Task 1: Build\nlocal result_build = docker.build({\n  tag = image_tag,\n  path = \"./app\"\n})\nif not result_build.success then return false, \"Build failed\" end\n\n-- Task 2: Run\nlocal result_run = docker.run({\n  image = image_tag,\n  name = \"my-test-container\",\n  ports = {\"8080:80\"}\n})\nif not result_run.success then return false, \"Run failed\" end\n\n-- Task 3: Push (after successful testing)\nlocal result_push = docker.push({tag = image_tag})\nif not result_push.success then return false, \"Push failed\" end\n</code></pre>"},{"location":"modules/exec/","title":"Exec Module","text":"<p>The <code>exec</code> module is one of the most fundamental modules in <code>sloth-runner</code>. It provides a powerful function to execute arbitrary shell commands, giving you full control over the execution environment.</p>"},{"location":"modules/exec/#execruncommand-options","title":"<code>exec.run(command, [options])</code>","text":"<p>Executes a shell command using <code>bash -c</code>.</p>"},{"location":"modules/exec/#parameters","title":"Parameters","text":"<ul> <li><code>command</code> (string): The shell command to execute.</li> <li><code>options</code> (table, optional): A table of options to control the execution.<ul> <li><code>workdir</code> (string): The working directory where the command should be executed. If not provided, it runs in the task group's temporary directory (if available) or the current directory.</li> <li><code>env</code> (table): A dictionary of environment variables (key-value pairs) to set for the command's execution. These are added to the existing environment.</li> </ul> </li> </ul>"},{"location":"modules/exec/#returns","title":"Returns","text":"<p>A table containing the result of the command execution:</p> <ul> <li><code>success</code> (boolean): <code>true</code> if the command exited with a code of <code>0</code>, otherwise <code>false</code>.</li> <li><code>stdout</code> (string): The standard output from the command.</li> <li><code>stderr</code> (string): The standard error output from the command.</li> </ul>"},{"location":"modules/exec/#example","title":"Example","text":"<p>This example demonstrates how to use <code>exec.run</code> with a custom working directory and environment variables.</p> <pre><code>-- examples/exec_module_example.sloth\n\nModern DSLs = {\n  main = {\n    description = \"A task to demonstrate the exec module.\",\n    tasks = {\n      {\n        name = \"run-with-options\",\n        description = \"Executes a command with a custom workdir and environment.\",\n        command = function()\n          log.info(\"Preparing to run a custom command...\")\n\n          local exec = require(\"exec\")\n\n          -- Create a temporary directory for the example\n          local temp_dir = \"/tmp/sloth-exec-test\"\n          fs.mkdir(temp_dir)\n          fs.write(temp_dir .. \"/test.txt\", \"hello from test file\")\n\n          -- Define options\n          local options = {\n            workdir = temp_dir,\n            env = {\n              MY_VAR = \"SlothRunner\",\n              ANOTHER_VAR = \"is_awesome\"\n            }\n          }\n\n          -- Execute the command\n          local result = exec.run(\"echo 'MY_VAR is $MY_VAR' &amp;&amp; ls -l &amp;&amp; cat test.txt\", options)\n\n          -- Clean up the temporary directory\n          fs.rm_r(temp_dir)\n\n          if result.success then\n            log.info(\"Command executed successfully!\")\n            print(\"--- STDOUT ---\")\n            print(result.stdout)\n            print(\"--------------\")\n            return true, \"Exec command successful.\"\n          else\n            log.error(\"Exec command failed.\")\n            log.error(\"Stderr: \" .. result.stderr)\n            return false, \"Exec command failed.\"\n          end\n        end\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"modules/facts/","title":"Facts Module","text":"<p>The <code>facts</code> module provides access to system information collected from agents by the Sloth Runner master. This allows you to query detailed information about remote systems, including hardware specs, installed packages, running services, and more.</p>"},{"location":"modules/facts/#overview","title":"Overview","text":"<p>The facts module communicates with the Sloth Runner master to retrieve cached system information that agents periodically collect and report. This enables infrastructure discovery, validation, and conditional task execution based on real-time system state.</p>"},{"location":"modules/facts/#installation","title":"Installation","text":"<p>The <code>facts</code> module is automatically available as a global module in all Sloth Runner tasks. No <code>require</code> statement is needed.</p>"},{"location":"modules/facts/#core-functions","title":"Core Functions","text":""},{"location":"modules/facts/#factsget_all","title":"facts.get_all()","text":"<p>Retrieves all facts from an agent.</p> <p>Syntax: <pre><code>local info, err = facts.get_all({ agent = \"agent-name\" })\n</code></pre></p> <p>Parameters: - <code>agent</code> (string): The name of the agent to query</p> <p>Returns: - Table containing all system information, or nil on error - Error message if operation failed</p> <p>Example: <pre><code>task(\"check_system\", function()\n    local info, err = facts.get_all({ agent = \"prod-server-01\" })\n    if err then\n        error(\"Failed to get facts: \" .. err)\n    end\n\n    print(\"Hostname: \" .. info.hostname)\n    print(\"Platform: \" .. info.platform)\n    print(\"CPUs: \" .. info.cpus)\n    print(\"Memory Total: \" .. info.memory.total)\nend)\n</code></pre></p>"},{"location":"modules/facts/#factsget_hostname","title":"facts.get_hostname()","text":"<p>Gets the hostname of an agent.</p> <p>Syntax: <pre><code>local hostname, err = facts.get_hostname({ agent = \"agent-name\" })\n</code></pre></p> <p>Example: <pre><code>task(\"check_hostname\", function()\n    local hostname, err = facts.get_hostname({ agent = \"web-01\" })\n    if err then\n        error(\"Failed: \" .. err)\n    end\n    print(\"Hostname: \" .. hostname)\nend)\n</code></pre></p>"},{"location":"modules/facts/#factsget_platform","title":"facts.get_platform()","text":"<p>Gets platform information (OS, kernel, architecture).</p> <p>Syntax: <pre><code>local platform, err = facts.get_platform({ agent = \"agent-name\" })\n</code></pre></p> <p>Returns: Table with fields: - <code>os</code>: Operating system name - <code>family</code>: Platform family (e.g., \"debian\", \"redhat\") - <code>version</code>: OS version - <code>architecture</code>: System architecture (e.g., \"amd64\", \"arm64\") - <code>kernel</code>: Kernel name - <code>kernel_version</code>: Kernel version - <code>virtualization</code>: Virtualization technology (if any)</p> <p>Example: <pre><code>task(\"check_os\", function()\n    local platform, err = facts.get_platform({ agent = \"db-server\" })\n    if err then\n        error(\"Failed: \" .. err)\n    end\n\n    print(string.format(\"OS: %s %s\", platform.os, platform.version))\n    print(string.format(\"Arch: %s\", platform.architecture))\n    print(string.format(\"Kernel: %s %s\", platform.kernel, platform.kernel_version))\n\n    if platform.virtualization ~= \"\" then\n        print(\"Running on: \" .. platform.virtualization)\n    end\nend)\n</code></pre></p>"},{"location":"modules/facts/#factsget_memory","title":"facts.get_memory()","text":"<p>Gets memory information.</p> <p>Syntax: <pre><code>local memory, err = facts.get_memory({ agent = \"agent-name\" })\n</code></pre></p> <p>Returns: Table with fields: - <code>total</code>: Total memory in bytes - <code>available</code>: Available memory in bytes - <code>used</code>: Used memory in bytes - <code>used_percent</code>: Memory usage percentage - <code>free</code>: Free memory in bytes - <code>cached</code>: Cached memory in bytes - <code>buffers</code>: Buffer memory in bytes</p> <p>Example: <pre><code>task(\"check_memory\", function()\n    local mem, err = facts.get_memory({ agent = \"app-server\" })\n    if err then\n        error(\"Failed: \" .. err)\n    end\n\n    local total_gb = mem.total / 1024 / 1024 / 1024\n    local used_gb = mem.used / 1024 / 1024 / 1024\n\n    print(string.format(\"Memory: %.2f GB / %.2f GB (%.1f%%)\", \n        used_gb, total_gb, mem.used_percent))\n\n    if mem.used_percent &gt; 90 then\n        print(\"WARNING: Memory usage is critical!\")\n    end\nend)\n</code></pre></p>"},{"location":"modules/facts/#factsget_disk","title":"facts.get_disk()","text":"<p>Gets disk/filesystem information.</p> <p>Syntax: <pre><code>-- Get all disks\nlocal disks, err = facts.get_disk({ agent = \"agent-name\" })\n\n-- Get specific mountpoint\nlocal disk, err = facts.get_disk({ \n    agent = \"agent-name\", \n    mountpoint = \"/home\" \n})\n</code></pre></p> <p>Returns: - Array of disk information (if no mountpoint specified) - Single disk table (if mountpoint specified)</p> <p>Each disk table contains: - <code>device</code>: Device name - <code>mountpoint</code>: Mount path - <code>fstype</code>: Filesystem type - <code>total</code>: Total space in bytes - <code>used</code>: Used space in bytes - <code>free</code>: Free space in bytes - <code>used_percent</code>: Usage percentage</p> <p>Example: <pre><code>task(\"check_disk_space\", function()\n    local disks, err = facts.get_disk({ agent = \"file-server\" })\n    if err then\n        error(\"Failed: \" .. err)\n    end\n\n    for i, disk in ipairs(disks) do\n        local used_gb = disk.used / 1024 / 1024 / 1024\n        local total_gb = disk.total / 1024 / 1024 / 1024\n\n        print(string.format(\"%s: %.2f GB / %.2f GB (%.1f%%)\",\n            disk.mountpoint, used_gb, total_gb, disk.used_percent))\n\n        if disk.used_percent &gt; 85 then\n            print(\"  WARNING: Low disk space!\")\n        end\n    end\nend)\n</code></pre></p>"},{"location":"modules/facts/#factsget_network","title":"facts.get_network()","text":"<p>Gets network interface information.</p> <p>Syntax: <pre><code>-- Get all interfaces\nlocal interfaces, err = facts.get_network({ agent = \"agent-name\" })\n\n-- Get specific interface\nlocal iface, err = facts.get_network({ \n    agent = \"agent-name\", \n    interface = \"eth0\" \n})\n</code></pre></p> <p>Returns: Table or array of tables with fields: - <code>name</code>: Interface name - <code>mac</code>: MAC address - <code>mtu</code>: MTU size - <code>is_up</code>: Interface status (boolean) - <code>speed</code>: Link speed - <code>addresses</code>: Array of IP addresses</p> <p>Example: <pre><code>task(\"check_network\", function()\n    local ifaces, err = facts.get_network({ agent = \"router\" })\n    if err then\n        error(\"Failed: \" .. err)\n    end\n\n    for _, iface in ipairs(ifaces) do\n        print(string.format(\"Interface: %s\", iface.name))\n        print(string.format(\"  MAC: %s\", iface.mac))\n        print(string.format(\"  Status: %s\", iface.is_up and \"UP\" or \"DOWN\"))\n        print(\"  IPs:\")\n        for _, addr in ipairs(iface.addresses) do\n            print(\"    - \" .. addr)\n        end\n    end\nend)\n</code></pre></p>"},{"location":"modules/facts/#factsget_packages","title":"facts.get_packages()","text":"<p>Gets information about installed packages.</p> <p>Syntax: <pre><code>local pkg_info, err = facts.get_packages({ agent = \"agent-name\" })\n</code></pre></p> <p>Returns: Table with fields: - <code>manager</code>: Package manager name - <code>installed_count</code>: Number of installed packages - <code>updates_available</code>: Number of available updates - <code>packages</code>: Array of installed packages - <code>updates</code>: Array of available updates</p> <p>Each package contains: - <code>name</code>: Package name - <code>version</code>: Installed version - <code>architecture</code>: Package architecture - <code>description</code>: Package description</p> <p>Example: <pre><code>task(\"check_packages\", function()\n    local pkgs, err = facts.get_packages({ agent = \"server-01\" })\n    if err then\n        error(\"Failed: \" .. err)\n    end\n\n    print(string.format(\"Package Manager: %s\", pkgs.manager))\n    print(string.format(\"Installed Packages: %d\", pkgs.installed_count))\n    print(string.format(\"Updates Available: %d\", pkgs.updates_available))\n\n    if pkgs.updates_available &gt; 0 then\n        print(\"\\nAvailable Updates:\")\n        for _, upd in ipairs(pkgs.updates) do\n            print(string.format(\"  - %s: %s\", upd.name, upd.version))\n        end\n    end\nend)\n</code></pre></p>"},{"location":"modules/facts/#factsget_package","title":"facts.get_package()","text":"<p>Checks if a specific package is installed.</p> <p>Syntax: <pre><code>local pkg, err = facts.get_package({ \n    agent = \"agent-name\", \n    name = \"package-name\" \n})\n</code></pre></p> <p>Returns: Table with fields: - <code>name</code>: Package name - <code>installed</code>: Boolean indicating if package is installed - <code>version</code>: Installed version (if installed) - <code>architecture</code>: Package architecture (if installed) - <code>description</code>: Package description (if installed)</p> <p>Example: <pre><code>task(\"ensure_nginx\", function()\n    local pkg, err = facts.get_package({ \n        agent = \"web-server\", \n        name = \"nginx\" \n    })\n\n    if err then\n        error(\"Failed: \" .. err)\n    end\n\n    if pkg.installed then\n        print(string.format(\"nginx %s is installed\", pkg.version))\n    else\n        print(\"nginx is not installed - installing...\")\n        pkg.install({ packages = {\"nginx\"} }):delegate_to(\"web-server\")\n    end\nend)\n</code></pre></p>"},{"location":"modules/facts/#factsget_services","title":"facts.get_services()","text":"<p>Gets information about all services.</p> <p>Syntax: <pre><code>local services, err = facts.get_services({ agent = \"agent-name\" })\n</code></pre></p> <p>Returns: Array of service tables with fields: - <code>name</code>: Service name - <code>status</code>: Service status - <code>state</code>: Service state</p> <p>Example: <pre><code>task(\"list_services\", function()\n    local services, err = facts.get_services({ agent = \"app-server\" })\n    if err then\n        error(\"Failed: \" .. err)\n    end\n\n    print(\"Active Services:\")\n    for _, svc in ipairs(services) do\n        if svc.status == \"active\" then\n            print(string.format(\"  - %s: %s\", svc.name, svc.state))\n        end\n    end\nend)\n</code></pre></p>"},{"location":"modules/facts/#factsget_service","title":"facts.get_service()","text":"<p>Gets status of a specific service.</p> <p>Syntax: <pre><code>local service, err = facts.get_service({ \n    agent = \"agent-name\", \n    name = \"service-name\" \n})\n</code></pre></p> <p>Example: <pre><code>task(\"check_nginx_status\", function()\n    local svc, err = facts.get_service({ \n        agent = \"web-01\", \n        name = \"nginx\" \n    })\n\n    if err then\n        error(\"Failed: \" .. err)\n    end\n\n    print(string.format(\"nginx: %s (%s)\", svc.status, svc.state))\n\n    if svc.status ~= \"active\" then\n        print(\"WARNING: nginx is not active!\")\n    end\nend)\n</code></pre></p>"},{"location":"modules/facts/#factsget_users","title":"facts.get_users()","text":"<p>Gets information about system users.</p> <p>Syntax: <pre><code>local users, err = facts.get_users({ agent = \"agent-name\" })\n</code></pre></p> <p>Returns: Array of user tables with fields: - <code>username</code>: User name - <code>uid</code>: User ID - <code>gid</code>: Group ID - <code>home</code>: Home directory - <code>shell</code>: Login shell</p> <p>Example: <pre><code>task(\"list_users\", function()\n    local users, err = facts.get_users({ agent = \"server\" })\n    if err then\n        error(\"Failed: \" .. err)\n    end\n\n    print(\"System Users:\")\n    for _, user in ipairs(users) do\n        print(string.format(\"  %s (UID: %s) - %s\", \n            user.username, user.uid, user.shell))\n    end\nend)\n</code></pre></p>"},{"location":"modules/facts/#factsget_user","title":"facts.get_user()","text":"<p>Gets information about a specific user.</p> <p>Syntax: <pre><code>local user, err = facts.get_user({ \n    agent = \"agent-name\", \n    username = \"username\" \n})\n</code></pre></p> <p>Example: <pre><code>task(\"check_user\", function()\n    local user, err = facts.get_user({ \n        agent = \"server\", \n        username = \"deploy\" \n    })\n\n    if err then\n        print(\"User 'deploy' not found\")\n        -- Create user\n        user.create({\n            name = \"deploy\",\n            home = \"/home/deploy\",\n            shell = \"/bin/bash\"\n        }):delegate_to(\"server\")\n    else\n        print(string.format(\"User 'deploy' exists: %s\", user.home))\n    end\nend)\n</code></pre></p>"},{"location":"modules/facts/#factsget_processes","title":"facts.get_processes()","text":"<p>Gets process statistics.</p> <p>Syntax: <pre><code>local procs, err = facts.get_processes({ agent = \"agent-name\" })\n</code></pre></p> <p>Returns: Table with fields: - <code>total</code>: Total number of processes - <code>running</code>: Running processes - <code>sleeping</code>: Sleeping processes - <code>zombie</code>: Zombie processes</p> <p>Example: <pre><code>task(\"check_processes\", function()\n    local procs, err = facts.get_processes({ agent = \"server\" })\n    if err then\n        error(\"Failed: \" .. err)\n    end\n\n    print(string.format(\"Processes: %d total, %d running, %d sleeping\",\n        procs.total, procs.running, procs.sleeping))\n\n    if procs.zombie &gt; 0 then\n        print(string.format(\"WARNING: %d zombie processes!\", procs.zombie))\n    end\nend)\n</code></pre></p>"},{"location":"modules/facts/#factsget_mounts","title":"facts.get_mounts()","text":"<p>Gets filesystem mount information.</p> <p>Syntax: <pre><code>local mounts, err = facts.get_mounts({ agent = \"agent-name\" })\n</code></pre></p> <p>Returns: Array of mount tables with fields: - <code>device</code>: Device name - <code>mountpoint</code>: Mount path - <code>fstype</code>: Filesystem type - <code>options</code>: Mount options</p> <p>Example: <pre><code>task(\"list_mounts\", function()\n    local mounts, err = facts.get_mounts({ agent = \"server\" })\n    if err then\n        error(\"Failed: \" .. err)\n    end\n\n    print(\"Mounted Filesystems:\")\n    for _, mount in ipairs(mounts) do\n        print(string.format(\"  %s on %s type %s (%s)\",\n            mount.device, mount.mountpoint, mount.fstype, mount.options))\n    end\nend)\n</code></pre></p>"},{"location":"modules/facts/#factsget_uptime","title":"facts.get_uptime()","text":"<p>Gets system uptime information.</p> <p>Syntax: <pre><code>local uptime, err = facts.get_uptime({ agent = \"agent-name\" })\n</code></pre></p> <p>Returns: Table with fields: - <code>seconds</code>: Uptime in seconds - <code>boot_time</code>: Boot time (Unix timestamp) - <code>timezone</code>: System timezone</p> <p>Example: <pre><code>task(\"check_uptime\", function()\n    local uptime, err = facts.get_uptime({ agent = \"server\" })\n    if err then\n        error(\"Failed: \" .. err)\n    end\n\n    local days = math.floor(uptime.seconds / 86400)\n    local hours = math.floor((uptime.seconds % 86400) / 3600)\n    local mins = math.floor((uptime.seconds % 3600) / 60)\n\n    print(string.format(\"Uptime: %d days, %d hours, %d minutes\", \n        days, hours, mins))\n    print(string.format(\"Timezone: %s\", uptime.timezone))\nend)\n</code></pre></p>"},{"location":"modules/facts/#factsget_load","title":"facts.get_load()","text":"<p>Gets system load average.</p> <p>Syntax: <pre><code>local load, err = facts.get_load({ agent = \"agent-name\" })\n</code></pre></p> <p>Returns: Array with load averages [1min, 5min, 15min]</p> <p>Example: <pre><code>task(\"check_load\", function()\n    local load, err = facts.get_load({ agent = \"server\" })\n    if err then\n        error(\"Failed: \" .. err)\n    end\n\n    print(string.format(\"Load Average: %.2f, %.2f, %.2f\", \n        load[1], load[2], load[3]))\n\n    if load[1] &gt; 4.0 then\n        print(\"WARNING: High load!\")\n    end\nend)\n</code></pre></p>"},{"location":"modules/facts/#factsget_kernel","title":"facts.get_kernel()","text":"<p>Gets kernel information.</p> <p>Syntax: <pre><code>local kernel, err = facts.get_kernel({ agent = \"agent-name\" })\n</code></pre></p> <p>Returns: Table with fields: - <code>name</code>: Kernel name - <code>version</code>: Kernel version</p> <p>Example: <pre><code>task(\"check_kernel\", function()\n    local kernel, err = facts.get_kernel({ agent = \"server\" })\n    if err then\n        error(\"Failed: \" .. err)\n    end\n\n    print(string.format(\"Kernel: %s %s\", kernel.name, kernel.version))\nend)\n</code></pre></p>"},{"location":"modules/facts/#factsquery","title":"facts.query()","text":"<p>Performs a query on facts (experimental).</p> <p>Syntax: <pre><code>local result, err = facts.query({ \n    agent = \"agent-name\", \n    path = \"$.memory.total\" \n})\n</code></pre></p> <p>Note: This function is experimental and may change in future versions.</p>"},{"location":"modules/facts/#exemplo-destacado-validacao-e-deploy-inteligente","title":"\ud83d\udd25 Exemplo Destacado: Valida\u00e7\u00e3o e Deploy Inteligente","text":"<p>Este exemplo demonstra como usar facts para tomar decis\u00f5es inteligentes durante o deploy, validando o sistema alvo e adaptando o comportamento baseado nas condi\u00e7\u00f5es reais.</p> <pre><code>task({\n    name = \"intelligent-deploy\",\n    run = function()\n        local target_agent = values.target or \"prod-server-01\"\n\n        -- \ud83d\udcca Coletar informa\u00e7\u00f5es do sistema alvo\n        local info, err = facts.get_all({ agent = target_agent })\n        if err then\n            error(\"\u274c Cannot reach agent: \" .. err)\n        end\n\n        log.info(\"\ud83d\udd0d Analyzing \" .. info.hostname)\n        log.info(\"   Platform: \" .. info.platform.os .. \" \" .. info.platform.version)\n        log.info(\"   Memory: \" .. string.format(\"%.2f GB\", info.memory.total / 1024 / 1024 / 1024))\n        log.info(\"   Arch: \" .. info.platform.architecture)\n\n        -- \u2705 Valida\u00e7\u00e3o de requisitos m\u00ednimos\n        local mem_gb = info.memory.total / 1024 / 1024 / 1024\n        if mem_gb &lt; 4 then\n            error(\"\u274c Insufficient memory: need 4GB, have \" .. string.format(\"%.2f GB\", mem_gb))\n        end\n\n        -- \u2705 Verificar espa\u00e7o em disco\n        local root_disk, _ = facts.get_disk({ \n            agent = target_agent, \n            mountpoint = \"/\" \n        })\n        if root_disk.used_percent &gt; 85 then\n            log.warn(\"\u26a0\ufe0f  Disk usage high: \" .. root_disk.used_percent .. \"%\")\n        end\n\n        -- \u2705 Verificar se Docker j\u00e1 est\u00e1 instalado\n        local docker_pkg, _ = facts.get_package({ \n            agent = target_agent, \n            name = \"docker\" \n        })\n\n        if not docker_pkg.installed then\n            log.info(\"\ud83d\udce6 Installing Docker...\")\n            pkg.install({ packages = {\"docker.io\"} }):delegate_to(target_agent)\n        else\n            log.info(\"\u2705 Docker already installed: \" .. docker_pkg.version)\n        end\n\n        -- \ud83d\ude80 Deploy baseado na arquitetura\n        local image_tag = \"latest\"\n        if info.platform.architecture == \"arm64\" then\n            image_tag = \"latest-arm64\"\n        end\n\n        log.info(\"\ud83d\ude80 Deploying with image: myapp:\" .. image_tag)\n\n        -- Continue with deployment...\n        log.info(\"\u2705 Deploy completed successfully!\")\n    end\n})\n</code></pre> <p>Recursos demonstrados:</p> <ul> <li>\ud83d\udcca Coleta completa de informa\u00e7\u00f5es do sistema remoto</li> <li>\u2705 Valida\u00e7\u00e3o de requisitos (mem\u00f3ria, disco, pacotes)</li> <li>\ud83e\udde0 Deploy condicional baseado em arquitetura (x86/ARM)</li> <li>\ud83d\udd04 Instala\u00e7\u00e3o autom\u00e1tica de depend\u00eancias</li> <li>\ud83c\udfaf Uso de <code>values</code> para parametriza\u00e7\u00e3o</li> </ul>"},{"location":"modules/facts/#complete-examples","title":"Complete Examples","text":""},{"location":"modules/facts/#example-1-pre-deployment-system-validation","title":"Example 1: Pre-deployment System Validation","text":"<pre><code>task(\"validate_system\", function()\n    local hostname, _ = facts.get_hostname({ agent = \"prod-app-01\" })\n    print(\"Validating: \" .. hostname)\n\n    -- Check OS version\n    local platform, err = facts.get_platform({ agent = \"prod-app-01\" })\n    if err then error(\"Cannot get platform: \" .. err) end\n\n    if platform.os ~= \"linux\" then\n        error(\"Expected Linux, got: \" .. platform.os)\n    end\n\n    -- Check memory\n    local mem, err = facts.get_memory({ agent = \"prod-app-01\" })\n    if err then error(\"Cannot get memory: \" .. err) end\n\n    local mem_gb = mem.total / 1024 / 1024 / 1024\n    if mem_gb &lt; 8 then\n        error(string.format(\"Insufficient memory: %.2f GB (need 8 GB)\", mem_gb))\n    end\n\n    -- Check disk space\n    local disk, err = facts.get_disk({ \n        agent = \"prod-app-01\", \n        mountpoint = \"/\" \n    })\n    if err then error(\"Cannot get disk info: \" .. err) end\n\n    if disk.used_percent &gt; 80 then\n        error(string.format(\"Disk usage too high: %.1f%%\", disk.used_percent))\n    end\n\n    -- Check required package\n    local pkg, err = facts.get_package({ \n        agent = \"prod-app-01\", \n        name = \"docker\" \n    })\n    if err then error(\"Cannot check package: \" .. err) end\n\n    if not pkg.installed then\n        error(\"Docker is not installed\")\n    end\n\n    print(\"\u2713 All validations passed!\")\nend)\n</code></pre>"},{"location":"modules/facts/#example-2-dynamic-inventory-based-on-facts","title":"Example 2: Dynamic Inventory Based on Facts","text":"<pre><code>task(\"discover_web_servers\", function()\n    local agents = {\"server-01\", \"server-02\", \"server-03\"}\n    local web_servers = {}\n\n    for _, agent in ipairs(agents) do\n        -- Check if nginx is running\n        local svc, err = facts.get_service({ \n            agent = agent, \n            name = \"nginx\" \n        })\n\n        if not err and svc.status == \"active\" then\n            -- Get IP address\n            local iface, _ = facts.get_network({ \n                agent = agent, \n                interface = \"eth0\" \n            })\n\n            if iface and #iface.addresses &gt; 0 then\n                table.insert(web_servers, {\n                    name = agent,\n                    ip = iface.addresses[1]\n                })\n            end\n        end\n    end\n\n    print(\"Discovered Web Servers:\")\n    for _, server in ipairs(web_servers) do\n        print(string.format(\"  - %s: %s\", server.name, server.ip))\n    end\nend)\n</code></pre>"},{"location":"modules/facts/#example-3-conditional-deployment-based-on-system-state","title":"Example 3: Conditional Deployment Based on System State","text":"<pre><code>task(\"deploy_app\", function()\n    local agent = \"app-server-01\"\n\n    -- Get current system state\n    local platform, _ = facts.get_platform({ agent = agent })\n    local mem, _ = facts.get_memory({ agent = agent })\n\n    -- Decide deployment strategy based on available resources\n    if mem.available &lt; 2 * 1024 * 1024 * 1024 then  -- Less than 2GB\n        print(\"Low memory - using minimal deployment\")\n        -- Deploy with minimal resources\n    else\n        print(\"Sufficient memory - using full deployment\")\n        -- Deploy with full resources\n    end\n\n    -- Check if old version is installed\n    local old_app, _ = facts.get_package({ \n        agent = agent, \n        name = \"myapp\" \n    })\n\n    if old_app.installed then\n        print(\"Stopping old version: \" .. old_app.version)\n        systemd.stop({ unit = \"myapp\" }):delegate_to(agent)\n    end\n\n    -- Continue with deployment...\n    print(\"Deploying new version...\")\nend)\n</code></pre>"},{"location":"modules/facts/#best-practices","title":"Best Practices","text":"<ol> <li>Error Handling: Always check for errors when calling facts functions</li> <li>Agent Availability: Ensure the agent is online before querying facts</li> <li>Caching: Facts are cached by the master; they may not reflect real-time state</li> <li>Performance: Avoid excessive fact queries in loops; cache results when possible</li> <li>Validation: Use facts for pre-deployment validation to catch issues early</li> </ol>"},{"location":"modules/facts/#see-also","title":"See Also","text":"<ul> <li>Agent Module - Managing agents</li> <li>InfraTest Module - Infrastructure testing</li> <li>Package Module - Package management</li> <li>Systemd Module - Service management</li> </ul>"},{"location":"modules/file_ops/","title":"File Operations Module","text":"<p>O m\u00f3dulo <code>file_ops</code> fornece opera\u00e7\u00f5es de gerenciamento de arquivos similares aos m\u00f3dulos do Ansible, permitindo manipular arquivos, templates, archives e muito mais.</p>"},{"location":"modules/file_ops/#funcoes-disponiveis","title":"Fun\u00e7\u00f5es Dispon\u00edveis","text":""},{"location":"modules/file_ops/#copy","title":"copy()","text":"<p>Copia um arquivo de origem para destino, preservando ou definindo permiss\u00f5es.</p> <p>Sintaxe: <pre><code>result, err = file_ops.copy(src, dst [, options])\n</code></pre></p> <p>Par\u00e2metros: - <code>src</code> (string): Caminho do arquivo de origem - <code>dst</code> (string): Caminho do arquivo de destino - <code>options</code> (table, opcional): Op\u00e7\u00f5es adicionais   - <code>mode</code> (string): Permiss\u00f5es do arquivo (formato octal, ex: \"0644\")</p> <p>Retorno: - <code>result</code> (table): Informa\u00e7\u00f5es sobre a opera\u00e7\u00e3o   - <code>changed</code> (boolean): Se houve mudan\u00e7a   - <code>src</code> (string): Arquivo de origem   - <code>dest</code> (string): Arquivo de destino   - <code>size</code> (number): Tamanho do arquivo copiado - <code>err</code> (string): Mensagem de erro, se houver</p> <p>Exemplos:</p>"},{"location":"modules/file_ops/#exemplo-basico","title":"Exemplo B\u00e1sico","text":"<pre><code>task(\"copy_config\", function()\n  local result = file_ops.copy(\n    \"/etc/nginx/nginx.conf\",\n    \"/tmp/nginx.conf.backup\"\n  )\n\n  if result then\n    log.info(\"Config copied successfully\")\n  end\nend)\n</code></pre>"},{"location":"modules/file_ops/#copia-com-permissoes-especificas","title":"C\u00f3pia com Permiss\u00f5es Espec\u00edficas","text":"<pre><code>task(\"copy_with_permissions\", function()\n  local result = file_ops.copy(\n    \"/app/config.json\",\n    \"/backup/config.json\",\n    {mode = \"0600\"}\n  )\n\n  if result and result.changed then\n    log.info(string.format(\"Copied %d bytes\", result.size))\n  end\nend)\n</code></pre>"},{"location":"modules/file_ops/#copia-com-delegate_to","title":"C\u00f3pia com delegate_to","text":"<pre><code>task(\"copy_to_remote\", function()\n  :delegate_to(\"prod-server\")\n\n  local result = file_ops.copy(\n    \"/local/app.conf\",\n    \"/remote/app.conf\",\n    {mode = \"0644\"}\n  )\n\n  if result then\n    log.info(\"Config deployed to prod-server\")\n  end\nend)\n</code></pre>"},{"location":"modules/file_ops/#fetch","title":"fetch()","text":"<p>Busca um arquivo do agente remoto para a m\u00e1quina local.</p> <p>Sintaxe: <pre><code>result, err = file_ops.fetch(src, dst)\n</code></pre></p> <p>Par\u00e2metros: - <code>src</code> (string): Caminho do arquivo remoto - <code>dst</code> (string): Caminho do arquivo local</p> <p>Retorno: - <code>result</code> (table): Informa\u00e7\u00f5es sobre a opera\u00e7\u00e3o   - <code>changed</code> (boolean): Se houve mudan\u00e7a   - <code>src</code> (string): Arquivo de origem   - <code>dest</code> (string): Arquivo de destino   - <code>size</code> (number): Tamanho do arquivo</p> <p>Exemplos:</p>"},{"location":"modules/file_ops/#fetch-basico","title":"Fetch B\u00e1sico","text":"<pre><code>task(\"fetch_logs\", function()\n  local result = file_ops.fetch(\n    \"/var/log/app.log\",\n    \"/local/logs/app.log\"\n  )\n\n  if result then\n    log.info(string.format(\"Fetched %d bytes\", result.size))\n  end\nend)\n</code></pre>"},{"location":"modules/file_ops/#fetch-de-multiplos-servidores","title":"Fetch de M\u00faltiplos Servidores","text":"<pre><code>local servers = {\"web1\", \"web2\", \"web3\"}\n\nfor _, server in ipairs(servers) do\n  task(\"fetch_from_\" .. server, function()\n    :delegate_to(server)\n\n    local result = file_ops.fetch(\n      \"/var/log/nginx/access.log\",\n      string.format(\"/logs/%s/access.log\", server)\n    )\n\n    if result then\n      log.info(string.format(\"%s: fetched log\", server))\n    end\n  end)\nend\n</code></pre>"},{"location":"modules/file_ops/#template","title":"template()","text":"<p>Renderiza um template com vari\u00e1veis e salva no destino.</p> <p>Sintaxe: <pre><code>result, err = file_ops.template(src, dst, vars)\n</code></pre></p> <p>Par\u00e2metros: - <code>src</code> (string): Caminho do arquivo template (formato Go template) - <code>dst</code> (string): Caminho do arquivo de sa\u00edda - <code>vars</code> (table): Vari\u00e1veis para renderiza\u00e7\u00e3o</p> <p>Retorno: - <code>result</code> (table): Informa\u00e7\u00f5es sobre a opera\u00e7\u00e3o   - <code>changed</code> (boolean): Se houve mudan\u00e7a   - <code>src</code> (string): Template de origem   - <code>dest</code> (string): Arquivo de destino</p> <p>Exemplos:</p>"},{"location":"modules/file_ops/#template-simples","title":"Template Simples","text":"<pre><code>task(\"configure_app\", function()\n  local vars = {\n    AppName = \"MyApp\",\n    Port = 8080,\n    Environment = \"production\",\n    Debug = false\n  }\n\n  local result = file_ops.template(\n    \"/templates/config.json.tmpl\",\n    \"/app/config.json\",\n    vars\n  )\n\n  if result and result.changed then\n    log.info(\"Configuration updated\")\n  end\nend)\n</code></pre>"},{"location":"modules/file_ops/#template-para-nginx","title":"Template para Nginx","text":"<pre><code>task(\"configure_nginx\", function()\n  :delegate_to(\"web-server\")\n\n  local vars = {\n    ServerName = \"example.com\",\n    Port = 80,\n    RootDir = \"/var/www/html\",\n    AccessLog = \"/var/log/nginx/access.log\",\n    ErrorLog = \"/var/log/nginx/error.log\"\n  }\n\n  local result = file_ops.template(\n    \"/templates/nginx.conf.tmpl\",\n    \"/etc/nginx/sites-available/mysite\",\n    vars\n  )\n\n  if result then\n    -- Reload nginx\n    cmd.run(\"nginx -t &amp;&amp; systemctl reload nginx\")\n  end\nend)\n</code></pre>"},{"location":"modules/file_ops/#template-condicional","title":"Template Condicional","text":"<pre><code>task(\"configure_database\", function()\n  local db_vars = {\n    Host = \"localhost\",\n    Port = 5432,\n    Database = \"myapp\",\n    User = \"appuser\",\n    MaxConnections = 100,\n    EnableSSL = os.getenv(\"ENV\") == \"production\"\n  }\n\n  file_ops.template(\n    \"/templates/database.conf.tmpl\",\n    \"/etc/myapp/database.conf\",\n    db_vars\n  )\nend)\n</code></pre>"},{"location":"modules/file_ops/#lineinfile","title":"lineinfile()","text":"<p>Garante que uma linha espec\u00edfica existe (ou n\u00e3o existe) em um arquivo.</p> <p>Sintaxe: <pre><code>result, err = file_ops.lineinfile(path, line [, options])\n</code></pre></p> <p>Par\u00e2metros: - <code>path</code> (string): Caminho do arquivo - <code>line</code> (string): Linha a ser inserida/removida - <code>options</code> (table, opcional): Op\u00e7\u00f5es   - <code>state</code> (string): \"present\" ou \"absent\" (padr\u00e3o: \"present\")   - <code>regexp</code> (string): Express\u00e3o regular para encontrar linha existente</p> <p>Retorno: - <code>result</code> (table): Informa\u00e7\u00f5es sobre a opera\u00e7\u00e3o   - <code>changed</code> (boolean): Se houve mudan\u00e7a   - <code>path</code> (string): Caminho do arquivo</p> <p>Exemplos:</p>"},{"location":"modules/file_ops/#adicionar-linha","title":"Adicionar Linha","text":"<pre><code>task(\"add_host_entry\", function()\n  local result = file_ops.lineinfile(\n    \"/etc/hosts\",\n    \"192.168.1.100 myserver.local\"\n  )\n\n  if result.changed then\n    log.info(\"Host entry added\")\n  end\nend)\n</code></pre>"},{"location":"modules/file_ops/#substituir-com-regexp","title":"Substituir com Regexp","text":"<pre><code>task(\"update_config\", function()\n  -- Atualiza a linha que come\u00e7a com \"port=\"\n  local result = file_ops.lineinfile(\n    \"/app/config.ini\",\n    \"port=8080\",\n    {regexp = \"^port=\"}\n  )\n\n  if result.changed then\n    log.info(\"Port updated to 8080\")\n  end\nend)\n</code></pre>"},{"location":"modules/file_ops/#remover-linha","title":"Remover Linha","text":"<pre><code>task(\"remove_deprecated_config\", function()\n  local result = file_ops.lineinfile(\n    \"/etc/app.conf\",\n    \"enable_legacy_mode=true\",\n    {state = \"absent\"}\n  )\n\n  if result.changed then\n    log.info(\"Legacy mode disabled\")\n  end\nend)\n</code></pre>"},{"location":"modules/file_ops/#configuracao-de-ssh","title":"Configura\u00e7\u00e3o de SSH","text":"<pre><code>task(\"secure_ssh\", function()\n  :delegate_to(\"all-servers\")\n\n  -- Desabilita autentica\u00e7\u00e3o por senha\n  file_ops.lineinfile(\n    \"/etc/ssh/sshd_config\",\n    \"PasswordAuthentication no\",\n    {regexp = \"^#?PasswordAuthentication\"}\n  )\n\n  -- Desabilita root login\n  file_ops.lineinfile(\n    \"/etc/ssh/sshd_config\",\n    \"PermitRootLogin no\",\n    {regexp = \"^#?PermitRootLogin\"}\n  )\n\n  -- Restart SSH\n  systemd.restart(\"sshd\")\nend)\n</code></pre>"},{"location":"modules/file_ops/#blockinfile","title":"blockinfile()","text":"<p>Insere, atualiza ou remove um bloco de linhas em um arquivo.</p> <p>Sintaxe: <pre><code>result, err = file_ops.blockinfile(path, block [, options])\n</code></pre></p> <p>Par\u00e2metros: - <code>path</code> (string): Caminho do arquivo - <code>block</code> (string): Bloco de texto a ser gerenciado - <code>options</code> (table, opcional): Op\u00e7\u00f5es   - <code>state</code> (string): \"present\" ou \"absent\" (padr\u00e3o: \"present\")   - <code>marker_begin</code> (string): Marcador inicial (padr\u00e3o: \"# BEGIN MANAGED BLOCK\")   - <code>marker_end</code> (string): Marcador final (padr\u00e3o: \"# END MANAGED BLOCK\")</p> <p>Retorno: - <code>result</code> (table): Informa\u00e7\u00f5es sobre a opera\u00e7\u00e3o   - <code>changed</code> (boolean): Se houve mudan\u00e7a   - <code>path</code> (string): Caminho do arquivo</p> <p>Exemplos:</p>"},{"location":"modules/file_ops/#adicionar-bloco-de-configuracao","title":"Adicionar Bloco de Configura\u00e7\u00e3o","text":"<pre><code>task(\"add_cron_jobs\", function()\n  local cron_block = [[\n0 2 * * * /usr/local/bin/backup.sh\n0 3 * * * /usr/local/bin/cleanup.sh\n0 4 * * 0 /usr/local/bin/weekly-report.sh]]\n\n  local result = file_ops.blockinfile(\n    \"/etc/cron.d/myapp\",\n    cron_block\n  )\n\n  if result.changed then\n    log.info(\"Cron jobs configured\")\n  end\nend)\n</code></pre>"},{"location":"modules/file_ops/#atualizar-bloco-existente","title":"Atualizar Bloco Existente","text":"<pre><code>task(\"update_firewall_rules\", function()\n  local rules = [[\n-A INPUT -p tcp --dport 80 -j ACCEPT\n-A INPUT -p tcp --dport 443 -j ACCEPT\n-A INPUT -p tcp --dport 22 -j ACCEPT]]\n\n  file_ops.blockinfile(\n    \"/etc/iptables/rules.v4\",\n    rules,\n    {\n      marker_begin = \"# BEGIN SLOTH RULES\",\n      marker_end = \"# END SLOTH RULES\"\n    }\n  )\nend)\n</code></pre>"},{"location":"modules/file_ops/#remover-bloco","title":"Remover Bloco","text":"<pre><code>task(\"cleanup_old_config\", function()\n  local result = file_ops.blockinfile(\n    \"/etc/app.conf\",\n    \"\",\n    {state = \"absent\"}\n  )\n\n  if result.changed then\n    log.info(\"Old configuration block removed\")\n  end\nend)\n</code></pre>"},{"location":"modules/file_ops/#configurar-hosts-file","title":"Configurar Hosts File","text":"<pre><code>task(\"configure_internal_hosts\", function()\n  local hosts_block = [[\n192.168.1.10 db-primary.internal\n192.168.1.11 db-replica.internal\n192.168.1.20 cache-01.internal\n192.168.1.21 cache-02.internal]]\n\n  file_ops.blockinfile(\n    \"/etc/hosts\",\n    hosts_block,\n    {\n      marker_begin = \"# BEGIN INTERNAL HOSTS\",\n      marker_end = \"# END INTERNAL HOSTS\"\n    }\n  )\nend)\n</code></pre>"},{"location":"modules/file_ops/#replace","title":"replace()","text":"<p>Substitui todas as ocorr\u00eancias de um padr\u00e3o em um arquivo usando express\u00f5es regulares.</p> <p>Sintaxe: <pre><code>result, err = file_ops.replace(path, pattern, replacement)\n</code></pre></p> <p>Par\u00e2metros: - <code>path</code> (string): Caminho do arquivo - <code>pattern</code> (string): Express\u00e3o regular para busca - <code>replacement</code> (string): Texto de substitui\u00e7\u00e3o</p> <p>Retorno: - <code>result</code> (table): Informa\u00e7\u00f5es sobre a opera\u00e7\u00e3o   - <code>changed</code> (boolean): Se houve mudan\u00e7a   - <code>path</code> (string): Caminho do arquivo</p> <p>Exemplos:</p>"},{"location":"modules/file_ops/#substituicao-simples","title":"Substitui\u00e7\u00e3o Simples","text":"<pre><code>task(\"update_version\", function()\n  local result = file_ops.replace(\n    \"/app/version.txt\",\n    \"version=1\\\\.0\\\\.0\",\n    \"version=2.0.0\"\n  )\n\n  if result.changed then\n    log.info(\"Version updated\")\n  end\nend)\n</code></pre>"},{"location":"modules/file_ops/#atualizar-multiplas-ocorrencias","title":"Atualizar M\u00faltiplas Ocorr\u00eancias","text":"<pre><code>task(\"update_api_endpoint\", function()\n  local result = file_ops.replace(\n    \"/app/config.json\",\n    \"http://old-api\\\\.example\\\\.com\",\n    \"https://new-api.example.com\"\n  )\n\n  if result.changed then\n    log.info(\"API endpoint updated\")\n  end\nend)\n</code></pre>"},{"location":"modules/file_ops/#replace-com-captura-de-grupos","title":"Replace com Captura de Grupos","text":"<pre><code>task(\"update_database_config\", function()\n  -- Substitui host do banco mantendo o resto da string\n  file_ops.replace(\n    \"/etc/myapp/db.conf\",\n    \"host=(\\\\w+)\\\\.old\\\\.domain\",\n    \"host=$1.new.domain\"\n  )\nend)\n</code></pre>"},{"location":"modules/file_ops/#unarchive","title":"unarchive()","text":"<p>Extrai arquivos compactados (.zip, .tar, .tar.gz, .tgz).</p> <p>Sintaxe: <pre><code>result, err = file_ops.unarchive(src, dst)\n</code></pre></p> <p>Par\u00e2metros: - <code>src</code> (string): Caminho do arquivo compactado - <code>dst</code> (string): Diret\u00f3rio de destino para extra\u00e7\u00e3o</p> <p>Retorno: - <code>result</code> (table): Informa\u00e7\u00f5es sobre a opera\u00e7\u00e3o   - <code>changed</code> (boolean): Se houve mudan\u00e7a   - <code>src</code> (string): Arquivo de origem   - <code>dest</code> (string): Diret\u00f3rio de destino</p> <p>Exemplos:</p>"},{"location":"modules/file_ops/#extrair-zip","title":"Extrair ZIP","text":"<pre><code>task(\"extract_release\", function()\n  local result = file_ops.unarchive(\n    \"/tmp/app-v2.0.0.zip\",\n    \"/opt/myapp\"\n  )\n\n  if result then\n    log.info(\"Release extracted successfully\")\n  end\nend)\n</code></pre>"},{"location":"modules/file_ops/#extrair-targz","title":"Extrair TAR.GZ","text":"<pre><code>task(\"deploy_backup\", function()\n  :delegate_to(\"backup-server\")\n\n  file_ops.unarchive(\n    \"/backups/data-20240101.tar.gz\",\n    \"/var/restore\"\n  )\n\n  log.info(\"Backup extracted\")\nend)\n</code></pre>"},{"location":"modules/file_ops/#deploy-de-aplicacao","title":"Deploy de Aplica\u00e7\u00e3o","text":"<pre><code>task(\"deploy_application\", function()\n  -- Download release\n  http.download(\n    \"https://releases.example.com/app-v3.0.0.tar.gz\",\n    \"/tmp/app-v3.0.0.tar.gz\"\n  )\n\n  -- Extract\n  file_ops.unarchive(\n    \"/tmp/app-v3.0.0.tar.gz\",\n    \"/opt/myapp\"\n  )\n\n  -- Restart service\n  systemd.restart(\"myapp\")\n\n  log.info(\"Application deployed: v3.0.0\")\nend)\n</code></pre>"},{"location":"modules/file_ops/#stat","title":"stat()","text":"<p>Obt\u00e9m informa\u00e7\u00f5es detalhadas sobre um arquivo ou diret\u00f3rio.</p> <p>Sintaxe: <pre><code>result = file_ops.stat(path)\n</code></pre></p> <p>Par\u00e2metros: - <code>path</code> (string): Caminho do arquivo ou diret\u00f3rio</p> <p>Retorno: - <code>result</code> (table): Informa\u00e7\u00f5es do arquivo   - <code>exists</code> (boolean): Se o arquivo existe   - <code>path</code> (string): Caminho do arquivo   - <code>size</code> (number): Tamanho em bytes   - <code>mode</code> (string): Permiss\u00f5es (formato octal)   - <code>is_dir</code> (boolean): Se \u00e9 um diret\u00f3rio   - <code>is_file</code> (boolean): Se \u00e9 um arquivo regular   - <code>mtime</code> (number): Timestamp de modifica\u00e7\u00e3o   - <code>checksum</code> (string): Checksum SHA256   - <code>uid</code> (number): User ID do propriet\u00e1rio (Unix)   - <code>gid</code> (number): Group ID do propriet\u00e1rio (Unix)</p> <p>Exemplos:</p>"},{"location":"modules/file_ops/#verificar-existencia","title":"Verificar Exist\u00eancia","text":"<pre><code>task(\"check_config\", function()\n  local info = file_ops.stat(\"/etc/myapp/config.json\")\n\n  if not info.exists then\n    log.error(\"Configuration file missing!\")\n    return\n  end\n\n  log.info(\"Config file exists\")\nend)\n</code></pre>"},{"location":"modules/file_ops/#verificar-tamanho","title":"Verificar Tamanho","text":"<pre><code>task(\"check_log_size\", function()\n  local info = file_ops.stat(\"/var/log/app.log\")\n\n  if info.exists and info.size &gt; 100 * 1024 * 1024 then\n    log.warn(\"Log file is over 100MB, rotating...\")\n    cmd.run(\"logrotate /etc/logrotate.d/myapp\")\n  end\nend)\n</code></pre>"},{"location":"modules/file_ops/#verificar-permissoes","title":"Verificar Permiss\u00f5es","text":"<pre><code>task(\"audit_permissions\", function()\n  local sensitive_files = {\n    \"/etc/ssl/private/server.key\",\n    \"/etc/myapp/secrets.conf\",\n    \"/root/.ssh/id_rsa\"\n  }\n\n  for _, file in ipairs(sensitive_files) do\n    local info = file_ops.stat(file)\n\n    if info.exists then\n      if info.mode ~= \"600\" then\n        log.error(string.format(\n          \"Insecure permissions on %s: %s (expected 600)\",\n          file, info.mode\n        ))\n      else\n        log.info(string.format(\"%s: OK\", file))\n      end\n    end\n  end\nend)\n</code></pre>"},{"location":"modules/file_ops/#comparar-checksums","title":"Comparar Checksums","text":"<pre><code>task(\"verify_deployment\", function()\n  local local_file = file_ops.stat(\"/local/app.jar\")\n  local remote_file = file_ops.stat(\"/opt/app/app.jar\")\n\n  if local_file.checksum == remote_file.checksum then\n    log.info(\"Deployment verified: checksums match\")\n  else\n    log.error(\"Checksum mismatch! Deployment may be corrupted\")\n  end\nend)\n</code></pre>"},{"location":"modules/file_ops/#exemplos-avancados","title":"Exemplos Avan\u00e7ados","text":""},{"location":"modules/file_ops/#pipeline-de-deploy-completo","title":"Pipeline de Deploy Completo","text":"<pre><code>local config = {\n  version = \"v2.5.0\",\n  servers = {\"web1\", \"web2\", \"web3\"},\n  app_dir = \"/opt/myapp\",\n  backup_dir = \"/var/backups/myapp\"\n}\n\n-- Backup da vers\u00e3o atual\ntask(\"backup_current\", function()\n  for _, server in ipairs(config.servers) do\n    :delegate_to(server)\n\n    local timestamp = os.date(\"%Y%m%d_%H%M%S\")\n    local backup_name = string.format(\"backup_%s.tar.gz\", timestamp)\n\n    cmd.run(string.format(\n      \"tar czf %s/%s -C %s .\",\n      config.backup_dir,\n      backup_name,\n      config.app_dir\n    ))\n\n    log.info(string.format(\"%s: backup created\", server))\n  end\nend)\n\n-- Deploy nova vers\u00e3o\ntask(\"deploy_new_version\", function()\n  :depends_on(\"backup_current\")\n\n  for _, server in ipairs(config.servers) do\n    :delegate_to(server)\n\n    -- Download release\n    local release_url = string.format(\n      \"https://releases.example.com/app-%s.tar.gz\",\n      config.version\n    )\n    local tmp_file = \"/tmp/app-release.tar.gz\"\n\n    http.download(release_url, tmp_file)\n\n    -- Extract\n    file_ops.unarchive(tmp_file, config.app_dir)\n\n    -- Update configuration\n    local vars = {\n      ServerID = server,\n      Environment = \"production\",\n      Version = config.version\n    }\n\n    file_ops.template(\n      \"/templates/app.conf.tmpl\",\n      config.app_dir .. \"/config/app.conf\",\n      vars\n    )\n\n    log.info(string.format(\"%s: deployed %s\", server, config.version))\n  end\nend)\n\n-- Restart services\ntask(\"restart_services\", function()\n  :depends_on(\"deploy_new_version\")\n\n  for _, server in ipairs(config.servers) do\n    :delegate_to(server)\n\n    systemd.restart(\"myapp\")\n\n    -- Wait for healthcheck\n    local healthy = false\n    for i = 1, 10 do\n      sleep(2)\n      local response = http.get(\"http://localhost:8080/health\")\n      if response and response.status == 200 then\n        healthy = true\n        break\n      end\n    end\n\n    if healthy then\n      log.info(string.format(\"%s: service healthy\", server))\n    else\n      log.error(string.format(\"%s: healthcheck failed!\", server))\n    end\n  end\nend)\n</code></pre>"},{"location":"modules/file_ops/#configuracao-centralizada","title":"Configura\u00e7\u00e3o Centralizada","text":"<pre><code>task(\"configure_all_servers\", function()\n  local servers = {\n    {name = \"web1\", role = \"web\", ip = \"192.168.1.10\"},\n    {name = \"web2\", role = \"web\", ip = \"192.168.1.11\"},\n    {name = \"db1\", role = \"database\", ip = \"192.168.1.20\"}\n  }\n\n  -- Configure /etc/hosts em todos os servidores\n  local hosts_block = \"\"\n  for _, srv in ipairs(servers) do\n    hosts_block = hosts_block .. string.format(\n      \"%s %s.internal %s\\n\",\n      srv.ip, srv.name, srv.name\n    )\n  end\n\n  for _, server in ipairs(servers) do\n    :delegate_to(server.name)\n\n    -- Update hosts\n    file_ops.blockinfile(\n      \"/etc/hosts\",\n      hosts_block,\n      {\n        marker_begin = \"# BEGIN CLUSTER HOSTS\",\n        marker_end = \"# END CLUSTER HOSTS\"\n      }\n    )\n\n    -- Configure based on role\n    if server.role == \"web\" then\n      file_ops.template(\n        \"/templates/nginx.conf.tmpl\",\n        \"/etc/nginx/nginx.conf\",\n        {ServerName = server.name, Role = server.role}\n      )\n    elseif server.role == \"database\" then\n      file_ops.template(\n        \"/templates/postgresql.conf.tmpl\",\n        \"/etc/postgresql/postgresql.conf\",\n        {ServerName = server.name, Role = server.role}\n      )\n    end\n\n    log.info(string.format(\"%s: configured\", server.name))\n  end\nend)\n</code></pre>"},{"location":"modules/file_ops/#integracao-com-outros-modulos","title":"Integra\u00e7\u00e3o com Outros M\u00f3dulos","text":""},{"location":"modules/file_ops/#com-systemd","title":"Com systemd","text":"<pre><code>task(\"update_and_restart\", function()\n  :delegate_to(\"app-server\")\n\n  -- Update configuration\n  file_ops.lineinfile(\n    \"/etc/myapp/app.conf\",\n    \"workers=8\",\n    {regexp = \"^workers=\"}\n  )\n\n  -- Restart if changed\n  systemd.restart(\"myapp\")\n\n  -- Verify\n  if systemd.is_active(\"myapp\") then\n    log.info(\"Service restarted successfully\")\n  end\nend)\n</code></pre>"},{"location":"modules/file_ops/#com-pkg","title":"Com pkg","text":"<pre><code>task(\"install_and_configure\", function()\n  :delegate_to(\"new-server\")\n\n  -- Install package\n  pkg.install(\"nginx\")\n\n  -- Configure\n  file_ops.template(\n    \"/templates/nginx.conf.tmpl\",\n    \"/etc/nginx/nginx.conf\",\n    {Port = 80, Workers = 4}\n  )\n\n  -- Enable and start\n  systemd.enable(\"nginx\")\n  systemd.start(\"nginx\")\nend)\n</code></pre>"},{"location":"modules/file_ops/#com-user","title":"Com user","text":"<pre><code>task(\"setup_application_user\", function()\n  -- Create user\n  user.create(\"appuser\", {\n    home = \"/home/appuser\",\n    shell = \"/bin/bash\",\n    system = true\n  })\n\n  -- Create app directory\n  cmd.run(\"mkdir -p /opt/myapp\")\n  cmd.run(\"chown appuser:appuser /opt/myapp\")\n\n  -- Copy application files\n  file_ops.copy(\n    \"/dist/app.jar\",\n    \"/opt/myapp/app.jar\"\n  )\n\n  -- Set permissions\n  cmd.run(\"chown appuser:appuser /opt/myapp/app.jar\")\n  cmd.run(\"chmod 755 /opt/myapp/app.jar\")\nend)\n</code></pre>"},{"location":"modules/file_ops/#melhores-praticas","title":"Melhores Pr\u00e1ticas","text":"<ol> <li>Sempre verifique o retorno: Cheque se a opera\u00e7\u00e3o foi bem-sucedida</li> <li>Use idempot\u00eancia: Os m\u00f3dulos s\u00e3o idempotentes por design</li> <li>Fa\u00e7a backup: Sempre fa\u00e7a backup antes de modifica\u00e7\u00f5es cr\u00edticas</li> <li>Use templates: Para arquivos complexos, prefira templates</li> <li>Valide com stat(): Verifique o estado final dos arquivos</li> <li>Use delegate_to: Para opera\u00e7\u00f5es em servidores remotos</li> <li>Combine com systemd: Reinicie servi\u00e7os ap\u00f3s mudan\u00e7as de configura\u00e7\u00e3o</li> </ol>"},{"location":"modules/file_ops/#tratamento-de-erros","title":"Tratamento de Erros","text":"<pre><code>task(\"safe_file_operation\", function()\n  local result, err = file_ops.copy(\n    \"/source/file.txt\",\n    \"/dest/file.txt\"\n  )\n\n  if not result then\n    log.error(\"Failed to copy file: \" .. tostring(err))\n    return\n  end\n\n  if result.changed then\n    log.info(\"File copied successfully\")\n  else\n    log.info(\"File already up to date\")\n  end\nend)\n</code></pre>"},{"location":"modules/fs/","title":"FS Module","text":"<p>The <code>fs</code> module provides essential functions for interacting with the file system directly from your Lua scripts.</p>"},{"location":"modules/fs/#fsreadpath","title":"<code>fs.read(path)</code>","text":"<p>Reads the entire content of a file.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The path to the file.</li> </ul> </li> <li>Returns:<ul> <li><code>string</code>: The content of the file.</li> <li><code>error</code>: An error object if the read fails.</li> </ul> </li> </ul>"},{"location":"modules/fs/#fswritepath-content","title":"<code>fs.write(path, content)</code>","text":"<p>Writes content to a file, overwriting it if it already exists.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The path to the file.</li> <li><code>content</code> (string): The content to write.</li> </ul> </li> <li>Returns:<ul> <li><code>error</code>: An error object if the write fails.</li> </ul> </li> </ul>"},{"location":"modules/fs/#fsappendpath-content","title":"<code>fs.append(path, content)</code>","text":"<p>Appends content to the end of a file. Creates the file if it doesn't exist.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The path to the file.</li> <li><code>content</code> (string): The content to append.</li> </ul> </li> <li>Returns:<ul> <li><code>error</code>: An error object if the append fails.</li> </ul> </li> </ul>"},{"location":"modules/fs/#fsexistspath","title":"<code>fs.exists(path)</code>","text":"<p>Checks if a file or directory exists at the given path.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The path to check.</li> </ul> </li> <li>Returns:<ul> <li><code>boolean</code>: <code>true</code> if the path exists, <code>false</code> otherwise.</li> </ul> </li> </ul>"},{"location":"modules/fs/#fsmkdirpath","title":"<code>fs.mkdir(path)</code>","text":"<p>Creates a directory at the given path, including any necessary parent directories (like <code>mkdir -p</code>).</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The directory path to create.</li> </ul> </li> <li>Returns:<ul> <li><code>error</code>: An error object if the creation fails.</li> </ul> </li> </ul>"},{"location":"modules/fs/#fsrmpath","title":"<code>fs.rm(path)</code>","text":"<p>Removes a single file.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The path to the file to remove.</li> </ul> </li> <li>Returns:<ul> <li><code>error</code>: An error object if the removal fails.</li> </ul> </li> </ul>"},{"location":"modules/fs/#fsrm_rpath","title":"<code>fs.rm_r(path)</code>","text":"<p>Removes a file or directory recursively (like <code>rm -rf</code>).</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The path to remove.</li> </ul> </li> <li>Returns:<ul> <li><code>error</code>: An error object if the removal fails.</li> </ul> </li> </ul>"},{"location":"modules/fs/#fslspath","title":"<code>fs.ls(path)</code>","text":"<p>Lists the contents of a directory.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The path to the directory.</li> </ul> </li> <li>Returns:<ul> <li><code>table</code>: A table containing the names of files and subdirectories.</li> <li><code>error</code>: An error object if the listing fails.</li> </ul> </li> </ul>"},{"location":"modules/fs/#fstmpname","title":"<code>fs.tmpname()</code>","text":"<p>Generates a unique temporary directory path. Note: This function only returns the name; it does not create the directory.</p> <ul> <li>Returns:<ul> <li><code>string</code>: A unique path suitable for a temporary directory.</li> <li><code>error</code>: An error object if a name could not be generated.</li> </ul> </li> </ul>"},{"location":"modules/fs/#example","title":"Example","text":"<pre><code>command = function()\n  local fs = require(\"fs\")\n\n  local tmp_dir = \"/tmp/fs-example\"\n  log.info(\"Creating directory: \" .. tmp_dir)\n  fs.mkdir(tmp_dir)\n\n  local file_path = tmp_dir .. \"/my_file.txt\"\n  log.info(\"Writing to file: \" .. file_path)\n  fs.write(file_path, \"Hello, Sloth Runner!\\n\")\n\n  log.info(\"Appending to file...\")\n  fs.append(file_path, \"This is a new line.\")\n\n  if fs.exists(file_path) then\n    log.info(\"File content: \" .. fs.read(file_path))\n  end\n\n  log.info(\"Listing contents of \" .. tmp_dir)\n  local contents = fs.ls(tmp_dir)\n  for i, name in ipairs(contents) do\n    print(\"- \" .. name)\n  end\n\n  log.info(\"Cleaning up...\")\n  fs.rm_r(tmp_dir)\n\n  return true, \"FS module operations successful.\"\nend\n</code></pre>"},{"location":"modules/gcp/","title":"GCP Module","text":"<p>The <code>gcp</code> module provides a simple interface for executing Google Cloud CLI (<code>gcloud</code>) commands from within a <code>sloth-runner</code> task.</p>"},{"location":"modules/gcp/#gcpexecargs","title":"<code>gcp.exec(args)</code>","text":"<p>Executes a <code>gcloud</code> command with the specified arguments.</p>"},{"location":"modules/gcp/#parameters","title":"Parameters","text":"<ul> <li><code>args</code> (table): A Lua table (array) of strings representing the arguments to pass to the <code>gcloud</code> command. For example, <code>{\"compute\", \"instances\", \"list\"}</code>.</li> </ul>"},{"location":"modules/gcp/#returns","title":"Returns","text":"<p>A table containing the result of the command execution with the following keys:</p> <ul> <li><code>stdout</code> (string): The standard output from the command.</li> <li><code>stderr</code> (string): The standard error output from the command.</li> <li><code>exit_code</code> (number): The exit code of the command. An exit code of <code>0</code> typically indicates success.</li> </ul>"},{"location":"modules/gcp/#example","title":"Example","text":"<p>This example defines a task that lists all Compute Engine instances in the <code>us-central1</code> region for a specific project.</p> <pre><code>-- examples/gcp_cli_example.sloth\n\nModern DSLs = {\n  main = {\n    description = \"A task to list GCP compute instances.\",\n    tasks = {\n      {\n        name = \"list-instances\",\n        description = \"Lists GCE instances in us-central1.\",\n        command = function()\n          log.info(\"Listing GCP instances...\")\n\n          -- require the gcp module to make it available\n          local gcp = require(\"gcp\")\n\n          -- Execute the gcloud command\n          local result = gcp.exec({\n            \"compute\", \n            \"instances\", \n            \"list\", \n            \"--project\", \"my-gcp-project-id\",\n            \"--zones\", \"us-central1-a,us-central1-b\"\n          })\n\n          -- Check the result\n          if result and result.exit_code == 0 then\n            log.info(\"Successfully listed instances.\")\n            print(\"--- INSTANCE LIST ---\")\n            print(result.stdout)\n            print(\"---------------------\")\n            return true, \"GCP command successful.\"\n          else\n            log.error(\"Failed to list GCP instances.\")\n            if result then\n              log.error(\"Stderr: \" .. result.stderr)\n            end\n            return false, \"GCP command failed.\"\n          end\n        end\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"modules/git/","title":"Git Module","text":"<p>The <code>git</code> module provides a fluent API to interact with Git repositories, allowing you to automate common version control operations like cloning, committing, and pushing.</p>"},{"location":"modules/git/#gitcloneurl-path","title":"<code>git.clone(url, path)</code>","text":"<p>Clones a Git repository to a local path.</p> <ul> <li>Parameters:<ul> <li><code>url</code> (string): The URL of the repository to clone.</li> <li><code>path</code> (string): The local directory to clone into.</li> </ul> </li> <li>Returns:<ul> <li><code>repo</code> (object): A <code>GitRepo</code> object on success.</li> <li><code>error</code>: An error object if the clone fails.</li> </ul> </li> </ul>"},{"location":"modules/git/#gitrepopath","title":"<code>git.repo(path)</code>","text":"<p>Opens an existing local Git repository.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The path to the existing local repository.</li> </ul> </li> <li>Returns:<ul> <li><code>repo</code> (object): A <code>GitRepo</code> object on success.</li> <li><code>error</code>: An error object if the path is not a valid Git repository.</li> </ul> </li> </ul>"},{"location":"modules/git/#the-gitrepo-object","title":"The <code>GitRepo</code> Object","text":"<p>This object represents a local repository and provides chainable methods for performing Git operations.</p>"},{"location":"modules/git/#repocheckoutref","title":"<code>repo:checkout(ref)</code>","text":"<p>Checks out a specific branch, tag, or commit.</p> <ul> <li>Parameters: <code>ref</code> (string).</li> </ul>"},{"location":"modules/git/#repopullremote-branch","title":"<code>repo:pull(remote, branch)</code>","text":"<p>Pulls changes from a remote.</p> <ul> <li>Parameters: <code>remote</code> (string), <code>branch</code> (string).</li> </ul>"},{"location":"modules/git/#repoaddpattern","title":"<code>repo:add(pattern)</code>","text":"<p>Stages files for a commit.</p> <ul> <li>Parameters: <code>pattern</code> (string), e.g., <code>\".\"</code> or <code>\"path/to/file.txt\"</code>.</li> </ul>"},{"location":"modules/git/#repocommitmessage","title":"<code>repo:commit(message)</code>","text":"<p>Creates a commit.</p> <ul> <li>Parameters: <code>message</code> (string).</li> </ul>"},{"location":"modules/git/#repotagname-message","title":"<code>repo:tag(name, [message])</code>","text":"<p>Creates a new tag.</p> <ul> <li>Parameters: <code>name</code> (string), <code>message</code> (string, optional).</li> </ul>"},{"location":"modules/git/#repopushremote-branch-options","title":"<code>repo:push(remote, branch, [options])</code>","text":"<p>Pushes commits to a remote.</p> <ul> <li>Parameters:<ul> <li><code>remote</code> (string).</li> <li><code>branch</code> (string).</li> <li><code>options</code> (table, optional): e.g., <code>{ follow_tags = true }</code>.</li> </ul> </li> </ul>"},{"location":"modules/git/#reporesult","title":"<code>repo:result()</code>","text":"<p>This method is called at the end of a chain to get the result of the last operation.</p> <ul> <li>Returns:<ul> <li><code>result</code> (table): A table containing <code>success</code> (boolean), <code>stdout</code> (string), and <code>stderr</code> (string).</li> </ul> </li> </ul>"},{"location":"modules/git/#example","title":"Example","text":"<p>This example demonstrates a full CI/CD-like workflow: clone, create a version file, add, commit, tag, and push.</p> <pre><code>command = function()\n  local git = require(\"git\")\n  local repo_path = \"/tmp/git-example-repo\"\n\n  -- Clean up previous runs\n  fs.rm_r(repo_path)\n\n  -- 1. Clone the repository\n  log.info(\"Cloning repository...\")\n  local repo, err = git.clone(\"https://github.com/chalkan3-sloth/sloth-runner.git\", repo_path)\n  if err then\n    return false, \"Failed to clone: \" .. err\n  end\n\n  -- 2. Create and write a version file\n  fs.write(repo_path .. \"/VERSION\", \"1.2.3\")\n\n  -- 3. Chain Git commands: add -&gt; commit -&gt; tag -&gt; push\n  log.info(\"Adding, committing, tagging, and pushing...\")\n  repo:add(\".\"):commit(\"ci: Bump version to 1.2.3\"):tag(\"v1.2.3\"):push(\"origin\", \"main\", { follow_tags = true })\n\n  -- 4. Get the result of the final operation (push)\n  local result = repo:result()\n\n  if not result.success then\n    log.error(\"Git push failed: \" .. result.stderr)\n    return false, \"Git push failed.\"\n  end\n\n  log.info(\"Successfully pushed new version tag.\")\n  return true, \"Git operations successful.\"\nend\n</code></pre>"},{"location":"modules/gitops/","title":"\ud83d\udd04 GitOps Module - Complete API Reference","text":"<p>The GitOps module provides native Git-driven deployment workflows with intelligent diff preview, automatic rollback, and multi-environment support.</p>"},{"location":"modules/gitops/#module-overview","title":"\ud83d\udccb Module Overview","text":"<pre><code>local gitops = require(\"gitops\")\n</code></pre> <p>The GitOps module enables:</p> <ul> <li>\ud83c\udf0a Declarative Workflows - Git-driven deployment automation</li> <li>\ud83d\udd0d Intelligent Diff Preview - Visual change analysis before deployment</li> <li>\ud83d\udee1\ufe0f Smart Rollback - Automatic rollback on failure with state backup</li> <li>\ud83c\udfe2 Multi-Environment - Separate workflows for dev/staging/production</li> <li>\u2638\ufe0f Kubernetes Native - First-class Kubernetes integration</li> </ul>"},{"location":"modules/gitops/#quick-setup","title":"\ud83d\ude80 Quick Setup","text":""},{"location":"modules/gitops/#gitopsworkflowconfig","title":"<code>gitops.workflow(config)</code>","text":"<p>Create a simple GitOps workflow with minimal configuration.</p> <pre><code>local workflow = gitops.workflow({\n    repo = \"https://github.com/company/infrastructure\",\n    branch = \"main\",\n    auto_sync = true,\n    diff_preview = true,\n    rollback_on_failure = true\n})\n\n-- Returns: {workflow_id: \"workflow-123\", repository_id: \"repo-123\", status: \"created\"}\n</code></pre> <p>Parameters: - <code>repo</code> (string): Git repository URL - <code>branch</code> (string): Git branch to track (default: \"main\") - <code>auto_sync</code> (boolean): Enable automatic synchronization - <code>diff_preview</code> (boolean): Enable diff preview before sync - <code>rollback_on_failure</code> (boolean): Enable automatic rollback on failure</p> <p>Returns: <pre><code>{\n    workflow_id = \"workflow-1234567890\",\n    repository_id = \"repo-1234567890\", \n    status = \"created\",\n    auto_sync = true,\n    diff_preview = true,\n    rollback_on_failure = true\n}\n</code></pre></p>"},{"location":"modules/gitops/#repository-management","title":"\ud83c\udfd7\ufe0f Repository Management","text":""},{"location":"modules/gitops/#gitopsregister_repositoryconfig","title":"<code>gitops.register_repository(config)</code>","text":"<p>Register a Git repository for GitOps workflows.</p> <pre><code>local repo_id = gitops.register_repository({\n    id = \"production-repo\",           -- Optional custom ID\n    url = \"https://github.com/company/k8s-manifests\",\n    branch = \"main\",\n    credentials = {                   -- Optional authentication\n        type = \"token\",\n        token = \"ghp_xxxxxxxxxxxx\"\n    },\n    poll_interval = \"30s\"            -- How often to check for changes\n})\n</code></pre> <p>Parameters: - <code>id</code> (string): Custom repository ID (auto-generated if not provided) - <code>url</code> (string): Git repository URL - <code>branch</code> (string): Git branch to track - <code>credentials</code> (table): Authentication credentials   - <code>type</code> (string): \"token\", \"ssh\", or \"userpass\"   - <code>token</code> (string): Personal access token (for type=\"token\")   - <code>username</code> (string): Username (for type=\"userpass\")   - <code>password</code> (string): Password (for type=\"userpass\")   - <code>ssh_key</code> (string): SSH private key (for type=\"ssh\") - <code>poll_interval</code> (string): Polling interval for auto-sync</p>"},{"location":"modules/gitops/#workflow-management","title":"\ud83d\udd27 Workflow Management","text":""},{"location":"modules/gitops/#gitopscreate_workflowconfig","title":"<code>gitops.create_workflow(config)</code>","text":"<p>Create a detailed GitOps workflow with advanced configuration.</p> <pre><code>local workflow_id = gitops.create_workflow({\n    id = \"production-workflow\",       -- Optional custom ID\n    name = \"Production Infrastructure\",\n    repository = \"production-repo\",   -- Repository ID\n    target_path = \"k8s/production\",   -- Path within repository\n    auto_sync = false,                -- Manual sync for production\n    diff_preview = true,\n    rollback_on_failure = true,\n    sync_policy = {                   -- Advanced sync configuration\n        auto_prune = true,            -- Remove orphaned resources\n        retry = {\n            limit = 3,\n            backoff = \"exponential\"\n        },\n        health_check = {\n            enabled = true,\n            timeout = \"10m\"\n        }\n    }\n})\n</code></pre> <p>Parameters: - <code>id</code> (string): Custom workflow ID - <code>name</code> (string): Human-readable workflow name - <code>repository</code> (string): Repository ID to use - <code>target_path</code> (string): Path within repository to sync - <code>auto_sync</code> (boolean): Enable automatic synchronization - <code>diff_preview</code> (boolean): Enable diff preview - <code>rollback_on_failure</code> (boolean): Enable automatic rollback - <code>sync_policy</code> (table): Advanced synchronization policies</p>"},{"location":"modules/gitops/#gitopsget_workflow_statusworkflow_id","title":"<code>gitops.get_workflow_status(workflow_id)</code>","text":"<p>Get the current status of a GitOps workflow.</p> <pre><code>local status = gitops.get_workflow_status(\"workflow-123\")\n</code></pre> <p>Returns: <pre><code>{\n    id = \"workflow-123\",\n    name = \"Production Infrastructure\",\n    status = \"synced\",                -- active | syncing | synced | failed | degraded\n    auto_sync = false,\n    repository = \"production-repo\",\n    last_sync_result = {              -- Last synchronization result\n        id = \"sync-1234567890\",\n        status = \"succeeded\",         -- running | succeeded | failed\n        start_time = \"2024-01-15T10:30:00Z\",\n        commit_hash = \"abc123def456\",\n        message = \"Sync completed successfully\",\n        metrics = {\n            duration = \"45.2s\",\n            resources_processed = 15,\n            resources_applied = 8,\n            resources_skipped = 7,\n            conflicts_resolved = 0\n        }\n    }\n}\n</code></pre></p>"},{"location":"modules/gitops/#gitopslist_workflows","title":"<code>gitops.list_workflows()</code>","text":"<p>List all registered GitOps workflows.</p> <pre><code>local workflows = gitops.list_workflows()\n-- Returns array of workflow objects\n</code></pre>"},{"location":"modules/gitops/#synchronization","title":"\ud83d\udd04 Synchronization","text":""},{"location":"modules/gitops/#gitopssync_workflowworkflow_id","title":"<code>gitops.sync_workflow(workflow_id)</code>","text":"<p>Manually trigger synchronization for a workflow.</p> <pre><code>local success = gitops.sync_workflow(\"workflow-123\")\n-- Returns: true on success, false on failure\n</code></pre>"},{"location":"modules/gitops/#gitopsstart_auto_sync","title":"<code>gitops.start_auto_sync()</code>","text":"<p>Start the auto-sync controller for all workflows with <code>auto_sync = true</code>.</p> <pre><code>gitops.start_auto_sync()\n-- Starts background polling for all auto-sync enabled workflows\n</code></pre>"},{"location":"modules/gitops/#gitopsstop_auto_sync","title":"<code>gitops.stop_auto_sync()</code>","text":"<p>Stop the auto-sync controller.</p> <pre><code>gitops.stop_auto_sync()\n-- Stops all background synchronization\n</code></pre>"},{"location":"modules/gitops/#diff-preview","title":"\ud83d\udd0d Diff &amp; Preview","text":""},{"location":"modules/gitops/#gitopsgenerate_diffworkflow_id","title":"<code>gitops.generate_diff(workflow_id)</code>","text":"<p>Generate a comprehensive diff preview for pending changes.</p> <pre><code>local diff = gitops.generate_diff(\"workflow-123\")\n</code></pre> <p>Returns: <pre><code>{\n    workflow_id = \"workflow-123\",\n    generated_at = \"2024-01-15T10:30:00Z\",\n    summary = {                       -- High-level summary\n        total_changes = 5,\n        created_resources = 2,\n        updated_resources = 2,\n        deleted_resources = 1,\n        conflict_count = 0,\n        warning_count = 1\n    },\n    changes = {                       -- Detailed changes\n        {\n            type = \"create\",          -- create | update | delete\n            resource = \"Deployment/web-app\",\n            desired_state = {...},    -- New resource definition\n            diff = \"+ Creating Deployment/web-app with 3 replicas\",\n            impact = \"medium\"         -- low | medium | high | critical\n        },\n        {\n            type = \"update\", \n            resource = \"Service/web-svc\",\n            current_state = {...},    -- Current resource state\n            desired_state = {...},    -- Desired resource state\n            diff = \"~ Updating Service/web-svc:\\n  port: 80 -&gt; 8080\",\n            impact = \"low\"\n        }\n    },\n    conflicts = {                     -- Detected conflicts\n        {\n            resource = \"ConfigMap/app-config\",\n            type = \"validation\",      -- resource_exists | out_of_sync | validation\n            description = \"Resource modified outside of GitOps\",\n            current_state = {...},\n            desired_state = {...},\n            suggestions = [\n                \"Review manual changes before proceeding\",\n                \"Consider updating the Git repository\"\n            ]\n        }\n    },\n    warnings = [                      -- Warnings and recommendations\n        \"High-impact change detected: Deployment/critical-app\"\n    ]\n}\n</code></pre></p>"},{"location":"modules/gitops/#gitopspreview_changesworkflow_id","title":"<code>gitops.preview_changes(workflow_id)</code>","text":"<p>Alias for <code>gitops.generate_diff()</code> for better readability.</p> <pre><code>local preview = gitops.preview_changes(\"workflow-123\")\n-- Same as gitops.generate_diff()\n</code></pre>"},{"location":"modules/gitops/#rollback","title":"\ud83d\udee1\ufe0f Rollback","text":""},{"location":"modules/gitops/#gitopsrollback_workflowworkflow_id-reason","title":"<code>gitops.rollback_workflow(workflow_id, reason)</code>","text":"<p>Rollback a workflow to its previous state.</p> <pre><code>local success = gitops.rollback_workflow(\"workflow-123\", \"Health check failed\")\n-- Returns: true on success, false on failure\n</code></pre> <p>Parameters: - <code>workflow_id</code> (string): Workflow to rollback - <code>reason</code> (string): Reason for rollback (for audit logging)</p>"},{"location":"modules/gitops/#complete-examples","title":"\ud83c\udfaf Complete Examples","text":""},{"location":"modules/gitops/#multi-environment-setup","title":"Multi-Environment Setup","text":"<pre><code>local gitops = require(\"gitops\")\nlocal log = require(\"log\")\n\n-- Define environments\nlocal environments = {\n    {\n        name = \"development\",\n        repo = \"https://github.com/company/k8s-dev\",\n        branch = \"develop\",\n        auto_sync = true,\n        sync_interval = \"5m\"\n    },\n    {\n        name = \"staging\",\n        repo = \"https://github.com/company/k8s-staging\",\n        branch = \"staging\", \n        auto_sync = true,\n        sync_interval = \"10m\"\n    },\n    {\n        name = \"production\",\n        repo = \"https://github.com/company/k8s-prod\",\n        branch = \"main\",\n        auto_sync = false,      -- Manual deployments in production\n        approval_required = true\n    }\n}\n\n-- Create workflows for all environments\nlocal workflows = {}\nfor _, env in ipairs(environments) do\n    -- Register repository\n    local repo_id = gitops.register_repository({\n        id = env.name .. \"-repo\",\n        url = env.repo,\n        branch = env.branch\n    })\n\n    -- Create workflow\n    local workflow_id = gitops.create_workflow({\n        id = env.name .. \"-workflow\",\n        name = env.name .. \" Environment\", \n        repository = repo_id,\n        target_path = \"manifests\",\n        auto_sync = env.auto_sync,\n        diff_preview = true,\n        rollback_on_failure = true\n    })\n\n    workflows[env.name] = workflow_id\n    log.info(\"Created GitOps workflow for \" .. env.name .. \": \" .. workflow_id)\nend\n\n-- Start auto-sync controller\ngitops.start_auto_sync()\n</code></pre>"},{"location":"modules/gitops/#production-deployment-with-validation","title":"Production Deployment with Validation","text":"<pre><code>local production_deploy = task(\"production_deploy\")\n    :description(\"Production deployment with full GitOps validation\")\n    :command(function(params, deps)\n        local workflow_id = workflows.production\n\n        -- Step 1: Generate diff and validate\n        log.info(\"\ud83d\udd0d Analyzing changes for production deployment...\")\n        local diff = gitops.generate_diff(workflow_id)\n\n        if not diff then\n            log.info(\"\u2139\ufe0f No changes detected\")\n            return {success = true, message = \"No changes to deploy\"}\n        end\n\n        -- Step 2: Display change summary\n        log.info(\"\ud83d\udcca Production Deployment Summary:\")\n        log.info(\"  \ud83d\udcdd Total changes: \" .. diff.summary.total_changes)\n        log.info(\"  \u2728 Created: \" .. diff.summary.created_resources)\n        log.info(\"  \ud83d\udd04 Updated: \" .. diff.summary.updated_resources)\n        log.info(\"  \ud83d\uddd1\ufe0f Deleted: \" .. diff.summary.deleted_resources)\n\n        -- Step 3: Check for conflicts and high-impact changes\n        if diff.summary.conflict_count &gt; 0 then\n            log.error(\"\ud83d\udca5 Conflicts detected - manual resolution required\")\n            return {success = false, message = \"Conflicts must be resolved\"}\n        end\n\n        local high_impact_changes = 0\n        for _, change in ipairs(diff.changes) do\n            if change.impact == \"high\" or change.impact == \"critical\" then\n                high_impact_changes = high_impact_changes + 1\n                log.warn(\"\u26a0\ufe0f High-impact: \" .. change.resource .. \" (\" .. change.type .. \")\")\n            end\n        end\n\n        -- Step 4: Show warnings\n        if #diff.warnings &gt; 0 then\n            log.warn(\"\u26a0\ufe0f Warnings:\")\n            for _, warning in ipairs(diff.warnings) do\n                log.warn(\"  \u2022 \" .. warning)\n            end\n        end\n\n        -- Step 5: Require approval for production\n        if high_impact_changes &gt; 0 then\n            print(\"\ud83d\udd12 High-impact changes detected. Proceed? (y/N)\")\n            local response = io.read()\n            if response:lower() ~= \"y\" then\n                return {success = false, message = \"Deployment cancelled\"}\n            end\n        end\n\n        -- Step 6: Execute deployment\n        log.info(\"\ud83d\ude80 Executing production deployment...\")\n        local sync_success = gitops.sync_workflow(workflow_id)\n\n        if not sync_success then\n            log.error(\"\ud83d\udca5 Production deployment failed!\")\n            return {success = false, message = \"Deployment failed\"}\n        end\n\n        -- Step 7: Verify deployment\n        log.info(\"\ud83d\udd0d Verifying deployment...\")\n        local status = gitops.get_workflow_status(workflow_id)\n\n        if status.status == \"synced\" and status.last_sync_result.status == \"succeeded\" then\n            log.info(\"\u2705 Production deployment successful!\")\n            log.info(\"\ud83d\udcca Applied \" .. status.last_sync_result.metrics.resources_applied .. \" resources\")\n            log.info(\"\u23f1\ufe0f Completed in \" .. status.last_sync_result.metrics.duration)\n            return {success = true, message = \"Production deployed successfully\"}\n        else\n            log.error(\"\ud83d\udca5 Deployment verification failed!\")\n\n            -- Automatic rollback\n            log.warn(\"\ud83d\udd04 Initiating automatic rollback...\")\n            local rollback_success = gitops.rollback_workflow(workflow_id, \"Deployment verification failed\")\n\n            if rollback_success then\n                log.info(\"\u2705 Automatic rollback completed\")\n                return {success = false, message = \"Deployment failed, rollback successful\"}\n            else\n                log.error(\"\ud83d\udca5 Rollback also failed!\")\n                return {success = false, message = \"Deployment and rollback both failed\"}\n            end\n        end\n    end)\n    :build()\n</code></pre>"},{"location":"modules/gitops/#kubernetes-specific-gitops","title":"Kubernetes-Specific GitOps","text":"<pre><code>local k8s_deploy = task(\"kubernetes_gitops_deploy\")\n    :description(\"Kubernetes-native GitOps deployment\")\n    :command(function(params, deps)\n        local workflow_id = params.workflow_id\n\n        -- Generate diff with Kubernetes-specific analysis\n        local diff = gitops.generate_diff(workflow_id)\n\n        -- Kubernetes-specific validations\n        local k8s_issues = {}\n        for _, change in ipairs(diff.changes) do\n            -- Check for dangerous Kubernetes operations\n            if change.type == \"delete\" then\n                if change.resource:match(\"Namespace\") then\n                    table.insert(k8s_issues, \"\ud83d\udea8 CRITICAL: Deleting namespace \" .. change.resource)\n                elseif change.resource:match(\"PersistentVolume\") then\n                    table.insert(k8s_issues, \"\u26a0\ufe0f WARNING: Deleting PersistentVolume \" .. change.resource)\n                end\n            end\n\n            if change.type == \"update\" and change.resource:match(\"Deployment\") then\n                log.info(\"\ud83d\udce6 Deployment update: \" .. change.resource)\n                -- Could add image change detection here\n            end\n        end\n\n        if #k8s_issues &gt; 0 then\n            log.warn(\"\ud83d\udea8 Kubernetes-specific issues detected:\")\n            for _, issue in ipairs(k8s_issues) do\n                log.warn(\"  \" .. issue)\n            end\n\n            print(\"Proceed despite Kubernetes warnings? (y/N)\")\n            local response = io.read()\n            if response:lower() ~= \"y\" then\n                return {success = false, message = \"Deployment cancelled due to K8s issues\"}\n            end\n        end\n\n        -- Execute Kubernetes deployment\n        local sync_success = gitops.sync_workflow(workflow_id)\n\n        if sync_success then\n            -- Kubernetes-specific post-deployment checks\n            log.info(\"\ud83d\udd0d Running Kubernetes health checks...\")\n\n            -- Could add kubectl-based health checks here\n            -- kubectl get pods --all-namespaces\n            -- kubectl get services\n            -- kubectl get ingress\n\n            return {success = true, message = \"Kubernetes deployment successful\"}\n        else\n            return {success = false, message = \"Kubernetes deployment failed\"}\n        end\n    end)\n    :build()\n</code></pre>"},{"location":"modules/gitops/#best-practices","title":"\ud83c\udfaf Best Practices","text":""},{"location":"modules/gitops/#1-environment-separation","title":"1. Environment Separation","text":"<pre><code>-- Use different repositories for different environments\nlocal env_repos = {\n    dev = \"company/k8s-dev\",\n    staging = \"company/k8s-staging\", \n    prod = \"company/k8s-prod\"\n}\n</code></pre>"},{"location":"modules/gitops/#2-always-preview-in-production","title":"2. Always Preview in Production","text":"<pre><code>-- Never deploy to production without reviewing changes\nif environment == \"production\" then\n    local diff = gitops.generate_diff(workflow_id)\n    if diff.summary.conflict_count &gt; 0 or has_high_impact_changes(diff) then\n        -- Require manual approval\n    end\nend\n</code></pre>"},{"location":"modules/gitops/#3-descriptive-rollback-reasons","title":"3. Descriptive Rollback Reasons","text":"<pre><code>-- Provide clear audit trail\ngitops.rollback_workflow(workflow_id, \"Health check failed after 5 minutes - CPU usage &gt; 90%\")\n</code></pre>"},{"location":"modules/gitops/#4-monitor-sync-results","title":"4. Monitor Sync Results","text":"<pre><code>-- Always verify deployment success\nlocal status = gitops.get_workflow_status(workflow_id)\nif status.last_sync_result.status ~= \"succeeded\" then\n    -- Handle failure appropriately\nend\n</code></pre>"},{"location":"modules/gitops/#5-use-auto-sync-judiciously","title":"5. Use Auto-Sync Judiciously","text":"<pre><code>-- Auto-sync for dev/staging, manual for production\nlocal auto_sync = environment ~= \"production\"\n</code></pre>"},{"location":"modules/gitops/#advanced-features","title":"\ud83d\udd27 Advanced Features","text":""},{"location":"modules/gitops/#custom-sync-policies","title":"Custom Sync Policies","text":"<pre><code>local workflow_id = gitops.create_workflow({\n    name = \"Advanced Sync Policy\",\n    repository = repo_id,\n    sync_policy = {\n        auto_prune = true,            -- Remove resources not in Git\n        retry = {\n            limit = 5,\n            backoff = \"exponential\",  -- exponential | linear | fixed\n            max_duration = \"10m\"\n        },\n        health_check = {\n            enabled = true,\n            timeout = \"10m\",\n            failure_mode = \"rollback\"  -- ignore | fail | rollback\n        },\n        pre_sync_hooks = [            -- Commands to run before sync\n            \"kubectl cluster-info\",\n            \"helm repo update\"\n        ],\n        post_sync_hooks = [           -- Commands to run after sync\n            \"kubectl rollout status deployment/app\",\n            \"curl -f http://app/health\"\n        ]\n    }\n})\n</code></pre>"},{"location":"modules/gitops/#multi-repository-coordination","title":"Multi-Repository Coordination","text":"<pre><code>-- Coordinate deployments across multiple repositories\nlocal repos = {\n    frontend = gitops.workflow({repo = \"company/frontend-config\"}),\n    backend = gitops.workflow({repo = \"company/backend-config\"}),\n    database = gitops.workflow({repo = \"company/database-config\"})\n}\n\n-- Deploy in dependency order\ngitops.sync_workflow(repos.database.workflow_id)\ngitops.sync_workflow(repos.backend.workflow_id) \ngitops.sync_workflow(repos.frontend.workflow_id)\n</code></pre>"},{"location":"modules/gitops/#integration-examples","title":"\ud83d\ude80 Integration Examples","text":""},{"location":"modules/gitops/#with-ai-module","title":"With AI Module","text":"<pre><code>local ai = require(\"ai\")\nlocal gitops = require(\"gitops\")\n\nlocal intelligent_deploy = task(\"ai_gitops_deploy\")\n    :command(function(params, deps)\n        local deploy_cmd = \"kubectl apply -f manifests/\"\n\n        -- AI failure prediction before GitOps deployment\n        local prediction = ai.predict_failure(\"ai_gitops_deploy\", deploy_cmd)\n\n        if prediction.failure_probability &gt; 0.25 then\n            log.warn(\"\ud83e\udd16 AI detected high deployment risk: \" .. \n                    string.format(\"%.1f%%\", prediction.failure_probability * 100))\n\n            for _, rec in ipairs(prediction.recommendations) do\n                log.info(\"\ud83d\udca1 AI Recommendation: \" .. rec)\n            end\n        end\n\n        -- GitOps deployment with AI insights\n        local workflow_id = params.gitops_workflow_id\n        local success = gitops.sync_workflow(workflow_id)\n\n        -- Record execution for AI learning\n        ai.record_execution({\n            task_name = \"ai_gitops_deploy\",\n            command = deploy_cmd,\n            success = success,\n            execution_time = \"30s\",\n            ai_prediction_used = true,\n            predicted_failure_probability = prediction.failure_probability\n        })\n\n        return {success = success}\n    end)\n    :build()\n</code></pre>"},{"location":"modules/gitops/#with-modern-dsl-workflows","title":"With Modern DSL Workflows","text":"<pre><code>workflow.define(\"gitops_pipeline\", {\n    description = \"Complete GitOps deployment pipeline\",\n    version = \"2.0.0\",\n\n    metadata = {\n        author = \"DevOps Team\",\n        tags = {\"gitops\", \"kubernetes\", \"production\"}\n    },\n\n    tasks = {\n        production_deploy,\n        k8s_deploy\n    },\n\n    on_task_start = function(task_name)\n        log.info(\"\ud83d\ude80 Starting GitOps task: \" .. task_name)\n    end,\n\n    on_task_complete = function(task_name, success, output)\n        if success then\n            log.info(\"\u2705 GitOps task completed: \" .. task_name)\n        else\n            log.error(\"\u274c GitOps task failed: \" .. task_name)\n\n            -- Could trigger emergency rollback here\n            if task_name == \"production_deploy\" then\n                log.warn(\"\ud83d\udd04 Triggering emergency rollback...\")\n                gitops.rollback_workflow(production_workflow_id, \"Emergency rollback due to task failure\")\n            end\n        end\n    end,\n\n    on_complete = function(success, results)\n        if success then\n            log.info(\"\ud83c\udf89 GitOps pipeline completed successfully!\")\n        else\n            log.error(\"\ud83d\udca5 GitOps pipeline failed - check logs for details\")\n        end\n    end\n})\n</code></pre>"},{"location":"modules/gitops/#see-also","title":"\ud83d\udcda See Also","text":"<ul> <li>GitOps Features Overview</li> <li>GitOps Quick Setup</li> <li>Multi-Environment GitOps</li> <li>Kubernetes Integration</li> <li>Rollback Strategies</li> </ul>"},{"location":"modules/goroutine/","title":"\ud83d\ude80 M\u00f3dulo Goroutine - Execu\u00e7\u00e3o Paralela Poderosa","text":""},{"location":"modules/goroutine/#visao-geral","title":"\ud83c\udf1f Vis\u00e3o Geral","text":"<p>O m\u00f3dulo <code>goroutine</code> traz o poder das goroutines do Go para seus scripts Lua, permitindo executar tarefas em paralelo com facilidade. Com este m\u00f3dulo, voc\u00ea pode:</p> <ul> <li>\u26a1 Executar m\u00faltiplas opera\u00e7\u00f5es simultaneamente - Reduzir tempo de execu\u00e7\u00e3o de minutos para segundos</li> <li>\ud83c\udfed Criar worker pools - Controlar concorr\u00eancia e processar grandes volumes de dados</li> <li>\ud83c\udfaf Async/Await pattern - Escrever c\u00f3digo ass\u00edncrono de forma limpa e leg\u00edvel</li> <li>\ud83d\udd04 WaitGroups - Sincronizar m\u00faltiplas goroutines facilmente</li> <li>\u23f1\ufe0f Timeout e error handling - Executar opera\u00e7\u00f5es com limites de tempo</li> </ul>"},{"location":"modules/goroutine/#casos-de-uso-reais","title":"\ud83d\udcbc Casos de Uso Reais","text":"Cen\u00e1rio Tempo Sequencial Com Goroutines Ganho \ud83d\ude80 Deploy em 10 servidores 5 minutos 30 segundos 10x mais r\u00e1pido \ud83c\udfe5 Health check de 20 servi\u00e7os 1 minuto 5 segundos 12x mais r\u00e1pido \ud83d\udcca Processar 1000 registros 10 segundos 1 segundo 10x mais r\u00e1pido"},{"location":"modules/goroutine/#importacao","title":"\ud83d\udce6 Importa\u00e7\u00e3o","text":"<pre><code>local goroutine = require(\"goroutine\")\n</code></pre>"},{"location":"modules/goroutine/#funcoes-disponiveis","title":"Fun\u00e7\u00f5es Dispon\u00edveis","text":""},{"location":"modules/goroutine/#1-goroutinespawnfunction","title":"1. <code>goroutine.spawn(function)</code>","text":"<p>Executa uma fun\u00e7\u00e3o em uma nova goroutine.</p> <p>Par\u00e2metros: - <code>function</code>: Fun\u00e7\u00e3o Lua a ser executada em paralelo</p> <p>Retorno: Nenhum</p> <p>Exemplo: <pre><code>goroutine.spawn(function()\n    log.info(\"Executando em paralelo!\")\nend)\n</code></pre></p>"},{"location":"modules/goroutine/#2-goroutinespawn_manycount-function","title":"2. <code>goroutine.spawn_many(count, function)</code>","text":"<p>Executa m\u00faltiplas inst\u00e2ncias de uma fun\u00e7\u00e3o em goroutines separadas.</p> <p>Par\u00e2metros: - <code>count</code> (number): N\u00famero de goroutines a criar - <code>function</code>: Fun\u00e7\u00e3o que recebe o ID da goroutine como par\u00e2metro</p> <p>Retorno: Nenhum</p> <p>Exemplo: <pre><code>goroutine.spawn_many(5, function(id)\n    log.info(\"Goroutine #\" .. tostring(id))\nend)\n</code></pre></p>"},{"location":"modules/goroutine/#3-goroutinewait_group","title":"3. <code>goroutine.wait_group()</code>","text":"<p>Cria um WaitGroup para sincroniza\u00e7\u00e3o de goroutines.</p> <p>Retorno: Objeto WaitGroup com os m\u00e9todos: - <code>add(delta)</code>: Incrementa o contador - <code>done()</code>: Decrementa o contador - <code>wait()</code>: Aguarda at\u00e9 o contador chegar a zero</p> <p>Exemplo: <pre><code>local wg = goroutine.wait_group()\n\nwg:add(3)\n\nfor i = 1, 3 do\n    goroutine.spawn(function()\n        -- Fazer trabalho\n        log.info(\"Worker \" .. i)\n        wg:done()\n    end)\nend\n\nwg:wait()  -- Aguarda todas as goroutines\n</code></pre></p>"},{"location":"modules/goroutine/#4-goroutinepool_createname-options","title":"4. <code>goroutine.pool_create(name, options)</code>","text":"<p>Cria um worker pool para gerenciar execu\u00e7\u00e3o paralela de tarefas.</p> <p>Par\u00e2metros: - <code>name</code> (string): Nome \u00fanico do pool - <code>options</code> (table): Configura\u00e7\u00f5es do pool   - <code>workers</code> (number): N\u00famero de workers (padr\u00e3o: 4)</p> <p>Retorno: <code>true</code> em sucesso</p> <p>Exemplo: <pre><code>goroutine.pool_create(\"mypool\", { workers = 10 })\n</code></pre></p>"},{"location":"modules/goroutine/#5-goroutinepool_submitname-function","title":"5. <code>goroutine.pool_submit(name, function, ...)</code>","text":"<p>Submete uma tarefa para execu\u00e7\u00e3o em um worker pool.</p> <p>Par\u00e2metros: - <code>name</code> (string): Nome do pool - <code>function</code>: Fun\u00e7\u00e3o a ser executada - <code>...</code>: Argumentos opcionais para a fun\u00e7\u00e3o</p> <p>Retorno:  - <code>task_id</code> (string): ID da tarefa submetida - <code>error</code> (string): Mensagem de erro se falhar</p> <p>Exemplo: <pre><code>local task_id = goroutine.pool_submit(\"mypool\", function()\n    return \"Resultado\"\nend)\n\nif task_id then\n    log.info(\"Tarefa submetida: \" .. task_id)\nend\n</code></pre></p>"},{"location":"modules/goroutine/#6-goroutinepool_waitname","title":"6. <code>goroutine.pool_wait(name)</code>","text":"<p>Aguarda at\u00e9 que todas as tarefas do pool sejam conclu\u00eddas.</p> <p>Par\u00e2metros: - <code>name</code> (string): Nome do pool</p> <p>Retorno: <code>true</code> em sucesso</p> <p>Exemplo: <pre><code>goroutine.pool_wait(\"mypool\")\n</code></pre></p>"},{"location":"modules/goroutine/#7-goroutinepool_closename","title":"7. <code>goroutine.pool_close(name)</code>","text":"<p>Fecha um worker pool e libera recursos.</p> <p>Par\u00e2metros: - <code>name</code> (string): Nome do pool</p> <p>Retorno: <code>true</code> em sucesso</p> <p>Exemplo: <pre><code>goroutine.pool_close(\"mypool\")\n</code></pre></p>"},{"location":"modules/goroutine/#8-goroutinepool_statsname","title":"8. <code>goroutine.pool_stats(name)</code>","text":"<p>Retorna estat\u00edsticas de um worker pool.</p> <p>Par\u00e2metros: - <code>name</code> (string): Nome do pool</p> <p>Retorno: Table com estat\u00edsticas: - <code>name</code> (string): Nome do pool - <code>workers</code> (number): N\u00famero de workers - <code>active</code> (number): Tarefas em execu\u00e7\u00e3o - <code>completed</code> (number): Tarefas conclu\u00eddas - <code>failed</code> (number): Tarefas que falharam - <code>queued</code> (number): Tarefas na fila</p> <p>Exemplo: <pre><code>local stats = goroutine.pool_stats(\"mypool\")\nlog.info(\"Conclu\u00eddas: \" .. stats.completed)\nlog.info(\"Ativas: \" .. stats.active)\n</code></pre></p>"},{"location":"modules/goroutine/#9-goroutineasyncfunction","title":"9. <code>goroutine.async(function)</code>","text":"<p>Executa uma fun\u00e7\u00e3o de forma ass\u00edncrona e retorna um handle.</p> <p>Par\u00e2metros: - <code>function</code>: Fun\u00e7\u00e3o a ser executada</p> <p>Retorno: Handle para await</p> <p>Exemplo: <pre><code>local handle = goroutine.async(function()\n    -- Opera\u00e7\u00e3o demorada\n    return \"resultado\"\nend)\n</code></pre></p>"},{"location":"modules/goroutine/#10-goroutineawaithandle","title":"10. <code>goroutine.await(handle)</code>","text":"<p>Aguarda a conclus\u00e3o de uma opera\u00e7\u00e3o async.</p> <p>Par\u00e2metros: - <code>handle</code>: Handle retornado por <code>async()</code></p> <p>Retorno: - <code>success</code> (boolean): Se a opera\u00e7\u00e3o foi bem-sucedida - <code>...</code>: Valores retornados pela fun\u00e7\u00e3o async</p> <p>Exemplo: <pre><code>local handle = goroutine.async(function()\n    return \"valor1\", \"valor2\"\nend)\n\nlocal success, val1, val2 = goroutine.await(handle)\nif success then\n    log.info(\"Resultados: \" .. val1 .. \", \" .. val2)\nend\n</code></pre></p>"},{"location":"modules/goroutine/#11-goroutineawait_allhandles","title":"11. <code>goroutine.await_all(handles)</code>","text":"<p>Aguarda a conclus\u00e3o de m\u00faltiplas opera\u00e7\u00f5es async.</p> <p>Par\u00e2metros: - <code>handles</code> (table): Array de handles</p> <p>Retorno: Table com resultados: <pre><code>{\n    { success = true, values = {...} },\n    { success = false, error = \"...\" },\n    ...\n}\n</code></pre></p> <p>Exemplo: <pre><code>local handles = {}\nfor i = 1, 5 do\n    handles[i] = goroutine.async(function()\n        return \"Resultado \" .. i\n    end)\nend\n\nlocal results = goroutine.await_all(handles)\nfor i, result in ipairs(results) do\n    if result.success then\n        log.info(\"Task \" .. i .. \": \" .. result.values[1])\n    end\nend\n</code></pre></p>"},{"location":"modules/goroutine/#12-goroutinesleepmilliseconds","title":"12. <code>goroutine.sleep(milliseconds)</code>","text":"<p>Pausa a execu\u00e7\u00e3o por um per\u00edodo especificado.</p> <p>Par\u00e2metros: - <code>milliseconds</code> (number): Tempo em milissegundos</p> <p>Retorno: Nenhum</p> <p>Exemplo: <pre><code>goroutine.sleep(1000)  -- Dorme por 1 segundo\n</code></pre></p>"},{"location":"modules/goroutine/#13-goroutinetimeoutmilliseconds-function","title":"13. <code>goroutine.timeout(milliseconds, function)</code>","text":"<p>Executa uma fun\u00e7\u00e3o com um timeout.</p> <p>Par\u00e2metros: - <code>milliseconds</code> (number): Tempo m\u00e1ximo em milissegundos - <code>function</code>: Fun\u00e7\u00e3o a ser executada</p> <p>Retorno: - <code>success</code> (boolean): <code>false</code> se timeout - <code>...</code>: Valores retornados ou mensagem de erro</p> <p>Exemplo: <pre><code>local success, result = goroutine.timeout(5000, function()\n    -- Opera\u00e7\u00e3o que pode demorar\n    return \"resultado\"\nend)\n\nif success then\n    log.info(\"Conclu\u00eddo: \" .. result)\nelse\n    log.error(\"Timeout: \" .. result)\nend\n</code></pre></p>"},{"location":"modules/goroutine/#exemplos-praticos","title":"Exemplos Pr\u00e1ticos","text":""},{"location":"modules/goroutine/#exemplo-1-worker-pool-para-processamento-paralelo","title":"Exemplo 1: Worker Pool para Processamento Paralelo","text":"<pre><code>local process_files_task = task(\"process_files\")\n    :description(\"Processa arquivos em paralelo\")\n    :command(function(this, params)\n        local goroutine = require(\"goroutine\")\n\n        -- Criar pool com 5 workers\n        goroutine.pool_create(\"fileprocessor\", { workers = 5 })\n\n        local files = {\"file1.txt\", \"file2.txt\", \"file3.txt\", \"file4.txt\", \"file5.txt\"}\n\n        -- Submeter tarefas\n        for _, file in ipairs(files) do\n            goroutine.pool_submit(\"fileprocessor\", function()\n                log.info(\"Processando: \" .. file)\n                goroutine.sleep(1000)  -- Simula processamento\n                return \"Processado: \" .. file\n            end)\n        end\n\n        -- Aguardar conclus\u00e3o\n        goroutine.pool_wait(\"fileprocessor\")\n\n        -- Ver estat\u00edsticas\n        local stats = goroutine.pool_stats(\"fileprocessor\")\n        log.info(\"Total processado: \" .. stats.completed)\n\n        -- Limpar\n        goroutine.pool_close(\"fileprocessor\")\n\n        return true\n    end)\n    :delegate_to(\"mariguica\")\n    :build()\n</code></pre>"},{"location":"modules/goroutine/#exemplo-2-operacoes-assincronas-com-asyncawait","title":"Exemplo 2: Opera\u00e7\u00f5es Ass\u00edncronas com Async/Await","text":"<pre><code>local fetch_data_task = task(\"fetch_data\")\n    :description(\"Busca dados de m\u00faltiplas fontes em paralelo\")\n    :command(function(this, params)\n        local goroutine = require(\"goroutine\")\n        local http = require(\"http\")\n\n        -- Iniciar buscas ass\u00edncronas\n        local h1 = goroutine.async(function()\n            return http.get(\"https://api1.example.com/data\")\n        end)\n\n        local h2 = goroutine.async(function()\n            return http.get(\"https://api2.example.com/data\")\n        end)\n\n        local h3 = goroutine.async(function()\n            return http.get(\"https://api3.example.com/data\")\n        end)\n\n        -- Aguardar todos os resultados\n        local results = goroutine.await_all({h1, h2, h3})\n\n        -- Processar resultados\n        local all_success = true\n        for i, result in ipairs(results) do\n            if not result.success then\n                log.error(\"API \" .. i .. \" falhou: \" .. result.error)\n                all_success = false\n            end\n        end\n\n        return all_success\n    end)\n    :delegate_to(\"mariguica\")\n    :timeout(\"30s\")\n    :build()\n</code></pre>"},{"location":"modules/goroutine/#exemplo-3-sincronizacao-com-waitgroup","title":"Exemplo 3: Sincroniza\u00e7\u00e3o com WaitGroup","text":"<pre><code>local parallel_tasks = task(\"parallel_tasks\")\n    :description(\"Executa m\u00faltiplas tarefas com sincroniza\u00e7\u00e3o\")\n    :command(function(this, params)\n        local goroutine = require(\"goroutine\")\n\n        local wg = goroutine.wait_group()\n        local results = {}\n\n        -- Adicionar 3 tarefas\n        wg:add(3)\n\n        -- Task 1: Download\n        goroutine.spawn(function()\n            log.info(\"Baixando arquivo...\")\n            goroutine.sleep(2000)\n            results.download = \"OK\"\n            wg:done()\n        end)\n\n        -- Task 2: Processar\n        goroutine.spawn(function()\n            log.info(\"Processando dados...\")\n            goroutine.sleep(1500)\n            results.process = \"OK\"\n            wg:done()\n        end)\n\n        -- Task 3: Upload\n        goroutine.spawn(function()\n            log.info(\"Fazendo upload...\")\n            goroutine.sleep(1000)\n            results.upload = \"OK\"\n            wg:done()\n        end)\n\n        -- Aguardar todas\n        log.info(\"Aguardando conclus\u00e3o...\")\n        wg:wait()\n\n        log.info(\"Todas as tarefas conclu\u00eddas!\")\n        log.info(\"Download: \" .. results.download)\n        log.info(\"Process: \" .. results.process)\n        log.info(\"Upload: \" .. results.upload)\n\n        return true\n    end)\n    :delegate_to(\"mariguica\")\n    :build()\n</code></pre>"},{"location":"modules/goroutine/#exemplo-4-timeout-para-operacoes-criticas","title":"Exemplo 4: Timeout para Opera\u00e7\u00f5es Cr\u00edticas","text":"<pre><code>local critical_operation = task(\"critical_operation\")\n    :description(\"Opera\u00e7\u00e3o com timeout de seguran\u00e7a\")\n    :command(function(this, params)\n        local goroutine = require(\"goroutine\")\n\n        local success, result = goroutine.timeout(5000, function()\n            -- Opera\u00e7\u00e3o que pode travar\n            log.info(\"Executando opera\u00e7\u00e3o cr\u00edtica...\")\n            goroutine.sleep(3000)  -- Simula\u00e7\u00e3o\n            return \"Opera\u00e7\u00e3o conclu\u00edda\"\n        end)\n\n        if success then\n            log.info(\"\u2705 \" .. result)\n            return true\n        else\n            log.error(\"\u274c Timeout: \" .. result)\n            return false\n        end\n    end)\n    :delegate_to(\"mariguica\")\n    :build()\n</code></pre>"},{"location":"modules/goroutine/#melhores-praticas","title":"Melhores Pr\u00e1ticas","text":""},{"location":"modules/goroutine/#1-sempre-fechar-pools","title":"1. Sempre Fechar Pools","text":"<pre><code>-- \u2705 BOM\ngoroutine.pool_create(\"mypool\", { workers = 5 })\n-- ... usar pool\ngoroutine.pool_wait(\"mypool\")\ngoroutine.pool_close(\"mypool\")\n\n-- \u274c RUIM - vazamento de recursos\ngoroutine.pool_create(\"mypool\", { workers = 5 })\n-- ... esqueceu de fechar\n</code></pre>"},{"location":"modules/goroutine/#2-usar-waitgroups-para-sincronizacao","title":"2. Usar WaitGroups para Sincroniza\u00e7\u00e3o","text":"<pre><code>-- \u2705 BOM\nlocal wg = goroutine.wait_group()\nwg:add(3)\n\nfor i = 1, 3 do\n    goroutine.spawn(function()\n        -- trabalho\n        wg:done()\n    end)\nend\n\nwg:wait()\n\n-- \u274c RUIM - n\u00e3o garante ordem\nfor i = 1, 3 do\n    goroutine.spawn(function()\n        -- trabalho sem sincroniza\u00e7\u00e3o\n    end)\nend\n</code></pre>"},{"location":"modules/goroutine/#3-tratar-erros-em-operacoes-async","title":"3. Tratar Erros em Opera\u00e7\u00f5es Async","text":"<pre><code>-- \u2705 BOM\nlocal success, result = goroutine.await(handle)\nif success then\n    log.info(\"OK: \" .. result)\nelse\n    log.error(\"Erro: \" .. result)\n    -- Tratamento de erro\nend\n\n-- \u274c RUIM - assume sucesso\nlocal _, result = goroutine.await(handle)\nlog.info(result)  -- pode ser erro!\n</code></pre>"},{"location":"modules/goroutine/#4-dimensionar-pools-adequadamente","title":"4. Dimensionar Pools Adequadamente","text":"<pre><code>-- \u2705 BOM - baseado em cores dispon\u00edveis\nlocal cpus = 4  -- ou detectar dinamicamente\ngoroutine.pool_create(\"cpu-bound\", { workers = cpus })\n\n-- \u2705 BOM - I/O bound pode ter mais workers\ngoroutine.pool_create(\"io-bound\", { workers = cpus * 2 })\n\n-- \u274c RUIM - muito poucos workers\ngoroutine.pool_create(\"mypool\", { workers = 1 })\n\n-- \u274c RUIM - workers demais\ngoroutine.pool_create(\"mypool\", { workers = 1000 })\n</code></pre>"},{"location":"modules/goroutine/#5-usar-timeouts-para-operacoes-externas","title":"5. Usar Timeouts para Opera\u00e7\u00f5es Externas","text":"<pre><code>-- \u2705 BOM\nlocal success, data = goroutine.timeout(10000, function()\n    return fetch_external_api()\nend)\n\n-- \u274c RUIM - pode travar indefinidamente\nfetch_external_api()\n</code></pre>"},{"location":"modules/goroutine/#performance-e-limitacoes","title":"Performance e Limita\u00e7\u00f5es","text":""},{"location":"modules/goroutine/#capacidades","title":"Capacidades","text":"<ul> <li>\u2705 Execu\u00e7\u00e3o verdadeiramente paralela usando goroutines do Go</li> <li>\u2705 Overhead muito baixo para criar goroutines</li> <li>\u2705 Suporta milhares de goroutines simult\u00e2neas</li> <li>\u2705 Worker pools com gerenciamento eficiente de recursos</li> <li>\u2705 Sincroniza\u00e7\u00e3o segura com WaitGroups</li> </ul>"},{"location":"modules/goroutine/#limitacoes","title":"Limita\u00e7\u00f5es","text":"<ul> <li>\u26a0\ufe0f Cada goroutine spawned cria um novo estado Lua (overhead de mem\u00f3ria)</li> <li>\u26a0\ufe0f Vari\u00e1veis n\u00e3o s\u00e3o compartilhadas entre goroutines (use valores de retorno)</li> <li>\u26a0\ufe0f Worker pools t\u00eam buffer limitado de tarefas (padr\u00e3o: 2x workers)</li> <li>\u26a0\ufe0f Async handles n\u00e3o podem ser reutilizados ap\u00f3s await</li> </ul>"},{"location":"modules/goroutine/#troubleshooting","title":"Troubleshooting","text":""},{"location":"modules/goroutine/#pool-queue-cheio","title":"Pool Queue Cheio","text":"<pre><code>local task_id, err = goroutine.pool_submit(\"mypool\", fn)\nif not task_id then\n    log.warn(\"Pool cheio: \" .. err)\n    -- Aguardar ou aumentar workers\nend\n</code></pre>"},{"location":"modules/goroutine/#detectar-goroutines-travadas","title":"Detectar Goroutines Travadas","text":"<pre><code>-- Usar timeout para detectar travamentos\nlocal success, result = goroutine.timeout(5000, function()\n    -- opera\u00e7\u00e3o suspeita\nend)\n\nif not success then\n    log.error(\"Poss\u00edvel deadlock detectado!\")\nend\n</code></pre>"},{"location":"modules/goroutine/#monitorar-pool","title":"Monitorar Pool","text":"<pre><code>-- Verificar periodicamente\nlocal stats = goroutine.pool_stats(\"mypool\")\nif stats.failed &gt; 0 then\n    log.warn(\"Tarefas falharam: \" .. stats.failed)\nend\n\nif stats.active == 0 and stats.queued == 0 then\n    log.info(\"Pool est\u00e1 ocioso\")\nend\n</code></pre>"},{"location":"modules/goroutine/#compatibilidade","title":"Compatibilidade","text":"<ul> <li>\u2705 Funciona com <code>:delegate_to()</code> para execu\u00e7\u00e3o remota</li> <li>\u2705 Compat\u00edvel com todos os outros m\u00f3dulos</li> <li>\u2705 Suporta nested goroutines</li> <li>\u2705 Thread-safe em todas as opera\u00e7\u00f5es</li> <li>\u2705 Funciona em Linux, macOS e Windows</li> </ul>"},{"location":"modules/goroutine/#exemplos-completos-e-prontos-para-usar","title":"\ud83c\udfaf Exemplos Completos e Prontos para Usar","text":""},{"location":"modules/goroutine/#exemplo-real-deploy-paralelo-em-multiplos-servidores","title":"\ud83d\ude80 Exemplo Real: Deploy Paralelo em M\u00faltiplos Servidores","text":"<p>Este exemplo mostra como deployar uma aplica\u00e7\u00e3o em 6 servidores simultaneamente, reduzindo o tempo de 5 minutos para 30 segundos!</p> <pre><code>-- examples/parallel_deployment.sloth\nlocal deploy_to_servers = task(\"deploy_multi_server\")\n    :description(\"Deploy application to multiple servers in parallel\")\n    :command(function(this, params)\n        local goroutine = require(\"goroutine\")\n\n        local servers = {\n            {name = \"web-01\", host = \"192.168.1.10\"},\n            {name = \"web-02\", host = \"192.168.1.11\"},\n            {name = \"web-03\", host = \"192.168.1.12\"},\n            {name = \"api-01\", host = \"192.168.1.20\"},\n            {name = \"api-02\", host = \"192.168.1.21\"},\n            {name = \"db-01\", host = \"192.168.1.30\"},\n        }\n\n        log.info(\"\ud83d\ude80 Starting parallel deployment to \" .. #servers .. \" servers...\")\n\n        -- Create async handles for parallel deployment\n        local handles = {}\n        for _, server in ipairs(servers) do\n            local handle = goroutine.async(function()\n                log.info(\"\ud83d\udce6 Deploying to \" .. server.name .. \" (\" .. server.host .. \")\")\n\n                -- Simulate deployment steps\n                local steps = {\n                    \"Uploading application files...\",\n                    \"Installing dependencies...\",\n                    \"Restarting services...\",\n                    \"Running health checks...\"\n                }\n\n                for _, step in ipairs(steps) do\n                    log.info(\"  \u2192 \" .. server.name .. \": \" .. step)\n                    goroutine.sleep(500)  -- Sleep 500ms to simulate work\n                end\n\n                return server.name, server.host, \"success\", os.date(\"%Y-%m-%d %H:%M:%S\")\n            end)\n\n            table.insert(handles, handle)\n        end\n\n        log.info(\"\u23f3 Waiting for all deployments to complete...\")\n\n        -- Wait for all async operations to complete\n        local results = goroutine.await_all(handles)\n\n        -- Process results\n        local success_count = 0\n        local failed_count = 0\n\n        log.info(\"\\n\ud83d\udcca Deployment Results:\")\n        log.info(\"\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\")\n\n        for i, result in ipairs(results) do\n            if result.success then\n                success_count = success_count + 1\n                local server_name = result.values[1]\n                local deployed_at = result.values[4]\n                log.info(\"\u2705 \" .. server_name .. \" \u2192 Deployed successfully at \" .. deployed_at)\n            else\n                failed_count = failed_count + 1\n                log.error(\"\u274c \" .. (result.error or \"Unknown deployment failure\"))\n            end\n        end\n\n        log.info(\"\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\")\n        log.info(\"\ud83d\udcc8 Summary: \" .. success_count .. \" successful, \" .. failed_count .. \" failed\")\n\n        return success_count == #servers, \"Deployment completed\", {\n            total = #servers,\n            success = success_count,\n            failed = failed_count\n        }\n    end)\n    :timeout(\"2m\")\n    :build()\n\nworkflow.define(\"parallel_deployment\")\n    :description(\"Deploy to multiple servers in parallel\")\n    :version(\"1.0.0\")\n    :tasks({ deploy_to_servers })\n    :config({ timeout = \"5m\" })\n</code></pre> <p>Como executar: <pre><code>sloth-runner run -f examples/parallel_deployment.sloth\n</code></pre></p>"},{"location":"modules/goroutine/#exemplo-real-health-check-paralelo","title":"\ud83c\udfe5 Exemplo Real: Health Check Paralelo","text":"<p>Verifique a sa\u00fade de m\u00faltiplos servi\u00e7os simultaneamente:</p> <pre><code>-- examples/parallel_health_check.sloth\nlocal parallel_health_check = task(\"check_services_health\")\n    :description(\"Check health of multiple services in parallel\")\n    :command(function(this, params)\n        local goroutine = require(\"goroutine\")\n        local http = require(\"http\")\n\n        local services = {\n            {name = \"API Gateway\", url = \"http://localhost:8080/health\"},\n            {name = \"Auth Service\", url = \"http://localhost:8081/health\"},\n            {name = \"Database Service\", url = \"http://localhost:8082/health\"},\n            {name = \"Cache Service\", url = \"http://localhost:8083/health\"},\n            {name = \"Queue Service\", url = \"http://localhost:8084/health\"},\n        }\n\n        log.info(\"\ud83c\udfe5 Starting parallel health checks for \" .. #services .. \" services...\")\n\n        local handles = {}\n        for _, service in ipairs(services) do\n            local handle = goroutine.async(function()\n                local start_time = os.clock()\n                local success, response = pcall(function()\n                    return http.get(service.url, {\n                        timeout = 5,\n                        headers = { [\"User-Agent\"] = \"Sloth-Runner-HealthCheck/1.0\" }\n                    })\n                end)\n\n                local elapsed = (os.clock() - start_time) * 1000\n\n                if success and response and response.status_code == 200 then\n                    return service.name, \"healthy\", elapsed, response.body or \"\"\n                else\n                    local error_msg = response and response.error or \"Connection failed\"\n                    return service.name, \"unhealthy\", elapsed, error_msg\n                end\n            end)\n\n            table.insert(handles, handle)\n        end\n\n        log.info(\"\u23f3 Waiting for all health checks to complete...\")\n\n        local results = goroutine.await_all(handles)\n\n        local healthy_count = 0\n        local unhealthy_count = 0\n\n        log.info(\"\\n\ud83c\udfe5 Health Check Results:\")\n        log.info(\"\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\")\n\n        for _, result in ipairs(results) do\n            if result.success then\n                local name = result.values[1]\n                local status = result.values[2]\n                local time_ms = string.format(\"%.2f\", result.values[3])\n\n                if status == \"healthy\" then\n                    healthy_count = healthy_count + 1\n                    log.info(\"\u2705 \" .. name .. \": \" .. status .. \" (\" .. time_ms .. \"ms)\")\n                else\n                    unhealthy_count = unhealthy_count + 1\n                    local error = result.values[4]\n                    log.error(\"\u274c \" .. name .. \": \" .. status .. \" - \" .. error)\n                end\n            else\n                unhealthy_count = unhealthy_count + 1\n                log.error(\"\u274c Error: \" .. (result.error or \"Unknown error\"))\n            end\n        end\n\n        log.info(\"\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\")\n        log.info(\"\ud83d\udcca Summary: \" .. healthy_count .. \" healthy, \" .. unhealthy_count .. \" unhealthy\")\n\n        return unhealthy_count == 0, \"Health check completed\", {\n            total = #services,\n            healthy = healthy_count,\n            unhealthy = unhealthy_count\n        }\n    end)\n    :timeout(\"30s\")\n    :build()\n\nworkflow.define(\"health_check_workflow\")\n    :description(\"Parallel health check for multiple services\")\n    :version(\"1.0.0\")\n    :tasks({ parallel_health_check })\n</code></pre>"},{"location":"modules/goroutine/#exemplo-real-worker-pool-para-processar-grande-volume","title":"\ud83c\udfed Exemplo Real: Worker Pool para Processar Grande Volume","text":"<p>Processe milhares de itens com controle de concorr\u00eancia:</p> <pre><code>-- examples/worker_pool_example.sloth\nlocal process_with_pool = task(\"worker_pool_processing\")\n    :description(\"Process tasks using a worker pool\")\n    :command(function(this, params)\n        local goroutine = require(\"goroutine\")\n\n        log.info(\"\ud83c\udfed Creating worker pool with 5 workers...\")\n        goroutine.pool_create(\"data_processing\", { workers = 5 })\n\n        local tasks = {}\n        for i = 1, 50 do\n            tasks[i] = {\n                id = i,\n                data = \"Task #\" .. i,\n                priority = math.random(1, 3)\n            }\n        end\n\n        log.info(\"\ud83d\udccb Submitting \" .. #tasks .. \" tasks to worker pool...\")\n\n        for _, task_data in ipairs(tasks) do\n            goroutine.pool_submit(\"data_processing\", function()\n                log.info(\"\u2699\ufe0f Processing \" .. task_data.data)\n                goroutine.sleep(100 * task_data.priority)\n                return {\n                    id = task_data.id,\n                    status = \"completed\",\n                    processed_at = os.date(\"%H:%M:%S\")\n                }\n            end)\n        end\n\n        log.info(\"\u23f3 Waiting for all tasks to complete...\")\n        goroutine.pool_wait(\"data_processing\")\n\n        local stats = goroutine.pool_stats(\"data_processing\")\n\n        log.info(\"\\n\ud83d\udcca Worker Pool Statistics:\")\n        log.info(\"\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\")\n        log.info(\"\ud83d\udc77 Workers: \" .. stats.workers)\n        log.info(\"\u2705 Completed: \" .. stats.completed)\n        log.info(\"\u274c Failed: \" .. stats.failed)\n        log.info(\"\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\")\n\n        goroutine.pool_close(\"data_processing\")\n\n        return true, \"All tasks processed successfully\", {\n            total_tasks = #tasks,\n            completed = stats.completed,\n            failed = stats.failed\n        }\n    end)\n    :timeout(\"5m\")\n    :build()\n\nworkflow.define(\"worker_pool_workflow\")\n    :description(\"Process multiple tasks with a worker pool\")\n    :version(\"1.0.0\")\n    :tasks({ process_with_pool })\n</code></pre>"},{"location":"modules/goroutine/#mais-recursos","title":"\ud83d\udcda Mais Recursos","text":"<ul> <li>\ud83d\udcd6 Documenta\u00e7\u00e3o Completa</li> <li>\ud83e\uddea Mais Exemplos</li> <li>\ud83c\udfaf Benchmarks de Performance</li> <li>\ud83d\udcac Discuss\u00f5es e Suporte</li> </ul>"},{"location":"modules/incus/","title":"Incus Module","text":"<p>O m\u00f3dulo Incus fornece integra\u00e7\u00e3o completa com o Incus, permitindo gerenciar containers e m\u00e1quinas virtuais de forma program\u00e1tica.</p>"},{"location":"modules/incus/#indice","title":"\u00cdndice","text":"<ul> <li>Instala\u00e7\u00e3o</li> <li>Conceitos B\u00e1sicos</li> <li>API Reference</li> <li>Inst\u00e2ncias</li> <li>Imagens</li> <li>Redes</li> <li>Perfis</li> <li>Storage</li> <li>Snapshots</li> <li>Exemplos Pr\u00e1ticos</li> <li>Integra\u00e7\u00e3o com delegate_to</li> </ul>"},{"location":"modules/incus/#instalacao","title":"Instala\u00e7\u00e3o","text":"<p>O m\u00f3dulo Incus est\u00e1 dispon\u00edvel globalmente em todos os scripts do Sloth Runner:</p> <pre><code>-- N\u00e3o \u00e9 necess\u00e1rio require, o m\u00f3dulo est\u00e1 global\nincus.instance({\n    name = \"mycontainer\",\n    image = \"ubuntu:22.04\"\n}):create():start()\n</code></pre>"},{"location":"modules/incus/#conceitos-basicos","title":"Conceitos B\u00e1sicos","text":"<p>O m\u00f3dulo Incus utiliza uma API fluente que permite encadear opera\u00e7\u00f5es de forma intuitiva e leg\u00edvel.</p>"},{"location":"modules/incus/#fluent-api","title":"Fluent API","text":"<pre><code>-- Criar, iniciar e aguardar uma inst\u00e2ncia\nincus.instance({\n    name = \"web-server\",\n    image = \"ubuntu:22.04\"\n}):create()\n  :start()\n  :wait_running()\n\n-- Configurar rede\nincus.network({\n    name = \"br-dmz\",\n    type = \"bridge\"\n}):set_config({\n    [\"ipv4.address\"] = \"10.0.0.1/24\",\n    [\"ipv4.nat\"] = \"true\"\n}):create()\n</code></pre>"},{"location":"modules/incus/#execucao-remota","title":"Execu\u00e7\u00e3o Remota","text":"<p>Todas as opera\u00e7\u00f5es suportam execu\u00e7\u00e3o em agentes remotos via <code>:delegate_to()</code>:</p> <pre><code>-- Criar container em host remoto\nincus.instance({\n    name = \"db-server\",\n    image = \"ubuntu:22.04\"\n}):delegate_to(\"db-host-01\")\n  :create()\n  :start()\n</code></pre>"},{"location":"modules/incus/#api-reference","title":"API Reference","text":""},{"location":"modules/incus/#instancias","title":"Inst\u00e2ncias","text":"<p>Gerenciamento completo de containers e VMs.</p>"},{"location":"modules/incus/#incusinstanceoptions","title":"incus.instance(options)","text":"<p>Cria um builder de inst\u00e2ncia.</p> <p>Par\u00e2metros:</p> Par\u00e2metro Tipo Obrigat\u00f3rio Descri\u00e7\u00e3o <code>name</code> string \u2705 Nome da inst\u00e2ncia <code>image</code> string \u274c Imagem a ser utilizada <code>type</code> string \u274c Tipo: <code>container</code> ou <code>virtual-machine</code> <code>profiles</code> table \u274c Lista de perfis <code>config</code> table \u274c Configura\u00e7\u00f5es da inst\u00e2ncia <code>devices</code> table \u274c Dispositivos da inst\u00e2ncia <p>Retorna: <code>IncusInstance</code></p> <p>M\u00e9todos da Inst\u00e2ncia:</p>"},{"location":"modules/incus/#create","title":":create()","text":"<p>Cria a inst\u00e2ncia.</p> <pre><code>incus.instance({\n    name = \"web01\",\n    image = \"ubuntu:22.04\"\n}):create()\n</code></pre>"},{"location":"modules/incus/#start","title":":start()","text":"<p>Inicia a inst\u00e2ncia.</p> <pre><code>instance:start()\n</code></pre>"},{"location":"modules/incus/#stopforce","title":":stop([force])","text":"<p>Para a inst\u00e2ncia.</p> <pre><code>instance:stop()          -- Para gracefully\ninstance:stop(true)      -- For\u00e7a a parada\n</code></pre>"},{"location":"modules/incus/#restart","title":":restart()","text":"<p>Reinicia a inst\u00e2ncia.</p> <pre><code>instance:restart()\n</code></pre>"},{"location":"modules/incus/#delete","title":":delete()","text":"<p>Deleta a inst\u00e2ncia.</p> <pre><code>instance:delete()\n</code></pre>"},{"location":"modules/incus/#wait_runningtimeout","title":":wait_running([timeout])","text":"<p>Aguarda a inst\u00e2ncia estar em execu\u00e7\u00e3o.</p> <pre><code>instance:wait_running()       -- Timeout padr\u00e3o\ninstance:wait_running(120)    -- 120 segundos\n</code></pre>"},{"location":"modules/incus/#execcommand-options","title":":exec(command, [options])","text":"<p>Executa comando na inst\u00e2ncia.</p> <pre><code>instance:exec(\"apt update &amp;&amp; apt upgrade -y\")\n\n-- Com op\u00e7\u00f5es\ninstance:exec(\"bash -c 'echo hello'\", {\n    user = \"ubuntu\",\n    cwd = \"/tmp\",\n    env = {\n        [\"PATH\"] = \"/usr/local/bin:/usr/bin:/bin\"\n    }\n})\n</code></pre>"},{"location":"modules/incus/#file_pushlocal_path-remote_path","title":":file_push(local_path, remote_path)","text":"<p>Envia arquivo para a inst\u00e2ncia.</p> <pre><code>instance:file_push(\"/local/config.yaml\", \"/etc/app/config.yaml\")\n</code></pre>"},{"location":"modules/incus/#file_pullremote_path-local_path","title":":file_pull(remote_path, local_path)","text":"<p>Baixa arquivo da inst\u00e2ncia.</p> <pre><code>instance:file_pull(\"/var/log/app.log\", \"./logs/app.log\")\n</code></pre>"},{"location":"modules/incus/#set_configconfig","title":":set_config(config)","text":"<p>Define configura\u00e7\u00f5es da inst\u00e2ncia.</p> <pre><code>instance:set_config({\n    [\"limits.cpu\"] = \"2\",\n    [\"limits.memory\"] = \"2GB\"\n})\n</code></pre>"},{"location":"modules/incus/#add_devicename-device_config","title":":add_device(name, device_config)","text":"<p>Adiciona dispositivo \u00e0 inst\u00e2ncia.</p> <pre><code>instance:add_device(\"eth0\", {\n    type = \"nic\",\n    nictype = \"bridged\",\n    parent = \"br0\"\n})\n</code></pre>"},{"location":"modules/incus/#remove_devicename","title":":remove_device(name)","text":"<p>Remove dispositivo da inst\u00e2ncia.</p> <pre><code>instance:remove_device(\"eth0\")\n</code></pre>"},{"location":"modules/incus/#delegate_toagent","title":":delegate_to(agent)","text":"<p>Define em qual agente executar as opera\u00e7\u00f5es.</p> <pre><code>instance:delegate_to(\"prod-host-01\")\n</code></pre>"},{"location":"modules/incus/#imagens","title":"Imagens","text":"<p>Gerenciamento de imagens de containers/VMs.</p>"},{"location":"modules/incus/#incusimageoptions","title":"incus.image(options)","text":"<p>Cria um builder de imagem.</p> <p>Par\u00e2metros:</p> Par\u00e2metro Tipo Obrigat\u00f3rio Descri\u00e7\u00e3o <code>alias</code> string \u2705 Alias da imagem <code>source</code> string \u274c Fingerprint ou URL da imagem <code>server</code> string \u274c Servidor de imagens (padr\u00e3o: <code>images:</code>) <p>M\u00e9todos:</p>"},{"location":"modules/incus/#copy","title":":copy()","text":"<p>Copia a imagem.</p> <pre><code>incus.image({\n    alias = \"ubuntu-custom\",\n    source = \"ubuntu:22.04\"\n}):copy()\n</code></pre>"},{"location":"modules/incus/#delete_1","title":":delete()","text":"<p>Deleta a imagem.</p> <pre><code>incus.image({alias = \"old-image\"}):delete()\n</code></pre>"},{"location":"modules/incus/#exportpath","title":":export(path)","text":"<p>Exporta a imagem.</p> <pre><code>incus.image({alias = \"my-image\"}):export(\"/tmp/image.tar.gz\")\n</code></pre>"},{"location":"modules/incus/#redes","title":"Redes","text":"<p>Gerenciamento de redes virtuais.</p>"},{"location":"modules/incus/#incusnetworkoptions","title":"incus.network(options)","text":"<p>Cria um builder de rede.</p> <p>Par\u00e2metros:</p> Par\u00e2metro Tipo Obrigat\u00f3rio Descri\u00e7\u00e3o <code>name</code> string \u2705 Nome da rede <code>type</code> string \u274c Tipo de rede (bridge, macvlan, etc.) <code>config</code> table \u274c Configura\u00e7\u00f5es da rede <p>M\u00e9todos:</p>"},{"location":"modules/incus/#create_1","title":":create()","text":"<p>Cria a rede.</p> <pre><code>incus.network({\n    name = \"br-dmz\",\n    type = \"bridge\"\n}):create()\n</code></pre>"},{"location":"modules/incus/#delete_2","title":":delete()","text":"<p>Deleta a rede.</p> <pre><code>incus.network({name = \"br-dmz\"}):delete()\n</code></pre>"},{"location":"modules/incus/#attachinstance","title":":attach(instance)","text":"<p>Anexa a rede a uma inst\u00e2ncia.</p> <pre><code>incus.network({name = \"br-dmz\"}):attach(\"web01\")\n</code></pre>"},{"location":"modules/incus/#detachinstance","title":":detach(instance)","text":"<p>Desanexa a rede de uma inst\u00e2ncia.</p> <pre><code>incus.network({name = \"br-dmz\"}):detach(\"web01\")\n</code></pre>"},{"location":"modules/incus/#set_configconfig_1","title":":set_config(config)","text":"<p>Define configura\u00e7\u00f5es da rede.</p> <pre><code>incus.network({name = \"br-dmz\"}):set_config({\n    [\"ipv4.address\"] = \"10.0.0.1/24\",\n    [\"ipv4.nat\"] = \"true\",\n    [\"ipv6.address\"] = \"none\"\n})\n</code></pre>"},{"location":"modules/incus/#perfis","title":"Perfis","text":"<p>Gerenciamento de perfis de configura\u00e7\u00e3o.</p>"},{"location":"modules/incus/#incusprofileoptions","title":"incus.profile(options)","text":"<p>Cria um builder de perfil.</p> <p>Par\u00e2metros:</p> Par\u00e2metro Tipo Obrigat\u00f3rio Descri\u00e7\u00e3o <code>name</code> string \u2705 Nome do perfil <code>description</code> string \u274c Descri\u00e7\u00e3o do perfil <code>config</code> table \u274c Configura\u00e7\u00f5es do perfil <code>devices</code> table \u274c Dispositivos do perfil <p>M\u00e9todos:</p>"},{"location":"modules/incus/#create_2","title":":create()","text":"<p>Cria o perfil.</p> <pre><code>incus.profile({\n    name = \"high-performance\",\n    description = \"High performance profile\"\n}):create()\n</code></pre>"},{"location":"modules/incus/#delete_3","title":":delete()","text":"<p>Deleta o perfil.</p> <pre><code>incus.profile({name = \"old-profile\"}):delete()\n</code></pre>"},{"location":"modules/incus/#applyinstance","title":":apply(instance)","text":"<p>Aplica o perfil a uma inst\u00e2ncia.</p> <pre><code>incus.profile({name = \"high-performance\"}):apply(\"web01\")\n</code></pre>"},{"location":"modules/incus/#remove_frominstance","title":":remove_from(instance)","text":"<p>Remove o perfil de uma inst\u00e2ncia.</p> <pre><code>incus.profile({name = \"high-performance\"}):remove_from(\"web01\")\n</code></pre>"},{"location":"modules/incus/#set_configconfig_2","title":":set_config(config)","text":"<p>Define configura\u00e7\u00f5es do perfil.</p> <pre><code>incus.profile({name = \"high-performance\"}):set_config({\n    [\"limits.cpu\"] = \"4\",\n    [\"limits.memory\"] = \"8GB\"\n})\n</code></pre>"},{"location":"modules/incus/#storage","title":"Storage","text":"<p>Gerenciamento de storage pools.</p>"},{"location":"modules/incus/#incusstorageoptions","title":"incus.storage(options)","text":"<p>Cria um builder de storage.</p> <p>Par\u00e2metros:</p> Par\u00e2metro Tipo Obrigat\u00f3rio Descri\u00e7\u00e3o <code>name</code> string \u2705 Nome do storage pool <code>driver</code> string \u2705 Driver (zfs, btrfs, dir, lvm, etc.) <code>config</code> table \u274c Configura\u00e7\u00f5es do storage <p>M\u00e9todos:</p>"},{"location":"modules/incus/#create_3","title":":create()","text":"<p>Cria o storage pool.</p> <pre><code>incus.storage({\n    name = \"ssd-pool\",\n    driver = \"zfs\"\n}):create()\n</code></pre>"},{"location":"modules/incus/#delete_4","title":":delete()","text":"<p>Deleta o storage pool.</p> <pre><code>incus.storage({name = \"old-pool\"}):delete()\n</code></pre>"},{"location":"modules/incus/#set_configconfig_3","title":":set_config(config)","text":"<p>Define configura\u00e7\u00f5es do storage.</p> <pre><code>incus.storage({name = \"ssd-pool\"}):set_config({\n    [\"size\"] = \"100GB\",\n    [\"volume.zfs.use_refquota\"] = \"true\"\n})\n</code></pre>"},{"location":"modules/incus/#snapshots","title":"Snapshots","text":"<p>Gerenciamento de snapshots de inst\u00e2ncias.</p>"},{"location":"modules/incus/#incussnapshotoptions","title":"incus.snapshot(options)","text":"<p>Cria um builder de snapshot.</p> <p>Par\u00e2metros:</p> Par\u00e2metro Tipo Obrigat\u00f3rio Descri\u00e7\u00e3o <code>instance</code> string \u2705 Nome da inst\u00e2ncia <code>name</code> string \u2705 Nome do snapshot <code>stateful</code> boolean \u274c Snapshot com estado da mem\u00f3ria <p>M\u00e9todos:</p>"},{"location":"modules/incus/#create_4","title":":create()","text":"<p>Cria o snapshot.</p> <pre><code>incus.snapshot({\n    instance = \"web01\",\n    name = \"before-upgrade\"\n}):create()\n\n-- Snapshot stateful (com mem\u00f3ria)\nincus.snapshot({\n    instance = \"web01\",\n    name = \"before-upgrade\",\n    stateful = true\n}):create()\n</code></pre>"},{"location":"modules/incus/#restore","title":":restore()","text":"<p>Restaura o snapshot.</p> <pre><code>incus.snapshot({\n    instance = \"web01\",\n    name = \"before-upgrade\"\n}):restore()\n</code></pre>"},{"location":"modules/incus/#delete_5","title":":delete()","text":"<p>Deleta o snapshot.</p> <pre><code>incus.snapshot({\n    instance = \"web01\",\n    name = \"old-snapshot\"\n}):delete()\n</code></pre>"},{"location":"modules/incus/#funcoes-utilitarias","title":"Fun\u00e7\u00f5es Utilit\u00e1rias","text":""},{"location":"modules/incus/#incuslistfilter","title":"incus.list([filter])","text":"<p>Lista recursos Incus.</p> <pre><code>-- Listar todas as inst\u00e2ncias\nlocal instances = incus.list(\"instances\")\n\n-- Listar todas as redes\nlocal networks = incus.list(\"networks\")\n\n-- Listar todos os perfis\nlocal profiles = incus.list(\"profiles\")\n\n-- Listar storage pools\nlocal pools = incus.list(\"storage-pools\")\n</code></pre>"},{"location":"modules/incus/#incusinfotype-name","title":"incus.info(type, name)","text":"<p>Obt\u00e9m informa\u00e7\u00f5es sobre um recurso.</p> <pre><code>-- Info de uma inst\u00e2ncia\nlocal info = incus.info(\"instance\", \"web01\")\nprint(info)\n\n-- Info de uma rede\nlocal net_info = incus.info(\"network\", \"br-dmz\")\nprint(net_info)\n</code></pre>"},{"location":"modules/incus/#incusexecinstance-command-options","title":"incus.exec(instance, command, [options])","text":"<p>Executa comando em uma inst\u00e2ncia (fun\u00e7\u00e3o standalone).</p> <pre><code>incus.exec(\"web01\", \"systemctl status nginx\")\n\n-- Com op\u00e7\u00f5es\nincus.exec(\"web01\", \"whoami\", {\n    user = \"ubuntu\"\n})\n</code></pre>"},{"location":"modules/incus/#incusdeletetype-name","title":"incus.delete(type, name)","text":"<p>Deleta um recurso (fun\u00e7\u00e3o standalone).</p> <pre><code>-- Deletar inst\u00e2ncia\nincus.delete(\"instance\", \"old-container\")\n\n-- Deletar rede\nincus.delete(\"network\", \"old-bridge\")\n\n-- Deletar perfil\nincus.delete(\"profile\", \"unused-profile\")\n</code></pre>"},{"location":"modules/incus/#exemplo-destacado-deploy-de-web-cluster-com-paralelismo","title":"\ud83d\udd25 Exemplo Destacado: Deploy de Web Cluster com Paralelismo","text":"<p>Este \u00e9 um exemplo completo que demonstra o poder do m\u00f3dulo Incus combinado com goroutines para deploy paralelo de um cluster web completo.</p> <pre><code>task({\n    name = \"deploy-web-cluster\",\n    delegate_to = \"incus-host-01\",\n    run = function()\n        -- \ud83c\udf10 Criar rede isolada para o cluster\n        incus.network({\n            name = \"web-dmz\",\n            type = \"bridge\"\n        }):set_config({\n            [\"ipv4.address\"] = \"10.10.0.1/24\",\n            [\"ipv4.nat\"] = \"true\",\n            [\"ipv6.address\"] = \"none\"\n        }):create()\n\n        -- \u26a1 Deploy paralelo de 3 servidores web\n        goroutine.map({\"web-01\", \"web-02\", \"web-03\"}, function(name)\n            incus.instance({\n                name = name,\n                image = \"ubuntu:22.04\"\n            }):create()\n              :start()\n              :wait_running()\n              :exec(\"apt update &amp;&amp; apt install -y nginx\")\n\n            log.info(\"\u2705 \" .. name .. \" deployed and ready\")\n        end)\n\n        log.info(\"\ud83c\udf89 Web cluster deployed successfully!\")\n    end\n})\n</code></pre> <p>Recursos demonstrados:</p> <ul> <li>\u2705 Cria\u00e7\u00e3o de rede isolada com configura\u00e7\u00e3o customizada</li> <li>\u2705 Deploy paralelo usando <code>goroutine.map()</code></li> <li>\u2705 M\u00e9todo fluente (chaining) para opera\u00e7\u00f5es sequenciais</li> <li>\u2705 Execu\u00e7\u00e3o remota via <code>:delegate_to()</code></li> <li>\u2705 Instala\u00e7\u00e3o de pacotes dentro dos containers</li> </ul>"},{"location":"modules/incus/#exemplos-praticos","title":"Exemplos Pr\u00e1ticos","text":""},{"location":"modules/incus/#exemplo-1-deploy-de-web-server","title":"Exemplo 1: Deploy de Web Server","text":"<pre><code>task({\n    name = \"deploy-web-server\",\n    delegate_to = \"incus-host-01\",\n    run = function()\n        -- Criar rede\n        incus.network({\n            name = \"web-dmz\",\n            type = \"bridge\"\n        }):set_config({\n            [\"ipv4.address\"] = \"10.10.0.1/24\",\n            [\"ipv4.nat\"] = \"true\",\n            [\"ipv6.address\"] = \"none\"\n        }):create()\n\n        -- Criar perfil web\n        incus.profile({\n            name = \"web-server\",\n            description = \"Profile for web servers\"\n        }):set_config({\n            [\"limits.cpu\"] = \"2\",\n            [\"limits.memory\"] = \"2GB\"\n        }):create()\n\n        -- Criar e configurar inst\u00e2ncia\n        local web = incus.instance({\n            name = \"nginx-01\",\n            image = \"ubuntu:22.04\",\n            profiles = {\"default\", \"web-server\"}\n        })\n\n        web:create()\n        web:start()\n        web:wait_running()\n\n        -- Anexar \u00e0 rede\n        incus.network({name = \"web-dmz\"}):attach(\"nginx-01\")\n\n        -- Instalar nginx\n        web:exec(\"apt update\")\n        web:exec(\"apt install -y nginx\")\n\n        -- Copiar configura\u00e7\u00e3o\n        web:file_push(\"./nginx.conf\", \"/etc/nginx/sites-available/default\")\n        web:exec(\"systemctl restart nginx\")\n\n        -- Criar snapshot\n        incus.snapshot({\n            instance = \"nginx-01\",\n            name = \"initial-setup\"\n        }):create()\n\n        log.info(\"Web server deployed successfully!\")\n    end\n})\n</code></pre>"},{"location":"modules/incus/#exemplo-2-cluster-de-aplicacao","title":"Exemplo 2: Cluster de Aplica\u00e7\u00e3o","text":"<pre><code>task({\n    name = \"deploy-app-cluster\",\n    delegate_to = \"cluster-manager\",\n    run = function()\n        local app_nodes = {\"app-01\", \"app-02\", \"app-03\"}\n\n        -- Criar rede do cluster\n        incus.network({\n            name = \"app-cluster\",\n            type = \"bridge\"\n        }):set_config({\n            [\"ipv4.address\"] = \"172.20.0.1/24\",\n            [\"ipv4.nat\"] = \"false\"\n        }):create()\n\n        -- Criar perfil do app\n        incus.profile({\n            name = \"app-node\",\n            description = \"Application node profile\"\n        }):set_config({\n            [\"limits.cpu\"] = \"4\",\n            [\"limits.memory\"] = \"4GB\",\n            [\"boot.autostart\"] = \"true\"\n        }):create()\n\n        -- Deploy de cada n\u00f3\n        goroutine.map(app_nodes, function(node_name)\n            local node = incus.instance({\n                name = node_name,\n                image = \"ubuntu:22.04\",\n                profiles = {\"default\", \"app-node\"}\n            })\n\n            node:create()\n            node:start()\n            node:wait_running()\n\n            -- Conectar \u00e0 rede do cluster\n            incus.network({name = \"app-cluster\"}):attach(node_name)\n\n            -- Instalar depend\u00eancias\n            node:exec(\"apt update &amp;&amp; apt install -y docker.io\")\n\n            -- Deploy da aplica\u00e7\u00e3o\n            node:file_push(\"./app/docker-compose.yml\", \"/opt/app/docker-compose.yml\")\n            node:exec(\"cd /opt/app &amp;&amp; docker-compose up -d\")\n\n            log.info(\"Node \" .. node_name .. \" deployed\")\n        end)\n\n        log.info(\"Cluster deployed successfully!\")\n    end\n})\n</code></pre>"},{"location":"modules/incus/#exemplo-3-backup-e-restore","title":"Exemplo 3: Backup e Restore","text":"<pre><code>task({\n    name = \"backup-critical-instances\",\n    run = function()\n        local instances = {\"db-01\", \"web-01\", \"cache-01\"}\n        local timestamp = os.date(\"%Y%m%d-%H%M%S\")\n\n        goroutine.map(instances, function(instance)\n            -- Criar snapshot\n            local snap_name = \"backup-\" .. timestamp\n\n            incus.snapshot({\n                instance = instance,\n                name = snap_name,\n                stateful = true\n            }):delegate_to(\"backup-host\"):create()\n\n            log.info(\"Snapshot created: \" .. instance .. \"/\" .. snap_name)\n        end)\n    end\n})\n\ntask({\n    name = \"restore-instance\",\n    run = function()\n        local instance = values.instance or \"db-01\"\n        local snapshot = values.snapshot or \"backup-latest\"\n\n        log.info(\"Restoring \" .. instance .. \" from \" .. snapshot)\n\n        -- Parar inst\u00e2ncia\n        incus.instance({name = instance}):stop(true)\n\n        -- Restaurar snapshot\n        incus.snapshot({\n            instance = instance,\n            name = snapshot\n        }):restore()\n\n        -- Reiniciar\n        incus.instance({name = instance}):start():wait_running()\n\n        log.info(\"Restore completed successfully!\")\n    end\n})\n</code></pre>"},{"location":"modules/incus/#exemplo-4-cicd-test-environment","title":"Exemplo 4: CI/CD Test Environment","text":"<pre><code>task({\n    name = \"create-test-environment\",\n    run = function()\n        local branch = values.branch or \"main\"\n        local test_name = \"test-\" .. branch:gsub(\"[^%w]\", \"-\")\n\n        -- Criar inst\u00e2ncia de teste\n        local test_env = incus.instance({\n            name = test_name,\n            image = \"ubuntu:22.04\"\n        })\n\n        test_env:delegate_to(\"ci-runner\")\n                :create()\n                :start()\n                :wait_running()\n\n        -- Setup do ambiente\n        test_env:exec(\"apt update &amp;&amp; apt install -y git build-essential\")\n\n        -- Clonar c\u00f3digo\n        test_env:exec(\"git clone https://github.com/user/repo.git /app\")\n        test_env:exec(\"cd /app &amp;&amp; git checkout \" .. branch)\n\n        -- Rodar testes\n        local result = test_env:exec(\"cd /app &amp;&amp; make test\")\n\n        -- Criar snapshot se testes passarem\n        if result:find(\"All tests passed\") then\n            incus.snapshot({\n                instance = test_name,\n                name = \"tests-passed\"\n            }):create()\n\n            log.info(\"Tests passed! Snapshot created.\")\n        else\n            log.error(\"Tests failed!\")\n        end\n\n        -- Cleanup (opcional)\n        -- test_env:stop():delete()\n    end\n})\n</code></pre>"},{"location":"modules/incus/#exemplo-5-multi-host-deployment","title":"Exemplo 5: Multi-Host Deployment","text":"<pre><code>task({\n    name = \"deploy-distributed-system\",\n    run = function()\n        local hosts = {\n            {name = \"host-01\", role = \"database\"},\n            {name = \"host-02\", role = \"application\"},\n            {name = \"host-03\", role = \"cache\"}\n        }\n\n        goroutine.map(hosts, function(host)\n            local container_name = host.role .. \"-server\"\n\n            incus.instance({\n                name = container_name,\n                image = \"ubuntu:22.04\"\n            }):delegate_to(host.name)\n              :set_config({\n                  [\"limits.cpu\"] = \"4\",\n                  [\"limits.memory\"] = \"8GB\"\n              }):create()\n                :start()\n                :wait_running()\n\n            -- Configura\u00e7\u00e3o espec\u00edfica por role\n            if host.role == \"database\" then\n                incus.exec(container_name, \"apt install -y postgresql\")\n            elseif host.role == \"application\" then\n                incus.exec(container_name, \"apt install -y nodejs npm\")\n            elseif host.role == \"cache\" then\n                incus.exec(container_name, \"apt install -y redis-server\")\n            end\n\n            log.info(\"Deployed \" .. container_name .. \" on \" .. host.name)\n        end)\n    end\n})\n</code></pre>"},{"location":"modules/incus/#exemplo-6-storage-management","title":"Exemplo 6: Storage Management","text":"<pre><code>task({\n    name = \"setup-storage-infrastructure\",\n    delegate_to = \"storage-host\",\n    run = function()\n        -- Criar storage pools\n        incus.storage({\n            name = \"ssd-pool\",\n            driver = \"zfs\"\n        }):set_config({\n            [\"size\"] = \"500GB\",\n            [\"volume.zfs.use_refquota\"] = \"true\"\n        }):create()\n\n        incus.storage({\n            name = \"hdd-pool\",\n            driver = \"btrfs\"\n        }):set_config({\n            [\"size\"] = \"2TB\"\n        }):create()\n\n        -- Criar perfil com storage customizado\n        incus.profile({\n            name = \"fast-storage\"\n        }):set_config({\n            [\"root\"] = {\n                pool = \"ssd-pool\",\n                type = \"disk\",\n                path = \"/\"\n            }\n        }):create()\n\n        log.info(\"Storage infrastructure ready!\")\n    end\n})\n</code></pre>"},{"location":"modules/incus/#integracao-com-delegate_to","title":"Integra\u00e7\u00e3o com delegate_to","text":"<p>O m\u00f3dulo Incus suporta completamente execu\u00e7\u00e3o remota via <code>:delegate_to()</code>:</p> <pre><code>-- Exemplo completo com delegate_to\ntask({\n    name = \"remote-incus-management\",\n    run = function()\n        -- Criar inst\u00e2ncia em host remoto\n        incus.instance({\n            name = \"remote-app\",\n            image = \"ubuntu:22.04\"\n        }):delegate_to(values.target_host)\n          :create()\n          :start()\n          :wait_running()\n\n        -- Executar comando na inst\u00e2ncia remota\n        incus.exec(\"remote-app\", \"hostname\")\n               :delegate_to(values.target_host)\n    end\n})\n</code></pre>"},{"location":"modules/incus/#melhores-praticas","title":"Melhores Pr\u00e1ticas","text":""},{"location":"modules/incus/#1-use-perfis-para-configuracoes-comuns","title":"1. Use Perfis para Configura\u00e7\u00f5es Comuns","text":"<pre><code>-- Definir perfil uma vez\nincus.profile({\n    name = \"production\",\n    config = {\n        [\"limits.cpu\"] = \"4\",\n        [\"limits.memory\"] = \"8GB\",\n        [\"boot.autostart\"] = \"true\"\n    }\n}):create()\n\n-- Usar em m\u00faltiplas inst\u00e2ncias\nincus.instance({name = \"app-01\", profiles = {\"default\", \"production\"}})\nincus.instance({name = \"app-02\", profiles = {\"default\", \"production\"}})\n</code></pre>"},{"location":"modules/incus/#2-sempre-use-snapshots-antes-de-mudancas-criticas","title":"2. Sempre Use Snapshots Antes de Mudan\u00e7as Cr\u00edticas","text":"<pre><code>-- Snapshot antes de upgrade\nincus.snapshot({\n    instance = \"prod-db\",\n    name = \"pre-upgrade-\" .. os.date(\"%Y%m%d\"),\n    stateful = true\n}):create()\n\n-- Fazer upgrade\ninstance:exec(\"apt upgrade -y\")\n\n-- Se der errado, restaurar\n-- incus.snapshot({instance = \"prod-db\", name = \"pre-upgrade-...\"})restore()\n</code></pre>"},{"location":"modules/incus/#3-use-goroutines-para-operacoes-paralelas","title":"3. Use Goroutines para Opera\u00e7\u00f5es Paralelas","text":"<pre><code>-- Deploy paralelo\ngoroutine.map({\"web-01\", \"web-02\", \"web-03\"}, function(name)\n    incus.instance({name = name, image = \"nginx:latest\"})\n         :create():start():wait_running()\nend)\n</code></pre>"},{"location":"modules/incus/#4-organize-redes-por-funcao","title":"4. Organize Redes por Fun\u00e7\u00e3o","text":"<pre><code>-- Rede DMZ\nincus.network({name = \"dmz\", type = \"bridge\"}):create()\n\n-- Rede interna\nincus.network({name = \"internal\", type = \"bridge\"}):create()\n\n-- Atribuir inst\u00e2ncias \u00e0s redes apropriadas\nincus.network({name = \"dmz\"}):attach(\"web-server\")\nincus.network({name = \"internal\"}):attach(\"database\")\n</code></pre>"},{"location":"modules/incus/#troubleshooting","title":"Troubleshooting","text":""},{"location":"modules/incus/#verificar-status-de-instancias","title":"Verificar Status de Inst\u00e2ncias","text":"<pre><code>local info = incus.info(\"instance\", \"my-container\")\nprint(\"Status: \" .. info)\n</code></pre>"},{"location":"modules/incus/#listar-recursos","title":"Listar Recursos","text":"<pre><code>local instances = incus.list(\"instances\")\nlocal networks = incus.list(\"networks\")\nlocal profiles = incus.list(\"profiles\")\n</code></pre>"},{"location":"modules/incus/#logs-de-execucao","title":"Logs de Execu\u00e7\u00e3o","text":"<pre><code>-- Executar com output detalhado\nlocal result = incus.exec(\"my-container\", \"systemctl status nginx\")\nlog.info(\"Command output: \" .. result)\n</code></pre>"},{"location":"modules/incus/#veja-tambem","title":"Veja Tamb\u00e9m","text":"<ul> <li>M\u00f3dulo SystemD - Gerenciar servi\u00e7os systemd</li> <li>M\u00f3dulo Pkg - Gerenciar pacotes</li> <li>M\u00f3dulo User - Gerenciar usu\u00e1rios</li> <li>M\u00f3dulo SSH - Opera\u00e7\u00f5es SSH</li> <li>Goroutines - Execu\u00e7\u00e3o paralela</li> </ul>"},{"location":"modules/infra_test/","title":"M\u00f3dulo infra_test","text":"<p>O m\u00f3dulo <code>infra_test</code> fornece um framework completo de valida\u00e7\u00e3o e teste de infraestrutura nativo ao Sloth Runner. Ele permite que voc\u00ea insira asser\u00e7\u00f5es de teste diretamente nas suas tasks para verificar o resultado de opera\u00e7\u00f5es de deploy ou configuration management.</p>"},{"location":"modules/infra_test/#visao-geral","title":"Vis\u00e3o Geral","text":"<p>O <code>infra_test</code> \u00e9 inspirado em ferramentas como Testinfra e InSpec, mas \u00e9 nativo e integrado ao Sloth Runner, permitindo testes de infraestrutura diretamente nas tasks sem depend\u00eancias externas.</p>"},{"location":"modules/infra_test/#caracteristicas-principais","title":"Caracter\u00edsticas Principais","text":"<ul> <li>\u2705 Execu\u00e7\u00e3o Local e Remota: Todos os testes podem ser executados localmente ou delegados para agentes remotos</li> <li>\u2705 Asser\u00e7\u00f5es Nativas: Interrompe a execu\u00e7\u00e3o da task em caso de falha</li> <li>\u2705 Zero Depend\u00eancias: N\u00e3o requer instala\u00e7\u00e3o de ferramentas externas</li> <li>\u2705 Integra\u00e7\u00e3o Total: Funciona perfeitamente com o sistema de agents do Sloth Runner</li> <li>\u2705 Detec\u00e7\u00e3o Autom\u00e1tica de Pacotes: Suporta apt, yum, pacman, apk e brew automaticamente</li> <li>\u2705 Valida\u00e7\u00e3o de Vers\u00f5es: Verifica vers\u00f5es espec\u00edficas de pacotes instalados</li> </ul>"},{"location":"modules/infra_test/#modulos-de-teste-disponiveis","title":"M\u00f3dulos de Teste Dispon\u00edveis","text":"<p>O <code>infra_test</code> oferece 6 categorias de testes:</p> <ol> <li>\ud83d\uddc2\ufe0f Testes de Arquivo - Verifica exist\u00eancia, permiss\u00f5es, conte\u00fado e propriet\u00e1rios</li> <li>\ud83c\udf10 Testes de Rede - Valida portas, conectividade TCP/UDP e ping</li> <li>\u2699\ufe0f Testes de Servi\u00e7o - Verifica status de servi\u00e7os systemd/init</li> <li>\ud83d\udd04 Testes de Processo - Valida processos em execu\u00e7\u00e3o</li> <li>\ud83d\udcbb Testes de Comando - Executa comandos e valida sa\u00eddas</li> <li>\ud83d\udce6 Testes de Pacote - Verifica instala\u00e7\u00e3o e vers\u00f5es de pacotes (NOVO!)</li> </ol>"},{"location":"modules/infra_test/#parametro-target","title":"Par\u00e2metro Target","text":"<p>Todas as fun\u00e7\u00f5es de teste aceitam um par\u00e2metro opcional <code>target</code> para especificar onde o teste ser\u00e1 executado:</p> Par\u00e2metro target Comportamento Omitido ou <code>\"local\"</code> Executa no agente local (onde a task est\u00e1 rodando) String (nome do agente) O teste \u00e9 delegado ao agente remoto especificado <code>\"localhost\"</code> For\u00e7a o teste no agente onde a task foi agendada"},{"location":"modules/infra_test/#referencia-rapida-de-funcoes","title":"Refer\u00eancia R\u00e1pida de Fun\u00e7\u00f5es","text":""},{"location":"modules/infra_test/#testes-de-arquivo","title":"\ud83d\uddc2\ufe0f Testes de Arquivo","text":"<ul> <li><code>file_exists(path, [target])</code> - Verifica exist\u00eancia</li> <li><code>is_directory(path, [target])</code> - Verifica se \u00e9 diret\u00f3rio</li> <li><code>is_file(path, [target])</code> - Verifica se \u00e9 arquivo</li> <li><code>file_contains(path, pattern, [target])</code> - Verifica conte\u00fado</li> <li><code>file_mode(path, mode, [target])</code> - Verifica permiss\u00f5es</li> <li><code>file_owner(path, user, [target])</code> - Verifica propriet\u00e1rio</li> <li><code>file_group(path, group, [target])</code> - Verifica grupo</li> <li><code>file_size(path, bytes, [target])</code> - Verifica tamanho</li> </ul>"},{"location":"modules/infra_test/#testes-de-rede","title":"\ud83c\udf10 Testes de Rede","text":"<ul> <li><code>port_is_listening(port, [target])</code> - Verifica porta aberta</li> <li><code>port_is_tcp(port, [target])</code> - Verifica porta TCP</li> <li><code>port_is_udp(port, [target])</code> - Verifica porta UDP</li> <li><code>can_connect(host, port, [timeout])</code> - Testa conectividade TCP</li> <li><code>ping(host, [count], [target])</code> - Testa conectividade ICMP</li> </ul>"},{"location":"modules/infra_test/#testes-de-servico","title":"\u2699\ufe0f Testes de Servi\u00e7o","text":"<ul> <li><code>service_is_running(name, [target])</code> - Verifica se servi\u00e7o est\u00e1 ativo</li> <li><code>service_is_enabled(name, [target])</code> - Verifica se est\u00e1 habilitado</li> </ul>"},{"location":"modules/infra_test/#testes-de-processo","title":"\ud83d\udd04 Testes de Processo","text":"<ul> <li><code>process_is_running(pattern, [target])</code> - Verifica processo</li> <li><code>process_count(pattern, count, [target])</code> - Conta processos</li> </ul>"},{"location":"modules/infra_test/#testes-de-comando","title":"\ud83d\udcbb Testes de Comando","text":"<ul> <li><code>command_succeeds(cmd, [target])</code> - Verifica exit code 0</li> <li><code>command_fails(cmd, [target])</code> - Verifica exit code != 0</li> <li><code>command_stdout_contains(cmd, pattern, [target])</code> - Verifica sa\u00edda</li> <li><code>command_stderr_is_empty(cmd, [target])</code> - Verifica stderr vazio</li> <li><code>command_output_equals(cmd, expected, [target])</code> - Verifica sa\u00edda exata</li> </ul>"},{"location":"modules/infra_test/#testes-de-pacote","title":"\ud83d\udce6 Testes de Pacote","text":"<ul> <li><code>package_is_installed(name, [target])</code> - Verifica instala\u00e7\u00e3o</li> <li><code>package_version(name, version, [target])</code> - Verifica vers\u00e3o</li> </ul>"},{"location":"modules/infra_test/#modelo-de-retorno","title":"Modelo de Retorno","text":"<ul> <li>Sucesso: A fun\u00e7\u00e3o n\u00e3o retorna nada (ou retorna <code>true</code>)</li> <li>Falha: A fun\u00e7\u00e3o lan\u00e7a um erro que interrompe a execu\u00e7\u00e3o da task e marca a task como falha</li> </ul>"},{"location":"modules/infra_test/#testes-de-arquivo-file-tests","title":"Testes de Arquivo (File Tests)","text":""},{"location":"modules/infra_test/#file_existspath-target","title":"file_exists(path, [target])","text":"<p>Verifica se um arquivo ou diret\u00f3rio existe.</p> <p>Par\u00e2metros: - <code>path</code> (string): Caminho do arquivo ou diret\u00f3rio - <code>target</code> (string, opcional): Agente onde executar o teste</p> <p>Exemplo: <pre><code>local infra_test = require(\"infra_test\")\n\nworkflow(\"test-deployment\")\n  :task(\"verify-config\", function()\n    -- Verifica localmente\n    infra_test.file_exists(\"/etc/nginx/nginx.conf\")\n\n    -- Verifica em agente remoto\n    infra_test.file_exists(\"/etc/nginx/nginx.conf\", \"web-server-01\")\n  end)\n  :delegate_to(\"prod-agent\")\n</code></pre></p>"},{"location":"modules/infra_test/#is_directorypath-target","title":"is_directory(path, [target])","text":"<p>Verifica se o caminho \u00e9 um diret\u00f3rio.</p> <p>Exemplo: <pre><code>infra_test.is_directory(\"/var/www/html\")\ninfra_test.is_directory(\"/opt/app\", \"app-server\")\n</code></pre></p>"},{"location":"modules/infra_test/#is_filepath-target","title":"is_file(path, [target])","text":"<p>Verifica se o caminho \u00e9 um arquivo regular.</p> <p>Exemplo: <pre><code>infra_test.is_file(\"/etc/hosts\")\ninfra_test.is_file(\"/var/log/app.log\", \"log-server\")\n</code></pre></p>"},{"location":"modules/infra_test/#file_containspath-pattern-target","title":"file_contains(path, pattern, [target])","text":"<p>Verifica se o arquivo cont\u00e9m uma string ou padr\u00e3o regex.</p> <p>Par\u00e2metros: - <code>path</code> (string): Caminho do arquivo - <code>pattern</code> (string): String ou express\u00e3o regular a buscar - <code>target</code> (string, opcional): Agente onde executar</p> <p>Exemplo: <pre><code>-- Verifica string simples\ninfra_test.file_contains(\"/etc/nginx/nginx.conf\", \"worker_processes\")\n\n-- Verifica com regex\ninfra_test.file_contains(\"/var/log/app.log\", \"ERROR.*database\", \"app-server\")\n</code></pre></p>"},{"location":"modules/infra_test/#file_modepath-mode-target","title":"file_mode(path, mode, [target])","text":"<p>Verifica as permiss\u00f5es do arquivo.</p> <p>Par\u00e2metros: - <code>path</code> (string): Caminho do arquivo - <code>mode</code> (string): Permiss\u00f5es esperadas (ex: \"644\", \"0644\", \"0o644\") - <code>target</code> (string, opcional): Agente onde executar</p> <p>Exemplo: <pre><code>infra_test.file_mode(\"/etc/passwd\", \"644\")\ninfra_test.file_mode(\"/root/.ssh/id_rsa\", \"0600\", \"bastion\")\n</code></pre></p>"},{"location":"modules/infra_test/#file_ownerpath-user-target","title":"file_owner(path, user, [target])","text":"<p>Verifica se o propriet\u00e1rio (usu\u00e1rio) do arquivo corresponde.</p> <p>Exemplo: <pre><code>infra_test.file_owner(\"/var/www/html\", \"www-data\")\ninfra_test.file_owner(\"/opt/app/config.yaml\", \"appuser\", \"app-server\")\n</code></pre></p>"},{"location":"modules/infra_test/#file_grouppath-group-target","title":"file_group(path, group, [target])","text":"<p>Verifica se o grupo do arquivo corresponde.</p> <p>Exemplo: <pre><code>infra_test.file_group(\"/var/www/html\", \"www-data\")\ninfra_test.file_group(\"/etc/ssl/private\", \"ssl-cert\", \"web-server\")\n</code></pre></p>"},{"location":"modules/infra_test/#file_sizepath-size_in_bytes-target","title":"file_size(path, size_in_bytes, [target])","text":"<p>Verifica o tamanho exato do arquivo em bytes.</p> <p>Exemplo: <pre><code>infra_test.file_size(\"/etc/machine-id\", 33)\ninfra_test.file_size(\"/var/cache/app.db\", 1048576, \"cache-server\")\n</code></pre></p>"},{"location":"modules/infra_test/#testes-de-rede-e-porta-network-tests","title":"Testes de Rede e Porta (Network Tests)","text":""},{"location":"modules/infra_test/#port_is_listeningport-target","title":"port_is_listening(port, [target])","text":"<p>Verifica se a porta est\u00e1 aberta/escutando no alvo.</p> <p>Exemplo: <pre><code>infra_test.port_is_listening(80)\ninfra_test.port_is_listening(443, \"web-server\")\ninfra_test.port_is_listening(5432, \"db-server\")\n</code></pre></p>"},{"location":"modules/infra_test/#port_is_tcpport-target","title":"port_is_tcp(port, [target])","text":"<p>Verifica se a porta est\u00e1 escutando usando o protocolo TCP.</p> <p>Exemplo: <pre><code>infra_test.port_is_tcp(22)\ninfra_test.port_is_tcp(3306, \"mysql-server\")\n</code></pre></p>"},{"location":"modules/infra_test/#port_is_udpport-target","title":"port_is_udp(port, [target])","text":"<p>Verifica se a porta est\u00e1 escutando usando o protocolo UDP.</p> <p>Exemplo: <pre><code>infra_test.port_is_udp(53)\ninfra_test.port_is_udp(123, \"ntp-server\")\n</code></pre></p>"},{"location":"modules/infra_test/#can_connecthost-port-timeout_ms","title":"can_connect(host, port, [timeout_ms])","text":"<p>Testa a conectividade TCP a partir do agente para um host externo/remoto.</p> <p>Par\u00e2metros: - <code>host</code> (string): Host de destino - <code>port</code> (number): Porta de destino - <code>timeout_ms</code> (number, opcional): Timeout em milissegundos (padr\u00e3o: 5000)</p> <p>Exemplo: <pre><code>infra_test.can_connect(\"google.com\", 443)\ninfra_test.can_connect(\"database.internal\", 5432, 3000)\n</code></pre></p>"},{"location":"modules/infra_test/#pinghost-count-target","title":"ping(host, [count], [target])","text":"<p>Testa a conectividade ICMP (ping) para um host.</p> <p>Par\u00e2metros: - <code>host</code> (string): Host de destino - <code>count</code> (number, opcional): N\u00famero de pacotes (padr\u00e3o: 4) - <code>target</code> (string, opcional): Agente onde executar</p> <p>Exemplo: <pre><code>infra_test.ping(\"8.8.8.8\")\ninfra_test.ping(\"internal-router\", 10)\ninfra_test.ping(\"remote-server\", 5, \"edge-agent\")\n</code></pre></p>"},{"location":"modules/infra_test/#testes-de-servico-e-processo-service-process-tests","title":"Testes de Servi\u00e7o e Processo (Service &amp; Process Tests)","text":""},{"location":"modules/infra_test/#service_is_runningname-target","title":"service_is_running(name, [target])","text":"<p>Verifica se o servi\u00e7o est\u00e1 ativo (via systemctl, service, etc.).</p> <p>Exemplo: <pre><code>infra_test.service_is_running(\"nginx\")\ninfra_test.service_is_running(\"postgresql\", \"db-server\")\n</code></pre></p>"},{"location":"modules/infra_test/#service_is_enabledname-target","title":"service_is_enabled(name, [target])","text":"<p>Verifica se o servi\u00e7o est\u00e1 habilitado para iniciar no boot.</p> <p>Exemplo: <pre><code>infra_test.service_is_enabled(\"docker\")\ninfra_test.service_is_enabled(\"nginx\", \"web-server\")\n</code></pre></p>"},{"location":"modules/infra_test/#process_is_runningpattern-target","title":"process_is_running(pattern, [target])","text":"<p>Verifica se um processo com um nome ou padr\u00e3o de comando est\u00e1 em execu\u00e7\u00e3o.</p> <p>Exemplo: <pre><code>infra_test.process_is_running(\"nginx\")\ninfra_test.process_is_running(\"java.*spring-boot\", \"app-server\")\n</code></pre></p>"},{"location":"modules/infra_test/#process_countpattern-count-target","title":"process_count(pattern, count, [target])","text":"<p>Verifica se o n\u00famero de processos corresponde a um valor exato.</p> <p>Par\u00e2metros: - <code>pattern</code> (string): Padr\u00e3o para buscar processos - <code>count</code> (number): N\u00famero esperado de processos - <code>target</code> (string, opcional): Agente onde executar</p> <p>Exemplo: <pre><code>infra_test.process_count(\"nginx\", 4)\ninfra_test.process_count(\"worker\", 8, \"worker-node\")\n</code></pre></p>"},{"location":"modules/infra_test/#testes-de-comando-e-saida-command-output-tests","title":"Testes de Comando e Sa\u00edda (Command &amp; Output Tests)","text":""},{"location":"modules/infra_test/#command_succeedscmd-target","title":"command_succeeds(cmd, [target])","text":"<p>Verifica se o comando retorna o c\u00f3digo de sa\u00edda 0.</p> <p>Exemplo: <pre><code>infra_test.command_succeeds(\"which docker\")\ninfra_test.command_succeeds(\"systemctl is-active nginx\", \"web-server\")\n</code></pre></p>"},{"location":"modules/infra_test/#command_failscmd-target","title":"command_fails(cmd, [target])","text":"<p>Verifica se o comando retorna um c\u00f3digo de sa\u00edda diferente de zero.</p> <p>Exemplo: <pre><code>infra_test.command_fails(\"systemctl is-active fake-service\")\ninfra_test.command_fails(\"test -f /nonexistent\", \"app-server\")\n</code></pre></p>"},{"location":"modules/infra_test/#command_stdout_containscmd-pattern-target","title":"command_stdout_contains(cmd, pattern, [target])","text":"<p>Verifica se a sa\u00edda padr\u00e3o do comando cont\u00e9m uma string ou regex.</p> <p>Par\u00e2metros: - <code>cmd</code> (string): Comando a executar - <code>pattern</code> (string): String ou regex a buscar na sa\u00edda - <code>target</code> (string, opcional): Agente onde executar</p> <p>Exemplo: <pre><code>infra_test.command_stdout_contains(\"cat /etc/os-release\", \"Ubuntu\")\ninfra_test.command_stdout_contains(\"docker --version\", \"version 20\", \"docker-host\")\n</code></pre></p>"},{"location":"modules/infra_test/#command_stderr_is_emptycmd-target","title":"command_stderr_is_empty(cmd, [target])","text":"<p>Verifica se a sa\u00edda de erro do comando est\u00e1 vazia.</p> <p>Exemplo: <pre><code>infra_test.command_stderr_is_empty(\"ls /home\")\ninfra_test.command_stderr_is_empty(\"cat /etc/hosts\", \"web-server\")\n</code></pre></p>"},{"location":"modules/infra_test/#command_output_equalscmd-expected_output-target","title":"command_output_equals(cmd, expected_output, [target])","text":"<p>Verifica se a sa\u00edda padr\u00e3o \u00e9 exatamente igual ao valor esperado.</p> <p>Par\u00e2metros: - <code>cmd</code> (string): Comando a executar - <code>expected_output</code> (string): Sa\u00edda esperada - <code>target</code> (string, opcional): Agente onde executar</p> <p>Exemplo: <pre><code>infra_test.command_output_equals(\"whoami\", \"root\")\ninfra_test.command_output_equals(\"cat /etc/hostname\", \"web-01\", \"web-server\")\n</code></pre></p>"},{"location":"modules/infra_test/#testes-de-pacote-package-tests","title":"Testes de Pacote (Package Tests)","text":""},{"location":"modules/infra_test/#package_is_installedpackage_name-target","title":"package_is_installed(package_name, [target])","text":"<p>Verifica se um pacote est\u00e1 instalado no sistema. O m\u00f3dulo detecta automaticamente o gerenciador de pacotes dispon\u00edvel (apt/dpkg, yum/rpm, pacman, apk, brew).</p> <p>Par\u00e2metros: - <code>package_name</code> (string): Nome do pacote - <code>target</code> (string, opcional): Agente onde executar o teste</p> <p>Gerenciadores Suportados: - Debian/Ubuntu: dpkg - RedHat/CentOS/Fedora: rpm - Arch Linux: pacman - Alpine Linux: apk - macOS: brew</p> <p>Exemplo: <pre><code>local infra_test = require(\"infra_test\")\n\n-- Verifica se nginx est\u00e1 instalado localmente\ninfra_test.package_is_installed(\"nginx\")\n\n-- Verifica em agente remoto\ninfra_test.package_is_installed(\"postgresql\", \"db-server\")\n\n-- Verifica m\u00faltiplos pacotes\ninfra_test.package_is_installed(\"docker-ce\")\ninfra_test.package_is_installed(\"docker-compose\")\ninfra_test.package_is_installed(\"git\")\n</code></pre></p>"},{"location":"modules/infra_test/#package_versionpackage_name-expected_version-target","title":"package_version(package_name, expected_version, [target])","text":"<p>Verifica a vers\u00e3o de um pacote instalado. Aceita vers\u00e3o exata ou prefixo.</p> <p>Par\u00e2metros: - <code>package_name</code> (string): Nome do pacote - <code>expected_version</code> (string): Vers\u00e3o esperada (ou prefixo da vers\u00e3o) - <code>target</code> (string, opcional): Agente onde executar o teste</p> <p>Exemplo: <pre><code>-- Verifica vers\u00e3o exata\ninfra_test.package_version(\"nginx\", \"1.18.0\")\n\n-- Verifica prefixo de vers\u00e3o (ex: 1.18.x)\ninfra_test.package_version(\"nginx\", \"1.18\", \"web-server\")\n\n-- Verifica vers\u00e3o major\ninfra_test.package_version(\"postgresql\", \"14\", \"db-server\")\n</code></pre></p>"},{"location":"modules/infra_test/#exemplos-completos","title":"Exemplos Completos","text":""},{"location":"modules/infra_test/#exemplo-1-teste-de-deploy-de-aplicacao","title":"Exemplo 1: Teste de Deploy de Aplica\u00e7\u00e3o","text":"<pre><code>local infra_test = require(\"infra_test\")\nlocal pkg = require(\"pkg\")\n\nworkflow(\"deploy-and-test-app\")\n  :task(\"install-nginx\", function()\n    pkg.install(\"nginx\")\n  end)\n\n  :task(\"verify-installation\", function()\n    -- Verifica se o pacote foi instalado\n    infra_test.package_is_installed(\"nginx\")\n\n    -- Verifica se os arquivos existem\n    infra_test.file_exists(\"/usr/sbin/nginx\")\n    infra_test.file_exists(\"/etc/nginx/nginx.conf\")\n\n    -- Verifica se o servi\u00e7o est\u00e1 rodando e habilitado\n    infra_test.service_is_running(\"nginx\")\n    infra_test.service_is_enabled(\"nginx\")\n\n    -- Verifica se a porta est\u00e1 aberta\n    infra_test.port_is_tcp(80)\n\n    -- Verifica se o processo est\u00e1 ativo\n    infra_test.process_is_running(\"nginx\")\n  end)\n\n  :task(\"verify-config\", function()\n    -- Verifica permiss\u00f5es e propriet\u00e1rio\n    infra_test.file_mode(\"/etc/nginx/nginx.conf\", \"644\")\n    infra_test.file_owner(\"/var/www/html\", \"www-data\")\n\n    -- Verifica conte\u00fado da configura\u00e7\u00e3o\n    infra_test.file_contains(\"/etc/nginx/nginx.conf\", \"worker_processes\")\n  end)\n\n  :delegate_to(\"web-server-01\")\n</code></pre>"},{"location":"modules/infra_test/#exemplo-2-validacao-multi-agent","title":"Exemplo 2: Valida\u00e7\u00e3o Multi-Agent","text":"<pre><code>local infra_test = require(\"infra_test\")\n\nworkflow(\"test-infrastructure\")\n  :task(\"test-web-servers\", function()\n    -- Testa m\u00faltiplos servidores web\n    local servers = {\"web-01\", \"web-02\", \"web-03\"}\n\n    for _, server in ipairs(servers) do\n      print(\"Testing \" .. server)\n\n      infra_test.service_is_running(\"nginx\", server)\n      infra_test.port_is_listening(80, server)\n      infra_test.port_is_listening(443, server)\n      infra_test.file_exists(\"/var/www/html/index.html\", server)\n    end\n  end)\n\n  :task(\"test-connectivity\", function()\n    -- Testa conectividade entre servidores\n    infra_test.can_connect(\"db-server.internal\", 5432)\n    infra_test.can_connect(\"cache-server.internal\", 6379)\n    infra_test.ping(\"load-balancer\", 5)\n  end)\n</code></pre>"},{"location":"modules/infra_test/#exemplo-3-teste-de-configuracao-completa","title":"Exemplo 3: Teste de Configura\u00e7\u00e3o Completa","text":"<pre><code>local infra_test = require(\"infra_test\")\nlocal systemd = require(\"systemd\")\n\nworkflow(\"deploy-microservice\")\n  :task(\"create-service\", function()\n    systemd.create_service(\"myapp\", {\n      description = \"My Application\",\n      exec_start = \"/opt/myapp/bin/start.sh\",\n      user = \"appuser\",\n      working_directory = \"/opt/myapp\"\n    })\n\n    systemd.enable(\"myapp\")\n    systemd.start(\"myapp\")\n  end)\n\n  :task(\"validate-deployment\", function()\n    -- Verifica estrutura de diret\u00f3rios\n    infra_test.is_directory(\"/opt/myapp\")\n    infra_test.is_directory(\"/opt/myapp/bin\")\n    infra_test.is_directory(\"/opt/myapp/logs\")\n\n    -- Verifica arquivos\n    infra_test.is_file(\"/opt/myapp/bin/start.sh\")\n    infra_test.file_mode(\"/opt/myapp/bin/start.sh\", \"755\")\n    infra_test.file_owner(\"/opt/myapp\", \"appuser\")\n\n    -- Verifica servi\u00e7o\n    infra_test.service_is_running(\"myapp\")\n    infra_test.service_is_enabled(\"myapp\")\n\n    -- Verifica processo\n    infra_test.process_is_running(\"myapp\")\n\n    -- Verifica porta da aplica\u00e7\u00e3o\n    infra_test.port_is_listening(8080)\n\n    -- Testa endpoint da aplica\u00e7\u00e3o\n    infra_test.command_succeeds(\"curl -s http://localhost:8080/health\")\n    infra_test.command_stdout_contains(\n      \"curl -s http://localhost:8080/health\",\n      \"\\\"status\\\":\\\"up\\\"\"\n    )\n  end)\n\n  :delegate_to(\"app-server-prod\")\n</code></pre>"},{"location":"modules/infra_test/#exemplo-4-teste-de-seguranca","title":"Exemplo 4: Teste de Seguran\u00e7a","text":"<pre><code>local infra_test = require(\"infra_test\")\n\nworkflow(\"security-audit\")\n  :task(\"check-file-permissions\", function()\n    -- Verifica permiss\u00f5es cr\u00edticas\n    infra_test.file_mode(\"/etc/passwd\", \"644\")\n    infra_test.file_mode(\"/etc/shadow\", \"640\")\n    infra_test.file_mode(\"/root/.ssh/id_rsa\", \"600\")\n\n    -- Verifica propriet\u00e1rios\n    infra_test.file_owner(\"/etc/shadow\", \"root\")\n    infra_test.file_group(\"/etc/shadow\", \"shadow\")\n  end)\n\n  :task(\"check-services\", function()\n    -- Verifica que servi\u00e7os desnecess\u00e1rios n\u00e3o est\u00e3o rodando\n    infra_test.command_fails(\"systemctl is-active telnet\")\n    infra_test.command_fails(\"systemctl is-active ftp\")\n\n    -- Verifica que servi\u00e7os cr\u00edticos est\u00e3o rodando\n    infra_test.service_is_running(\"sshd\")\n    infra_test.service_is_running(\"fail2ban\")\n  end)\n\n  :task(\"check-firewall\", function()\n    -- Verifica regras de firewall\n    infra_test.command_succeeds(\"iptables -L | grep -q 'Chain INPUT'\")\n    infra_test.command_stdout_contains(\n      \"iptables -L INPUT\",\n      \"ACCEPT.*tcp.*dpt:ssh\"\n    )\n  end)\n\n  :delegate_to(\"prod-server\")\n</code></pre>"},{"location":"modules/infra_test/#exemplo-5-teste-de-pacotes-e-dependencias","title":"Exemplo 5: Teste de Pacotes e Depend\u00eancias","text":"<pre><code>local infra_test = require(\"infra_test\")\nlocal pkg = require(\"pkg\")\n\nworkflow(\"setup-development-environment\")\n  :task(\"install-packages\", function()\n    pkg.install(\"git\")\n    pkg.install(\"docker-ce\")\n    pkg.install(\"nodejs\")\n    pkg.install(\"python3\")\n  end)\n\n  :task(\"verify-packages\", function()\n    -- Verifica se todos os pacotes foram instalados\n    infra_test.package_is_installed(\"git\")\n    infra_test.package_is_installed(\"docker-ce\")\n    infra_test.package_is_installed(\"nodejs\")\n    infra_test.package_is_installed(\"python3\")\n\n    -- Verifica vers\u00f5es espec\u00edficas\n    infra_test.package_version(\"nodejs\", \"18\")\n    infra_test.package_version(\"python3\", \"3.10\")\n\n    -- Verifica bin\u00e1rios dispon\u00edveis\n    infra_test.command_succeeds(\"which git\")\n    infra_test.command_succeeds(\"which docker\")\n    infra_test.command_succeeds(\"which node\")\n    infra_test.command_succeeds(\"which python3\")\n\n    -- Verifica vers\u00f5es via comando\n    infra_test.command_stdout_contains(\"node --version\", \"v18\")\n    infra_test.command_stdout_contains(\"python3 --version\", \"Python 3.10\")\n  end)\n\n  :task(\"verify-docker-service\", function()\n    infra_test.service_is_running(\"docker\")\n    infra_test.service_is_enabled(\"docker\")\n    infra_test.port_is_listening(2375)\n  end)\n\n  :delegate_to(\"dev-machine\")\n</code></pre>"},{"location":"modules/infra_test/#exemplo-6-auditoria-de-pacotes-multi-agent","title":"Exemplo 6: Auditoria de Pacotes Multi-Agent","text":"<pre><code>local infra_test = require(\"infra_test\")\n\nworkflow(\"audit-packages\")\n  :task(\"audit-web-servers\", function()\n    local servers = {\"web-01\", \"web-02\", \"web-03\"}\n    local required_packages = {\n      \"nginx\",\n      \"certbot\",\n      \"ufw\",\n      \"fail2ban\"\n    }\n\n    for _, server in ipairs(servers) do\n      print(\"Auditing \" .. server)\n\n      for _, pkg_name in ipairs(required_packages) do\n        infra_test.package_is_installed(pkg_name, server)\n      end\n\n      -- Verifica vers\u00e3o do nginx\n      infra_test.package_version(\"nginx\", \"1.18\", server)\n\n      -- Verifica que pacotes inseguros n\u00e3o est\u00e3o instalados\n      infra_test.command_fails(\"dpkg -l telnetd\", server)\n      infra_test.command_fails(\"dpkg -l rsh-server\", server)\n    end\n  end)\n\n  :task(\"audit-database-servers\", function()\n    local db_servers = {\"db-01\", \"db-02\"}\n\n    for _, server in ipairs(db_servers) do\n      print(\"Auditing database: \" .. server)\n\n      -- Verifica pacotes do PostgreSQL\n      infra_test.package_is_installed(\"postgresql-14\", server)\n      infra_test.package_is_installed(\"postgresql-contrib\", server)\n\n      -- Verifica servi\u00e7o\n      infra_test.service_is_running(\"postgresql\", server)\n      infra_test.port_is_listening(5432, server)\n\n      -- Verifica vers\u00e3o\n      infra_test.command_stdout_contains(\n        \"psql --version\",\n        \"14.\",\n        server\n      )\n    end\n  end)\n</code></pre>"},{"location":"modules/infra_test/#melhores-praticas","title":"Melhores Pr\u00e1ticas","text":"<ol> <li>Organize Testes por Contexto: Agrupe testes relacionados em tasks separadas</li> <li>Use Nomes Descritivos: Nomeie suas tasks de forma clara (ex: \"verify-nginx-config\")</li> <li>Teste Progressivamente: Comece com testes b\u00e1sicos (exist\u00eancia) e avance para testes complexos (conte\u00fado, permiss\u00f5es)</li> <li>Teste em M\u00faltiplos Agentes: Use o par\u00e2metro <code>target</code> para validar configura\u00e7\u00f5es em v\u00e1rios servidores</li> <li>Combine com M\u00f3dulos: Integre <code>infra_test</code> com <code>pkg</code>, <code>systemd</code>, e outros m\u00f3dulos para ciclos completos de deploy+teste</li> <li>Valide Pacotes: Sempre verifique se pacotes foram instalados corretamente ap\u00f3s opera\u00e7\u00f5es de instala\u00e7\u00e3o</li> <li>Use Vers\u00f5es Espec\u00edficas: Para ambientes de produ\u00e7\u00e3o, valide vers\u00f5es espec\u00edficas de pacotes cr\u00edticos</li> </ol>"},{"location":"modules/infra_test/#casos-de-uso-recomendados","title":"Casos de Uso Recomendados","text":""},{"location":"modules/infra_test/#1-deploy-com-validacao","title":"1. Deploy com Valida\u00e7\u00e3o","text":"<p>Combine instala\u00e7\u00e3o de pacotes com valida\u00e7\u00e3o imediata: <pre><code>workflow(\"deploy-with-validation\")\n  :task(\"install\", function()\n    pkg.install(\"nginx\")\n  end)\n  :task(\"validate\", function()\n    infra_test.package_is_installed(\"nginx\")\n    infra_test.service_is_running(\"nginx\")\n    infra_test.port_is_listening(80)\n  end)\n</code></pre></p>"},{"location":"modules/infra_test/#2-auditoria-de-conformidade","title":"2. Auditoria de Conformidade","text":"<p>Valide que todos os servidores est\u00e3o em conformidade: <pre><code>workflow(\"compliance-check\")\n  :task(\"check-security-packages\", function()\n    infra_test.package_is_installed(\"fail2ban\")\n    infra_test.package_is_installed(\"ufw\")\n    infra_test.service_is_running(\"fail2ban\")\n  end)\n</code></pre></p>"},{"location":"modules/infra_test/#3-validacao-de-dependencias","title":"3. Valida\u00e7\u00e3o de Depend\u00eancias","text":"<p>Verifique que todas as depend\u00eancias necess\u00e1rias est\u00e3o presentes: <pre><code>workflow(\"check-dependencies\")\n  :task(\"verify\", function()\n    local deps = {\"python3\", \"python3-pip\", \"python3-venv\"}\n    for _, dep in ipairs(deps) do\n      infra_test.package_is_installed(dep)\n    end\n  end)\n</code></pre></p>"},{"location":"modules/infra_test/#notas-importantes","title":"Notas Importantes","text":"<ul> <li>\u26a0\ufe0f Todos os testes s\u00e3o s\u00edncronos e bloqueiam a execu\u00e7\u00e3o at\u00e9 completarem</li> <li>\u26a0\ufe0f Uma falha em qualquer teste interrompe a task imediatamente</li> <li>\u26a0\ufe0f Testes em agentes remotos requerem que o agente esteja conectado e ativo</li> <li>\u26a0\ufe0f Comandos shell s\u00e3o executados com <code>sh -c</code>, portanto use sintaxe POSIX-compat\u00edvel</li> </ul>"},{"location":"modules/infra_test/#diferencas-com-outras-ferramentas","title":"Diferen\u00e7as com Outras Ferramentas","text":""},{"location":"modules/infra_test/#vs-testinfra","title":"vs Testinfra","text":"<ul> <li>\u2705 Integrado nativamente ao Sloth Runner (sem Python/pip)</li> <li>\u2705 Usa o sistema de agents nativo</li> <li>\u2705 Sintaxe Lua consistente com o resto do workflow</li> </ul>"},{"location":"modules/infra_test/#vs-inspec","title":"vs InSpec","text":"<ul> <li>\u2705 Mais leve e sem depend\u00eancias Ruby</li> <li>\u2705 Integra\u00e7\u00e3o total com tasks e workflows</li> <li>\u2705 Execu\u00e7\u00e3o em tempo real durante o deploy</li> </ul>"},{"location":"modules/infra_test/#vs-serverspec","title":"vs Serverspec","text":"<ul> <li>\u2705 N\u00e3o requer instala\u00e7\u00e3o de gems</li> <li>\u2705 Melhor performance para testes r\u00e1pidos</li> <li>\u2705 Suporte nativo a execu\u00e7\u00e3o paralela (via goroutines)</li> </ul>"},{"location":"modules/log/","title":"Log Module","text":"<p>The <code>log</code> module provides a simple and essential interface for logging messages from within your Lua scripts to the <code>sloth-runner</code> console. Using this module is the standard way to provide feedback and debug information during a task's execution.</p>"},{"location":"modules/log/#loginfomessage","title":"<code>log.info(message)</code>","text":"<p>Logs a message at the INFO level. This is the standard level for general, informative messages.</p> <ul> <li>Parameters:<ul> <li><code>message</code> (string): The message to log.</li> </ul> </li> </ul>"},{"location":"modules/log/#logwarnmessage","title":"<code>log.warn(message)</code>","text":"<p>Logs a message at the WARN level. This is suitable for non-critical issues that should be brought to the user's attention.</p> <ul> <li>Parameters:<ul> <li><code>message</code> (string): The message to log.</li> </ul> </li> </ul>"},{"location":"modules/log/#logerrormessage","title":"<code>log.error(message)</code>","text":"<p>Logs a message at the ERROR level. This should be used for significant errors that might cause a task to fail.</p> <ul> <li>Parameters:<ul> <li><code>message</code> (string): The message to log.</li> </ul> </li> </ul>"},{"location":"modules/log/#logdebugmessage","title":"<code>log.debug(message)</code>","text":"<p>Logs a message at the DEBUG level. These messages are typically hidden unless the runner is in a verbose or debug mode. They are useful for detailed diagnostic information.</p> <ul> <li>Parameters:<ul> <li><code>message</code> (string): The message to log.</li> </ul> </li> </ul>"},{"location":"modules/log/#example","title":"Example","text":"<pre><code>command = function()\n  -- The log module is globally available and does not need to be required.\n\n  log.info(\"Starting the logging example task.\")\n\n  local user_name = \"Sloth\"\n  log.debug(\"Current user is: \" .. user_name)\n\n  if user_name ~= \"Sloth\" then\n    log.warn(\"The user is not the expected one.\")\n  end\n\n  log.info(\"Task is performing its main action...\")\n\n  local success = true -- Simulate a successful operation\n  if not success then\n    log.error(\"The main action failed unexpectedly!\")\n    return false, \"Main action failed\"\n  end\n\n  log.info(\"Logging example task finished successfully.\")\n  return true, \"Logging demonstrated.\"\nend\n</code></pre>"},{"location":"modules/metrics/","title":"\ud83d\udcca Metrics &amp; Monitoring Module","text":"<p>The Metrics &amp; Monitoring module provides comprehensive system monitoring, custom metrics collection, and health checking capabilities. It enables real-time observability of both system resources and application performance.</p>"},{"location":"modules/metrics/#key-features","title":"\ud83d\ude80 Key Features","text":"<ul> <li>System Metrics: Automatic collection of CPU, memory, disk, and network metrics</li> <li>Runtime Metrics: Go runtime information (goroutines, heap, GC)</li> <li>Custom Metrics: Gauges, counters, histograms, and timers</li> <li>Health Checks: Automatic system health monitoring</li> <li>HTTP Endpoints: Prometheus-compatible metrics export</li> <li>Alerting: Threshold-based alerts</li> <li>JSON API: Complete metrics data for integrations</li> </ul>"},{"location":"modules/metrics/#system-metrics","title":"\ud83d\udcca System Metrics","text":""},{"location":"modules/metrics/#cpu-memory-and-disk-monitoring","title":"CPU, Memory, and Disk Monitoring","text":"<pre><code>-- Get current CPU usage\nlocal cpu_usage = metrics.system_cpu()\nlog.info(\"CPU Usage: \" .. string.format(\"%.1f%%\", cpu_usage))\n\n-- Get memory information\nlocal memory_info = metrics.system_memory()\nlog.info(\"Memory: \" .. string.format(\"%.1f%% (%.0f/%.0f MB)\", \n    memory_info.percent, memory_info.used_mb, memory_info.total_mb))\n\n-- Get disk usage\nlocal disk_info = metrics.system_disk(\"/\")\nlog.info(\"Disk: \" .. string.format(\"%.1f%% (%.1f/%.1f GB)\", \n    disk_info.percent, disk_info.used_gb, disk_info.total_gb))\n\n-- Check specific disk path\nlocal var_disk = metrics.system_disk(\"/var\")\nlog.info(\"Var disk usage: \" .. string.format(\"%.1f%%\", var_disk.percent))\n</code></pre>"},{"location":"modules/metrics/#runtime-information","title":"Runtime Information","text":"<pre><code>-- Get Go runtime metrics\nlocal runtime = metrics.runtime_info()\nlog.info(\"Runtime Information:\")\nlog.info(\"  Goroutines: \" .. runtime.goroutines)\nlog.info(\"  CPU cores: \" .. runtime.num_cpu)\nlog.info(\"  Heap allocated: \" .. string.format(\"%.1f MB\", runtime.heap_alloc_mb))\nlog.info(\"  Heap system: \" .. string.format(\"%.1f MB\", runtime.heap_sys_mb))\nlog.info(\"  GC cycles: \" .. runtime.num_gc)\nlog.info(\"  Go version: \" .. runtime.go_version)\n</code></pre>"},{"location":"modules/metrics/#custom-metrics","title":"\ud83d\udcc8 Custom Metrics","text":""},{"location":"modules/metrics/#gauge-metrics-current-values","title":"Gauge Metrics (Current Values)","text":"<pre><code>-- Set simple gauge values\nmetrics.gauge(\"cpu_temperature\", 65.4)\nmetrics.gauge(\"active_connections\", 142)\nmetrics.gauge(\"queue_size\", 23)\n\n-- Set gauge with tags\nmetrics.gauge(\"memory_usage\", memory_percent, {\n    server = \"web-01\",\n    environment = \"production\",\n    region = \"us-east-1\"\n})\n\n-- Update deployment status\nmetrics.gauge(\"deployment_progress\", 75.5, {\n    app = \"frontend\",\n    version = \"v2.1.0\"\n})\n</code></pre>"},{"location":"modules/metrics/#counter-metrics-incremental-values","title":"Counter Metrics (Incremental Values)","text":"<pre><code>-- Increment counters\nlocal total_requests = metrics.counter(\"http_requests_total\", 1)\nlocal error_count = metrics.counter(\"http_errors_total\", 1, {\n    status_code = \"500\",\n    endpoint = \"/api/users\"\n})\n\n-- Bulk increment\nlocal processed = metrics.counter(\"messages_processed\", 50, {\n    queue = \"user_notifications\",\n    priority = \"high\"\n})\n\nlog.info(\"Total requests processed: \" .. total_requests)\n</code></pre>"},{"location":"modules/metrics/#histogram-metrics-value-distributions","title":"Histogram Metrics (Value Distributions)","text":"<pre><code>-- Record response times\nmetrics.histogram(\"response_time_ms\", 245.6, {\n    endpoint = \"/api/users\",\n    method = \"GET\"\n})\n\n-- Record payload sizes\nmetrics.histogram(\"payload_size_bytes\", 1024, {\n    content_type = \"application/json\"\n})\n\n-- Record batch sizes\nmetrics.histogram(\"batch_size\", 150, {\n    operation = \"bulk_insert\",\n    table = \"user_events\"\n})\n</code></pre>"},{"location":"modules/metrics/#timer-metrics-function-execution-time","title":"Timer Metrics (Function Execution Time)","text":"<pre><code>-- Time function execution automatically\nlocal duration = metrics.timer(\"database_query\", function()\n    -- Simulate database query\n    local result = exec.run(\"sleep 0.1\")\n    return result\nend, {\n    query_type = \"select\",\n    table = \"users\"\n})\n\nlog.info(\"Database query took: \" .. string.format(\"%.2f ms\", duration))\n\n-- Time complex operations\nlocal processing_time = metrics.timer(\"data_processing\", function()\n    -- Process large dataset\n    local data = {}\n    for i = 1, 100000 do\n        data[i] = math.sqrt(i) * 2.5\n    end\n    return #data\nend, {\n    operation = \"mathematical_computation\",\n    size = \"large\"\n})\n\nlog.info(\"Data processing completed in: \" .. string.format(\"%.2f ms\", processing_time))\n</code></pre>"},{"location":"modules/metrics/#health-monitoring","title":"\ud83c\udfe5 Health Monitoring","text":""},{"location":"modules/metrics/#automatic-health-status","title":"Automatic Health Status","text":"<pre><code>-- Get comprehensive health status\nlocal health = metrics.health_status()\nlog.info(\"Overall Health Status: \" .. health.overall)\n\n-- Check individual components\nlocal components = {\"cpu\", \"memory\", \"disk\"}\nfor _, component in ipairs(components) do\n    local comp_info = health[component]\n    if comp_info then\n        local status_icon = \"\u2705\"\n        if comp_info.status == \"warning\" then\n            status_icon = \"\u26a0\ufe0f\"\n        elseif comp_info.status == \"critical\" then\n            status_icon = \"\u274c\"\n        end\n\n        log.info(string.format(\"  %s %s: %.1f%% (%s)\", \n            status_icon, component:upper(), comp_info.usage, comp_info.status))\n    end\nend\n</code></pre>"},{"location":"modules/metrics/#custom-health-checks","title":"Custom Health Checks","text":"<pre><code>-- Create health check function\nfunction check_application_health()\n    local health_score = 100\n    local issues = {}\n\n    -- Check database connectivity\n    local db_result = exec.run(\"pg_isready -h localhost -p 5432\")\n    if db_result ~= \"\" then\n        health_score = health_score - 20\n        table.insert(issues, \"Database connection failed\")\n    end\n\n    -- Check disk space\n    local disk = metrics.system_disk(\"/\")\n    if disk.percent &gt; 90 then\n        health_score = health_score - 30\n        table.insert(issues, \"Disk space critical: \" .. string.format(\"%.1f%%\", disk.percent))\n    end\n\n    -- Check memory usage\n    local memory = metrics.system_memory()\n    if memory.percent &gt; 85 then\n        health_score = health_score - 25\n        table.insert(issues, \"Memory usage high: \" .. string.format(\"%.1f%%\", memory.percent))\n    end\n\n    -- Record health score\n    metrics.gauge(\"application_health_score\", health_score)\n\n    if health_score &lt; 70 then\n        metrics.alert(\"application_health\", {\n            level = \"warning\",\n            message = \"Application health degraded: \" .. table.concat(issues, \", \"),\n            score = health_score\n        })\n    end\n\n    return health_score &gt;= 70\nend\n\n-- Use in tasks\nModern DSLs = {\n    health_monitoring = {\n        tasks = {\n            health_check = {\n                command = function()\n                    local healthy = check_application_health()\n                    return healthy, healthy and \"System healthy\" or \"System health issues detected\"\n                end\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"modules/metrics/#alerting-system","title":"\ud83d\udea8 Alerting System","text":""},{"location":"modules/metrics/#creating-alerts","title":"Creating Alerts","text":"<pre><code>-- Simple threshold alert\nlocal cpu = metrics.system_cpu()\nif cpu &gt; 80 then\n    metrics.alert(\"high_cpu_usage\", {\n        level = \"warning\",\n        message = \"CPU usage is high: \" .. string.format(\"%.1f%%\", cpu),\n        threshold = 80,\n        value = cpu,\n        severity = \"medium\"\n    })\nend\n\n-- Complex alert with multiple conditions\nlocal memory = metrics.system_memory()\nlocal disk = metrics.system_disk()\n\nif memory.percent &gt; 90 and disk.percent &gt; 85 then\n    metrics.alert(\"resource_exhaustion\", {\n        level = \"critical\",\n        message = string.format(\"Critical resource usage - Memory: %.1f%%, Disk: %.1f%%\", \n            memory.percent, disk.percent),\n        memory_usage = memory.percent,\n        disk_usage = disk.percent,\n        recommended_action = \"Scale up resources immediately\"\n    })\nend\n\n-- Application-specific alerts\nlocal queue_size = state.get(\"task_queue_size\", 0)\nif queue_size &gt; 1000 then\n    metrics.alert(\"queue_backlog\", {\n        level = \"warning\", \n        message = \"Task queue backlog detected: \" .. queue_size .. \" items\",\n        queue_size = queue_size,\n        estimated_processing_time = queue_size * 2 .. \" seconds\"\n    })\nend\n</code></pre>"},{"location":"modules/metrics/#metrics-management","title":"\ud83d\udd0d Metrics Management","text":""},{"location":"modules/metrics/#retrieving-custom-metrics","title":"Retrieving Custom Metrics","text":"<pre><code>-- Get specific custom metric\nlocal cpu_metric = metrics.get_custom(\"cpu_temperature\")\nif cpu_metric then\n    log.info(\"CPU Temperature metric: \" .. data.to_json(cpu_metric))\nend\n\n-- List all custom metrics\nlocal all_metrics = metrics.list_custom()\nlog.info(\"Total custom metrics: \" .. #all_metrics)\nfor i, metric_name in ipairs(all_metrics) do\n    log.info(\"  \" .. i .. \". \" .. metric_name)\nend\n</code></pre>"},{"location":"modules/metrics/#performance-monitoring-example","title":"Performance Monitoring Example","text":"<pre><code>Modern DSLs = {\n    performance_monitoring = {\n        tasks = {\n            monitor_api_performance = {\n                command = function()\n                    -- Start monitoring session\n                    log.info(\"Starting API performance monitoring...\")\n\n                    -- Simulate API calls and measure performance\n                    for i = 1, 10 do\n                        local api_time = metrics.timer(\"api_call_\" .. i, function()\n                            -- Simulate API call\n                            exec.run(\"curl -s -o /dev/null -w '%{time_total}' https://api.example.com/health\")\n                        end, {\n                            endpoint = \"health\",\n                            call_number = tostring(i)\n                        })\n\n                        -- Record response time\n                        metrics.histogram(\"api_response_time\", api_time, {\n                            endpoint = \"health\"\n                        })\n\n                        -- Check if response time is acceptable\n                        if api_time &gt; 1000 then -- 1 second\n                            metrics.counter(\"slow_api_calls\", 1, {\n                                endpoint = \"health\"\n                            })\n\n                            metrics.alert(\"slow_api_response\", {\n                                level = \"warning\",\n                                message = string.format(\"Slow API response: %.2f ms\", api_time),\n                                response_time = api_time,\n                                threshold = 1000\n                            })\n                        end\n\n                        -- Brief delay between calls\n                        exec.run(\"sleep 0.1\")\n                    end\n\n                    -- Get summary statistics\n                    local system_health = metrics.health_status()\n                    log.info(\"System health after API tests: \" .. system_health.overall)\n\n                    return true, \"API performance monitoring completed\"\n                end\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"modules/metrics/#http-endpoints","title":"\ud83c\udf10 HTTP Endpoints","text":"<p>The metrics module automatically exposes HTTP endpoints for external monitoring systems:</p>"},{"location":"modules/metrics/#prometheus-format-metrics","title":"Prometheus Format (<code>/metrics</code>)","text":"<pre><code># Access Prometheus-compatible metrics\ncurl http://agent:8080/metrics\n\n# Example output:\n# sloth_agent_cpu_usage_percent 15.4\n# sloth_agent_memory_usage_mb 2048.5\n# sloth_agent_disk_usage_percent 67.2\n# sloth_agent_tasks_total 142\n</code></pre>"},{"location":"modules/metrics/#json-format-metricsjson","title":"JSON Format (<code>/metrics/json</code>)","text":"<pre><code># Get complete metrics in JSON format\ncurl http://agent:8080/metrics/json\n\n# Example response:\n{\n  \"agent_name\": \"myagent1\",\n  \"timestamp\": \"2024-01-15T10:30:00Z\",\n  \"system\": {\n    \"cpu_usage_percent\": 15.4,\n    \"memory_usage_mb\": 2048.5,\n    \"disk_usage_percent\": 67.2\n  },\n  \"runtime\": {\n    \"num_goroutines\": 25,\n    \"heap_alloc_mb\": 45.2\n  },\n  \"custom\": {\n    \"api_response_time\": {...},\n    \"deployment_progress\": 85.5\n  }\n}\n</code></pre>"},{"location":"modules/metrics/#health-check-health","title":"Health Check (<code>/health</code>)","text":"<pre><code># Check agent health status\ncurl http://agent:8080/health\n\n# Example response:\n{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2024-01-15T10:30:00Z\",\n  \"checks\": {\n    \"cpu\": {\"usage\": 15.4, \"status\": \"healthy\"},\n    \"memory\": {\"usage\": 45.8, \"status\": \"healthy\"},\n    \"disk\": {\"usage\": 67.2, \"status\": \"healthy\"}\n  }\n}\n</code></pre>"},{"location":"modules/metrics/#api-reference","title":"\ud83d\udccb API Reference","text":""},{"location":"modules/metrics/#system-metrics_1","title":"System Metrics","text":"Function Parameters Return Description <code>metrics.system_cpu()</code> - usage: number Get current CPU usage percentage <code>metrics.system_memory()</code> - info: table Get memory usage information <code>metrics.system_disk(path?)</code> path?: string info: table Get disk usage for path (default: \"/\") <code>metrics.runtime_info()</code> - info: table Get Go runtime information"},{"location":"modules/metrics/#custom-metrics_1","title":"Custom Metrics","text":"Function Parameters Return Description <code>metrics.gauge(name, value, tags?)</code> name: string, value: number, tags?: table success: boolean Set gauge metric <code>metrics.counter(name, increment?, tags?)</code> name: string, increment?: number, tags?: table new_value: number Increment counter <code>metrics.histogram(name, value, tags?)</code> name: string, value: number, tags?: table success: boolean Record histogram value <code>metrics.timer(name, function, tags?)</code> name: string, func: function, tags?: table duration: number Time function execution"},{"location":"modules/metrics/#health-and-monitoring","title":"Health and Monitoring","text":"Function Parameters Return Description <code>metrics.health_status()</code> - status: table Get comprehensive health status <code>metrics.alert(name, data)</code> name: string, data: table success: boolean Create alert"},{"location":"modules/metrics/#utilities","title":"Utilities","text":"Function Parameters Return Description <code>metrics.get_custom(name)</code> name: string metric: table | nil Get custom metric by name <code>metrics.list_custom()</code> - names: table List all custom metric names"},{"location":"modules/metrics/#best-practices","title":"\ud83c\udfaf Best Practices","text":"<ol> <li>Use appropriate metric types - gauges for current values, counters for totals, histograms for distributions</li> <li>Add meaningful tags to categorize and filter metrics</li> <li>Set reasonable alert thresholds to avoid alert fatigue</li> <li>Monitor performance impact of extensive metrics collection</li> <li>Use timers for performance-critical operations to identify bottlenecks</li> <li>Implement health checks for all critical system components</li> <li>Export metrics to external systems like Prometheus for long-term storage</li> </ol> <p>The Metrics &amp; Monitoring module provides comprehensive observability for your distributed sloth-runner environment! \ud83d\udcca\ud83d\ude80</p>"},{"location":"modules/net/","title":"Net Module","text":"<p>The <code>net</code> module provides functions for making HTTP requests and downloading files, allowing your tasks to interact with web services and remote resources.</p>"},{"location":"modules/net/#nethttp_geturl","title":"<code>net.http_get(url)</code>","text":"<p>Performs an HTTP GET request to the specified URL.</p> <ul> <li>Parameters:<ul> <li><code>url</code> (string): The URL to send the GET request to.</li> </ul> </li> <li>Returns:<ul> <li><code>body</code> (string): The response body as a string.</li> <li><code>status_code</code> (number): The HTTP status code of the response.</li> <li><code>headers</code> (table): A table containing the response headers.</li> <li><code>error</code> (string): An error message if the request failed.</li> </ul> </li> </ul>"},{"location":"modules/net/#nethttp_posturl-body-headers","title":"<code>net.http_post(url, body, [headers])</code>","text":"<p>Performs an HTTP POST request to the specified URL.</p> <ul> <li>Parameters:<ul> <li><code>url</code> (string): The URL to send the POST request to.</li> <li><code>body</code> (string): The request body to send.</li> <li><code>headers</code> (table, optional): A table of request headers to set.</li> </ul> </li> <li>Returns:<ul> <li><code>body</code> (string): The response body as a string.</li> <li><code>status_code</code> (number): The HTTP status code of the response.</li> <li><code>headers</code> (table): A table containing the response headers.</li> <li><code>error</code> (string): An error message if the request failed.</li> </ul> </li> </ul>"},{"location":"modules/net/#netdownloadurl-destination_path","title":"<code>net.download(url, destination_path)</code>","text":"<p>Downloads a file from a URL and saves it to a local path.</p> <ul> <li>Parameters:<ul> <li><code>url</code> (string): The URL of the file to download.</li> <li><code>destination_path</code> (string): The local file path to save the downloaded content.</li> </ul> </li> <li>Returns:<ul> <li><code>error</code>: An error object if the download fails.</li> </ul> </li> </ul>"},{"location":"modules/net/#example","title":"Example","text":"<pre><code>command = function()\n  local net = require(\"net\")\n\n  -- Example GET request\n  log.info(\"Performing GET request to httpbin.org...\")\n  local body, status, headers, err = net.http_get(\"https://httpbin.org/get\")\n  if err then\n    log.error(\"GET request failed: \" .. err)\n    return false, \"GET request failed\"\n  end\n  log.info(\"GET request successful! Status: \" .. status)\n  -- print(\"Response Body: \" .. body)\n\n  -- Example POST request\n  log.info(\"Performing POST request to httpbin.org...\")\n  local post_body = '{\"name\": \"sloth-runner\", \"awesome\": true}'\n  local post_headers = { [\"Content-Type\"] = \"application/json\" }\n  body, status, headers, err = net.http_post(\"https://httpbin.org/post\", post_body, post_headers)\n  if err then\n    log.error(\"POST request failed: \" .. err)\n    return false, \"POST request failed\"\n  end\n  log.info(\"POST request successful! Status: \" .. status)\n  -- print(\"Response Body: \" .. body)\n\n  -- Example Download\n  local download_path = \"/tmp/sloth-runner-logo.svg\"\n  log.info(\"Downloading file to \" .. download_path)\n  local err = net.download(\"https://raw.githubusercontent.com/chalkan3-sloth/sloth-runner/master/assets/sloth-runner-logo.svg\", download_path)\n  if err then\n    log.error(\"Download failed: \" .. err)\n    return false, \"Download failed\"\n  end\n  log.info(\"File downloaded successfully.\")\n  fs.rm(download_path) -- Clean up\n\n  return true, \"Net module operations successful.\"\nend\n</code></pre>"},{"location":"modules/notification/","title":"Notification Module","text":"<p>Send notifications to various channels (Slack, Discord, Email, etc).</p>"},{"location":"modules/notification/#overview","title":"Overview","text":"<p>The notification module provides a unified interface for sending alerts and notifications to different platforms.</p>"},{"location":"modules/notification/#functions","title":"Functions","text":""},{"location":"modules/notification/#notificationslackwebhook-message","title":"<code>notification.slack(webhook, message)</code>","text":"<p>Send a message to Slack.</p> <pre><code>notification.slack(\n  \"https://hooks.slack.com/services/YOUR/WEBHOOK/URL\",\n  \"Deployment completed successfully!\"\n)\n</code></pre>"},{"location":"modules/notification/#notificationdiscordwebhook-message","title":"<code>notification.discord(webhook, message)</code>","text":"<p>Send a message to Discord.</p> <pre><code>notification.discord(\n  \"https://discord.com/api/webhooks/YOUR/WEBHOOK\",\n  \"Build failed!\"\n)\n</code></pre>"},{"location":"modules/notification/#notificationemailconfig","title":"<code>notification.email(config)</code>","text":"<p>Send an email notification.</p> <pre><code>notification.email({\n  to = \"team@example.com\",\n  subject = \"Deployment Alert\",\n  body = \"Deployment to production completed\"\n})\n</code></pre>"},{"location":"modules/notification/#see-also","title":"See Also","text":"<ul> <li>Notifications Documentation</li> <li>Alert Configuration</li> </ul>"},{"location":"modules/notifications/","title":"Notifications Module","text":"<p>The <code>notifications</code> module provides a simple way to send messages to various notification services from your pipelines. This is particularly useful for reporting the success or failure of a CI/CD workflow.</p> <p>Currently, the following services are supported: - Slack - ntfy</p>"},{"location":"modules/notifications/#configuration","title":"Configuration","text":"<p>Before using the module, you need to add the required credentials or URLs to your <code>configs/values.yaml</code> file. The module will read these values at runtime.</p> <pre><code># configs/values.yaml\n\nnotifications:\n  slack:\n    # Your Slack Incoming Webhook URL\n    webhook_url: \"https://hooks.slack.com/services/...\"\n  ntfy:\n    # The ntfy server to use. Can be the public one or self-hosted.\n    server: \"https://ntfy.sh\"\n    # The topic to publish the notification to.\n    topic: \"your-sloth-runner-topic\"\n</code></pre>"},{"location":"modules/notifications/#slack","title":"Slack","text":""},{"location":"modules/notifications/#notificationsslacksendparams","title":"<code>notifications.slack.send(params)</code>","text":"<p>Sends a message to a Slack channel via an Incoming Webhook.</p> <p>Parameters:</p> <ul> <li><code>params</code> (table): A table containing the following fields:<ul> <li><code>webhook_url</code> (string): Required. The Slack Incoming Webhook URL. It's recommended to get this from the <code>values</code> module.</li> <li><code>message</code> (string): Required. The main text of the message.</li> <li><code>pipeline</code> (string): Optional. The name of the pipeline, which will be displayed in the message attachment for context.</li> <li><code>error_details</code> (string): Optional. Any error details to include in the message attachment. This is useful for failure notifications.</li> </ul> </li> </ul> <p>Returns:</p> <ul> <li><code>true</code> on success.</li> <li><code>false, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>local values = require(\"values\")\n\nlocal slack_webhook = values.get(\"notifications.slack.webhook_url\")\n\nif slack_webhook and slack_webhook ~= \"\" then\n  -- On success\n  notifications.slack.send({\n    webhook_url = slack_webhook,\n    message = \"\u2705 Pipeline executed successfully!\",\n    pipeline = \"my-awesome-pipeline\"\n  })\n\n  -- On failure\n  notifications.slack.send({\n    webhook_url = slack_webhook,\n    message = \"\u274c Pipeline execution failed!\",\n    pipeline = \"my-awesome-pipeline\",\n    error_details = \"Could not connect to database.\"\n  })\nend\n</code></pre>"},{"location":"modules/notifications/#ntfy","title":"ntfy","text":""},{"location":"modules/notifications/#notificationsntfysendparams","title":"<code>notifications.ntfy.send(params)</code>","text":"<p>Sends a message to an ntfy.sh topic.</p> <p>Parameters:</p> <ul> <li><code>params</code> (table): A table containing the following fields:<ul> <li><code>server</code> (string): Required. The ntfy server URL.</li> <li><code>topic</code> (string): Required. The topic to send the message to.</li> <li><code>message</code> (string): Required. The body of the notification.</li> <li><code>title</code> (string): Optional. The title of the notification.</li> <li><code>priority</code> (string): Optional. Notification priority (e.g., <code>high</code>, <code>default</code>, <code>low</code>).</li> <li><code>tags</code> (table): Optional. A list of tags (emojis) to add to the notification.</li> </ul> </li> </ul> <p>Returns:</p> <ul> <li><code>true</code> on success.</li> <li><code>false, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>local values = require(\"values\")\n\nlocal ntfy_server = values.get(\"notifications.ntfy.server\")\nlocal ntfy_topic = values.get(\"notifications.ntfy.topic\")\n\nif ntfy_topic and ntfy_topic ~= \"\" then\n  -- On success\n  notifications.ntfy.send({\n    server = ntfy_server,\n    topic = ntfy_topic,\n    title = \"Pipeline Success\",\n    message = \"The pipeline finished without errors.\",\n    priority = \"default\",\n    tags = {\"tada\"}\n  })\n\n  -- On failure\n  notifications.ntfy.send({\n    server = ntfy_server,\n    topic = ntfy_topic,\n    title = \"Pipeline Failed!\",\n    message = \"The pipeline failed with an error.\",\n    priority = \"high\",\n    tags = {\"skull\", \"warning\"}\n  })\nend\n</code></pre>"},{"location":"modules/pkg/","title":"\ud83d\udce6 Package Manager Module","text":"<p>The <code>pkg</code> module provides comprehensive cross-platform package management functionality. It automatically detects the system's package manager and provides a unified interface for managing packages.</p>"},{"location":"modules/pkg/#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"modules/pkg/#modern-syntax-recommended","title":"Modern Syntax (Recommended)","text":"<pre><code>-- pkg is available globally, no require needed!\ntask(\"install_tools\")\n  :command(function()\n    pkg.update()\n    pkg.install({\"git\", \"curl\", \"vim\"})\n    return true\n  end)\n  :build()\n</code></pre>"},{"location":"modules/pkg/#classic-syntax-still-supported","title":"Classic Syntax (Still Supported)","text":"<pre><code>local pkg = require(\"pkg\")\n\ntask(\"install_tools\")\n  :command(function()\n    pkg.update()\n    pkg.install({\"git\", \"curl\", \"vim\"})\n    return true\n  end)\n  :build()\n</code></pre> <p>\ud83d\udca1 Tip: Use the modern syntax! All built-in modules (<code>pkg</code>, <code>docker</code>, <code>systemd</code>, <code>git</code>, <code>terraform</code>, etc.) are available globally without <code>require()</code>.</p>"},{"location":"modules/pkg/#supported-package-managers","title":"\ud83c\udfaf Supported Package Managers","text":"Package Manager Systems Auto-Detected apt / apt-get Debian, Ubuntu \u2705 yum / dnf RHEL, CentOS, Fedora, Amazon Linux \u2705 pacman Arch Linux, Manjaro \u2705 zypper openSUSE, SLES \u2705 brew macOS (Homebrew) \u2705"},{"location":"modules/pkg/#api-reference","title":"\ud83d\udcda API Reference","text":""},{"location":"modules/pkg/#installation-removal","title":"Installation &amp; Removal","text":""},{"location":"modules/pkg/#pkginstallpackages","title":"<code>pkg.install(packages)</code>","text":"<p>Install one or more packages.</p> <p>Parameters: - <code>packages</code>: <code>string</code> (single) or <code>table</code> (multiple)</p> <p>Returns: - <code>success</code> (boolean) - <code>output</code> (string)</p> <p>Examples:</p> <pre><code>-- Single package\nlocal ok, msg = pkg.install(\"nginx\")\n\n-- Multiple packages\nlocal ok, msg = pkg.install({\"git\", \"curl\", \"wget\", \"vim\"})\n\n-- In Modern DSL task\ntask(\"install_nginx\")\n  :command(function()\n    log.info(\"Installing nginx...\")\n    local success, output = pkg.install(\"nginx\")\n    if success then\n      log.success(\"\u2705 Nginx installed!\")\n    else\n      log.error(\"\u274c Failed: \" .. output)\n    end\n    return success\n  end)\n  :build()\n</code></pre>"},{"location":"modules/pkg/#pkgremovepackages","title":"<code>pkg.remove(packages)</code>","text":"<p>Remove one or more packages.</p> <p>Parameters: - <code>packages</code>: <code>string</code> (single) or <code>table</code> (multiple)</p> <p>Returns: - <code>success</code> (boolean) - <code>output</code> (string)</p> <p>Examples:</p> <pre><code>-- Remove single package\npkg.remove(\"apache2\")\n\n-- Remove multiple packages\npkg.remove({\"apache2\", \"php-fpm\"})\n</code></pre>"},{"location":"modules/pkg/#package-information","title":"Package Information","text":""},{"location":"modules/pkg/#pkgis_installedpackage","title":"<code>pkg.is_installed(package)</code>","text":"<p>Check if a package is installed.</p> <p>Parameters: - <code>package</code>: <code>string</code> - Package name</p> <p>Returns: - <code>installed</code> (boolean)</p> <p>Example:</p> <pre><code>if pkg.is_installed(\"nginx\") then\n  log.info(\"\u2705 Nginx is installed\")\nelse\n  log.warn(\"\u26a0\ufe0f  Nginx not found, installing...\")\n  pkg.install(\"nginx\")\nend\n</code></pre>"},{"location":"modules/pkg/#pkginfopackage","title":"<code>pkg.info(package)</code>","text":"<p>Get detailed information about a package.</p> <p>Parameters: - <code>package</code>: <code>string</code> - Package name</p> <p>Returns: - <code>success</code> (boolean) - <code>info</code> (string) - Package information</p> <p>Example:</p> <pre><code>local ok, info = pkg.info(\"nginx\")\nif ok then\n  print(info)  -- Shows version, description, dependencies, etc.\nend\n</code></pre>"},{"location":"modules/pkg/#pkgversionpackage","title":"<code>pkg.version(package)</code>","text":"<p>Get the installed version of a package.</p> <p>Parameters: - <code>package</code>: <code>string</code> - Package name</p> <p>Returns: - <code>success</code> (boolean) - <code>version</code> (string)</p> <p>Example:</p> <pre><code>local ok, ver = pkg.version(\"nginx\")\nif ok then\n  log.info(\"Nginx version: \" .. ver)\nend\n</code></pre>"},{"location":"modules/pkg/#pkgdepspackage","title":"<code>pkg.deps(package)</code>","text":"<p>List package dependencies.</p> <p>Parameters: - <code>package</code>: <code>string</code> - Package name</p> <p>Returns: - <code>success</code> (boolean) - <code>dependencies</code> (table or string)</p> <p>Example:</p> <pre><code>local ok, deps = pkg.deps(\"nginx\")\nif ok and type(deps) == \"table\" then\n  for _, dep in ipairs(deps) do\n    print(\"  - \" .. dep)\n  end\nend\n</code></pre>"},{"location":"modules/pkg/#repository-management","title":"Repository Management","text":""},{"location":"modules/pkg/#pkgupdate","title":"<code>pkg.update()</code>","text":"<p>Update the package cache/repository list.</p> <p>Returns: - <code>success</code> (boolean) - <code>output</code> (string)</p> <p>Example:</p> <pre><code>task(\"update_cache\")\n  :command(function()\n    log.info(\"Updating package cache...\")\n    local ok, msg = pkg.update()\n    return ok\n  end)\n  :timeout(\"2m\")\n  :build()\n</code></pre>"},{"location":"modules/pkg/#pkgupgrade","title":"<code>pkg.upgrade()</code>","text":"<p>Upgrade all installed packages to their latest versions.</p> <p>Returns: - <code>success</code> (boolean) - <code>output</code> (string)</p> <p>Example:</p> <pre><code>task(\"upgrade_system\")\n  :command(function()\n    pkg.update()\n    local ok, msg = pkg.upgrade()\n    if ok then\n      log.success(\"\u2705 System upgraded!\")\n    end\n    return ok\n  end)\n  :timeout(\"30m\")\n  :build()\n</code></pre>"},{"location":"modules/pkg/#pkgsearchquery","title":"<code>pkg.search(query)</code>","text":"<p>Search for packages in repositories.</p> <p>Parameters: - <code>query</code>: <code>string</code> - Search term</p> <p>Returns: - <code>success</code> (boolean) - <code>results</code> (string) - Search results</p> <p>Example:</p> <pre><code>local ok, results = pkg.search(\"python3\")\nif ok then\n  print(results)\nend\n</code></pre>"},{"location":"modules/pkg/#maintenance","title":"Maintenance","text":""},{"location":"modules/pkg/#pkgclean","title":"<code>pkg.clean()</code>","text":"<p>Clean the package manager cache.</p> <p>Returns: - <code>success</code> (boolean) - <code>output</code> (string)</p> <p>Example:</p> <pre><code>pkg.clean()  -- Free up disk space\n</code></pre>"},{"location":"modules/pkg/#pkgautoremove","title":"<code>pkg.autoremove()</code>","text":"<p>Remove packages that were automatically installed as dependencies but are no longer needed.</p> <p>Returns: - <code>success</code> (boolean) - <code>output</code> (string)</p> <p>Example:</p> <pre><code>task(\"cleanup\")\n  :command(function()\n    pkg.autoremove()\n    pkg.clean()\n    return true\n  end)\n  :build()\n</code></pre>"},{"location":"modules/pkg/#pkglist","title":"<code>pkg.list()</code>","text":"<p>List all installed packages.</p> <p>Returns: - <code>success</code> (boolean) - <code>packages</code> (table or string) - List of installed packages</p> <p>Example:</p> <pre><code>local ok, packages = pkg.list()\nif ok and type(packages) == \"table\" then\n  log.info(\"Installed packages: \" .. #packages)\nend\n</code></pre>"},{"location":"modules/pkg/#advanced-functions","title":"Advanced Functions","text":""},{"location":"modules/pkg/#pkgget_manager","title":"<code>pkg.get_manager()</code>","text":"<p>Get the detected package manager name.</p> <p>Returns: - <code>manager</code> (string) - e.g., \"apt\", \"yum\", \"pacman\", \"brew\"</p> <p>Example:</p> <pre><code>local pm = pkg.get_manager()\nlog.info(\"Using package manager: \" .. pm)\n</code></pre>"},{"location":"modules/pkg/#pkgwhichexecutable","title":"<code>pkg.which(executable)</code>","text":"<p>Find the full path of an executable.</p> <p>Parameters: - <code>executable</code>: <code>string</code> - Command name</p> <p>Returns: - <code>success</code> (boolean) - <code>path</code> (string) - Full path or error message</p> <p>Example:</p> <pre><code>local ok, path = pkg.which(\"nginx\")\nif ok then\n  log.info(\"Nginx binary: \" .. path)\nend\n</code></pre>"},{"location":"modules/pkg/#pkginstall_localfile","title":"<code>pkg.install_local(file)</code>","text":"<p>Install a package from a local file.</p> <p>Parameters: - <code>file</code>: <code>string</code> - Path to package file (.deb, .rpm, etc.)</p> <p>Returns: - <code>success</code> (boolean) - <code>output</code> (string)</p> <p>Example:</p> <pre><code>pkg.install_local(\"/tmp/my-app_1.0.0_amd64.deb\")\n</code></pre>"},{"location":"modules/pkg/#complete-examples","title":"\ud83c\udfaf Complete Examples","text":""},{"location":"modules/pkg/#development-environment-setup","title":"Development Environment Setup","text":"<pre><code>task(\"setup_dev_env\")\n  :description(\"Install development tools\")\n  :command(function()\n    log.info(\"\ud83d\ude80 Setting up development environment...\")\n\n    -- Update cache\n    log.info(\"\ud83d\udce6 Updating package cache...\")\n    pkg.update()\n\n    -- Install dev tools\n    local tools = {\n      \"git\",\n      \"curl\",\n      \"wget\",\n      \"vim\",\n      \"build-essential\",  -- apt\n      \"htop\",\n      \"jq\"\n    }\n\n    log.info(\"\ud83d\udee0\ufe0f  Installing tools...\")\n    local ok, msg = pkg.install(tools)\n\n    if ok then\n      log.success(\"\u2705 All tools installed!\")\n\n      -- Verify installations\n      for _, tool in ipairs(tools) do\n        if pkg.is_installed(tool) then\n          local _, ver = pkg.version(tool)\n          log.info(\"  \u2713 \" .. tool .. \" \" .. (ver or \"\"))\n        end\n      end\n    else\n      log.error(\"\u274c Installation failed: \" .. msg)\n      return false\n    end\n\n    return true\n  end)\n  :timeout(\"10m\")\n  :build()\n</code></pre>"},{"location":"modules/pkg/#conditional-package-management","title":"Conditional Package Management","text":"<pre><code>task(\"ensure_nginx\")\n  :description(\"Ensure Nginx is installed and running\")\n  :command(function()\n    -- Check if already installed\n    if pkg.is_installed(\"nginx\") then\n      log.info(\"\u2705 Nginx already installed\")\n      local _, ver = pkg.version(\"nginx\")\n      log.info(\"   Version: \" .. ver)\n    else\n      log.info(\"Installing Nginx...\")\n      local ok, msg = pkg.install(\"nginx\")\n      if not ok then\n        log.error(\"Failed: \" .. msg)\n        return false\n      end\n    end\n\n    -- Start service (assuming systemd)\n    local systemd = require(\"systemd\")\n    systemd.enable(\"nginx\")\n    systemd.start(\"nginx\")\n\n    return true\n  end)\n  :build()\n</code></pre>"},{"location":"modules/pkg/#multi-package-workflow","title":"Multi-Package Workflow","text":"<pre><code>task(\"update\")\n  :command(function()\n    return pkg.update()\n  end)\n  :build()\n\ntask(\"install_web_stack\")\n  :depends_on(\"update\")\n  :command(function()\n    return pkg.install({\"nginx\", \"php-fpm\", \"mysql-server\"})\n  end)\n  :build()\n\ntask(\"cleanup\")\n  :depends_on(\"install_web_stack\")\n  :command(function()\n    pkg.autoremove()\n    pkg.clean()\n    return true\n  end)\n  :build()\n</code></pre>"},{"location":"modules/pkg/#cross-platform-package-management","title":"Cross-Platform Package Management","text":"<pre><code>task(\"install_docker\")\n  :command(function()\n    local pm = pkg.get_manager()\n    log.info(\"Package manager: \" .. pm)\n\n    pkg.update()\n\n    if pm == \"apt\" then\n      pkg.install({\"docker.io\", \"docker-compose\"})\n    elseif pm == \"yum\" or pm == \"dnf\" then\n      pkg.install({\"docker\", \"docker-compose\"})\n    elseif pm == \"pacman\" then\n      pkg.install({\"docker\", \"docker-compose\"})\n    elseif pm == \"brew\" then\n      pkg.install(\"docker\")\n    end\n\n    return true\n  end)\n  :build()\n</code></pre>"},{"location":"modules/pkg/#error-handling","title":"\ud83d\udd0d Error Handling","text":"<pre><code>task(\"safe_install\")\n  :command(function()\n    local ok, msg = pkg.install(\"nginx\")\n\n    if not ok then\n      log.error(\"Installation failed: \" .. msg)\n\n      -- Try alternative\n      log.info(\"Trying alternative package...\")\n      ok, msg = pkg.install(\"nginx-full\")\n    end\n\n    return ok, msg\n  end)\n  :on_error(function(err)\n    log.error(\"Task failed: \" .. err)\n    -- Cleanup or rollback here\n  end)\n  :retry(3)  -- Retry up to 3 times\n  :build()\n</code></pre>"},{"location":"modules/pkg/#best-practices","title":"\ud83d\udca1 Best Practices","text":""},{"location":"modules/pkg/#1-always-update-before-installing","title":"1. Always Update Before Installing","text":"<pre><code>-- \u2705 Good\npkg.update()\npkg.install(\"package\")\n\n-- \u274c Bad\npkg.install(\"package\")  -- May get outdated version\n</code></pre>"},{"location":"modules/pkg/#2-handle-installation-failures","title":"2. Handle Installation Failures","text":"<pre><code>-- \u2705 Good\nlocal ok, msg = pkg.install(\"nginx\")\nif not ok then\n  log.error(msg)\n  return false\nend\n\n-- \u274c Bad\npkg.install(\"nginx\")  -- Ignores failures\n</code></pre>"},{"location":"modules/pkg/#3-check-before-installing","title":"3. Check Before Installing","text":"<pre><code>-- \u2705 Good\nif not pkg.is_installed(\"nginx\") then\n  pkg.install(\"nginx\")\nend\n\n-- \u274c Bad (slower, may fail if already installed)\npkg.install(\"nginx\")\n</code></pre>"},{"location":"modules/pkg/#4-use-timeouts-for-long-operations","title":"4. Use Timeouts for Long Operations","text":"<pre><code>task(\"upgrade_all\")\n  :command(function()\n    return pkg.upgrade()\n  end)\n  :timeout(\"30m\")  -- \u2705 Prevent hanging\n  :build()\n</code></pre>"},{"location":"modules/pkg/#troubleshooting","title":"\ud83d\udc1b Troubleshooting","text":""},{"location":"modules/pkg/#permission-denied","title":"Permission Denied","text":"<p>Most package operations require root:</p> <pre><code># Run with sudo\nsudo sloth-runner run -f workflow.sloth\n</code></pre>"},{"location":"modules/pkg/#package-not-found","title":"Package Not Found","text":"<pre><code>-- Search first\nlocal ok, results = pkg.search(\"package-name\")\nprint(results)\n</code></pre>"},{"location":"modules/pkg/#lock-file-errors","title":"Lock File Errors","text":"<pre><code>-- Wait and retry\ntask(\"install\")\n  :command(function()\n    return pkg.install(\"package\")\n  end)\n  :retry(3)\n  :retry_delay(\"30s\")\n  :build()\n</code></pre>"},{"location":"modules/pkg/#related-modules","title":"\ud83d\udd17 Related Modules","text":"<ul> <li>systemd - Service management</li> <li>docker - Container management</li> <li>terraform - Infrastructure as Code</li> </ul>"},{"location":"modules/pkg/#see-also","title":"\ud83d\udcd6 See Also","text":"<ul> <li>Getting Started</li> <li>Modern DSL</li> <li>Examples Repository</li> </ul> <p>Package management made simple across all platforms! \ud83d\udce6\u2728     <pre><code>local pkg = require(\"pkg\")\n\nlocal install_tools = task(\"install_tools\")\n    :description(\"Install development tools\")\n    :command(function(this, params)\n        log.info(\"Installing tools...\")\n\n        -- Install multiple packages\n        local tools = {\"git\", \"curl\", \"wget\", \"vim\"}\n        local success, output = pkg.install(tools)\n\n        if success then\n            log.info(\"\u2705 Tools installed successfully!\")\n            return true, \"Installed\"\n        else\n            log.error(\"\u274c Failed: \" .. output)\n            return false, \"Failed\"\n        end\n    end)\n    :timeout(\"300s\")\n    :build()\n\nworkflow.define(\"setup\")\n    :tasks({ install_tools })\n</code></pre></p> With delegate_to <pre><code>local pkg = require(\"pkg\")\n\nlocal install_on_agent = task(\"install_on_agent\")\n    :description(\"Install packages on remote agent\")\n    :command(function(this, params)\n        log.info(\"Installing on remote agent...\")\n\n        local success, output = pkg.install({\"htop\", \"ncdu\"})\n\n        if success then\n            log.info(\"\u2705 Installed on agent!\")\n            return true, \"OK\"\n        else\n            return false, \"Failed\"\n        end\n    end)\n    :delegate_to(\"production-server\")\n    :timeout(\"300s\")\n    :build()\n\nworkflow.define(\"remote_install\")\n    :tasks({ install_on_agent })\n</code></pre>"},{"location":"modules/pkg/#pkgremovepackages_1","title":"<code>pkg.remove(packages)</code>","text":"<p>Removes one or more packages.</p> <p>Parameters: - <code>packages</code>: String or Table</p> <p>Returns: - <code>success</code> (boolean), <code>output</code> (string)</p> <p>Example:</p> <pre><code>local pkg = require(\"pkg\")\n\nlocal cleanup = task(\"cleanup\")\n    :description(\"Remove unnecessary packages\")\n    :command(function(this, params)\n        local packages = {\"package1\", \"package2\"}\n        local success, output = pkg.remove(packages)\n\n        if success then\n            log.info(\"\u2705 Packages removed\")\n            return true, \"Removed\"\n        end\n        return false, \"Failed\"\n    end)\n    :timeout(\"180s\")\n    :build()\n</code></pre>"},{"location":"modules/pkg/#package-information_1","title":"Package Information","text":""},{"location":"modules/pkg/#pkgsearchquery_1","title":"<code>pkg.search(query)</code>","text":"<p>Searches for packages.</p> <p>Example:</p> <pre><code>local pkg = require(\"pkg\")\n\nlocal search_python = task(\"search_python\")\n    :description(\"Search for Python packages\")\n    :command(function(this, params)\n        local success, results = pkg.search(\"python3\")\n\n        if success then\n            log.info(\"Search results:\")\n            local count = 0\n            for line in results:gmatch(\"[^\\r\\n]+\") do\n                if count &lt; 10 then\n                    log.info(\"  \u2022 \" .. line)\n                end\n                count = count + 1\n            end\n            return true, count .. \" results\"\n        end\n        return false, \"Search failed\"\n    end)\n    :timeout(\"60s\")\n    :build()\n</code></pre>"},{"location":"modules/pkg/#pkginfopackage_1","title":"<code>pkg.info(package)</code>","text":"<p>Gets package information.</p> <p>Example:</p> <pre><code>local success, info = pkg.info(\"curl\")\nif success then\n    log.info(\"Package info:\\n\" .. info)\nend\n</code></pre>"},{"location":"modules/pkg/#pkglist_1","title":"<code>pkg.list()</code>","text":"<p>Lists installed packages.</p> <p>Returns: <code>success</code> (boolean), <code>packages</code> (table)</p> <p>Example:</p> <pre><code>local success, packages = pkg.list()\nif success and type(packages) == \"table\" then\n    local count = 0\n    for _ in pairs(packages) do count = count + 1 end\n    log.info(\"\ud83d\udce6 Total: \" .. count .. \" packages\")\nend\n</code></pre>"},{"location":"modules/pkg/#system-maintenance","title":"System Maintenance","text":""},{"location":"modules/pkg/#pkgupdate_1","title":"<code>pkg.update()</code>","text":"<p>Updates package cache.</p> <p>Example:</p> <pre><code>local update_cache = task(\"update_cache\")\n    :description(\"Update package cache\")\n    :command(function(this, params)\n        log.info(\"Updating...\")\n        return pkg.update()\n    end)\n    :timeout(\"120s\")\n    :build()\n</code></pre>"},{"location":"modules/pkg/#pkgupgrade_1","title":"<code>pkg.upgrade()</code>","text":"<p>Upgrades all packages.</p>"},{"location":"modules/pkg/#pkgclean_1","title":"<code>pkg.clean()</code>","text":"<p>Cleans package cache.</p>"},{"location":"modules/pkg/#pkgautoremove_1","title":"<code>pkg.autoremove()</code>","text":"<p>Removes unused dependencies.</p> <p>Example:</p> <pre><code>local maintenance = task(\"maintenance\")\n    :description(\"System maintenance\")\n    :command(function(this, params)\n        -- Update\n        pkg.update()\n\n        -- Upgrade\n        pkg.upgrade()\n\n        -- Clean\n        pkg.clean()\n        pkg.autoremove()\n\n        return true, \"Maintenance complete\"\n    end)\n    :timeout(\"600s\")\n    :build()\n</code></pre>"},{"location":"modules/pkg/#advanced-functions_1","title":"Advanced Functions","text":""},{"location":"modules/pkg/#pkgis_installedpackage_1","title":"<code>pkg.is_installed(package)</code>","text":"<p>Checks if installed.</p> <p>Example:</p> <pre><code>local pkg = require(\"pkg\")\n\nlocal check_requirements = task(\"check_requirements\")\n    :description(\"Check required packages\")\n    :command(function(this, params)\n        local required = {\"git\", \"curl\", \"wget\"}\n        local missing = {}\n\n        for _, pkg_name in ipairs(required) do\n            local installed, _ = pkg.is_installed(pkg_name)\n            if not installed then\n                table.insert(missing, pkg_name)\n            end\n        end\n\n        if #missing &gt; 0 then\n            return false, \"Missing: \" .. table.concat(missing, \", \")\n        end\n\n        return true, \"All OK\"\n    end)\n    :build()\n</code></pre>"},{"location":"modules/pkg/#pkgget_manager_1","title":"<code>pkg.get_manager()</code>","text":"<p>Returns package manager name.</p> <p>Example:</p> <pre><code>local manager, err = pkg.get_manager()\nlog.info(\"Manager: \" .. (manager or \"unknown\"))\n</code></pre>"},{"location":"modules/pkg/#pkgwhichexecutable_1","title":"<code>pkg.which(executable)</code>","text":"<p>Finds executable path.</p> <p>Example:</p> <pre><code>local path, err = pkg.which(\"git\")\nif path then\n    log.info(\"Git at: \" .. path)\nend\n</code></pre>"},{"location":"modules/pkg/#pkgversionpackage_1","title":"<code>pkg.version(package)</code>","text":"<p>Gets package version.</p>"},{"location":"modules/pkg/#pkgdepspackage_1","title":"<code>pkg.deps(package)</code>","text":"<p>Lists dependencies.</p>"},{"location":"modules/pkg/#pkginstall_localfilepath","title":"<code>pkg.install_local(filepath)</code>","text":"<p>Installs from local file (.deb, .rpm).</p>"},{"location":"modules/pkg/#complete-examples_1","title":"\ud83c\udfaf Complete Examples","text":""},{"location":"modules/pkg/#development-environment-setup_1","title":"Development Environment Setup","text":"<pre><code>local pkg = require(\"pkg\")\n\nlocal update = task(\"update\")\n    :command(function() return pkg.update() end)\n    :build()\n\nlocal install_tools = task(\"install_tools\")\n    :command(function()\n        local tools = {\"git\", \"curl\", \"wget\", \"vim\", \"htop\"}\n        return pkg.install(tools)\n    end)\n    :depends_on({\"update\"})\n    :build()\n\nlocal verify = task(\"verify\")\n    :command(function()\n        for _, tool in ipairs({\"git\", \"curl\"}) do\n            if pkg.is_installed(tool) then\n                local path = pkg.which(tool)\n                log.info(\"\u2705 \" .. tool .. \" (\" .. path .. \")\")\n            end\n        end\n        return true, \"OK\"\n    end)\n    :depends_on({\"install_tools\"})\n    :build()\n\nworkflow.define(\"setup_dev\")\n    :tasks({ update, install_tools, verify })\n</code></pre>"},{"location":"modules/pkg/#distributed-management","title":"Distributed Management","text":"<pre><code>local pkg = require(\"pkg\")\n\nlocal update_servers = task(\"update_servers\")\n    :command(function() return pkg.update() end)\n    :delegate_to(\"prod-server-1\")\n    :build()\n\nlocal install_monitoring = task(\"install_monitoring\")\n    :command(function()\n        return pkg.install({\"htop\", \"iotop\", \"nethogs\"})\n    end)\n    :delegate_to(\"prod-server-1\")\n    :depends_on({\"update_servers\"})\n    :build()\n\nworkflow.define(\"setup_monitoring\")\n    :tasks({ update_servers, install_monitoring })\n</code></pre>"},{"location":"modules/pkg/#system-audit","title":"System Audit","text":"<pre><code>local pkg = require(\"pkg\")\n\nlocal audit = task(\"audit\")\n    :command(function()\n        log.info(\"\ud83d\udcca System Audit\")\n        log.info(\"=\".rep(60))\n\n        local manager = pkg.get_manager()\n        log.info(\"Manager: \" .. manager)\n\n        local _, packages = pkg.list()\n        local count = 0\n        for _ in pairs(packages) do count = count + 1 end\n        log.info(\"Packages: \" .. count)\n\n        local critical = {\"openssl\", \"curl\"}\n        for _, p in ipairs(critical) do\n            local installed = pkg.is_installed(p)\n            log.info((installed and \"\u2705\" or \"\u274c\") .. \" \" .. p)\n        end\n\n        return true, \"OK\"\n    end)\n    :build()\n\nworkflow.define(\"audit\")\n    :tasks({ audit })\n</code></pre>"},{"location":"modules/pkg/#best-practices_1","title":"\ud83d\ude80 Best Practices","text":"<ol> <li> <p>Update before installing: <pre><code>pkg.update()\npkg.install(\"package\")\n</code></pre></p> </li> <li> <p>Check before installing: <pre><code>if not pkg.is_installed(\"git\") then\n    pkg.install(\"git\")\nend\n</code></pre></p> </li> <li> <p>Cleanup after operations: <pre><code>pkg.clean()\npkg.autoremove()\n</code></pre></p> </li> <li> <p>Use delegate_to for remote: <pre><code>:delegate_to(\"server-name\")\n</code></pre></p> </li> </ol>"},{"location":"modules/pkg/#platform-notes","title":"\u26a0\ufe0f Platform Notes","text":"<ul> <li>Linux: Requires sudo</li> <li>macOS: Homebrew doesn't need sudo</li> <li>Arch: Uses pacman syntax</li> <li>openSUSE: Uses zypper</li> </ul>"},{"location":"modules/pkg/#see-also_1","title":"\ud83d\udd17 See Also","text":"<ul> <li>exec Module</li> <li>Modern DSL Guide</li> <li>Distributed Agents</li> </ul>"},{"location":"modules/pulumi/","title":"Pulumi Module","text":"<p>The <code>pulumi</code> module provides a fluent API to orchestrate Pulumi stacks, enabling you to manage your Infrastructure as Code (IaC) workflows directly from <code>sloth-runner</code>.</p>"},{"location":"modules/pulumi/#pulumistackparams","title":"<code>pulumi.stack(params)</code>","text":"<p>Creates a Pulumi stack object.</p> <ul> <li>Parameters:<ul> <li><code>params</code> (table):<ul> <li><code>name</code> (string): Required. The full name of the stack (e.g., <code>\"my-org/my-project/dev\"</code>).</li> <li><code>workdir</code> (string): Required. The path to the Pulumi project directory.</li> </ul> </li> </ul> </li> <li>Returns:<ul> <li><code>stack</code> (object): A <code>PulumiStack</code> object.</li> <li><code>error</code>: An error object if the stack cannot be initialized.</li> </ul> </li> </ul>"},{"location":"modules/pulumi/#the-pulumistack-object","title":"The <code>PulumiStack</code> Object","text":"<p>This object represents a specific Pulumi stack and provides methods for interaction.</p>"},{"location":"modules/pulumi/#stackupoptions","title":"<code>stack:up([options])</code>","text":"<p>Creates or updates the stack's resources by running <code>pulumi up</code>.</p> <ul> <li>Parameters:<ul> <li><code>options</code> (table, optional):<ul> <li><code>yes</code> (boolean): If <code>true</code>, passes <code>--yes</code> to approve the update automatically.</li> <li><code>config</code> (table): A dictionary of configuration values to pass to the stack.</li> <li><code>args</code> (table): A list of additional string arguments to pass to the command.</li> </ul> </li> </ul> </li> <li>Returns:<ul> <li><code>result</code> (table): A table containing <code>success</code> (boolean), <code>stdout</code> (string), and <code>stderr</code> (string).</li> </ul> </li> </ul>"},{"location":"modules/pulumi/#stackpreviewoptions","title":"<code>stack:preview([options])</code>","text":"<p>Previews the changes that would be made by an update by running <code>pulumi preview</code>.</p> <ul> <li>Parameters: Same as <code>stack:up</code>.</li> <li>Returns: Same as <code>stack:up</code>.</li> </ul>"},{"location":"modules/pulumi/#stackrefreshoptions","title":"<code>stack:refresh([options])</code>","text":"<p>Refreshes the stack's state by running <code>pulumi refresh</code>.</p> <ul> <li>Parameters: Same as <code>stack:up</code>.</li> <li>Returns: Same as <code>stack:up</code>.</li> </ul>"},{"location":"modules/pulumi/#stackdestroyoptions","title":"<code>stack:destroy([options])</code>","text":"<p>Destroys all resources in the stack by running <code>pulumi destroy</code>.</p> <ul> <li>Parameters: Same as <code>stack:up</code>.</li> <li>Returns: Same as <code>stack:up</code>.</li> </ul>"},{"location":"modules/pulumi/#stackoutputs","title":"<code>stack:outputs()</code>","text":"<p>Retrieves the outputs of a deployed stack.</p> <ul> <li>Returns:<ul> <li><code>outputs</code> (table): A Lua table of the stack's outputs.</li> <li><code>error</code>: An error object if fetching outputs fails.</li> </ul> </li> </ul>"},{"location":"modules/pulumi/#example","title":"Example","text":"<p>This example shows a common pattern: deploying a networking stack (VPC) and then using its output (<code>vpcId</code>) to configure and deploy an application stack.</p> <pre><code>command = function()\n  -- 1. Define the VPC stack\n  local vpc_stack = pulumi.stack({\n    name = \"my-org/vpc/prod\",\n    workdir = \"./pulumi/vpc\"\n  })\n\n  -- 2. Deploy the VPC\n  log.info(\"Deploying VPC stack...\")\n  local vpc_result = vpc_stack:up({ yes = true })\n  if not vpc_result.success then\n    return false, \"VPC deployment failed: \" .. vpc_result.stderr\n  end\n\n  -- 3. Get the VPC ID from its outputs\n  log.info(\"Fetching VPC outputs...\")\n  local vpc_outputs, err = vpc_stack:outputs()\n  if err then\n    return false, \"Failed to get VPC outputs: \" .. err\n  end\n  local vpc_id = vpc_outputs.vpcId\n\n  -- 4. Define the App stack\n  local app_stack = pulumi.stack({\n    name = \"my-org/app/prod\",\n    workdir = \"./pulumi/app\"\n  })\n\n  -- 5. Deploy the App, passing the vpcId as configuration\n  log.info(\"Deploying App stack into VPC: \" .. vpc_id)\n  local app_result = app_stack:up({\n    yes = true,\n    config = { [\"my-app:vpcId\"] = vpc_id }\n  })\n  if not app_result.success then\n    return false, \"App deployment failed: \" .. app_result.stderr\n  end\n\n  log.info(\"All stacks deployed successfully.\")\n  return true, \"Pulumi orchestration complete.\"\nend\n</code></pre>"},{"location":"modules/python/","title":"Python Module","text":"<p>The <code>python</code> module provides a convenient way to manage Python virtual environments (<code>venv</code>) and execute scripts from within your <code>sloth-runner</code> tasks. This is particularly useful for workflows that involve Python-based tools or scripts.</p>"},{"location":"modules/python/#pythonvenvpath","title":"<code>python.venv(path)</code>","text":"<p>Creates a Python virtual environment object. Note that this only creates the object in Lua; the environment itself is not created on the file system until you call <code>:create()</code>.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The file system path where the virtual environment should be created (e.g., <code>./.venv</code>).</li> </ul> </li> <li>Returns:<ul> <li><code>venv</code> (object): A virtual environment object with methods to interact with it.</li> </ul> </li> </ul>"},{"location":"modules/python/#venvcreate","title":"<code>venv:create()</code>","text":"<p>Creates the virtual environment on the file system at the specified path.</p> <ul> <li>Returns:<ul> <li><code>error</code>: An error object if the creation fails.</li> </ul> </li> </ul>"},{"location":"modules/python/#venvpipcommand","title":"<code>venv:pip(command)</code>","text":"<p>Executes a <code>pip</code> command within the context of the virtual environment.</p> <ul> <li>Parameters:<ul> <li><code>command</code> (string): The arguments to pass to <code>pip</code> (e.g., <code>install -r requirements.txt</code>).</li> </ul> </li> <li>Returns:<ul> <li><code>result</code> (table): A table containing the <code>stdout</code>, <code>stderr</code>, and <code>exit_code</code> of the <code>pip</code> command.</li> </ul> </li> </ul>"},{"location":"modules/python/#venvexecscript_path","title":"<code>venv:exec(script_path)</code>","text":"<p>Executes a Python script using the Python interpreter from the virtual environment.</p> <ul> <li>Parameters:<ul> <li><code>script_path</code> (string): The path to the Python script to execute.</li> </ul> </li> <li>Returns:<ul> <li><code>result</code> (table): A table containing the <code>stdout</code>, <code>stderr</code>, and <code>exit_code</code> of the script execution.</li> </ul> </li> </ul>"},{"location":"modules/python/#example","title":"Example","text":"<p>This example demonstrates a complete lifecycle: creating a virtual environment, installing dependencies from a <code>requirements.txt</code> file, and running a Python script.</p> <pre><code>-- examples/python_venv_lifecycle_example.sloth\n\nModern DSLs = {\n  main = {\n    description = \"A task to demonstrate the Python venv lifecycle.\",\n    create_workdir_before_run = true, -- Use a temporary workdir\n    tasks = {\n      {\n        name = \"run-python-script\",\n        description = \"Creates a venv, installs dependencies, and runs a script.\",\n        command = function(params)\n          local python = require(\"python\")\n          local workdir = params.workdir -- Get the temp workdir from the group\n\n          -- 1. Write our Python script and dependencies to the workdir\n          fs.write(workdir .. \"/requirements.txt\", \"requests==2.28.1\")\n          fs.write(workdir .. \"/main.py\", \"import requests\\nprint(f'Hello from Python! Using requests version: {requests.__version__}')\")\n\n          -- 2. Create a venv object\n          local venv_path = workdir .. \"/.venv\"\n          log.info(\"Setting up virtual environment at: \" .. venv_path)\n          local venv = python.venv(venv_path)\n\n          -- 3. Create the venv on the filesystem\n          venv:create()\n\n          -- 4. Install dependencies using pip\n          log.info(\"Installing dependencies from requirements.txt...\")\n          local pip_result = venv:pip(\"install -r \" .. workdir .. \"/requirements.txt\")\n          if pip_result.exit_code ~= 0 then\n            log.error(\"Pip install failed: \" .. pip_result.stderr)\n            return false, \"Failed to install Python dependencies.\"\n          end\n\n          -- 5. Execute the script\n          log.info(\"Running the Python script...\")\n          local exec_result = venv:exec(workdir .. \"/main.py\")\n          if exec_result.exit_code ~= 0 then\n            log.error(\"Python script failed: \" .. exec_result.stderr)\n            return false, \"Python script execution failed.\"\n          end\n\n          log.info(\"Python script executed successfully.\")\n          print(\"---\\n--- Python Script Output ---\")\n          print(exec_result.stdout)\n          print(\"----------------------------\")\n\n          return true, \"Python venv lifecycle complete.\"\n        end\n      }\n    }\n  }\n}\n</code></pre> <p>```</p>"},{"location":"modules/reliability/","title":"\ud83d\udee1\ufe0f Reliability Module","text":"<p>The Reliability module provides enterprise-grade reliability patterns including circuit breakers, retry logic with exponential backoff, and failure handling strategies. These patterns help build resilient systems that can gracefully handle failures and recover automatically.</p>"},{"location":"modules/reliability/#key-features","title":"\ud83d\ude80 Key Features","text":"<ul> <li>Circuit Breaker Pattern: Prevents cascading failures by stopping calls to failing services</li> <li>Retry Logic: Configurable retry strategies with backoff algorithms</li> <li>Failure Tracking: Persistent failure state across task executions</li> <li>Multiple Strategies: Fixed delay, exponential backoff, linear backoff, custom</li> <li>Jitter Support: Randomization to prevent thundering herd problems</li> <li>State Integration: Uses state module for persistent failure tracking</li> <li>Callback Support: Custom callbacks for retry and state change events</li> </ul>"},{"location":"modules/reliability/#basic-usage","title":"\ud83d\udccb Basic Usage","text":""},{"location":"modules/reliability/#simple-retry","title":"Simple Retry","text":"<pre><code>-- Retry a function up to 3 times with 1 second initial delay\nlocal result = reliability.retry(3, 1, function()\n    -- Your potentially failing code here\n    if math.random() &gt; 0.7 then\n        return \"Success!\"\n    else\n        return nil, \"Random failure\"\n    end\nend)\n\nif result then\n    log.info(\"Operation succeeded: \" .. result)\nelse \n    log.error(\"All retries failed\")\nend\n</code></pre>"},{"location":"modules/reliability/#advanced-retry-configuration","title":"Advanced Retry Configuration","text":"<pre><code>local config = {\n    max_attempts = 5,\n    initial_delay = 0.5,  -- 500ms\n    max_delay = 10,       -- 10 seconds max\n    strategy = reliability.strategy.EXPONENTIAL_BACKOFF,\n    multiplier = 2.0,\n    jitter = true,\n    on_retry = function(attempt, delay, error)\n        log.warn(\"Retry attempt \" .. attempt .. \" in \" .. delay .. \"s: \" .. error)\n    end\n}\n\nlocal result = reliability.retry_with_config(config, function()\n    -- Your code here\n    return call_external_service()\nend)\n</code></pre>"},{"location":"modules/reliability/#circuit-breaker","title":"Circuit Breaker","text":"<pre><code>local cb_config = {\n    max_failures = 3,     -- Open after 3 failures\n    timeout = 30,         -- Wait 30 seconds before trying half-open\n    success_threshold = 2, -- Need 2 successes to close circuit\n    on_state_change = function(from_state, to_state)\n        log.info(\"Circuit breaker: \" .. from_state .. \" -&gt; \" .. to_state)\n    end\n}\n\nlocal result = reliability.circuit_breaker(\"external_api\", cb_config, function()\n    -- Call that might fail\n    return http.get(\"https://api.example.com/data\")\nend)\n</code></pre>"},{"location":"modules/reliability/#retry-strategies","title":"\ud83d\udd04 Retry Strategies","text":""},{"location":"modules/reliability/#available-strategy-types","title":"Available Strategy Types","text":"<pre><code>-- Fixed delay between retries\nreliability.strategy.FIXED_DELAY\n\n-- Exponential backoff (delay doubles each time)\nreliability.strategy.EXPONENTIAL_BACKOFF  \n\n-- Linear backoff (delay increases linearly)\nreliability.strategy.LINEAR_BACKOFF\n\n-- Custom delay function\nreliability.strategy.CUSTOM_BACKOFF\n</code></pre>"},{"location":"modules/reliability/#custom-delay-function","title":"Custom Delay Function","text":"<pre><code>local config = {\n    max_attempts = 5,\n    strategy = reliability.strategy.CUSTOM_BACKOFF,\n    custom_delay = function(attempt)\n        -- Custom fibonacci-like delays\n        if attempt == 1 then return 1 end\n        if attempt == 2 then return 1 end\n        return (attempt - 1) + (attempt - 2)\n    end\n}\n</code></pre>"},{"location":"modules/reliability/#circuit-breaker-states","title":"\u26a1 Circuit Breaker States","text":""},{"location":"modules/reliability/#state-transitions","title":"State Transitions","text":"<ul> <li>Closed \u2192 Open: After max_failures consecutive failures</li> <li>Open \u2192 Half-Open: After timeout period expires  </li> <li>Half-Open \u2192 Closed: After success_threshold successes</li> <li>Half-Open \u2192 Open: After any failure</li> </ul>"},{"location":"modules/reliability/#monitoring-circuit-state","title":"Monitoring Circuit State","text":"<pre><code>-- Get current statistics\nlocal stats = reliability.get_circuit_stats(\"my_service\")\nif stats then\n    log.info(\"Circuit state: \" .. stats.state)\n    log.info(\"Total requests: \" .. stats.requests)\n    log.info(\"Success rate: \" .. (stats.total_success / stats.requests * 100) .. \"%\")\nend\n\n-- List all circuit breakers\nlocal circuits = reliability.list_circuits()\nfor _, name in ipairs(circuits) do\n    log.info(\"Circuit: \" .. name)\nend\n\n-- Reset circuit breaker\nreliability.reset_circuit(\"my_service\")\n</code></pre>"},{"location":"modules/reliability/#integration-with-state-module","title":"\ud83d\udd17 Integration with State Module","text":""},{"location":"modules/reliability/#persistent-failure-tracking","title":"Persistent Failure Tracking","text":"<pre><code>-- Track failures across task executions\nlocal service_name = \"payment_service\"\nlocal failure_key = \"failures:\" .. service_name\n\nlocal function make_payment_call()\n    local success = make_api_call()\n\n    if success then\n        -- Reset failure count on success\n        state.set(failure_key, \"0\")\n        return true\n    else\n        -- Increment failure counter\n        local failures = state.increment(failure_key, 1)\n\n        -- Circuit break if too many failures\n        if failures &gt;= 5 then\n            return nil, \"Service circuit opened - too many failures\"\n        end\n\n        return nil, \"Temporary service failure\"\n    end\nend\n\n-- Use with retry\nlocal result = reliability.retry(3, 2, make_payment_call)\n</code></pre>"},{"location":"modules/reliability/#distributed-lock-with-retry","title":"Distributed Lock with Retry","text":"<pre><code>-- Combine distributed locking with retry logic\nlocal retry_config = {\n    max_attempts = 5,\n    initial_delay = 0.5,\n    strategy = reliability.strategy.LINEAR_BACKOFF\n}\n\nlocal result = reliability.retry_with_config(retry_config, function()\n    -- Try to acquire distributed lock\n    if not state.try_lock(\"critical_resource\", 10) then\n        return nil, \"Could not acquire lock\"\n    end\n\n    -- Do critical work\n    local work_result = perform_critical_operation()\n\n    -- Release lock\n    state.unlock(\"critical_resource\")\n\n    return work_result\nend)\n</code></pre>"},{"location":"modules/reliability/#advanced-patterns","title":"\ud83d\udcca Advanced Patterns","text":""},{"location":"modules/reliability/#combine-multiple-patterns","title":"Combine Multiple Patterns","text":"<pre><code>-- Deployment with circuit breaker, retry, and state tracking\nlocal deployment_steps = {\"validate\", \"backup\", \"deploy\", \"verify\"}\n\nfor _, step in ipairs(deployment_steps) do\n    local step_result = reliability.retry_with_config({\n        max_attempts = 3,\n        initial_delay = 1,\n        strategy = reliability.strategy.EXPONENTIAL_BACKOFF,\n        on_retry = function(attempt, delay, error)\n            state.append(\"deployment_log\", \n                step .. \" retry \" .. attempt .. \": \" .. error, \"\\n\")\n        end\n    }, function()\n        return reliability.circuit_breaker(\"deployment_service\", {\n            max_failures = 2,\n            timeout = 30,\n            on_state_change = function(from, to)\n                state.set(\"deployment_cb_state\", to)\n            end\n        }, function()\n            return execute_deployment_step(step)\n        end)\n    end)\n\n    if not step_result then\n        state.set(\"deployment_status\", \"failed_at_\" .. step)\n        return false, \"Deployment failed at: \" .. step\n    end\n\n    -- Update progress\n    local progress = math.floor((step_index / #deployment_steps) * 100)\n    state.set(\"deployment_progress\", progress)\nend\n\nstate.set(\"deployment_status\", \"completed\")\n</code></pre>"},{"location":"modules/reliability/#health-check-with-backoff","title":"Health Check with Backoff","text":"<pre><code>-- Health check with exponential backoff\nlocal health_config = {\n    max_attempts = 10,\n    initial_delay = 1,\n    max_delay = 60,\n    strategy = reliability.strategy.EXPONENTIAL_BACKOFF,\n    multiplier = 1.5,\n    jitter = true\n}\n\nlocal health_status = reliability.retry_with_config(health_config, function()\n    local response = http.get(\"http://localhost:8080/health\")\n\n    if response.status == 200 then\n        return response.body\n    else\n        return nil, \"Health check failed: \" .. response.status\n    end\nend)\n</code></pre>"},{"location":"modules/reliability/#configuration-reference","title":"\ud83c\udf9b\ufe0f Configuration Reference","text":""},{"location":"modules/reliability/#retry-configuration","title":"Retry Configuration","text":"<pre><code>{\n    max_attempts = 3,           -- Maximum retry attempts\n    initial_delay = 1,          -- Initial delay in seconds\n    max_delay = 30,             -- Maximum delay in seconds  \n    strategy = \"exponential\",   -- Retry strategy\n    multiplier = 2.0,           -- Backoff multiplier\n    jitter = true,              -- Add random jitter\n    on_retry = function(attempt, delay, error)\n        -- Retry callback\n    end\n}\n</code></pre>"},{"location":"modules/reliability/#circuit-breaker-configuration","title":"Circuit Breaker Configuration","text":"<pre><code>{\n    max_failures = 5,           -- Failures before opening\n    timeout = 60,               -- Seconds before half-open\n    success_threshold = 1,      -- Successes needed to close\n    on_state_change = function(from, to)\n        -- State change callback  \n    end\n}\n</code></pre>"},{"location":"modules/reliability/#error-handling","title":"\ud83d\udea8 Error Handling","text":""},{"location":"modules/reliability/#custom-error-predicates","title":"Custom Error Predicates","text":"<pre><code>-- Retry only on specific errors\nlocal config = {\n    max_attempts = 3,\n    should_retry = function(error)\n        -- Only retry on network errors\n        return string.find(error, \"network\") or string.find(error, \"timeout\")\n    end\n}\n</code></pre>"},{"location":"modules/reliability/#error-types","title":"Error Types","text":"<ul> <li>RetryableError: Explicitly marked as retryable</li> <li>NonRetryableError: Should not be retried</li> <li>CircuitBreakerError: Circuit is open, don't retry immediately</li> </ul>"},{"location":"modules/reliability/#monitoring-and-observability","title":"\ud83d\udcc8 Monitoring and Observability","text":""},{"location":"modules/reliability/#metrics-collection","title":"Metrics Collection","text":"<pre><code>-- Circuit breaker metrics\nlocal cb_stats = reliability.get_circuit_stats(\"service_name\")\n-- Returns: requests, total_success, total_failures, consecutive_success, \n--          consecutive_failures, state, last_success_time, last_failure_time\n\n-- State-based metrics\nlocal failure_count = tonumber(state.get(\"service_failures\", \"0\"))\nlocal success_rate = calculate_success_rate()\n\n-- Log metrics\nlog.info(\"Service metrics\", {\n    circuit_state = cb_stats.state,\n    failure_count = failure_count,\n    success_rate = success_rate\n})\n</code></pre> <p>The reliability module provides the foundation for building resilient, fault-tolerant automation workflows that can handle failures gracefully and recover automatically.</p>"},{"location":"modules/salt/","title":"Salt Module","text":"<p>The <code>salt</code> module provides a fluent API to interact with SaltStack, allowing you to run remote execution commands and manage configurations from your <code>sloth-runner</code> workflows.</p>"},{"location":"modules/salt/#saltclientoptions","title":"<code>salt.client([options])</code>","text":"<p>Creates a Salt client object.</p> <ul> <li>Parameters:<ul> <li><code>options</code> (table, optional): A table of options.<ul> <li><code>config_path</code> (string): Path to the Salt master configuration file.</li> </ul> </li> </ul> </li> <li>Returns:<ul> <li><code>client</code> (object): A <code>SaltClient</code> object.</li> </ul> </li> </ul>"},{"location":"modules/salt/#the-saltclient-object","title":"The <code>SaltClient</code> Object","text":"<p>This object represents a client for a Salt master and provides methods for targeting minions.</p>"},{"location":"modules/salt/#clienttargettarget_string-expr_form","title":"<code>client:target(target_string, [expr_form])</code>","text":"<p>Specifies the minion(s) to target for a command.</p> <ul> <li>Parameters:<ul> <li><code>target_string</code> (string): The target expression (e.g., <code>\"*\"</code> for all minions, <code>\"web-server-1\"</code>, or a grain value).</li> <li><code>expr_form</code> (string, optional): The type of targeting to use (e.g., <code>\"glob\"</code>, <code>\"grain\"</code>, <code>\"list\"</code>). Defaults to glob.</li> </ul> </li> <li>Returns:<ul> <li><code>target</code> (object): A <code>SaltTarget</code> object.</li> </ul> </li> </ul>"},{"location":"modules/salt/#the-salttarget-object","title":"The <code>SaltTarget</code> Object","text":"<p>This object represents a specific target and provides chainable methods for executing Salt functions.</p>"},{"location":"modules/salt/#targetcmdfunction-arg1-arg2","title":"<code>target:cmd(function, [arg1, arg2, ...])</code>","text":"<p>Executes a Salt execution module function on the target.</p> <ul> <li>Parameters:<ul> <li><code>function</code> (string): The name of the function to run (e.g., <code>\"test.ping\"</code>, <code>\"state.apply\"</code>, <code>\"cmd.run\"</code>).</li> <li><code>arg1</code>, <code>arg2</code>, ... (any): Additional arguments to pass to the Salt function.</li> </ul> </li> <li>Returns:<ul> <li><code>result</code> (table): A table containing <code>success</code> (boolean), <code>stdout</code> (string or table), and <code>stderr</code> (string). If the Salt command returns JSON, <code>stdout</code> will be a parsed Lua table.</li> </ul> </li> </ul>"},{"location":"modules/salt/#example","title":"Example","text":"<p>This example demonstrates targeting minions to ping them and apply a Salt state.</p> <pre><code>command = function()\n  local salt = require(\"salt\")\n\n  -- 1. Create a Salt client\n  local client = salt.client()\n\n  -- 2. Target all minions and ping them\n  log.info(\"Pinging all minions...\")\n  local ping_result = client:target(\"*\"):cmd(\"test.ping\")\n  if not ping_result.success then\n    return false, \"Failed to ping minions: \" .. ping_result.stderr\n  end\n  print(\"Ping Results:\")\n  print(data.to_yaml(ping_result.stdout)) -- stdout is a table\n\n  -- 3. Target a specific web server and apply a state\n  log.info(\"Applying 'nginx' state to web-server-1...\")\n  local apply_result = client:target(\"web-server-1\", \"glob\"):cmd(\"state.apply\", \"nginx\")\n  if not apply_result.success then\n    return false, \"Failed to apply state: \" .. apply_result.stderr\n  end\n\n  log.info(\"State applied successfully.\")\n  return true, \"Salt operations complete.\"\nend\n</code></pre>"},{"location":"modules/state/","title":"\ud83d\udcbe State Management Module","text":"<p>The State Management module provides powerful persistent state capabilities with atomic operations, distributed locks, and TTL (Time To Live) functionality. All data is stored locally using SQLite with WAL mode for maximum performance and reliability.</p>"},{"location":"modules/state/#key-features","title":"\ud83d\ude80 Key Features","text":"<ul> <li>SQLite Persistence: Reliable storage with WAL mode</li> <li>Atomic Operations: Thread-safe increment, compare-and-swap, append</li> <li>Distributed Locks: Critical sections with automatic timeout</li> <li>TTL (Time To Live): Automatic key expiration</li> <li>Data Types: String, number, boolean, table, list</li> <li>Pattern Matching: Wildcard key searches</li> <li>Auto Cleanup: Background cleanup of expired data</li> <li>Statistics: Usage and performance metrics</li> </ul>"},{"location":"modules/state/#basic-usage","title":"\ud83d\udccb Basic Usage","text":""},{"location":"modules/state/#setting-and-getting-values","title":"Setting and Getting Values","text":"<pre><code>-- Set values\nstate.set(\"app_version\", \"v1.2.3\")\nstate.set(\"user_count\", 1000)\nstate.set(\"config\", {\n    debug = true,\n    max_connections = 100\n})\n\n-- Get values\nlocal version = state.get(\"app_version\")\nlocal count = state.get(\"user_count\")\nlocal config = state.get(\"config\")\n\n-- Get with default value\nlocal theme = state.get(\"ui_theme\", \"dark\")\n\n-- Check existence\nif state.exists(\"app_version\") then\n    log.info(\"App version is configured\")\nend\n\n-- Delete key\nstate.delete(\"old_key\")\n</code></pre>"},{"location":"modules/state/#ttl-time-to-live","title":"TTL (Time To Live)","text":"<pre><code>-- Set with TTL (60 seconds)\nstate.set(\"session_token\", \"abc123\", 60)\n\n-- Set TTL for existing key\nstate.set_ttl(\"user_session\", 300) -- 5 minutes\n\n-- Check remaining TTL\nlocal ttl = state.get_ttl(\"session_token\")\nlog.info(\"Token expires in \" .. ttl .. \" seconds\")\n</code></pre>"},{"location":"modules/state/#atomic-operations","title":"Atomic Operations","text":"<pre><code>-- Atomic increment\nlocal counter = state.increment(\"page_views\", 1)\nlocal bulk_counter = state.increment(\"downloads\", 50)\n\n-- Atomic decrement  \nlocal remaining = state.decrement(\"inventory\", 5)\n\n-- String append\nstate.set(\"log_messages\", \"Starting application\")\nlocal new_length = state.append(\"log_messages\", \" -&gt; Connecting to database\")\n\n-- Atomic compare-and-swap\nlocal old_version = state.get(\"config_version\")\nlocal success = state.compare_swap(\"config_version\", old_version, old_version + 1)\nif success then\n    log.info(\"Configuration updated safely\")\nend\n</code></pre>"},{"location":"modules/state/#list-operations","title":"List Operations","text":"<pre><code>-- Add items to list\nstate.list_push(\"deployment_queue\", {\n    app = \"frontend\",\n    version = \"v2.1.0\",\n    environment = \"staging\"\n})\n\n-- Check list size\nlocal queue_size = state.list_length(\"deployment_queue\")\nlog.info(\"Items in queue: \" .. queue_size)\n\n-- Process list (pop removes last item)\nwhile state.list_length(\"deployment_queue\") &gt; 0 do\n    local deployment = state.list_pop(\"deployment_queue\")\n    log.info(\"Processing deployment: \" .. deployment.app)\n    -- Process deployment...\nend\n</code></pre>"},{"location":"modules/state/#distributed-locks-and-critical-sections","title":"Distributed Locks and Critical Sections","text":"<pre><code>-- Try to acquire lock (no waiting)\nlocal lock_acquired = state.try_lock(\"deployment_lock\", 30) -- 30 seconds TTL\nif lock_acquired then\n    -- Critical work\n    state.unlock(\"deployment_lock\")\nend\n\n-- Lock with wait and timeout\nlocal acquired = state.lock(\"database_migration\", 60) -- wait up to 60s\nif acquired then\n    -- Execute migration\n    state.unlock(\"database_migration\")\nend\n\n-- Critical section with automatic lock management\nstate.with_lock(\"critical_section\", function()\n    log.info(\"Executing critical operation...\")\n\n    -- Update global counter\n    local counter = state.increment(\"global_counter\", 1)\n\n    -- Update timestamp\n    state.set(\"last_operation\", os.time())\n\n    log.info(\"Critical operation completed - counter: \" .. counter)\n\n    -- Lock is automatically released when function returns\n    return \"operation_success\"\nend, 15) -- 15 second timeout\n</code></pre>"},{"location":"modules/state/#api-reference","title":"\ud83d\udd0d API Reference","text":""},{"location":"modules/state/#basic-operations","title":"Basic Operations","text":"Function Parameters Return Description <code>state.set(key, value, ttl?)</code> key: string, value: any, ttl?: number success: boolean Set a value with optional TTL <code>state.get(key, default?)</code> key: string, default?: any value: any Get a value or return default <code>state.delete(key)</code> key: string success: boolean Remove a key <code>state.exists(key)</code> key: string exists: boolean Check if key exists <code>state.clear(pattern?)</code> pattern?: string success: boolean Remove keys by pattern"},{"location":"modules/state/#ttl-operations","title":"TTL Operations","text":"Function Parameters Return Description <code>state.set_ttl(key, seconds)</code> key: string, seconds: number success: boolean Set TTL for existing key <code>state.get_ttl(key)</code> key: string ttl: number Get remaining TTL (-1 = no TTL, -2 = not exists)"},{"location":"modules/state/#atomic-operations_1","title":"Atomic Operations","text":"Function Parameters Return Description <code>state.increment(key, delta?)</code> key: string, delta?: number new_value: number Atomically increment value <code>state.decrement(key, delta?)</code> key: string, delta?: number new_value: number Atomically decrement value <code>state.append(key, value)</code> key: string, value: string new_length: number Atomically append string <code>state.compare_swap(key, old, new)</code> key: string, old: any, new: any success: boolean Atomic compare-and-swap"},{"location":"modules/state/#list-operations_1","title":"List Operations","text":"Function Parameters Return Description <code>state.list_push(key, item)</code> key: string, item: any length: number Add item to end of list <code>state.list_pop(key)</code> key: string item: any | nil Remove and return last item <code>state.list_length(key)</code> key: string length: number Get list length"},{"location":"modules/state/#distributed-locks","title":"Distributed Locks","text":"Function Parameters Return Description <code>state.try_lock(name, ttl)</code> name: string, ttl: number success: boolean Try to acquire lock without waiting <code>state.lock(name, timeout?)</code> name: string, timeout?: number success: boolean Acquire lock with timeout <code>state.unlock(name)</code> name: string success: boolean Release lock <code>state.with_lock(name, fn, timeout?)</code> name: string, fn: function, timeout?: number result: any Execute function with automatic lock"},{"location":"modules/state/#utilities","title":"Utilities","text":"Function Parameters Return Description <code>state.keys(pattern?)</code> pattern?: string keys: table List keys by pattern <code>state.stats()</code> - stats: table Get system statistics"},{"location":"modules/state/#practical-use-cases","title":"\ud83d\udca1 Practical Use Cases","text":""},{"location":"modules/state/#1-deployment-version-control","title":"1. Deployment Version Control","text":"<pre><code>Modern DSLs = {\n    deployment_pipeline = {\n        tasks = {\n            prepare_deploy = {\n                command = function()\n                    -- Check last deployed version\n                    local last_version = state.get(\"last_deployed_version\", \"v0.0.0\")\n                    local new_version = \"v1.2.3\"\n\n                    -- Check if already deployed\n                    if last_version == new_version then\n                        log.warn(\"Version \" .. new_version .. \" already deployed\")\n                        return false, \"Version already deployed\"\n                    end\n\n                    -- Register deployment start\n                    state.set(\"deploy_status\", \"in_progress\")\n                    state.set(\"deploy_start_time\", os.time())\n                    state.increment(\"total_deploys\", 1)\n\n                    return true, \"Deploy preparation completed\"\n                end\n            },\n\n            execute_deploy = {\n                depends_on = \"prepare_deploy\",\n                command = function()\n                    -- Critical section for deployment\n                    return state.with_lock(\"deployment_lock\", function()\n                        log.info(\"Executing deployment with lock...\")\n\n                        -- Simulate deployment\n                        exec.run(\"sleep 5\")\n\n                        -- Update state\n                        state.set(\"last_deployed_version\", \"v1.2.3\")\n                        state.set(\"deploy_status\", \"completed\")\n                        state.set(\"deploy_end_time\", os.time())\n\n                        -- Record history\n                        state.list_push(\"deploy_history\", {\n                            version = \"v1.2.3\",\n                            timestamp = os.time(),\n                            duration = state.get(\"deploy_end_time\") - state.get(\"deploy_start_time\")\n                        })\n\n                        return true, \"Deploy completed successfully\"\n                    end, 300) -- 5 minutes timeout\n                end\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"modules/state/#2-intelligent-caching-with-ttl","title":"2. Intelligent Caching with TTL","text":"<pre><code>-- Helper function for caching\nfunction get_cached_data(cache_key, fetch_function, ttl)\n    local cached = state.get(cache_key)\n    if cached then\n        log.info(\"Cache hit: \" .. cache_key)\n        return cached\n    end\n\n    log.info(\"Cache miss: \" .. cache_key .. \" - fetching...\")\n    local data = fetch_function()\n    state.set(cache_key, data, ttl or 300) -- 5 minutes default\n    return data\nend\n\n-- Usage in tasks\nModern DSLs = {\n    data_processing = {\n        tasks = {\n            fetch_user_data = {\n                command = function()\n                    local user_data = get_cached_data(\"user:123:profile\", function()\n                        -- Simulate expensive fetch\n                        return {\n                            name = \"Alice\",\n                            email = \"alice@example.com\",\n                            preferences = {\"dark_mode\", \"notifications\"}\n                        }\n                    end, 600) -- Cache for 10 minutes\n\n                    log.info(\"User data: \" .. data.to_json(user_data))\n                    return true, \"User data retrieved\"\n                end\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"modules/state/#3-rate-limiting","title":"3. Rate Limiting","text":"<pre><code>function check_rate_limit(identifier, max_requests, window_seconds)\n    local key = \"rate_limit:\" .. identifier\n    local current_count = state.get(key, 0)\n\n    if current_count &gt;= max_requests then\n        return false, \"Rate limit exceeded\"\n    end\n\n    -- Increment counter\n    if current_count == 0 then\n        -- First request in window\n        state.set(key, 1, window_seconds)\n    else\n        -- Increment existing counter\n        state.increment(key, 1)\n    end\n\n    return true, \"Request allowed\"\nend\n\n-- Usage in tasks\nModern DSLs = {\n    api_tasks = {\n        tasks = {\n            make_api_call = {\n                command = function()\n                    local allowed, msg = check_rate_limit(\"api_calls\", 100, 3600) -- 100 calls/hour\n\n                    if not allowed then\n                        log.error(msg)\n                        return false, msg\n                    end\n\n                    -- Make API call\n                    log.info(\"Making API call...\")\n                    return true, \"API call completed\"\n                end\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"modules/state/#configuration-and-storage","title":"\u2699\ufe0f Configuration and Storage","text":""},{"location":"modules/state/#database-location","title":"Database Location","text":"<p>By default, the SQLite database is created at: - Linux/macOS: <code>~/.sloth-runner/state.db</code> - Windows: <code>%USERPROFILE%\\.sloth-runner\\state.db</code></p>"},{"location":"modules/state/#technical-characteristics","title":"Technical Characteristics","text":"<ul> <li>Engine: SQLite 3 with WAL mode</li> <li>Concurrent Access: Support for multiple simultaneous connections</li> <li>Auto-cleanup: Automatic cleanup of expired data every 5 minutes</li> <li>Lock Timeout: Expired locks are cleaned automatically</li> <li>Serialization: JSON for complex objects, native format for simple types</li> </ul>"},{"location":"modules/state/#limitations","title":"Limitations","text":"<ul> <li>Local Scope: State is persisted only on local machine</li> <li>Concurrency: Locks are effective only within local process</li> <li>Size: Suitable for small to medium datasets (&lt; 1GB)</li> </ul>"},{"location":"modules/state/#best-practices","title":"\ud83d\udd04 Best Practices","text":"<ol> <li>Use TTL for temporary data to prevent storage bloat</li> <li>Use locks for critical sections to avoid race conditions  </li> <li>Use patterns for bulk operations to manage related keys</li> <li>Monitor storage size using <code>state.stats()</code> </li> <li>Use atomic operations instead of read-modify-write patterns</li> <li>Clean up expired keys regularly with <code>state.clear(pattern)</code></li> </ol> <p>The State Management module transforms sloth-runner into a stateful, reliable platform for complex task orchestration! \ud83d\ude80</p>"},{"location":"modules/stow/","title":"\ud83d\udce6 Stow Module","text":"<p>The <code>stow</code> module provides native GNU Stow integration for managing dotfiles and symlink farms in Sloth Runner. It's a global module (no <code>require()</code> needed) with full idempotency and task user support.</p>"},{"location":"modules/stow/#features","title":"Features","text":"<ul> <li>\u2705 Automatic target directory creation with proper ownership</li> <li>\u2705 Idempotent operations - safe to run multiple times</li> <li>\u2705 Task user integration - respects <code>:user()</code> directive</li> <li>\u2705 Multiple stow operations - link, unlink, restow</li> <li>\u2705 Advanced options - no-folding, verbose, and more</li> </ul>"},{"location":"modules/stow/#functions","title":"Functions","text":""},{"location":"modules/stow/#stowlink","title":"<code>stow.link()</code>","text":"<p>Creates symlinks for a package (stow operation).</p> <p>Parameters: <pre><code>{\n    package = \"package_name\",      -- Required: package/directory to stow\n    source_dir = \"/path/to/stow\",  -- Required: stow directory\n    target_dir = \"/path/to/target\", -- Required: target directory\n    create_target = true,          -- Optional: create target dir if missing (default: true)\n    verbose = false,               -- Optional: verbose output\n    no_folding = false            -- Optional: don't fold directories\n}\n</code></pre></p> <p>Returns: <code>success (bool), message (string)</code></p> <p>Example: <pre><code>local ok, msg = stow.link({\n    package = \"zsh\",\n    source_dir = \"/home/user/dotfiles\",\n    target_dir = \"/home/user\",\n    create_target = true,\n    verbose = true\n})\n\nif not ok then\n    return false, msg\nend\n</code></pre></p> <p>With automatic directory creation: <pre><code>-- This will create /home/user/.zsh if it doesn't exist\n-- and set ownership to the task user\nlocal ok, msg = stow.link({\n    package = \".\",\n    source_dir = \"/home/user/dotfiles/zsh\",\n    target_dir = \"/home/user/.zsh\",\n    create_target = true  -- Creates dir with task user ownership\n})\n</code></pre></p>"},{"location":"modules/stow/#stowunlink","title":"<code>stow.unlink()</code>","text":"<p>Removes symlinks for a package (unstow operation).</p> <p>Parameters: <pre><code>{\n    package = \"package_name\",      -- Required\n    source_dir = \"/path/to/stow\",  -- Required\n    target_dir = \"/path/to/target\", -- Required\n    verbose = false                -- Optional\n}\n</code></pre></p> <p>Returns: <code>success (bool), message (string)</code></p> <p>Example: <pre><code>local ok, msg = stow.unlink({\n    package = \"vim\",\n    source_dir = \"/home/user/dotfiles\",\n    target_dir = \"/home/user\"\n})\n</code></pre></p>"},{"location":"modules/stow/#stowrestow","title":"<code>stow.restow()</code>","text":"<p>Removes and re-creates symlinks for a package (useful for updates).</p> <p>Parameters: <pre><code>{\n    package = \"package_name\",      -- Required\n    source_dir = \"/path/to/stow\",  -- Required\n    target_dir = \"/path/to/target\", -- Required\n    verbose = false,               -- Optional\n    no_folding = false            -- Optional\n}\n</code></pre></p> <p>Returns: <code>success (bool), message (string)</code></p> <p>Example: <pre><code>-- Refresh all links for the package\nlocal ok, msg = stow.restow({\n    package = \"zshrc\",\n    source_dir = \"/home/user/dotfiles\",\n    target_dir = \"/home/user\",\n    verbose = true\n})\n</code></pre></p>"},{"location":"modules/stow/#stowensure_target","title":"<code>stow.ensure_target()</code> \ud83c\udd95","text":"<p>Ensures a target directory exists with proper ownership and permissions.</p> <p>Parameters: <pre><code>{\n    path = \"/path/to/directory\",  -- Required: directory path\n    owner = \"username\",           -- Optional: owner (uses task user if not specified)\n    mode = \"0755\"                -- Optional: permissions in octal (default: \"0755\")\n}\n</code></pre></p> <p>Returns: <code>success (bool), message (string)</code></p> <p>Example: <pre><code>-- Create directory as task user\nlocal ok, msg = stow.ensure_target({\n    path = \"/home/user/.config/nvim\"\n})\n\n-- Create with specific owner and permissions\nlocal ok, msg = stow.ensure_target({\n    path = \"/home/user/.local/bin\",\n    owner = \"user\",\n    mode = \"0700\"\n})\n</code></pre></p>"},{"location":"modules/stow/#complete-examples","title":"Complete Examples","text":""},{"location":"modules/stow/#basic-dotfiles-setup","title":"Basic Dotfiles Setup","text":"<pre><code>local stow_dotfiles = task(\"stow-dotfiles\")\n    :description(\"Stow all dotfiles\")\n    :user(\"myuser\")\n    :command(function(this, params)\n        local packages = { \"zsh\", \"vim\", \"tmux\", \"git\" }\n\n        for _, pkg in ipairs(packages) do\n            local ok, msg = stow.link({\n                package = pkg,\n                source_dir = \"/home/myuser/dotfiles\",\n                target_dir = \"/home/myuser\",\n                create_target = true\n            })\n\n            if ok then\n                log.info(\"\u2705 \" .. pkg .. \" stowed\")\n            else\n                log.error(\"\u274c \" .. pkg .. \": \" .. msg)\n                return false, msg\n            end\n        end\n\n        return true, \"All dotfiles stowed\"\n    end)\n    :build()\n</code></pre>"},{"location":"modules/stow/#nested-directory-structure","title":"Nested Directory Structure","text":"<pre><code>local stow_zsh = task(\"stow-zsh-config\")\n    :description(\"Stow zsh configuration into .zsh directory\")\n    :user(\"igor\")\n    :command(function(this, params)\n        -- Ensure target directory exists\n        local ok_dir, msg_dir = stow.ensure_target({\n            path = \"/home/igor/.zsh\",\n            owner = \"igor\"\n        })\n\n        if not ok_dir then\n            return false, \"Failed to create .zsh: \" .. msg_dir\n        end\n\n        -- Stow the configuration\n        local ok_stow, msg_stow = stow.link({\n            package = \".\",\n            source_dir = \"/home/igor/dotfiles/zsh\",\n            target_dir = \"/home/igor/.zsh\",\n            no_folding = false\n        })\n\n        if not ok_stow then\n            return false, \"Failed to stow: \" .. msg_stow\n        end\n\n        return true, \"Zsh config stowed to .zsh directory\"\n    end)\n    :build()\n</code></pre>"},{"location":"modules/stow/#user-environment-setup","title":"User Environment Setup","text":"<pre><code>workflow\n    .define(\"user_dotfiles_setup\")\n    :description(\"Complete user dotfiles setup\")\n    :tasks({\n        task(\"install-deps\")\n            :delegate_to(\"server1\")\n            :command(function()\n                pkg.install({ packages = { \"stow\", \"git\", \"zsh\" } })\n                return true\n            end)\n            :build(),\n\n        task(\"create-user\")\n            :delegate_to(\"server1\")\n            :command(function()\n                user.create({\n                    username = \"myuser\",\n                    shell = \"/bin/zsh\",\n                    create_home = true\n                })\n                return true\n            end)\n            :build(),\n\n        task(\"clone-dotfiles\")\n            :delegate_to(\"server1\")\n            :user(\"myuser\")\n            :command(function()\n                exec.run(\"git clone https://github.com/user/dotfiles.git ~/dotfiles\")\n                return true\n            end)\n            :build(),\n\n        task(\"stow-all\")\n            :delegate_to(\"server1\")\n            :user(\"myuser\")\n            :command(function()\n                -- Stow zsh to .zsh directory\n                stow.link({\n                    package = \".\",\n                    source_dir = \"/home/myuser/dotfiles/zsh\",\n                    target_dir = \"/home/myuser/.zsh\",\n                    create_target = true\n                })\n\n                -- Stow zshrc to home\n                stow.link({\n                    package = \"zshrc\",\n                    source_dir = \"/home/myuser/dotfiles\",\n                    target_dir = \"/home/myuser\"\n                })\n\n                return true, \"All dotfiles stowed\"\n            end)\n            :build()\n    })\n</code></pre>"},{"location":"modules/stow/#multiple-packages-with-error-handling","title":"Multiple Packages with Error Handling","text":"<pre><code>local stow_multiple = task(\"stow-multiple\")\n    :user(\"myuser\")\n    :command(function(this, params)\n        local packages = {\n            { name = \"zsh\", target = \"/home/myuser\" },\n            { name = \"vim\", target = \"/home/myuser\" },\n            { name = \"scripts\", target = \"/home/myuser/.local/bin\" },\n        }\n\n        local results = {}\n        local failed = {}\n\n        for _, pkg_info in ipairs(packages) do\n            local ok, msg = stow.link({\n                package = pkg_info.name,\n                source_dir = \"/home/myuser/dotfiles\",\n                target_dir = pkg_info.target,\n                create_target = true,\n                verbose = true\n            })\n\n            if ok then\n                table.insert(results, pkg_info.name)\n                log.info(\"\u2705 \" .. pkg_info.name .. \": \" .. msg)\n            else\n                table.insert(failed, pkg_info.name)\n                log.error(\"\u274c \" .. pkg_info.name .. \": \" .. msg)\n            end\n        end\n\n        if #failed &gt; 0 then\n            return false, \"Failed to stow: \" .. table.concat(failed, \", \")\n        end\n\n        return true, \"Successfully stowed: \" .. table.concat(results, \", \")\n    end)\n    :build()\n</code></pre>"},{"location":"modules/stow/#best-practices","title":"Best Practices","text":""},{"location":"modules/stow/#1-always-use-create_target-true-for-new-setups","title":"1. Always use <code>create_target = true</code> for new setups","text":"<pre><code>-- Good: Automatically creates missing directories\nstow.link({\n    package = \"zsh\",\n    source_dir = \"~/dotfiles\",\n    target_dir = \"~/.config/zsh\",\n    create_target = true\n})\n</code></pre>"},{"location":"modules/stow/#2-use-user-directive-for-proper-ownership","title":"2. Use <code>:user()</code> directive for proper ownership","text":"<pre><code>task(\"stow-config\")\n    :user(\"myuser\")  -- All stow operations will run as myuser\n    :command(function()\n        stow.link({ ... })\n    end)\n    :build()\n</code></pre>"},{"location":"modules/stow/#3-explicitly-create-complex-directory-structures","title":"3. Explicitly create complex directory structures","text":"<pre><code>-- For complex structures, ensure directories first\nstow.ensure_target({ path = \"/home/user/.config/nvim\" })\nstow.ensure_target({ path = \"/home/user/.local/share\" })\n\n-- Then stow\nstow.link({ package = \"nvim\", ... })\n</code></pre>"},{"location":"modules/stow/#4-use-restow-for-updates","title":"4. Use <code>restow</code> for updates","text":"<pre><code>-- When dotfiles change, use restow\nstow.restow({\n    package = \"vim\",\n    source_dir = \"~/dotfiles\",\n    target_dir = \"~\"\n})\n</code></pre>"},{"location":"modules/stow/#5-check-results-and-log-appropriately","title":"5. Check results and log appropriately","text":"<pre><code>local ok, msg = stow.link({ ... })\n\nif ok then\n    log.info(\"\u2705 \" .. msg)\nelse\n    log.error(\"\u274c \" .. msg)\n    return false, msg\nend\n</code></pre>"},{"location":"modules/stow/#idempotency","title":"Idempotency","text":"<p>All stow operations are fully idempotent:</p> <ul> <li><code>stow.link()</code> - Checks if links already exist before creating</li> <li><code>stow.unlink()</code> - Only removes links if they exist</li> <li><code>stow.restow()</code> - Safe to run multiple times</li> <li><code>stow.ensure_target()</code> - Only creates directory if missing</li> </ul> <p>Example: <pre><code>-- Safe to run multiple times\nstow.link({\n    package = \"zsh\",\n    source_dir = \"/home/user/dotfiles\",\n    target_dir = \"/home/user\"\n})\n-- First run: Creates symlinks\n-- Second run: Detects existing links, returns success\n</code></pre></p>"},{"location":"modules/stow/#task-user-integration","title":"Task User Integration","text":"<p>The stow module respects the task <code>:user()</code> directive:</p> <pre><code>task(\"stow-as-user\")\n    :user(\"igor\")  -- Run as igor\n    :command(function()\n        -- This will:\n        -- 1. Create /home/igor/.zsh owned by igor\n        -- 2. Run stow as igor\n        stow.link({\n            package = \".\",\n            source_dir = \"/home/igor/dotfiles/zsh\",\n            target_dir = \"/home/igor/.zsh\"\n        })\n    end)\n    :build()\n</code></pre>"},{"location":"modules/stow/#troubleshooting","title":"Troubleshooting","text":""},{"location":"modules/stow/#links-not-created","title":"Links not created","text":"<pre><code># Check stow is installed\npkg.install({ packages = { \"stow\" } })\n\n# Check source directory exists\nlog.info(\"Source: \" .. exec.run(\"ls -la /home/user/dotfiles\"))\n\n# Use verbose mode\nstow.link({ ..., verbose = true })\n</code></pre>"},{"location":"modules/stow/#permission-denied","title":"Permission denied","text":"<pre><code># Ensure proper task user\ntask(\"fix-perms\")\n    :user(\"targetuser\")  # Must match target directory owner\n    :command(function()\n        stow.link({ ... })\n    end)\n    :build()\n</code></pre>"},{"location":"modules/stow/#directory-already-exists","title":"Directory already exists","text":"<pre><code># Use ensure_target to handle existing directories\nstow.ensure_target({ path = \"/home/user/.config\" })\nstow.link({\n    package = \"config\",\n    target_dir = \"/home/user/.config\",\n    create_target = false  # Already ensured above\n})\n</code></pre>"},{"location":"modules/stow/#migration-from-manual-execrun","title":"Migration from Manual exec.run()","text":"<p>Before (manual stow): <pre><code>exec.run(\"sudo -u igor -- /bin/sh -c 'mkdir -p /home/igor/.zsh'\")\nexec.run(\"sudo -u igor -- /bin/sh -c 'stow -d /home/igor/dotfiles/zsh -t /home/igor/.zsh .'\")\n</code></pre></p> <p>After (using stow module): <pre><code>stow.link({\n    package = \".\",\n    source_dir = \"/home/igor/dotfiles/zsh\",\n    target_dir = \"/home/igor/.zsh\",\n    create_target = true  -- Handles mkdir and ownership\n})\n</code></pre></p> <p>Benefits: - \u2705 Automatic directory creation - \u2705 Proper ownership handling - \u2705 Idempotent by default - \u2705 Better error messages - \u2705 Cleaner code</p>"},{"location":"modules/stow/#see-also","title":"See Also","text":"<ul> <li>file_ops module - For file operations</li> <li>user module - For user management</li> <li>exec module - For command execution</li> </ul>"},{"location":"modules/systemd/","title":"\u2699\ufe0f Systemd Module","text":"<p>The <code>systemd</code> module provides comprehensive systemd service management functionality for Linux systems. It allows you to create, manage, and monitor systemd services programmatically.</p>"},{"location":"modules/systemd/#overview","title":"\ud83c\udfaf Overview","text":"<p>The systemd module enables you to: - Create and configure systemd service files - Start, stop, restart, and reload services - Enable and disable services - Check service status and activity - List all services - Manage systemd daemon configuration</p>"},{"location":"modules/systemd/#functions-overview","title":"\ud83d\udcda Functions Overview","text":"Function Description <code>systemd.create_service(name, config)</code> Create a new systemd service <code>systemd.start(service)</code> Start a service <code>systemd.stop(service)</code> Stop a service <code>systemd.restart(service)</code> Restart a service <code>systemd.reload(service)</code> Reload a service <code>systemd.enable(service)</code> Enable service at boot <code>systemd.disable(service)</code> Disable service at boot <code>systemd.status(service)</code> Get service status <code>systemd.is_active(service)</code> Check if service is active <code>systemd.is_enabled(service)</code> Check if service is enabled <code>systemd.daemon_reload()</code> Reload systemd daemon <code>systemd.remove_service(service)</code> Remove a service <code>systemd.list_services(opts)</code> List all services <code>systemd.show(service)</code> Show detailed service info"},{"location":"modules/systemd/#detailed-documentation","title":"\ud83d\udcd6 Detailed Documentation","text":""},{"location":"modules/systemd/#service-creation","title":"Service Creation","text":""},{"location":"modules/systemd/#systemdcreate_servicename-config","title":"<code>systemd.create_service(name, config)</code>","text":"<p>Creates a new systemd service file at <code>/etc/systemd/system/{name}.service</code>.</p> <p>Parameters: - <code>name</code> (string): Service name (without .service extension) - <code>config</code> (table): Service configuration</p> <p>Configuration Options:</p> <pre><code>{\n    -- [Unit] section\n    description = \"Service description\",\n    after = \"network.target\",\n    wants = \"other.service\",\n    requires = \"required.service\",\n\n    -- [Service] section (required)\n    exec_start = \"/path/to/executable\",\n    exec_stop = \"/path/to/stop/script\",\n    exec_reload = \"/path/to/reload/script\",\n    type = \"simple\",  -- simple, forking, oneshot, dbus, notify, idle\n    user = \"username\",\n    group = \"groupname\",\n    working_directory = \"/path/to/workdir\",\n    restart = \"always\",  -- no, on-success, on-failure, on-abnormal, on-abort, always\n    restart_sec = \"5s\",\n    environment = {\n        VAR1 = \"value1\",\n        VAR2 = \"value2\"\n    },\n\n    -- [Install] section\n    wanted_by = \"multi-user.target\"\n}\n</code></pre> <p>Returns: - <code>success</code> (boolean): <code>true</code> if service was created - <code>message</code> (string): Result message</p> <p>Examples:</p> Modern DSLWith delegate_to <pre><code>local systemd = require(\"systemd\")\n\nlocal create_web_service = task(\"create_web_service\")\n    :description(\"Create web application service\")\n    :command(function(this, params)\n        log.info(\"Creating web service...\")\n\n        local config = {\n            description = \"Web Application Server\",\n            after = \"network.target\",\n            exec_start = \"/usr/bin/node /app/server.js\",\n            type = \"simple\",\n            user = \"webapp\",\n            working_directory = \"/app\",\n            restart = \"always\",\n            restart_sec = \"10s\",\n            environment = {\n                NODE_ENV = \"production\",\n                PORT = \"3000\"\n            }\n        }\n\n        local success, msg = systemd.create_service(\"webapp\", config)\n\n        if success then\n            log.info(\"\u2705 Service created!\")\n            -- Reload daemon and enable\n            systemd.daemon_reload()\n            systemd.enable(\"webapp\")\n            systemd.start(\"webapp\")\n            return true, \"Service deployed\"\n        else\n            log.error(\"\u274c Failed: \" .. msg)\n            return false, msg\n        end\n    end)\n    :timeout(\"60s\")\n    :build()\n\nworkflow.define(\"deploy_service\")\n    :tasks({ create_web_service })\n</code></pre> <pre><code>local systemd = require(\"systemd\")\n\nlocal deploy_remote_service = task(\"deploy_remote_service\")\n    :description(\"Deploy service on remote agent\")\n    :command(function(this, params)\n        local config = {\n            description = \"Remote Monitoring Agent\",\n            after = \"network.target\",\n            exec_start = \"/opt/monitor/agent\",\n            type = \"simple\",\n            user = \"monitor\",\n            restart = \"always\"\n        }\n\n        local success, msg = systemd.create_service(\"monitor-agent\", config)\n\n        if success then\n            systemd.daemon_reload()\n            systemd.enable(\"monitor-agent\")\n            systemd.start(\"monitor-agent\")\n            log.info(\"\u2705 Deployed on \" .. (this.agent or \"local\"))\n            return true, \"OK\"\n        end\n\n        return false, \"Failed\"\n    end)\n    :delegate_to(\"production-server\")\n    :timeout(\"60s\")\n    :build()\n\nworkflow.define(\"remote_deploy\")\n    :tasks({ deploy_remote_service })\n</code></pre>"},{"location":"modules/systemd/#service-control","title":"Service Control","text":""},{"location":"modules/systemd/#systemdstartservice","title":"<code>systemd.start(service)</code>","text":"<p>Starts a systemd service.</p> <p>Parameters: - <code>service</code> (string): Service name</p> <p>Returns: - <code>success</code> (boolean), <code>output</code> (string)</p> <p>Example: <pre><code>local success, output = systemd.start(\"nginx\")\nif success then\n    log.info(\"\u2705 Nginx started\")\nend\n</code></pre></p>"},{"location":"modules/systemd/#systemdstopservice","title":"<code>systemd.stop(service)</code>","text":"<p>Stops a systemd service.</p> <p>Example: <pre><code>local success, output = systemd.stop(\"nginx\")\n</code></pre></p>"},{"location":"modules/systemd/#systemdrestartservice","title":"<code>systemd.restart(service)</code>","text":"<p>Restarts a systemd service.</p> <p>Example: <pre><code>local success, output = systemd.restart(\"nginx\")\n</code></pre></p>"},{"location":"modules/systemd/#systemdreloadservice","title":"<code>systemd.reload(service)</code>","text":"<p>Reloads a systemd service configuration without restarting.</p> <p>Example: <pre><code>local success, output = systemd.reload(\"nginx\")\n</code></pre></p>"},{"location":"modules/systemd/#service-status","title":"Service Status","text":""},{"location":"modules/systemd/#systemdstatusservice","title":"<code>systemd.status(service)</code>","text":"<p>Gets detailed status of a service.</p> <p>Returns: - <code>status</code> (string): Status output - <code>error</code> (string): Error message if any</p> <p>Example: <pre><code>local status, err = systemd.status(\"nginx\")\nlog.info(\"Status:\\n\" .. status)\n</code></pre></p>"},{"location":"modules/systemd/#systemdis_activeservice","title":"<code>systemd.is_active(service)</code>","text":"<p>Checks if a service is currently active/running.</p> <p>Returns: - <code>active</code> (boolean): <code>true</code> if active - <code>state</code> (string): Service state</p> <p>Example: <pre><code>local active, state = systemd.is_active(\"nginx\")\nif active then\n    log.info(\"\u2705 Service is running\")\nelse\n    log.warn(\"\u274c Service is \" .. state)\nend\n</code></pre></p>"},{"location":"modules/systemd/#systemdis_enabledservice","title":"<code>systemd.is_enabled(service)</code>","text":"<p>Checks if a service is enabled to start at boot.</p> <p>Returns: - <code>enabled</code> (boolean): <code>true</code> if enabled - <code>state</code> (string): Enable state</p> <p>Example: <pre><code>local enabled, state = systemd.is_enabled(\"nginx\")\n</code></pre></p>"},{"location":"modules/systemd/#service-management","title":"Service Management","text":""},{"location":"modules/systemd/#systemdenableservice","title":"<code>systemd.enable(service)</code>","text":"<p>Enables a service to start automatically at boot.</p> <p>Example: <pre><code>local success, output = systemd.enable(\"nginx\")\n</code></pre></p>"},{"location":"modules/systemd/#systemddisableservice","title":"<code>systemd.disable(service)</code>","text":"<p>Disables a service from starting at boot.</p> <p>Example: <pre><code>local success, output = systemd.disable(\"nginx\")\n</code></pre></p>"},{"location":"modules/systemd/#systemddaemon_reload","title":"<code>systemd.daemon_reload()</code>","text":"<p>Reloads systemd daemon configuration. Required after creating or modifying service files.</p> <p>Example: <pre><code>local success, output = systemd.daemon_reload()\n</code></pre></p>"},{"location":"modules/systemd/#systemdremove_serviceservice","title":"<code>systemd.remove_service(service)</code>","text":"<p>Removes a systemd service completely (stops, disables, and deletes the service file).</p> <p>Example: <pre><code>local success, msg = systemd.remove_service(\"old-service\")\n</code></pre></p>"},{"location":"modules/systemd/#service-information","title":"Service Information","text":""},{"location":"modules/systemd/#systemdlist_servicesoptions","title":"<code>systemd.list_services(options)</code>","text":"<p>Lists systemd services with optional filters.</p> <p>Parameters: - <code>options</code> (table, optional): Filter options   - <code>state</code>: Filter by state (e.g., \"active\", \"failed\", \"inactive\")   - <code>no_header</code>: Boolean, exclude header in output</p> <p>Returns: - <code>list</code> (string): Service list - <code>error</code> (string): Error if any</p> <p>Example: <pre><code>-- List all services\nlocal list, err = systemd.list_services()\nlog.info(list)\n\n-- List only active services\nlocal active, err = systemd.list_services({ state = \"active\" })\n\n-- List failed services without header\nlocal failed, err = systemd.list_services({ \n    state = \"failed\", \n    no_header = true \n})\n</code></pre></p>"},{"location":"modules/systemd/#systemdshowservice","title":"<code>systemd.show(service)</code>","text":"<p>Shows detailed properties of a service.</p> <p>Returns: - <code>info</code> (string): Detailed service information - <code>error</code> (string): Error if any</p> <p>Example: <pre><code>local info, err = systemd.show(\"nginx\")\nlog.info(\"Service details:\\n\" .. info)\n</code></pre></p>"},{"location":"modules/systemd/#complete-examples","title":"\ud83c\udfaf Complete Examples","text":""},{"location":"modules/systemd/#web-application-deployment","title":"Web Application Deployment","text":"<pre><code>local systemd = require(\"systemd\")\n\nlocal deploy_webapp = task(\"deploy_webapp\")\n    :description(\"Deploy and configure web application\")\n    :command(function(this, params)\n        log.info(\"\ud83d\ude80 Deploying web application...\")\n\n        -- Create service\n        local config = {\n            description = \"Node.js Web Application\",\n            after = \"network.target postgresql.service\",\n            requires = \"postgresql.service\",\n            exec_start = \"/usr/bin/node /var/www/app/server.js\",\n            exec_reload = \"/bin/kill -HUP $MAINPID\",\n            type = \"simple\",\n            user = \"webapp\",\n            group = \"webapp\",\n            working_directory = \"/var/www/app\",\n            restart = \"always\",\n            restart_sec = \"10s\",\n            environment = {\n                NODE_ENV = \"production\",\n                PORT = \"3000\",\n                DB_HOST = \"localhost\"\n            },\n            wanted_by = \"multi-user.target\"\n        }\n\n        local success, msg = systemd.create_service(\"webapp\", config)\n        if not success then\n            return false, \"Failed to create service: \" .. msg\n        end\n\n        log.info(\"\u2705 Service file created\")\n\n        -- Reload daemon\n        systemd.daemon_reload()\n        log.info(\"\u2705 Daemon reloaded\")\n\n        -- Enable and start\n        systemd.enable(\"webapp\")\n        log.info(\"\u2705 Service enabled\")\n\n        systemd.start(\"webapp\")\n        log.info(\"\u2705 Service started\")\n\n        -- Verify it's running\n        local active, state = systemd.is_active(\"webapp\")\n        if active then\n            log.info(\"\u2705 Service is running!\")\n            return true, \"Deployment successful\"\n        else\n            log.error(\"\u274c Service failed to start: \" .. state)\n            return false, \"Service not running\"\n        end\n    end)\n    :timeout(\"120s\")\n    :build()\n\nworkflow.define(\"deploy\")\n    :tasks({ deploy_webapp })\n</code></pre>"},{"location":"modules/systemd/#service-health-check","title":"Service Health Check","text":"<pre><code>local systemd = require(\"systemd\")\n\nlocal health_check = task(\"health_check\")\n    :description(\"Check critical services health\")\n    :command(function(this, params)\n        log.info(\"\ud83d\udd0d Health Check Starting...\")\n        log.info(string.rep(\"=\", 60))\n\n        local services = {\n            \"nginx\",\n            \"postgresql\",\n            \"redis\",\n            \"webapp\"\n        }\n\n        local all_healthy = true\n\n        for _, service in ipairs(services) do\n            local active, state = systemd.is_active(service)\n            local enabled, enable_state = systemd.is_enabled(service)\n\n            log.info(\"\\n\ud83d\udce6 \" .. service .. \":\")\n            log.info(\"  Active: \" .. (active and \"\u2705 YES\" or \"\u274c NO (\" .. state .. \")\"))\n            log.info(\"  Enabled: \" .. (enabled and \"\u2705 YES\" or \"\u26a0\ufe0f  NO\"))\n\n            if not active then\n                all_healthy = false\n                log.warn(\"  \u26a0\ufe0f  Service is not running!\")\n            end\n        end\n\n        log.info(\"\\n\" .. string.rep(\"=\", 60))\n\n        if all_healthy then\n            log.info(\"\u2705 All services healthy\")\n            return true, \"All OK\"\n        else\n            log.error(\"\u274c Some services are down\")\n            return false, \"Services down\"\n        end\n    end)\n    :timeout(\"60s\")\n    :build()\n\nworkflow.define(\"health_check\")\n    :tasks({ health_check })\n</code></pre>"},{"location":"modules/systemd/#distributed-service-management","title":"Distributed Service Management","text":"<pre><code>local systemd = require(\"systemd\")\n\nlocal restart_all_servers = task(\"restart_nginx\")\n    :description(\"Restart nginx on all servers\")\n    :command(function(this, params)\n        log.info(\"\ud83d\udd04 Restarting nginx...\")\n\n        local success, output = systemd.restart(\"nginx\")\n\n        if success then\n            -- Wait a bit for restart\n            os.execute(\"sleep 2\")\n\n            -- Verify it's running\n            local active, state = systemd.is_active(\"nginx\")\n            if active then\n                log.info(\"\u2705 Nginx restarted on \" .. (this.agent or \"local\"))\n                return true, \"OK\"\n            else\n                log.error(\"\u274c Nginx failed to start: \" .. state)\n                return false, \"Failed\"\n            end\n        end\n\n        return false, \"Restart failed\"\n    end)\n    :delegate_to(\"web-server-1\")\n    :timeout(\"60s\")\n    :build()\n\nworkflow.define(\"rolling_restart\")\n    :tasks({ restart_all_servers })\n</code></pre>"},{"location":"modules/systemd/#service-monitoring","title":"Service Monitoring","text":"<pre><code>local systemd = require(\"systemd\")\n\nlocal monitor_services = task(\"monitor_services\")\n    :description(\"Monitor and report service status\")\n    :command(function(this, params)\n        log.info(\"\ud83d\udcca Service Monitoring Report\")\n        log.info(string.rep(\"=\", 60))\n\n        -- List all failed services\n        local failed, _ = systemd.list_services({ \n            state = \"failed\",\n            no_header = true \n        })\n\n        if failed and failed ~= \"\" then\n            log.warn(\"\\n\u26a0\ufe0f  Failed Services:\")\n            log.warn(failed)\n        else\n            log.info(\"\\n\u2705 No failed services\")\n        end\n\n        -- List active services count\n        local active, _ = systemd.list_services({ \n            state = \"active\",\n            no_header = true \n        })\n\n        if active then\n            local count = 0\n            for _ in active:gmatch(\"[^\\r\\n]+\") do\n                count = count + 1\n            end\n            log.info(\"\\n\ud83d\udcca Active services: \" .. count)\n        end\n\n        log.info(\"\\n\" .. string.rep(\"=\", 60))\n        return true, \"Report complete\"\n    end)\n    :timeout(\"60s\")\n    :build()\n\nworkflow.define(\"monitor\")\n    :tasks({ monitor_services })\n</code></pre>"},{"location":"modules/systemd/#service-update-workflow","title":"Service Update Workflow","text":"<pre><code>local systemd = require(\"systemd\")\n\nlocal update_service = task(\"update_service\")\n    :description(\"Update service configuration\")\n    :command(function(this, params)\n        local service_name = \"webapp\"\n\n        log.info(\"\ud83d\udd04 Updating \" .. service_name .. \"...\")\n\n        -- Check if running\n        local was_active, _ = systemd.is_active(service_name)\n\n        -- Stop if running\n        if was_active then\n            log.info(\"Stopping service...\")\n            systemd.stop(service_name)\n        end\n\n        -- Update service configuration\n        local new_config = {\n            description = \"Updated Web Application\",\n            after = \"network.target\",\n            exec_start = \"/usr/bin/node /app/server.js\",\n            type = \"simple\",\n            user = \"webapp\",\n            working_directory = \"/app\",\n            restart = \"always\",\n            environment = {\n                NODE_ENV = \"production\",\n                PORT = \"3000\",\n                VERSION = \"2.0\"  -- New version\n            }\n        }\n\n        systemd.create_service(service_name, new_config)\n        systemd.daemon_reload()\n\n        -- Start if it was running before\n        if was_active then\n            log.info(\"Starting service...\")\n            systemd.start(service_name)\n\n            -- Verify\n            local active, _ = systemd.is_active(service_name)\n            if active then\n                log.info(\"\u2705 Service updated and running\")\n                return true, \"Updated\"\n            end\n        end\n\n        return true, \"Configuration updated\"\n    end)\n    :timeout(\"120s\")\n    :build()\n\nworkflow.define(\"update\")\n    :tasks({ update_service })\n</code></pre>"},{"location":"modules/systemd/#best-practices","title":"\ud83d\ude80 Best Practices","text":"<ol> <li> <p>Always reload daemon after creating/modifying services: <pre><code>systemd.create_service(\"myservice\", config)\nsystemd.daemon_reload()\n</code></pre></p> </li> <li> <p>Verify service started successfully: <pre><code>systemd.start(\"myservice\")\nlocal active, state = systemd.is_active(\"myservice\")\nif not active then\n    log.error(\"Service failed: \" .. state)\nend\n</code></pre></p> </li> <li> <p>Enable services for persistence: <pre><code>systemd.enable(\"myservice\")  -- Start at boot\n</code></pre></p> </li> <li> <p>Use proper service types:</p> </li> <li><code>simple</code>: Default, process doesn't fork</li> <li><code>forking</code>: Process forks and parent exits</li> <li><code>oneshot</code>: Process exits before systemd continues</li> <li> <p><code>notify</code>: Process sends notification when ready</p> </li> <li> <p>Set restart policies: <pre><code>restart = \"always\"  -- Always restart\nrestart_sec = \"10s\"  -- Wait 10s between restarts\n</code></pre></p> </li> <li> <p>Use delegate_to for distributed management: <pre><code>:delegate_to(\"server-name\")\n</code></pre></p> </li> </ol>"},{"location":"modules/systemd/#security-considerations","title":"\u26a0\ufe0f Security Considerations","text":"<ul> <li>Service files are created in <code>/etc/systemd/system/</code> (requires root/sudo)</li> <li>Always specify <code>user</code> and <code>group</code> to avoid running as root</li> <li>Use <code>WorkingDirectory</code> to isolate service environment</li> <li>Validate environment variables before setting them</li> <li>Use proper file permissions (0644 for service files)</li> </ul>"},{"location":"modules/systemd/#platform-support","title":"\ud83d\udc27 Platform Support","text":"<ul> <li>Linux: Full support (systemd-based distributions)</li> <li>Ubuntu/Debian: \u2705 Supported</li> <li>CentOS/RHEL: \u2705 Supported</li> <li>Fedora: \u2705 Supported</li> <li>Arch Linux: \u2705 Supported</li> <li>macOS: \u274c Not supported (use launchd instead)</li> <li>Windows: \u274c Not supported (use sc.exe or nssm)</li> </ul>"},{"location":"modules/systemd/#see-also","title":"\ud83d\udd17 See Also","text":"<ul> <li>exec Module - For running custom systemctl commands</li> <li>Modern DSL Guide - DSL syntax reference</li> <li>Distributed Agents - Remote execution with delegate_to</li> <li>Official systemd documentation</li> </ul>"},{"location":"modules/terraform/","title":"Terraform Module","text":"<p>The <code>terraform</code> module provides a high-level interface for orchestrating <code>terraform</code> CLI commands, allowing you to manage your infrastructure lifecycle directly from within a Sloth-Runner pipeline.</p>"},{"location":"modules/terraform/#configuration","title":"Configuration","text":"<p>This module requires the <code>terraform</code> CLI to be installed and available in the system's PATH. All commands must be executed within a specific <code>workdir</code> where your <code>.tf</code> files are located.</p>"},{"location":"modules/terraform/#functions","title":"Functions","text":""},{"location":"modules/terraform/#terraforminitparams","title":"<code>terraform.init(params)</code>","text":"<p>Initializes a Terraform working directory.</p> <ul> <li><code>params</code> (table):<ul> <li><code>workdir</code> (string): Required. The path to the directory containing the Terraform files.</li> </ul> </li> <li>Returns: A result table with <code>success</code>, <code>stdout</code>, <code>stderr</code>, and <code>exit_code</code>.</li> </ul>"},{"location":"modules/terraform/#terraformplanparams","title":"<code>terraform.plan(params)</code>","text":"<p>Creates a Terraform execution plan.</p> <ul> <li><code>params</code> (table):<ul> <li><code>workdir</code> (string): Required. The path to the directory.</li> <li><code>out</code> (string): Optional. The filename to save the generated plan to.</li> </ul> </li> <li>Returns: A result table.</li> </ul>"},{"location":"modules/terraform/#terraformapplyparams","title":"<code>terraform.apply(params)</code>","text":"<p>Applies a Terraform plan.</p> <ul> <li><code>params</code> (table):<ul> <li><code>workdir</code> (string): Required. The path to the directory.</li> <li><code>plan</code> (string): Optional. The path to a plan file to apply.</li> <li><code>auto_approve</code> (boolean): Optional. If <code>true</code>, applies changes without interactive approval.</li> </ul> </li> <li>Returns: A result table.</li> </ul>"},{"location":"modules/terraform/#terraformdestroyparams","title":"<code>terraform.destroy(params)</code>","text":"<p>Destroys Terraform-managed infrastructure.</p> <ul> <li><code>params</code> (table):<ul> <li><code>workdir</code> (string): Required. The path to the directory.</li> <li><code>auto_approve</code> (boolean): Optional. If <code>true</code>, destroys resources without interactive approval.</li> </ul> </li> <li>Returns: A result table.</li> </ul>"},{"location":"modules/terraform/#terraformoutputparams","title":"<code>terraform.output(params)</code>","text":"<p>Reads an output variable from a Terraform state file.</p> <ul> <li><code>params</code> (table):<ul> <li><code>workdir</code> (string): Required. The path to the directory.</li> <li><code>name</code> (string): Optional. The name of a specific output to read. If omitted, all outputs are returned as a table.</li> </ul> </li> <li>Returns:<ul> <li>On success: The parsed JSON value of the output (can be a string, table, etc.).</li> <li>On failure: <code>nil, error_message</code>.</li> </ul> </li> </ul>"},{"location":"modules/terraform/#full-lifecycle-example","title":"Full Lifecycle Example","text":"<pre><code>local tf_workdir = \"./examples/terraform\"\n\n-- Task 1: Init\nlocal result_init = terraform.init({workdir = tf_workdir})\nif not result_init.success then return false, \"Init failed\" end\n\n-- Task 2: Plan\nlocal result_plan = terraform.plan({workdir = tf_workdir})\nif not result_plan.success then return false, \"Plan failed\" end\n\n-- Task 3: Apply\nlocal result_apply = terraform.apply({workdir = tf_workdir, auto_approve = true})\nif not result_apply.success then return false, \"Apply failed\" end\n\n-- Task 4: Get Output\nlocal filename, err = terraform.output({workdir = tf_workdir, name = \"report_filename\"})\nif not filename then return false, \"Output failed: \" .. err end\nlog.info(\"Terraform created file: \" .. filename)\n\n-- Task 5: Destroy\nlocal result_destroy = terraform.destroy({workdir = tf_workdir, auto_approve = true})\nif not result_destroy.success then return false, \"Destroy failed\" end\n</code></pre>"},{"location":"modules/user/","title":"User Module \ud83d\udc64","text":"<p>O m\u00f3dulo user fornece funcionalidades completas de gerenciamento de usu\u00e1rios e grupos em sistemas Linux/Unix. Ele permite criar, modificar, deletar e consultar usu\u00e1rios e grupos de forma program\u00e1tica.</p>"},{"location":"modules/user/#importacao","title":"\ud83d\udce6 Importa\u00e7\u00e3o","text":"<pre><code>local user = require(\"user\")\n</code></pre>"},{"location":"modules/user/#funcionalidades-principais","title":"\ud83d\ude80 Funcionalidades Principais","text":""},{"location":"modules/user/#gerenciamento-de-usuarios","title":"Gerenciamento de Usu\u00e1rios","text":""},{"location":"modules/user/#usercreateusername-options","title":"user.create(username, options)","text":"<p>Cria um novo usu\u00e1rio no sistema.</p> <p>Par\u00e2metros: - <code>username</code> (string): Nome do usu\u00e1rio a ser criado - <code>options</code> (table, opcional): Op\u00e7\u00f5es de configura\u00e7\u00e3o do usu\u00e1rio   - <code>password</code>: Senha do usu\u00e1rio (ser\u00e1 configurada automaticamente)   - <code>home</code>: Diret\u00f3rio home do usu\u00e1rio   - <code>shell</code>: Shell padr\u00e3o do usu\u00e1rio   - <code>uid</code>: UID espec\u00edfico para o usu\u00e1rio   - <code>gid</code>: GID do grupo prim\u00e1rio   - <code>groups</code>: Lista de grupos secund\u00e1rios (separados por v\u00edrgula)   - <code>comment</code>: Coment\u00e1rio/GECOS do usu\u00e1rio   - <code>system</code>: Marcar como usu\u00e1rio de sistema   - <code>create_home</code>: Criar diret\u00f3rio home   - <code>no_create_home</code>: N\u00e3o criar diret\u00f3rio home   - <code>expiry</code>: Data de expira\u00e7\u00e3o (formato: YYYY-MM-DD)</p> <p>Retorna: <code>success (boolean), message (string)</code></p> <p>Exemplo:</p> <pre><code>task(\"create-user\", {\n    action = function()\n        local user = require(\"user\")\n\n        -- Criar usu\u00e1rio simples\n        local ok, msg = user.create(\"john\")\n        if not ok then\n            error(\"Failed to create user: \" .. msg)\n        end\n\n        -- Criar usu\u00e1rio com op\u00e7\u00f5es avan\u00e7adas e senha\n        local ok, msg = user.create(\"devops\", {\n            password = \"SecureP@ssw0rd!\",\n            home = \"/home/devops\",\n            shell = \"/bin/bash\",\n            groups = \"docker,wheel\",\n            comment = \"DevOps Engineer\",\n            create_home = true\n        })\n\n        print(\"User created successfully!\")\n    end\n})\n</code></pre> <p>Exemplo com delegate_to:</p> <pre><code>task(\"create-remote-user\", {\n    action = function()\n        local user = require(\"user\")\n\n        -- Criar usu\u00e1rio em servidor remoto com senha\n        delegate_to(\"production-server\", function()\n            local ok, msg = user.create(\"appuser\", {\n                password = \"MyS3cretP@ss\",\n                shell = \"/bin/bash\",\n                groups = \"www-data\",\n                system = true,\n                no_create_home = true\n            })\n\n            if ok then\n                print(\"User created on remote server\")\n            end\n        end)\n    end\n})\n</code></pre>"},{"location":"modules/user/#userdeleteusername-remove_home","title":"user.delete(username, remove_home)","text":"<p>Remove um usu\u00e1rio do sistema.</p> <p>Par\u00e2metros: - <code>username</code> (string): Nome do usu\u00e1rio a ser removido - <code>remove_home</code> (boolean, opcional): Remover tamb\u00e9m o diret\u00f3rio home (padr\u00e3o: false)</p> <p>Retorna: <code>success (boolean), message (string)</code></p> <p>Exemplo:</p> <pre><code>task(\"cleanup-users\", {\n    action = function()\n        local user = require(\"user\")\n\n        -- Deletar usu\u00e1rio mantendo o home\n        user.delete(\"tempuser\")\n\n        -- Deletar usu\u00e1rio e seu diret\u00f3rio home\n        user.delete(\"olduser\", true)\n    end\n})\n</code></pre> <p>[... continues with full documentation ...]</p>"},{"location":"pt/","title":"Documenta\u00e7\u00e3o do Sloth-Runner","text":"<p>Bem-vindo \u00e0 documenta\u00e7\u00e3o completa do Sloth-Runner, sua ferramenta flex\u00edvel para automa\u00e7\u00e3o de tarefas e orquestra\u00e7\u00e3o de fluxos de trabalho usando scripts Lua.</p> <p>Aqui voc\u00ea encontrar\u00e1 guias detalhados, refer\u00eancias de API e exemplos pr\u00e1ticos para aproveitar ao m\u00e1ximo o poder do Sloth-Runner.</p>"},{"location":"pt/#indice","title":"\u00cdndice","text":"<ul> <li>Agendador de Tarefas</li> <li>In\u00edcio R\u00e1pido</li> <li>Conceitos Essenciais</li> <li>Exemplos Pr\u00e1ticos</li> <li>Funcionalidades Avan\u00e7adas</li> <li>REPL Interativo</li> <li>M\u00f3dulos Built-in:<ul> <li>M\u00f3dulo AWS</li> <li>M\u00f3dulo Azure</li> <li>M\u00f3dulo DigitalOcean</li> <li>M\u00f3dulo Docker</li> <li>M\u00f3dulo Git</li> <li>M\u00f3dulo Pulumi</li> <li>M\u00f3dulo Salt</li> <li>M\u00f3dulo Terraform</li> </ul> </li> <li>Exemplos Avan\u00e7ados</li> </ul>"},{"location":"pt/CLI/","title":"\ud83d\ude80 Sloth Runner CLI Reference","text":"<p>Complete command-line interface reference for Sloth Runner - the AI-powered GitOps task orchestration platform.</p>"},{"location":"pt/CLI/#overview","title":"Overview","text":"<p>Sloth Runner provides a comprehensive CLI for task execution, agent management, scheduling, and workflow orchestration.</p> <p>Main Commands:</p> <pre><code>sloth-runner [command] [flags]\n</code></pre> Command Description <code>run</code> Execute tasks from workflow files <code>agent</code> Manage distributed agents <code>master</code> Start the master coordination server <code>scheduler</code> Manage scheduled tasks <code>stack</code> Manage workflow stacks and state <code>ui</code> Start the web dashboard <code>workflow</code> Create and manage workflows <code>list</code> List tasks from workflow files <code>version</code> Show version information"},{"location":"pt/CLI/#sloth-runner-run","title":"<code>sloth-runner run</code>","text":"<p>Execute tasks defined in <code>.sloth</code> workflow files with multiple output formats and state persistence.</p>"},{"location":"pt/CLI/#usage","title":"Usage","text":"<pre><code>sloth-runner run [file.sloth|stack-name] [flags]\n</code></pre>"},{"location":"pt/CLI/#flags","title":"Flags","text":"Flag Type Description <code>-f, --file</code> string Path to the Lua/Sloth task file <code>-o, --output</code> string Output style: <code>basic</code>, <code>enhanced</code>, <code>rich</code>, <code>modern</code>, <code>json</code> (default: <code>basic</code>) <code>-v, --values</code> string Path to values file (YAML/JSON) for parameterization <code>--interactive</code> bool Run in interactive mode with prompts <code>--yes</code> bool Skip confirmation prompts"},{"location":"pt/CLI/#output-styles","title":"Output Styles","text":"<ul> <li>basic: Simple text output</li> <li>enhanced: Colored output with icons</li> <li>rich: Detailed output with progress bars</li> <li>modern: Modern UI with animations</li> <li>json: Machine-readable JSON output</li> </ul>"},{"location":"pt/CLI/#examples","title":"Examples","text":"<pre><code># Run with modern output style\nsloth-runner run -f deploy.sloth -o modern\n\n# Run with values file\nsloth-runner run -f infra.sloth -v prod-values.yaml\n\n# Run from stack\nsloth-runner run prod-stack --yes\n\n# Interactive mode\nsloth-runner run -f tasks.sloth --interactive\n\n# JSON output for CI/CD\nsloth-runner run -f ci.sloth -o json\n</code></pre>"},{"location":"pt/CLI/#sloth-runner-agent","title":"<code>sloth-runner agent</code>","text":"<p>Manage distributed agents for remote task execution.</p>"},{"location":"pt/CLI/#subcommands","title":"Subcommands","text":""},{"location":"pt/CLI/#agent-start","title":"<code>agent start</code>","text":"<p>Start an agent in agent mode to accept tasks from master server.</p> <pre><code>sloth-runner agent start [flags]\n</code></pre> <p>Flags: - <code>--master string</code>: Master server address (default: <code>localhost:50053</code>) - <code>--name string</code>: Agent name identifier - <code>--tags string</code>: Comma-separated tags for agent capabilities - <code>--daemon</code>: Run as background daemon</p> <p>Example: <pre><code># Start agent with tags\nsloth-runner agent start --master master.example.com:50053 \\\n  --name prod-agent-1 \\\n  --tags linux,docker,aws\n\n# Start as daemon\nsloth-runner agent start --daemon --name bg-agent\n</code></pre></p>"},{"location":"pt/CLI/#agent-list","title":"<code>agent list</code>","text":"<p>List all registered agents with their status.</p> <pre><code>sloth-runner agent list [flags]\n</code></pre> <p>Flags: - <code>--master string</code>: Master server address</p> <p>Example: <pre><code>sloth-runner agent list --master master.example.com:50053\n</code></pre></p>"},{"location":"pt/CLI/#agent-exec","title":"<code>agent exec</code>","text":"<p>Execute a command on a remote agent.</p> <pre><code>sloth-runner agent exec &lt;agent_name&gt; &lt;command&gt; [flags]\n</code></pre> <p>Flags: - <code>--master string</code>: Master server address (or use SLOTH_RUNNER_MASTER_ADDR env var) - <code>-o, --output string</code>: Output format: text or json (default: text)</p> <p>Example: <pre><code># Using --master flag\nsloth-runner agent exec prod-agent-1 \"docker ps\" --master master.example.com:50053\n\n# Using environment variable\nSLOTH_RUNNER_MASTER_ADDR=master.example.com:50053 sloth-runner agent exec prod-agent-1 \"docker ps\"\n</code></pre></p>"},{"location":"pt/CLI/#agent-stop","title":"<code>agent stop</code>","text":"<p>Stop a remote agent gracefully.</p> <pre><code>sloth-runner agent stop [flags]\n</code></pre> <p>Flags: - <code>--agent string</code>: Agent name to stop - <code>--master string</code>: Master server address</p>"},{"location":"pt/CLI/#agent-delete","title":"<code>agent delete</code>","text":"<p>Delete an agent from the registry.</p> <pre><code>sloth-runner agent delete [flags]\n</code></pre>"},{"location":"pt/CLI/#sloth-runner-master","title":"<code>sloth-runner master</code>","text":"<p>Start the master coordination server for managing distributed agents.</p>"},{"location":"pt/CLI/#usage_1","title":"Usage","text":"<pre><code>sloth-runner master [flags]\n</code></pre>"},{"location":"pt/CLI/#flags_1","title":"Flags","text":"Flag Type Description <code>-p, --port</code> int Port to listen on (default: <code>50053</code>) <code>--daemon</code> bool Run as background daemon <code>--debug</code> bool Enable debug logging"},{"location":"pt/CLI/#examples_1","title":"Examples","text":"<pre><code># Start master server\nsloth-runner master --port 50053\n\n# Start as daemon with debug\nsloth-runner master --daemon --debug\n\n# Custom port\nsloth-runner master --port 9000\n</code></pre>"},{"location":"pt/CLI/#sloth-runner-scheduler","title":"<code>sloth-runner scheduler</code>","text":"<p>Manage scheduled tasks for automated execution.</p>"},{"location":"pt/CLI/#subcommands_1","title":"Subcommands","text":""},{"location":"pt/CLI/#scheduler-enable","title":"<code>scheduler enable</code>","text":"<p>Enable the scheduler service.</p> <pre><code>sloth-runner scheduler enable\n</code></pre>"},{"location":"pt/CLI/#scheduler-disable","title":"<code>scheduler disable</code>","text":"<p>Disable the scheduler service.</p> <pre><code>sloth-runner scheduler disable\n</code></pre>"},{"location":"pt/CLI/#scheduler-list","title":"<code>scheduler list</code>","text":"<p>List all scheduled tasks with their configuration.</p> <pre><code>sloth-runner scheduler list [flags]\n</code></pre> <p>Output: - Task name - Schedule (cron expression) - Next run time - Status (enabled/disabled)</p> <p>Example: <pre><code>sloth-runner scheduler list\n</code></pre></p>"},{"location":"pt/CLI/#scheduler-delete","title":"<code>scheduler delete</code>","text":"<p>Delete a scheduled task.</p> <pre><code>sloth-runner scheduler delete [task-name]\n</code></pre>"},{"location":"pt/CLI/#sloth-runner-stack","title":"<code>sloth-runner stack</code>","text":"<p>Manage workflow stacks for state persistence and environment isolation.</p>"},{"location":"pt/CLI/#subcommands_2","title":"Subcommands","text":""},{"location":"pt/CLI/#stack-new","title":"<code>stack new</code>","text":"<p>Create a new workflow stack.</p> <pre><code>sloth-runner stack new [stack-name] [flags]\n</code></pre> <p>Flags: - <code>-f, --file string</code>: Workflow file to associate - <code>--description string</code>: Stack description</p> <p>Example: <pre><code>sloth-runner stack new prod-infra \\\n  -f infrastructure.sloth \\\n  --description \"Production infrastructure stack\"\n</code></pre></p>"},{"location":"pt/CLI/#stack-list","title":"<code>stack list</code>","text":"<p>List all workflow stacks.</p> <pre><code>sloth-runner stack list\n</code></pre> <p>Output: - Stack name - Workflow file - State status - Last updated</p>"},{"location":"pt/CLI/#stack-show","title":"<code>stack show</code>","text":"<p>Show detailed information about a stack.</p> <pre><code>sloth-runner stack show [stack-name]\n</code></pre> <p>Output: - Stack configuration - State variables - Execution history - Associated resources</p>"},{"location":"pt/CLI/#stack-delete","title":"<code>stack delete</code>","text":"<p>Delete a workflow stack and its state.</p> <pre><code>sloth-runner stack delete [stack-name] [flags]\n</code></pre> <p>Flags: - <code>--force</code>: Force deletion without confirmation</p>"},{"location":"pt/CLI/#sloth-runner-ui","title":"<code>sloth-runner ui</code>","text":"<p>Start the web-based dashboard for visual management.</p>"},{"location":"pt/CLI/#usage_2","title":"Usage","text":"<pre><code>sloth-runner ui [flags]\n</code></pre>"},{"location":"pt/CLI/#flags_2","title":"Flags","text":"Flag Type Description <code>-p, --port</code> int Port for UI server (default: <code>8080</code>) <code>--daemon</code> bool Run as background daemon <code>--debug</code> bool Enable debug logging"},{"location":"pt/CLI/#features","title":"Features","text":"<ul> <li>\ud83d\udcca Real-time task monitoring</li> <li>\ud83e\udd16 Agent health dashboard</li> <li>\ud83d\udcc5 Scheduler management</li> <li>\ud83d\udce6 Stack browser</li> <li>\ud83d\udcc8 Metrics and analytics</li> </ul>"},{"location":"pt/CLI/#examples_2","title":"Examples","text":"<pre><code># Start UI on default port\nsloth-runner ui\n\n# Custom port\nsloth-runner ui --port 3000\n\n# Run as daemon\nsloth-runner ui --daemon --port 8080\n</code></pre> <p>Access at: <code>http://localhost:8080</code></p>"},{"location":"pt/CLI/#sloth-runner-workflow","title":"<code>sloth-runner workflow</code>","text":"<p>Create and manage workflow projects with scaffolding.</p>"},{"location":"pt/CLI/#subcommands_3","title":"Subcommands","text":""},{"location":"pt/CLI/#workflow-init","title":"<code>workflow init</code>","text":"<p>Initialize a new workflow project with templates.</p> <pre><code>sloth-runner workflow init [project-name] [flags]\n</code></pre> <p>Flags: - <code>--template string</code>: Template to use (default: <code>basic</code>) - <code>--path string</code>: Target directory</p> <p>Available Templates: - <code>basic</code>: Simple task workflow - <code>cicd</code>: CI/CD pipeline - <code>infra</code>: Infrastructure automation - <code>gitops</code>: GitOps deployment</p> <p>Example: <pre><code># Create CI/CD project\nsloth-runner workflow init my-pipeline --template cicd\n\n# Custom path\nsloth-runner workflow init my-project --template infra --path ./projects/\n</code></pre></p>"},{"location":"pt/CLI/#workflow-list-templates","title":"<code>workflow list-templates</code>","text":"<p>List all available workflow templates.</p> <pre><code>sloth-runner workflow list-templates\n</code></pre>"},{"location":"pt/CLI/#sloth-runner-list","title":"<code>sloth-runner list</code>","text":"<p>List tasks and task groups from a workflow file without execution.</p>"},{"location":"pt/CLI/#usage_3","title":"Usage","text":"<pre><code>sloth-runner list [flags]\nsloth-runner list [flags]\n</code></pre> <p>Flags:</p> <ul> <li><code>-f, --file string</code>: (Required) Path to the Lua task configuration file.</li> <li><code>-v, --values string</code>: Path to a YAML values file, in case your task definitions depend on it.</li> </ul>"},{"location":"pt/CLI/#sloth-runner-new","title":"<code>sloth-runner new</code>","text":"<p>Generates a new boilerplate Lua task definition file from a template.</p> <p>Usage: <pre><code>sloth-runner new &lt;group-name&gt; [flags]\n</code></pre></p> <p>Arguments:</p> <ul> <li><code>&lt;group-name&gt;</code>: The name of the main task group to be created in the file.</li> </ul> <p>Flags:</p> <ul> <li><code>-t, --template string</code>: The template to use. Default is <code>simple</code>. Run <code>sloth-runner template list</code> to see all available options.</li> <li><code>-o, --output string</code>: The path to the output file. If not provided, the generated content will be printed to stdout.</li> </ul> <pre><code>sloth-runner list [flags]\n</code></pre>"},{"location":"pt/CLI/#flags_3","title":"Flags","text":"Flag Type Description <code>-f, --file</code> string Path to workflow file"},{"location":"pt/CLI/#output","title":"Output","text":"<ul> <li>Task groups</li> <li>Task names</li> <li>Descriptions</li> <li>Dependencies</li> <li>Conditions</li> </ul>"},{"location":"pt/CLI/#example","title":"Example","text":"<pre><code>sloth-runner list -f deploy.sloth\n</code></pre>"},{"location":"pt/CLI/#sloth-runner-version","title":"<code>sloth-runner version</code>","text":"<p>Display version and build information.</p>"},{"location":"pt/CLI/#usage_4","title":"Usage","text":"<pre><code>sloth-runner version\n</code></pre>"},{"location":"pt/CLI/#output_1","title":"Output","text":"<ul> <li>Version number</li> <li>Git commit hash</li> <li>Build date</li> <li>Go version</li> </ul>"},{"location":"pt/CLI/#global-flags","title":"Global Flags","text":"<p>Available for all commands:</p> Flag Description <code>-h, --help</code> Show command help <code>--debug</code> Enable debug output <code>--config string</code> Config file path (default: <code>~/.sloth-runner/config.yaml</code>)"},{"location":"pt/CLI/#configuration-file","title":"Configuration File","text":"<p>Sloth Runner supports configuration via <code>~/.sloth-runner/config.yaml</code>:</p> <pre><code># Master server settings\nmaster:\n  host: localhost\n  port: 50053\n\n# Agent settings\nagent:\n  name: my-agent\n  tags:\n    - linux\n    - docker\n  reconnect: true\n\n# UI settings\nui:\n  port: 8080\n  theme: dark\n\n# Scheduler settings\nscheduler:\n  enabled: true\n  timezone: UTC\n</code></pre>"},{"location":"pt/CLI/#environment-variables","title":"Environment Variables","text":"<p>Override configuration with environment variables:</p> Variable Description <code>SLOTH_MASTER_HOST</code> Master server host <code>SLOTH_MASTER_PORT</code> Master server port <code>SLOTH_AGENT_NAME</code> Agent identifier <code>SLOTH_UI_PORT</code> UI server port <code>SLOTH_DEBUG</code> Enable debug mode"},{"location":"pt/CLI/#exit-codes","title":"Exit Codes","text":"Code Meaning <code>0</code> Success <code>1</code> General error <code>2</code> Task execution failed <code>3</code> Configuration error <code>4</code> Network/connection error <code>5</code> State management error"},{"location":"pt/CLI/#examples_3","title":"Examples","text":""},{"location":"pt/CLI/#complete-cicd-pipeline","title":"Complete CI/CD Pipeline","text":"<pre><code># Initialize project\nsloth-runner workflow init my-app --template cicd\n\n# Run tests\nsloth-runner run -f my-app/.sloth/test.sloth -o rich\n\n# Deploy to staging\nsloth-runner run staging-stack --yes\n\n# Check agent status\nsloth-runner agent list --master ci-master:50053\n\n# Schedule nightly builds\nsloth-runner scheduler add nightly-build \\\n  --cron \"0 0 * * *\" \\\n  --workflow build.sloth\n</code></pre>"},{"location":"pt/CLI/#infrastructure-automation","title":"Infrastructure Automation","text":"<pre><code># Create infrastructure stack\nsloth-runner stack new prod-infra -f infrastructure.sloth\n\n# Apply with modern output\nsloth-runner run prod-infra -o modern\n\n# Show stack state\nsloth-runner stack show prod-infra\n\n# Teardown\nsloth-runner stack delete prod-infra --force\n</code></pre>"},{"location":"pt/CLI/#distributed-task-execution","title":"Distributed Task Execution","text":"<pre><code># Start master server\nsloth-runner master --port 50053 --daemon\n\n# Start agents on different servers\nsloth-runner agent start --master master:50053 --name web-1 --tags web,nginx\nsloth-runner agent start --master master:50053 --name db-1 --tags database,postgres\n\n# Execute on specific agent\nsloth-runner agent exec web-1 \"systemctl status nginx\" --master master:50053\n\n# Start UI for monitoring\nsloth-runner ui --port 8080\n</code></pre>"},{"location":"pt/CLI/#best-practices","title":"Best Practices","text":""},{"location":"pt/CLI/#1-use-stacks-for-state-management","title":"1. Use Stacks for State Management","text":"<pre><code># Don't: Run without state\nsloth-runner run -f deploy.sloth\n\n# Do: Use stacks for persistence\nsloth-runner stack new prod\nsloth-runner run prod\n</code></pre>"},{"location":"pt/CLI/#2-specify-output-format-for-cicd","title":"2. Specify Output Format for CI/CD","text":"<pre><code># JSON for parsing\nsloth-runner run -f ci.sloth -o json &gt; results.json\n\n# Rich for interactive\nsloth-runner run -f deploy.sloth -o rich\n</code></pre>"},{"location":"pt/CLI/#3-use-values-files-for-environments","title":"3. Use Values Files for Environments","text":"<pre><code># Development\nsloth-runner run -f app.sloth -v dev-values.yaml\n\n# Production\nsloth-runner run -f app.sloth -v prod-values.yaml\n</code></pre>"},{"location":"pt/CLI/#4-tag-agents-appropriately","title":"4. Tag Agents Appropriately","text":"<pre><code># Specific capabilities\nsloth-runner agent start --tags \"linux,docker,aws,x86_64\"\n\n# Environment-based\nsloth-runner agent start --tags \"prod,us-east-1\"\n</code></pre>"},{"location":"pt/CLI/#troubleshooting","title":"Troubleshooting","text":""},{"location":"pt/CLI/#connection-issues","title":"Connection Issues","text":"<pre><code># Test master connectivity\ncurl http://master:50053/health\n\n# Check agent logs\nsloth-runner agent start --debug\n</code></pre>"},{"location":"pt/CLI/#task-execution-failures","title":"Task Execution Failures","text":"<pre><code># Run with debug output\nsloth-runner run -f task.sloth --debug\n\n# Interactive mode for troubleshooting\nsloth-runner run -f task.sloth --interactive\n</code></pre>"},{"location":"pt/CLI/#state-issues","title":"State Issues","text":"<pre><code># View stack state\nsloth-runner stack show my-stack\n\n# Reset stack (careful!)\nsloth-runner stack delete my-stack\nsloth-runner stack new my-stack -f workflow.sloth\n</code></pre>"},{"location":"pt/CLI/#related-documentation","title":"Related Documentation","text":"<ul> <li>Getting Started</li> <li>Core Concepts</li> <li>Agent Architecture</li> <li>Scheduler Guide</li> <li>Web Dashboard</li> <li>Stack Management</li> </ul>"},{"location":"pt/CLI/#see-also","title":"See Also","text":"<ul> <li>REPL Interactive Shell</li> <li>Modern DSL Syntax</li> <li>Module Reference</li> <li>Examples Repository</li> </ul> <p>Need more help? Run <code>sloth-runner [command] --help</code> for detailed information about any command.</p>"},{"location":"pt/CLI/#sloth-runner-version_1","title":"<code>sloth-runner version</code>","text":"<p>Displays the current version of <code>sloth-runner</code>.</p> <pre><code>sloth-runner version\n</code></pre>"},{"location":"pt/CLI/#sloth-runner-scheduler_1","title":"<code>sloth-runner scheduler</code>","text":"<p>Manages the <code>sloth-runner</code> task scheduler, allowing you to enable, disable, list, and delete scheduled tasks.</p> <p>For detailed information on scheduler commands and configuration, refer to the Task Scheduler documentation.</p> <p>Subcommands:</p> <ul> <li><code>sloth-runner scheduler enable</code>: Starts the scheduler as a background process.</li> <li><code>sloth-runner scheduler disable</code>: Stops the running scheduler process.</li> <li><code>sloth-runner scheduler list</code>: Lists all configured scheduled tasks.</li> <li><code>sloth-runner scheduler delete &lt;task_name&gt;</code>: Deletes a specific scheduled task.</li> </ul>"},{"location":"pt/advanced-examples/","title":"Exemplos Avan\u00e7ados","text":"<p>Esta se\u00e7\u00e3o apresenta exemplos mais complexos e cen\u00e1rios de uso que combinam m\u00faltiplos m\u00f3dulos do Sloth-Runner para automa\u00e7\u00e3o de ponta a ponta.</p>"},{"location":"pt/advanced-examples/#exemplo-completo-pipeline-de-cicd-end-to-end","title":"Exemplo Completo: Pipeline de CI/CD End-to-End","text":"<p>Este tutorial demonstra como construir um pipeline de CI/CD completo usando os m\u00f3dulos <code>git</code>, <code>pulumi</code> e <code>salt</code> para versionar c\u00f3digo, provisionar infraestrutura e implantar uma aplica\u00e7\u00e3o.</p>"},{"location":"pt/advanced-examples/#cenario","title":"Cen\u00e1rio","text":"<p>Imagine que voc\u00ea tem um projeto de infraestrutura Pulumi e um projeto de aplica\u00e7\u00e3o. Voc\u00ea quer automatizar o seguinte fluxo:</p> <ol> <li>Clonar o reposit\u00f3rio da infraestrutura.</li> <li>Atualizar um arquivo de vers\u00e3o dentro do reposit\u00f3rio.</li> <li>Committar e empurrar essa altera\u00e7\u00e3o para o Git.</li> <li>Executar <code>pulumi up</code> para provisionar ou atualizar a infraestrutura (por exemplo, um ambiente de staging).</li> <li>Usar o Salt para configurar os servidores provisionados e implantar a aplica\u00e7\u00e3o.</li> </ol>"},{"location":"pt/advanced-examples/#script-lua-examplespulumi_git_combined_examplesloth","title":"Script Lua (<code>examples/pulumi_git_combined_example.sloth</code>)","text":"<pre><code>-- examples/pulumi_git_combined_example.sloth\n\ncommand = function(params)\n    log.info(\"Iniciando exemplo combinado Pulumi e Git...\")\n\n    local pulumi_repo_url = \"https://github.com/my-org/my-pulumi-infra.git\" -- Exemplo de repo Pulumi\n    local pulumi_repo_path = \"./pulumi-infra-checkout\"\n    local new_infra_version = params.infra_version or \"v1.0.0-infra\"\n    local pulumi_project_workdir = pulumi_repo_path .. \"/my-vpc-project\" -- Subdiret\u00f3rio dentro do repo clonado\n    local repo\n\n    -- 1. Clonar ou abrir o reposit\u00f3rio Pulumi\n    log.info(\"Step 1: Cloning or opening Pulumi repository...\")\n    if not fs.exists(pulumi_repo_path) then\n        log.info(\"Cloning Pulumi repository: \" .. pulumi_repo_url)\n        local cloned_repo, clone_err = git.clone(pulumi_repo_url, pulumi_repo_path)\n        if clone_err then\n            log.error(\"Failed to clone Pulumi repository: \" .. clone_err)\n            return false, \"Git clone failed.\"\n        end\n        repo = cloned_repo\n    else\n        log.info(\"Pulumi repository already exists, opening local reference.\")\n        local opened_repo, open_err = git.repo(pulumi_repo_path)\n        if open_err then\n            log.error(\"Failed to open Pulumi repository: \" .. open_err)\n            return false, \"Git repo open failed.\"\n        end\n        repo = opened_repo\n    end\n\n    if not repo then\n        return false, \"Failed to get Pulumi repository reference.\"\n    end\n\n    -- 2. Atualizar o reposit\u00f3rio (pull)\n    log.info(\"Step 2: Pulling latest changes from Pulumi repository...\")\n    repo:checkout(\"main\"):pull(\"origin\", \"main\")\n    local pull_result = repo:result()\n    if not pull_result.success then\n        log.error(\"Failed to pull Pulumi repository: \" .. pull_result.stderr)\n        return false, \"Git pull failed.\"\n    end\n    log.info(\"Pulumi repository updated. Stdout: \" .. pull_result.stdout)\n\n    -- 3. Simular uma altera\u00e7\u00e3o no c\u00f3digo Pulumi (e.g., atualizar um arquivo de vers\u00e3o)\n    log.info(\"Step 3: Simulating a change in Pulumi code (updating version file)...\")\n    local infra_version_file = pulumi_repo_path .. \"/INFRA_VERSION\"\n    fs.write(infra_version_file, new_infra_version)\n    log.info(\"Updated INFRA_VERSION file to: \" .. new_infra_version)\n\n    -- 4. Commitar e empurrar as mudan\u00e7as\n    log.info(\"Step 4: Committing and pushing infrastructure version change...\")\n    local commit_message = \"ci: Bump infrastructure version to \" .. new_infra_version\n    repo:add(infra_version_file)\n        :commit(commit_message)\n        :push(\"origin\", \"main\") -- Sem follow_tags aqui, apenas o commit\n\n    local push_result = repo:result()\n    if not push_result.success then\n        log.error(\"Failed to push infrastructure changes: \" .. push_result.stderr)\n        return false, \"Git push failed for infra changes.\"\n    end\n    log.info(\"Infrastructure version change pushed. Stdout: \" .. push_result.stdout)\n\n    -- 5. Executar 'pulumi up' para o projeto\n    log.info(\"Step 5: Running pulumi up for the infrastructure project...\")\n    local infra_stack = pulumi.stack(\"my-org/my-infra/dev\", {\n        workdir = pulumi_project_workdir -- Usar o subdiret\u00f3rio do projeto Pulumi\n    })\n\n    local pulumi_up_result = infra_stack:up({ non_interactive = true })\n\n    if not pulumi_up_result.success then\n        log.error(\"Pulumi up failed: \" .. pulumi_up_result.stderr)\n        return false, \"Pulumi up failed.\"\n    end\n    log.info(\"Pulumi up completed successfully. Stdout: \" .. pulumi_up_result.stdout)\n\n    -- 6. Configurar e implantar a aplica\u00e7\u00e3o usando Salt (Exemplo)\n    log.info(\"Step 6: Configuring and deploying application using Salt...\")\n    -- Assumindo que o Pulumi up forneceu o IP ou hostname do servidor\n    -- Para este exemplo, vamos usar um IP fict\u00edcio\n    local server_ip = \"192.168.1.100\" -- Substitua pelo output real do Pulumi, se houver\n    local salt_target = salt.target(server_ip)\n\n    log.info(\"Running Salt test.ping on \" .. server_ip .. \"...\")\n    salt_target:ping()\n    local ping_result = salt_target:result()\n    if not ping_result.success then\n        log.error(\"Salt ping failed for \" .. server_ip .. \": \" .. ping_result.stderr)\n        return false, \"Salt ping failed.\"\n    end\n    log.info(\"Salt ping successful. Stdout: \" .. data.to_json(ping_result.stdout)) -- Assumindo que ping retorna JSON\n\n    log.info(\"Applying Salt state 'app.install' on \" .. server_ip .. \"...\")\n    salt_target:cmd('state.apply', 'app.install')\n    local salt_apply_result = salt_target:result()\n    if not salt_apply_result.success then\n        log.error(\"Salt state.apply failed for \" .. server_ip .. \": \" .. salt_apply_result.stderr)\n        return false, \"Salt state.apply failed.\"\n    end\n    log.info(\"Salt state.apply successful. Stdout: \" .. data.to_json(salt_apply_result.stdout))\n\n    log.info(\"Exemplo combinado Pulumi e Git conclu\u00eddo com sucesso.\")\n    return true, \"Combined Pulumi and Git example finished.\"\nend\n\nModern DSLs = {\n    pulumi_git_combined_example = {\n        description = \"Demonstrates combined usage of 'pulumi' and 'git' modules for CI/CD pipeline.\",\n        tasks = {\n            {\n                name = \"run_combined_example\",\n                command = command,\n                params = {\n                    infra_version = \"v1.0.0-test-combined\"\n                }\n            }\n        }\n    }\n}\n</code></pre> <p>English | Portugu\u00eas | \u4e2d\u6587</p>"},{"location":"pt/advanced-features/","title":"Funcionalidades Avan\u00e7adas","text":"<p>Este documento aborda algumas das funcionalidades mais avan\u00e7adas do <code>sloth-runner</code>, projetadas para aprimorar seus fluxos de trabalho de desenvolvimento, depura\u00e7\u00e3o e configura\u00e7\u00e3o.</p>"},{"location":"pt/advanced-features/#executor-de-tarefas-interativo","title":"Executor de Tarefas Interativo","text":"<p>Para fluxos de trabalho complexos, pode ser \u00fatil percorrer as tarefas uma a uma, inspecionar suas sa\u00eddas e decidir se deve prosseguir, pular ou tentar novamente uma tarefa. O executor de tarefas interativo fornece uma maneira poderosa de depurar e desenvolver seus pipelines de tarefas.</p> <p>Para usar o executor interativo, adicione a flag <code>--interactive</code> ao comando <code>sloth-runner run</code>:</p> <pre><code>sloth-runner run -f examples/basic_pipeline.sloth --yes --interactive\n</code></pre> <p>Quando habilitado, o executor pausar\u00e1 antes de executar cada tarefa e solicitar\u00e1 uma a\u00e7\u00e3o:</p> <pre><code>? Tarefa: fetch_data (Simula a busca de dados brutos)\n&gt; executar\n  pular\n  abortar\n  continuar\n</code></pre> <p>A\u00e7\u00f5es:</p> <ul> <li>executar: (Padr\u00e3o) Prossegue com a execu\u00e7\u00e3o da tarefa atual.</li> <li>pular: Pula a tarefa atual e passa para a pr\u00f3xima na ordem de execu\u00e7\u00e3o.</li> <li>abortar: Aborta imediatamente toda a execu\u00e7\u00e3o da tarefa.</li> <li>continuar: Executa a tarefa atual e todas as subsequentes sem mais prompts, desativando efetivamente o modo interativo para o resto da execu\u00e7\u00e3o.</li> </ul>"},{"location":"pt/advanced-features/#modelagem-aprimorada-de-valuesyaml","title":"Modelagem Aprimorada de <code>values.yaml</code>","text":"<p>Voc\u00ea pode tornar seus arquivos <code>values.yaml</code> mais din\u00e2micos usando a sintaxe de modelo Go para injetar vari\u00e1veis de ambiente. Isso \u00e9 particularmente \u00fatil para fornecer informa\u00e7\u00f5es sens\u00edveis (como tokens ou chaves) ou configura\u00e7\u00f5es espec\u00edficas do ambiente sem codific\u00e1-las.</p> <p>O <code>sloth-runner</code> processa o <code>values.yaml</code> como um modelo Go, disponibilizando quaisquer vari\u00e1veis de ambiente no mapa <code>.Env</code>.</p> <p>Exemplo:</p> <ol> <li> <p>Crie um arquivo <code>values.yaml</code> com um placeholder de modelo:</p> <p><pre><code># values.yaml\napi_key: \"{{ .Env.MY_API_KEY }}\"\nregion: \"{{ .Env.AWS_REGION | default \"us-east-1\" }}\"\n</code></pre> Nota: Voc\u00ea pode usar <code>default</code> para fornecer um valor de fallback se a vari\u00e1vel de ambiente n\u00e3o estiver definida.</p> </li> <li> <p>Crie uma tarefa Lua que use esses valores:</p> <pre><code>-- my_task.sloth\nModern DSLs = {\n  my_group = {\n    tasks = {\n      {\n        name = \"deploy\",\n        command = function()\n          log.info(\"Implantando na regi\u00e3o: \" .. values.region)\n          log.info(\"Usando a chave de API (primeiros 5 caracteres): \" .. string.sub(values.api_key, 1, 5) .. \"...\")\n          return true, \"Implanta\u00e7\u00e3o bem-sucedida.\"\n        end\n      }\n    }\n  }\n}\n</code></pre> </li> <li> <p>Execute a tarefa com as vari\u00e1veis de ambiente definidas:</p> <pre><code>export MY_API_KEY=\"supersecretkey12345\"\nexport AWS_REGION=\"us-west-2\"\n\nsloth-runner run -f my_task.sloth -v values.yaml --yes\n</code></pre> </li> </ol> <p>Sa\u00edda:</p> <p>A sa\u00edda mostrar\u00e1 que os valores das vari\u00e1veis de ambiente foram substitu\u00eddos corretamente:</p> <pre><code>INFO Implantando na regi\u00e3o: us-west-2\nINFO Usando a chave de API (primeiros 5 caracteres): super...\n</code></pre>"},{"location":"pt/agent-improvements/","title":"\ud83d\ude80 Melhorias dos Agentes","text":"<p>Para documenta\u00e7\u00e3o completa sobre melhorias dos agentes, consulte:</p>"},{"location":"pt/agent-improvements/#melhorias-implementadas","title":"Melhorias Implementadas","text":""},{"location":"pt/agent-improvements/#saida-aprimorada","title":"\ud83d\udcca Sa\u00edda Aprimorada","text":"<p>Veja: Sa\u00edda Aprimorada dos Agentes</p>"},{"location":"pt/agent-improvements/#arquitetura","title":"\ud83c\udfd7\ufe0f Arquitetura","text":"<p>Veja: Arquitetura Master-Agent</p>"},{"location":"pt/agent-improvements/#sistema-distribuido","title":"\ud83c\udf10 Sistema Distribu\u00eddo","text":"<p>Veja: Sistema Distribu\u00eddo</p>"},{"location":"pt/agent-improvements/#recursos-principais","title":"Recursos Principais","text":"<ul> <li>\u2705 Comunica\u00e7\u00e3o aprimorada entre master e agentes</li> <li>\u2705 Sa\u00edda formatada com cores e emojis</li> <li>\u2705 Monitoramento em tempo real</li> <li>\u2705 Retry autom\u00e1tico</li> <li>\u2705 Health checks</li> <li>\u2705 Logs estruturados</li> </ul>"},{"location":"pt/agent-improvements/#exemplos","title":"Exemplos","text":"<p>Veja Exemplos Avan\u00e7ados para casos pr\u00e1ticos.</p>"},{"location":"pt/agente-em-containers/","title":"Configurando Agentes Sloth-Runner em Containers Incus/LXC","text":"<p>Este guia explica como configurar agentes sloth-runner dentro de containers Incus (ou LXC), incluindo configura\u00e7\u00e3o de port forwarding e endere\u00e7os de reporte.</p>"},{"location":"pt/agente-em-containers/#quick-start","title":"Quick Start","text":"<p>Para uma instala\u00e7\u00e3o r\u00e1pida em container Incus:</p> <pre><code># 1. No HOST (192.168.1.17) - Configure port forwarding\nsudo incus config device add main sloth-proxy proxy \\\n  listen=tcp:0.0.0.0:50052 \\\n  connect=tcp:127.0.0.1:50051\n\n# 2. No CONTAINER - Instale com bootstrap script\nsudo incus exec main -- bash -c \"curl -fsSL https://raw.githubusercontent.com/chalkan3-sloth/sloth-runner/master/bootstrap.sh | bash -s -- --name main --master 192.168.1.29:50053 --incus 192.168.1.17:50052\"\n\n# Pronto! O agente j\u00e1 est\u00e1 rodando e configurado.\n</code></pre>"},{"location":"pt/agente-em-containers/#problema","title":"Problema","text":"<p>Quando voc\u00ea executa um agente dentro de um container Incus, o container recebe um IP interno (ex: <code>10.193.121.186</code>) que n\u00e3o \u00e9 acess\u00edvel diretamente do master server. Isso causa timeouts quando voc\u00ea tenta executar comandos no agente.</p>"},{"location":"pt/agente-em-containers/#solucao","title":"Solu\u00e7\u00e3o","text":"<p>A solu\u00e7\u00e3o envolve tr\u00eas passos principais:</p> <ol> <li>Configurar port forwarding no host Incus</li> <li>Configurar o agente para escutar em todas as interfaces</li> <li>Usar o flag <code>--report-address</code> para informar ao master como se conectar</li> </ol>"},{"location":"pt/agente-em-containers/#passo-a-passo","title":"Passo a Passo","text":""},{"location":"pt/agente-em-containers/#1-configure-port-forwarding-no-host","title":"1. Configure Port Forwarding no Host","text":"<p>No host que est\u00e1 rodando o Incus, adicione um dispositivo proxy para fazer o forward da porta:</p> <pre><code>sudo incus config device add &lt;nome_container&gt; sloth-proxy proxy \\\n  listen=tcp:0.0.0.0:&lt;porta_host&gt; \\\n  connect=tcp:127.0.0.1:&lt;porta_agente&gt;\n</code></pre> <p>Exemplo pr\u00e1tico: <pre><code># Forward da porta 50052 do host para porta 50051 do container \"main\"\nsudo incus config device add main sloth-proxy proxy \\\n  listen=tcp:0.0.0.0:50052 \\\n  connect=tcp:127.0.0.1:50051\n</code></pre></p>"},{"location":"pt/agente-em-containers/#2-instale-e-configure-o-agente-no-container","title":"2. Instale e Configure o Agente no Container","text":"<p>Dentro do container, instale o sloth-runner e inicie o agente:</p>"},{"location":"pt/agente-em-containers/#opcao-1-usando-bootstrap-script-recomendado","title":"Op\u00e7\u00e3o 1: Usando Bootstrap Script (Recomendado)","text":"<p>O bootstrap script agora suporta a flag <code>--incus</code> que configura automaticamente tudo:</p> <pre><code># Dentro do container\nbash &lt;(curl -fsSL https://raw.githubusercontent.com/chalkan3-sloth/sloth-runner/master/bootstrap.sh) \\\n  --name main \\\n  --master 192.168.1.29:50053 \\\n  --incus 192.168.1.17:50052\n</code></pre> <p>Isso configura automaticamente: - <code>--bind-address 0.0.0.0</code> (escuta em todas as interfaces) - <code>--report-address 192.168.1.17:50052</code> (IP do host + porta forwarded) - Cria e habilita o servi\u00e7o systemd</p>"},{"location":"pt/agente-em-containers/#opcao-2-instalacao-manual","title":"Op\u00e7\u00e3o 2: Instala\u00e7\u00e3o Manual","text":"<pre><code># Instalar o sloth-runner (adapte conforme seu m\u00e9todo de instala\u00e7\u00e3o)\n# Por exemplo, copie o bin\u00e1rio:\n# sudo cp /caminho/do/sloth-runner /usr/local/bin/\n\n# Iniciar o agente com as configura\u00e7\u00f5es corretas\nsloth-runner agent start \\\n  --name &lt;nome_agente&gt; \\\n  --master &lt;ip_master&gt;:&lt;porta_master&gt; \\\n  --port &lt;porta_agente&gt; \\\n  --bind-address 0.0.0.0 \\\n  --report-address &lt;ip_host&gt;:&lt;porta_host&gt; \\\n  --daemon\n</code></pre> <p>Exemplo pr\u00e1tico: <pre><code># Container \"main\" no host 192.168.1.17, conectando ao master em 192.168.1.29\nsloth-runner agent start \\\n  --name main \\\n  --master 192.168.1.29:50053 \\\n  --port 50051 \\\n  --bind-address 0.0.0.0 \\\n  --report-address 192.168.1.17:50052 \\\n  --daemon\n</code></pre></p> <p>Par\u00e2metros importantes: - <code>--bind-address 0.0.0.0</code>: Faz o agente escutar em todas as interfaces de rede - <code>--report-address &lt;ip_host&gt;:&lt;porta_host&gt;</code>: Informa ao master qual endere\u00e7o usar para se conectar ao agente</p>"},{"location":"pt/agente-em-containers/#3-configure-como-servico-systemd-recomendado","title":"3. Configure como Servi\u00e7o Systemd (Recomendado)","text":"<p>Para garantir que o agente inicie automaticamente com o container:</p> <pre><code># Criar diret\u00f3rio de trabalho\nsudo mkdir -p /var/lib/sloth-runner\n\n# Criar arquivo de servi\u00e7o\nsudo tee /etc/systemd/system/sloth-runner-agent.service &gt; /dev/null &lt;&lt;'EOF'\n[Unit]\nDescription=Sloth Runner Agent - main\nDocumentation=https://chalkan3.github.io/sloth-runner/\nAfter=network-online.target\nWants=network-online.target\n\n[Service]\nType=simple\nUser=root\nWorkingDirectory=/var/lib/sloth-runner\nRestart=always\nRestartSec=5s\nStartLimitInterval=60s\nStartLimitBurst=5\n\n# Configura\u00e7\u00e3o do Agente\nExecStart=/usr/local/bin/sloth-runner agent start \\\n  --name main \\\n  --master 192.168.1.29:50053 \\\n  --port 50051 \\\n  --bind-address 0.0.0.0 \\\n  --report-address 192.168.1.17:50052\n\n# Logging\nStandardOutput=journal\nStandardError=journal\nSyslogIdentifier=sloth-runner-agent\n\n# Performance\nLimitNOFILE=65536\n\n# Security\nNoNewPrivileges=true\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Habilitar e iniciar o servi\u00e7o\nsudo systemctl daemon-reload\nsudo systemctl enable sloth-runner-agent\nsudo systemctl start sloth-runner-agent\n\n# Verificar status\nsudo systemctl status sloth-runner-agent\n</code></pre>"},{"location":"pt/agente-em-containers/#multiplos-containers-no-mesmo-host","title":"M\u00faltiplos Containers no Mesmo Host","text":"<p>Se voc\u00ea tem v\u00e1rios containers no mesmo host, cada um precisa de uma porta diferente:</p> <pre><code># Container 1: main -&gt; porta 50052\nsudo incus config device add main sloth-proxy proxy \\\n  listen=tcp:0.0.0.0:50052 connect=tcp:127.0.0.1:50051\n\n# Container 2: dev -&gt; porta 50053\nsudo incus config device add dev sloth-proxy proxy \\\n  listen=tcp:0.0.0.0:50053 connect=tcp:127.0.0.1:50051\n\n# Container 3: staging -&gt; porta 50054\nsudo incus config device add staging sloth-proxy proxy \\\n  listen=tcp:0.0.0.0:50054 connect=tcp:127.0.0.1:50051\n</code></pre> <p>Ent\u00e3o configure cada agente com seu respectivo <code>--report-address</code>:</p> <pre><code># No container \"main\"\nsloth-runner agent start --name main --report-address 192.168.1.17:50052 ...\n\n# No container \"dev\"\nsloth-runner agent start --name dev --report-address 192.168.1.17:50053 ...\n\n# No container \"staging\"\nsloth-runner agent start --name staging --report-address 192.168.1.17:50054 ...\n</code></pre>"},{"location":"pt/agente-em-containers/#verificacao","title":"Verifica\u00e7\u00e3o","text":""},{"location":"pt/agente-em-containers/#1-verificar-port-forwarding","title":"1. Verificar Port Forwarding","text":"<pre><code># Listar dispositivos do container\nsudo incus config device list &lt;nome_container&gt;\n\n# Ver detalhes do proxy\nsudo incus config device show &lt;nome_container&gt;\n</code></pre>"},{"location":"pt/agente-em-containers/#2-verificar-status-do-agente","title":"2. Verificar Status do Agente","text":"<pre><code># No container\nsudo systemctl status sloth-runner-agent\n\n# Ver logs\nsudo journalctl -u sloth-runner-agent -f\n</code></pre>"},{"location":"pt/agente-em-containers/#3-testar-do-master","title":"3. Testar do Master","text":"<pre><code># Listar agentes\nsloth-runner agent list\n\n# Executar comando de teste\nsloth-runner agent run &lt;nome_agente&gt; 'hostname &amp;&amp; whoami'\n</code></pre>"},{"location":"pt/agente-em-containers/#tabela-de-referencia-rapida","title":"Tabela de Refer\u00eancia R\u00e1pida","text":"Componente IP Interno IP:Porta Exposto Master Enxerga Agente no Container 10.x.x.x:50051 host_ip:50052 host_ip:50052 Agente no Host host_ip:50051 host_ip:50051 host_ip:50051"},{"location":"pt/agente-em-containers/#troubleshooting","title":"Troubleshooting","text":""},{"location":"pt/agente-em-containers/#agente-aparece-como-active-mas-comandos-dao-timeout","title":"Agente aparece como \"Active\" mas comandos d\u00e3o timeout","text":"<p>Causa: O master n\u00e3o consegue alcan\u00e7ar o agente no endere\u00e7o reportado.</p> <p>Solu\u00e7\u00f5es: 1. Verifique se o port forwarding est\u00e1 configurado:    <pre><code>sudo incus config device list &lt;nome_container&gt;\n</code></pre></p> <ol> <li> <p>Verifique se o agente est\u00e1 usando <code>--report-address</code> correto:    <pre><code>sudo incus exec &lt;nome_container&gt; -- systemctl status sloth-runner-agent\n</code></pre></p> </li> <li> <p>Teste conectividade do master:    <pre><code># Do master, teste se a porta est\u00e1 acess\u00edvel\nnc -zv &lt;host_ip&gt; &lt;porta_forwarded&gt;\ntelnet &lt;host_ip&gt; &lt;porta_forwarded&gt;\n</code></pre></p> </li> <li> <p>Verifique firewall do host:    <pre><code># No host\nsudo iptables -L -n | grep &lt;porta&gt;\nsudo ufw status | grep &lt;porta&gt;\n</code></pre></p> </li> </ol>"},{"location":"pt/agente-em-containers/#agente-nao-inicia","title":"Agente n\u00e3o inicia","text":"<p>Verifique logs: <pre><code>sudo journalctl -u sloth-runner-agent -n 50\n</code></pre></p> <p>Problemas comuns: - Bin\u00e1rio n\u00e3o encontrado: Verifique <code>/usr/local/bin/sloth-runner</code> existe - Permiss\u00f5es: O bin\u00e1rio precisa ser execut\u00e1vel (<code>chmod +x</code>) - Master inacess\u00edvel: Verifique se o master est\u00e1 rodando e acess\u00edvel</p>"},{"location":"pt/agente-em-containers/#container-reiniciado-e-agente-nao-volta","title":"Container reiniciado e agente n\u00e3o volta","text":"<p>Solu\u00e7\u00e3o: Certifique-se que o servi\u00e7o systemd est\u00e1 habilitado: <pre><code>sudo systemctl enable sloth-runner-agent\n</code></pre></p>"},{"location":"pt/agente-em-containers/#exemplo-completo","title":"Exemplo Completo","text":"<p>Aqui est\u00e1 um exemplo completo de configura\u00e7\u00e3o de agente no container \"main\":</p> <pre><code># 1. No HOST (192.168.1.17) - Configure port forwarding\nsudo incus config device add main sloth-proxy proxy \\\n  listen=tcp:0.0.0.0:50052 \\\n  connect=tcp:127.0.0.1:50051\n\n# 2. No CONTAINER - Use bootstrap script com flag --incus\nsudo incus exec main -- bash -c \"curl -fsSL https://raw.githubusercontent.com/chalkan3-sloth/sloth-runner/master/bootstrap.sh | bash -s -- --name main --master 192.168.1.29:50053 --incus 192.168.1.17:50052\"\n\n# OU se preferir fazer dentro do container interativamente:\nsudo incus exec main -- bash\n\n# Dentro do container:\nbash &lt;(curl -fsSL https://raw.githubusercontent.com/chalkan3-sloth/sloth-runner/master/bootstrap.sh) \\\n  --name main \\\n  --master 192.168.1.29:50053 \\\n  --incus 192.168.1.17:50052\n\n# Verificar status\nsystemctl status sloth-runner-agent\nexit\n\n# 3. Do MASTER (192.168.1.29) - Testar o agente\nsloth-runner agent list\nsloth-runner agent run main 'uname -a'\n</code></pre>"},{"location":"pt/agente-em-containers/#exemplo-com-instalacao-manual-de-binario","title":"Exemplo com Instala\u00e7\u00e3o Manual de Bin\u00e1rio","text":"<p>Se voc\u00ea j\u00e1 tem o bin\u00e1rio compilado:</p> <pre><code># 1. No HOST - Configure port forwarding\nsudo incus config device add main sloth-proxy proxy \\\n  listen=tcp:0.0.0.0:50052 \\\n  connect=tcp:127.0.0.1:50051\n\n# 2. Copiar bin\u00e1rio para o container\nsudo incus file push /caminho/sloth-runner main/usr/local/bin/sloth-runner\nsudo incus exec main -- chmod +x /usr/local/bin/sloth-runner\n\n# 3. No CONTAINER - Use bootstrap local\nsudo incus exec main -- bash\nmkdir -p /var/lib/sloth-runner\n\n# Criar e iniciar o servi\u00e7o\n/usr/local/bin/sloth-runner agent start \\\n  --name main \\\n  --master 192.168.1.29:50053 \\\n  --port 50051 \\\n  --bind-address 0.0.0.0 \\\n  --report-address 192.168.1.17:50052 \\\n  --daemon\n\n# Verificar\nps aux | grep sloth-runner\nexit\n\n# 4. Do MASTER - Verificar\nsloth-runner agent list\nsloth-runner agent run main 'hostname &amp;&amp; whoami'\n</code></pre>"},{"location":"pt/agente-em-containers/#conclusao","title":"Conclus\u00e3o","text":"<p>Com essa configura\u00e7\u00e3o, voc\u00ea pode executar agentes sloth-runner em containers Incus de forma transparente, permitindo que o master execute comandos remotamente como se fossem m\u00e1quinas f\u00edsicas normais.</p>"},{"location":"pt/contributing/","title":"\ud83e\udd1d Contribuindo para o Sloth Runner","text":"<p>Obrigado pelo seu interesse em contribuir para o Sloth Runner!</p> <p>Acolhemos contribui\u00e7\u00f5es de desenvolvedores de todos os n\u00edveis de habilidade. Seja corrigindo bugs, adicionando recursos, melhorando a documenta\u00e7\u00e3o ou criando plugins, sua ajuda torna o Sloth Runner melhor para todos.</p>"},{"location":"pt/contributing/#inicio-rapido","title":"\ud83d\ude80 In\u00edcio R\u00e1pido","text":""},{"location":"pt/contributing/#pre-requisitos","title":"Pr\u00e9-requisitos","text":"<ul> <li>Go 1.21+ para desenvolvimento principal</li> <li>Node.js 18+ para desenvolvimento de UI  </li> <li>Lua 5.4+ para desenvolvimento DSL</li> <li>Git para controle de vers\u00e3o</li> </ul>"},{"location":"pt/contributing/#configuracao-de-desenvolvimento","title":"Configura\u00e7\u00e3o de Desenvolvimento","text":"<pre><code># Clonar o reposit\u00f3rio\ngit clone https://github.com/chalkan3-sloth/sloth-runner.git\ncd sloth-runner\n\n# Instalar depend\u00eancias\ngo mod download\nnpm install  # para componentes UI\n\n# Executar testes\nmake test\n\n# Construir o projeto\nmake build\n</code></pre>"},{"location":"pt/contributing/#formas-de-contribuir","title":"\ud83d\udccb Formas de Contribuir","text":""},{"location":"pt/contributing/#relatorios-de-bug","title":"\ud83d\udc1b Relat\u00f3rios de Bug","text":"<p>Encontrou um bug? Por favor, nos ajude a corrigi-lo:</p> <ol> <li>Pesquise issues existentes para evitar duplicatas</li> <li>Use nosso template de relat\u00f3rio de bug com:</li> <li>Vers\u00e3o do Sloth Runner</li> <li>Sistema operacional</li> <li>Passos para reproduzir</li> <li>Comportamento esperado vs real</li> <li>Logs de erro (se houver)</li> </ol>"},{"location":"pt/contributing/#solicitacoes-de-recurso","title":"\ud83d\udca1 Solicita\u00e7\u00f5es de Recurso","text":"<p>Tem uma ideia para melhoria?</p> <ol> <li>Verifique o roadmap para recursos planejados</li> <li>Abra uma solicita\u00e7\u00e3o de recurso com:</li> <li>Descri\u00e7\u00e3o clara do recurso</li> <li>Casos de uso e benef\u00edcios</li> <li>Poss\u00edvel abordagem de implementa\u00e7\u00e3o</li> </ol>"},{"location":"pt/contributing/#contribuicoes-de-codigo","title":"\ud83d\udd27 Contribui\u00e7\u00f5es de C\u00f3digo","text":"<p>Pronto para programar? Aqui est\u00e1 como:</p> <ol> <li>Fa\u00e7a fork do reposit\u00f3rio</li> <li>Crie uma branch de recurso (<code>git checkout -b feature/recurso-incrivel</code>)</li> <li>Fa\u00e7a suas altera\u00e7\u00f5es seguindo nossos padr\u00f5es de c\u00f3digo</li> <li>Adicione testes para nova funcionalidade</li> <li>Atualize documenta\u00e7\u00e3o se necess\u00e1rio</li> <li>Commit com mensagens claras</li> <li>Push e crie um Pull Request</li> </ol>"},{"location":"pt/contributing/#documentacao","title":"\ud83d\udcda Documenta\u00e7\u00e3o","text":"<p>Ajude a melhorar nossa documenta\u00e7\u00e3o:</p> <ul> <li>Corrija erros de digita\u00e7\u00e3o e explica\u00e7\u00f5es confusas</li> <li>Adicione exemplos e tutoriais</li> <li>Traduza conte\u00fado para outros idiomas</li> <li>Atualize documenta\u00e7\u00e3o da API</li> </ul>"},{"location":"pt/contributing/#desenvolvimento-de-plugin","title":"\ud83d\udd0c Desenvolvimento de Plugin","text":"<p>Crie plugins para a comunidade:</p> <ul> <li>Siga nosso Guia de Desenvolvimento de Plugin</li> <li>Submeta ao registro de plugins</li> <li>Mantenha compatibilidade com vers\u00f5es principais</li> </ul>"},{"location":"pt/contributing/#diretrizes-de-desenvolvimento","title":"\ud83d\udcd0 Diretrizes de Desenvolvimento","text":""},{"location":"pt/contributing/#estilo-de-codigo","title":"Estilo de C\u00f3digo","text":""},{"location":"pt/contributing/#codigo-go","title":"C\u00f3digo Go","text":"<p>Siga conven\u00e7\u00f5es padr\u00e3o do Go:</p> <pre><code>// Bom: Nomes de fun\u00e7\u00e3o claros e coment\u00e1rios\nfunc ProcessWorkflowTasks(ctx context.Context, workflow *Workflow) error {\n    if workflow == nil {\n        return fmt.Errorf(\"workflow n\u00e3o pode ser nil\")\n    }\n\n    for _, task := range workflow.Tasks {\n        if err := processTask(ctx, task); err != nil {\n            return fmt.Errorf(\"falhou ao processar tarefa %s: %w\", task.ID, err)\n        }\n    }\n\n    return nil\n}\n</code></pre>"},{"location":"pt/contributing/#dsl-lua","title":"DSL Lua","text":"<p>Mantenha c\u00f3digo DSL limpo e leg\u00edvel:</p> <pre><code>-- Bom: Defini\u00e7\u00e3o clara de tarefa com encadeamento adequado\nlocal tarefa_deploy = task(\"deploy_aplicacao\")\n    :description(\"Fazer deploy da aplica\u00e7\u00e3o para produ\u00e7\u00e3o\")\n    :command(function(params, deps)\n        local resultado = exec.run(\"kubectl apply -f deployment.yaml\")\n        if not resultado.success then\n            log.error(\"Deploy falhou: \" .. resultado.stderr)\n            return false\n        end\n        return true\n    end)\n    :timeout(300)\n    :retries(3)\n    :build()\n</code></pre>"},{"location":"pt/contributing/#padroes-de-teste","title":"Padr\u00f5es de Teste","text":""},{"location":"pt/contributing/#testes-unitarios","title":"Testes Unit\u00e1rios","text":"<p>Escreva testes para toda nova funcionalidade:</p> <pre><code>func TestProcessWorkflowTasks(t *testing.T) {\n    tests := []struct {\n        name     string\n        workflow *Workflow\n        wantErr  bool\n    }{\n        {\n            name:     \"workflow nil deve retornar erro\",\n            workflow: nil,\n            wantErr:  true,\n        },\n        {\n            name: \"workflow v\u00e1lido deve processar com sucesso\",\n            workflow: &amp;Workflow{\n                Tasks: []*Task{{ID: \"test-task\"}},\n            },\n            wantErr: false,\n        },\n    }\n\n    for _, tt := range tests {\n        t.Run(tt.name, func(t *testing.T) {\n            err := ProcessWorkflowTasks(context.Background(), tt.workflow)\n            if (err != nil) != tt.wantErr {\n                t.Errorf(\"ProcessWorkflowTasks() error = %v, wantErr %v\", err, tt.wantErr)\n            }\n        })\n    }\n}\n</code></pre>"},{"location":"pt/contributing/#padroes-de-documentacao","title":"Padr\u00f5es de Documenta\u00e7\u00e3o","text":"<ul> <li>Mantenha simples - Use linguagem clara e concisa</li> <li>Inclua exemplos - Mostre, n\u00e3o apenas diga</li> <li>Atualize com mudan\u00e7as - Mantenha docs sincronizados com c\u00f3digo</li> <li>Teste exemplos - Garanta que todos os exemplos de c\u00f3digo funcionem</li> </ul>"},{"location":"pt/contributing/#processo-de-pull-request","title":"\ud83d\udd04 Processo de Pull Request","text":""},{"location":"pt/contributing/#antes-de-submeter","title":"Antes de Submeter","text":"<ul> <li> Execute testes - <code>make test</code></li> <li> Execute linting - <code>make lint</code></li> <li> Atualize docs - Se adicionando/alterando recursos</li> <li> Adicione entrada no changelog - Em <code>CHANGELOG.md</code></li> <li> Verifique compatibilidade - Com recursos existentes</li> </ul>"},{"location":"pt/contributing/#template-de-pr","title":"Template de PR","text":"<p>Use nosso template de pull request:</p> <pre><code>## Descri\u00e7\u00e3o\nBreve descri\u00e7\u00e3o das altera\u00e7\u00f5es\n\n## Tipo de Mudan\u00e7a\n- [ ] Corre\u00e7\u00e3o de bug\n- [ ] Novo recurso\n- [ ] Mudan\u00e7a disruptiva\n- [ ] Atualiza\u00e7\u00e3o de documenta\u00e7\u00e3o\n\n## Testes\n- [ ] Testes unit\u00e1rios adicionados/atualizados\n- [ ] Testes de integra\u00e7\u00e3o passam\n- [ ] Teste manual completado\n\n## Checklist\n- [ ] C\u00f3digo segue diretrizes de estilo\n- [ ] Documenta\u00e7\u00e3o atualizada\n- [ ] Changelog atualizado\n</code></pre>"},{"location":"pt/contributing/#estrutura-do-projeto","title":"\ud83c\udfd7\ufe0f Estrutura do Projeto","text":"<p>Compreendendo a base de c\u00f3digo:</p> <pre><code>sloth-runner/\n\u251c\u2500\u2500 cmd/                    # Comandos CLI\n\u251c\u2500\u2500 internal/              # Pacotes internos\n\u2502   \u251c\u2500\u2500 core/             # L\u00f3gica de neg\u00f3cio principal\n\u2502   \u251c\u2500\u2500 dsl/              # Implementa\u00e7\u00e3o DSL\n\u2502   \u251c\u2500\u2500 execution/        # Motor de execu\u00e7\u00e3o de tarefas\n\u2502   \u2514\u2500\u2500 plugins/          # Sistema de plugins\n\u251c\u2500\u2500 pkg/                   # Pacotes p\u00fablicos\n\u251c\u2500\u2500 plugins/              # Plugins integrados\n\u251c\u2500\u2500 docs/                 # Documenta\u00e7\u00e3o\n\u251c\u2500\u2500 web/                  # Componentes de UI web\n\u2514\u2500\u2500 examples/             # Workflows de exemplo\n</code></pre>"},{"location":"pt/contributing/#areas-de-contribuicao","title":"\ud83c\udfaf \u00c1reas de Contribui\u00e7\u00e3o","text":""},{"location":"pt/contributing/#alta-prioridade","title":"Alta Prioridade","text":"<ul> <li>\ud83d\udc1b Corre\u00e7\u00f5es de bug - Sempre bem-vindas</li> <li>\ud83d\udcc8 Melhorias de performance - Oportunidades de otimiza\u00e7\u00e3o</li> <li>\ud83e\uddea Cobertura de teste - Aumentar cobertura de teste</li> <li>\ud83d\udcda Documenta\u00e7\u00e3o - Manter docs abrangentes</li> </ul>"},{"location":"pt/contributing/#media-prioridade","title":"M\u00e9dia Prioridade","text":"<ul> <li>\u2728 Novos recursos - Seguindo prioridades do roadmap</li> <li>\ud83d\udd0c Ecossistema de plugin - Mais plugins e integra\u00e7\u00f5es</li> <li>\ud83c\udfa8 Melhorias de UI - Melhor experi\u00eancia do usu\u00e1rio</li> </ul>"},{"location":"pt/contributing/#reconhecimento","title":"\ud83c\udfc6 Reconhecimento","text":"<p>Contribuidores s\u00e3o reconhecidos em:</p> <ul> <li>CONTRIBUTORS.md - Todos os contribuidores listados</li> <li>Notas de release - Contribui\u00e7\u00f5es importantes destacadas</li> <li>Showcase da comunidade - Contribui\u00e7\u00f5es em destaque</li> <li>Badges de contribuidor - Reconhecimento no perfil GitHub</li> </ul>"},{"location":"pt/contributing/#obtendo-ajuda","title":"\ud83d\udcde Obtendo Ajuda","text":""},{"location":"pt/contributing/#questoes-de-desenvolvimento","title":"Quest\u00f5es de Desenvolvimento","text":"<ul> <li>\ud83d\udcac Discord - canal <code>#development</code></li> <li>\ud83d\udce7 Lista de Email - dev@sloth-runner.io</li> <li>\ud83d\udcd6 Wiki - Guias de desenvolvimento e FAQs</li> </ul>"},{"location":"pt/contributing/#mentoria","title":"Mentoria","text":"<p>Novo em open source? Oferecemos mentoria:</p> <ul> <li>\ud83d\udc65 Pareamento de mentor - Pareado com contribuidores experientes</li> <li>\ud83d\udcda Recursos de aprendizado - Materiais de aprendizado curados</li> <li>\ud83c\udfaf Contribui\u00e7\u00f5es guiadas - Issues amig\u00e1veis para iniciantes</li> </ul>"},{"location":"pt/contributing/#codigo-de-conduta","title":"\ud83d\udcdc C\u00f3digo de Conduta","text":"<p>Estamos comprometidos em fornecer um ambiente acolhedor e inclusivo. Por favor, leia nosso C\u00f3digo de Conduta.</p>"},{"location":"pt/contributing/#nossos-padroes","title":"Nossos Padr\u00f5es","text":"<ul> <li>\ud83e\udd1d Seja respeitoso - Trate todos com respeito</li> <li>\ud83d\udca1 Seja construtivo - Forne\u00e7a feedback \u00fatil</li> <li>\ud83c\udf0d Seja inclusivo - Acolha perspectivas diversas</li> <li>\ud83d\udcda Seja paciente - Ajude outros a aprender e crescer</li> </ul> <p>Pronto para contribuir?</p> <p>Comece explorando nossas Good First Issues ou junte-se \u00e0 nossa comunidade Discord para se apresentar!</p> <p>Obrigado por ajudar a tornar o Sloth Runner melhor! \ud83e\udda5\u2728</p>"},{"location":"pt/core-concepts/","title":"Conceitos Essenciais - Modern DSL","text":"<p>Este documento explica os conceitos fundamentais do <code>sloth-runner</code> usando a Modern DSL, ajudando voc\u00ea a entender como definir e orquestrar fluxos de trabalho complexos com a nova API fluente.</p>"},{"location":"pt/core-concepts/#visao-geral-da-modern-dsl","title":"Vis\u00e3o Geral da Modern DSL","text":"<p>A Modern DSL substitui a abordagem legada <code>Modern DSLs</code> por uma API mais intuitiva e fluente para definir fluxos de trabalho. Em vez de grandes estruturas de tabela, voc\u00ea agora usa m\u00e9todos encade\u00e1veis para construir tarefas e definir fluxos de trabalho de forma declarativa.</p> <pre><code>-- meu_pipeline.sloth - Modern DSL\nlocal minha_tarefa = task(\"nome_da_tarefa\")\n    :description(\"Descri\u00e7\u00e3o da tarefa\")\n    :command(function() ... end)\n    :build()\n\nworkflow.define(\"nome_do_workflow\", {\n    description = \"Descri\u00e7\u00e3o do workflow - Modern DSL\",\n    tasks = { minha_tarefa }\n})\n</code></pre>"},{"location":"pt/core-concepts/#definicao-de-tarefa-com-modern-dsl","title":"Defini\u00e7\u00e3o de Tarefa com Modern DSL","text":"<p>As tarefas agora s\u00e3o definidas usando a fun\u00e7\u00e3o <code>task()</code> e m\u00e9todos da API fluente:</p>"},{"location":"pt/core-concepts/#estrutura-basica-de-tarefa","title":"Estrutura B\u00e1sica de Tarefa","text":"<pre><code>local minha_tarefa = task(\"nome_da_tarefa\")\n    :description(\"O que esta tarefa faz\")\n    :command(function(params, deps)\n        -- L\u00f3gica da tarefa aqui\n        return true, \"Mensagem de sucesso\", { dados_de_saida = \"valor\" }\n    end)\n    :timeout(\"5m\")\n    :retries(3, \"exponential\")\n    :build()\n</code></pre>"},{"location":"pt/core-concepts/#metodos-do-task-builder","title":"M\u00e9todos do Task Builder","text":"<p>Propriedades Principais: *   <code>:description(string)</code> - Descri\u00e7\u00e3o leg\u00edvel da tarefa *   <code>:command(function|string)</code> - L\u00f3gica de execu\u00e7\u00e3o da tarefa *   <code>:timeout(string)</code> - Tempo m\u00e1ximo de execu\u00e7\u00e3o (ex: \"10s\", \"5m\", \"1h\") *   <code>:retries(number, strategy)</code> - Configura\u00e7\u00e3o de retry com estrat\u00e9gia (\"exponential\", \"linear\", \"fixed\") *   <code>:depends_on(array)</code> - Array de nomes de tarefas das quais esta tarefa depende</p> <p>Recursos Avan\u00e7ados: *   <code>:async(boolean)</code> - Habilitar execu\u00e7\u00e3o ass\u00edncrona *   <code>:artifacts(array)</code> - Arquivos para salvar ap\u00f3s execu\u00e7\u00e3o bem-sucedida *   <code>:consumes(array)</code> - Artefatos de outras tarefas para usar *   <code>:run_if(function|string)</code> - L\u00f3gica de execu\u00e7\u00e3o condicional *   <code>:abort_if(function|string)</code> - Condi\u00e7\u00e3o para abortar todo o workflow</p> <p>Hooks de Ciclo de Vida: *   <code>:on_success(function)</code> - Executar quando a tarefa for bem-sucedida *   <code>:on_failure(function)</code> - Executar quando a tarefa falhar *   <code>:on_timeout(function)</code> - Executar quando a tarefa atingir timeout *   <code>:pre_hook(function)</code> - Executar antes do comando principal *   <code>:post_hook(function)</code> - Executar ap\u00f3s o comando principal</p> <p>Exemplo: <pre><code>Modern DSLs = {\n  meu_grupo = {\n    description = \"Um grupo que gerencia seu pr\u00f3prio diret\u00f3rio tempor\u00e1rio.\",\n    create_workdir_before_run = true,\n    clean_workdir_after_run = function(result)\n      if not result.success then\n        log.warn(\"O grupo falhou. O diret\u00f3rio de trabalho ser\u00e1 mantido para depura\u00e7\u00e3o.\")\n      end\n      return result.success -- Limpa apenas se tudo foi bem-sucedido\n    end,\n    tasks = {\n      -- Tarefas aqui\n    }\n  }\n}\n</code></pre></p>"},{"location":"pt/core-concepts/#tarefas-individuais","title":"Tarefas Individuais","text":"<p>Uma tarefa \u00e9 uma \u00fanica unidade de trabalho. \u00c9 definida como uma tabela com v\u00e1rias propriedades dispon\u00edveis para controlar seu comportamento.</p>"},{"location":"pt/core-concepts/#propriedades-basicas","title":"Propriedades B\u00e1sicas","text":"<ul> <li><code>name</code> (string): O nome \u00fanico da tarefa dentro de seu grupo.</li> <li><code>description</code> (string): Uma breve descri\u00e7\u00e3o do que a tarefa faz.</li> <li><code>command</code> (string ou fun\u00e7\u00e3o): A a\u00e7\u00e3o principal da tarefa.<ul> <li>Como string: \u00c9 executada como um comando de shell.</li> <li>Como fun\u00e7\u00e3o: A fun\u00e7\u00e3o Lua \u00e9 executada. Ela recebe dois argumentos: <code>params</code> (uma tabela com seus par\u00e2metros) e <code>deps</code> (uma tabela contendo os outputs de suas depend\u00eancias). A fun\u00e7\u00e3o deve retornar:<ol> <li><code>booleano</code>: <code>true</code> para sucesso, <code>false</code> para falha.</li> <li><code>string</code>: Uma mensagem descrevendo o resultado.</li> <li><code>tabela</code> (opcional): Uma tabela de outputs da qual outras tarefas podem depender.</li> </ol> </li> </ul> </li> </ul>"},{"location":"pt/core-concepts/#dependencia-e-fluxo-de-execucao","title":"Depend\u00eancia e Fluxo de Execu\u00e7\u00e3o","text":"<ul> <li><code>depends_on</code> (string ou tabela): Uma lista de nomes de tarefas que devem ser conclu\u00eddas com sucesso antes que esta tarefa possa ser executada.</li> <li><code>next_if_fail</code> (string ou tabela): Uma lista de nomes de tarefas a serem executadas apenas se esta tarefa falhar. \u00datil para tarefas de limpeza ou notifica\u00e7\u00e3o.</li> <li><code>async</code> (booleano): Se <code>true</code>, a tarefa \u00e9 executada em segundo plano, e o runner n\u00e3o espera que ela termine para iniciar a pr\u00f3xima tarefa na ordem de execu\u00e7\u00e3o.</li> </ul>"},{"location":"pt/core-concepts/#tratamento-de-erros-e-robustez","title":"Tratamento de Erros e Robustez","text":"<ul> <li><code>retries</code> (n\u00famero): O n\u00famero de vezes que uma tarefa ser\u00e1 tentada novamente se falhar. O padr\u00e3o \u00e9 <code>0</code>.</li> <li><code>timeout</code> (string): Uma dura\u00e7\u00e3o (ex: <code>\"10s\"</code>, <code>\"1m\"</code>) ap\u00f3s a qual a tarefa ser\u00e1 encerrada se ainda estiver em execu\u00e7\u00e3o.</li> </ul>"},{"location":"pt/core-concepts/#execucao-condicional","title":"Execu\u00e7\u00e3o Condicional","text":"<ul> <li><code>run_if</code> (string ou fun\u00e7\u00e3o): A tarefa ser\u00e1 pulada a menos que esta condi\u00e7\u00e3o seja atendida.<ul> <li>Como string: Um comando de shell. Um c\u00f3digo de sa\u00edda <code>0</code> significa que a condi\u00e7\u00e3o foi atendida.</li> <li>Como fun\u00e7\u00e3o: Uma fun\u00e7\u00e3o Lua que retorna <code>true</code> se a tarefa deve ser executada.</li> </ul> </li> <li><code>abort_if</code> (string ou fun\u00e7\u00e3o): Todo o fluxo de trabalho ser\u00e1 abortado se esta condi\u00e7\u00e3o for atendida.<ul> <li>Como string: Um comando de shell. Um c\u00f3digo de sa\u00edda <code>0</code> significa abortar.</li> <li>Como fun\u00e7\u00e3o: Uma fun\u00e7\u00e3o Lua que retorna <code>true</code> para abortar.</li> </ul> </li> </ul>"},{"location":"pt/core-concepts/#hooks-de-ciclo-de-vida","title":"Hooks de Ciclo de Vida","text":"<ul> <li><code>pre_exec</code> (fun\u00e7\u00e3o): Uma fun\u00e7\u00e3o Lua que \u00e9 executada antes do <code>command</code> principal.</li> <li><code>post_exec</code> (fun\u00e7\u00e3o): Uma fun\u00e7\u00e3o Lua que \u00e9 executada ap\u00f3s o <code>command</code> principal ter sido conclu\u00eddo com sucesso.</li> </ul>"},{"location":"pt/core-concepts/#reutilizacao","title":"Reutiliza\u00e7\u00e3o","text":"<ul> <li><code>uses</code> (tabela): Especifica uma tarefa pr\u00e9-definida de outro arquivo (carregado via <code>import</code>) para usar como base. A defini\u00e7\u00e3o da tarefa atual pode ent\u00e3o sobrescrever propriedades como <code>params</code> ou <code>description</code>.</li> <li><code>params</code> (tabela): Um dicion\u00e1rio de pares chave-valor que podem ser passados para a fun\u00e7\u00e3o <code>command</code> da tarefa.</li> <li><code>artifacts</code> (string ou tabela): Um padr\u00e3o de arquivo (glob) ou uma lista de padr\u00f5es que especificam quais arquivos do <code>workdir</code> da tarefa devem ser salvos como artefatos ap\u00f3s uma execu\u00e7\u00e3o bem-sucedida.</li> <li><code>consumes</code> (string ou tabela): O nome de um artefato (ou uma lista de nomes) de uma tarefa anterior que deve ser copiado para o <code>workdir</code> desta tarefa antes que ela seja executada.</li> </ul>"},{"location":"pt/core-concepts/#gerenciamento-de-artefatos","title":"Gerenciamento de Artefatos","text":"<p>O Sloth-Runner permite que as tarefas compartilhem arquivos entre si atrav\u00e9s de um mecanismo de artefatos. Uma tarefa pode \"produzir\" um ou mais arquivos como artefatos, e tarefas subsequentes podem \"consumir\" esses artefatos.</p> <p>Isso \u00e9 \u00fatil para pipelines de CI/CD, onde uma etapa de compila\u00e7\u00e3o pode gerar um bin\u00e1rio (o artefato), que \u00e9 ent\u00e3o usado por uma etapa de teste ou de implanta\u00e7\u00e3o.</p>"},{"location":"pt/core-concepts/#como-funciona","title":"Como Funciona","text":"<ol> <li> <p>Produzindo Artefatos: Adicione a chave <code>artifacts</code> \u00e0 sua defini\u00e7\u00e3o de tarefa. O valor pode ser um \u00fanico padr\u00e3o de arquivo (ex: <code>\"report.txt\"</code>) ou uma lista (ex: <code>{\"*.log\", \"app.bin\"}</code>). Ap\u00f3s a tarefa ser executada com sucesso, o runner procurar\u00e1 por arquivos no <code>workdir</code> da tarefa que correspondam a esses padr\u00f5es e os copiar\u00e1 para um armazenamento de artefatos compartilhado para a pipeline.</p> </li> <li> <p>Consumindo Artefatos: Adicione a chave <code>consumes</code> \u00e0 defini\u00e7\u00e3o de outra tarefa (que normalmente <code>depends_on</code> da tarefa produtora). O valor deve ser o nome do arquivo do artefato que voc\u00ea deseja usar (ex: <code>\"report.txt\"</code>). Antes que esta tarefa seja executada, o runner copiar\u00e1 o artefato nomeado do armazenamento compartilhado para o <code>workdir</code> desta tarefa, tornando-o dispon\u00edvel para o <code>command</code>.</p> </li> </ol>"},{"location":"pt/core-concepts/#exemplo-de-artefatos","title":"Exemplo de Artefatos","text":"<pre><code>Modern DSLs = {\n  [\"ci-pipeline\"] = {\n    description = \"Demonstra o uso de artefatos.\",\n    create_workdir_before_run = true,\n    tasks = {\n      {\n        name = \"build\",\n        description = \"Cria um bin\u00e1rio e o declara como um artefato.\",\n        command = \"echo 'conteudo_binario' &gt; app.bin\",\n        artifacts = {\"app.bin\"}\n      },\n      {\n        name = \"test\",\n        description = \"Consome o bin\u00e1rio para executar testes.\",\n        depends_on = \"build\",\n        consumes = {\"app.bin\"},\n        command = function(params)\n          -- Neste ponto, 'app.bin' existe no workdir desta tarefa\n          local content, err = fs.read(params.workdir .. \"/app.bin\")\n          if content == \"conteudo_binario\" then\n            log.info(\"Artefato consumido com sucesso!\")\n            return true\n          else\n            return false, \"Conte\u00fado do artefato incorreto!\"\n          end\n        end\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"pt/core-concepts/#funcoes-globais","title":"Fun\u00e7\u00f5es Globais","text":"<p>O <code>sloth-runner</code> fornece fun\u00e7\u00f5es globais no ambiente Lua para ajudar a orquestrar os fluxos de trabalho.</p>"},{"location":"pt/core-concepts/#importpath","title":"<code>import(path)</code>","text":"<p>Carrega outro arquivo Lua e retorna o valor que ele retorna. Este \u00e9 o principal mecanismo para criar m\u00f3dulos de tarefas reutiliz\u00e1veis. O caminho \u00e9 relativo ao arquivo que chama <code>import</code>.</p> <p>Exemplo (<code>reusable_tasks.sloth</code>): <pre><code>-- Importa um m\u00f3dulo que retorna uma tabela de defini\u00e7\u00f5es de tarefas\nlocal docker_tasks = import(\"shared/docker.sloth\")\n\nModern DSLs = {\n  main = {\n    tasks = {\n      {\n        -- Usa a tarefa 'build' do m\u00f3dulo importado\n        uses = docker_tasks.build,\n        params = { image_name = \"my-app\" }\n      }\n    }\n  }\n}\n</code></pre></p>"},{"location":"pt/core-concepts/#paralleltasks","title":"<code>parallel(tasks)</code>","text":"<p>Executa uma lista de tarefas concorrentemente e espera que todas terminem.</p> <ul> <li><code>tasks</code> (tabela): Uma lista de tabelas de tarefas para executar em paralelo.</li> </ul> <p>Exemplo: <pre><code>command = function()\n  log.info(\"Iniciando 3 tarefas em paralelo...\")\n  local results, err = parallel({\n    { name = \"short_task\", command = \"sleep 1\" },\n    { name = \"medium_task\", command = \"sleep 2\" },\n    { name = \"long_task\", command = \"sleep 3\" }\n  })\n  if err then\n    return false, \"Execu\u00e7\u00e3o paralela falhou\"\n  end\n  return true, \"Todas as tarefas paralelas terminaram.\"\nend\n</code></pre></p>"},{"location":"pt/core-concepts/#exporttable","title":"<code>export(table)</code>","text":"<p>Exporta dados de qualquer ponto de um script para a CLI. Quando a flag <code>--return</code> \u00e9 usada, todas as tabelas exportadas s\u00e3o mescladas com o output da tarefa final em um \u00fanico objeto JSON.</p> <ul> <li><code>table</code>: Uma tabela Lua a ser exportada.</li> </ul> <p>Exemplo: <pre><code>command = function()\n  export({ valor_importante = \"dado do meio da tarefa\" })\n  return true, \"Tarefa conclu\u00edda\", { output_final = \"algum resultado\" }\nend\n</code></pre> Executar com <code>--return</code> produziria: <pre><code>{\n  \"valor_importante\": \"dado do meio da tarefa\",\n  \"output_final\": \"algum resultado\"\n}\n</code></pre></p>"},{"location":"pt/distributed/","title":"Execu\u00e7\u00e3o de Tarefas Distribu\u00eddas","text":"<p><code>sloth-runner</code> suporta a execu\u00e7\u00e3o de tarefas distribu\u00eddas, permitindo que voc\u00ea execute tarefas em agentes remotos. Isso possibilita fluxos de trabalho escal\u00e1veis e distribu\u00eddos, onde diferentes partes do seu pipeline podem ser executadas em m\u00e1quinas distintas.</p>"},{"location":"pt/distributed/#como-funciona","title":"Como Funciona","text":"<p>O modelo de execu\u00e7\u00e3o distribu\u00edda no <code>sloth-runner</code> segue uma arquitetura mestre-agente:</p> <ol> <li>Mestre: A inst\u00e2ncia principal do <code>sloth-runner</code> atua como o mestre. Ela analisa a defini\u00e7\u00e3o do fluxo de trabalho, identifica as tarefas configuradas para serem executadas em agentes remotos e as despacha.</li> <li>Agente: Uma inst\u00e2ncia do <code>sloth-runner</code> executando no modo <code>agent</code> em uma m\u00e1quina remota. Ela escuta as solicita\u00e7\u00f5es de execu\u00e7\u00e3o de tarefas recebidas do mestre, executa as tarefas e envia os resultados de volta.</li> </ol>"},{"location":"pt/distributed/#configurando-tarefas-remotas","title":"Configurando Tarefas Remotas","text":"<p>Para executar uma tarefa em um agente remoto, voc\u00ea precisa especificar o campo <code>delegate_to</code> no grupo de tarefas ou na defini\u00e7\u00e3o da tarefa individual.</p>"},{"location":"pt/distributed/#1-delegar-a-um-agente-no-nivel-do-grupo-de-tarefas","title":"1. Delegar a um Agente no N\u00edvel do Grupo de Tarefas","text":"<p>Voc\u00ea pode definir o agente diretamente dentro do seu grupo <code>Modern DSLs</code> usando o campo <code>delegate_to</code>. Todas as tarefas dentro deste grupo ser\u00e3o ent\u00e3o delegadas a este agente, a menos que sejam substitu\u00eddas por um <code>delegate_to</code> espec\u00edfico da tarefa.</p> <pre><code>Modern DSLs = {\n  my_distributed_group = {\n    description = \"Um grupo de tarefas com tarefas distribu\u00eddas.\",\n    delegate_to = { address = \"localhost:50051\" }, -- Define o agente para todo o grupo\n    tasks = {\n      {\n        name = \"remote_hello\",\n        description = \"Executa uma tarefa hello world em um agente remoto.\",\n        -- N\u00e3o \u00e9 necess\u00e1rio o campo 'delegate_to' aqui, ele herda do grupo\n        command = function(params)\n          log.info(\"Ol\u00e1 do agente remoto!\")\n          return true, \"Tarefa remota executada.\"\n        end\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"pt/distributed/#2-delegar-a-um-agente-no-nivel-da-tarefa","title":"2. Delegar a um Agente no N\u00edvel da Tarefa","text":"<p>Alternativamente, voc\u00ea pode especificar o campo <code>delegate_to</code> diretamente em uma tarefa individual. Isso substituir\u00e1 qualquer delega\u00e7\u00e3o em n\u00edvel de grupo ou permitir\u00e1 a execu\u00e7\u00e3o remota ad-hoc.</p> <pre><code>Modern DSLs = {\n  my_group = {\n    description = \"Um grupo de tarefas com uma tarefa remota espec\u00edfica.\",\n    tasks = {\n      {\n        name = \"specific_remote_task\",\n        description = \"Executa esta tarefa em um agente remoto espec\u00edfico.\",\n        delegate_to = { address = \"192.168.1.100:50051\" }, -- Define o agente apenas para esta tarefa\n        command = function(params)\n          log.info(\"Ol\u00e1 de um agente remoto espec\u00edfico!\")\n          return true, \"Tarefa remota espec\u00edfica executada.\"\n        end\n      },\n      {\n        name = \"local_task\",\n        description = \"Esta tarefa \u00e9 executada localmente.\",\n        command = \"echo 'Ol\u00e1 da m\u00e1quina local!'\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"pt/distributed/#executando-um-agente","title":"Executando um Agente","text":"<p>Para iniciar uma inst\u00e2ncia do <code>sloth-runner</code> no modo agente, use o comando <code>agent</code>:</p> <pre><code>sloth-runner agent -p 50051\n</code></pre> <ul> <li><code>-p, --port</code>: Especifica a porta em que o agente deve escutar. O padr\u00e3o \u00e9 <code>50051</code>.</li> </ul> <p>Quando um agente \u00e9 iniciado, ele escutar\u00e1 as solicita\u00e7\u00f5es gRPC recebidas da inst\u00e2ncia mestre do <code>sloth-runner</code>. Ao receber uma tarefa, ele a executar\u00e1 em seu ambiente local e retornar\u00e1 o resultado, juntamente com quaisquer arquivos de espa\u00e7o de trabalho atualizados, de volta ao mestre.</p>"},{"location":"pt/distributed/#sincronizacao-do-espaco-de-trabalho","title":"Sincroniza\u00e7\u00e3o do Espa\u00e7o de Trabalho","text":"<p>Quando uma tarefa \u00e9 despachada para um agente remoto, o <code>sloth-runner</code> lida automaticamente com a sincroniza\u00e7\u00e3o do espa\u00e7o de trabalho da tarefa:</p> <ol> <li>Mestre para Agente: O mestre cria um tarball do diret\u00f3rio de trabalho atual da tarefa e o envia para o agente.</li> <li>Execu\u00e7\u00e3o do Agente: O agente extrai o tarball para um diret\u00f3rio tempor\u00e1rio, executa a tarefa dentro desse diret\u00f3rio e quaisquer altera\u00e7\u00f5es feitas nos arquivos no diret\u00f3rio tempor\u00e1rio s\u00e3o capturadas.</li> <li>Agente para Mestre: Ap\u00f3s a conclus\u00e3o da tarefa, o agente cria um tarball do diret\u00f3rio tempor\u00e1rio modificado e o envia de volta ao mestre. O mestre ent\u00e3o extrai esse tarball, atualizando seu espa\u00e7o de trabalho local com quaisquer altera\u00e7\u00f5es feitas pela tarefa remota.</li> </ol>"},{"location":"pt/getting-started/","title":"In\u00edcio R\u00e1pido","text":"<p>Bem-vindo ao Sloth-Runner! Este guia o ajudar\u00e1 a come\u00e7ar a usar a ferramenta rapidamente.</p> <p>\ud83d\udcdd Nota Importante: A partir da vers\u00e3o atual, os arquivos de workflow do Sloth Runner usam a extens\u00e3o <code>.sloth</code> em vez de <code>.sloth</code>. A sintaxe Lua permanece a mesma - apenas a extens\u00e3o do arquivo mudou para melhor identifica\u00e7\u00e3o dos arquivos DSL do Sloth Runner.</p>"},{"location":"pt/getting-started/#instalacao","title":"Instala\u00e7\u00e3o","text":"<p>Para instalar o <code>sloth-runner</code> em seu sistema, voc\u00ea pode usar o script <code>install.sh</code> fornecido. Este script detecta automaticamente seu sistema operacional e arquitetura, baixa a vers\u00e3o mais recente do GitHub e coloca o execut\u00e1vel <code>sloth-runner</code> em <code>/usr/local/bin</code>.</p> <pre><code>bash &lt;(curl -sL https://raw.githubusercontent.com/chalkan3-sloth/sloth-runner/master/install.sh)\n</code></pre> <p>Nota: O script <code>install.sh</code> requer privil\u00e9gios de <code>sudo</code> para mover o execut\u00e1vel para <code>/usr/local/bin</code>.</p>"},{"location":"pt/getting-started/#uso-basico","title":"Uso B\u00e1sico","text":""},{"location":"pt/getting-started/#gerenciamento-de-stacks","title":"Gerenciamento de Stacks","text":"<pre><code># Criar um novo stack\nsloth-runner stack new my-app --description \"Stack de deployment da aplica\u00e7\u00e3o\"\n\n# Executar workflows em stacks\nsloth-runner run my-app -f examples/basic_pipeline.sloth\n\n# Listar todos os stacks\nsloth-runner stack list\n\n# Ver detalhes do stack\nsloth-runner stack show my-app\n</code></pre>"},{"location":"pt/getting-started/#execucao-direta-de-workflow","title":"Execu\u00e7\u00e3o Direta de Workflow","text":"<p>Para executar um arquivo de workflow diretamente:</p> <pre><code>sloth-runner run -f examples/basic_pipeline.sloth\n</code></pre> <p>Para listar as tarefas em um arquivo:</p> <pre><code>sloth-runner list -f examples/basic_pipeline.sloth\n</code></pre>"},{"location":"pt/getting-started/#agendador-de-tarefas-novo","title":"Agendador de Tarefas (Novo!)","text":"<p>O Sloth-Runner agora inclui um poderoso agendador de tarefas que permite automatizar a execu\u00e7\u00e3o de seus fluxos de trabalho em segundo plano usando sintaxe cron. Para mais detalhes sobre como configurar e usar o agendador, consulte a documenta\u00e7\u00e3o completa em Agendador de Tarefas.</p>"},{"location":"pt/getting-started/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<p>Agora que voc\u00ea tem o Sloth-Runner instalado e funcionando, explore os Conceitos Essenciais para entender como definir suas tarefas, ou mergulhe diretamente nos novos M\u00f3dulos Built-in para automa\u00e7\u00e3o avan\u00e7ada com Git, Pulumi e Salt.</p> <p>English | Portugu\u00eas | \u4e2d\u6587</p>"},{"location":"pt/nvim-plugin/","title":"\ud83e\udda5 Plugin Neovim","text":"<p>Suporte completo para Sloth Runner DSL no Neovim/LunarVim</p> <p>O plugin Neovim do Sloth Runner oferece recursos completos de IDE para trabalhar com arquivos de workflow <code>.sloth</code>, incluindo syntax highlighting, autocompletar e execu\u00e7\u00e3o integrada de tarefas.</p>"},{"location":"pt/nvim-plugin/#recursos","title":"\u2728 Recursos","text":""},{"location":"pt/nvim-plugin/#syntax-highlighting-avancado","title":"\ud83c\udfa8 Syntax Highlighting Avan\u00e7ado","text":"<ul> <li>Cores customizadas para palavras-chave DSL, m\u00e9todos e m\u00f3dulos</li> <li>Interpola\u00e7\u00e3o de strings destacada com sintaxe <code>${variavel}</code></li> <li>Detec\u00e7\u00e3o de caminhos para arquivos de script e configura\u00e7\u00e3o</li> <li>Vari\u00e1veis de ambiente em destaque</li> <li>Suporte a coment\u00e1rios com verifica\u00e7\u00e3o ortogr\u00e1fica</li> </ul>"},{"location":"pt/nvim-plugin/#deteccao-inteligente-de-arquivos","title":"\ud83d\udcc1 Detec\u00e7\u00e3o Inteligente de Arquivos","text":"<ul> <li>Auto-detecta arquivos <code>.sloth</code> e aplica highlighting adequado</li> <li>Compatibilidade com extens\u00e3o <code>.lua</code> para retrocompatibilidade</li> <li>\u00cdcones personalizados (\ud83e\udda5) em exploradores de arquivo</li> </ul>"},{"location":"pt/nvim-plugin/#autocompletar-de-codigo","title":"\u26a1 Autocompletar de C\u00f3digo","text":"<ul> <li>Completion inteligente para m\u00e9todos DSL: <code>command</code>, <code>description</code>, <code>timeout</code>, etc.</li> <li>Completion de m\u00f3dulos para m\u00f3dulos internos: <code>exec</code>, <code>fs</code>, <code>net</code>, <code>aws</code>, etc.</li> <li>Completion de fun\u00e7\u00f5es para padr\u00f5es comuns: <code>task()</code>, <code>workflow.define()</code></li> </ul>"},{"location":"pt/nvim-plugin/#executor-integrado","title":"\ud83d\udd27 Executor Integrado","text":"<ul> <li>Executar workflows diretamente do Neovim com <code>&lt;leader&gt;sr</code></li> <li>Listar tarefas no arquivo atual com <code>&lt;leader&gt;sl</code></li> <li>Suporte a dry-run para testar workflows</li> </ul>"},{"location":"pt/nvim-plugin/#snippets-templates-de-codigo","title":"\ud83d\udccb Snippets &amp; Templates de C\u00f3digo","text":"<ul> <li>Cria\u00e7\u00e3o r\u00e1pida de tarefas com abrevia\u00e7\u00e3o <code>_task</code></li> <li>Templates de workflow com abrevia\u00e7\u00e3o <code>_workflow</code></li> <li>Templates de fun\u00e7\u00e3o com abrevia\u00e7\u00e3o <code>_cmd</code></li> <li>Templates auto-gerados para novos arquivos <code>.sloth</code></li> </ul>"},{"location":"pt/nvim-plugin/#text-objects-navegacao","title":"\ud83c\udfaf Text Objects &amp; Navega\u00e7\u00e3o","text":"<ul> <li>Selecionar blocos de tarefa com <code>vit</code> (visual in task)</li> <li>Selecionar blocos de workflow com <code>viw</code> (visual in workflow)</li> <li>Dobramento inteligente para se\u00e7\u00f5es de c\u00f3digo recolh\u00edveis</li> <li>Indenta\u00e7\u00e3o inteligente para encadeamento DSL</li> </ul>"},{"location":"pt/nvim-plugin/#configuracao-rapida","title":"\ud83d\ude80 Configura\u00e7\u00e3o R\u00e1pida","text":""},{"location":"pt/nvim-plugin/#para-usuarios-do-lunarvim","title":"Para Usu\u00e1rios do LunarVim","text":"<p>Adicione ao seu <code>~/.config/lvim/config.lua</code>:</p> <pre><code>-- Desabilitar formata\u00e7\u00e3o autom\u00e1tica (recomendado)\nlvim.format_on_save.enabled = false\n\n-- Configurar \u00edcones de arquivos sloth\nrequire('nvim-web-devicons').setup {\n  override_by_extension = {\n    [\"sloth\"] = {\n      icon = \"\ud83e\udda5\",\n      color = \"#8B4513\",\n      name = \"SlothDSL\"\n    }\n  }\n}\n\n-- Mapeamentos de teclas para sloth runner\nlvim.keys.normal_mode[\"&lt;leader&gt;sr\"] = function()\n  local file = vim.api.nvim_buf_get_name(0)\n  if file:match(\"%.sloth$\") then\n    vim.cmd(\"split | terminal sloth-runner run -f \" .. vim.fn.shellescape(file))\n  end\nend\n\nlvim.keys.normal_mode[\"&lt;leader&gt;sl\"] = function()\n  local file = vim.api.nvim_buf_get_name(0)\n  if file:match(\"%.sloth$\") then\n    vim.cmd(\"split | terminal sloth-runner list -f \" .. vim.fn.shellescape(file))\n  end\nend\n\n-- Comando de formata\u00e7\u00e3o manual\nlvim.keys.normal_mode[\"&lt;leader&gt;sf\"] = \":SlothFormat&lt;CR&gt;\"\n</code></pre>"},{"location":"pt/nvim-plugin/#para-neovim-padrao","title":"Para Neovim Padr\u00e3o","text":"<p>Usando lazy.nvim:</p> <pre><code>{\n  dir = \"/caminho/para/sloth-runner/nvim-plugin\",\n  name = \"sloth-runner\",\n  ft = { \"sloth\" },\n  config = function()\n    require(\"sloth-runner\").setup({\n      runner = {\n        command = \"sloth-runner\",\n        keymaps = {\n          run_file = \"&lt;leader&gt;sr\",\n          list_tasks = \"&lt;leader&gt;sl\",\n          dry_run = \"&lt;leader&gt;st\",\n          debug = \"&lt;leader&gt;sd\",\n        }\n      },\n      completion = {\n        enable = true,\n        snippets = true,\n      },\n      folding = {\n        enable = true,\n        auto_close = false,\n      }\n    })\n  end,\n}\n</code></pre>"},{"location":"pt/nvim-plugin/#mapeamentos-de-teclas","title":"\ud83d\udcdd Mapeamentos de Teclas","text":"Tecla A\u00e7\u00e3o Descri\u00e7\u00e3o <code>&lt;leader&gt;sr</code> Executar Arquivo Executa o workflow <code>.sloth</code> atual <code>&lt;leader&gt;sl</code> Listar Tarefas Mostra todas as tarefas no arquivo atual <code>&lt;leader&gt;st</code> Dry Run Testa workflow sem execu\u00e7\u00e3o <code>&lt;leader&gt;sd</code> Debug Executa com sa\u00edda de debug <code>&lt;leader&gt;sf</code> Formatar Formata arquivo atual (manual)"},{"location":"pt/nvim-plugin/#snippets-de-codigo","title":"\ud83c\udfa8 Snippets de C\u00f3digo","text":""},{"location":"pt/nvim-plugin/#criacao-rapida-de-tarefa","title":"Cria\u00e7\u00e3o R\u00e1pida de Tarefa","text":"<p>Digite <code>_task</code> e pressione Tab:</p> <pre><code>local nome_tarefa = task(\"\")\n    :description(\"\")\n    :command(function(params, deps)\n        -- TODO: implementar\n        return true\n    end)\n    :build()\n</code></pre>"},{"location":"pt/nvim-plugin/#criacao-rapida-de-workflow","title":"Cria\u00e7\u00e3o R\u00e1pida de Workflow","text":"<p>Digite <code>_workflow</code> e pressione Tab:</p> <pre><code>workflow.define(\"\", {\n    description = \"\",\n    version = \"1.0.0\",\n    tasks = {\n        -- tarefas aqui\n    }\n})\n</code></pre>"},{"location":"pt/nvim-plugin/#funcao-de-comando-rapida","title":"Fun\u00e7\u00e3o de Comando R\u00e1pida","text":"<p>Digite <code>_cmd</code> e pressione Tab:</p> <pre><code>:command(function(params, deps)\n    -- TODO: implementar\n    return true\nend)\n</code></pre>"},{"location":"pt/nvim-plugin/#configuracao-avancada","title":"\ud83d\udd27 Configura\u00e7\u00e3o Avan\u00e7ada","text":""},{"location":"pt/nvim-plugin/#syntax-highlighting-personalizado","title":"Syntax Highlighting Personalizado","text":"<p>O plugin fornece grupos de highlight personalizados:</p> <pre><code>-- Personalizar cores (adicione \u00e0 sua config)\nvim.api.nvim_create_autocmd(\"ColorScheme\", {\n  pattern = \"*\",\n  callback = function()\n    vim.api.nvim_set_hl(0, \"slothDSLKeyword\", { fg = '#8B4513', bold = true })\n    vim.api.nvim_set_hl(0, \"slothModule\", { fg = '#228B22', bold = true })\n    vim.api.nvim_set_hl(0, \"slothMethod\", { fg = '#4682B4' })\n    vim.api.nvim_set_hl(0, \"slothFunction\", { fg = '#DAA520' })\n    vim.api.nvim_set_hl(0, \"slothEnvVar\", { fg = '#DC143C', bold = true })\n    vim.api.nvim_set_hl(0, \"slothPath\", { fg = '#20B2AA' })\n  end\n})\n</code></pre>"},{"location":"pt/nvim-plugin/#integracao-com-arvore-de-arquivos","title":"Integra\u00e7\u00e3o com \u00c1rvore de Arquivos","text":"<p>Para usu\u00e1rios do nvim-tree:</p> <pre><code>require(\"nvim-tree\").setup({\n  renderer = {\n    icons = {\n      glyphs = {\n        extension = {\n          sloth = \"\ud83e\udda5\"\n        }\n      }\n    }\n  }\n})\n</code></pre>"},{"location":"pt/nvim-plugin/#instalacao-manual","title":"\ud83d\udee0\ufe0f Instala\u00e7\u00e3o Manual","text":"<ol> <li> <p>Clone ou copie os arquivos do plugin: <pre><code>cp -r /caminho/para/sloth-runner/nvim-plugin ~/.config/nvim/\n</code></pre></p> </li> <li> <p>Adicione \u00e0 sua configura\u00e7\u00e3o do Neovim: <pre><code>-- Adicione ao init.lua ou init.vim\nvim.opt.runtimepath:append(\"~/.config/nvim/nvim-plugin\")\n</code></pre></p> </li> <li> <p>Reinicie o Neovim e abra um arquivo <code>.sloth</code></p> </li> </ol>"},{"location":"pt/nvim-plugin/#solucao-de-problemas","title":"\ud83d\udc1b Solu\u00e7\u00e3o de Problemas","text":""},{"location":"pt/nvim-plugin/#syntax-highlighting-nao-funciona","title":"Syntax Highlighting N\u00e3o Funciona","text":"<ul> <li>Certifique-se de que o arquivo tem extens\u00e3o <code>.sloth</code></li> <li>Execute <code>:set filetype=sloth</code> manualmente se necess\u00e1rio</li> <li>Verifique se os arquivos do plugin est\u00e3o no local correto</li> </ul>"},{"location":"pt/nvim-plugin/#mapeamentos-de-teclas-nao-funcionam","title":"Mapeamentos de Teclas N\u00e3o Funcionam","text":"<ul> <li>Verifique se <code>sloth-runner</code> est\u00e1 no seu PATH</li> <li>Verifique se as teclas est\u00e3o conflitando com outros plugins</li> <li>Use <code>:map &lt;leader&gt;sr</code> para verificar se o mapeamento existe</li> </ul>"},{"location":"pt/nvim-plugin/#autocompletar-nao-aparece","title":"Autocompletar N\u00e3o Aparece","text":"<ul> <li>Certifique-se de que completion est\u00e1 habilitado: <code>:set completeopt=menu,menuone,noselect</code></li> <li>Tente disparar manualmente com <code>&lt;C-x&gt;&lt;C-o&gt;</code></li> <li>Verifique se omnifunc est\u00e1 definido: <code>:set omnifunc?</code></li> </ul>"},{"location":"pt/nvim-plugin/#problemas-de-formatacao","title":"Problemas de Formata\u00e7\u00e3o","text":"<ul> <li>Formata\u00e7\u00e3o autom\u00e1tica est\u00e1 desabilitada por padr\u00e3o para evitar conflitos</li> <li>Use formata\u00e7\u00e3o manual: <code>&lt;leader&gt;sf</code> ou <code>:SlothFormat</code></li> <li>Para formata\u00e7\u00e3o com stylua, certifique-se de que est\u00e1 instalado e configurado</li> </ul>"},{"location":"pt/nvim-plugin/#exemplos","title":"\ud83d\udcd6 Exemplos","text":""},{"location":"pt/nvim-plugin/#arquivo-de-workflow-basico","title":"Arquivo de Workflow B\u00e1sico","text":"<pre><code>-- deployment.sloth\nlocal tarefa_deploy = task(\"deploy_app\")\n    :description(\"Deploy da aplica\u00e7\u00e3o para produ\u00e7\u00e3o\")\n    :command(function(params, deps)\n        local resultado = exec.run(\"kubectl apply -f deployment.yaml\")\n        if not resultado.success then\n            log.error(\"Deploy falhou: \" .. resultado.stderr)\n            return false\n        end\n\n        log.info(\"\ud83d\ude80 Deploy realizado com sucesso!\")\n        return true\n    end)\n    :timeout(300)\n    :retries(3)\n    :build()\n\nworkflow.define(\"deployment_producao\", {\n    description = \"Workflow de deploy para produ\u00e7\u00e3o\",\n    version = \"1.0.0\",\n    tasks = { tarefa_deploy }\n})\n</code></pre> <p>Com o plugin instalado, este arquivo ter\u00e1: - Syntax highlighting para palavras-chave, fun\u00e7\u00f5es e strings - Autocompletar ao digitar nomes de m\u00e9todos - Execu\u00e7\u00e3o r\u00e1pida com <code>&lt;leader&gt;sr</code> - Listagem de tarefas com <code>&lt;leader&gt;sl</code></p>"},{"location":"pt/nvim-plugin/#proximos-passos","title":"\ud83d\ude80 Pr\u00f3ximos Passos","text":"<ul> <li>Aprenda a DSL: Veja Conceitos Fundamentais</li> <li>Teste Exemplos: Consulte Guia de Exemplos</li> <li>Recursos Avan\u00e7ados: Explore Recursos Avan\u00e7ados</li> <li>Refer\u00eancia da API: Leia Documenta\u00e7\u00e3o da API Lua</li> </ul> <p>O plugin Neovim torna a cria\u00e7\u00e3o de workflows Sloth muito mais f\u00e1cil com suporte completo de IDE. Comece a criar automa\u00e7\u00f5es poderosas com confian\u00e7a! \ud83e\udda5\u2728</p>"},{"location":"pt/plugin-development/","title":"\ud83d\udd0c Desenvolvimento de Plugins","text":"<p>Construindo Extens\u00f5es para a Plataforma Sloth Runner</p> <p>O Sloth Runner fornece um sistema de plugins poderoso que permite aos desenvolvedores estender a plataforma com funcionalidades personalizadas. Este guia cobre tudo que voc\u00ea precisa saber para desenvolver seus pr\u00f3prios plugins.</p>"},{"location":"pt/plugin-development/#arquitetura-de-plugins","title":"\ud83c\udfd7\ufe0f Arquitetura de Plugins","text":""},{"location":"pt/plugin-development/#tipos-de-plugins","title":"Tipos de Plugins","text":"<p>O Sloth Runner suporta v\u00e1rios tipos de plugins:</p> <ol> <li>\ud83c\udf19 M\u00f3dulos Lua - Estendem a DSL com novas fun\u00e7\u00f5es e capacidades</li> <li>\u26a1 Processadores de Comando - Adicionam novos comandos CLI e opera\u00e7\u00f5es</li> <li>\ud83c\udfa8 Extens\u00f5es de UI - Melhoram o dashboard web e interface</li> <li>\ud83d\udd17 Integra\u00e7\u00f5es - Conectam com ferramentas e servi\u00e7os externos</li> <li>\ud83e\udda5 Plugins de Editor - Extens\u00f5es para IDE/Editor (como nosso plugin Neovim)</li> </ol>"},{"location":"pt/plugin-development/#componentes-principais","title":"Componentes Principais","text":"<pre><code>sloth-runner/\n\u251c\u2500\u2500 plugins/\n\u2502   \u251c\u2500\u2500 lua-modules/       # Extens\u00f5es DSL Lua\n\u2502   \u251c\u2500\u2500 commands/          # Plugins de comando CLI\n\u2502   \u251c\u2500\u2500 ui/               # Extens\u00f5es de UI web\n\u2502   \u251c\u2500\u2500 integrations/     # Integra\u00e7\u00f5es de terceiros\n\u2502   \u2514\u2500\u2500 editors/          # Plugins de editor/IDE\n\u2514\u2500\u2500 internal/\n    \u2514\u2500\u2500 plugin/           # Core do sistema de plugins\n</code></pre>"},{"location":"pt/plugin-development/#desenvolvendo-plugins-de-modulo-lua","title":"\ud83c\udf19 Desenvolvendo Plugins de M\u00f3dulo Lua","text":""},{"location":"pt/plugin-development/#estrutura-basica","title":"Estrutura B\u00e1sica","text":"<p>Crie um novo m\u00f3dulo Lua que estende a DSL:</p> <pre><code>-- plugins/lua-modules/meu-modulo/init.lua\nlocal M = {}\n\n-- Metadados do m\u00f3dulo\nM._NAME = \"meu-modulo\"\nM._VERSION = \"1.0.0\"\nM._DESCRIPTION = \"Funcionalidade customizada para Sloth Runner\"\n\n-- API P\u00fablica\nfunction M.ola(nome)\n    return string.format(\"Ol\u00e1, %s do meu m\u00f3dulo customizado!\", nome or \"Mundo\")\nend\n\nfunction M.tarefa_customizada(config)\n    return {\n        execute = function(params)\n            log.info(\"\ud83d\udd0c Executando tarefa customizada: \" .. config.name)\n            -- L\u00f3gica da tarefa customizada aqui\n            return true\n        end,\n        validate = function()\n            return config.name ~= nil\n        end\n    }\nend\n\n-- Registrar fun\u00e7\u00f5es do m\u00f3dulo\nfunction M.register()\n    -- Tornar fun\u00e7\u00f5es dispon\u00edveis na DSL\n    _G.meu_modulo = M\n\n    -- Registrar tipo de tarefa customizada\n    task.register_type(\"customizada\", M.tarefa_customizada)\nend\n\nreturn M\n</code></pre>"},{"location":"pt/plugin-development/#usando-modulos-customizados-em-workflows","title":"Usando M\u00f3dulos Customizados em Workflows","text":"<pre><code>-- workflow.sloth\nlocal minha_tarefa = task(\"teste_customizado\")\n    :type(\"customizada\", { name = \"teste\" })\n    :description(\"Testando plugin customizado\")\n    :build()\n\n-- Uso direto do m\u00f3dulo\nlocal saudacao = meu_modulo.ola(\"Desenvolvedor\")\nlog.info(saudacao)\n\nworkflow.define(\"teste_plugin\", {\n    description = \"Testando plugin customizado\",\n    tasks = { minha_tarefa }\n})\n</code></pre>"},{"location":"pt/plugin-development/#registro-de-plugin","title":"Registro de Plugin","text":"<p>Crie um manifesto de plugin:</p> <pre><code># plugins/lua-modules/meu-modulo/plugin.yaml\nname: meu-modulo\nversion: 1.0.0\ndescription: Funcionalidade customizada para Sloth Runner\ntype: lua-module\nauthor: Seu Nome\nlicense: MIT\n\nentry_point: init.lua\ndependencies:\n  - sloth-runner: \"&gt;=1.0.0\"\n\npermissions:\n  - filesystem.read\n  - network.http\n  - system.exec\n\nconfiguration:\n  settings:\n    api_key:\n      type: string\n      required: false\n      description: \"Chave da API para servi\u00e7o externo\"\n</code></pre>"},{"location":"pt/plugin-development/#desenvolvimento-de-plugin-de-comando","title":"\u26a1 Desenvolvimento de Plugin de Comando","text":""},{"location":"pt/plugin-development/#estrutura-de-comando-cli","title":"Estrutura de Comando CLI","text":"<pre><code>// plugins/commands/meu-comando/main.go\npackage main\n\nimport (\n    \"github.com/spf13/cobra\"\n    \"github.com/chalkan3-sloth/sloth-runner/pkg/plugin\"\n)\n\ntype MeuComandoPlugin struct {\n    config *MinhaConfig\n}\n\ntype MinhaConfig struct {\n    Configuracao1 string `json:\"configuracao1\"`\n    Configuracao2 int    `json:\"configuracao2\"`\n}\n\nfunc (p *MeuComandoPlugin) Name() string {\n    return \"meu-comando\"\n}\n\nfunc (p *MeuComandoPlugin) Command() *cobra.Command {\n    cmd := &amp;cobra.Command{\n        Use:   \"meu-comando\",\n        Short: \"Funcionalidade de comando customizado\",\n        Long:  \"Descri\u00e7\u00e3o estendida do comando customizado\",\n        RunE:  p.execute,\n    }\n\n    cmd.Flags().StringVar(&amp;p.config.Configuracao1, \"config1\", \"\", \"Configura\u00e7\u00e3o customizada\")\n    cmd.Flags().IntVar(&amp;p.config.Configuracao2, \"config2\", 0, \"Outra configura\u00e7\u00e3o\")\n\n    return cmd\n}\n\nfunc (p *MeuComandoPlugin) execute(cmd *cobra.Command, args []string) error {\n    log.Info(\"\ud83d\udd0c Executando comando customizado com configura\u00e7\u00f5es:\", \n        \"config1\", p.config.Configuracao1,\n        \"config2\", p.config.Configuracao2)\n\n    // L\u00f3gica do comando customizado aqui\n    return nil\n}\n\nfunc main() {\n    plugin := &amp;MeuComandoPlugin{\n        config: &amp;MinhaConfig{},\n    }\n\n    plugin.Register()\n}\n</code></pre>"},{"location":"pt/plugin-development/#ferramentas-de-desenvolvimento-de-plugin","title":"\ud83d\udee0\ufe0f Ferramentas de Desenvolvimento de Plugin","text":""},{"location":"pt/plugin-development/#gerador-de-plugin","title":"Gerador de Plugin","text":"<p>Crie novos plugins rapidamente com o gerador:</p> <pre><code># Gerar um novo plugin de m\u00f3dulo Lua\nsloth-runner plugin generate --type=lua-module --name=meu-modulo\n\n# Gerar um plugin de comando CLI\nsloth-runner plugin generate --type=command --name=meu-comando\n\n# Gerar uma extens\u00e3o de UI\nsloth-runner plugin generate --type=ui --name=meu-dashboard\n</code></pre>"},{"location":"pt/plugin-development/#ambiente-de-desenvolvimento","title":"Ambiente de Desenvolvimento","text":"<pre><code># Iniciar servidor de desenvolvimento com hot-reload de plugin\nsloth-runner dev --plugins-dir=./plugins\n\n# Testar plugin localmente\nsloth-runner plugin test ./plugins/meu-plugin\n\n# Construir plugin para distribui\u00e7\u00e3o\nsloth-runner plugin build ./plugins/meu-plugin --output=dist/\n</code></pre>"},{"location":"pt/plugin-development/#teste-de-plugin","title":"Teste de Plugin","text":"<pre><code>// plugins/meu-plugin/plugin_test.go\npackage main\n\nimport (\n    \"testing\"\n    \"github.com/chalkan3-sloth/sloth-runner/pkg/plugin/testing\"\n)\n\nfunc TestMeuPlugin(t *testing.T) {\n    // Criar ambiente de teste\n    env := plugintest.NewEnvironment(t)\n\n    // Carregar plugin\n    plugin, err := env.LoadPlugin(\"./\")\n    if err != nil {\n        t.Fatal(err)\n    }\n\n    // Testar funcionalidade do plugin\n    result, err := plugin.Execute(map[string]interface{}{\n        \"parametro_teste\": \"valor\",\n    })\n\n    if err != nil {\n        t.Fatal(err)\n    }\n\n    // Verificar resultados\n    if result.Status != \"success\" {\n        t.Errorf(\"Esperado sucesso, obtido %s\", result.Status)\n    }\n}\n</code></pre>"},{"location":"pt/plugin-development/#distribuicao-de-plugin","title":"\ud83d\udce6 Distribui\u00e7\u00e3o de Plugin","text":""},{"location":"pt/plugin-development/#registro-de-plugin_1","title":"Registro de Plugin","text":"<p>Publique seu plugin no registro de plugins do Sloth Runner:</p> <pre><code># Login no registro\nsloth-runner registry login\n\n# Publicar plugin\nsloth-runner plugin publish ./meu-plugin\n\n# Instalar plugin publicado\nsloth-runner plugin install meu-usuario/meu-plugin\n</code></pre>"},{"location":"pt/plugin-development/#marketplace-de-plugin","title":"Marketplace de Plugin","text":"<p>Navegue e descubra plugins:</p> <pre><code># Buscar plugins\nsloth-runner plugin search \"kubernetes\"\n\n# Obter informa\u00e7\u00f5es do plugin\nsloth-runner plugin info kubernetes-operator\n\n# Instalar do marketplace\nsloth-runner plugin install --marketplace kubernetes-operator\n</code></pre>"},{"location":"pt/plugin-development/#seguranca-e-melhores-praticas","title":"\ud83d\udd12 Seguran\u00e7a e Melhores Pr\u00e1ticas","text":""},{"location":"pt/plugin-development/#diretrizes-de-seguranca","title":"Diretrizes de Seguran\u00e7a","text":"<ol> <li>\ud83d\udee1\ufe0f Princ\u00edpio do Menor Privil\u00e9gio - Solicite apenas as permiss\u00f5es necess\u00e1rias</li> <li>\ud83d\udd10 Valida\u00e7\u00e3o de Entrada - Sempre valide entrada do usu\u00e1rio e configura\u00e7\u00e3o</li> <li>\ud83d\udeab Evitar Estado Global - Mantenha o estado do plugin isolado</li> <li>\ud83d\udcdd Tratamento de Erros - Forne\u00e7a mensagens de erro claras e logging</li> <li>\ud83e\uddea Testes - Escreva testes abrangentes para toda a funcionalidade</li> </ol>"},{"location":"pt/plugin-development/#qualidade-de-codigo","title":"Qualidade de C\u00f3digo","text":"<pre><code>// Bom: Tratamento claro de erros\nfunc (p *MeuPlugin) Execute(params map[string]interface{}) (*Result, error) {\n    value, ok := params[\"parametro_obrigatorio\"].(string)\n    if !ok {\n        return nil, fmt.Errorf(\"parametro_obrigatorio deve ser uma string\")\n    }\n\n    if value == \"\" {\n        return nil, fmt.Errorf(\"parametro_obrigatorio n\u00e3o pode estar vazio\")\n    }\n\n    // Processar com entrada validada\n    result := p.process(value)\n    return result, nil\n}\n</code></pre>"},{"location":"pt/plugin-development/#padroes-de-documentacao","title":"Padr\u00f5es de Documenta\u00e7\u00e3o","text":"<p>Cada plugin deve incluir:</p> <ul> <li>\ud83d\udccb README.md - Instru\u00e7\u00f5es de instala\u00e7\u00e3o e uso</li> <li>\ud83d\udcda Documenta\u00e7\u00e3o da API - Documenta\u00e7\u00e3o de fun\u00e7\u00e3o/m\u00e9todo</li> <li>\ud83d\udcd6 Exemplos - Exemplos de c\u00f3digo funcionais</li> <li>\ud83e\uddea Testes - Testes unit\u00e1rios e de integra\u00e7\u00e3o</li> <li>\ud83d\udcc4 Licen\u00e7a - Informa\u00e7\u00f5es claras de licenciamento</li> </ul>"},{"location":"pt/plugin-development/#exemplos-e-templates","title":"\ud83d\udcda Exemplos e Templates","text":""},{"location":"pt/plugin-development/#exemplo-completo-de-plugin","title":"Exemplo Completo de Plugin","text":"<p>Confira estes plugins de exemplo:</p> <ul> <li>Plugin Kubernetes Operator - Gerenciar recursos K8s</li> <li>Plugin Integra\u00e7\u00e3o Slack - Enviar notifica\u00e7\u00f5es</li> <li>Plugin Dashboard Monitoramento - UI de m\u00e9tricas customizadas</li> </ul>"},{"location":"pt/plugin-development/#templates-de-plugin","title":"Templates de Plugin","text":"<p>Use templates oficiais para in\u00edcio r\u00e1pido:</p> <pre><code># Usar template\nsloth-runner plugin init --template=lua-module meu-plugin\nsloth-runner plugin init --template=go-command meu-comando\nsloth-runner plugin init --template=react-ui meu-dashboard\n</code></pre>"},{"location":"pt/plugin-development/#comunidade-e-suporte","title":"\ud83d\udcac Comunidade e Suporte","text":""},{"location":"pt/plugin-development/#obtendo-ajuda","title":"Obtendo Ajuda","text":"<ul> <li>\ud83d\udcd6 Documenta\u00e7\u00e3o da API de Plugin</li> <li>\ud83d\udcac Comunidade Discord - #plugin-development</li> <li>\ud83d\udc1b Issues do GitHub - Relat\u00f3rios de bug e solicita\u00e7\u00f5es de recurso</li> <li>\ud83d\udce7 Lista de Email de Plugin - Discuss\u00f5es de desenvolvimento</li> </ul>"},{"location":"pt/plugin-development/#contribuindo","title":"Contribuindo","text":"<p>Recebemos contribui\u00e7\u00f5es de plugin! Veja nosso Guia de Contribui\u00e7\u00e3o para detalhes sobre:</p> <ul> <li>Processo de submiss\u00e3o de plugin</li> <li>Diretrizes de revis\u00e3o de c\u00f3digo</li> <li>Requisitos de documenta\u00e7\u00e3o</li> <li>Padr\u00f5es de teste</li> </ul> <p>Comece a construir plugins incr\u00edveis para o Sloth Runner hoje! A arquitetura extens\u00edvel da plataforma torna f\u00e1cil adicionar exatamente a funcionalidade que voc\u00ea precisa. \ud83d\udd0c\u2728</p>"},{"location":"pt/quick-start/","title":"\u26a1 Tutorial R\u00e1pido","text":"<p>Para documenta\u00e7\u00e3o completa em portugu\u00eas, visite:</p>"},{"location":"pt/quick-start/#inicio-rapido","title":"\ud83d\ude80 In\u00edcio R\u00e1pido","text":""},{"location":"pt/quick-start/#instalacao","title":"Instala\u00e7\u00e3o","text":"<pre><code># Download\ncurl -sSL https://raw.githubusercontent.com/chalkan3-sloth/sloth-runner/master/install.sh | bash\n\n# Ou via Go\ngo install github.com/chalkan3-sloth/sloth-runner/cmd/sloth-runner@latest\n</code></pre>"},{"location":"pt/quick-start/#primeiro-workflow","title":"Primeiro Workflow","text":"<p>Crie um arquivo <code>hello.sloth</code>:</p> <pre><code>local hello_task = task(\"hello\")\n    :description(\"Minha primeira task\")\n    :command(function()\n        print(\"\ud83e\udda5 Ol\u00e1 do Sloth Runner!\")\n        return true\n    end)\n    :build()\n\nworkflow.define(\"hello_world\", {\n    description = \"Meu primeiro workflow\",\n    tasks = { hello_task }\n})\n</code></pre> <p>Execute:</p> <pre><code>sloth-runner run -f hello.sloth\n</code></pre>"},{"location":"pt/quick-start/#proximos-passos","title":"\ud83d\udcda Pr\u00f3ximos Passos","text":"<ul> <li>Conceitos Fundamentais</li> <li>Exemplos Avan\u00e7ados</li> <li>Recursos Avan\u00e7ados</li> </ul> <p>Para o tutorial completo, veja: Tutorial Principal</p>"},{"location":"pt/repl/","title":"REPL Interativo","text":"<p>O comando <code>sloth-runner repl</code> inicia uma sess\u00e3o interativa de Read-Eval-Print Loop (REPL). Esta \u00e9 uma ferramenta poderosa para depura\u00e7\u00e3o, explora\u00e7\u00e3o e experimenta\u00e7\u00e3o r\u00e1pida com os m\u00f3dulos do sloth-runner.</p>"},{"location":"pt/repl/#iniciando-o-repl","title":"Iniciando o REPL","text":"<p>Para iniciar uma sess\u00e3o, simplesmente execute: <pre><code>sloth-runner repl\n</code></pre></p> <p>Voc\u00ea tamb\u00e9m pode pr\u00e9-carregar um arquivo de workflow para ter suas <code>Modern DSLs</code> e quaisquer fun\u00e7\u00f5es auxiliares dispon\u00edveis na sess\u00e3o. Isso \u00e9 incrivelmente \u00fatil para depurar uma pipeline existente.</p> <pre><code>sloth-runner repl -f /caminho/para/sua/pipeline.sloth\n</code></pre>"},{"location":"pt/repl/#funcionalidades","title":"Funcionalidades","text":""},{"location":"pt/repl/#ambiente-ao-vivo","title":"Ambiente ao Vivo","text":"<p>O REPL fornece um ambiente Lua ao vivo onde voc\u00ea pode executar qualquer c\u00f3digo Lua. Todos os m\u00f3dulos embutidos do sloth-runner (<code>aws</code>, <code>docker</code>, <code>fs</code>, <code>log</code>, etc.) s\u00e3o pr\u00e9-carregados e prontos para uso.</p> <pre><code>sloth&gt; log.info(\"Ol\u00e1 do REPL!\")\nsloth&gt; resultado = fs.read(\"README.md\")\nsloth&gt; print(string.sub(resultado, 1, 50))\n</code></pre>"},{"location":"pt/repl/#autocompletar","title":"Autocompletar","text":"<p>O REPL possui um sistema sofisticado de autocompletar. - Comece a digitar o nome de uma vari\u00e1vel global ou m\u00f3dulo (ex: <code>aws</code>) e pressione <code>Tab</code> para ver as sugest\u00f5es. - Digite o nome de um m\u00f3dulo seguido por um ponto (ex: <code>docker.</code>) e pressione <code>Tab</code> para ver todas as fun\u00e7\u00f5es dispon\u00edveis naquele m\u00f3dulo.</p>"},{"location":"pt/repl/#historico","title":"Hist\u00f3rico","text":"<p>O REPL mant\u00e9m um hist\u00f3rico de seus comandos. Use as setas para cima e para baixo para navegar pelos comandos anteriores.</p>"},{"location":"pt/repl/#exemplo-de-sessao","title":"Exemplo de Sess\u00e3o","text":"<p>Aqui est\u00e1 um exemplo de uso do REPL para depurar um comando Docker.</p> <pre><code>$ sloth-runner repl\nSloth-Runner Interactive REPL\nDigite 'exit' ou 'quit' para sair.\nsloth&gt; resultado = docker.exec({\"ps\", \"-a\"})\nsloth&gt; print(resultado.stdout)\nCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES\nsloth&gt; -- Agora vamos tentar construir uma imagem\nsloth&gt; resultado_build = docker.build({tag=\"meu-teste\", path=\"./examples/docker\"})\nsloth&gt; print(resultado_build.success)\ntrue\nsloth&gt; exit\nTchau!\n</code></pre>"},{"location":"pt/scheduler/","title":"Agendador de Tarefas","text":"<p>O <code>sloth-runner</code> agora inclui um agendador de tarefas integrado, permitindo automatizar a execu\u00e7\u00e3o de suas tarefas definidas em Lua em intervalos espec\u00edficos usando a sintaxe cron.</p>"},{"location":"pt/scheduler/#funcionalidades","title":"Funcionalidades","text":"<ul> <li>Processo em Segundo Plano: O agendador \u00e9 executado como um processo persistente em segundo plano, independente da sua sess\u00e3o de terminal.</li> <li>Agendamento Baseado em Cron: Defina agendamentos de tarefas usando strings cron flex\u00edveis.</li> <li>Persist\u00eancia: As tarefas agendadas s\u00e3o carregadas de um arquivo de configura\u00e7\u00e3o, garantindo que sejam retomadas ap\u00f3s rein\u00edcios.</li> <li>Integra\u00e7\u00e3o com Tarefas Existentes: O agendador utiliza o comando <code>sloth-runner run</code> existente para executar suas tarefas.</li> </ul>"},{"location":"pt/scheduler/#configuracao-scheduleryaml","title":"Configura\u00e7\u00e3o: <code>scheduler.yaml</code>","text":"<p>As tarefas agendadas s\u00e3o definidas em um arquivo YAML, tipicamente chamado <code>scheduler.yaml</code>. Este arquivo especifica as tarefas a serem executadas, seu agendamento e o arquivo Lua, grupo e nome da tarefa.</p> <pre><code>scheduled_tasks:\n  - name: \"my_daily_backup\"\n    schedule: \"0 0 * * *\" # Todo dia \u00e0 meia-noite\n    task_file: \"examples/my_workflow.sloth\"\n    task_group: \"backup_group\"\n    task_name: \"perform_backup\"\n  - name: \"hourly_report_generation\"\n    schedule: \"0 * * * *\" # Toda hora\n    task_file: \"examples/reporting.sloth\"\n    task_group: \"reports\"\n    task_name: \"generate_report\"\n</code></pre> <p>Campos:</p> <ul> <li><code>name</code> (string, obrigat\u00f3rio): Um nome \u00fanico para a tarefa agendada.</li> <li><code>schedule</code> (string, obrigat\u00f3rio): A string cron que define quando a tarefa deve ser executada. Suporta a sintaxe cron padr\u00e3o e alguns agendamentos predefinidos (ex: <code>@every 1h</code>, <code>@daily</code>). Consulte a documenta\u00e7\u00e3o do robfig/cron para detalhes.</li> <li><code>task_file</code> (string, obrigat\u00f3rio): O caminho para o arquivo de defini\u00e7\u00e3o da tarefa Lua.</li> <li><code>task_group</code> (string, obrigat\u00f3rio): O nome do grupo de tarefas dentro do arquivo Lua.</li> <li><code>task_name</code> (string, obrigat\u00f3rio): O nome da tarefa espec\u00edfica a ser executada dentro do grupo de tarefas.</li> </ul>"},{"location":"pt/scheduler/#comandos-cli","title":"Comandos CLI","text":""},{"location":"pt/scheduler/#sloth-runner-scheduler-enable","title":"<code>sloth-runner scheduler enable</code>","text":"<p>Inicia o agendador do <code>sloth-runner</code> como um processo em segundo plano. Este comando garante que o agendador esteja em execu\u00e7\u00e3o e pronto para processar tarefas agendadas.</p> <pre><code>sloth-runner scheduler enable --scheduler-config scheduler.yaml\n</code></pre> <ul> <li><code>--scheduler-config</code> (ou <code>-c</code>): Especifica o caminho para o seu arquivo de configura\u00e7\u00e3o <code>scheduler.yaml</code>. O padr\u00e3o \u00e9 <code>scheduler.yaml</code> no diret\u00f3rio atual.</li> </ul> <p>Ap\u00f3s a execu\u00e7\u00e3o, o comando imprimir\u00e1 o PID do processo do agendador em segundo plano. O agendador continuar\u00e1 a ser executado mesmo que sua sess\u00e3o de terminal seja fechada.</p>"},{"location":"pt/scheduler/#sloth-runner-scheduler-disable","title":"<code>sloth-runner scheduler disable</code>","text":"<p>Para o processo em segundo plano do agendador do <code>sloth-runner</code> em execu\u00e7\u00e3o.</p> <pre><code>sloth-runner scheduler disable\n</code></pre> <p>Este comando tentar\u00e1 encerrar o processo do agendador de forma graciosa. Se bem-sucedido, ele remover\u00e1 o arquivo PID criado pelo comando <code>enable</code>.</p>"},{"location":"pt/scheduler/#sloth-runner-scheduler-list","title":"<code>sloth-runner scheduler list</code>","text":"<p>Lista todas as tarefas agendadas definidas no arquivo de configura\u00e7\u00e3o <code>scheduler.yaml</code>. Este comando fornece uma vis\u00e3o geral de suas tarefas configuradas, seus agendamentos e detalhes da tarefa Lua associada.</p> <pre><code>sloth-runner scheduler list --scheduler-config scheduler.yaml\n</code></pre> <ul> <li><code>--scheduler-config</code> (ou <code>-c</code>): Especifica o caminho para o seu arquivo de configura\u00e7\u00e3o <code>scheduler.yaml</code>. O padr\u00e3o \u00e9 <code>scheduler.yaml</code> no diret\u00f3rio atual.</li> </ul> <p>Exemplo de Sa\u00edda:</p> <pre><code># Configured Scheduled Tasks\n\nNAME                     | SCHEDULE    | FILE                     | GROUP        | TASK\nmy_daily_backup          | 0 0 * * *   | examples/my_workflow.sloth | backup_group | perform_backup\nhourly_report_generation | 0 * * * *   | examples/reporting.sloth   | reports      | generate_report\n</code></pre>"},{"location":"pt/scheduler/#sloth-runner-scheduler-delete-task_name","title":"<code>sloth-runner scheduler delete &lt;task_name&gt;</code>","text":"<p>Exclui uma tarefa agendada espec\u00edfica do arquivo de configura\u00e7\u00e3o <code>scheduler.yaml</code>. Este comando remove a defini\u00e7\u00e3o da tarefa, e o agendador n\u00e3o a executar\u00e1 mais.</p> <pre><code>sloth-runner scheduler delete my_daily_backup --scheduler-config scheduler.yaml\n</code></pre> <ul> <li><code>&lt;task_name&gt;</code> (string, obrigat\u00f3rio): O nome \u00fanico da tarefa agendada a ser exclu\u00edda.</li> <li><code>--scheduler-config</code> (ou <code>-c</code>): Especifica o caminho para o seu arquivo de configura\u00e7\u00e3o <code>scheduler.yaml</code>. O padr\u00e3o \u00e9 <code>scheduler.yaml</code> no diret\u00f3rio atual.</li> </ul> <p>Importante: Este comando modifica seu arquivo <code>scheduler.yaml</code>. Certifique-se de ter um backup, se necess\u00e1rio. Se o agendador estiver em execu\u00e7\u00e3o, pode ser necess\u00e1rio desativ\u00e1-lo e reativ\u00e1-lo para que as altera\u00e7\u00f5es entrem em vigor imediatamente.</p>"},{"location":"pt/scheduler/#registro-e-tratamento-de-erros","title":"Registro e Tratamento de Erros","text":"<p>O agendador registra suas atividades e o status de execu\u00e7\u00e3o das tarefas agendadas na sa\u00edda padr\u00e3o e no erro padr\u00e3o. Recomenda-se redirecionar essas sa\u00eddas para um arquivo de log ao executar em um ambiente de produ\u00e7\u00e3o.</p> <p>Se uma tarefa agendada falhar, o agendador registrar\u00e1 o erro e continuar\u00e1 com outras tarefas agendadas. Ele n\u00e3o ser\u00e1 interrompido devido a falhas de tarefas individuais.</p>"},{"location":"pt/scheduler/#exemplo","title":"Exemplo","text":"<ol> <li> <p>Crie um arquivo <code>scheduler.yaml</code>:</p> <pre><code>scheduled_tasks:\n  - name: \"my_test_task\"\n    schedule: \"@every 1m\"\n    task_file: \"examples/basic_pipeline.sloth\"\n    task_group: \"basic_pipeline\"\n    task_name: \"fetch_data\"\n</code></pre> </li> <li> <p>Habilite o agendador:</p> <pre><code>sloth-runner scheduler enable --scheduler-config scheduler.yaml\n</code></pre> </li> <li> <p>Observe a sa\u00edda. A cada minuto, voc\u00ea dever\u00e1 ver mensagens indicando a execu\u00e7\u00e3o de <code>my_test_task</code>.</p> </li> <li> <p>Para parar o agendador:</p> <pre><code>sloth-runner scheduler disable\n</code></pre> </li> </ol>"},{"location":"pt/testing/","title":"Testando Workflows","text":"<p>O sloth-runner inclui um framework de testes embutido que permite escrever testes unit\u00e1rios e de integra\u00e7\u00e3o para seus workflows de tarefas. Escrever testes para sua automa\u00e7\u00e3o \u00e9 crucial para garantir a confiabilidade, prevenir regress\u00f5es e ter confian\u00e7a ao fazer altera\u00e7\u00f5es.</p>"},{"location":"pt/testing/#o-comando-test","title":"O Comando <code>test</code>","text":"<p>Voc\u00ea pode executar um arquivo de teste usando o comando <code>sloth-runner test</code>. Ele requer dois arquivos principais: o workflow que voc\u00ea quer testar e o pr\u00f3prio script de teste.</p> <pre><code>sloth-runner test -w &lt;caminho_para_workflow.sloth&gt; -f &lt;caminho_para_arquivo_de_teste.sloth&gt;\n</code></pre> <ul> <li><code>-w, --workflow</code>: Especifica o caminho para o arquivo principal de <code>Modern DSLs</code> que voc\u00ea quer testar.</li> <li><code>-f, --file</code>: Especifica o caminho para o seu arquivo de teste.</li> </ul>"},{"location":"pt/testing/#escrevendo-testes","title":"Escrevendo Testes","text":"<p>Os testes s\u00e3o escritos em Lua e usam dois novos m\u00f3dulos globais fornecidos pelo executor de testes: <code>test</code> e <code>assert</code>.</p>"},{"location":"pt/testing/#o-modulo-test","title":"O M\u00f3dulo <code>test</code>","text":"<p>O m\u00f3dulo <code>test</code> \u00e9 usado para estruturar seus testes e para executar tarefas espec\u00edficas do seu workflow.</p> <ul> <li><code>test.describe(suite_name, function)</code>: Agrupa testes relacionados em uma \"su\u00edte\". Serve para organiza\u00e7\u00e3o.</li> <li><code>test.it(function)</code>: Define um caso de teste individual. A descri\u00e7\u00e3o do teste deve ser inclu\u00edda nas mensagens de asser\u00e7\u00e3o dentro desta fun\u00e7\u00e3o.</li> <li><code>test.run_task(task_name)</code>: Esta \u00e9 a fun\u00e7\u00e3o principal do framework de testes. Ela executa uma \u00fanica tarefa pelo seu nome a partir do arquivo de workflow carregado. Ela retorna uma tabela de <code>result</code> contendo os detalhes da execu\u00e7\u00e3o.</li> </ul> <p>A tabela <code>result</code> retornada por <code>run_task</code> tem a seguinte estrutura:</p> <pre><code>{\n  success = true, -- booleano: true se a tarefa foi bem-sucedida, false caso contr\u00e1rio\n  message = \"Tarefa executada com sucesso\", -- string: A mensagem retornada pela tarefa\n  duration = \"1.23ms\", -- string: A dura\u00e7\u00e3o da execu\u00e7\u00e3o\n  output = { ... }, -- tabela: A tabela de output retornada pela tarefa\n  error = nil -- string: A mensagem de erro se a tarefa falhou\n}\n</code></pre>"},{"location":"pt/testing/#o-modulo-assert","title":"O M\u00f3dulo <code>assert</code>","text":"<p>O m\u00f3dulo <code>assert</code> fornece fun\u00e7\u00f5es para verificar os resultados das execu\u00e7\u00f5es de suas tarefas.</p> <ul> <li><code>assert.is_true(value, message)</code>: Verifica se o <code>value</code> \u00e9 verdadeiro.</li> <li><code>assert.equals(actual, expected, message)</code>: Verifica se o valor <code>actual</code> \u00e9 igual ao valor <code>expected</code>.</li> </ul>"},{"location":"pt/testing/#mocking-de-modulos","title":"Mocking de M\u00f3dulos","text":"<p>Para testar a l\u00f3gica de suas pipelines sem fazer chamadas externas reais (ex: para AWS, Docker ou Terraform), o framework de testes inclui um poderoso recurso de mocking.</p>"},{"location":"pt/testing/#politica-de-mocking-estrito","title":"Pol\u00edtica de Mocking Estrito","text":"<p>O executor de testes imp\u00f5e uma pol\u00edtica de mocking estrito. Ao rodar em modo de teste, qualquer chamada a uma fun\u00e7\u00e3o de m\u00f3dulo (como <code>aws.exec</code> ou <code>docker.build</code>) que n\u00e3o tenha sido explicitamente mockada far\u00e1 com que o teste falhe imediatamente. Isso garante que seus testes sejam totalmente autocontidos, determin\u00edsticos e n\u00e3o tenham efeitos colaterais indesejados.</p>"},{"location":"pt/testing/#testmockfunction_name-mock_definition","title":"<code>test.mock(function_name, mock_definition)</code>","text":"<p>Esta fun\u00e7\u00e3o permite que voc\u00ea defina um valor de retorno falso para qualquer fun\u00e7\u00e3o de m\u00f3dulo que possa ser mockada.</p> <ul> <li><code>function_name</code> (string): O nome completo da fun\u00e7\u00e3o a ser mockada (ex: <code>\"aws.s3.sync\"</code>, <code>\"docker.build\"</code>).</li> <li><code>mock_definition</code> (tabela): Uma tabela que define o que a fun\u00e7\u00e3o mockada deve retornar. Ela deve conter uma chave <code>returns</code>, que \u00e9 uma lista dos valores que a fun\u00e7\u00e3o retornar\u00e1.</li> </ul> <p>A lista <code>returns</code> \u00e9 crucial porque fun\u00e7\u00f5es Lua podem retornar m\u00faltiplos valores.</p> <p>Exemplo:</p> <pre><code>-- Mock de uma fun\u00e7\u00e3o que retorna uma \u00fanica tabela de resultado\ntest.mock(\"docker.build\", {\n  returns = {\n    { success = true, stdout = \"Imagem constru\u00edda com sucesso\" }\n  }\n})\n\n-- Mock de uma fun\u00e7\u00e3o que retorna dois valores (ex: um valor e um erro)\n-- Isto simula uma chamada bem-sucedida a terraform.output\ntest.mock(\"terraform.output\", {\n  returns = { \"meu_arquivo.txt\", nil }\n})\n\n-- Isto simula uma chamada com falha\ntest.mock(\"terraform.output\", {\n  returns = { nil, \"output n\u00e3o encontrado\" }\n})\n</code></pre>"},{"location":"pt/testing/#exemplo-completo-de-mocking","title":"Exemplo Completo de Mocking","text":"<p>Digamos que voc\u00ea tenha uma tarefa que chama <code>aws.exec</code> e possui uma l\u00f3gica que depende do resultado.</p> <p>Tarefa em <code>meu_workflow.sloth</code>: <pre><code>-- ...\n{\n  name = \"verificar-conta\",\n  command = function()\n    local result = aws.exec({\"sts\", \"get-caller-identity\"})\n    local data = data.parse_json(result.stdout)\n    if data.Account == \"123456789012\" then\n      return true, \"Conta correta.\"\n    else\n      return false, \"Conta errada.\"\n    end\n  end\n}\n-- ...\n</code></pre></p> <p>Teste em <code>meu_teste.sloth</code>: <pre><code>test.describe(\"L\u00f3gica de Verifica\u00e7\u00e3o de Conta\", function()\n  test.it(function()\n    -- Mock do valor de retorno de aws.exec\n    test.mock(\"aws.exec\", {\n      returns = {\n        {\n          success = true,\n          stdout = '{\"Account\": \"123456789012\"}'\n        }\n      }\n    })\n\n    -- Executa a tarefa que usa o mock\n    local result = test.run_task(\"verificar-conta\")\n\n    -- Afirma que a l\u00f3gica da tarefa funcionou corretamente com os dados mockados\n    assert.is_true(result.success, \"A tarefa deve ser bem-sucedida com o ID de conta correto\")\n    assert.equals(result.message, \"Conta correta.\", \"A mensagem deve ser correta\")\n  end)\nend)\n</code></pre></p>"},{"location":"pt/modules/aws/","title":"M\u00f3dulo AWS","text":"<p>O m\u00f3dulo <code>aws</code> fornece uma interface abrangente para interagir com a Amazon Web Services usando o AWS CLI. Ele foi projetado para funcionar perfeitamente com as cadeias de credenciais padr\u00e3o da AWS e tamb\u00e9m possui suporte de primeira classe para o <code>aws-vault</code> para maior seguran\u00e7a.</p>"},{"location":"pt/modules/aws/#configuracao","title":"Configura\u00e7\u00e3o","text":"<p>Nenhuma configura\u00e7\u00e3o espec\u00edfica no <code>values.yaml</code> \u00e9 necess\u00e1ria. O m\u00f3dulo depende de seu ambiente estar configurado para interagir com a AWS. Isso pode ser alcan\u00e7ado atrav\u00e9s de: - Perfis IAM para inst\u00e2ncias EC2 ou tarefas ECS/EKS. - Vari\u00e1veis de ambiente padr\u00e3o (<code>AWS_ACCESS_KEY_ID</code>, <code>AWS_SECRET_ACCESS_KEY</code>, etc.). - Um arquivo <code>~/.aws/credentials</code> configurado. - Usando o <code>aws-vault</code> com um perfil nomeado.</p>"},{"location":"pt/modules/aws/#executor-generico","title":"Executor Gen\u00e9rico","text":""},{"location":"pt/modules/aws/#awsexecargs-opts","title":"<code>aws.exec(args, opts)</code>","text":"<p>Esta \u00e9 a fun\u00e7\u00e3o principal do m\u00f3dulo. Ela executa qualquer comando do AWS CLI e retorna o resultado.</p> <p>Par\u00e2metros:</p> <ul> <li><code>args</code> (tabela): Obrigat\u00f3rio. Uma tabela de strings representando o comando e os argumentos a serem passados para o AWS CLI (ex: <code>{\"s3\", \"ls\", \"--recursive\"}</code>).</li> <li><code>opts</code> (tabela): Opcional. Uma tabela de op\u00e7\u00f5es para a execu\u00e7\u00e3o.<ul> <li><code>profile</code> (string): Se fornecido, o comando ser\u00e1 executado usando <code>aws-vault exec &lt;profile&gt; -- aws ...</code>. Se omitido, ele executar\u00e1 <code>aws ...</code> diretamente.</li> </ul> </li> </ul> <p>Retornos:</p> <p>Uma tabela contendo os seguintes campos: - <code>stdout</code> (string): A sa\u00edda padr\u00e3o do comando. - <code>stderr</code> (string): O erro padr\u00e3o do comando. - <code>exit_code</code> (n\u00famero): O c\u00f3digo de sa\u00edda do comando. <code>0</code> normalmente indica sucesso.</p> <p>Exemplo:</p> <pre><code>-- Usando credenciais padr\u00e3o\nlocal result = aws.exec({\"sts\", \"get-caller-identity\"})\nif result.exit_code == 0 then\n  print(result.stdout)\nend\n\n-- Usando um perfil do aws-vault\nlocal result_with_profile = aws.exec({\"ec2\", \"describe-instances\"}, {profile = \"meu-perfil-prod\"})\n</code></pre>"},{"location":"pt/modules/aws/#ajudantes-do-s3","title":"Ajudantes do S3","text":""},{"location":"pt/modules/aws/#awss3syncparams","title":"<code>aws.s3.sync(params)</code>","text":"<p>Um wrapper de alto n\u00edvel para o comando <code>aws s3 sync</code>, \u00fatil para sincronizar diret\u00f3rios com o S3.</p> <p>Par\u00e2metros:</p> <ul> <li><code>params</code> (tabela): Uma tabela contendo os seguintes campos:<ul> <li><code>source</code> (string): Obrigat\u00f3rio. O diret\u00f3rio de origem ou caminho S3.</li> <li><code>destination</code> (string): Obrigat\u00f3rio. O diret\u00f3rio de destino ou caminho S3.</li> <li><code>profile</code> (string): Opcional. O perfil do <code>aws-vault</code> a ser usado.</li> <li><code>delete</code> (boolean): Opcional. Se <code>true</code>, adiciona a flag <code>--delete</code> ao comando de sincroniza\u00e7\u00e3o.</li> </ul> </li> </ul> <p>Retornos:</p> <ul> <li><code>true</code> em caso de sucesso.</li> <li><code>false, error_message</code> em caso de falha.</li> </ul> <p>Exemplo:</p> <pre><code>local ok, err = aws.s3.sync({\n  source = \"./build\",\n  destination = \"s3://meu-bucket-app/static\",\n  profile = \"perfil-deploy\",\n  delete = true\n})\nif not ok then\n  log.error(\"Falha na sincroniza\u00e7\u00e3o com o S3: \" .. err)\nend\n</code></pre>"},{"location":"pt/modules/aws/#ajudantes-do-secrets-manager","title":"Ajudantes do Secrets Manager","text":""},{"location":"pt/modules/aws/#awssecretsmanagerget_secretparams","title":"<code>aws.secretsmanager.get_secret(params)</code>","text":"<p>Recupera o valor de um segredo do AWS Secrets Manager. Esta fun\u00e7\u00e3o simplifica o processo, retornando diretamente a <code>SecretString</code>.</p> <p>Par\u00e2metros:</p> <ul> <li><code>params</code> (tabela): Uma tabela contendo os seguintes campos:<ul> <li><code>secret_id</code> (string): Obrigat\u00f3rio. O nome ou ARN do segredo a ser recuperado.</li> <li><code>profile</code> (string): Opcional. O perfil do <code>aws-vault</code> a ser usado.</li> </ul> </li> </ul> <p>Retornos:</p> <ul> <li><code>secret_string</code> (string) em caso de sucesso.</li> <li><code>nil, error_message</code> em caso de falha.</li> </ul> <p>Exemplo:</p> <pre><code>local db_password, err = aws.secretsmanager.get_secret({\n  secret_id = \"producao/database/password\",\n  profile = \"meu-perfil-app\"\n})\n\nif not db_password then\n  log.error(\"Falha ao obter o segredo: \" .. err)\n  return false, \"Configura\u00e7\u00e3o falhou.\"\nend\n\n-- Agora voc\u00ea pode usar a vari\u00e1vel db_password\n</code></pre>"},{"location":"pt/modules/azure/","title":"M\u00f3dulo Azure","text":"<p>O m\u00f3dulo <code>azure</code> fornece uma interface para interagir com o Microsoft Azure usando a ferramenta de linha de comando <code>az</code>.</p>"},{"location":"pt/modules/azure/#configuracao","title":"Configura\u00e7\u00e3o","text":"<p>Este m\u00f3dulo requer que o CLI <code>az</code> esteja instalado e autenticado. Antes de executar pipelines que usam este m\u00f3dulo, voc\u00ea deve fazer login em sua conta do Azure:</p> <pre><code>az login\n</code></pre> <p>O m\u00f3dulo usar\u00e1 suas credenciais de login para todos os comandos.</p>"},{"location":"pt/modules/azure/#executor-generico","title":"Executor Gen\u00e9rico","text":""},{"location":"pt/modules/azure/#azureexecargs","title":"<code>azure.exec(args)</code>","text":"<p>Executa qualquer comando <code>az</code>. Esta fun\u00e7\u00e3o adiciona automaticamente a flag <code>--output json</code> (se ainda n\u00e3o estiver presente) para garantir que a sa\u00edda seja analis\u00e1vel por m\u00e1quina.</p> <p>Par\u00e2metros:</p> <ul> <li><code>args</code> (tabela): Obrigat\u00f3rio. Uma tabela de strings representando o comando e os argumentos a serem passados para o <code>az</code> (ex: <code>{\"group\", \"list\", \"--location\", \"eastus\"}</code>).</li> </ul> <p>Retornos:</p> <p>Uma tabela contendo os seguintes campos: - <code>stdout</code> (string): A sa\u00edda padr\u00e3o do comando (como uma string JSON). - <code>stderr</code> (string): O erro padr\u00e3o do comando. - <code>exit_code</code> (n\u00famero): O c\u00f3digo de sa\u00edda do comando. <code>0</code> normalmente indica sucesso.</p> <p>Exemplo:</p> <pre><code>local result = azure.exec({\"account\", \"show\"})\nif result.exit_code == 0 then\n  local account_info, err = data.parse_json(result.stdout)\n  if account_info then\n    log.info(\"Logado como: \" .. account_info.user.name)\n  end\nend\n</code></pre>"},{"location":"pt/modules/azure/#ajudantes-de-grupo-de-recursos-rg","title":"Ajudantes de Grupo de Recursos (RG)","text":""},{"location":"pt/modules/azure/#azurergdeleteparams","title":"<code>azure.rg.delete(params)</code>","text":"<p>Exclui um grupo de recursos.</p> <p>Par\u00e2metros:</p> <ul> <li><code>params</code> (tabela): Uma tabela contendo os seguintes campos:<ul> <li><code>name</code> (string): Obrigat\u00f3rio. O nome do grupo de recursos a ser exclu\u00eddo.</li> <li><code>yes</code> (boolean): Opcional. Se <code>true</code>, adiciona a flag <code>--yes</code> para ignorar a solicita\u00e7\u00e3o de confirma\u00e7\u00e3o.</li> </ul> </li> </ul> <p>Retornos:</p> <ul> <li><code>true</code> em caso de sucesso.</li> <li><code>false, error_message</code> em caso de falha.</li> </ul> <p>Exemplo:</p> <pre><code>local ok, err = azure.rg.delete({\n  name = \"meu-rg-de-teste\",\n  yes = true\n})\nif not ok then\n  log.error(\"Falha ao excluir o grupo de recursos: \" .. err)\nend\n</code></pre>"},{"location":"pt/modules/azure/#ajudantes-de-maquina-virtual-vm","title":"Ajudantes de M\u00e1quina Virtual (VM)","text":""},{"location":"pt/modules/azure/#azurevmlistparams","title":"<code>azure.vm.list(params)</code>","text":"<p>Lista m\u00e1quinas virtuais.</p> <p>Par\u00e2metros:</p> <ul> <li><code>params</code> (tabela): Opcional. Uma tabela contendo os seguintes campos:<ul> <li><code>resource_group</code> (string): O nome de um grupo de recursos para limitar a lista. Se omitido, lista as VMs em toda a assinatura.</li> </ul> </li> </ul> <p>Retornos:</p> <ul> <li><code>vms</code> (tabela) em caso de sucesso, onde a tabela \u00e9 um array JSON analisado de seus objetos VM.</li> <li><code>nil, error_message</code> em caso de falha.</li> </ul> <p>Exemplo:</p> <pre><code>-- Lista todas as VMs na assinatura\nlocal all_vms, err1 = azure.vm.list()\n\n-- Lista VMs em um grupo de recursos espec\u00edfico\nlocal specific_vms, err2 = azure.vm.list({resource_group = \"meu-rg-de-producao\"})\nif specific_vms then\n  for _, vm in ipairs(specific_vms) do\n    print(\"VM encontrada: \" .. vm.name)\n  end\nend\n</code></pre>"},{"location":"pt/modules/data/","title":"M\u00f3dulo Data","text":"<p>O m\u00f3dulo <code>data</code> fornece fun\u00e7\u00f5es para analisar (parse) e serializar dados entre tabelas Lua e formatos de dados comuns como JSON e YAML.</p> <p>---\\n</p>"},{"location":"pt/modules/data/#dataparse_jsonjson_string","title":"<code>data.parse_json(json_string)</code>","text":"<p>Analisa uma string JSON e a converte em uma tabela Lua.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>json_string</code> (string): A string formatada em JSON para analisar.</li> </ul> </li> <li>Retorna:<ul> <li><code>tabela</code>: A tabela Lua resultante.</li> <li><code>error</code>: Um objeto de erro se a an\u00e1lise falhar.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"pt/modules/data/#datato_jsonlua_table","title":"<code>data.to_json(lua_table)</code>","text":"<p>Serializa uma tabela Lua em uma string JSON.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>lua_table</code> (tabela): A tabela Lua a ser serializada.</li> </ul> </li> <li>Retorna:<ul> <li><code>string</code>: A string JSON resultante.</li> <li><code>error</code>: Um objeto de erro se a serializa\u00e7\u00e3o falhar.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"pt/modules/data/#dataparse_yamlyaml_string","title":"<code>data.parse_yaml(yaml_string)</code>","text":"<p>Analisa uma string YAML e a converte em uma tabela Lua.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>yaml_string</code> (string): A string formatada em YAML para analisar.</li> </ul> </li> <li>Retorna:<ul> <li><code>tabela</code>: A tabela Lua resultante.</li> <li><code>error</code>: Um objeto de erro se a an\u00e1lise falhar.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"pt/modules/data/#datato_yamllua_table","title":"<code>data.to_yaml(lua_table)</code>","text":"<p>Serializa uma tabela Lua em uma string YAML.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>lua_table</code> (tabela): A tabela Lua a ser serializada.</li> </ul> </li> <li>Retorna:<ul> <li><code>string</code>: A string YAML resultante.</li> <li><code>error</code>: Um objeto de erro se a serializa\u00e7\u00e3o falhar.</li> </ul> </li> </ul>"},{"location":"pt/modules/data/#exemplo","title":"Exemplo","text":"<pre><code>command = function()\n  local data = require(\"data\")\n\n  -- Exemplo JSON\n  log.info(\"Testando serializa\u00e7\u00e3o JSON...\")\n  local minha_tabela = { name = \"sloth-runner\", version = 1.0, features = { \"tasks\", \"lua\" } }\n  local json_str, err = data.to_json(minha_tabela)\n  if err then\n    return false, \"Falha ao serializar para JSON: \" .. err\n  end\n  print(\"JSON Serializado: \" .. json_str)\n\n  log.info(\"Testando an\u00e1lise de JSON...\")\n  local tabela_parseada, err = data.parse_json(json_str)\n  if err then\n    return false, \"Falha ao analisar JSON: \" .. err\n  end\n  log.info(\"Nome extra\u00eddo do JSON: \" .. tabela_parseada.name)\n\n  -- Exemplo YAML\n  log.info(\"Testando serializa\u00e7\u00e3o YAML...\")\n  local yaml_str, err = data.to_yaml(minha_tabela)\n  if err then\n    return false, \"Falha ao serializar para YAML: \" .. err\n  end\n  print(\"YAML Serializado:\\n\" .. yaml_str)\n\n  log.info(\"Testando an\u00e1lise de YAML...\")\n  tabela_parseada, err = data.parse_yaml(yaml_str)\n  if err then\n    return false, \"Falha ao analisar YAML: \" .. err\n  end\n  log.info(\"Vers\u00e3o extra\u00edda do YAML: \" .. tabela_parseada.version)\n\n  return true, \"Opera\u00e7\u00f5es do m\u00f3dulo Data bem-sucedidas.\"\nend\n</code></pre> <p>```</p>"},{"location":"pt/modules/digitalocean/","title":"M\u00f3dulo DigitalOcean","text":"<p>O m\u00f3dulo <code>digitalocean</code> fornece uma interface para interagir com seus recursos da DigitalOcean usando a ferramenta de linha de comando <code>doctl</code>.</p>"},{"location":"pt/modules/digitalocean/#configuracao","title":"Configura\u00e7\u00e3o","text":"<p>Este m\u00f3dulo requer que o CLI <code>doctl</code> esteja instalado e autenticado. A maneira padr\u00e3o de fazer isso \u00e9 gerar um token de acesso pessoal em seu painel de controle da DigitalOcean e defini-lo como a vari\u00e1vel de ambiente <code>DIGITALOCEAN_ACCESS_TOKEN</code>.</p> <pre><code>export DIGITALOCEAN_ACCESS_TOKEN=\"seu_token_de_api_da_do_aqui\"\n</code></pre> <p>O m\u00f3dulo usar\u00e1 automaticamente este token para todos os comandos.</p>"},{"location":"pt/modules/digitalocean/#executor-generico","title":"Executor Gen\u00e9rico","text":""},{"location":"pt/modules/digitalocean/#digitaloceanexecargs","title":"<code>digitalocean.exec(args)</code>","text":"<p>Executa qualquer comando <code>doctl</code>. Esta fun\u00e7\u00e3o adiciona automaticamente a flag <code>--output json</code> para garantir que a sa\u00edda seja analis\u00e1vel por m\u00e1quina.</p> <p>Par\u00e2metros:</p> <ul> <li><code>args</code> (tabela): Obrigat\u00f3rio. Uma tabela de strings representando o comando e os argumentos a serem passados para o <code>doctl</code> (ex: <code>{\"compute\", \"droplet\", \"list\"}</code>).</li> </ul> <p>Retornos:</p> <p>Uma tabela contendo os seguintes campos: - <code>stdout</code> (string): A sa\u00edda padr\u00e3o do comando (como uma string JSON). - <code>stderr</code> (string): O erro padr\u00e3o do comando. - <code>exit_code</code> (n\u00famero): O c\u00f3digo de sa\u00edda do comando. <code>0</code> normalmente indica sucesso.</p> <p>Exemplo:</p> <pre><code>local result = digitalocean.exec({\"account\", \"get\"})\nif result.exit_code == 0 then\n  local account_info, err = data.parse_json(result.stdout)\n  if account_info then\n    log.info(\"Status da conta: \" .. account_info.status)\n  end\nend\n</code></pre>"},{"location":"pt/modules/digitalocean/#ajudantes-de-droplets","title":"Ajudantes de Droplets","text":""},{"location":"pt/modules/digitalocean/#digitaloceandropletslist","title":"<code>digitalocean.droplets.list()</code>","text":"<p>Um wrapper de alto n\u00edvel para listar todos os Droplets em sua conta.</p> <p>Retornos:</p> <ul> <li><code>droplets</code> (tabela) em caso de sucesso, onde a tabela \u00e9 um array JSON analisado de seus objetos Droplet.</li> <li><code>nil, error_message</code> em caso de falha.</li> </ul> <p>Exemplo:</p> <pre><code>local droplets, err = digitalocean.droplets.list()\nif droplets then\n  for _, droplet in ipairs(droplets) do\n    print(\"Droplet encontrado: \" .. droplet.name)\n  end\nend\n</code></pre>"},{"location":"pt/modules/digitalocean/#digitaloceandropletsdeleteparams","title":"<code>digitalocean.droplets.delete(params)</code>","text":"<p>Exclui um Droplet espec\u00edfico pelo seu ID.</p> <p>Par\u00e2metros:</p> <ul> <li><code>params</code> (tabela): Uma tabela contendo os seguintes campos:<ul> <li><code>id</code> (string): Obrigat\u00f3rio. O ID do Droplet a ser exclu\u00eddo.</li> <li><code>force</code> (boolean): Opcional. Se <code>true</code>, adiciona a flag <code>--force</code> para ignorar a solicita\u00e7\u00e3o de confirma\u00e7\u00e3o. O padr\u00e3o \u00e9 <code>false</code>.</li> </ul> </li> </ul> <p>Retornos:</p> <ul> <li><code>true</code> em caso de sucesso.</li> <li><code>false, error_message</code> em caso de falha.</li> </ul> <p>Exemplo:</p> <pre><code>local ok, err = digitalocean.droplets.delete({\n  id = \"123456789\",\n  force = true\n})\nif not ok then\n  log.error(\"Falha ao excluir o droplet: \" .. err)\nend\n</code></pre>"},{"location":"pt/modules/docker/","title":"M\u00f3dulo Docker","text":"<p>O m\u00f3dulo <code>docker</code> fornece uma interface conveniente para interagir com o daemon do Docker, permitindo que voc\u00ea construa, execute e envie imagens Docker como parte de suas pipelines.</p>"},{"location":"pt/modules/docker/#configuracao","title":"Configura\u00e7\u00e3o","text":"<p>Este m\u00f3dulo requer que a CLI <code>docker</code> esteja instalada e que o daemon do Docker esteja em execu\u00e7\u00e3o e acess\u00edvel.</p>"},{"location":"pt/modules/docker/#funcoes","title":"Fun\u00e7\u00f5es","text":""},{"location":"pt/modules/docker/#dockerexecargs","title":"<code>docker.exec(args)</code>","text":"<p>Executa qualquer comando <code>docker</code> bruto.</p> <ul> <li><code>args</code> (tabela): Obrigat\u00f3rio. Uma lista de argumentos a serem passados para o comando <code>docker</code> (ex: <code>{\"ps\", \"-a\"}</code>).</li> <li>Retorna: Uma tabela de resultados com <code>success</code>, <code>stdout</code>, <code>stderr</code> e <code>exit_code</code>.</li> </ul>"},{"location":"pt/modules/docker/#dockerbuildparams","title":"<code>docker.build(params)</code>","text":"<p>Constr\u00f3i uma imagem Docker usando <code>docker build</code>.</p> <ul> <li><code>params</code> (tabela):<ul> <li><code>tag</code> (string): Obrigat\u00f3rio. A tag para a imagem (ex: <code>meu-app:latest</code>).</li> <li><code>path</code> (string): Obrigat\u00f3rio. O caminho do contexto de constru\u00e7\u00e3o.</li> <li><code>dockerfile</code> (string): Opcional. O caminho para o Dockerfile.</li> <li><code>build_args</code> (tabela): Opcional. Uma tabela de argumentos de constru\u00e7\u00e3o (ex: <code>{VERSION = \"1.0\"}</code>).</li> </ul> </li> <li>Retorna: Uma tabela de resultados.</li> </ul>"},{"location":"pt/modules/docker/#dockerpushparams","title":"<code>docker.push(params)</code>","text":"<p>Envia uma imagem Docker para um registro usando <code>docker push</code>.</p> <ul> <li><code>params</code> (tabela):<ul> <li><code>tag</code> (string): Obrigat\u00f3rio. A tag da imagem a ser enviada.</li> </ul> </li> <li>Retorna: Uma tabela de resultados.</li> </ul>"},{"location":"pt/modules/docker/#dockerrunparams","title":"<code>docker.run(params)</code>","text":"<p>Executa um cont\u00eainer Docker usando <code>docker run</code>.</p> <ul> <li><code>params</code> (tabela):<ul> <li><code>image</code> (string): Obrigat\u00f3rio. A imagem a ser executada.</li> <li><code>name</code> (string): Opcional. O nome para o cont\u00eainer.</li> <li><code>detach</code> (booleano): Opcional. Se <code>true</code>, executa o cont\u00eainer em segundo plano (<code>-d</code>).</li> <li><code>ports</code> (tabela): Opcional. Uma lista de mapeamentos de portas (ex: <code>{\"8080:80\"}</code>).</li> <li><code>env</code> (tabela): Opcional. Uma tabela de vari\u00e1veis de ambiente (ex: <code>{MINHA_VAR = \"valor\"}</code>).</li> </ul> </li> <li>Retorna: Uma tabela de resultados.</li> </ul>"},{"location":"pt/modules/docker/#exemplo","title":"Exemplo","text":"<pre><code>local image_tag = \"minha-imagem-teste:latest\"\n\n-- Tarefa 1: Build\nlocal result_build = docker.build({\n  tag = image_tag,\n  path = \"./app\"\n})\nif not result_build.success then return false, \"Build falhou\" end\n\n-- Tarefa 2: Run\nlocal result_run = docker.run({\n  image = image_tag,\n  name = \"meu-container-teste\",\n  ports = {\"8080:80\"}\n})\nif not result_run.success then return false, \"Run falhou\" end\n\n-- Tarefa 3: Push (ap\u00f3s teste bem-sucedido)\nlocal result_push = docker.push({tag = image_tag})\nif not result_push.success then return false, \"Push falhou\" end\n</code></pre>"},{"location":"pt/modules/exec/","title":"M\u00f3dulo Exec","text":"<p>O m\u00f3dulo <code>exec</code> \u00e9 um dos m\u00f3dulos mais fundamentais do <code>sloth-runner</code>. Ele fornece uma fun\u00e7\u00e3o poderosa para executar comandos de shell arbitr\u00e1rios, dando a voc\u00ea controle total sobre o ambiente de execu\u00e7\u00e3o.</p>"},{"location":"pt/modules/exec/#execruncommand-options","title":"<code>exec.run(command, [options])</code>","text":"<p>Executa um comando de shell usando <code>bash -c</code>.</p>"},{"location":"pt/modules/exec/#parametros","title":"Par\u00e2metros","text":"<ul> <li><code>command</code> (string): O comando de shell a ser executado.</li> <li><code>options</code> (tabela, opcional): Uma tabela de op\u00e7\u00f5es para controlar a execu\u00e7\u00e3o.<ul> <li><code>workdir</code> (string): O diret\u00f3rio de trabalho onde o comando deve ser executado. Se n\u00e3o for fornecido, ele \u00e9 executado no diret\u00f3rio tempor\u00e1rio do grupo de tarefas (se dispon\u00edvel) ou no diret\u00f3rio atual.</li> <li><code>env</code> (tabela): Um dicion\u00e1rio de vari\u00e1veis de ambiente (pares chave-valor) a serem definidas para a execu\u00e7\u00e3o do comando. Elas s\u00e3o adicionadas ao ambiente existente.</li> </ul> </li> </ul>"},{"location":"pt/modules/exec/#retorna","title":"Retorna","text":"<p>Uma tabela contendo o resultado da execu\u00e7\u00e3o do comando:</p> <ul> <li><code>success</code> (booleano): <code>true</code> se o comando saiu com o c\u00f3digo <code>0</code>, caso contr\u00e1rio <code>false</code>.</li> <li><code>stdout</code> (string): A sa\u00edda padr\u00e3o do comando.</li> <li><code>stderr</code> (string): A sa\u00edda de erro padr\u00e3o do comando.</li> </ul>"},{"location":"pt/modules/exec/#exemplo","title":"Exemplo","text":"<p>Este exemplo demonstra como usar <code>exec.run</code> com um diret\u00f3rio de trabalho e vari\u00e1veis de ambiente personalizados.</p> <pre><code>-- examples/exec_module_example.sloth\n\nModern DSLs = {\n  main = {\n    description = \"Uma tarefa para demonstrar o m\u00f3dulo exec.\",\n    tasks = {\n      {\n        name = \"run-with-options\",\n        description = \"Executa um comando com um workdir e ambiente personalizados.\",\n        command = function()\n          log.info(\"Preparando para executar um comando personalizado...\")\n\n          local exec = require(\"exec\")\n\n          -- Cria um diret\u00f3rio tempor\u00e1rio para o exemplo\n          local temp_dir = \"/tmp/sloth-exec-test\"\n          fs.mkdir(temp_dir)\n          fs.write(temp_dir .. \"/test.txt\", \"ol\u00e1 do arquivo de teste\")\n\n          -- Define as op\u00e7\u00f5es\n          local options = {\n            workdir = temp_dir,\n            env = {\n              MINHA_VAR = \"SlothRunner\",\n              OUTRA_VAR = \"e_incrivel\"\n            }\n          }\n\n          -- Executa o comando\n          local result = exec.run(\"echo 'MINHA_VAR \u00e9 $MINHA_VAR' &amp;&amp; ls -l &amp;&amp; cat test.txt\", options)\n\n          -- Limpa o diret\u00f3rio tempor\u00e1rio\n          fs.rm_r(temp_dir)\n\n          if result.success then\n            log.info(\"Comando executado com sucesso!\")\n            print(\"--- STDOUT ---\")\n            print(result.stdout)\n            print(\"--------------\")\n            return true, \"Comando exec bem-sucedido.\"\n          else\n            log.error(\"Comando exec falhou.\")\n            log.error(\"Stderr: \" .. result.stderr)\n            return false, \"Comando exec falhou.\"\n          end\n        end\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"pt/modules/fs/","title":"M\u00f3dulo FS","text":"<p>O m\u00f3dulo <code>fs</code> fornece fun\u00e7\u00f5es essenciais para interagir com o sistema de arquivos diretamente de seus scripts Lua.</p> <p>---\\n</p>"},{"location":"pt/modules/fs/#fsreadpath","title":"<code>fs.read(path)</code>","text":"<p>L\u00ea todo o conte\u00fado de um arquivo.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>path</code> (string): O caminho para o arquivo.</li> </ul> </li> <li>Retorna:<ul> <li><code>string</code>: O conte\u00fado do arquivo.</li> <li><code>error</code>: Um objeto de erro se a leitura falhar.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"pt/modules/fs/#fswritepath-content","title":"<code>fs.write(path, content)</code>","text":"<p>Escreve conte\u00fado em um arquivo, sobrescrevendo-o se ele j\u00e1 existir.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>path</code> (string): O caminho para o arquivo.</li> <li><code>content</code> (string): O conte\u00fado a ser escrito.</li> </ul> </li> <li>Retorna:<ul> <li><code>error</code>: Um objeto de erro se a escrita falhar.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"pt/modules/fs/#fsappendpath-content","title":"<code>fs.append(path, content)</code>","text":"<p>Adiciona conte\u00fado ao final de um arquivo. Cria o arquivo se ele n\u00e3o existir.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>path</code> (string): O caminho para o arquivo.</li> <li><code>content</code> (string): O conte\u00fado a ser adicionado.</li> </ul> </li> <li>Retorna:<ul> <li><code>error</code>: Um objeto de erro se a opera\u00e7\u00e3o falhar.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"pt/modules/fs/#fsexistspath","title":"<code>fs.exists(path)</code>","text":"<p>Verifica se um arquivo ou diret\u00f3rio existe no caminho fornecido.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>path</code> (string): O caminho a ser verificado.</li> </ul> </li> <li>Retorna:<ul> <li><code>boolean</code>: <code>true</code> se o caminho existir, <code>false</code> caso contr\u00e1rio.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"pt/modules/fs/#fsmkdirpath","title":"<code>fs.mkdir(path)</code>","text":"<p>Cria um diret\u00f3rio no caminho fornecido, incluindo quaisquer diret\u00f3rios pais necess\u00e1rios (como <code>mkdir -p</code>).</p> <ul> <li>Par\u00e2metros:<ul> <li><code>path</code> (string): O caminho do diret\u00f3rio a ser criado.</li> </ul> </li> <li>Retorna:<ul> <li><code>error</code>: Um objeto de erro se a cria\u00e7\u00e3o falhar.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"pt/modules/fs/#fsrmpath","title":"<code>fs.rm(path)</code>","text":"<p>Remove um \u00fanico arquivo.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>path</code> (string): O caminho para o arquivo a ser removido.</li> </ul> </li> <li>Retorna:<ul> <li><code>error</code>: Um objeto de erro se a remo\u00e7\u00e3o falhar.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"pt/modules/fs/#fsrm_rpath","title":"<code>fs.rm_r(path)</code>","text":"<p>Remove um arquivo ou diret\u00f3rio recursivamente (como <code>rm -rf</code>).</p> <ul> <li>Par\u00e2metros:<ul> <li><code>path</code> (string): O caminho a ser removido.</li> </ul> </li> <li>Retorna:<ul> <li><code>error</code>: Um objeto de erro se a remo\u00e7\u00e3o falhar.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"pt/modules/fs/#fslspath","title":"<code>fs.ls(path)</code>","text":"<p>Lista o conte\u00fado de um diret\u00f3rio.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>path</code> (string): O caminho para o diret\u00f3rio.</li> </ul> </li> <li>Retorna:<ul> <li><code>tabela</code>: Uma tabela contendo os nomes dos arquivos e subdiret\u00f3rios.</li> <li><code>error</code>: Um objeto de erro se a listagem falhar.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"pt/modules/fs/#fstmpname","title":"<code>fs.tmpname()</code>","text":"<p>Gera um caminho de diret\u00f3rio tempor\u00e1rio \u00fanico. Nota: Esta fun\u00e7\u00e3o apenas retorna o nome; ela n\u00e3o cria o diret\u00f3rio.</p> <ul> <li>Retorna:<ul> <li><code>string</code>: Um caminho \u00fanico adequado para um diret\u00f3rio tempor\u00e1rio.</li> <li><code>error</code>: Um objeto de erro se um nome n\u00e3o puder ser gerado.</li> </ul> </li> </ul>"},{"location":"pt/modules/fs/#exemplo","title":"Exemplo","text":"<pre><code>command = function()\n  local fs = require(\"fs\")\n\n  local tmp_dir = \"/tmp/fs-example\"\n  log.info(\"Criando diret\u00f3rio: \" .. tmp_dir)\n  fs.mkdir(tmp_dir)\n\n  local file_path = tmp_dir .. \"/meu_arquivo.txt\"\n  log.info(\"Escrevendo no arquivo: \" .. file_path)\n  fs.write(file_path, \"Ol\u00e1, Sloth Runner!\\n\")\n\n  log.info(\"Adicionando ao arquivo...\")\n  fs.append(file_path, \"Esta \u00e9 uma nova linha.\")\n\n  if fs.exists(file_path) then\n    log.info(\"Conte\u00fado do arquivo: \" .. fs.read(file_path))\n  end\n\n  log.info(\"Listando conte\u00fado de \" .. tmp_dir)\n  local contents = fs.ls(tmp_dir)\n  for i, name in ipairs(contents) do\n    print(\"- \" .. name)\n  end\n\n  log.info(\"Limpando...\")\n  fs.rm_r(tmp_dir)\n\n  return true, \"Opera\u00e7\u00f5es do m\u00f3dulo FS bem-sucedidas.\"\nend\n</code></pre> <p>```</p>"},{"location":"pt/modules/gcp/","title":"M\u00f3dulo GCP","text":"<p>O m\u00f3dulo <code>gcp</code> fornece uma interface simples para executar comandos da CLI do Google Cloud (<code>gcloud</code>) de dentro de uma tarefa do <code>sloth-runner</code>.</p>"},{"location":"pt/modules/gcp/#gcpexecargs","title":"<code>gcp.exec(args)</code>","text":"<p>Executa um comando <code>gcloud</code> com os argumentos especificados.</p>"},{"location":"pt/modules/gcp/#parametros","title":"Par\u00e2metros","text":"<ul> <li><code>args</code> (tabela): Uma tabela Lua (array) de strings representando os argumentos a serem passados para o comando <code>gcloud</code>. Por exemplo, <code>{\"compute\", \"instances\", \"list\"}</code>.</li> </ul>"},{"location":"pt/modules/gcp/#retorna","title":"Retorna","text":"<p>Uma tabela contendo o resultado da execu\u00e7\u00e3o do comando com as seguintes chaves:</p> <ul> <li><code>stdout</code> (string): A sa\u00edda padr\u00e3o do comando.</li> <li><code>stderr</code> (string): A sa\u00edda de erro padr\u00e3o do comando.</li> <li><code>exit_code</code> (n\u00famero): O c\u00f3digo de sa\u00edda do comando. Um c\u00f3digo de sa\u00edda <code>0</code> geralmente indica sucesso.</li> </ul>"},{"location":"pt/modules/gcp/#exemplo","title":"Exemplo","text":"<p>Este exemplo define uma tarefa que lista todas as inst\u00e2ncias do Compute Engine na regi\u00e3o <code>us-central1</code> para um projeto espec\u00edfico.</p> <pre><code>-- examples/gcp_cli_example.sloth\n\nModern DSLs = {\n  main = {\n    description = \"Uma tarefa para listar inst\u00e2ncias de computa\u00e7\u00e3o do GCP.\",\n    tasks = {\n      {\n        name = \"list-instances\",\n        description = \"Lista inst\u00e2ncias do GCE em us-central1.\",\n        command = function()\n          log.info(\"Listando inst\u00e2ncias do GCP...\")\n\n          -- Requer o m\u00f3dulo gcp para torn\u00e1-lo dispon\u00edvel\n          local gcp = require(\"gcp\")\n\n          -- Executa o comando gcloud\n          local result = gcp.exec({\n            \"compute\", \n            \"instances\", \n            \"list\", \n            \"--project\", \"meu-projeto-gcp-id\",\n            \"--zones\", \"us-central1-a,us-central1-b\"\n          })\n\n          -- Verifica o resultado\n          if result and result.exit_code == 0 then\n            log.info(\"Inst\u00e2ncias listadas com sucesso.\")\n            print(\"--- LISTA DE INST\u00c2NCIAS ---\")\n            print(result.stdout)\n            print(\"-------------------------\")\n            return true, \"Comando GCP bem-sucedido.\"\n          else\n            log.error(\"Falha ao listar inst\u00e2ncias do GCP.\")\n            if result then\n              log.error(\"Stderr: \" .. result.stderr)\n            end\n            return false, \"Comando GCP falhou.\"\n          end\n        end\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"pt/modules/git/","title":"M\u00f3dulo Git","text":"<p>O m\u00f3dulo <code>git</code> fornece uma API fluente para interagir com reposit\u00f3rios Git, permitindo que voc\u00ea automatize opera\u00e7\u00f5es comuns de controle de vers\u00e3o como clonar, commitar e enviar (push).</p>"},{"location":"pt/modules/git/#gitcloneurl-path","title":"<code>git.clone(url, path)</code>","text":"<p>Clona um reposit\u00f3rio Git para um caminho local.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>url</code> (string): A URL do reposit\u00f3rio a ser clonado.</li> <li><code>path</code> (string): O diret\u00f3rio local para onde clonar.</li> </ul> </li> <li>Retorna:<ul> <li><code>repo</code> (objeto): Um objeto <code>GitRepo</code> em caso de sucesso.</li> <li><code>error</code>: Um objeto de erro se a clonagem falhar.</li> </ul> </li> </ul>"},{"location":"pt/modules/git/#gitrepopath","title":"<code>git.repo(path)</code>","text":"<p>Abre um reposit\u00f3rio Git local existente.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>path</code> (string): O caminho para o reposit\u00f3rio local existente.</li> </ul> </li> <li>Retorna:<ul> <li><code>repo</code> (objeto): Um objeto <code>GitRepo</code> em caso de sucesso.</li> <li><code>error</code>: Um objeto de erro se o caminho n\u00e3o for um reposit\u00f3rio Git v\u00e1lido.</li> </ul> </li> </ul>"},{"location":"pt/modules/git/#o-objeto-gitrepo","title":"O Objeto <code>GitRepo</code>","text":"<p>Este objeto representa um reposit\u00f3rio local e fornece m\u00e9todos encade\u00e1veis para realizar opera\u00e7\u00f5es Git.</p>"},{"location":"pt/modules/git/#repocheckoutref","title":"<code>repo:checkout(ref)</code>","text":"<p>Faz checkout de um branch, tag ou commit espec\u00edfico.</p> <ul> <li>Par\u00e2metros: <code>ref</code> (string).</li> </ul>"},{"location":"pt/modules/git/#repopullremote-branch","title":"<code>repo:pull(remote, branch)</code>","text":"<p>Puxa (pull) as altera\u00e7\u00f5es de um reposit\u00f3rio remoto.</p> <ul> <li>Par\u00e2metros: <code>remote</code> (string), <code>branch</code> (string).</li> </ul>"},{"location":"pt/modules/git/#repoaddpattern","title":"<code>repo:add(pattern)</code>","text":"<p>Adiciona arquivos \u00e0 \u00e1rea de prepara\u00e7\u00e3o (staging) para um commit.</p> <ul> <li>Par\u00e2metros: <code>pattern</code> (string), ex: <code>\".\"</code> ou <code>\"caminho/para/arquivo.txt\"</code>.</li> </ul>"},{"location":"pt/modules/git/#repocommitmessage","title":"<code>repo:commit(message)</code>","text":"<p>Cria um commit.</p> <ul> <li>Par\u00e2metros: <code>message</code> (string).</li> </ul>"},{"location":"pt/modules/git/#repotagname-message","title":"<code>repo:tag(name, [message])</code>","text":"<p>Cria uma nova tag.</p> <ul> <li>Par\u00e2metros: <code>name</code> (string), <code>message</code> (string, opcional).</li> </ul>"},{"location":"pt/modules/git/#repopushremote-branch-options","title":"<code>repo:push(remote, branch, [options])</code>","text":"<p>Envia (push) commits para um reposit\u00f3rio remoto.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>remote</code> (string).</li> <li><code>branch</code> (string).</li> <li><code>options</code> (tabela, opcional): ex: <code>{ follow_tags = true }</code>.</li> </ul> </li> </ul>"},{"location":"pt/modules/git/#reporesult","title":"<code>repo:result()</code>","text":"<p>Este m\u00e9todo \u00e9 chamado no final de uma cadeia para obter o resultado da \u00faltima opera\u00e7\u00e3o.</p> <ul> <li>Retorna:<ul> <li><code>result</code> (tabela): Uma tabela contendo <code>success</code> (booleano), <code>stdout</code> (string) e <code>stderr</code> (string).</li> </ul> </li> </ul>"},{"location":"pt/modules/git/#exemplo","title":"Exemplo","text":"<p>Este exemplo demonstra um fluxo de trabalho completo semelhante a CI/CD: clonar, criar um arquivo de vers\u00e3o, adicionar, commitar, criar uma tag e enviar (push).</p> <pre><code>command = function()\n  local git = require(\"git\")\n  local repo_path = \"/tmp/git-example-repo\"\n\n  -- Limpa execu\u00e7\u00f5es anteriores\n  fs.rm_r(repo_path)\n\n  -- 1. Clona o reposit\u00f3rio\n  log.info(\"Clonando reposit\u00f3rio...\")\n  local repo, err = git.clone(\"https://github.com/chalkan3-sloth/sloth-runner.git\", repo_path)\n  if err then\n    return false, \"Falha ao clonar: \" .. err\n  end\n\n  -- 2. Cria e escreve um arquivo de vers\u00e3o\n  fs.write(repo_path .. \"/VERSION\", \"1.2.3\")\n\n  -- 3. Encadear comandos Git: add -&gt; commit -&gt; tag -&gt; push\n  log.info(\"Adicionando, commitando, criando tag e enviando...\")\n  repo:add(\".\"):commit(\"ci: Bump version to 1.2.3\"):tag(\"v1.2.3\"):push(\"origin\", \"main\", { follow_tags = true })\n\n  -- 4. Obt\u00e9m o resultado da opera\u00e7\u00e3o final (push)\n  local result = repo:result()\n\n  if not result.success then\n    log.error(\"O push do Git falhou: \" .. result.stderr)\n    return false, \"O push do Git falhou.\"\n  end\n\n  log.info(\"Tag da nova vers\u00e3o enviada com sucesso.\")\n  return true, \"Opera\u00e7\u00f5es Git bem-sucedidas.\"\nend\n</code></pre>"},{"location":"pt/modules/log/","title":"M\u00f3dulo Log","text":"<p>O m\u00f3dulo <code>log</code> fornece uma interface simples e essencial para registrar mensagens de seus scripts Lua no console do <code>sloth-runner</code>. Usar este m\u00f3dulo \u00e9 a maneira padr\u00e3o de fornecer feedback e informa\u00e7\u00f5es de depura\u00e7\u00e3o durante a execu\u00e7\u00e3o de uma tarefa.</p>"},{"location":"pt/modules/log/#loginfomessage","title":"<code>log.info(message)</code>","text":"<p>Registra uma mensagem no n\u00edvel INFO. Este \u00e9 o n\u00edvel padr\u00e3o para mensagens gerais e informativas.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>message</code> (string): A mensagem a ser registrada.</li> </ul> </li> </ul>"},{"location":"pt/modules/log/#logwarnmessage","title":"<code>log.warn(message)</code>","text":"<p>Registra uma mensagem no n\u00edvel WARN. \u00c9 adequado para problemas n\u00e3o cr\u00edticos que devem ser levados \u00e0 aten\u00e7\u00e3o do usu\u00e1rio.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>message</code> (string): A mensagem a ser registrada.</li> </ul> </li> </ul>"},{"location":"pt/modules/log/#logerrormessage","title":"<code>log.error(message)</code>","text":"<p>Registra uma mensagem no n\u00edvel ERROR. Deve ser usado para erros significativos que podem fazer com que uma tarefa falhe.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>message</code> (string): A mensagem a ser registrada.</li> </ul> </li> </ul>"},{"location":"pt/modules/log/#logdebugmessage","title":"<code>log.debug(message)</code>","text":"<p>Registra uma mensagem no n\u00edvel DEBUG. Essas mensagens geralmente ficam ocultas, a menos que o runner esteja em modo detalhado ou de depura\u00e7\u00e3o. S\u00e3o \u00fateis para informa\u00e7\u00f5es de diagn\u00f3stico detalhadas.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>message</code> (string): A mensagem a ser registrada.</li> </ul> </li> </ul>"},{"location":"pt/modules/log/#exemplo","title":"Exemplo","text":"<pre><code>command = function()\n  -- O m\u00f3dulo log est\u00e1 dispon\u00edvel globalmente e n\u00e3o precisa ser requerido.\n\n  log.info(\"Iniciando a tarefa de exemplo de log.\")\n\n  local user_name = \"Sloth\"\n  log.debug(\"O usu\u00e1rio atual \u00e9: \" .. user_name)\n\n  if user_name ~= \"Sloth\" then\n    log.warn(\"O usu\u00e1rio n\u00e3o \u00e9 o esperado.\")\n  end\n\n  log.info(\"A tarefa est\u00e1 executando sua a\u00e7\u00e3o principal...\")\n\n  local success = true -- Simula uma opera\u00e7\u00e3o bem-sucedida\n  if not success then\n    log.error(\"A a\u00e7\u00e3o principal falhou inesperadamente!\")\n    return false, \"A\u00e7\u00e3o principal falhou\"\n  end\n\n  log.info(\"Tarefa de exemplo de log conclu\u00edda com sucesso.\")\n  return true, \"Log demonstrado.\"\nend\n</code></pre>"},{"location":"pt/modules/metrics/","title":"\ud83d\udcca M\u00f3dulo de M\u00e9tricas e Monitoramento","text":"<p>O m\u00f3dulo M\u00e9tricas e Monitoramento fornece capacidades abrangentes de monitoramento do sistema, coleta de m\u00e9tricas customizadas e verifica\u00e7\u00e3o de sa\u00fade. Ele habilita observabilidade em tempo real tanto dos recursos do sistema quanto da performance da aplica\u00e7\u00e3o.</p>"},{"location":"pt/modules/metrics/#recursos-principais","title":"\ud83d\ude80 Recursos Principais","text":"<ul> <li>M\u00e9tricas do Sistema: Coleta autom\u00e1tica de m\u00e9tricas de CPU, mem\u00f3ria, disco e rede</li> <li>M\u00e9tricas de Runtime: Informa\u00e7\u00f5es do runtime Go (goroutines, heap, GC)</li> <li>M\u00e9tricas Customizadas: Gauges, contadores, histogramas e timers</li> <li>Verifica\u00e7\u00f5es de Sa\u00fade: Monitoramento autom\u00e1tico da sa\u00fade do sistema</li> <li>Endpoints HTTP: Export de m\u00e9tricas compat\u00edvel com Prometheus</li> <li>Sistema de Alertas: Alertas baseados em thresholds</li> <li>API JSON: Dados completos de m\u00e9tricas para integra\u00e7\u00f5es</li> </ul>"},{"location":"pt/modules/metrics/#metricas-do-sistema","title":"\ud83d\udcca M\u00e9tricas do Sistema","text":""},{"location":"pt/modules/metrics/#monitoramento-de-cpu-memoria-e-disco","title":"Monitoramento de CPU, Mem\u00f3ria e Disco","text":"<pre><code>-- Obter uso atual de CPU\nlocal uso_cpu = metrics.system_cpu()\nlog.info(\"Uso de CPU: \" .. string.format(\"%.1f%%\", uso_cpu))\n\n-- Obter informa\u00e7\u00f5es de mem\u00f3ria\nlocal info_memoria = metrics.system_memory()\nlog.info(\"Mem\u00f3ria: \" .. string.format(\"%.1f%% (%.0f/%.0f MB)\", \n    info_memoria.percent, info_memoria.used_mb, info_memoria.total_mb))\n\n-- Obter uso de disco\nlocal info_disco = metrics.system_disk(\"/\")\nlog.info(\"Disco: \" .. string.format(\"%.1f%% (%.1f/%.1f GB)\", \n    info_disco.percent, info_disco.used_gb, info_disco.total_gb))\n\n-- Verificar caminho espec\u00edfico do disco\nlocal disco_var = metrics.system_disk(\"/var\")\nlog.info(\"Uso do disco /var: \" .. string.format(\"%.1f%%\", disco_var.percent))\n</code></pre>"},{"location":"pt/modules/metrics/#informacoes-de-runtime","title":"Informa\u00e7\u00f5es de Runtime","text":"<pre><code>-- Obter m\u00e9tricas do runtime Go\nlocal runtime = metrics.runtime_info()\nlog.info(\"Informa\u00e7\u00f5es de Runtime:\")\nlog.info(\"  Goroutines: \" .. runtime.goroutines)\nlog.info(\"  N\u00facleos de CPU: \" .. runtime.num_cpu)\nlog.info(\"  Heap alocado: \" .. string.format(\"%.1f MB\", runtime.heap_alloc_mb))\nlog.info(\"  Heap do sistema: \" .. string.format(\"%.1f MB\", runtime.heap_sys_mb))\nlog.info(\"  Ciclos de GC: \" .. runtime.num_gc)\nlog.info(\"  Vers\u00e3o do Go: \" .. runtime.go_version)\n</code></pre>"},{"location":"pt/modules/metrics/#metricas-customizadas","title":"\ud83d\udcc8 M\u00e9tricas Customizadas","text":""},{"location":"pt/modules/metrics/#metricas-gauge-valores-atuais","title":"M\u00e9tricas Gauge (Valores Atuais)","text":"<pre><code>-- Definir valores simples de gauge\nmetrics.gauge(\"temperatura_cpu\", 65.4)\nmetrics.gauge(\"conexoes_ativas\", 142)\nmetrics.gauge(\"tamanho_fila\", 23)\n\n-- Definir gauge com tags\nmetrics.gauge(\"uso_memoria\", percentual_memoria, {\n    servidor = \"web-01\",\n    ambiente = \"producao\",\n    regiao = \"us-east-1\"\n})\n\n-- Atualizar status de deployment\nmetrics.gauge(\"progresso_deployment\", 75.5, {\n    app = \"frontend\",\n    versao = \"v2.1.0\"\n})\n</code></pre>"},{"location":"pt/modules/metrics/#metricas-counter-valores-incrementais","title":"M\u00e9tricas Counter (Valores Incrementais)","text":"<pre><code>-- Incrementar contadores\nlocal total_requisicoes = metrics.counter(\"requisicoes_http_total\", 1)\nlocal contador_erros = metrics.counter(\"erros_http_total\", 1, {\n    codigo_status = \"500\",\n    endpoint = \"/api/usuarios\"\n})\n\n-- Incremento em lote\nlocal processados = metrics.counter(\"mensagens_processadas\", 50, {\n    fila = \"notificacoes_usuario\",\n    prioridade = \"alta\"\n})\n\nlog.info(\"Total de requisi\u00e7\u00f5es processadas: \" .. total_requisicoes)\n</code></pre>"},{"location":"pt/modules/metrics/#metricas-histogram-distribuicao-de-valores","title":"M\u00e9tricas Histogram (Distribui\u00e7\u00e3o de Valores)","text":"<pre><code>-- Registrar tempos de resposta\nmetrics.histogram(\"tempo_resposta_ms\", 245.6, {\n    endpoint = \"/api/usuarios\",\n    metodo = \"GET\"\n})\n\n-- Registrar tamanhos de payload\nmetrics.histogram(\"tamanho_payload_bytes\", 1024, {\n    tipo_conteudo = \"application/json\"\n})\n\n-- Registrar tamanhos de lote\nmetrics.histogram(\"tamanho_lote\", 150, {\n    operacao = \"insercao_lote\",\n    tabela = \"eventos_usuario\"\n})\n</code></pre>"},{"location":"pt/modules/metrics/#metricas-timer-tempo-de-execucao-de-funcoes","title":"M\u00e9tricas Timer (Tempo de Execu\u00e7\u00e3o de Fun\u00e7\u00f5es)","text":"<pre><code>-- Cronometrar execu\u00e7\u00e3o de fun\u00e7\u00e3o automaticamente\nlocal duracao = metrics.timer(\"consulta_banco\", function()\n    -- Simular consulta ao banco\n    local resultado = exec.run(\"sleep 0.1\")\n    return resultado\nend, {\n    tipo_consulta = \"select\",\n    tabela = \"usuarios\"\n})\n\nlog.info(\"Consulta ao banco levou: \" .. string.format(\"%.2f ms\", duracao))\n\n-- Cronometrar opera\u00e7\u00f5es complexas\nlocal tempo_processamento = metrics.timer(\"processamento_dados\", function()\n    -- Processar dataset grande\n    local dados = {}\n    for i = 1, 100000 do\n        dados[i] = math.sqrt(i) * 2.5\n    end\n    return #dados\nend, {\n    operacao = \"computacao_matematica\",\n    tamanho = \"grande\"\n})\n\nlog.info(\"Processamento de dados conclu\u00eddo em: \" .. string.format(\"%.2f ms\", tempo_processamento))\n</code></pre>"},{"location":"pt/modules/metrics/#monitoramento-de-saude","title":"\ud83c\udfe5 Monitoramento de Sa\u00fade","text":""},{"location":"pt/modules/metrics/#status-de-saude-automatico","title":"Status de Sa\u00fade Autom\u00e1tico","text":"<pre><code>-- Obter status abrangente de sa\u00fade\nlocal saude = metrics.health_status()\nlog.info(\"Status Geral de Sa\u00fade: \" .. saude.overall)\n\n-- Verificar componentes individuais\nlocal componentes = {\"cpu\", \"memory\", \"disk\"}\nfor _, componente in ipairs(componentes) do\n    local info_comp = saude[componente]\n    if info_comp then\n        local icone_status = \"\u2705\"\n        if info_comp.status == \"warning\" then\n            icone_status = \"\u26a0\ufe0f\"\n        elseif info_comp.status == \"critical\" then\n            icone_status = \"\u274c\"\n        end\n\n        log.info(string.format(\"  %s %s: %.1f%% (%s)\", \n            icone_status, componente:upper(), info_comp.usage, info_comp.status))\n    end\nend\n</code></pre>"},{"location":"pt/modules/metrics/#verificacoes-de-saude-customizadas","title":"Verifica\u00e7\u00f5es de Sa\u00fade Customizadas","text":"<pre><code>-- Criar fun\u00e7\u00e3o de verifica\u00e7\u00e3o de sa\u00fade\nfunction verificar_saude_aplicacao()\n    local pontuacao_saude = 100\n    local problemas = {}\n\n    -- Verificar conectividade do banco\n    local resultado_bd = exec.run(\"pg_isready -h localhost -p 5432\")\n    if resultado_bd ~= \"\" then\n        pontuacao_saude = pontuacao_saude - 20\n        table.insert(problemas, \"Falha na conex\u00e3o com o banco de dados\")\n    end\n\n    -- Verificar espa\u00e7o em disco\n    local disco = metrics.system_disk(\"/\")\n    if disco.percent &gt; 90 then\n        pontuacao_saude = pontuacao_saude - 30\n        table.insert(problemas, \"Espa\u00e7o em disco cr\u00edtico: \" .. string.format(\"%.1f%%\", disco.percent))\n    end\n\n    -- Verificar uso de mem\u00f3ria\n    local memoria = metrics.system_memory()\n    if memoria.percent &gt; 85 then\n        pontuacao_saude = pontuacao_saude - 25\n        table.insert(problemas, \"Uso de mem\u00f3ria alto: \" .. string.format(\"%.1f%%\", memoria.percent))\n    end\n\n    -- Registrar pontua\u00e7\u00e3o de sa\u00fade\n    metrics.gauge(\"pontuacao_saude_aplicacao\", pontuacao_saude)\n\n    if pontuacao_saude &lt; 70 then\n        metrics.alert(\"saude_aplicacao\", {\n            level = \"warning\",\n            message = \"Sa\u00fade da aplica\u00e7\u00e3o degradada: \" .. table.concat(problemas, \", \"),\n            pontuacao = pontuacao_saude\n        })\n    end\n\n    return pontuacao_saude &gt;= 70\nend\n\n-- Usar em tasks\nModern DSLs = {\n    monitoramento_saude = {\n        tasks = {\n            verificacao_saude = {\n                command = function()\n                    local saudavel = verificar_saude_aplicacao()\n                    return saudavel, saudavel and \"Sistema saud\u00e1vel\" or \"Problemas de sa\u00fade detectados\"\n                end\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"pt/modules/metrics/#sistema-de-alertas","title":"\ud83d\udea8 Sistema de Alertas","text":""},{"location":"pt/modules/metrics/#criando-alertas","title":"Criando Alertas","text":"<pre><code>-- Alerta simples por threshold\nlocal cpu = metrics.system_cpu()\nif cpu &gt; 80 then\n    metrics.alert(\"uso_alto_cpu\", {\n        level = \"warning\",\n        message = \"Uso de CPU est\u00e1 alto: \" .. string.format(\"%.1f%%\", cpu),\n        threshold = 80,\n        value = cpu,\n        severidade = \"media\"\n    })\nend\n\n-- Alerta complexo com m\u00faltiplas condi\u00e7\u00f5es\nlocal memoria = metrics.system_memory()\nlocal disco = metrics.system_disk()\n\nif memoria.percent &gt; 90 and disco.percent &gt; 85 then\n    metrics.alert(\"esgotamento_recursos\", {\n        level = \"critical\",\n        message = string.format(\"Uso cr\u00edtico de recursos - Mem\u00f3ria: %.1f%%, Disco: %.1f%%\", \n            memoria.percent, disco.percent),\n        uso_memoria = memoria.percent,\n        uso_disco = disco.percent,\n        acao_recomendada = \"Escalar recursos imediatamente\"\n    })\nend\n\n-- Alertas espec\u00edficos da aplica\u00e7\u00e3o\nlocal tamanho_fila = state.get(\"tamanho_fila_tarefas\", 0)\nif tamanho_fila &gt; 1000 then\n    metrics.alert(\"acumulo_fila\", {\n        level = \"warning\", \n        message = \"Ac\u00famulo detectado na fila de tarefas: \" .. tamanho_fila .. \" itens\",\n        tamanho_fila = tamanho_fila,\n        tempo_processamento_estimado = tamanho_fila * 2 .. \" segundos\"\n    })\nend\n</code></pre>"},{"location":"pt/modules/metrics/#gerenciamento-de-metricas","title":"\ud83d\udd0d Gerenciamento de M\u00e9tricas","text":""},{"location":"pt/modules/metrics/#recuperando-metricas-customizadas","title":"Recuperando M\u00e9tricas Customizadas","text":"<pre><code>-- Obter m\u00e9trica customizada espec\u00edfica\nlocal metrica_cpu = metrics.get_custom(\"temperatura_cpu\")\nif metrica_cpu then\n    log.info(\"M\u00e9trica de temperatura da CPU: \" .. data.to_json(metrica_cpu))\nend\n\n-- Listar todas as m\u00e9tricas customizadas\nlocal todas_metricas = metrics.list_custom()\nlog.info(\"Total de m\u00e9tricas customizadas: \" .. #todas_metricas)\nfor i, nome_metrica in ipairs(todas_metricas) do\n    log.info(\"  \" .. i .. \". \" .. nome_metrica)\nend\n</code></pre>"},{"location":"pt/modules/metrics/#exemplo-de-monitoramento-de-performance","title":"Exemplo de Monitoramento de Performance","text":"<pre><code>Modern DSLs = {\n    monitoramento_performance = {\n        tasks = {\n            monitorar_performance_api = {\n                command = function()\n                    -- Iniciar sess\u00e3o de monitoramento\n                    log.info(\"Iniciando monitoramento de performance da API...\")\n\n                    -- Simular chamadas de API e medir performance\n                    for i = 1, 10 do\n                        local tempo_api = metrics.timer(\"chamada_api_\" .. i, function()\n                            -- Simular chamada de API\n                            exec.run(\"curl -s -o /dev/null -w '%{time_total}' https://api.exemplo.com/health\")\n                        end, {\n                            endpoint = \"health\",\n                            numero_chamada = tostring(i)\n                        })\n\n                        -- Registrar tempo de resposta\n                        metrics.histogram(\"tempo_resposta_api\", tempo_api, {\n                            endpoint = \"health\"\n                        })\n\n                        -- Verificar se o tempo de resposta \u00e9 aceit\u00e1vel\n                        if tempo_api &gt; 1000 then -- 1 segundo\n                            metrics.counter(\"chamadas_api_lentas\", 1, {\n                                endpoint = \"health\"\n                            })\n\n                            metrics.alert(\"resposta_api_lenta\", {\n                                level = \"warning\",\n                                message = string.format(\"Resposta lenta da API: %.2f ms\", tempo_api),\n                                tempo_resposta = tempo_api,\n                                threshold = 1000\n                            })\n                        end\n\n                        -- Breve atraso entre chamadas\n                        exec.run(\"sleep 0.1\")\n                    end\n\n                    -- Obter estat\u00edsticas resumidas\n                    local saude_sistema = metrics.health_status()\n                    log.info(\"Sa\u00fade do sistema ap\u00f3s testes da API: \" .. saude_sistema.overall)\n\n                    return true, \"Monitoramento de performance da API conclu\u00eddo\"\n                end\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"pt/modules/metrics/#endpoints-http","title":"\ud83c\udf10 Endpoints HTTP","text":"<p>O m\u00f3dulo de m\u00e9tricas exp\u00f5e automaticamente endpoints HTTP para sistemas de monitoramento externos:</p>"},{"location":"pt/modules/metrics/#formato-prometheus-metrics","title":"Formato Prometheus (<code>/metrics</code>)","text":"<pre><code># Acessar m\u00e9tricas compat\u00edveis com Prometheus\ncurl http://agente:8080/metrics\n\n# Exemplo de sa\u00edda:\n# sloth_agent_cpu_usage_percent 15.4\n# sloth_agent_memory_usage_mb 2048.5\n# sloth_agent_disk_usage_percent 67.2\n# sloth_agent_tasks_total 142\n</code></pre>"},{"location":"pt/modules/metrics/#formato-json-metricsjson","title":"Formato JSON (<code>/metrics/json</code>)","text":"<pre><code># Obter m\u00e9tricas completas em formato JSON\ncurl http://agente:8080/metrics/json\n\n# Exemplo de resposta:\n{\n  \"agent_name\": \"meuagente1\",\n  \"timestamp\": \"2024-01-15T10:30:00Z\",\n  \"system\": {\n    \"cpu_usage_percent\": 15.4,\n    \"memory_usage_mb\": 2048.5,\n    \"disk_usage_percent\": 67.2\n  },\n  \"runtime\": {\n    \"num_goroutines\": 25,\n    \"heap_alloc_mb\": 45.2\n  },\n  \"custom\": {\n    \"tempo_resposta_api\": {...},\n    \"progresso_deployment\": 85.5\n  }\n}\n</code></pre>"},{"location":"pt/modules/metrics/#verificacao-de-saude-health","title":"Verifica\u00e7\u00e3o de Sa\u00fade (<code>/health</code>)","text":"<pre><code># Verificar status de sa\u00fade do agente\ncurl http://agente:8080/health\n\n# Exemplo de resposta:\n{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2024-01-15T10:30:00Z\",\n  \"checks\": {\n    \"cpu\": {\"usage\": 15.4, \"status\": \"healthy\"},\n    \"memory\": {\"usage\": 45.8, \"status\": \"healthy\"},\n    \"disk\": {\"usage\": 67.2, \"status\": \"healthy\"}\n  }\n}\n</code></pre>"},{"location":"pt/modules/metrics/#referencia-da-api","title":"\ud83d\udccb Refer\u00eancia da API","text":""},{"location":"pt/modules/metrics/#metricas-do-sistema_1","title":"M\u00e9tricas do Sistema","text":"Fun\u00e7\u00e3o Par\u00e2metros Retorno Descri\u00e7\u00e3o <code>metrics.system_cpu()</code> - uso: number Obter percentual atual de uso de CPU <code>metrics.system_memory()</code> - info: table Obter informa\u00e7\u00f5es de uso de mem\u00f3ria <code>metrics.system_disk(caminho?)</code> caminho?: string info: table Obter uso de disco para caminho (padr\u00e3o: \"/\") <code>metrics.runtime_info()</code> - info: table Obter informa\u00e7\u00f5es do runtime Go"},{"location":"pt/modules/metrics/#metricas-customizadas_1","title":"M\u00e9tricas Customizadas","text":"Fun\u00e7\u00e3o Par\u00e2metros Retorno Descri\u00e7\u00e3o <code>metrics.gauge(nome, valor, tags?)</code> nome: string, valor: number, tags?: table sucesso: boolean Definir m\u00e9trica gauge <code>metrics.counter(nome, incremento?, tags?)</code> nome: string, incremento?: number, tags?: table novo_valor: number Incrementar contador <code>metrics.histogram(nome, valor, tags?)</code> nome: string, valor: number, tags?: table sucesso: boolean Registrar valor de histograma <code>metrics.timer(nome, funcao, tags?)</code> nome: string, funcao: function, tags?: table duracao: number Cronometrar execu\u00e7\u00e3o de fun\u00e7\u00e3o"},{"location":"pt/modules/metrics/#saude-e-monitoramento","title":"Sa\u00fade e Monitoramento","text":"Fun\u00e7\u00e3o Par\u00e2metros Retorno Descri\u00e7\u00e3o <code>metrics.health_status()</code> - status: table Obter status abrangente de sa\u00fade <code>metrics.alert(nome, dados)</code> nome: string, dados: table sucesso: boolean Criar alerta"},{"location":"pt/modules/metrics/#utilitarios","title":"Utilit\u00e1rios","text":"Fun\u00e7\u00e3o Par\u00e2metros Retorno Descri\u00e7\u00e3o <code>metrics.get_custom(nome)</code> nome: string metrica: table | nil Obter m\u00e9trica customizada por nome <code>metrics.list_custom()</code> - nomes: table Listar todos os nomes de m\u00e9tricas customizadas"},{"location":"pt/modules/metrics/#melhores-praticas","title":"\ud83c\udfaf Melhores Pr\u00e1ticas","text":"<ol> <li>Use tipos apropriados de m\u00e9tricas - gauges para valores atuais, contadores para totais, histogramas para distribui\u00e7\u00f5es</li> <li>Adicione tags significativas para categorizar e filtrar m\u00e9tricas</li> <li>Defina thresholds razo\u00e1veis para alertas para evitar fadiga de alertas</li> <li>Monitore o impacto na performance da coleta extensiva de m\u00e9tricas</li> <li>Use timers para opera\u00e7\u00f5es cr\u00edticas para identificar gargalos</li> <li>Implemente health checks para todos os componentes cr\u00edticos do sistema</li> <li>Exporte m\u00e9tricas para sistemas externos como Prometheus para armazenamento de longo prazo</li> </ol> <p>O m\u00f3dulo M\u00e9tricas e Monitoramento fornece observabilidade abrangente para seu ambiente distribu\u00eddo sloth-runner! \ud83d\udcca\ud83d\ude80</p>"},{"location":"pt/modules/net/","title":"M\u00f3dulo Net","text":"<p>O m\u00f3dulo <code>net</code> fornece fun\u00e7\u00f5es para fazer requisi\u00e7\u00f5es HTTP e baixar arquivos, permitindo que suas tarefas interajam com servi\u00e7os web e recursos remotos.</p>"},{"location":"pt/modules/net/#nethttp_geturl","title":"<code>net.http_get(url)</code>","text":"<p>Realiza uma requisi\u00e7\u00e3o HTTP GET para a URL especificada.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>url</code> (string): A URL para a qual enviar a requisi\u00e7\u00e3o GET.</li> </ul> </li> <li>Retorna:<ul> <li><code>body</code> (string): O corpo da resposta como uma string.</li> <li><code>status_code</code> (n\u00famero): O c\u00f3digo de status HTTP da resposta.</li> <li><code>headers</code> (tabela): Uma tabela contendo os cabe\u00e7alhos da resposta.</li> <li><code>error</code> (string): Uma mensagem de erro se a requisi\u00e7\u00e3o falhar.</li> </ul> </li> </ul>"},{"location":"pt/modules/net/#nethttp_posturl-body-headers","title":"<code>net.http_post(url, body, [headers])</code>","text":"<p>Realiza uma requisi\u00e7\u00e3o HTTP POST para a URL especificada.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>url</code> (string): A URL para a qual enviar a requisi\u00e7\u00e3o POST.</li> <li><code>body</code> (string): O corpo da requisi\u00e7\u00e3o a ser enviado.</li> <li><code>headers</code> (tabela, opcional): Uma tabela de cabe\u00e7alhos de requisi\u00e7\u00e3o a serem definidos.</li> </ul> </li> <li>Retorna:<ul> <li><code>body</code> (string): O corpo da resposta como uma string.</li> <li><code>status_code</code> (n\u00famero): O c\u00f3digo de status HTTP da resposta.</li> <li><code>headers</code> (tabela): Uma tabela contendo os cabe\u00e7alhos da resposta.</li> <li><code>error</code> (string): Uma mensagem de erro se a requisi\u00e7\u00e3o falhar.</li> </ul> </li> </ul>"},{"location":"pt/modules/net/#netdownloadurl-destination_path","title":"<code>net.download(url, destination_path)</code>","text":"<p>Baixa um arquivo de uma URL e o salva em um caminho local.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>url</code> (string): A URL do arquivo a ser baixado.</li> <li><code>destination_path</code> (string): O caminho do arquivo local para salvar o conte\u00fado baixado.</li> </ul> </li> <li>Retorna:<ul> <li><code>error</code>: Um objeto de erro se o download falhar.</li> </ul> </li> </ul>"},{"location":"pt/modules/net/#exemplo","title":"Exemplo","text":"<pre><code>command = function()\n  local net = require(\"net\")\n\n  -- Exemplo de requisi\u00e7\u00e3o GET\n  log.info(\"Realizando requisi\u00e7\u00e3o GET para httpbin.org...\")\n  local body, status, headers, err = net.http_get(\"https://httpbin.org/get\")\n  if err then\n    log.error(\"Requisi\u00e7\u00e3o GET falhou: \" .. err)\n    return false, \"Requisi\u00e7\u00e3o GET falhou\"\n  end\n  log.info(\"Requisi\u00e7\u00e3o GET bem-sucedida! Status: \" .. status)\n  -- print(\"Corpo da Resposta: \" .. body)\n\n  -- Exemplo de requisi\u00e7\u00e3o POST\n  log.info(\"Realizando requisi\u00e7\u00e3o POST para httpbin.org...\")\n  local post_body = '{\"name\": \"sloth-runner\", \"awesome\": true}'\n  local post_headers = { [\"Content-Type\"] = \"application/json\" }\n  body, status, headers, err = net.http_post(\"https://httpbin.org/post\", post_body, post_headers)\n  if err then\n    log.error(\"Requisi\u00e7\u00e3o POST falhou: \" .. err)\n    return false, \"Requisi\u00e7\u00e3o POST falhou\"\n  end\n  log.info(\"Requisi\u00e7\u00e3o POST bem-sucedida! Status: \" .. status)\n  -- print(\"Corpo da Resposta: \" .. body)\n\n  -- Exemplo de Download\n  local download_path = \"/tmp/sloth-runner-logo.svg\"\n  log.info(\"Baixando arquivo para \" .. download_path)\n  local err = net.download(\"https://raw.githubusercontent.com/chalkan3-sloth/sloth-runner/master/assets/sloth-runner-logo.svg\", download_path)\n  if err then\n    log.error(\"Download falhou: \" .. err)\n    return false, \"Download falhou\"\n  end\n  log.info(\"Arquivo baixado com sucesso.\")\n  fs.rm(download_path) -- Limpeza\n\n  return true, \"Opera\u00e7\u00f5es do m\u00f3dulo Net bem-sucedidas.\"\nend\n</code></pre>"},{"location":"pt/modules/notifications/","title":"M\u00f3dulo de Notifica\u00e7\u00f5es","text":"<p>O m\u00f3dulo <code>notifications</code> fornece uma maneira simples de enviar mensagens para v\u00e1rios servi\u00e7os de notifica\u00e7\u00e3o a partir de suas pipelines. Isso \u00e9 particularmente \u00fatil para relatar o sucesso ou a falha de um fluxo de trabalho de CI/CD.</p> <p>Atualmente, os seguintes servi\u00e7os s\u00e3o suportados: - Slack - ntfy</p>"},{"location":"pt/modules/notifications/#configuracao","title":"Configura\u00e7\u00e3o","text":"<p>Antes de usar o m\u00f3dulo, voc\u00ea precisa adicionar as credenciais ou URLs necess\u00e1rias ao seu arquivo <code>configs/values.yaml</code>. O m\u00f3dulo ler\u00e1 esses valores em tempo de execu\u00e7\u00e3o.</p> <pre><code># configs/values.yaml\n\nnotifications:\n  slack:\n    # Sua URL de Webhook de Entrada do Slack\n    webhook_url: \"https://hooks.slack.com/services/...\"\n  ntfy:\n    # O servidor ntfy a ser usado. Pode ser o p\u00fablico ou auto-hospedado.\n    server: \"https://ntfy.sh\"\n    # O t\u00f3pico para publicar a notifica\u00e7\u00e3o.\n    topic: \"seu-topico-sloth-runner\"\n</code></pre>"},{"location":"pt/modules/notifications/#slack","title":"Slack","text":""},{"location":"pt/modules/notifications/#notificationsslacksendparams","title":"<code>notifications.slack.send(params)</code>","text":"<p>Envia uma mensagem para um canal do Slack atrav\u00e9s de um Webhook de Entrada.</p> <p>Par\u00e2metros:</p> <ul> <li><code>params</code> (tabela): Uma tabela contendo os seguintes campos:<ul> <li><code>webhook_url</code> (string): Obrigat\u00f3rio. A URL do Webhook de Entrada do Slack. Recomenda-se obter isso do m\u00f3dulo <code>values</code>.</li> <li><code>message</code> (string): Obrigat\u00f3rio. O texto principal da mensagem.</li> <li><code>pipeline</code> (string): Opcional. O nome da pipeline, que ser\u00e1 exibido no anexo da mensagem para contexto.</li> <li><code>error_details</code> (string): Opcional. Quaisquer detalhes de erro a serem inclu\u00eddos no anexo da mensagem. Isso \u00e9 \u00fatil para notifica\u00e7\u00f5es de falha.</li> </ul> </li> </ul> <p>Retornos:</p> <ul> <li><code>true</code> em caso de sucesso.</li> <li><code>false, error_message</code> em caso de falha.</li> </ul> <p>Exemplo:</p> <pre><code>local values = require(\"values\")\n\nlocal slack_webhook = values.get(\"notifications.slack.webhook_url\")\n\nif slack_webhook and slack_webhook ~= \"\" then\n  -- Em caso de sucesso\n  notifications.slack.send({\n    webhook_url = slack_webhook,\n    message = \"\u2705 Pipeline executada com sucesso!\",\n    pipeline = \"minha-pipeline-incrivel\"\n  })\n\n  -- Em caso de falha\n  notifications.slack.send({\n    webhook_url = slack_webhook,\n    message = \"\u274c Falha na execu\u00e7\u00e3o da pipeline!\",\n    pipeline = \"minha-pipeline-incrivel\",\n    error_details = \"N\u00e3o foi poss\u00edvel conectar ao banco de dados.\"\n  })\nend\n</code></pre>"},{"location":"pt/modules/notifications/#ntfy","title":"ntfy","text":""},{"location":"pt/modules/notifications/#notificationsntfysendparams","title":"<code>notifications.ntfy.send(params)</code>","text":"<p>Envia uma mensagem para um t\u00f3pico do ntfy.sh.</p> <p>Par\u00e2metros:</p> <ul> <li><code>params</code> (tabela): Uma tabela contendo os seguintes campos:<ul> <li><code>server</code> (string): Obrigat\u00f3rio. A URL do servidor ntfy.</li> <li><code>topic</code> (string): Obrigat\u00f3rio. O t\u00f3pico para o qual a mensagem ser\u00e1 enviada.</li> <li><code>message</code> (string): Obrigat\u00f3rio. O corpo da notifica\u00e7\u00e3o.</li> <li><code>title</code> (string): Opcional. O t\u00edtulo da notifica\u00e7\u00e3o.</li> <li><code>priority</code> (string): Opcional. Prioridade da notifica\u00e7\u00e3o (ex: <code>high</code>, <code>default</code>, <code>low</code>).</li> <li><code>tags</code> (tabela): Opcional. Uma lista de tags (emojis) para adicionar \u00e0 notifica\u00e7\u00e3o.</li> </ul> </li> </ul> <p>Retornos:</p> <ul> <li><code>true</code> em caso de sucesso.</li> <li><code>false, error_message</code> em caso de falha.</li> </ul> <p>Exemplo:</p> <pre><code>local values = require(\"values\")\n\nlocal ntfy_server = values.get(\"notifications.ntfy.server\")\nlocal ntfy_topic = values.get(\"notifications.ntfy.topic\")\n\nif ntfy_topic and ntfy_topic ~= \"\" then\n  -- Em caso de sucesso\n  notifications.ntfy.send({\n    server = ntfy_server,\n    topic = ntfy_topic,\n    title = \"Pipeline com Sucesso\",\n    message = \"A pipeline terminou sem erros.\",\n    priority = \"default\",\n    tags = {\"tada\"}\n  })\n\n  -- Em caso de falha\n  notifications.ntfy.send({\n    server = ntfy_server,\n    topic = ntfy_topic,\n    title = \"Pipeline Falhou!\",\n    message = \"A pipeline falhou com um erro.\",\n    priority = \"high\",\n    tags = {\"skull\", \"warning\"}\n  })\nend\n</code></pre>"},{"location":"pt/modules/pkg/","title":"\ud83d\udce6 M\u00f3dulo de Gerenciamento de Pacotes","text":"<p>O m\u00f3dulo <code>pkg</code> fornece funcionalidades abrangentes de gerenciamento de pacotes multiplataforma. Ele detecta automaticamente o gerenciador de pacotes do sistema e fornece uma interface unificada.</p>"},{"location":"pt/modules/pkg/#gerenciadores-suportados","title":"\ud83c\udfaf Gerenciadores Suportados","text":"<ul> <li>apt / apt-get (Debian/Ubuntu)</li> <li>yum / dnf (RHEL/CentOS/Fedora)</li> <li>pacman (Arch Linux)</li> <li>zypper (openSUSE)</li> <li>brew (macOS - Homebrew)</li> </ul>"},{"location":"pt/modules/pkg/#visao-geral-das-funcoes","title":"\ud83d\udcda Vis\u00e3o Geral das Fun\u00e7\u00f5es","text":"Fun\u00e7\u00e3o Descri\u00e7\u00e3o <code>pkg.install(pacotes)</code> Instalar um ou mais pacotes <code>pkg.remove(pacotes)</code> Remover um ou mais pacotes <code>pkg.update()</code> Atualizar cache de pacotes <code>pkg.upgrade()</code> Atualizar todos os pacotes <code>pkg.search(query)</code> Buscar pacotes <code>pkg.info(pacote)</code> Obter informa\u00e7\u00f5es do pacote <code>pkg.list()</code> Listar pacotes instalados <code>pkg.is_installed(pacote)</code> Verificar se est\u00e1 instalado <code>pkg.get_manager()</code> Obter gerenciador detectado <code>pkg.clean()</code> Limpar cache <code>pkg.autoremove()</code> Remover depend\u00eancias n\u00e3o usadas <code>pkg.which(executavel)</code> Encontrar caminho do execut\u00e1vel <code>pkg.version(pacote)</code> Obter vers\u00e3o do pacote <code>pkg.deps(pacote)</code> Listar depend\u00eancias <code>pkg.install_local(arquivo)</code> Instalar de arquivo local"},{"location":"pt/modules/pkg/#documentacao-detalhada","title":"\ud83d\udcd6 Documenta\u00e7\u00e3o Detalhada","text":""},{"location":"pt/modules/pkg/#instalacao-e-remocao","title":"Instala\u00e7\u00e3o e Remo\u00e7\u00e3o","text":""},{"location":"pt/modules/pkg/#pkginstallpacotes","title":"<code>pkg.install(pacotes)</code>","text":"<p>Instala um ou mais pacotes.</p> <p>Par\u00e2metros: - <code>pacotes</code>: String (pacote \u00fanico) ou Tabela (m\u00faltiplos pacotes)</p> <p>Retorna: - <code>sucesso</code> (boolean): <code>true</code> em caso de sucesso - <code>saida</code> (string): Sa\u00edda do comando</p> <p>Exemplos:</p> DSL ModernoCom delegate_to <pre><code>local pkg = require(\"pkg\")\n\nlocal instalar_ferramentas = task(\"instalar_ferramentas\")\n    :description(\"Instalar ferramentas de desenvolvimento\")\n    :command(function(this, params)\n        log.info(\"Instalando ferramentas...\")\n\n        -- Instalar m\u00faltiplos pacotes\n        local ferramentas = {\"git\", \"curl\", \"wget\", \"vim\"}\n        local sucesso, saida = pkg.install(ferramentas)\n\n        if sucesso then\n            log.info(\"\u2705 Ferramentas instaladas com sucesso!\")\n            return true, \"Instalado\"\n        else\n            log.error(\"\u274c Falha: \" .. saida)\n            return false, \"Falhou\"\n        end\n    end)\n    :timeout(\"300s\")\n    :build()\n\nworkflow.define(\"configurar\")\n    :tasks({ instalar_ferramentas })\n</code></pre> <pre><code>local pkg = require(\"pkg\")\n\nlocal instalar_no_agente = task(\"instalar_no_agente\")\n    :description(\"Instalar pacotes no agente remoto\")\n    :command(function(this, params)\n        log.info(\"Instalando no agente remoto...\")\n\n        local sucesso, saida = pkg.install({\"htop\", \"ncdu\"})\n\n        if sucesso then\n            log.info(\"\u2705 Instalado no agente!\")\n            return true, \"OK\"\n        else\n            return false, \"Falhou\"\n        end\n    end)\n    :delegate_to(\"servidor-producao\")\n    :timeout(\"300s\")\n    :build()\n\nworkflow.define(\"instalacao_remota\")\n    :tasks({ instalar_no_agente })\n</code></pre>"},{"location":"pt/modules/pkg/#pkgremovepacotes","title":"<code>pkg.remove(pacotes)</code>","text":"<p>Remove um ou mais pacotes.</p> <p>Exemplo:</p> <pre><code>local pkg = require(\"pkg\")\n\nlocal limpeza = task(\"limpeza\")\n    :description(\"Remover pacotes desnecess\u00e1rios\")\n    :command(function(this, params)\n        local pacotes = {\"pacote1\", \"pacote2\"}\n        local sucesso, saida = pkg.remove(pacotes)\n\n        if sucesso then\n            log.info(\"\u2705 Pacotes removidos\")\n            return true, \"Removido\"\n        end\n        return false, \"Falhou\"\n    end)\n    :timeout(\"180s\")\n    :build()\n</code></pre>"},{"location":"pt/modules/pkg/#informacoes-de-pacotes","title":"Informa\u00e7\u00f5es de Pacotes","text":""},{"location":"pt/modules/pkg/#pkgsearchquery","title":"<code>pkg.search(query)</code>","text":"<p>Busca pacotes.</p> <p>Exemplo:</p> <pre><code>local pkg = require(\"pkg\")\n\nlocal buscar_python = task(\"buscar_python\")\n    :description(\"Buscar pacotes Python\")\n    :command(function(this, params)\n        local sucesso, resultados = pkg.search(\"python3\")\n\n        if sucesso then\n            log.info(\"Resultados da busca:\")\n            local contador = 0\n            for linha in resultados:gmatch(\"[^\\r\\n]+\") do\n                if contador &lt; 10 then\n                    log.info(\"  \u2022 \" .. linha)\n                end\n                contador = contador + 1\n            end\n            return true, contador .. \" resultados\"\n        end\n        return false, \"Busca falhou\"\n    end)\n    :timeout(\"60s\")\n    :build()\n</code></pre>"},{"location":"pt/modules/pkg/#pkginfopacote","title":"<code>pkg.info(pacote)</code>","text":"<p>Obt\u00e9m informa\u00e7\u00f5es do pacote.</p> <pre><code>local sucesso, info = pkg.info(\"curl\")\nif sucesso then\n    log.info(\"Info do pacote:\\n\" .. info)\nend\n</code></pre>"},{"location":"pt/modules/pkg/#pkglist","title":"<code>pkg.list()</code>","text":"<p>Lista pacotes instalados.</p> <p>Retorna: <code>sucesso</code> (boolean), <code>pacotes</code> (tabela)</p> <pre><code>local sucesso, pacotes = pkg.list()\nif sucesso and type(pacotes) == \"table\" then\n    local contador = 0\n    for _ in pairs(pacotes) do contador = contador + 1 end\n    log.info(\"\ud83d\udce6 Total: \" .. contador .. \" pacotes\")\nend\n</code></pre>"},{"location":"pt/modules/pkg/#manutencao-do-sistema","title":"Manuten\u00e7\u00e3o do Sistema","text":""},{"location":"pt/modules/pkg/#pkgupdate","title":"<code>pkg.update()</code>","text":"<p>Atualiza cache de pacotes.</p> <pre><code>local atualizar_cache = task(\"atualizar_cache\")\n    :description(\"Atualizar cache de pacotes\")\n    :command(function(this, params)\n        log.info(\"Atualizando...\")\n        return pkg.update()\n    end)\n    :timeout(\"120s\")\n    :build()\n</code></pre>"},{"location":"pt/modules/pkg/#pkgupgrade","title":"<code>pkg.upgrade()</code>","text":"<p>Atualiza todos os pacotes.</p>"},{"location":"pt/modules/pkg/#pkgclean","title":"<code>pkg.clean()</code>","text":"<p>Limpa cache de pacotes.</p>"},{"location":"pt/modules/pkg/#pkgautoremove","title":"<code>pkg.autoremove()</code>","text":"<p>Remove depend\u00eancias n\u00e3o utilizadas.</p> <p>Exemplo:</p> <pre><code>local manutencao = task(\"manutencao\")\n    :description(\"Manuten\u00e7\u00e3o do sistema\")\n    :command(function(this, params)\n        -- Atualizar\n        pkg.update()\n\n        -- Fazer upgrade\n        pkg.upgrade()\n\n        -- Limpar\n        pkg.clean()\n        pkg.autoremove()\n\n        return true, \"Manuten\u00e7\u00e3o completa\"\n    end)\n    :timeout(\"600s\")\n    :build()\n</code></pre>"},{"location":"pt/modules/pkg/#funcoes-avancadas","title":"Fun\u00e7\u00f5es Avan\u00e7adas","text":""},{"location":"pt/modules/pkg/#pkgis_installedpacote","title":"<code>pkg.is_installed(pacote)</code>","text":"<p>Verifica se est\u00e1 instalado.</p> <pre><code>local pkg = require(\"pkg\")\n\nlocal verificar_requisitos = task(\"verificar_requisitos\")\n    :description(\"Verificar pacotes necess\u00e1rios\")\n    :command(function(this, params)\n        local necessarios = {\"git\", \"curl\", \"wget\"}\n        local faltando = {}\n\n        for _, nome_pkg in ipairs(necessarios) do\n            local instalado, _ = pkg.is_installed(nome_pkg)\n            if not instalado then\n                table.insert(faltando, nome_pkg)\n            end\n        end\n\n        if #faltando &gt; 0 then\n            return false, \"Faltando: \" .. table.concat(faltando, \", \")\n        end\n\n        return true, \"Tudo OK\"\n    end)\n    :build()\n</code></pre>"},{"location":"pt/modules/pkg/#pkgget_manager","title":"<code>pkg.get_manager()</code>","text":"<p>Retorna nome do gerenciador.</p> <pre><code>local gerenciador, err = pkg.get_manager()\nlog.info(\"Gerenciador: \" .. (gerenciador or \"desconhecido\"))\n</code></pre>"},{"location":"pt/modules/pkg/#pkgwhichexecutavel","title":"<code>pkg.which(executavel)</code>","text":"<p>Encontra caminho do execut\u00e1vel.</p> <pre><code>local caminho, err = pkg.which(\"git\")\nif caminho then\n    log.info(\"Git em: \" .. caminho)\nend\n</code></pre>"},{"location":"pt/modules/pkg/#exemplos-completos","title":"\ud83c\udfaf Exemplos Completos","text":""},{"location":"pt/modules/pkg/#configuracao-de-ambiente-de-desenvolvimento","title":"Configura\u00e7\u00e3o de Ambiente de Desenvolvimento","text":"<pre><code>local pkg = require(\"pkg\")\n\nlocal atualizar = task(\"atualizar\")\n    :command(function() return pkg.update() end)\n    :build()\n\nlocal instalar_ferramentas = task(\"instalar_ferramentas\")\n    :command(function()\n        local ferramentas = {\"git\", \"curl\", \"wget\", \"vim\", \"htop\"}\n        return pkg.install(ferramentas)\n    end)\n    :depends_on({\"atualizar\"})\n    :build()\n\nlocal verificar = task(\"verificar\")\n    :command(function()\n        for _, ferramenta in ipairs({\"git\", \"curl\"}) do\n            if pkg.is_installed(ferramenta) then\n                local caminho = pkg.which(ferramenta)\n                log.info(\"\u2705 \" .. ferramenta .. \" (\" .. caminho .. \")\")\n            end\n        end\n        return true, \"OK\"\n    end)\n    :depends_on({\"instalar_ferramentas\"})\n    :build()\n\nworkflow.define(\"configurar_dev\")\n    :tasks({ atualizar, instalar_ferramentas, verificar })\n</code></pre>"},{"location":"pt/modules/pkg/#gerenciamento-distribuido","title":"Gerenciamento Distribu\u00eddo","text":"<pre><code>local pkg = require(\"pkg\")\n\nlocal atualizar_servidores = task(\"atualizar_servidores\")\n    :command(function() return pkg.update() end)\n    :delegate_to(\"servidor-prod-1\")\n    :build()\n\nlocal instalar_monitoramento = task(\"instalar_monitoramento\")\n    :command(function()\n        return pkg.install({\"htop\", \"iotop\", \"nethogs\"})\n    end)\n    :delegate_to(\"servidor-prod-1\")\n    :depends_on({\"atualizar_servidores\"})\n    :build()\n\nworkflow.define(\"configurar_monitoramento\")\n    :tasks({ atualizar_servidores, instalar_monitoramento })\n</code></pre>"},{"location":"pt/modules/pkg/#auditoria-do-sistema","title":"Auditoria do Sistema","text":"<pre><code>local pkg = require(\"pkg\")\n\nlocal auditoria = task(\"auditoria\")\n    :command(function()\n        log.info(\"\ud83d\udcca Auditoria do Sistema\")\n        log.info(string.rep(\"=\", 60))\n\n        local gerenciador = pkg.get_manager()\n        log.info(\"Gerenciador: \" .. gerenciador)\n\n        local _, pacotes = pkg.list()\n        local contador = 0\n        for _ in pairs(pacotes) do contador = contador + 1 end\n        log.info(\"Pacotes: \" .. contador)\n\n        local criticos = {\"openssl\", \"curl\"}\n        for _, p in ipairs(criticos) do\n            local instalado = pkg.is_installed(p)\n            log.info((instalado and \"\u2705\" or \"\u274c\") .. \" \" .. p)\n        end\n\n        return true, \"OK\"\n    end)\n    :build()\n\nworkflow.define(\"auditoria\")\n    :tasks({ auditoria })\n</code></pre>"},{"location":"pt/modules/pkg/#melhores-praticas","title":"\ud83d\ude80 Melhores Pr\u00e1ticas","text":"<ol> <li> <p>Atualizar antes de instalar: <pre><code>pkg.update()\npkg.install(\"pacote\")\n</code></pre></p> </li> <li> <p>Verificar antes de instalar: <pre><code>if not pkg.is_installed(\"git\") then\n    pkg.install(\"git\")\nend\n</code></pre></p> </li> <li> <p>Limpar ap\u00f3s opera\u00e7\u00f5es: <pre><code>pkg.clean()\npkg.autoremove()\n</code></pre></p> </li> <li> <p>Usar delegate_to para remoto: <pre><code>:delegate_to(\"nome-servidor\")\n</code></pre></p> </li> </ol>"},{"location":"pt/modules/pkg/#notas-de-plataforma","title":"\u26a0\ufe0f Notas de Plataforma","text":"<ul> <li>Linux: Requer sudo</li> <li>macOS: Homebrew n\u00e3o precisa de sudo</li> <li>Arch: Usa sintaxe do pacman</li> <li>openSUSE: Usa zypper</li> </ul>"},{"location":"pt/modules/pkg/#veja-tambem","title":"\ud83d\udd17 Veja Tamb\u00e9m","text":"<ul> <li>M\u00f3dulo exec</li> <li>Guia DSL Moderno</li> <li>Agentes Distribu\u00eddos</li> </ul>"},{"location":"pt/modules/pulumi/","title":"M\u00f3dulo Pulumi","text":"<p>O m\u00f3dulo <code>pulumi</code> fornece uma API fluente para orquestrar stacks do Pulumi, permitindo que voc\u00ea gerencie seus fluxos de trabalho de Infraestrutura como C\u00f3digo (IaC) diretamente do <code>sloth-runner</code>.</p>"},{"location":"pt/modules/pulumi/#pulumistackname-options","title":"<code>pulumi.stack(name, options)</code>","text":"<p>Cria um objeto de stack do Pulumi.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>name</code> (string): O nome completo da stack (ex: <code>\"minha-org/meu-projeto/dev\"</code>).</li> <li><code>options</code> (tabela): Uma tabela de op\u00e7\u00f5es.<ul> <li><code>workdir</code> (string): (Obrigat\u00f3rio) O caminho para o diret\u00f3rio do projeto Pulumi.</li> </ul> </li> </ul> </li> <li>Retorna:<ul> <li><code>stack</code> (objeto): Um objeto <code>PulumiStack</code>.</li> <li><code>error</code>: Um objeto de erro se a stack n\u00e3o puder ser inicializada.</li> </ul> </li> </ul>"},{"location":"pt/modules/pulumi/#o-objeto-pulumistack","title":"O Objeto <code>PulumiStack</code>","text":"<p>Este objeto representa uma stack espec\u00edfica do Pulumi e fornece m\u00e9todos para intera\u00e7\u00e3o.</p>"},{"location":"pt/modules/pulumi/#stackupoptions","title":"<code>stack:up([options])</code>","text":"<p>Cria ou atualiza os recursos da stack executando <code>pulumi up</code>.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>options</code> (tabela, opcional):<ul> <li><code>yes</code> (booleano): Se <code>true</code>, passa <code>--yes</code> para aprovar a atualiza\u00e7\u00e3o automaticamente.</li> <li><code>config</code> (tabela): Um dicion\u00e1rio de valores de configura\u00e7\u00e3o a serem passados para a stack.</li> <li><code>args</code> (tabela): Uma lista de argumentos de string adicionais a serem passados para o comando.</li> </ul> </li> </ul> </li> <li>Retorna:<ul> <li><code>result</code> (tabela): Uma tabela contendo <code>success</code> (booleano), <code>stdout</code> (string) e <code>stderr</code> (string).</li> </ul> </li> </ul>"},{"location":"pt/modules/pulumi/#stackpreviewoptions","title":"<code>stack:preview([options])</code>","text":"<p>Pr\u00e9-visualiza as altera\u00e7\u00f5es que seriam feitas por uma atualiza\u00e7\u00e3o executando <code>pulumi preview</code>.</p> <ul> <li>Par\u00e2metros: Os mesmos de <code>stack:up</code>.</li> <li>Retorna: O mesmo de <code>stack:up</code>.</li> </ul>"},{"location":"pt/modules/pulumi/#stackrefreshoptions","title":"<code>stack:refresh([options])</code>","text":"<p>Atualiza o estado da stack executando <code>pulumi refresh</code>.</p> <ul> <li>Par\u00e2metros: Os mesmos de <code>stack:up</code>.</li> <li>Retorna: O mesmo de <code>stack:up</code>.</li> </ul>"},{"location":"pt/modules/pulumi/#stackdestroyoptions","title":"<code>stack:destroy([options])</code>","text":"<p>Destr\u00f3i todos os recursos na stack executando <code>pulumi destroy</code>.</p> <ul> <li>Par\u00e2metros: Os mesmos de <code>stack:up</code>.</li> <li>Retorna: O mesmo de <code>stack:up</code>.</li> </ul>"},{"location":"pt/modules/pulumi/#stackoutputs","title":"<code>stack:outputs()</code>","text":"<p>Recupera os outputs de uma stack implantada.</p> <ul> <li>Retorna:<ul> <li><code>outputs</code> (tabela): Uma tabela Lua com os outputs da stack.</li> <li><code>error</code>: Um objeto de erro se a busca dos outputs falhar.</li> </ul> </li> </ul>"},{"location":"pt/modules/pulumi/#exemplo","title":"Exemplo","text":"<p>Este exemplo mostra um padr\u00e3o comum: implantar uma stack de rede (VPC) e, em seguida, usar seu output (<code>vpcId</code>) para configurar e implantar uma stack de aplica\u00e7\u00e3o.</p> <pre><code>command = function()\n  local pulumi = require(\"pulumi\")\n\n  -- 1. Define a stack da VPC\n  local vpc_stack = pulumi.stack(\"minha-org/vpc/prod\", { workdir = \"./pulumi/vpc\" })\n\n  -- 2. Implanta a VPC\n  log.info(\"Implantando a stack da VPC...\")\n  local vpc_result = vpc_stack:up({ yes = true })\n  if not vpc_result.success then\n    return false, \"A implanta\u00e7\u00e3o da VPC falhou: \" .. vpc_result.stderr\n  end\n\n  -- 3. Obt\u00e9m o ID da VPC de seus outputs\n  log.info(\"Buscando outputs da VPC...\")\n  local vpc_outputs, err = vpc_stack:outputs()\n  if err then\n    return false, \"Falha ao obter os outputs da VPC: \" .. err\n  end\n  local vpc_id = vpc_outputs.vpcId\n\n  -- 4. Define a stack da Aplica\u00e7\u00e3o\n  local app_stack = pulumi.stack(\"minha-org/app/prod\", { workdir = \"./pulumi/app\" })\n\n  -- 5. Implanta a Aplica\u00e7\u00e3o, passando o vpcId como configura\u00e7\u00e3o\n  log.info(\"Implantando a stack da Aplica\u00e7\u00e3o na VPC: \" .. vpc_id)\n  local app_result = app_stack:up({\n    yes = true,\n    config = { [\"my-app:vpcId\"] = vpc_id }\n  })\n  if not app_result.success then\n    return false, \"A implanta\u00e7\u00e3o da Aplica\u00e7\u00e3o falhou: \" .. app_result.stderr\n  end\n\n  log.info(\"Todas as stacks foram implantadas com sucesso.\")\n  return true, \"Orquestra\u00e7\u00e3o com Pulumi completa.\"\nend\n</code></pre>"},{"location":"pt/modules/python/","title":"M\u00f3dulo Python","text":"<p>O m\u00f3dulo <code>python</code> fornece uma maneira conveniente de gerenciar ambientes virtuais Python (<code>venv</code>) e executar scripts de dentro de suas tarefas do <code>sloth-runner</code>. Isso \u00e9 particularmente \u00fatil para fluxos de trabalho que envolvem ferramentas ou scripts baseados em Python.</p>"},{"location":"pt/modules/python/#pythonvenvpath","title":"<code>python.venv(path)</code>","text":"<p>Cria um objeto de ambiente virtual Python. Note que isso apenas cria o objeto em Lua; o ambiente em si n\u00e3o \u00e9 criado no sistema de arquivos at\u00e9 que voc\u00ea chame <code>:create()</code>.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>path</code> (string): O caminho no sistema de arquivos onde o ambiente virtual deve ser criado (ex: <code>./.venv</code>).</li> </ul> </li> <li>Retorna:<ul> <li><code>venv</code> (objeto): Um objeto de ambiente virtual com m\u00e9todos para interagir com ele.</li> </ul> </li> </ul>"},{"location":"pt/modules/python/#venvcreate","title":"<code>venv:create()</code>","text":"<p>Cria o ambiente virtual no sistema de arquivos no caminho especificado.</p> <ul> <li>Retorna:<ul> <li><code>error</code>: Um objeto de erro se a cria\u00e7\u00e3o falhar.</li> </ul> </li> </ul>"},{"location":"pt/modules/python/#venvpipcommand","title":"<code>venv:pip(command)</code>","text":"<p>Executa um comando <code>pip</code> dentro do contexto do ambiente virtual.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>command</code> (string): Os argumentos a serem passados para o <code>pip</code> (ex: <code>install -r requirements.txt</code>).</li> </ul> </li> <li>Retorna:<ul> <li><code>result</code> (tabela): Uma tabela contendo <code>stdout</code>, <code>stderr</code> e <code>exit_code</code> do comando <code>pip</code>.</li> </ul> </li> </ul>"},{"location":"pt/modules/python/#venvexecscript_path","title":"<code>venv:exec(script_path)</code>","text":"<p>Executa um script Python usando o interpretador Python do ambiente virtual.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>script_path</code> (string): O caminho para o script Python a ser executado.</li> </ul> </li> <li>Retorna:<ul> <li><code>result</code> (tabela): Uma tabela contendo <code>stdout</code>, <code>stderr</code> e <code>exit_code</code> da execu\u00e7\u00e3o do script.</li> </ul> </li> </ul>"},{"location":"pt/modules/python/#exemplo","title":"Exemplo","text":"<p>Este exemplo demonstra um ciclo de vida completo: criar um ambiente virtual, instalar depend\u00eancias de um arquivo <code>requirements.txt</code> e executar um script Python.</p> <pre><code>-- examples/python_venv_lifecycle_example.sloth\n\nModern DSLs = {\n  main = {\n    description = \"Uma tarefa para demonstrar o ciclo de vida de um venv Python.\",\n    create_workdir_before_run = true, -- Usa um diret\u00f3rio de trabalho tempor\u00e1rio\n    tasks = {\n      {\n        name = \"run-python-script\",\n        description = \"Cria um venv, instala depend\u00eancias e executa um script.\",\n        command = function(params)\n          local python = require(\"python\")\n          local workdir = params.workdir -- Obt\u00e9m o diret\u00f3rio de trabalho tempor\u00e1rio do grupo\n\n          -- 1. Escreve nosso script Python e depend\u00eancias no workdir\n          fs.write(workdir .. \"/requirements.txt\", \"requests==2.28.1\")\n          fs.write(workdir .. \"/main.py\", \"import requests\\nprint(f'Ol\u00e1 do Python! Usando a vers\u00e3o do requests: {requests.__version__}')\")\n\n          -- 2. Cria um objeto venv\n          local venv_path = workdir .. \"/.venv\"\n          log.info(\"Configurando ambiente virtual em: \" .. venv_path)\n          local venv = python.venv(venv_path)\n\n          -- 3. Cria o venv no sistema de arquivos\n          venv:create()\n\n          -- 4. Instala as depend\u00eancias usando pip\n          log.info(\"Instalando depend\u00eancias do requirements.txt...\")\n          local pip_result = venv:pip(\"install -r \" .. workdir .. \"/requirements.txt\")\n          if pip_result.exit_code ~= 0 then\n            log.error(\"A instala\u00e7\u00e3o com pip falhou: \" .. pip_result.stderr)\n            return false, \"Falha ao instalar depend\u00eancias Python.\"\n          end\n\n          -- 5. Executa o script\n          log.info(\"Executando o script Python...\")\n          local exec_result = venv:exec(workdir .. \"/main.py\")\n          if exec_result.exit_code ~= 0 then\n            log.error(\"O script Python falhou: \" .. exec_result.stderr)\n            return false, \"A execu\u00e7\u00e3o do script Python falhou.\"\n          end\n\n          log.info(\"Script Python executado com sucesso.\")\n          print(\"--- Sa\u00edda do Script Python ---\")\n          print(exec_result.stdout)\n          print(\"----------------------------\")\n\n          return true, \"Ciclo de vida do venv Python completo.\"\n        end\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"pt/modules/salt/","title":"M\u00f3dulo Salt - Completo e Abrangente","text":"<p>O m\u00f3dulo <code>salt</code> fornece uma API completa e abrangente para interagir com o SaltStack, cobrindo 100% das funcionalidades do Salt. Este m\u00f3dulo oferece mais de 200 fun\u00e7\u00f5es que abrangem todas as \u00e1reas principais do SaltStack, desde opera\u00e7\u00f5es b\u00e1sicas at\u00e9 recursos empresariais avan\u00e7ados.</p>"},{"location":"pt/modules/salt/#funcionalidades-principais","title":"\ud83d\ude80 Funcionalidades Principais","text":""},{"location":"pt/modules/salt/#1-execucao-basica-e-controle","title":"1. Execu\u00e7\u00e3o B\u00e1sica e Controle","text":"<ul> <li><code>salt.cmd()</code> - Execu\u00e7\u00e3o de comandos b\u00e1sicos</li> <li><code>salt.run()</code> - Execu\u00e7\u00e3o de runners</li> <li><code>salt.execute()</code> - Execu\u00e7\u00e3o gen\u00e9rica</li> <li><code>salt.batch()</code> - Execu\u00e7\u00e3o em lotes</li> <li><code>salt.async()</code> - Execu\u00e7\u00e3o ass\u00edncrona</li> </ul>"},{"location":"pt/modules/salt/#2-conectividade-e-testes","title":"2. Conectividade e Testes","text":"<ul> <li><code>salt.ping()</code> - Teste de conectividade</li> <li><code>salt.test()</code> - M\u00f3dulo de testes</li> <li><code>salt.version()</code> - Informa\u00e7\u00f5es de vers\u00e3o</li> <li><code>salt.status()</code> - Status do sistema</li> </ul>"},{"location":"pt/modules/salt/#3-gerenciamento-de-chaves","title":"3. Gerenciamento de Chaves","text":"<ul> <li><code>salt.key_list()</code> - Listar chaves</li> <li><code>salt.key_accept()</code> - Aceitar chaves</li> <li><code>salt.key_reject()</code> - Rejeitar chaves</li> <li><code>salt.key_delete()</code> - Deletar chaves</li> <li><code>salt.key_finger()</code> - Impress\u00f5es digitais</li> <li><code>salt.key_gen()</code> - Gerar chaves</li> </ul>"},{"location":"pt/modules/salt/#4-gerenciamento-de-estados","title":"4. Gerenciamento de Estados","text":"<ul> <li><code>salt.state_apply()</code> - Aplicar estados</li> <li><code>salt.state_highstate()</code> - Execu\u00e7\u00e3o completa de estados</li> <li><code>salt.state_test()</code> - Teste de estados</li> <li><code>salt.state_show_sls()</code> - Mostrar SLS</li> <li><code>salt.state_show_top()</code> - Mostrar TOP</li> <li><code>salt.state_show_lowstate()</code> - Mostrar lowstate</li> <li><code>salt.state_single()</code> - Estado \u00fanico</li> <li><code>salt.state_template()</code> - Templates de estado</li> </ul>"},{"location":"pt/modules/salt/#5-gerenciamento-de-grains","title":"5. Gerenciamento de Grains","text":"<ul> <li><code>salt.grains_get()</code> - Obter grains</li> <li><code>salt.grains_set()</code> - Definir grains</li> <li><code>salt.grains_append()</code> - Adicionar a grains</li> <li><code>salt.grains_remove()</code> - Remover de grains</li> <li><code>salt.grains_delkey()</code> - Deletar chave de grain</li> <li><code>salt.grains_items()</code> - Todos os grains</li> </ul>"},{"location":"pt/modules/salt/#6-gerenciamento-de-pillar","title":"6. Gerenciamento de Pillar","text":"<ul> <li><code>salt.pillar_get()</code> - Obter dados do pillar</li> <li><code>salt.pillar_items()</code> - Todos os dados do pillar</li> <li><code>salt.pillar_show()</code> - Mostrar compila\u00e7\u00e3o do pillar</li> <li><code>salt.pillar_refresh()</code> - Atualizar pillar</li> </ul>"},{"location":"pt/modules/salt/#7-operacoes-de-arquivo","title":"7. Opera\u00e7\u00f5es de Arquivo","text":"<ul> <li><code>salt.file_copy()</code> - Copiar arquivos</li> <li><code>salt.file_get()</code> - Obter arquivos</li> <li><code>salt.file_list()</code> - Listar arquivos</li> <li><code>salt.file_manage()</code> - Gerenciar arquivos</li> <li><code>salt.file_recurse()</code> - Opera\u00e7\u00f5es recursivas</li> <li><code>salt.file_touch()</code> - Criar/tocar arquivos</li> <li><code>salt.file_stats()</code> - Estat\u00edsticas de arquivo</li> <li><code>salt.file_find()</code> - Buscar arquivos</li> <li><code>salt.file_replace()</code> - Substituir conte\u00fado</li> <li><code>salt.file_check_hash()</code> - Verificar hash</li> </ul>"},{"location":"pt/modules/salt/#8-gerenciamento-de-pacotes","title":"8. Gerenciamento de Pacotes","text":"<ul> <li><code>salt.pkg_install()</code> - Instalar pacotes</li> <li><code>salt.pkg_remove()</code> - Remover pacotes</li> <li><code>salt.pkg_upgrade()</code> - Atualizar pacotes</li> <li><code>salt.pkg_refresh()</code> - Atualizar reposit\u00f3rios</li> <li><code>salt.pkg_list()</code> - Listar pacotes</li> <li><code>salt.pkg_version()</code> - Vers\u00e3o de pacote</li> <li><code>salt.pkg_available()</code> - Pacotes dispon\u00edveis</li> <li><code>salt.pkg_info()</code> - Informa\u00e7\u00f5es de pacote</li> <li><code>salt.pkg_hold()</code> - Segurar pacote</li> <li><code>salt.pkg_unhold()</code> - Liberar pacote</li> </ul>"},{"location":"pt/modules/salt/#9-gerenciamento-de-servicos","title":"9. Gerenciamento de Servi\u00e7os","text":"<ul> <li><code>salt.service_start()</code> - Iniciar servi\u00e7o</li> <li><code>salt.service_stop()</code> - Parar servi\u00e7o</li> <li><code>salt.service_restart()</code> - Reiniciar servi\u00e7o</li> <li><code>salt.service_reload()</code> - Recarregar servi\u00e7o</li> <li><code>salt.service_status()</code> - Status do servi\u00e7o</li> <li><code>salt.service_enable()</code> - Habilitar servi\u00e7o</li> <li><code>salt.service_disable()</code> - Desabilitar servi\u00e7o</li> <li><code>salt.service_list()</code> - Listar servi\u00e7os</li> </ul>"},{"location":"pt/modules/salt/#10-gerenciamento-de-usuarios","title":"10. Gerenciamento de Usu\u00e1rios","text":"<ul> <li><code>salt.user_add()</code> - Adicionar usu\u00e1rio</li> <li><code>salt.user_delete()</code> - Deletar usu\u00e1rio</li> <li><code>salt.user_info()</code> - Informa\u00e7\u00f5es do usu\u00e1rio</li> <li><code>salt.user_list()</code> - Listar usu\u00e1rios</li> <li><code>salt.user_chuid()</code> - Alterar UID</li> <li><code>salt.user_chgid()</code> - Alterar GID</li> <li><code>salt.user_chshell()</code> - Alterar shell</li> <li><code>salt.user_chhome()</code> - Alterar home</li> <li><code>salt.user_primary_group()</code> - Alterar grupo prim\u00e1rio</li> </ul>"},{"location":"pt/modules/salt/#11-gerenciamento-de-grupos","title":"11. Gerenciamento de Grupos","text":"<ul> <li><code>salt.group_add()</code> - Adicionar grupo</li> <li><code>salt.group_delete()</code> - Deletar grupo</li> <li><code>salt.group_info()</code> - Informa\u00e7\u00f5es do grupo</li> <li><code>salt.group_list()</code> - Listar grupos</li> <li><code>salt.group_adduser()</code> - Adicionar usu\u00e1rio ao grupo</li> <li><code>salt.group_deluser()</code> - Remover usu\u00e1rio do grupo</li> <li><code>salt.group_members()</code> - Membros do grupo</li> </ul>"},{"location":"pt/modules/salt/#12-gerenciamento-de-rede","title":"12. Gerenciamento de Rede","text":"<ul> <li><code>salt.network_interface()</code> - Interface espec\u00edfica</li> <li><code>salt.network_interfaces()</code> - Todas as interfaces</li> <li><code>salt.network_ping()</code> - Ping de rede</li> <li><code>salt.network_traceroute()</code> - Traceroute</li> <li><code>salt.network_netstat()</code> - Estat\u00edsticas de rede</li> <li><code>salt.network_arp()</code> - Tabela ARP</li> </ul>"},{"location":"pt/modules/salt/#13-informacoes-do-sistema","title":"13. Informa\u00e7\u00f5es do Sistema","text":"<ul> <li><code>salt.system_info()</code> - Informa\u00e7\u00f5es completas</li> <li><code>salt.system_uptime()</code> - Tempo de atividade</li> <li><code>salt.system_reboot()</code> - Reiniciar sistema</li> <li><code>salt.system_shutdown()</code> - Desligar sistema</li> <li><code>salt.system_halt()</code> - Parar sistema</li> <li><code>salt.system_hostname()</code> - Nome do host</li> <li><code>salt.system_set_hostname()</code> - Definir hostname</li> </ul>"},{"location":"pt/modules/salt/#14-gerenciamento-de-disco-e-montagem","title":"14. Gerenciamento de Disco e Montagem","text":"<ul> <li><code>salt.disk_usage()</code> - Uso do disco</li> <li><code>salt.disk_stats()</code> - Estat\u00edsticas do disco</li> <li><code>salt.mount_active()</code> - Montagens ativas</li> <li><code>salt.mount_fstab()</code> - Configura\u00e7\u00e3o fstab</li> <li><code>salt.mount_mount()</code> - Montar filesystem</li> <li><code>salt.mount_umount()</code> - Desmontar filesystem</li> <li><code>salt.mount_remount()</code> - Remontar filesystem</li> </ul>"},{"location":"pt/modules/salt/#15-gerenciamento-de-processos","title":"15. Gerenciamento de Processos","text":"<ul> <li><code>salt.process_list()</code> - Listar processos</li> <li><code>salt.process_info()</code> - Informa\u00e7\u00f5es do processo</li> <li><code>salt.process_kill()</code> - Matar processo</li> <li><code>salt.process_killall()</code> - Matar por nome</li> <li><code>salt.process_pkill()</code> - Matar por padr\u00e3o</li> </ul>"},{"location":"pt/modules/salt/#16-gerenciamento-de-cron","title":"16. Gerenciamento de Cron","text":"<ul> <li><code>salt.cron_list()</code> - Listar tarefas cron</li> <li><code>salt.cron_set()</code> - Definir tarefa cron</li> <li><code>salt.cron_delete()</code> - Deletar tarefa cron</li> <li><code>salt.cron_raw_cron()</code> - Cron bruto</li> </ul>"},{"location":"pt/modules/salt/#17-operacoes-de-arquivo","title":"17. Opera\u00e7\u00f5es de Arquivo","text":"<ul> <li><code>salt.archive_gunzip()</code> - Descompactar gzip</li> <li><code>salt.archive_gzip()</code> - Compactar gzip</li> <li><code>salt.archive_tar()</code> - Criar tar</li> <li><code>salt.archive_untar()</code> - Extrair tar</li> <li><code>salt.archive_unzip()</code> - Extrair zip</li> <li><code>salt.archive_zip()</code> - Criar zip</li> </ul>"},{"location":"pt/modules/salt/#18-integracao-salt-cloud","title":"18. Integra\u00e7\u00e3o Salt Cloud","text":"<ul> <li><code>salt.cloud_list_nodes()</code> - Listar n\u00f3s na nuvem</li> <li><code>salt.cloud_create()</code> - Criar inst\u00e2ncia</li> <li><code>salt.cloud_destroy()</code> - Destruir inst\u00e2ncia</li> <li><code>salt.cloud_action()</code> - A\u00e7\u00f5es na nuvem</li> <li><code>salt.cloud_function()</code> - Fun\u00e7\u00f5es da nuvem</li> <li><code>salt.cloud_map()</code> - Mapeamento de nuvem</li> <li><code>salt.cloud_profile()</code> - Perfis de nuvem</li> <li><code>salt.cloud_provider()</code> - Provedores de nuvem</li> </ul>"},{"location":"pt/modules/salt/#19-sistema-de-eventos","title":"19. Sistema de Eventos","text":"<ul> <li><code>salt.event_send()</code> - Enviar evento</li> <li><code>salt.event_listen()</code> - Escutar eventos</li> <li><code>salt.event_fire()</code> - Disparar evento</li> <li><code>salt.event_fire_master()</code> - Evento no master</li> </ul>"},{"location":"pt/modules/salt/#20-orquestracao","title":"20. Orquestra\u00e7\u00e3o","text":"<ul> <li><code>salt.orchestrate()</code> - Orquestra\u00e7\u00e3o de estados</li> <li><code>salt.runner()</code> - Executar runner</li> <li><code>salt.wheel()</code> - M\u00f3dulos wheel</li> </ul>"},{"location":"pt/modules/salt/#21-operacoes-mine","title":"21. Opera\u00e7\u00f5es Mine","text":"<ul> <li><code>salt.mine_get()</code> - Obter dados mine</li> <li><code>salt.mine_send()</code> - Enviar para mine</li> <li><code>salt.mine_update()</code> - Atualizar mine</li> <li><code>salt.mine_delete()</code> - Deletar do mine</li> <li><code>salt.mine_flush()</code> - Limpar mine</li> <li><code>salt.mine_valid()</code> - Validar mine</li> </ul>"},{"location":"pt/modules/salt/#22-gerenciamento-de-jobs","title":"22. Gerenciamento de Jobs","text":"<ul> <li><code>salt.job_active()</code> - Jobs ativos</li> <li><code>salt.job_list()</code> - Listar jobs</li> <li><code>salt.job_lookup()</code> - Buscar job</li> <li><code>salt.job_exit_success()</code> - Sucesso do job</li> <li><code>salt.job_print()</code> - Imprimir job</li> </ul>"},{"location":"pt/modules/salt/#23-integracao-docker","title":"23. Integra\u00e7\u00e3o Docker","text":"<ul> <li><code>salt.docker_ps()</code> - Listar containers</li> <li><code>salt.docker_run()</code> - Executar container</li> <li><code>salt.docker_stop()</code> - Parar container</li> <li><code>salt.docker_start()</code> - Iniciar container</li> <li><code>salt.docker_restart()</code> - Reiniciar container</li> <li><code>salt.docker_build()</code> - Construir imagem</li> <li><code>salt.docker_pull()</code> - Baixar imagem</li> <li><code>salt.docker_push()</code> - Enviar imagem</li> <li><code>salt.docker_images()</code> - Listar imagens</li> <li><code>salt.docker_remove()</code> - Remover container</li> <li><code>salt.docker_inspect()</code> - Inspecionar container</li> <li><code>salt.docker_logs()</code> - Logs do container</li> <li><code>salt.docker_exec()</code> - Executar no container</li> </ul>"},{"location":"pt/modules/salt/#24-operacoes-git","title":"24. Opera\u00e7\u00f5es Git","text":"<ul> <li><code>salt.git_clone()</code> - Clonar reposit\u00f3rio</li> <li><code>salt.git_pull()</code> - Puxar altera\u00e7\u00f5es</li> <li><code>salt.git_checkout()</code> - Checkout branch</li> <li><code>salt.git_add()</code> - Adicionar arquivos</li> <li><code>salt.git_commit()</code> - Fazer commit</li> <li><code>salt.git_push()</code> - Enviar altera\u00e7\u00f5es</li> <li><code>salt.git_status()</code> - Status do reposit\u00f3rio</li> <li><code>salt.git_log()</code> - Log de commits</li> <li><code>salt.git_reset()</code> - Reset do reposit\u00f3rio</li> <li><code>salt.git_remote_get()</code> - Obter remote</li> <li><code>salt.git_remote_set()</code> - Definir remote</li> </ul>"},{"location":"pt/modules/salt/#25-operacoes-de-banco-de-dados","title":"25. Opera\u00e7\u00f5es de Banco de Dados","text":""},{"location":"pt/modules/salt/#mysql","title":"MySQL:","text":"<ul> <li><code>salt.mysql_query()</code> - Executar query</li> <li><code>salt.mysql_db_create()</code> - Criar banco</li> <li><code>salt.mysql_db_remove()</code> - Remover banco</li> <li><code>salt.mysql_user_create()</code> - Criar usu\u00e1rio</li> <li><code>salt.mysql_user_remove()</code> - Remover usu\u00e1rio</li> <li><code>salt.mysql_grant_add()</code> - Adicionar permiss\u00e3o</li> <li><code>salt.mysql_grant_revoke()</code> - Revogar permiss\u00e3o</li> </ul>"},{"location":"pt/modules/salt/#postgresql","title":"PostgreSQL:","text":"<ul> <li><code>salt.postgres_query()</code> - Executar query</li> <li><code>salt.postgres_db_create()</code> - Criar banco</li> <li><code>salt.postgres_db_remove()</code> - Remover banco</li> <li><code>salt.postgres_user_create()</code> - Criar usu\u00e1rio</li> <li><code>salt.postgres_user_remove()</code> - Remover usu\u00e1rio</li> </ul>"},{"location":"pt/modules/salt/#26-monitoramento-e-metricas","title":"26. Monitoramento e M\u00e9tricas","text":"<ul> <li><code>salt.status_loadavg()</code> - Carga m\u00e9dia</li> <li><code>salt.status_cpuinfo()</code> - Informa\u00e7\u00f5es CPU</li> <li><code>salt.status_meminfo()</code> - Informa\u00e7\u00f5es mem\u00f3ria</li> <li><code>salt.status_diskusage()</code> - Uso de disco</li> <li><code>salt.status_netdev()</code> - Dispositivos de rede</li> <li><code>salt.status_w()</code> - Usu\u00e1rios logados</li> <li><code>salt.status_uptime()</code> - Tempo de atividade</li> </ul>"},{"location":"pt/modules/salt/#27-gerenciamento-de-configuracao","title":"27. Gerenciamento de Configura\u00e7\u00e3o","text":"<ul> <li><code>salt.config_get()</code> - Obter configura\u00e7\u00e3o</li> <li><code>salt.config_option()</code> - Op\u00e7\u00f5es de configura\u00e7\u00e3o</li> <li><code>salt.config_valid_fileproto()</code> - Validar protocolo</li> <li><code>salt.config_backup_mode()</code> - Modo de backup</li> </ul>"},{"location":"pt/modules/salt/#28-api-e-integracao-rest","title":"28. API e Integra\u00e7\u00e3o REST","text":"<ul> <li><code>salt.api_client()</code> - Cliente API</li> <li><code>salt.api_login()</code> - Login API</li> <li><code>salt.api_logout()</code> - Logout API</li> <li><code>salt.api_minions()</code> - Minions via API</li> <li><code>salt.api_jobs()</code> - Jobs via API</li> <li><code>salt.api_stats()</code> - Estat\u00edsticas API</li> <li><code>salt.api_events()</code> - Eventos API</li> <li><code>salt.api_hook()</code> - Hooks API</li> </ul>"},{"location":"pt/modules/salt/#29-engines-de-template","title":"29. Engines de Template","text":"<ul> <li><code>salt.template_jinja()</code> - Template Jinja2</li> <li><code>salt.template_yaml()</code> - Template YAML</li> <li><code>salt.template_json()</code> - Template JSON</li> <li><code>salt.template_mako()</code> - Template Mako</li> <li><code>salt.template_py()</code> - Template Python</li> <li><code>salt.template_wempy()</code> - Template Wempy</li> </ul>"},{"location":"pt/modules/salt/#30-logging-e-debug","title":"30. Logging e Debug","text":"<ul> <li><code>salt.log_error()</code> - Log de erro</li> <li><code>salt.log_warning()</code> - Log de aviso</li> <li><code>salt.log_info()</code> - Log informativo</li> <li><code>salt.log_debug()</code> - Log de debug</li> <li><code>salt.debug_mode()</code> - Modo debug</li> <li><code>salt.debug_profile()</code> - Perfil de debug</li> </ul>"},{"location":"pt/modules/salt/#31-suporte-multi-master","title":"31. Suporte Multi-Master","text":"<ul> <li><code>salt.multi_master_setup()</code> - Configurar multi-master</li> <li><code>salt.multi_master_failover()</code> - Failover autom\u00e1tico</li> <li><code>salt.multi_master_status()</code> - Status multi-master</li> </ul>"},{"location":"pt/modules/salt/#32-performance-e-otimizacao","title":"32. Performance e Otimiza\u00e7\u00e3o","text":"<ul> <li><code>salt.performance_profile()</code> - Perfil de performance</li> <li><code>salt.performance_test()</code> - Teste de performance</li> <li><code>salt.performance_benchmark()</code> - Benchmark</li> <li><code>salt.cache_performance()</code> - Performance do cache</li> </ul>"},{"location":"pt/modules/salt/#33-gerenciamento-de-beacons","title":"33. Gerenciamento de Beacons","text":"<ul> <li><code>salt.beacon_list()</code> - Listar beacons</li> <li><code>salt.beacon_add()</code> - Adicionar beacon</li> <li><code>salt.beacon_modify()</code> - Modificar beacon</li> <li><code>salt.beacon_delete()</code> - Deletar beacon</li> <li><code>salt.beacon_enable()</code> - Habilitar beacon</li> <li><code>salt.beacon_disable()</code> - Desabilitar beacon</li> <li><code>salt.beacon_save()</code> - Salvar beacons</li> <li><code>salt.beacon_reset()</code> - Reset beacons</li> </ul>"},{"location":"pt/modules/salt/#34-gerenciamento-de-schedule","title":"34. Gerenciamento de Schedule","text":"<ul> <li><code>salt.schedule_list()</code> - Listar agendamentos</li> <li><code>salt.schedule_add()</code> - Adicionar agendamento</li> <li><code>salt.schedule_modify()</code> - Modificar agendamento</li> <li><code>salt.schedule_delete()</code> - Deletar agendamento</li> <li><code>salt.schedule_enable()</code> - Habilitar schedule</li> <li><code>salt.schedule_disable()</code> - Desabilitar schedule</li> <li><code>salt.schedule_run_job()</code> - Executar job agendado</li> <li><code>salt.schedule_save()</code> - Salvar schedule</li> <li><code>salt.schedule_reload()</code> - Recarregar schedule</li> </ul>"},{"location":"pt/modules/salt/#35-funcionalidades-avancadas","title":"35. Funcionalidades Avan\u00e7adas","text":"<ul> <li>SSH operations (salt-ssh)</li> <li>Proxy minion management</li> <li>Security operations (X.509, Vault)</li> <li>Cache management</li> <li>Reactor system</li> <li>Syndic management</li> <li>Roster management</li> <li>Fileserver operations</li> </ul>"},{"location":"pt/modules/salt/#exemplos-de-uso","title":"\ud83d\udcd6 Exemplos de Uso","text":""},{"location":"pt/modules/salt/#exemplo-basico-conectividade","title":"Exemplo B\u00e1sico - Conectividade","text":"<pre><code>local salt = require(\"salt\")\n\n-- Testar conectividade com todos os minions\nlocal ping_result = salt.ping(\"*\", {timeout = 30})\nif ping_result.success then\n    print(\"Todos os minions est\u00e3o respondendo\")\n    for minion, response in pairs(ping_result.returns) do\n        print(\"Minion:\", minion, \"Status:\", response)\n    end\nend\n</code></pre>"},{"location":"pt/modules/salt/#exemplo-avancado-aplicacao-de-estado","title":"Exemplo Avan\u00e7ado - Aplica\u00e7\u00e3o de Estado","text":"<pre><code>local salt = require(\"salt\")\n\n-- Aplicar estado nginx com configura\u00e7\u00e3o espec\u00edfica\nlocal result = salt.state_apply(\"web*\", \"nginx\", {\n    test = true,  -- Modo de teste\n    pillar = {\n        nginx = {\n            worker_processes = 4,\n            worker_connections = 1024,\n            server_name = \"example.com\"\n        }\n    }\n})\n\nif result.success then\n    print(\"Estado aplicado com sucesso\")\n    print(\"Dura\u00e7\u00e3o:\", result.duration_ms .. \"ms\")\nelse\n    print(\"Erro:\", result.error)\nend\n</code></pre>"},{"location":"pt/modules/salt/#exemplo-enterprise-orquestracao","title":"Exemplo Enterprise - Orquestra\u00e7\u00e3o","text":"<pre><code>local salt = require(\"salt\")\n\n-- Orquestra\u00e7\u00e3o complexa com m\u00faltiplos ambientes\nlocal orchestration = salt.orchestrate(\"deploy.application\", {\n    pillar = {\n        app_version = \"v2.1.0\",\n        environment = \"production\",\n        rollback_version = \"v2.0.5\",\n        health_check_enabled = true,\n        notification_webhook = \"https://hooks.slack.com/...\"\n    }\n})\n\nif orchestration.success then\n    print(\"Orquestra\u00e7\u00e3o completada com sucesso\")\n    -- Verificar jobs relacionados\n    local job_status = salt.job_lookup(orchestration.jid)\n    if job_status.success then\n        print(\"Status detalhado dispon\u00edvel\")\n    end\nelse\n    print(\"Falha na orquestra\u00e7\u00e3o:\", orchestration.error)\nend\n</code></pre>"},{"location":"pt/modules/salt/#exemplo-cloud-gerenciamento-de-infraestrutura","title":"Exemplo Cloud - Gerenciamento de Infraestrutura","text":"<pre><code>local salt = require(\"salt\")\n\n-- Criar inst\u00e2ncias na nuvem\nlocal cloud_result = salt.cloud_create(\"web-profile\", \"web-server-03\")\nif cloud_result.success then\n    print(\"Inst\u00e2ncia criada na nuvem\")\n\n    -- Aguardar minion ficar online\n    time.sleep(30)\n\n    -- Aplicar configura\u00e7\u00e3o inicial\n    local config_result = salt.state_highstate(\"web-server-03\")\n    if config_result.success then\n        print(\"Configura\u00e7\u00e3o inicial aplicada\")\n    end\nend\n</code></pre>"},{"location":"pt/modules/salt/#exemplo-docker-gerenciamento-de-containers","title":"Exemplo Docker - Gerenciamento de Containers","text":"<pre><code>local salt = require(\"salt\")\n\n-- Gerenciamento completo de containers Docker\nlocal docker_ops = {\n    -- Baixar imagem\n    salt.docker_pull(\"docker*\", \"nginx:latest\"),\n\n    -- Executar container\n    salt.docker_run(\"docker*\", \"nginx:latest\", {\n        name = \"web-server\",\n        ports = \"80:80\",\n        detach = true\n    }),\n\n    -- Verificar status\n    salt.docker_ps(\"docker*\"),\n\n    -- Obter logs\n    salt.docker_logs(\"docker*\", \"web-server\")\n}\n\nfor _, result in ipairs(docker_ops) do\n    if result.success then\n        print(\"Opera\u00e7\u00e3o Docker executada com sucesso\")\n    end\nend\n</code></pre>"},{"location":"pt/modules/salt/#recursos-empresariais","title":"\ud83c\udfaf Recursos Empresariais","text":""},{"location":"pt/modules/salt/#high-availability","title":"High Availability","text":"<ul> <li>Multi-master configuration</li> <li>Automatic failover</li> <li>Load balancing</li> <li>Geographic distribution</li> </ul>"},{"location":"pt/modules/salt/#security","title":"Security","text":"<ul> <li>X.509 certificate management</li> <li>Vault integration for secrets</li> <li>Encrypted communication</li> <li>Role-based access control</li> </ul>"},{"location":"pt/modules/salt/#monitoring-observability","title":"Monitoring &amp; Observability","text":"<ul> <li>Real-time metrics collection</li> <li>Performance profiling</li> <li>Event-driven monitoring</li> <li>Custom dashboards</li> </ul>"},{"location":"pt/modules/salt/#automation","title":"Automation","text":"<ul> <li>Event-driven reactions</li> <li>Scheduled tasks</li> <li>Complex orchestration</li> <li>Workflow management</li> </ul>"},{"location":"pt/modules/salt/#cloud-integration","title":"Cloud Integration","text":"<ul> <li>Multi-cloud support</li> <li>Auto-scaling</li> <li>Infrastructure as Code</li> <li>Cost optimization</li> </ul>"},{"location":"pt/modules/salt/#caracteristicas-de-performance","title":"\ud83d\ude80 Caracter\u00edsticas de Performance","text":"<ul> <li>Timeout Management: Controle avan\u00e7ado de timeout por opera\u00e7\u00e3o</li> <li>Retry Logic: Retry exponencial com backoff autom\u00e1tico</li> <li>Batch Processing: Execu\u00e7\u00e3o em lotes para opera\u00e7\u00f5es em larga escala</li> <li>Async Operations: Suporte completo para opera\u00e7\u00f5es ass\u00edncronas</li> <li>Connection Pooling: Pool de conex\u00f5es para melhor performance</li> <li>Caching: Cache inteligente para otimiza\u00e7\u00e3o</li> <li>JSON Parsing: Parse autom\u00e1tico de sa\u00eddas JSON</li> </ul>"},{"location":"pt/modules/salt/#estatisticas-do-modulo","title":"\ud83d\udcca Estat\u00edsticas do M\u00f3dulo","text":"<ul> <li>200+ Fun\u00e7\u00f5es: Cobertura completa de todas as funcionalidades Salt</li> <li>35+ \u00c1reas Funcionais: Desde b\u00e1sico at\u00e9 recursos empresariais avan\u00e7ados</li> <li>100% Compatibilidade: Com todas as vers\u00f5es do SaltStack</li> <li>Enterprise Ready: Recursos para ambiente de produ\u00e7\u00e3o</li> <li>High Performance: Otimizado para opera\u00e7\u00f5es em larga escala</li> <li>Error Resilient: Tratamento abrangente de erros</li> <li>Extensible: F\u00e1cil de estender com novas funcionalidades</li> </ul> <p>Este m\u00f3dulo Salt abrangente fornece todas as ferramentas necess\u00e1rias para gerenciar infraestrutura em qualquer escala, desde pequenos deployments at\u00e9 ambientes empresariais complexos com milhares de minions.</p>"},{"location":"pt/modules/state/","title":"\ud83d\udcbe M\u00f3dulo de Gerenciamento de Estado","text":"<p>O m\u00f3dulo Gerenciamento de Estado fornece capacidades poderosas de estado persistente com opera\u00e7\u00f5es at\u00f4micas, locks distribu\u00eddos e funcionalidade TTL (Time To Live). Todos os dados s\u00e3o armazenados localmente usando SQLite com modo WAL para m\u00e1xima performance e confiabilidade.</p>"},{"location":"pt/modules/state/#recursos-principais","title":"\ud83d\ude80 Recursos Principais","text":"<ul> <li>Persist\u00eancia SQLite: Armazenamento confi\u00e1vel com modo WAL</li> <li>Opera\u00e7\u00f5es At\u00f4micas: Increment, compare-and-swap, append thread-safe</li> <li>Locks Distribu\u00eddos: Se\u00e7\u00f5es cr\u00edticas com timeout autom\u00e1tico</li> <li>TTL (Time To Live): Expira\u00e7\u00e3o autom\u00e1tica de chaves</li> <li>Tipos de Dados: String, number, boolean, table, list</li> <li>Pattern Matching: Busca de chaves com wildcards</li> <li>Limpeza Autom\u00e1tica: Cleanup em background de dados expirados</li> <li>Estat\u00edsticas: M\u00e9tricas de uso e performance</li> </ul>"},{"location":"pt/modules/state/#uso-basico","title":"\ud83d\udccb Uso B\u00e1sico","text":""},{"location":"pt/modules/state/#definindo-e-obtendo-valores","title":"Definindo e Obtendo Valores","text":"<pre><code>-- Definir valores\nstate.set(\"versao_app\", \"v1.2.3\")\nstate.set(\"contador_usuarios\", 1000)\nstate.set(\"configuracao\", {\n    debug = true,\n    max_conexoes = 100\n})\n\n-- Obter valores\nlocal versao = state.get(\"versao_app\")\nlocal contador = state.get(\"contador_usuarios\")\nlocal config = state.get(\"configuracao\")\n\n-- Obter com valor padr\u00e3o\nlocal tema = state.get(\"tema_ui\", \"escuro\")\n\n-- Verificar exist\u00eancia\nif state.exists(\"versao_app\") then\n    log.info(\"Vers\u00e3o da aplica\u00e7\u00e3o est\u00e1 configurada\")\nend\n\n-- Deletar chave\nstate.delete(\"chave_antiga\")\n</code></pre>"},{"location":"pt/modules/state/#ttl-time-to-live","title":"TTL (Time To Live)","text":"<pre><code>-- Definir com TTL (60 segundos)\nstate.set(\"token_sessao\", \"abc123\", 60)\n\n-- Definir TTL para chave existente\nstate.set_ttl(\"sessao_usuario\", 300) -- 5 minutos\n\n-- Verificar TTL restante\nlocal ttl = state.get_ttl(\"token_sessao\")\nlog.info(\"Token expira em \" .. ttl .. \" segundos\")\n</code></pre>"},{"location":"pt/modules/state/#operacoes-atomicas","title":"Opera\u00e7\u00f5es At\u00f4micas","text":"<pre><code>-- Incremento at\u00f4mico\nlocal contador = state.increment(\"visualizacoes_pagina\", 1)\nlocal contador_bulk = state.increment(\"downloads\", 50)\n\n-- Decremento at\u00f4mico  \nlocal restante = state.decrement(\"estoque\", 5)\n\n-- Append de string\nstate.set(\"mensagens_log\", \"Iniciando aplica\u00e7\u00e3o\")\nlocal novo_tamanho = state.append(\"mensagens_log\", \" -&gt; Conectando ao banco\")\n\n-- Compare-and-swap at\u00f4mico\nlocal versao_antiga = state.get(\"versao_config\")\nlocal sucesso = state.compare_swap(\"versao_config\", versao_antiga, versao_antiga + 1)\nif sucesso then\n    log.info(\"Configura\u00e7\u00e3o atualizada com seguran\u00e7a\")\nend\n</code></pre>"},{"location":"pt/modules/state/#operacoes-de-lista","title":"Opera\u00e7\u00f5es de Lista","text":"<pre><code>-- Adicionar itens \u00e0 lista\nstate.list_push(\"fila_deployment\", {\n    app = \"frontend\",\n    versao = \"v2.1.0\",\n    ambiente = \"staging\"\n})\n\n-- Verificar tamanho da lista\nlocal tamanho_fila = state.list_length(\"fila_deployment\")\nlog.info(\"Itens na fila: \" .. tamanho_fila)\n\n-- Processar lista (pop remove \u00faltimo item)\nwhile state.list_length(\"fila_deployment\") &gt; 0 do\n    local deployment = state.list_pop(\"fila_deployment\")\n    log.info(\"Processando deployment: \" .. deployment.app)\n    -- Processar deployment...\nend\n</code></pre>"},{"location":"pt/modules/state/#locks-distribuidos-e-secoes-criticas","title":"Locks Distribu\u00eddos e Se\u00e7\u00f5es Cr\u00edticas","text":"<pre><code>-- Tentar adquirir lock (sem esperar)\nlocal lock_adquirido = state.try_lock(\"lock_deployment\", 30) -- 30 segundos TTL\nif lock_adquirido then\n    -- Trabalho cr\u00edtico\n    state.unlock(\"lock_deployment\")\nend\n\n-- Lock com espera e timeout\nlocal adquirido = state.lock(\"migracao_banco\", 60) -- esperar at\u00e9 60s\nif adquirido then\n    -- Executar migra\u00e7\u00e3o\n    state.unlock(\"migracao_banco\")\nend\n\n-- Se\u00e7\u00e3o cr\u00edtica com gerenciamento autom\u00e1tico de lock\nstate.with_lock(\"secao_critica\", function()\n    log.info(\"Executando opera\u00e7\u00e3o cr\u00edtica...\")\n\n    -- Atualizar contador global\n    local contador = state.increment(\"contador_global\", 1)\n\n    -- Atualizar timestamp\n    state.set(\"ultima_operacao\", os.time())\n\n    log.info(\"Opera\u00e7\u00e3o cr\u00edtica conclu\u00edda - contador: \" .. contador)\n\n    -- Lock \u00e9 liberado automaticamente quando a fun\u00e7\u00e3o retorna\n    return \"operacao_sucesso\"\nend, 15) -- timeout de 15 segundos\n</code></pre>"},{"location":"pt/modules/state/#referencia-da-api","title":"\ud83d\udd0d Refer\u00eancia da API","text":""},{"location":"pt/modules/state/#operacoes-basicas","title":"Opera\u00e7\u00f5es B\u00e1sicas","text":"Fun\u00e7\u00e3o Par\u00e2metros Retorno Descri\u00e7\u00e3o <code>state.set(chave, valor, ttl?)</code> chave: string, valor: any, ttl?: number sucesso: boolean Define um valor com TTL opcional <code>state.get(chave, padrao?)</code> chave: string, padrao?: any valor: any Obt\u00e9m um valor ou retorna o padr\u00e3o <code>state.delete(chave)</code> chave: string sucesso: boolean Remove uma chave <code>state.exists(chave)</code> chave: string existe: boolean Verifica se a chave existe <code>state.clear(padrao?)</code> padrao?: string sucesso: boolean Remove chaves por padr\u00e3o"},{"location":"pt/modules/state/#operacoes-ttl","title":"Opera\u00e7\u00f5es TTL","text":"Fun\u00e7\u00e3o Par\u00e2metros Retorno Descri\u00e7\u00e3o <code>state.set_ttl(chave, segundos)</code> chave: string, segundos: number sucesso: boolean Define TTL para chave existente <code>state.get_ttl(chave)</code> chave: string ttl: number Obt\u00e9m TTL restante (-1 = sem TTL, -2 = n\u00e3o existe)"},{"location":"pt/modules/state/#operacoes-atomicas_1","title":"Opera\u00e7\u00f5es At\u00f4micas","text":"Fun\u00e7\u00e3o Par\u00e2metros Retorno Descri\u00e7\u00e3o <code>state.increment(chave, delta?)</code> chave: string, delta?: number novo_valor: number Incrementa valor atomicamente <code>state.decrement(chave, delta?)</code> chave: string, delta?: number novo_valor: number Decrementa valor atomicamente <code>state.append(chave, valor)</code> chave: string, valor: string novo_tamanho: number Anexa string atomicamente <code>state.compare_swap(chave, antigo, novo)</code> chave: string, antigo: any, novo: any sucesso: boolean Compare-and-swap at\u00f4mico"},{"location":"pt/modules/state/#operacoes-de-lista_1","title":"Opera\u00e7\u00f5es de Lista","text":"Fun\u00e7\u00e3o Par\u00e2metros Retorno Descri\u00e7\u00e3o <code>state.list_push(chave, item)</code> chave: string, item: any tamanho: number Adiciona item ao final da lista <code>state.list_pop(chave)</code> chave: string item: any | nil Remove e retorna \u00faltimo item <code>state.list_length(chave)</code> chave: string tamanho: number Obt\u00e9m tamanho da lista"},{"location":"pt/modules/state/#locks-distribuidos","title":"Locks Distribu\u00eddos","text":"Fun\u00e7\u00e3o Par\u00e2metros Retorno Descri\u00e7\u00e3o <code>state.try_lock(nome, ttl)</code> nome: string, ttl: number sucesso: boolean Tenta adquirir lock sem esperar <code>state.lock(nome, timeout?)</code> nome: string, timeout?: number sucesso: boolean Adquire lock com timeout <code>state.unlock(nome)</code> nome: string sucesso: boolean Libera lock <code>state.with_lock(nome, funcao, timeout?)</code> nome: string, funcao: function, timeout?: number resultado: any Executa fun\u00e7\u00e3o com lock autom\u00e1tico"},{"location":"pt/modules/state/#utilitarios","title":"Utilit\u00e1rios","text":"Fun\u00e7\u00e3o Par\u00e2metros Retorno Descri\u00e7\u00e3o <code>state.keys(padrao?)</code> padrao?: string chaves: table Lista chaves por padr\u00e3o <code>state.stats()</code> - stats: table Obt\u00e9m estat\u00edsticas do sistema"},{"location":"pt/modules/state/#casos-de-uso-praticos","title":"\ud83d\udca1 Casos de Uso Pr\u00e1ticos","text":""},{"location":"pt/modules/state/#1-controle-de-versao-de-deploy","title":"1. Controle de Vers\u00e3o de Deploy","text":"<pre><code>Modern DSLs = {\n    pipeline_deployment = {\n        tasks = {\n            preparar_deploy = {\n                command = function()\n                    -- Verificar \u00faltima vers\u00e3o deployada\n                    local ultima_versao = state.get(\"ultima_versao_deployada\", \"v0.0.0\")\n                    local nova_versao = \"v1.2.3\"\n\n                    -- Verificar se j\u00e1 foi deployada\n                    if ultima_versao == nova_versao then\n                        log.warn(\"Vers\u00e3o \" .. nova_versao .. \" j\u00e1 foi deployada\")\n                        return false, \"Vers\u00e3o j\u00e1 deployada\"\n                    end\n\n                    -- Registrar in\u00edcio do deploy\n                    state.set(\"status_deploy\", \"em_progresso\")\n                    state.set(\"inicio_deploy\", os.time())\n                    state.increment(\"total_deploys\", 1)\n\n                    return true, \"Prepara\u00e7\u00e3o do deploy conclu\u00edda\"\n                end\n            },\n\n            executar_deploy = {\n                depends_on = \"preparar_deploy\",\n                command = function()\n                    -- Se\u00e7\u00e3o cr\u00edtica para deployment\n                    return state.with_lock(\"lock_deployment\", function()\n                        log.info(\"Executando deployment com lock...\")\n\n                        -- Simular deployment\n                        exec.run(\"sleep 5\")\n\n                        -- Atualizar estado\n                        state.set(\"ultima_versao_deployada\", \"v1.2.3\")\n                        state.set(\"status_deploy\", \"concluido\")\n                        state.set(\"fim_deploy\", os.time())\n\n                        -- Registrar hist\u00f3rico\n                        state.list_push(\"historico_deploy\", {\n                            versao = \"v1.2.3\",\n                            timestamp = os.time(),\n                            duracao = state.get(\"fim_deploy\") - state.get(\"inicio_deploy\")\n                        })\n\n                        return true, \"Deploy conclu\u00eddo com sucesso\"\n                    end, 300) -- timeout de 5 minutos\n                end\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"pt/modules/state/#2-cache-inteligente-com-ttl","title":"2. Cache Inteligente com TTL","text":"<pre><code>-- Fun\u00e7\u00e3o helper para cache\nfunction obter_dados_cached(chave_cache, funcao_busca, ttl)\n    local cached = state.get(chave_cache)\n    if cached then\n        log.info(\"Cache hit: \" .. chave_cache)\n        return cached\n    end\n\n    log.info(\"Cache miss: \" .. chave_cache .. \" - buscando...\")\n    local dados = funcao_busca()\n    state.set(chave_cache, dados, ttl or 300) -- 5 minutos padr\u00e3o\n    return dados\nend\n\n-- Uso em tasks\nModern DSLs = {\n    processamento_dados = {\n        tasks = {\n            buscar_dados_usuario = {\n                command = function()\n                    local dados_usuario = obter_dados_cached(\"usuario:123:perfil\", function()\n                        -- Simular busca custosa\n                        return {\n                            nome = \"Alice\",\n                            email = \"alice@exemplo.com\",\n                            preferencias = {\"modo_escuro\", \"notificacoes\"}\n                        }\n                    end, 600) -- Cache por 10 minutos\n\n                    log.info(\"Dados do usu\u00e1rio: \" .. data.to_json(dados_usuario))\n                    return true, \"Dados do usu\u00e1rio obtidos\"\n                end\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"pt/modules/state/#3-rate-limiting","title":"3. Rate Limiting","text":"<pre><code>function verificar_rate_limit(identificador, max_requisicoes, janela_segundos)\n    local chave = \"rate_limit:\" .. identificador\n    local contador_atual = state.get(chave, 0)\n\n    if contador_atual &gt;= max_requisicoes then\n        return false, \"Rate limit excedido\"\n    end\n\n    -- Incrementar contador\n    if contador_atual == 0 then\n        -- Primeira requisi\u00e7\u00e3o na janela\n        state.set(chave, 1, janela_segundos)\n    else\n        -- Incrementar contador existente\n        state.increment(chave, 1)\n    end\n\n    return true, \"Requisi\u00e7\u00e3o permitida\"\nend\n\n-- Uso em tasks\nModern DSLs = {\n    tarefas_api = {\n        tasks = {\n            fazer_chamada_api = {\n                command = function()\n                    local permitido, msg = verificar_rate_limit(\"chamadas_api\", 100, 3600) -- 100 chamadas/hora\n\n                    if not permitido then\n                        log.error(msg)\n                        return false, msg\n                    end\n\n                    -- Fazer chamada da API\n                    log.info(\"Fazendo chamada da API...\")\n                    return true, \"Chamada da API conclu\u00edda\"\n                end\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"pt/modules/state/#configuracao-e-armazenamento","title":"\u2699\ufe0f Configura\u00e7\u00e3o e Armazenamento","text":""},{"location":"pt/modules/state/#localizacao-do-banco-de-dados","title":"Localiza\u00e7\u00e3o do Banco de Dados","text":"<p>Por padr\u00e3o, o banco de dados SQLite \u00e9 criado em: - Linux/macOS: <code>~/.sloth-runner/state.db</code> - Windows: <code>%USERPROFILE%\\.sloth-runner\\state.db</code></p>"},{"location":"pt/modules/state/#caracteristicas-tecnicas","title":"Caracter\u00edsticas T\u00e9cnicas","text":"<ul> <li>Engine: SQLite 3 com modo WAL</li> <li>Acesso Concorrente: Suporte a m\u00faltiplas conex\u00f5es simult\u00e2neas</li> <li>Limpeza Autom\u00e1tica: Limpeza autom\u00e1tica de dados expirados a cada 5 minutos</li> <li>Timeout de Lock: Locks expirados s\u00e3o limpos automaticamente</li> <li>Serializa\u00e7\u00e3o: JSON para objetos complexos, formato nativo para tipos simples</li> </ul>"},{"location":"pt/modules/state/#limitacoes","title":"Limita\u00e7\u00f5es","text":"<ul> <li>Escopo Local: Estado \u00e9 persistido apenas na m\u00e1quina local</li> <li>Concorr\u00eancia: Locks s\u00e3o efetivos apenas no processo local</li> <li>Tamanho: Adequado para datasets pequenos a m\u00e9dios (&lt; 1GB)</li> </ul>"},{"location":"pt/modules/state/#melhores-praticas","title":"\ud83d\udd04 Melhores Pr\u00e1ticas","text":"<ol> <li>Use TTL para dados tempor\u00e1rios para evitar crescimento desnecess\u00e1rio</li> <li>Use locks para se\u00e7\u00f5es cr\u00edticas para evitar condi\u00e7\u00f5es de corrida</li> <li>Use padr\u00f5es para opera\u00e7\u00f5es em lote para gerenciar chaves relacionadas</li> <li>Monitore o tamanho do armazenamento usando <code>state.stats()</code></li> <li>Use opera\u00e7\u00f5es at\u00f4micas em vez de padr\u00f5es read-modify-write</li> <li>Limpe chaves expiradas regularmente com <code>state.clear(padrao)</code></li> </ol> <p>O m\u00f3dulo Gerenciamento de Estado transforma o sloth-runner em uma plataforma stateful e confi\u00e1vel para orquestra\u00e7\u00e3o complexa de tarefas! \ud83d\ude80</p>"},{"location":"pt/modules/systemd/","title":"\u2699\ufe0f M\u00f3dulo Systemd","text":"<p>O m\u00f3dulo <code>systemd</code> fornece funcionalidades abrangentes de gerenciamento de servi\u00e7os systemd para sistemas Linux. Permite criar, gerenciar e monitorar servi\u00e7os systemd programaticamente.</p>"},{"location":"pt/modules/systemd/#visao-geral","title":"\ud83c\udfaf Vis\u00e3o Geral","text":"<p>O m\u00f3dulo systemd permite: - Criar e configurar arquivos de servi\u00e7o systemd - Iniciar, parar, reiniciar e recarregar servi\u00e7os - Habilitar e desabilitar servi\u00e7os - Verificar status e atividade de servi\u00e7os - Listar todos os servi\u00e7os - Gerenciar configura\u00e7\u00e3o do daemon systemd</p>"},{"location":"pt/modules/systemd/#visao-geral-das-funcoes","title":"\ud83d\udcda Vis\u00e3o Geral das Fun\u00e7\u00f5es","text":"Fun\u00e7\u00e3o Descri\u00e7\u00e3o <code>systemd.create_service(nome, config)</code> Criar novo servi\u00e7o systemd <code>systemd.start(servico)</code> Iniciar um servi\u00e7o <code>systemd.stop(servico)</code> Parar um servi\u00e7o <code>systemd.restart(servico)</code> Reiniciar um servi\u00e7o <code>systemd.reload(servico)</code> Recarregar um servi\u00e7o <code>systemd.enable(servico)</code> Habilitar no boot <code>systemd.disable(servico)</code> Desabilitar do boot <code>systemd.status(servico)</code> Obter status do servi\u00e7o <code>systemd.is_active(servico)</code> Verificar se est\u00e1 ativo <code>systemd.is_enabled(servico)</code> Verificar se est\u00e1 habilitado <code>systemd.daemon_reload()</code> Recarregar daemon <code>systemd.remove_service(servico)</code> Remover um servi\u00e7o <code>systemd.list_services(opts)</code> Listar todos os servi\u00e7os <code>systemd.show(servico)</code> Mostrar info detalhada"},{"location":"pt/modules/systemd/#documentacao-detalhada","title":"\ud83d\udcd6 Documenta\u00e7\u00e3o Detalhada","text":""},{"location":"pt/modules/systemd/#criacao-de-servicos","title":"Cria\u00e7\u00e3o de Servi\u00e7os","text":""},{"location":"pt/modules/systemd/#systemdcreate_servicenome-config","title":"<code>systemd.create_service(nome, config)</code>","text":"<p>Cria um novo arquivo de servi\u00e7o systemd em <code>/etc/systemd/system/{nome}.service</code>.</p> <p>Par\u00e2metros: - <code>nome</code> (string): Nome do servi\u00e7o (sem extens\u00e3o .service) - <code>config</code> (table): Configura\u00e7\u00e3o do servi\u00e7o</p> <p>Op\u00e7\u00f5es de Configura\u00e7\u00e3o:</p> <pre><code>{\n    -- Se\u00e7\u00e3o [Unit]\n    description = \"Descri\u00e7\u00e3o do servi\u00e7o\",\n    after = \"network.target\",\n    wants = \"outro.service\",\n    requires = \"necessario.service\",\n\n    -- Se\u00e7\u00e3o [Service] (obrigat\u00f3rio)\n    exec_start = \"/caminho/para/executavel\",\n    exec_stop = \"/caminho/para/script/parada\",\n    exec_reload = \"/caminho/para/script/recarga\",\n    type = \"simple\",  -- simple, forking, oneshot, dbus, notify, idle\n    user = \"usuario\",\n    group = \"grupo\",\n    working_directory = \"/caminho/para/diretorio\",\n    restart = \"always\",  -- no, on-success, on-failure, on-abnormal, on-abort, always\n    restart_sec = \"5s\",\n    environment = {\n        VAR1 = \"valor1\",\n        VAR2 = \"valor2\"\n    },\n\n    -- Se\u00e7\u00e3o [Install]\n    wanted_by = \"multi-user.target\"\n}\n</code></pre> <p>Retorna: - <code>sucesso</code> (boolean): <code>true</code> se o servi\u00e7o foi criado - <code>mensagem</code> (string): Mensagem de resultado</p> <p>Exemplos:</p> DSL ModernoCom delegate_to <pre><code>local systemd = require(\"systemd\")\n\nlocal criar_servico_web = task(\"criar_servico_web\")\n    :description(\"Criar servi\u00e7o de aplica\u00e7\u00e3o web\")\n    :command(function(this, params)\n        log.info(\"Criando servi\u00e7o web...\")\n\n        local config = {\n            description = \"Servidor de Aplica\u00e7\u00e3o Web\",\n            after = \"network.target\",\n            exec_start = \"/usr/bin/node /app/server.js\",\n            type = \"simple\",\n            user = \"webapp\",\n            working_directory = \"/app\",\n            restart = \"always\",\n            restart_sec = \"10s\",\n            environment = {\n                NODE_ENV = \"production\",\n                PORT = \"3000\"\n            }\n        }\n\n        local sucesso, msg = systemd.create_service(\"webapp\", config)\n\n        if sucesso then\n            log.info(\"\u2705 Servi\u00e7o criado!\")\n            systemd.daemon_reload()\n            systemd.enable(\"webapp\")\n            systemd.start(\"webapp\")\n            return true, \"Servi\u00e7o implantado\"\n        else\n            log.error(\"\u274c Falha: \" .. msg)\n            return false, msg\n        end\n    end)\n    :timeout(\"60s\")\n    :build()\n\nworkflow.define(\"implantar_servico\")\n    :tasks({ criar_servico_web })\n</code></pre> <pre><code>local systemd = require(\"systemd\")\n\nlocal implantar_servico_remoto = task(\"implantar_servico_remoto\")\n    :description(\"Implantar servi\u00e7o no agente remoto\")\n    :command(function(this, params)\n        local config = {\n            description = \"Agente de Monitoramento Remoto\",\n            after = \"network.target\",\n            exec_start = \"/opt/monitor/agent\",\n            type = \"simple\",\n            user = \"monitor\",\n            restart = \"always\"\n        }\n\n        local sucesso, msg = systemd.create_service(\"monitor-agent\", config)\n\n        if sucesso then\n            systemd.daemon_reload()\n            systemd.enable(\"monitor-agent\")\n            systemd.start(\"monitor-agent\")\n            log.info(\"\u2705 Implantado em \" .. (this.agent or \"local\"))\n            return true, \"OK\"\n        end\n\n        return false, \"Falhou\"\n    end)\n    :delegate_to(\"servidor-producao\")\n    :timeout(\"60s\")\n    :build()\n\nworkflow.define(\"implantacao_remota\")\n    :tasks({ implantar_servico_remoto })\n</code></pre>"},{"location":"pt/modules/systemd/#controle-de-servicos","title":"Controle de Servi\u00e7os","text":""},{"location":"pt/modules/systemd/#systemdstartservico","title":"<code>systemd.start(servico)</code>","text":"<p>Inicia um servi\u00e7o systemd.</p> <p>Exemplo: <pre><code>local sucesso, saida = systemd.start(\"nginx\")\nif sucesso then\n    log.info(\"\u2705 Nginx iniciado\")\nend\n</code></pre></p>"},{"location":"pt/modules/systemd/#systemdstopservico","title":"<code>systemd.stop(servico)</code>","text":"<p>Para um servi\u00e7o systemd.</p>"},{"location":"pt/modules/systemd/#systemdrestartservico","title":"<code>systemd.restart(servico)</code>","text":"<p>Reinicia um servi\u00e7o systemd.</p>"},{"location":"pt/modules/systemd/#systemdreloadservico","title":"<code>systemd.reload(servico)</code>","text":"<p>Recarrega configura\u00e7\u00e3o sem reiniciar.</p>"},{"location":"pt/modules/systemd/#status-do-servico","title":"Status do Servi\u00e7o","text":""},{"location":"pt/modules/systemd/#systemdstatusservico","title":"<code>systemd.status(servico)</code>","text":"<p>Obt\u00e9m status detalhado de um servi\u00e7o.</p> <p>Exemplo: <pre><code>local status, err = systemd.status(\"nginx\")\nlog.info(\"Status:\\n\" .. status)\n</code></pre></p>"},{"location":"pt/modules/systemd/#systemdis_activeservico","title":"<code>systemd.is_active(servico)</code>","text":"<p>Verifica se um servi\u00e7o est\u00e1 ativo/rodando.</p> <p>Retorna: - <code>ativo</code> (boolean): <code>true</code> se ativo - <code>estado</code> (string): Estado do servi\u00e7o</p> <p>Exemplo: <pre><code>local ativo, estado = systemd.is_active(\"nginx\")\nif ativo then\n    log.info(\"\u2705 Servi\u00e7o est\u00e1 rodando\")\nelse\n    log.warn(\"\u274c Servi\u00e7o est\u00e1 \" .. estado)\nend\n</code></pre></p>"},{"location":"pt/modules/systemd/#systemdis_enabledservico","title":"<code>systemd.is_enabled(servico)</code>","text":"<p>Verifica se um servi\u00e7o est\u00e1 habilitado para iniciar no boot.</p> <p>Exemplo: <pre><code>local habilitado, estado = systemd.is_enabled(\"nginx\")\n</code></pre></p>"},{"location":"pt/modules/systemd/#gerenciamento-de-servicos","title":"Gerenciamento de Servi\u00e7os","text":""},{"location":"pt/modules/systemd/#systemdenableservico","title":"<code>systemd.enable(servico)</code>","text":"<p>Habilita um servi\u00e7o para iniciar automaticamente no boot.</p>"},{"location":"pt/modules/systemd/#systemddisableservico","title":"<code>systemd.disable(servico)</code>","text":"<p>Desabilita um servi\u00e7o do boot.</p>"},{"location":"pt/modules/systemd/#systemddaemon_reload","title":"<code>systemd.daemon_reload()</code>","text":"<p>Recarrega configura\u00e7\u00e3o do daemon. Necess\u00e1rio ap\u00f3s criar ou modificar arquivos de servi\u00e7o.</p>"},{"location":"pt/modules/systemd/#systemdremove_serviceservico","title":"<code>systemd.remove_service(servico)</code>","text":"<p>Remove completamente um servi\u00e7o (para, desabilita e deleta o arquivo).</p>"},{"location":"pt/modules/systemd/#informacoes-de-servicos","title":"Informa\u00e7\u00f5es de Servi\u00e7os","text":""},{"location":"pt/modules/systemd/#systemdlist_servicesopcoes","title":"<code>systemd.list_services(opcoes)</code>","text":"<p>Lista servi\u00e7os systemd com filtros opcionais.</p> <p>Par\u00e2metros: - <code>opcoes</code> (table, opcional): Op\u00e7\u00f5es de filtro   - <code>state</code>: Filtrar por estado (ex: \"active\", \"failed\", \"inactive\")   - <code>no_header</code>: Boolean, excluir cabe\u00e7alho</p> <p>Exemplo: <pre><code>-- Listar todos os servi\u00e7os\nlocal lista, err = systemd.list_services()\n\n-- Listar apenas ativos\nlocal ativos, err = systemd.list_services({ state = \"active\" })\n\n-- Listar falhados sem cabe\u00e7alho\nlocal falhados, err = systemd.list_services({ \n    state = \"failed\", \n    no_header = true \n})\n</code></pre></p>"},{"location":"pt/modules/systemd/#systemdshowservico","title":"<code>systemd.show(servico)</code>","text":"<p>Mostra propriedades detalhadas de um servi\u00e7o.</p>"},{"location":"pt/modules/systemd/#exemplos-completos","title":"\ud83c\udfaf Exemplos Completos","text":""},{"location":"pt/modules/systemd/#implantacao-de-aplicacao-web","title":"Implanta\u00e7\u00e3o de Aplica\u00e7\u00e3o Web","text":"<pre><code>local systemd = require(\"systemd\")\n\nlocal implantar_webapp = task(\"implantar_webapp\")\n    :description(\"Implantar e configurar aplica\u00e7\u00e3o web\")\n    :command(function(this, params)\n        log.info(\"\ud83d\ude80 Implantando aplica\u00e7\u00e3o web...\")\n\n        local config = {\n            description = \"Aplica\u00e7\u00e3o Web Node.js\",\n            after = \"network.target postgresql.service\",\n            requires = \"postgresql.service\",\n            exec_start = \"/usr/bin/node /var/www/app/server.js\",\n            type = \"simple\",\n            user = \"webapp\",\n            working_directory = \"/var/www/app\",\n            restart = \"always\",\n            environment = {\n                NODE_ENV = \"production\",\n                PORT = \"3000\"\n            }\n        }\n\n        local sucesso, msg = systemd.create_service(\"webapp\", config)\n        if not sucesso then\n            return false, \"Falha ao criar servi\u00e7o: \" .. msg\n        end\n\n        systemd.daemon_reload()\n        systemd.enable(\"webapp\")\n        systemd.start(\"webapp\")\n\n        local ativo, estado = systemd.is_active(\"webapp\")\n        if ativo then\n            log.info(\"\u2705 Servi\u00e7o rodando!\")\n            return true, \"Implanta\u00e7\u00e3o bem-sucedida\"\n        else\n            return false, \"Servi\u00e7o n\u00e3o iniciou\"\n        end\n    end)\n    :timeout(\"120s\")\n    :build()\n\nworkflow.define(\"implantar\")\n    :tasks({ implantar_webapp })\n</code></pre>"},{"location":"pt/modules/systemd/#verificacao-de-saude","title":"Verifica\u00e7\u00e3o de Sa\u00fade","text":"<pre><code>local systemd = require(\"systemd\")\n\nlocal verificacao_saude = task(\"verificacao_saude\")\n    :description(\"Verificar sa\u00fade dos servi\u00e7os cr\u00edticos\")\n    :command(function(this, params)\n        log.info(\"\ud83d\udd0d Verifica\u00e7\u00e3o de Sa\u00fade...\")\n\n        local servicos = {\"nginx\", \"postgresql\", \"redis\"}\n        local todos_saudaveis = true\n\n        for _, servico in ipairs(servicos) do\n            local ativo, estado = systemd.is_active(servico)\n\n            log.info(\"\\n\ud83d\udce6 \" .. servico .. \":\")\n            log.info(\"  Ativo: \" .. (ativo and \"\u2705 SIM\" or \"\u274c N\u00c3O\"))\n\n            if not ativo then\n                todos_saudaveis = false\n            end\n        end\n\n        if todos_saudaveis then\n            return true, \"Todos OK\"\n        else\n            return false, \"Servi\u00e7os inoperantes\"\n        end\n    end)\n    :timeout(\"60s\")\n    :build()\n\nworkflow.define(\"verificar_saude\")\n    :tasks({ verificacao_saude })\n</code></pre>"},{"location":"pt/modules/systemd/#gerenciamento-distribuido","title":"Gerenciamento Distribu\u00eddo","text":"<pre><code>local systemd = require(\"systemd\")\n\nlocal reiniciar_todos_servidores = task(\"reiniciar_nginx\")\n    :description(\"Reiniciar nginx em todos os servidores\")\n    :command(function(this, params)\n        log.info(\"\ud83d\udd04 Reiniciando nginx...\")\n\n        local sucesso, saida = systemd.restart(\"nginx\")\n\n        if sucesso then\n            local ativo, estado = systemd.is_active(\"nginx\")\n            if ativo then\n                log.info(\"\u2705 Nginx reiniciado\")\n                return true, \"OK\"\n            end\n        end\n\n        return false, \"Falha\"\n    end)\n    :delegate_to(\"servidor-web-1\")\n    :timeout(\"60s\")\n    :build()\n\nworkflow.define(\"reinicio_escalonado\")\n    :tasks({ reiniciar_todos_servidores })\n</code></pre>"},{"location":"pt/modules/systemd/#melhores-praticas","title":"\ud83d\ude80 Melhores Pr\u00e1ticas","text":"<ol> <li> <p>Sempre recarregue daemon ap\u00f3s criar/modificar: <pre><code>systemd.create_service(\"meuservico\", config)\nsystemd.daemon_reload()\n</code></pre></p> </li> <li> <p>Verifique se iniciou com sucesso: <pre><code>systemd.start(\"meuservico\")\nlocal ativo, estado = systemd.is_active(\"meuservico\")\n</code></pre></p> </li> <li> <p>Habilite servi\u00e7os para persist\u00eancia: <pre><code>systemd.enable(\"meuservico\")\n</code></pre></p> </li> <li> <p>Use tipos de servi\u00e7o apropriados:</p> </li> <li><code>simple</code>: Padr\u00e3o, processo n\u00e3o faz fork</li> <li><code>forking</code>: Processo faz fork e pai sai</li> <li> <p><code>oneshot</code>: Processo sai antes do systemd continuar</p> </li> <li> <p>Configure pol\u00edticas de rein\u00edcio: <pre><code>restart = \"always\"\nrestart_sec = \"10s\"\n</code></pre></p> </li> </ol>"},{"location":"pt/modules/systemd/#consideracoes-de-seguranca","title":"\u26a0\ufe0f Considera\u00e7\u00f5es de Seguran\u00e7a","text":"<ul> <li>Arquivos criados em <code>/etc/systemd/system/</code> (requer root/sudo)</li> <li>Sempre especifique <code>user</code> e <code>group</code></li> <li>Use <code>WorkingDirectory</code> para isolar ambiente</li> <li>Valide vari\u00e1veis de ambiente</li> <li>Use permiss\u00f5es apropriadas (0644)</li> </ul>"},{"location":"pt/modules/systemd/#suporte-de-plataforma","title":"\ud83d\udc27 Suporte de Plataforma","text":"<ul> <li>Linux: \u2705 Suporte completo</li> <li>Ubuntu/Debian: \u2705 Suportado</li> <li>CentOS/RHEL: \u2705 Suportado</li> <li>Fedora: \u2705 Suportado</li> <li>Arch Linux: \u2705 Suportado</li> <li>macOS: \u274c N\u00e3o suportado</li> <li>Windows: \u274c N\u00e3o suportado</li> </ul>"},{"location":"pt/modules/systemd/#veja-tambem","title":"\ud83d\udd17 Veja Tamb\u00e9m","text":"<ul> <li>M\u00f3dulo exec</li> <li>Guia DSL Moderno</li> <li>Agentes Distribu\u00eddos</li> </ul>"},{"location":"pt/modules/terraform/","title":"M\u00f3dulo Terraform","text":"<p>O m\u00f3dulo <code>terraform</code> fornece uma interface de alto n\u00edvel para orquestrar comandos da CLI <code>terraform</code>, permitindo que voc\u00ea gerencie o ciclo de vida de sua infraestrutura diretamente de dentro de uma pipeline do Sloth-Runner.</p>"},{"location":"pt/modules/terraform/#configuracao","title":"Configura\u00e7\u00e3o","text":"<p>Este m\u00f3dulo requer que a CLI <code>terraform</code> esteja instalada e dispon\u00edvel no PATH do sistema. Todos os comandos devem ser executados dentro de um <code>workdir</code> espec\u00edfico onde seus arquivos <code>.tf</code> est\u00e3o localizados.</p>"},{"location":"pt/modules/terraform/#funcoes","title":"Fun\u00e7\u00f5es","text":""},{"location":"pt/modules/terraform/#terraforminitparams","title":"<code>terraform.init(params)</code>","text":"<p>Inicializa um diret\u00f3rio de trabalho do Terraform.</p> <ul> <li><code>params</code> (tabela):<ul> <li><code>workdir</code> (string): Obrigat\u00f3rio. O caminho para o diret\u00f3rio que cont\u00e9m os arquivos do Terraform.</li> </ul> </li> <li>Retorna: Uma tabela de resultados com <code>success</code>, <code>stdout</code>, <code>stderr</code> e <code>exit_code</code>.</li> </ul>"},{"location":"pt/modules/terraform/#terraformplanparams","title":"<code>terraform.plan(params)</code>","text":"<p>Cria um plano de execu\u00e7\u00e3o do Terraform.</p> <ul> <li><code>params</code> (tabela):<ul> <li><code>workdir</code> (string): Obrigat\u00f3rio. O caminho para o diret\u00f3rio.</li> <li><code>out</code> (string): Opcional. O nome do arquivo para salvar o plano gerado.</li> </ul> </li> <li>Retorna: Uma tabela de resultados.</li> </ul>"},{"location":"pt/modules/terraform/#terraformapplyparams","title":"<code>terraform.apply(params)</code>","text":"<p>Aplica um plano do Terraform.</p> <ul> <li><code>params</code> (tabela):<ul> <li><code>workdir</code> (string): Obrigat\u00f3rio. O caminho para o diret\u00f3rio.</li> <li><code>plan</code> (string): Opcional. O caminho para um arquivo de plano a ser aplicado.</li> <li><code>auto_approve</code> (boolean): Opcional. Se <code>true</code>, aplica as altera\u00e7\u00f5es sem aprova\u00e7\u00e3o interativa.</li> </ul> </li> <li>Retorna: Uma tabela de resultados.</li> </ul>"},{"location":"pt/modules/terraform/#terraformdestroyparams","title":"<code>terraform.destroy(params)</code>","text":"<p>Destr\u00f3i a infraestrutura gerenciada pelo Terraform.</p> <ul> <li><code>params</code> (tabela):<ul> <li><code>workdir</code> (string): Obrigat\u00f3rio. O caminho para o diret\u00f3rio.</li> <li><code>auto_approve</code> (boolean): Opcional. Se <code>true</code>, destr\u00f3i os recursos sem aprova\u00e7\u00e3o interativa.</li> </ul> </li> <li>Retorna: Uma tabela de resultados.</li> </ul>"},{"location":"pt/modules/terraform/#terraformoutputparams","title":"<code>terraform.output(params)</code>","text":"<p>L\u00ea uma vari\u00e1vel de sa\u00edda de um arquivo de estado do Terraform.</p> <ul> <li><code>params</code> (tabela):<ul> <li><code>workdir</code> (string): Obrigat\u00f3rio. O caminho para o diret\u00f3rio.</li> <li><code>name</code> (string): Opcional. O nome de uma sa\u00edda espec\u00edfica para ler. Se omitido, todas as sa\u00eddas s\u00e3o retornadas como uma tabela.</li> </ul> </li> <li>Retorna:<ul> <li>Em caso de sucesso: O valor JSON analisado da sa\u00edda (pode ser uma string, tabela, etc.).</li> <li>Em caso de falha: <code>nil, error_message</code>.</li> </ul> </li> </ul>"},{"location":"pt/modules/terraform/#exemplo-de-ciclo-de-vida-completo","title":"Exemplo de Ciclo de Vida Completo","text":"<pre><code>local tf_workdir = \"./examples/terraform\"\n\n-- Tarefa 1: Init\nlocal result_init = terraform.init({workdir = tf_workdir})\nif not result_init.success then return false, \"Init falhou\" end\n\n-- Tarefa 2: Plan\nlocal result_plan = terraform.plan({workdir = tf_workdir})\nif not result_plan.success then return false, \"Plan falhou\" end\n\n-- Tarefa 3: Apply\nlocal result_apply = terraform.apply({workdir = tf_workdir, auto_approve = true})\nif not result_apply.success then return false, \"Apply falhou\" end\n\n-- Tarefa 4: Get Output\nlocal filename, err = terraform.output({workdir = tf_workdir, name = \"report_filename\"})\nif not filename then return false, \"Output falhou: \" .. err end\nlog.info(\"Arquivo criado pelo Terraform: \" .. filename)\n\n-- Tarefa 5: Destroy\nlocal result_destroy = terraform.destroy({workdir = tf_workdir, auto_approve = true})\nif not result_destroy.success then return false, \"Destroy falhou\" end\n</code></pre>"},{"location":"pt/telemetria/","title":"\ud83d\udcca Telemetria e Observabilidade","text":""},{"location":"pt/telemetria/#visao-geral","title":"Vis\u00e3o Geral","text":"<p>O Sloth Runner fornece recursos abrangentes de telemetria e observabilidade atrav\u00e9s de integra\u00e7\u00e3o nativa com Prometheus e um dashboard estilo Grafana diretamente no terminal. Monitore sua frota de agentes, rastreie m\u00e9tricas de execu\u00e7\u00e3o de tarefas, analise performance e obtenha insights profundos sobre sua automa\u00e7\u00e3o de infraestrutura.</p> <p>Observabilidade Enterprise</p> <p>Servidor de m\u00e9tricas Prometheus embutido com auto-descoberta, dashboards em tempo real e configura\u00e7\u00e3o zero.</p>"},{"location":"pt/telemetria/#recursos-principais","title":"Recursos Principais","text":""},{"location":"pt/telemetria/#integracao-prometheus","title":"\ud83c\udfaf Integra\u00e7\u00e3o Prometheus","text":"<ul> <li>Exportador Nativo: Servidor HTTP embutido expondo m\u00e9tricas compat\u00edveis com Prometheus</li> <li>Auto-Descoberta: Endpoint de m\u00e9tricas automaticamente configurado no startup do agente</li> <li>Formato Padr\u00e3o: Compat\u00edvel com Prometheus, Grafana e todas as ferramentas de observabilidade</li> <li>Configura\u00e7\u00e3o Zero: Telemetria habilitada por padr\u00e3o com valores sensatos</li> </ul>"},{"location":"pt/telemetria/#dashboard-no-terminal","title":"\ud83d\udcca Dashboard no Terminal","text":"<ul> <li>Visualiza\u00e7\u00e3o Rica: Dashboard bonito no terminal com tabelas, gr\u00e1ficos e barras de progresso</li> <li>Atualiza\u00e7\u00f5es em Tempo Real: Modo watch com intervalos de refresh configur\u00e1veis</li> <li>M\u00e9tricas Abrangentes: Recursos do sistema, performance de tarefas, estat\u00edsticas gRPC e rastreamento de erros</li> <li>Insights Coloridos: Indicadores visuais para performance e status de sa\u00fade</li> </ul>"},{"location":"pt/telemetria/#categorias-de-metricas","title":"\ud83d\udcc8 Categorias de M\u00e9tricas","text":""},{"location":"pt/telemetria/#metricas-de-tarefas","title":"M\u00e9tricas de Tarefas","text":"<ul> <li>Total de tarefas executadas (por status: success, failed, skipped)</li> <li>Tarefas executando atualmente</li> <li>Histogramas de dura\u00e7\u00e3o de tarefas (lat\u00eancias P50, P99)</li> <li>Rastreamento de performance por tarefa e por grupo</li> </ul>"},{"location":"pt/telemetria/#metricas-do-sistema","title":"M\u00e9tricas do Sistema","text":"<ul> <li>Uptime do agente</li> <li>Aloca\u00e7\u00e3o de mem\u00f3ria</li> <li>Contador de goroutines</li> <li>Vers\u00e3o do agente e informa\u00e7\u00f5es de build</li> </ul>"},{"location":"pt/telemetria/#metricas-grpc","title":"M\u00e9tricas gRPC","text":"<ul> <li>Contagem de requisi\u00e7\u00f5es por m\u00e9todo</li> <li>Histogramas de dura\u00e7\u00e3o de requisi\u00e7\u00f5es</li> <li>Taxas de sucesso/erro</li> </ul>"},{"location":"pt/telemetria/#rastreamento-de-erros","title":"Rastreamento de Erros","text":"<ul> <li>Contagem de erros por tipo</li> <li>Rastreamento de tarefas falhadas</li> <li>Monitoramento de erros do sistema</li> </ul>"},{"location":"pt/telemetria/#inicio-rapido","title":"In\u00edcio R\u00e1pido","text":""},{"location":"pt/telemetria/#habilitar-telemetria-no-agente","title":"Habilitar Telemetria no Agente","text":"<p>Telemetria est\u00e1 habilitada por padr\u00e3o. Simplesmente inicie seu agente:</p> <pre><code>./sloth-runner agent start --name meu-agente --master localhost:50053\n</code></pre> <p>Para configurar explicitamente a telemetria:</p> <pre><code># Habilitar telemetria com porta customizada\n./sloth-runner agent start \\\n  --name meu-agente \\\n  --master localhost:50053 \\\n  --telemetry \\\n  --metrics-port 9090\n</code></pre> <p>Para desabilitar telemetria:</p> <pre><code>./sloth-runner agent start \\\n  --name meu-agente \\\n  --master localhost:50053 \\\n  --telemetry=false\n</code></pre>"},{"location":"pt/telemetria/#acessar-metricas","title":"Acessar M\u00e9tricas","text":""},{"location":"pt/telemetria/#obter-endpoint-prometheus","title":"Obter Endpoint Prometheus","text":"<pre><code>./sloth-runner agent metrics prom meu-agente\n</code></pre> <p>Sa\u00edda: <pre><code>\u2705 Metrics Endpoint:\n  URL: http://192.168.1.100:9090/metrics\n\n\ud83d\udcdd Usage:\n  # Visualizar m\u00e9tricas no navegador:\n  open http://192.168.1.100:9090/metrics\n\n  # Buscar m\u00e9tricas via curl:\n  curl http://192.168.1.100:9090/metrics\n</code></pre></p>"},{"location":"pt/telemetria/#visualizar-snapshot","title":"Visualizar Snapshot","text":"<pre><code>./sloth-runner agent metrics prom meu-agente --snapshot\n</code></pre>"},{"location":"pt/telemetria/#visualizar-dashboard","title":"Visualizar Dashboard","text":""},{"location":"pt/telemetria/#visualizacao-unica","title":"Visualiza\u00e7\u00e3o \u00danica","text":"<pre><code>./sloth-runner agent metrics grafana meu-agente\n</code></pre>"},{"location":"pt/telemetria/#modo-watch-auto-refresh","title":"Modo Watch (Auto-Refresh)","text":"<pre><code># Refresh a cada 5 segundos (padr\u00e3o)\n./sloth-runner agent metrics grafana meu-agente --watch\n\n# Intervalo de refresh customizado (2 segundos)\n./sloth-runner agent metrics grafana meu-agente --watch --interval 2\n</code></pre>"},{"location":"pt/telemetria/#casos-de-uso","title":"Casos de Uso","text":""},{"location":"pt/telemetria/#desenvolvimento","title":"Desenvolvimento","text":"<p>Monitore suas tarefas durante o desenvolvimento:</p> <pre><code># Terminal 1: Watch dashboard\n./sloth-runner agent metrics grafana dev-agent --watch --interval 1\n\n# Terminal 2: Executar tarefas\n./sloth-runner run -f deploy.sloth --values dev.yaml\n</code></pre>"},{"location":"pt/telemetria/#monitoramento-em-producao","title":"Monitoramento em Produ\u00e7\u00e3o","text":"<p>Integre com Prometheus e Grafana:</p> <pre><code># prometheus.yml\nglobal:\n  scrape_interval: 15s\n\nscrape_configs:\n  - job_name: 'sloth-runner-producao'\n    static_configs:\n      - targets:\n          - 'agent1:9090'\n          - 'agent2:9090'\n          - 'agent3:9090'\n        labels:\n          environment: production\n</code></pre>"},{"location":"pt/telemetria/#analise-de-performance","title":"An\u00e1lise de Performance","text":"<p>Identifique tarefas lentas e gargalos:</p> <pre><code># Visualizar m\u00e9tricas detalhadas de performance\n./sloth-runner agent metrics grafana prod-agent\n\n# Verificar lat\u00eancias P99 na se\u00e7\u00e3o Task Performance\n# Tarefas com indicador \ud83d\udd34 Slow precisam de otimiza\u00e7\u00e3o\n</code></pre>"},{"location":"pt/telemetria/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Refer\u00eancia de M\u00e9tricas Prometheus - Documenta\u00e7\u00e3o completa de m\u00e9tricas</li> <li>Guia do Dashboard Grafana - Funcionalidades e uso do dashboard</li> <li>Guia de Deployment - Deploy em produ\u00e7\u00e3o e integra\u00e7\u00e3o</li> </ul>"},{"location":"pt/telemetria/#plataformas-suportadas","title":"Plataformas Suportadas","text":"<ul> <li>\u2705 Linux (amd64, arm64)</li> <li>\u2705 macOS (Intel, Apple Silicon)</li> <li>\u2705 Windows (via WSL2)</li> <li>\u2705 Containers (Docker, Incus/LXC)</li> <li>\u2705 Kubernetes (via DaemonSet)</li> </ul>"},{"location":"pt/telemetria/#impacto-na-performance","title":"Impacto na Performance","text":"<p>A telemetria tem overhead m\u00ednimo de performance:</p> <ul> <li>Mem\u00f3ria: ~10-20MB adicional</li> <li>CPU: &lt;1% sob carga normal</li> <li>Rede: M\u00e9tricas servidas apenas sob demanda (modelo pull)</li> <li>Armazenamento: M\u00e9tricas armazenadas em mem\u00f3ria, sem persist\u00eancia</li> </ul>"},{"location":"pt/telemetria/#consideracoes-de-seguranca","title":"Considera\u00e7\u00f5es de Seguran\u00e7a","text":"<p>Exposi\u00e7\u00e3o de Rede</p> <p>O endpoint de m\u00e9tricas \u00e9 exposto em todas as interfaces de rede por padr\u00e3o. Em produ\u00e7\u00e3o:</p> <ul> <li>Use regras de firewall para restringir acesso</li> <li>Considere bind apenas em localhost e use reverse proxy</li> <li>Habilite autentica\u00e7\u00e3o via reverse proxy (Prometheus n\u00e3o suporta auth nativamente)</li> </ul>"},{"location":"pt/telemetria/#proximas-leituras","title":"Pr\u00f3ximas Leituras","text":"<ul> <li>Documenta\u00e7\u00e3o Prometheus</li> <li>Documenta\u00e7\u00e3o Grafana</li> <li>Biblioteca pterm (usada para visualiza\u00e7\u00e3o no terminal)</li> </ul>"},{"location":"telemetry/system-monitoring/","title":"\ud83d\udda5\ufe0f Complete System Monitoring with Grafana Dashboard","text":""},{"location":"telemetry/system-monitoring/#overview","title":"Overview","text":"<p>The enhanced Grafana dashboard now provides comprehensive system monitoring for the entire machine, not just Sloth Runner agent metrics. This gives you a complete view of system health and performance.</p>"},{"location":"telemetry/system-monitoring/#features","title":"Features","text":""},{"location":"telemetry/system-monitoring/#system-metrics-collected","title":"\ud83d\udcca System Metrics Collected","text":""},{"location":"telemetry/system-monitoring/#cpu-monitoring","title":"CPU Monitoring","text":"<ul> <li>Overall CPU usage percentage</li> <li>Per-core utilization with visual bars</li> <li>Load averages (1, 5, 15 minutes)</li> <li>CPU model and specifications</li> <li>Number of cores and threads</li> <li>CPU speed in GHz</li> </ul>"},{"location":"telemetry/system-monitoring/#memory-monitoring","title":"Memory Monitoring","text":"<ul> <li>RAM usage (used, free, available)</li> <li>Swap usage and statistics</li> <li>Memory pressure indicators</li> <li>Visual progress bars with color coding</li> </ul>"},{"location":"telemetry/system-monitoring/#disk-monitoring","title":"Disk Monitoring","text":"<ul> <li>All mount points with usage percentages</li> <li>Filesystem types and device names</li> <li>Total, used, and free space</li> <li>Inode utilization</li> <li>Color-coded usage warnings</li> </ul>"},{"location":"telemetry/system-monitoring/#network-monitoring","title":"Network Monitoring","text":"<ul> <li>Network interfaces statistics</li> <li>Bytes sent/received</li> <li>Packets transmitted/received</li> <li>Network errors and drops</li> <li>Active connection count</li> </ul>"},{"location":"telemetry/system-monitoring/#process-monitoring","title":"Process Monitoring","text":"<ul> <li>Top 10 processes by CPU usage</li> <li>Process memory consumption</li> <li>PID, username, and status</li> <li>Zombie process detection</li> <li>Total process count</li> </ul>"},{"location":"telemetry/system-monitoring/#system-information","title":"System Information","text":"<ul> <li>Hostname and OS details</li> <li>Kernel version and architecture</li> <li>System uptime</li> <li>Boot time</li> <li>Platform information</li> </ul>"},{"location":"telemetry/system-monitoring/#usage","title":"Usage","text":""},{"location":"telemetry/system-monitoring/#basic-command","title":"Basic Command","text":"<pre><code># Monitor a running agent with complete system metrics\nsloth-runner agent metrics grafana &lt;agent-name&gt;\n\n# Example\nsloth-runner agent metrics grafana lady-arch\n</code></pre>"},{"location":"telemetry/system-monitoring/#continuous-monitoring","title":"Continuous Monitoring","text":"<p>The dashboard automatically refreshes to show real-time metrics:</p> <pre><code># Monitor with auto-refresh (press Ctrl+C to exit)\nsloth-runner agent metrics grafana lady-arch --refresh 5\n</code></pre>"},{"location":"telemetry/system-monitoring/#dashboard-layout","title":"Dashboard Layout","text":"<pre><code>\ud83d\udcca Sloth Runner Complete System Monitor - Agent: lady-arch\n\n\ud83d\udda5\ufe0f System Overview\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Hostname         \u2502 lady-arch                      \u2502\n\u2502 OS               \u2502 Ubuntu 22.04                   \u2502\n\u2502 Kernel           \u2502 5.15.0-89 (x86_64)            \u2502\n\u2502 Uptime           \u2502 15d 4h 32m                     \u2502\n\u2502 Boot Time        \u2502 2025-09-20 08:15:23           \u2502\n\u2502 Processes        \u2502 245 (Zombies: 0)              \u2502\n\u2502 Network Conn     \u2502 142                           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\ud83d\udd25 CPU Metrics\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Model            \u2502 Intel Core i7-10700K           \u2502\n\u2502 Cores            \u2502 8                              \u2502\n\u2502 Threads          \u2502 16                             \u2502\n\u2502 Speed            \u2502 3.80 GHz                       \u2502\n\u2502 Load Average     \u2502 1.23, 1.45, 1.32              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nCPU Usage: [\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591] 32.5%\n\n\u250c\u2500 CPU Cores Usage \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Core  0: \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591  42.1% | Core  1: \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591  38.5% \u2502\n\u2502 Core  2: \u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591  31.2% | Core  3: \u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591  28.7% \u2502\n\u2502 Core  4: \u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591  22.3% | Core  5: \u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591  18.9% \u2502\n\u2502 Core  6: \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591  52.4% | Core  7: \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591  44.6% \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\ud83d\udcbe Memory Metrics\nRAM Usage:  [\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591] 55.2%\nSwap Usage: [\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591] 12.3%\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Type\u2502 Total   \u2502 Used    \u2502 Free    \u2502 Available \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 RAM \u2502 32.0 GB \u2502 17.6 GB \u2502 14.4 GB \u2502 13.2 GB   \u2502\n\u2502 Swap\u2502 8.0 GB  \u2502 984 MB  \u2502 7.0 GB  \u2502 -         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\ud83d\udcbf Disk Metrics\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Mount      \u2502 Device      \u2502 Type \u2502 Size    \u2502 Used    \u2502 Free    \u2502 Use% \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 /          \u2502 /dev/sda2   \u2502 ext4 \u2502 500 GB  \u2502 245 GB  \u2502 255 GB  \u2502 49.0%\u2502\n\u2502 /home      \u2502 /dev/sda3   \u2502 ext4 \u2502 1.5 TB  \u2502 890 GB  \u2502 610 GB  \u2502 59.3%\u2502\n\u2502 /boot      \u2502 /dev/sda1   \u2502 vfat \u2502 512 MB  \u2502 128 MB  \u2502 384 MB  \u2502 25.0%\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\ud83c\udf10 Network Metrics\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Interface \u2502 Sent     \u2502 Received \u2502 Packets     \u2502 Errors \u2502 Drops \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 eth0      \u2502 15.2 GB  \u2502 48.7 GB  \u2502 25M/89M     \u2502 0/0    \u2502 0/0   \u2502\n\u2502 wlan0     \u2502 892 MB   \u2502 2.3 GB   \u2502 1.2M/3.5M   \u2502 0/0    \u2502 0/0   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\ud83d\udccb Top Processes\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 PID  \u2502 Name             \u2502 User     \u2502 CPU%  \u2502 Memory  \u2502 Status \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 2451 \u2502 chrome           \u2502 chalkan3 \u2502 12.3% \u2502 892 MB  \u2502 S      \u2502\n\u2502 1823 \u2502 vscode           \u2502 chalkan3 \u2502 8.7%  \u2502 1.2 GB  \u2502 S      \u2502\n\u2502 9821 \u2502 sloth-runner     \u2502 chalkan3 \u2502 5.2%  \u2502 45 MB   \u2502 S      \u2502\n\u2502 3421 \u2502 postgres         \u2502 postgres \u2502 3.8%  \u2502 256 MB  \u2502 S      \u2502\n\u2502 5632 \u2502 nginx            \u2502 www-data \u2502 2.1%  \u2502 32 MB   \u2502 S      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\ud83e\udda5 Sloth Runner Agent\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Version      \u2502 v4.17.2           \u2502\n\u2502 Uptime       \u2502 2h 45m            \u2502\n\u2502 Goroutines   \u2502 42                \u2502\n\u2502 Memory       \u2502 45 MB             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u250c\u2500 \ud83d\udcc8 System Summary \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \ud83d\udda5\ufe0f  CPU: 32.5% | RAM: 55.2% | Disk: 3 mounts         \u2502\n\u2502 \ud83d\udcca Processes: 245 | Network: 142 conn | Uptime: 15d   \u2502\n\u2502 \ud83e\udda5 Tasks: 1523 | Running: 2 | Agent Memory: 45 MB    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"telemetry/system-monitoring/#color-coding","title":"Color Coding","text":"<p>The dashboard uses intuitive color coding for quick status assessment:</p> <ul> <li>\ud83d\udfe2 Green: Normal (0-60%)</li> <li>\ud83d\udfe1 Yellow: Warning (60-80%)</li> <li>\ud83d\udd34 Red: Critical (80-100%)</li> </ul>"},{"location":"telemetry/system-monitoring/#performance-considerations","title":"Performance Considerations","text":""},{"location":"telemetry/system-monitoring/#resource-usage","title":"Resource Usage","text":"<p>The monitoring system is designed to be lightweight: - CPU overhead: &lt; 1% - Memory usage: ~10-20 MB - Network traffic: Minimal (local metrics only)</p>"},{"location":"telemetry/system-monitoring/#sampling-intervals","title":"Sampling Intervals","text":"<ul> <li>CPU metrics: 1 second sample</li> <li>Memory metrics: Real-time</li> <li>Disk metrics: On-demand</li> <li>Network metrics: Cumulative counters</li> <li>Process metrics: Real-time snapshot</li> </ul>"},{"location":"telemetry/system-monitoring/#remote-monitoring","title":"Remote Monitoring","text":"<p>Monitor agents on remote machines:</p> <pre><code># Monitor remote agent\nsloth-runner agent metrics grafana lady-arch\n\n# The agent's telemetry endpoint must be accessible\n# Default port: 9090\n</code></pre>"},{"location":"telemetry/system-monitoring/#troubleshooting","title":"Troubleshooting","text":""},{"location":"telemetry/system-monitoring/#common-issues","title":"Common Issues","text":"<ol> <li>Metrics not available</li> <li>Ensure agent is running with telemetry enabled</li> <li> <p>Check firewall rules for port 9090</p> </li> <li> <p>High CPU usage in monitoring</p> </li> <li>Increase refresh interval</li> <li> <p>Reduce number of processes tracked</p> </li> <li> <p>Permission errors</p> </li> <li>Some metrics require elevated permissions</li> <li>Run with appropriate privileges if needed</li> </ol>"},{"location":"telemetry/system-monitoring/#configuration","title":"Configuration","text":""},{"location":"telemetry/system-monitoring/#environment-variables","title":"Environment Variables","text":"<pre><code># Set custom metrics port\nexport SLOTH_METRICS_PORT=9091\n\n# Set refresh interval (seconds)\nexport SLOTH_METRICS_REFRESH=10\n\n# Disable color output\nexport NO_COLOR=1\n</code></pre>"},{"location":"telemetry/system-monitoring/#agent-configuration","title":"Agent Configuration","text":"<p>Ensure your agent is started with telemetry:</p> <pre><code># Start agent with telemetry\nsloth-runner agent start my-agent --metrics-port 9090\n</code></pre>"},{"location":"telemetry/system-monitoring/#api-integration","title":"API Integration","text":"<p>Access raw metrics programmatically:</p> <pre><code># Get Prometheus metrics\ncurl http://agent-host:9090/metrics\n\n# Get system info\ncurl http://agent-host:9090/info\n\n# Health check\ncurl http://agent-host:9090/health\n</code></pre>"},{"location":"telemetry/system-monitoring/#best-practices","title":"Best Practices","text":"<ol> <li>Regular Monitoring: Set up continuous monitoring for production systems</li> <li>Alert Thresholds: Configure alerts for critical metrics</li> <li>Historical Data: Store metrics for trend analysis</li> <li>Capacity Planning: Use metrics for resource planning</li> <li>Performance Baseline: Establish normal operating parameters</li> </ol>"},{"location":"telemetry/system-monitoring/#examples","title":"Examples","text":""},{"location":"telemetry/system-monitoring/#monitor-local-system","title":"Monitor Local System","text":"<pre><code># Start local agent with monitoring\nsloth-runner agent start local --metrics-port 9090\n\n# Open monitoring dashboard\nsloth-runner agent metrics grafana local\n</code></pre>"},{"location":"telemetry/system-monitoring/#monitor-container-environment","title":"Monitor Container Environment","text":"<pre><code># Monitor agent inside container\nsloth-runner agent metrics grafana container-agent\n\n# Works with Docker, Incus, LXD\n</code></pre>"},{"location":"telemetry/system-monitoring/#scripted-monitoring","title":"Scripted Monitoring","text":"<pre><code>#!/bin/bash\n# Monitor and alert on high CPU\n\nwhile true; do\n    metrics=$(sloth-runner agent metrics prom my-agent)\n    cpu_usage=$(echo \"$metrics\" | grep cpu_usage | awk '{print $2}')\n\n    if (( $(echo \"$cpu_usage &gt; 80\" | bc -l) )); then\n        echo \"ALERT: High CPU usage: $cpu_usage%\"\n        # Send notification\n    fi\n\n    sleep 60\ndone\n</code></pre>"},{"location":"telemetry/system-monitoring/#summary","title":"Summary","text":"<p>The enhanced Grafana dashboard transforms Sloth Runner into a comprehensive system monitoring solution, providing:</p> <ul> <li>Complete visibility into system resources</li> <li>Real-time metrics with visual indicators</li> <li>Process tracking for resource optimization</li> <li>Network monitoring for connectivity insights</li> <li>Disk usage tracking across all mount points</li> <li>Integration with Sloth Runner task metrics</li> </ul> <p>This makes it an ideal tool for DevOps, system administrators, and developers who need comprehensive monitoring without complex setup.</p>"},{"location":"zh/","title":"Sloth-Runner \u6587\u6863","text":"<p>\u6b22\u8fce\u6765\u5230 Sloth-Runner \u7684\u5b8c\u6574\u6587\u6863\uff0c\u8fd9\u662f\u4e00\u4e2a\u7075\u6d3b\u7684\u5de5\u5177\uff0c\u7528\u4e8e\u4f7f\u7528 Lua \u811a\u672c\u8fdb\u884c\u4efb\u52a1\u81ea\u52a8\u5316\u548c\u5de5\u4f5c\u6d41\u7f16\u6392\u3002</p> <p>\u5728\u8fd9\u91cc\uff0c\u60a8\u5c06\u627e\u5230\u8be6\u7ec6\u7684\u6307\u5357\u3001API \u53c2\u8003\u548c\u5b9e\u7528\u793a\u4f8b\uff0c\u4ee5\u5e2e\u52a9\u60a8\u5145\u5206\u5229\u7528 Sloth-Runner \u7684\u5f3a\u5927\u529f\u80fd\u3002</p>"},{"location":"zh/#_1","title":"\u76ee\u5f55","text":"<ul> <li>\u4efb\u52a1\u8c03\u5ea6\u5668</li> <li>\u5feb\u901f\u5165\u95e8</li> <li>\u6838\u5fc3\u6982\u5ff5</li> <li>\u5206\u5e03\u5f0f\u4efb\u52a1\u6267\u884c</li> <li>CLI \u547d\u4ee4</li> <li>\u4ea4\u4e92\u5f0f REPL</li> <li>\u5185\u7f6e\u6a21\u5757\uff1a<ul> <li>AWS \u6a21\u5757</li> <li>Azure \u6a21\u5757</li> <li>Data \u6a21\u5757</li> <li>DigitalOcean \u6a21\u5757</li> <li>Docker \u6a21\u5757</li> <li>Exec \u6a21\u5757</li> <li>FS \u6a21\u5757</li> <li>GCP \u6a21\u5757</li> <li>Git \u6a21\u5757</li> <li>Log \u6a21\u5757</li> <li>Net \u6a21\u5757</li> <li>\u901a\u77e5\u6a21\u5757</li> <li>Pulumi \u6a21\u5757</li> <li>Python \u6a21\u5757</li> <li>Salt \u6a21\u5757</li> <li>Terraform \u6a21\u5757</li> </ul> </li> <li>\u9ad8\u7ea7\u793a\u4f8b</li> <li>\u9ad8\u7ea7\u529f\u80fd</li> </ul> <p>English | Portugu\u00eas | \u4e2d\u6587</p>"},{"location":"zh/CLI/","title":"\ud83d\ude80 Sloth Runner CLI Reference","text":"<p>Complete command-line interface reference for Sloth Runner - the AI-powered GitOps task orchestration platform.</p>"},{"location":"zh/CLI/#overview","title":"Overview","text":"<p>Sloth Runner provides a comprehensive CLI for task execution, agent management, scheduling, and workflow orchestration.</p> <p>Main Commands:</p> <pre><code>sloth-runner [command] [flags]\n</code></pre> Command Description <code>run</code> Execute tasks from workflow files <code>agent</code> Manage distributed agents <code>master</code> Start the master coordination server <code>scheduler</code> Manage scheduled tasks <code>stack</code> Manage workflow stacks and state <code>ui</code> Start the web dashboard <code>workflow</code> Create and manage workflows <code>list</code> List tasks from workflow files <code>version</code> Show version information"},{"location":"zh/CLI/#sloth-runner-run","title":"<code>sloth-runner run</code>","text":"<p>Execute tasks defined in <code>.sloth</code> workflow files with multiple output formats and state persistence.</p>"},{"location":"zh/CLI/#usage","title":"Usage","text":"<pre><code>sloth-runner run [file.sloth|stack-name] [flags]\n</code></pre>"},{"location":"zh/CLI/#flags","title":"Flags","text":"Flag Type Description <code>-f, --file</code> string Path to the Lua/Sloth task file <code>-o, --output</code> string Output style: <code>basic</code>, <code>enhanced</code>, <code>rich</code>, <code>modern</code>, <code>json</code> (default: <code>basic</code>) <code>-v, --values</code> string Path to values file (YAML/JSON) for parameterization <code>--interactive</code> bool Run in interactive mode with prompts <code>--yes</code> bool Skip confirmation prompts"},{"location":"zh/CLI/#output-styles","title":"Output Styles","text":"<ul> <li>basic: Simple text output</li> <li>enhanced: Colored output with icons</li> <li>rich: Detailed output with progress bars</li> <li>modern: Modern UI with animations</li> <li>json: Machine-readable JSON output</li> </ul>"},{"location":"zh/CLI/#examples","title":"Examples","text":"<pre><code># Run with modern output style\nsloth-runner run -f deploy.sloth -o modern\n\n# Run with values file\nsloth-runner run -f infra.sloth -v prod-values.yaml\n\n# Run from stack\nsloth-runner run prod-stack --yes\n\n# Interactive mode\nsloth-runner run -f tasks.sloth --interactive\n\n# JSON output for CI/CD\nsloth-runner run -f ci.sloth -o json\n</code></pre>"},{"location":"zh/CLI/#sloth-runner-agent","title":"<code>sloth-runner agent</code>","text":"<p>Manage distributed agents for remote task execution.</p>"},{"location":"zh/CLI/#subcommands","title":"Subcommands","text":""},{"location":"zh/CLI/#agent-start","title":"<code>agent start</code>","text":"<p>Start an agent in agent mode to accept tasks from master server.</p> <pre><code>sloth-runner agent start [flags]\n</code></pre> <p>Flags: - <code>--master string</code>: Master server address (default: <code>localhost:50053</code>) - <code>--name string</code>: Agent name identifier - <code>--tags string</code>: Comma-separated tags for agent capabilities - <code>--daemon</code>: Run as background daemon</p> <p>Example: <pre><code># Start agent with tags\nsloth-runner agent start --master master.example.com:50053 \\\n  --name prod-agent-1 \\\n  --tags linux,docker,aws\n\n# Start as daemon\nsloth-runner agent start --daemon --name bg-agent\n</code></pre></p>"},{"location":"zh/CLI/#agent-list","title":"<code>agent list</code>","text":"<p>List all registered agents with their status.</p> <pre><code>sloth-runner agent list [flags]\n</code></pre> <p>Flags: - <code>--master string</code>: Master server address</p> <p>Example: <pre><code>sloth-runner agent list --master master.example.com:50053\n</code></pre></p>"},{"location":"zh/CLI/#agent-exec","title":"<code>agent exec</code>","text":"<p>Execute a command on a remote agent.</p> <pre><code>sloth-runner agent exec &lt;agent_name&gt; &lt;command&gt; [flags]\n</code></pre> <p>Flags: - <code>--master string</code>: Master server address (or use SLOTH_RUNNER_MASTER_ADDR env var) - <code>-o, --output string</code>: Output format: text or json (default: text)</p> <p>Example: <pre><code># Using --master flag\nsloth-runner agent exec prod-agent-1 \"docker ps\" --master master.example.com:50053\n\n# Using environment variable\nSLOTH_RUNNER_MASTER_ADDR=master.example.com:50053 sloth-runner agent exec prod-agent-1 \"docker ps\"\n</code></pre></p>"},{"location":"zh/CLI/#agent-stop","title":"<code>agent stop</code>","text":"<p>Stop a remote agent gracefully.</p> <pre><code>sloth-runner agent stop [flags]\n</code></pre> <p>Flags: - <code>--agent string</code>: Agent name to stop - <code>--master string</code>: Master server address</p>"},{"location":"zh/CLI/#agent-delete","title":"<code>agent delete</code>","text":"<p>Delete an agent from the registry.</p> <pre><code>sloth-runner agent delete [flags]\n</code></pre>"},{"location":"zh/CLI/#sloth-runner-master","title":"<code>sloth-runner master</code>","text":"<p>Start the master coordination server for managing distributed agents.</p>"},{"location":"zh/CLI/#usage_1","title":"Usage","text":"<pre><code>sloth-runner master [flags]\n</code></pre>"},{"location":"zh/CLI/#flags_1","title":"Flags","text":"Flag Type Description <code>-p, --port</code> int Port to listen on (default: <code>50053</code>) <code>--daemon</code> bool Run as background daemon <code>--debug</code> bool Enable debug logging"},{"location":"zh/CLI/#examples_1","title":"Examples","text":"<pre><code># Start master server\nsloth-runner master --port 50053\n\n# Start as daemon with debug\nsloth-runner master --daemon --debug\n\n# Custom port\nsloth-runner master --port 9000\n</code></pre>"},{"location":"zh/CLI/#sloth-runner-scheduler","title":"<code>sloth-runner scheduler</code>","text":"<p>Manage scheduled tasks for automated execution.</p>"},{"location":"zh/CLI/#subcommands_1","title":"Subcommands","text":""},{"location":"zh/CLI/#scheduler-enable","title":"<code>scheduler enable</code>","text":"<p>Enable the scheduler service.</p> <pre><code>sloth-runner scheduler enable\n</code></pre>"},{"location":"zh/CLI/#scheduler-disable","title":"<code>scheduler disable</code>","text":"<p>Disable the scheduler service.</p> <pre><code>sloth-runner scheduler disable\n</code></pre>"},{"location":"zh/CLI/#scheduler-list","title":"<code>scheduler list</code>","text":"<p>List all scheduled tasks with their configuration.</p> <pre><code>sloth-runner scheduler list [flags]\n</code></pre> <p>Output: - Task name - Schedule (cron expression) - Next run time - Status (enabled/disabled)</p> <p>Example: <pre><code>sloth-runner scheduler list\n</code></pre></p>"},{"location":"zh/CLI/#scheduler-delete","title":"<code>scheduler delete</code>","text":"<p>Delete a scheduled task.</p> <pre><code>sloth-runner scheduler delete [task-name]\n</code></pre>"},{"location":"zh/CLI/#sloth-runner-stack","title":"<code>sloth-runner stack</code>","text":"<p>Manage workflow stacks for state persistence and environment isolation.</p>"},{"location":"zh/CLI/#subcommands_2","title":"Subcommands","text":""},{"location":"zh/CLI/#stack-new","title":"<code>stack new</code>","text":"<p>Create a new workflow stack.</p> <pre><code>sloth-runner stack new [stack-name] [flags]\n</code></pre> <p>Flags: - <code>-f, --file string</code>: Workflow file to associate - <code>--description string</code>: Stack description</p> <p>Example: <pre><code>sloth-runner stack new prod-infra \\\n  -f infrastructure.sloth \\\n  --description \"Production infrastructure stack\"\n</code></pre></p>"},{"location":"zh/CLI/#stack-list","title":"<code>stack list</code>","text":"<p>List all workflow stacks.</p> <pre><code>sloth-runner stack list\n</code></pre> <p>Output: - Stack name - Workflow file - State status - Last updated</p>"},{"location":"zh/CLI/#stack-show","title":"<code>stack show</code>","text":"<p>Show detailed information about a stack.</p> <pre><code>sloth-runner stack show [stack-name]\n</code></pre> <p>Output: - Stack configuration - State variables - Execution history - Associated resources</p>"},{"location":"zh/CLI/#stack-delete","title":"<code>stack delete</code>","text":"<p>Delete a workflow stack and its state.</p> <pre><code>sloth-runner stack delete [stack-name] [flags]\n</code></pre> <p>Flags: - <code>--force</code>: Force deletion without confirmation</p>"},{"location":"zh/CLI/#sloth-runner-ui","title":"<code>sloth-runner ui</code>","text":"<p>Start the web-based dashboard for visual management.</p>"},{"location":"zh/CLI/#usage_2","title":"Usage","text":"<pre><code>sloth-runner ui [flags]\n</code></pre>"},{"location":"zh/CLI/#flags_2","title":"Flags","text":"Flag Type Description <code>-p, --port</code> int Port for UI server (default: <code>8080</code>) <code>--daemon</code> bool Run as background daemon <code>--debug</code> bool Enable debug logging"},{"location":"zh/CLI/#features","title":"Features","text":"<ul> <li>\ud83d\udcca Real-time task monitoring</li> <li>\ud83e\udd16 Agent health dashboard</li> <li>\ud83d\udcc5 Scheduler management</li> <li>\ud83d\udce6 Stack browser</li> <li>\ud83d\udcc8 Metrics and analytics</li> </ul>"},{"location":"zh/CLI/#examples_2","title":"Examples","text":"<pre><code># Start UI on default port\nsloth-runner ui\n\n# Custom port\nsloth-runner ui --port 3000\n\n# Run as daemon\nsloth-runner ui --daemon --port 8080\n</code></pre> <p>Access at: <code>http://localhost:8080</code></p>"},{"location":"zh/CLI/#sloth-runner-workflow","title":"<code>sloth-runner workflow</code>","text":"<p>Create and manage workflow projects with scaffolding.</p>"},{"location":"zh/CLI/#subcommands_3","title":"Subcommands","text":""},{"location":"zh/CLI/#workflow-init","title":"<code>workflow init</code>","text":"<p>Initialize a new workflow project with templates.</p> <pre><code>sloth-runner workflow init [project-name] [flags]\n</code></pre> <p>Flags: - <code>--template string</code>: Template to use (default: <code>basic</code>) - <code>--path string</code>: Target directory</p> <p>Available Templates: - <code>basic</code>: Simple task workflow - <code>cicd</code>: CI/CD pipeline - <code>infra</code>: Infrastructure automation - <code>gitops</code>: GitOps deployment</p> <p>Example: <pre><code># Create CI/CD project\nsloth-runner workflow init my-pipeline --template cicd\n\n# Custom path\nsloth-runner workflow init my-project --template infra --path ./projects/\n</code></pre></p>"},{"location":"zh/CLI/#workflow-list-templates","title":"<code>workflow list-templates</code>","text":"<p>List all available workflow templates.</p> <pre><code>sloth-runner workflow list-templates\n</code></pre>"},{"location":"zh/CLI/#sloth-runner-list","title":"<code>sloth-runner list</code>","text":"<p>List tasks and task groups from a workflow file without execution.</p>"},{"location":"zh/CLI/#usage_3","title":"Usage","text":"<pre><code>sloth-runner list [flags]\nsloth-runner list [flags]\n</code></pre> <p>Flags:</p> <ul> <li><code>-f, --file string</code>: (Required) Path to the Lua task configuration file.</li> <li><code>-v, --values string</code>: Path to a YAML values file, in case your task definitions depend on it.</li> </ul>"},{"location":"zh/CLI/#sloth-runner-new","title":"<code>sloth-runner new</code>","text":"<p>Generates a new boilerplate Lua task definition file from a template.</p> <p>Usage: <pre><code>sloth-runner new &lt;group-name&gt; [flags]\n</code></pre></p> <p>Arguments:</p> <ul> <li><code>&lt;group-name&gt;</code>: The name of the main task group to be created in the file.</li> </ul> <p>Flags:</p> <ul> <li><code>-t, --template string</code>: The template to use. Default is <code>simple</code>. Run <code>sloth-runner template list</code> to see all available options.</li> <li><code>-o, --output string</code>: The path to the output file. If not provided, the generated content will be printed to stdout.</li> </ul> <pre><code>sloth-runner list [flags]\n</code></pre>"},{"location":"zh/CLI/#flags_3","title":"Flags","text":"Flag Type Description <code>-f, --file</code> string Path to workflow file"},{"location":"zh/CLI/#output","title":"Output","text":"<ul> <li>Task groups</li> <li>Task names</li> <li>Descriptions</li> <li>Dependencies</li> <li>Conditions</li> </ul>"},{"location":"zh/CLI/#example","title":"Example","text":"<pre><code>sloth-runner list -f deploy.sloth\n</code></pre>"},{"location":"zh/CLI/#sloth-runner-version","title":"<code>sloth-runner version</code>","text":"<p>Display version and build information.</p>"},{"location":"zh/CLI/#usage_4","title":"Usage","text":"<pre><code>sloth-runner version\n</code></pre>"},{"location":"zh/CLI/#output_1","title":"Output","text":"<ul> <li>Version number</li> <li>Git commit hash</li> <li>Build date</li> <li>Go version</li> </ul>"},{"location":"zh/CLI/#global-flags","title":"Global Flags","text":"<p>Available for all commands:</p> Flag Description <code>-h, --help</code> Show command help <code>--debug</code> Enable debug output <code>--config string</code> Config file path (default: <code>~/.sloth-runner/config.yaml</code>)"},{"location":"zh/CLI/#configuration-file","title":"Configuration File","text":"<p>Sloth Runner supports configuration via <code>~/.sloth-runner/config.yaml</code>:</p> <pre><code># Master server settings\nmaster:\n  host: localhost\n  port: 50053\n\n# Agent settings\nagent:\n  name: my-agent\n  tags:\n    - linux\n    - docker\n  reconnect: true\n\n# UI settings\nui:\n  port: 8080\n  theme: dark\n\n# Scheduler settings\nscheduler:\n  enabled: true\n  timezone: UTC\n</code></pre>"},{"location":"zh/CLI/#environment-variables","title":"Environment Variables","text":"<p>Override configuration with environment variables:</p> Variable Description <code>SLOTH_MASTER_HOST</code> Master server host <code>SLOTH_MASTER_PORT</code> Master server port <code>SLOTH_AGENT_NAME</code> Agent identifier <code>SLOTH_UI_PORT</code> UI server port <code>SLOTH_DEBUG</code> Enable debug mode"},{"location":"zh/CLI/#exit-codes","title":"Exit Codes","text":"Code Meaning <code>0</code> Success <code>1</code> General error <code>2</code> Task execution failed <code>3</code> Configuration error <code>4</code> Network/connection error <code>5</code> State management error"},{"location":"zh/CLI/#examples_3","title":"Examples","text":""},{"location":"zh/CLI/#complete-cicd-pipeline","title":"Complete CI/CD Pipeline","text":"<pre><code># Initialize project\nsloth-runner workflow init my-app --template cicd\n\n# Run tests\nsloth-runner run -f my-app/.sloth/test.sloth -o rich\n\n# Deploy to staging\nsloth-runner run staging-stack --yes\n\n# Check agent status\nsloth-runner agent list --master ci-master:50053\n\n# Schedule nightly builds\nsloth-runner scheduler add nightly-build \\\n  --cron \"0 0 * * *\" \\\n  --workflow build.sloth\n</code></pre>"},{"location":"zh/CLI/#infrastructure-automation","title":"Infrastructure Automation","text":"<pre><code># Create infrastructure stack\nsloth-runner stack new prod-infra -f infrastructure.sloth\n\n# Apply with modern output\nsloth-runner run prod-infra -o modern\n\n# Show stack state\nsloth-runner stack show prod-infra\n\n# Teardown\nsloth-runner stack delete prod-infra --force\n</code></pre>"},{"location":"zh/CLI/#distributed-task-execution","title":"Distributed Task Execution","text":"<pre><code># Start master server\nsloth-runner master --port 50053 --daemon\n\n# Start agents on different servers\nsloth-runner agent start --master master:50053 --name web-1 --tags web,nginx\nsloth-runner agent start --master master:50053 --name db-1 --tags database,postgres\n\n# Execute on specific agent\nsloth-runner agent exec web-1 \"systemctl status nginx\" --master master:50053\n\n# Start UI for monitoring\nsloth-runner ui --port 8080\n</code></pre>"},{"location":"zh/CLI/#best-practices","title":"Best Practices","text":""},{"location":"zh/CLI/#1-use-stacks-for-state-management","title":"1. Use Stacks for State Management","text":"<pre><code># Don't: Run without state\nsloth-runner run -f deploy.sloth\n\n# Do: Use stacks for persistence\nsloth-runner stack new prod\nsloth-runner run prod\n</code></pre>"},{"location":"zh/CLI/#2-specify-output-format-for-cicd","title":"2. Specify Output Format for CI/CD","text":"<pre><code># JSON for parsing\nsloth-runner run -f ci.sloth -o json &gt; results.json\n\n# Rich for interactive\nsloth-runner run -f deploy.sloth -o rich\n</code></pre>"},{"location":"zh/CLI/#3-use-values-files-for-environments","title":"3. Use Values Files for Environments","text":"<pre><code># Development\nsloth-runner run -f app.sloth -v dev-values.yaml\n\n# Production\nsloth-runner run -f app.sloth -v prod-values.yaml\n</code></pre>"},{"location":"zh/CLI/#4-tag-agents-appropriately","title":"4. Tag Agents Appropriately","text":"<pre><code># Specific capabilities\nsloth-runner agent start --tags \"linux,docker,aws,x86_64\"\n\n# Environment-based\nsloth-runner agent start --tags \"prod,us-east-1\"\n</code></pre>"},{"location":"zh/CLI/#troubleshooting","title":"Troubleshooting","text":""},{"location":"zh/CLI/#connection-issues","title":"Connection Issues","text":"<pre><code># Test master connectivity\ncurl http://master:50053/health\n\n# Check agent logs\nsloth-runner agent start --debug\n</code></pre>"},{"location":"zh/CLI/#task-execution-failures","title":"Task Execution Failures","text":"<pre><code># Run with debug output\nsloth-runner run -f task.sloth --debug\n\n# Interactive mode for troubleshooting\nsloth-runner run -f task.sloth --interactive\n</code></pre>"},{"location":"zh/CLI/#state-issues","title":"State Issues","text":"<pre><code># View stack state\nsloth-runner stack show my-stack\n\n# Reset stack (careful!)\nsloth-runner stack delete my-stack\nsloth-runner stack new my-stack -f workflow.sloth\n</code></pre>"},{"location":"zh/CLI/#related-documentation","title":"Related Documentation","text":"<ul> <li>Getting Started</li> <li>Core Concepts</li> <li>Agent Architecture</li> <li>Scheduler Guide</li> <li>Web Dashboard</li> <li>Stack Management</li> </ul>"},{"location":"zh/CLI/#see-also","title":"See Also","text":"<ul> <li>REPL Interactive Shell</li> <li>Modern DSL Syntax</li> <li>Module Reference</li> <li>Examples Repository</li> </ul> <p>Need more help? Run <code>sloth-runner [command] --help</code> for detailed information about any command.</p>"},{"location":"zh/CLI/#sloth-runner-version_1","title":"<code>sloth-runner version</code>","text":"<p>Displays the current version of <code>sloth-runner</code>.</p> <pre><code>sloth-runner version\n</code></pre>"},{"location":"zh/CLI/#sloth-runner-scheduler_1","title":"<code>sloth-runner scheduler</code>","text":"<p>Manages the <code>sloth-runner</code> task scheduler, allowing you to enable, disable, list, and delete scheduled tasks.</p> <p>For detailed information on scheduler commands and configuration, refer to the Task Scheduler documentation.</p> <p>Subcommands:</p> <ul> <li><code>sloth-runner scheduler enable</code>: Starts the scheduler as a background process.</li> <li><code>sloth-runner scheduler disable</code>: Stops the running scheduler process.</li> <li><code>sloth-runner scheduler list</code>: Lists all configured scheduled tasks.</li> <li><code>sloth-runner scheduler delete &lt;task_name&gt;</code>: Deletes a specific scheduled task.</li> </ul>"},{"location":"zh/advanced-examples/","title":"\u9ad8\u7ea7\u793a\u4f8b","text":"<p>\u672c\u8282\u4ecb\u7ecd\u4e86\u66f4\u590d\u6742\u7684\u793a\u4f8b\u548c\u7528\u4f8b\uff0c\u5b83\u4eec\u7ed3\u5408\u4e86\u591a\u4e2a Sloth-Runner \u6a21\u5757\u4ee5\u5b9e\u73b0\u7aef\u5230\u7aef\u81ea\u52a8\u5316\u3002</p>"},{"location":"zh/advanced-examples/#cicd","title":"\u5b8c\u6574\u793a\u4f8b\uff1a\u7aef\u5230\u7aef CI/CD \u6d41\u6c34\u7ebf","text":"<p>\u672c\u6559\u7a0b\u6f14\u793a\u4e86\u5982\u4f55\u4f7f\u7528 <code>git</code>\u3001<code>pulumi</code> \u548c <code>salt</code> \u6a21\u5757\u6784\u5efa\u5b8c\u6574\u7684 CI/CD \u6d41\u6c34\u7ebf\uff0c\u4ee5\u7248\u672c\u5316\u4ee3\u7801\u3001\u9884\u7f6e\u57fa\u7840\u8bbe\u65bd\u548c\u90e8\u7f72\u5e94\u7528\u7a0b\u5e8f\u3002</p>"},{"location":"zh/advanced-examples/#_2","title":"\u573a\u666f","text":"<p>\u5047\u8bbe\u60a8\u6709\u4e00\u4e2a Pulumi \u57fa\u7840\u8bbe\u65bd\u9879\u76ee\u548c\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u9879\u76ee\u3002\u60a8\u5e0c\u671b\u81ea\u52a8\u5316\u4ee5\u4e0b\u6d41\u7a0b\uff1a</p> <ol> <li>\u514b\u9686\u57fa\u7840\u8bbe\u65bd\u5b58\u50a8\u5e93\u3002</li> <li>\u66f4\u65b0\u5b58\u50a8\u5e93\u4e2d\u7684\u7248\u672c\u6587\u4ef6\u3002</li> <li>\u63d0\u4ea4\u5e76\u5c06\u6b64\u66f4\u6539\u63a8\u9001\u5230 Git\u3002</li> <li>\u6267\u884c <code>pulumi up</code> \u4ee5\u9884\u7f6e\u6216\u66f4\u65b0\u57fa\u7840\u8bbe\u65bd\uff08\u4f8b\u5982\uff0c\u6682\u5b58\u73af\u5883\uff09\u3002</li> <li>\u4f7f\u7528 Salt \u914d\u7f6e\u9884\u7f6e\u7684\u670d\u52a1\u5668\u5e76\u90e8\u7f72\u5e94\u7528\u7a0b\u5e8f\u3002</li> </ol>"},{"location":"zh/advanced-examples/#lua-examplespulumi_git_combined_examplesloth","title":"Lua \u811a\u672c (<code>examples/pulumi_git_combined_example.sloth</code>)","text":"<pre><code>-- examples/pulumi_git_combined_example.sloth\n\ncommand = function(params)\n    log.info(\"Starting combined Pulumi and Git example...\")\n\n    local pulumi_repo_url = \"https://github.com/my-org/my-pulumi-infra.git\" -- Example Pulumi repo\n    local pulumi_repo_path = \"./pulumi-infra-checkout\"\n    local new_infra_version = params.infra_version or \"v1.0.0-infra\"\n    local pulumi_project_workdir = pulumi_repo_path .. \"/my-vpc-project\" -- Subdirectory within the cloned repo\n    local repo\n\n    -- 1. Clone or open the Pulumi repository\n    log.info(\"Step 1: Cloning or opening Pulumi repository...\")\n    if not fs.exists(pulumi_repo_path) then\n        log.info(\"Cloning Pulumi repository: \" .. pulumi_repo_url)\n        local cloned_repo, clone_err = git.clone(pulumi_repo_url, pulumi_repo_path)\n        if clone_err then\n            log.error(\"Failed to clone Pulumi repository: \" .. clone_err)\n            return false, \"Git clone failed.\"\n        end\n        repo = cloned_repo\n    else\n        log.info(\"Pulumi repository already exists, opening local reference.\")\n        local opened_repo, open_err = git.repo(pulumi_repo_path)\n        if open_err then\n            log.error(\"Failed to open Pulumi repository: \" .. open_err)\n            return false, \"Git repo open failed.\"\n        end\n        repo = opened_repo\n    end\n\n    if not repo then\n        return false, \"Failed to get Pulumi repository reference.\"\n    end\n\n    -- 2. Update the repository (pull)\n    log.info(\"Step 2: Pulling latest changes from Pulumi repository...\")\n    repo:checkout(\"main\"):pull(\"origin\", \"main\")\n    local pull_result = repo:result()\n    if not pull_result.success then\n        log.error(\"Failed to pull Pulumi repository: \" .. pull_result.stderr)\n        return false, \"Git pull failed.\"\n    end\n    log.info(\"Pulumi repository updated. Stdout: \" .. pull_result.stdout)\n\n    -- 3. Simulate a change in the Pulumi code (e.g., update a version file)\n    log.info(\"Step 3: Simulating a change in Pulumi code (updating version file)...\")\n    local infra_version_file = pulumi_repo_path .. \"/INFRA_VERSION\"\n    fs.write(infra_version_file, new_infra_version)\n    log.info(\"Updated INFRA_VERSION file to: \" .. new_infra_version)\n\n    -- 4. Commit and push the changes\n    log.info(\"Step 4: Committing and pushing infrastructure version change...\")\n    local commit_message = \"ci: Bump infrastructure version to \" .. new_infra_version\n    repo:add(infra_version_file)\n        :commit(commit_message)\n        :push(\"origin\", \"main\") -- No follow_tags here, just the commit\n\n    local push_result = repo:result()\n    if not push_result.success then\n        log.error(\"Failed to push infrastructure changes: \" .. push_result.stderr)\n        return false, \"Git push failed for infra changes.\"\n    end\n    log.info(\"Infrastructure version change pushed. Stdout: \" .. push_result.stdout)\n\n    -- 5. Execute 'pulumi up' for the project\n    log.info(\"Step 5: Running pulumi up for the infrastructure project...\")\n    local infra_stack = pulumi.stack(\"my-org/my-infra/dev\", {\n        workdir = pulumi_project_workdir -- Use the subdirectory of the Pulumi project\n    })\n\n    local pulumi_up_result = infra_stack:up({ non_interactive = true })\n\n    if not pulumi_up_result.success then\n        log.error(\"Pulumi up failed: \" .. pulumi_up_result.stderr)\n        return false, \"Pulumi up failed.\"\n    end\n    log.info(\"Pulumi up completed successfully. Stdout: \" .. pulumi_up_result.stdout)\n\n    -- 6. Configure and deploy application using Salt (Example)\n    log.info(\"Step 6: Configuring and deploying application using Salt...\")\n    -- Assuming Pulumi up provided the server IP or hostname\n    -- For this example, we'll use a fictitious IP\n    local server_ip = \"192.168.1.100\" -- Replace with actual output from Pulumi, if any\n    local salt_target = salt.target(server_ip)\n\n    log.info(\"Running Salt test.ping on \" .. server_ip .. \"...\")\n    salt_target:ping()\n    local ping_result = salt_target:result()\n    if not ping_result.success then\n        log.error(\"Salt ping failed for \" .. server_ip .. \": \" .. ping_result.stderr)\n        return false, \"Salt ping failed.\"\n    end\n    log.info(\"Salt ping successful. Stdout: \" .. data.to_json(ping_result.stdout)) -- Assuming ping returns JSON\n\n    log.info(\"Applying Salt state 'app.install' on \" .. server_ip .. \"...\")\n    salt_target:cmd('state.apply', 'app.install')\n    local salt_apply_result = salt_target:result()\n    if not salt_apply_result.success then\n        log.error(\"Salt state.apply failed for \" .. server_ip .. \": \" .. salt_apply_result.stderr)\n        return false, \"Salt state.apply failed.\"\n    end\n    log.info(\"Salt state.apply successful. Stdout: \" .. data.to_json(salt_apply_result.stdout))\n\n    log.info(\"Combined Pulumi and Git example finished successfully.\")\n    return true, \"Combined Pulumi and Git example finished.\"\nend\n\nModern DSLs = {\n    pulumi_git_combined_example = {\n        description = \"Demonstrates combined usage of 'pulumi' and 'git' modules for CI/CD pipeline.\",\n        tasks = {\n            {\n                name = \"run_combined_example\",\n                command = command,\n                params = {\n                    infra_version = \"v1.0.0-test-combined\"\n                }\n            }\n        }\n    }\n}\n</code></pre> <p>English | Portugu\u00eas | \u4e2d\u6587</p>"},{"location":"zh/advanced-features/","title":"\u9ad8\u7ea7\u529f\u80fd","text":"<p>\u672c\u6587\u6863\u4ecb\u7ecd <code>sloth-runner</code> \u7684\u4e00\u4e9b\u66f4\u9ad8\u7ea7\u7684\u529f\u80fd\uff0c\u65e8\u5728\u589e\u5f3a\u60a8\u7684\u5f00\u53d1\u3001\u8c03\u8bd5\u548c\u914d\u7f6e\u5de5\u4f5c\u6d41\u3002</p>"},{"location":"zh/advanced-features/#_2","title":"\u4ea4\u4e92\u5f0f\u4efb\u52a1\u8fd0\u884c\u5668","text":"<p>\u5bf9\u4e8e\u590d\u6742\u7684\u5de5\u4f5c\u6d41\uff0c\u9010\u4e2a\u6267\u884c\u4efb\u52a1\u3001\u68c0\u67e5\u5176\u8f93\u51fa\u5e76\u51b3\u5b9a\u662f\u7ee7\u7eed\u3001\u8df3\u8fc7\u8fd8\u662f\u91cd\u8bd5\u4efb\u52a1\u53ef\u80fd\u5f88\u6709\u7528\u3002\u4ea4\u4e92\u5f0f\u4efb\u52a1\u8fd0\u884c\u5668\u4e3a\u8c03\u8bd5\u548c\u5f00\u53d1\u4efb\u52a1\u7ba1\u9053\u63d0\u4f9b\u4e86\u4e00\u79cd\u5f3a\u5927\u7684\u65b9\u6cd5\u3002</p> <p>\u8981\u4f7f\u7528\u4ea4\u4e92\u5f0f\u8fd0\u884c\u5668\uff0c\u8bf7\u5c06 <code>--interactive</code> \u6807\u5fd7\u6dfb\u52a0\u5230 <code>sloth-runner run</code> \u547d\u4ee4\u4e2d\uff1a</p> <pre><code>sloth-runner run -f examples/basic_pipeline.sloth --yes --interactive\n</code></pre> <p>\u542f\u7528\u540e\uff0c\u8fd0\u884c\u5668\u5c06\u5728\u6267\u884c\u6bcf\u4e2a\u4efb\u52a1\u4e4b\u524d\u6682\u505c\u5e76\u63d0\u793a\u60a8\u6267\u884c\u64cd\u4f5c\uff1a</p> <pre><code>? \u4efb\u52a1: fetch_data (\u6a21\u62df\u83b7\u53d6\u539f\u59cb\u6570\u636e)\n&gt; \u8fd0\u884c\n  \u8df3\u8fc7\n  \u4e2d\u6b62\n  \u7ee7\u7eed\n</code></pre> <p>\u64cd\u4f5c:</p> <ul> <li>\u8fd0\u884c: (\u9ed8\u8ba4) \u7ee7\u7eed\u6267\u884c\u5f53\u524d\u4efb\u52a1\u3002</li> <li>\u8df3\u8fc7: \u8df3\u8fc7\u5f53\u524d\u4efb\u52a1\u5e76\u8f6c\u5230\u6267\u884c\u987a\u5e8f\u4e2d\u7684\u4e0b\u4e00\u4e2a\u4efb\u52a1\u3002</li> <li>\u4e2d\u6b62: \u7acb\u5373\u4e2d\u6b62\u6574\u4e2a\u4efb\u52a1\u6267\u884c\u3002</li> <li>\u7ee7\u7eed: \u6267\u884c\u5f53\u524d\u4efb\u52a1\u548c\u6240\u6709\u540e\u7eed\u4efb\u52a1\uff0c\u4e0d\u518d\u63d0\u793a\uff0c\u4ece\u800c\u6709\u6548\u5730\u4e3a\u4f59\u4e0b\u7684\u8fd0\u884c\u7981\u7528\u4ea4\u4e92\u6a21\u5f0f\u3002</li> </ul>"},{"location":"zh/advanced-features/#valuesyaml","title":"\u589e\u5f3a\u7684 <code>values.yaml</code> \u6a21\u677f","text":"<p>\u60a8\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 Go \u6a21\u677f\u8bed\u6cd5\u6ce8\u5165\u73af\u5883\u53d8\u91cf\u6765\u4f7f <code>values.yaml</code> \u6587\u4ef6\u66f4\u52a0\u52a8\u6001\u3002\u8fd9\u5bf9\u4e8e\u63d0\u4f9b\u654f\u611f\u4fe1\u606f\uff08\u5982\u4ee4\u724c\u6216\u5bc6\u94a5\uff09\u6216\u7279\u5b9a\u4e8e\u73af\u5883\u7684\u914d\u7f6e\u7279\u522b\u6709\u7528\uff0c\u800c\u65e0\u9700\u5bf9\u5176\u8fdb\u884c\u786c\u7f16\u7801\u3002</p> <p><code>sloth-runner</code> \u5c06 <code>values.yaml</code> \u4f5c\u4e3a Go \u6a21\u677f\u5904\u7406\uff0c\u4f7f\u4efb\u4f55\u73af\u5883\u53d8\u91cf\u90fd\u53ef\u4ee5\u5728 <code>.Env</code> \u6620\u5c04\u4e0b\u4f7f\u7528\u3002</p> <p>\u793a\u4f8b:</p> <ol> <li> <p>\u521b\u5efa\u4e00\u4e2a\u5e26\u6709\u6a21\u677f\u5360\u4f4d\u7b26\u7684 <code>values.yaml</code> \u6587\u4ef6\uff1a</p> <p><pre><code># values.yaml\napi_key: \"{{ .Env.MY_API_KEY }}\"\nregion: \"{{ .Env.AWS_REGION | default \"us-east-1\" }}\"\n</code></pre> \u6ce8\u610f\uff1a\u5982\u679c\u672a\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 <code>default</code> \u63d0\u4f9b\u5907\u7528\u503c\u3002</p> </li> <li> <p>\u521b\u5efa\u4e00\u4e2a\u4f7f\u7528\u8fd9\u4e9b\u503c\u7684 Lua \u4efb\u52a1\uff1a</p> <pre><code>-- my_task.sloth\nModern DSLs = {\n  my_group = {\n    tasks = {\n      {\n        name = \"deploy\",\n        command = function()\n          log.info(\"\u90e8\u7f72\u5230\u533a\u57df: \" .. values.region)\n          log.info(\"\u4f7f\u7528 API \u5bc6\u94a5 (\u524d 5 \u4e2a\u5b57\u7b26): \" .. string.sub(values.api_key, 1, 5) .. \"...\")\n          return true, \"\u90e8\u7f72\u6210\u529f\u3002\"\n        end\n      }\n    }\n  }\n}\n</code></pre> </li> <li> <p>\u5728\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\u7684\u60c5\u51b5\u4e0b\u8fd0\u884c\u4efb\u52a1\uff1a</p> <pre><code>export MY_API_KEY=\"supersecretkey12345\"\nexport AWS_REGION=\"us-west-2\"\n\nsloth-runner run -f my_task.sloth -v values.yaml --yes\n</code></pre> </li> </ol> <p>\u8f93\u51fa:</p> <p>\u8f93\u51fa\u5c06\u663e\u793a\u73af\u5883\u53d8\u91cf\u4e2d\u7684\u503c\u5df2\u6b63\u786e\u66ff\u6362\uff1a</p> <pre><code>INFO \u90e8\u7f72\u5230\u533a\u57df: us-west-2\nINFO \u4f7f\u7528 API \u5bc6\u94a5 (\u524d 5 \u4e2a\u5b57\u7b26): super...\n</code></pre>"},{"location":"zh/agent-improvements/","title":"\ud83d\ude80 \u4ee3\u7406\u6539\u8fdb","text":"<p>\u6709\u5173\u4ee3\u7406\u6539\u8fdb\u7684\u5b8c\u6574\u6587\u6863\uff0c\u8bf7\u53c2\u9605\uff1a</p>"},{"location":"zh/agent-improvements/#_2","title":"\u5df2\u5b9e\u73b0\u7684\u6539\u8fdb","text":""},{"location":"zh/agent-improvements/#_3","title":"\ud83d\udcca \u589e\u5f3a\u8f93\u51fa","text":"<p>\u53c2\u89c1\uff1a\u589e\u5f3a\u4ee3\u7406\u8f93\u51fa</p>"},{"location":"zh/agent-improvements/#_4","title":"\ud83c\udfd7\ufe0f \u67b6\u6784","text":"<p>\u53c2\u89c1\uff1aMaster-Agent \u67b6\u6784</p>"},{"location":"zh/agent-improvements/#_5","title":"\ud83c\udf10 \u5206\u5e03\u5f0f\u7cfb\u7edf","text":"<p>\u53c2\u89c1\uff1a\u5206\u5e03\u5f0f\u7cfb\u7edf</p>"},{"location":"zh/agent-improvements/#_6","title":"\u4e3b\u8981\u529f\u80fd","text":"<ul> <li>\u2705 \u6539\u8fdb\u7684 master \u548c agent \u4e4b\u95f4\u7684\u901a\u4fe1</li> <li>\u2705 \u5e26\u989c\u8272\u548c\u8868\u60c5\u7b26\u53f7\u7684\u683c\u5f0f\u5316\u8f93\u51fa</li> <li>\u2705 \u5b9e\u65f6\u76d1\u63a7</li> <li>\u2705 \u81ea\u52a8\u91cd\u8bd5</li> <li>\u2705 \u5065\u5eb7\u68c0\u67e5</li> <li>\u2705 \u7ed3\u6784\u5316\u65e5\u5fd7</li> </ul>"},{"location":"zh/agent-improvements/#_7","title":"\u793a\u4f8b","text":"<p>\u6709\u5173\u5b9e\u9645\u6848\u4f8b\uff0c\u8bf7\u53c2\u9605\u9ad8\u7ea7\u793a\u4f8b\u3002</p>"},{"location":"zh/contributing/","title":"\ud83e\udd1d \u8d21\u732e Sloth Runner","text":"<p>\u611f\u8c22\u60a8\u5bf9\u8d21\u732e Sloth Runner \u7684\u5174\u8da3\uff01</p> <p>\u6211\u4eec\u6b22\u8fce\u6240\u6709\u6280\u80fd\u6c34\u5e73\u7684\u5f00\u53d1\u8005\u7684\u8d21\u732e\u3002\u65e0\u8bba\u60a8\u662f\u4fee\u590d\u9519\u8bef\u3001\u6dfb\u52a0\u529f\u80fd\u3001\u6539\u8fdb\u6587\u6863\u8fd8\u662f\u521b\u5efa\u63d2\u4ef6\uff0c\u60a8\u7684\u5e2e\u52a9\u90fd\u4f1a\u8ba9 Sloth Runner \u53d8\u5f97\u66f4\u597d\u3002</p>"},{"location":"zh/contributing/#_1","title":"\ud83d\ude80 \u5feb\u901f\u5f00\u59cb","text":""},{"location":"zh/contributing/#_2","title":"\u524d\u7f6e\u6761\u4ef6","text":"<ul> <li>Go 1.21+ \u7528\u4e8e\u6838\u5fc3\u5f00\u53d1</li> <li>Node.js 18+ \u7528\u4e8e UI \u5f00\u53d1  </li> <li>Lua 5.4+ \u7528\u4e8e DSL \u5f00\u53d1</li> <li>Git \u7528\u4e8e\u7248\u672c\u63a7\u5236</li> </ul>"},{"location":"zh/contributing/#_3","title":"\u5f00\u53d1\u73af\u5883\u8bbe\u7f6e","text":"<pre><code># \u514b\u9686\u4ed3\u5e93\ngit clone https://github.com/chalkan3-sloth/sloth-runner.git\ncd sloth-runner\n\n# \u5b89\u88c5\u4f9d\u8d56\ngo mod download\nnpm install  # \u7528\u4e8e UI \u7ec4\u4ef6\n\n# \u8fd0\u884c\u6d4b\u8bd5\nmake test\n\n# \u6784\u5efa\u9879\u76ee\nmake build\n</code></pre>"},{"location":"zh/contributing/#_4","title":"\ud83d\udccb \u8d21\u732e\u65b9\u5f0f","text":""},{"location":"zh/contributing/#_5","title":"\ud83d\udc1b \u9519\u8bef\u62a5\u544a","text":"<p>\u53d1\u73b0\u4e86\u9519\u8bef\uff1f\u8bf7\u5e2e\u52a9\u6211\u4eec\u4fee\u590d\uff1a</p> <ol> <li>\u641c\u7d22\u73b0\u6709 issue \u4ee5\u907f\u514d\u91cd\u590d</li> <li>\u4f7f\u7528\u6211\u4eec\u7684\u9519\u8bef\u62a5\u544a\u6a21\u677f\uff0c\u5305\u542b\uff1a</li> <li>Sloth Runner \u7248\u672c</li> <li>\u64cd\u4f5c\u7cfb\u7edf</li> <li>\u91cd\u73b0\u6b65\u9aa4</li> <li>\u9884\u671f\u884c\u4e3a vs \u5b9e\u9645\u884c\u4e3a</li> <li>\u9519\u8bef\u65e5\u5fd7\uff08\u5982\u679c\u6709\uff09</li> </ol>"},{"location":"zh/contributing/#_6","title":"\ud83d\udca1 \u529f\u80fd\u8bf7\u6c42","text":"<p>\u6709\u6539\u8fdb\u60f3\u6cd5\uff1f</p> <ol> <li>\u68c0\u67e5\u8def\u7ebf\u56fe \u67e5\u770b\u8ba1\u5212\u7684\u529f\u80fd</li> <li>\u5f00\u542f\u529f\u80fd\u8bf7\u6c42\uff0c\u5305\u542b\uff1a</li> <li>\u529f\u80fd\u7684\u6e05\u6670\u63cf\u8ff0</li> <li>\u7528\u4f8b\u548c\u597d\u5904</li> <li>\u53ef\u80fd\u7684\u5b9e\u73b0\u65b9\u6cd5</li> </ol>"},{"location":"zh/contributing/#_7","title":"\ud83d\udd27 \u4ee3\u7801\u8d21\u732e","text":"<p>\u51c6\u5907\u7f16\u7801\uff1f\u4ee5\u4e0b\u662f\u6b65\u9aa4\uff1a</p> <ol> <li>Fork \u4ed3\u5e93</li> <li>\u521b\u5efa\u529f\u80fd\u5206\u652f (<code>git checkout -b feature/amazing-feature</code>)</li> <li>\u8fdb\u884c\u66f4\u6539 \u9075\u5faa\u6211\u4eec\u7684\u7f16\u7801\u6807\u51c6</li> <li>\u4e3a\u65b0\u529f\u80fd\u6dfb\u52a0\u6d4b\u8bd5</li> <li>\u5982\u9700\u8981\u66f4\u65b0\u6587\u6863</li> <li>\u4f7f\u7528\u6e05\u6670\u7684\u6d88\u606f\u63d0\u4ea4</li> <li>\u63a8\u9001\u5e76\u521b\u5efa Pull Request</li> </ol>"},{"location":"zh/contributing/#_8","title":"\ud83d\udcda \u6587\u6863","text":"<p>\u5e2e\u52a9\u6539\u8fdb\u6211\u4eec\u7684\u6587\u6863\uff1a</p> <ul> <li>\u4fee\u590d\u62fc\u5199\u9519\u8bef\u548c\u4e0d\u6e05\u695a\u7684\u8bf4\u660e</li> <li>\u6dfb\u52a0\u793a\u4f8b\u548c\u6559\u7a0b</li> <li>\u5c06\u5185\u5bb9\u7ffb\u8bd1\u6210\u5176\u4ed6\u8bed\u8a00</li> <li>\u66f4\u65b0 API \u6587\u6863</li> </ul>"},{"location":"zh/contributing/#_9","title":"\ud83d\udd0c \u63d2\u4ef6\u5f00\u53d1","text":"<p>\u4e3a\u793e\u533a\u521b\u5efa\u63d2\u4ef6\uff1a</p> <ul> <li>\u9075\u5faa\u6211\u4eec\u7684\u63d2\u4ef6\u5f00\u53d1\u6307\u5357</li> <li>\u63d0\u4ea4\u5230\u63d2\u4ef6\u6ce8\u518c\u8868</li> <li>\u4fdd\u6301\u4e0e\u6838\u5fc3\u7248\u672c\u7684\u517c\u5bb9\u6027</li> </ul>"},{"location":"zh/contributing/#_10","title":"\ud83d\udcd0 \u5f00\u53d1\u6307\u5357","text":""},{"location":"zh/contributing/#_11","title":"\u4ee3\u7801\u98ce\u683c","text":""},{"location":"zh/contributing/#go","title":"Go \u4ee3\u7801","text":"<p>\u9075\u5faa\u6807\u51c6 Go \u7ea6\u5b9a\uff1a</p> <pre><code>// \u597d\u7684\uff1a\u6e05\u6670\u7684\u51fd\u6570\u540d\u548c\u6ce8\u91ca\nfunc ProcessWorkflowTasks(ctx context.Context, workflow *Workflow) error {\n    if workflow == nil {\n        return fmt.Errorf(\"workflow \u4e0d\u80fd\u4e3a nil\")\n    }\n\n    for _, task := range workflow.Tasks {\n        if err := processTask(ctx, task); err != nil {\n            return fmt.Errorf(\"\u5904\u7406\u4efb\u52a1 %s \u5931\u8d25: %w\", task.ID, err)\n        }\n    }\n\n    return nil\n}\n</code></pre>"},{"location":"zh/contributing/#lua-dsl","title":"Lua DSL","text":"<p>\u4fdd\u6301 DSL \u4ee3\u7801\u6e05\u6d01\u53ef\u8bfb\uff1a</p> <pre><code>-- \u597d\u7684\uff1a\u6e05\u6670\u7684\u4efb\u52a1\u5b9a\u4e49\uff0c\u9002\u5f53\u7684\u94fe\u5f0f\u8c03\u7528\nlocal deploy_task = task(\"deploy_application\")\n    :description(\"\u5c06\u5e94\u7528\u90e8\u7f72\u5230\u751f\u4ea7\u73af\u5883\")\n    :command(function(params, deps)\n        local result = exec.run(\"kubectl apply -f deployment.yaml\")\n        if not result.success then\n            log.error(\"\u90e8\u7f72\u5931\u8d25: \" .. result.stderr)\n            return false\n        end\n        return true\n    end)\n    :timeout(300)\n    :retries(3)\n    :build()\n</code></pre>"},{"location":"zh/contributing/#_12","title":"\u6d4b\u8bd5\u6807\u51c6","text":""},{"location":"zh/contributing/#_13","title":"\u5355\u5143\u6d4b\u8bd5","text":"<p>\u4e3a\u6240\u6709\u65b0\u529f\u80fd\u7f16\u5199\u6d4b\u8bd5\uff1a</p> <pre><code>func TestProcessWorkflowTasks(t *testing.T) {\n    tests := []struct {\n        name     string\n        workflow *Workflow\n        wantErr  bool\n    }{\n        {\n            name:     \"nil workflow \u5e94\u8be5\u8fd4\u56de\u9519\u8bef\",\n            workflow: nil,\n            wantErr:  true,\n        },\n        {\n            name: \"\u6709\u6548 workflow \u5e94\u8be5\u6210\u529f\u5904\u7406\",\n            workflow: &amp;Workflow{\n                Tasks: []*Task{{ID: \"test-task\"}},\n            },\n            wantErr: false,\n        },\n    }\n\n    for _, tt := range tests {\n        t.Run(tt.name, func(t *testing.T) {\n            err := ProcessWorkflowTasks(context.Background(), tt.workflow)\n            if (err != nil) != tt.wantErr {\n                t.Errorf(\"ProcessWorkflowTasks() error = %v, wantErr %v\", err, tt.wantErr)\n            }\n        })\n    }\n}\n</code></pre>"},{"location":"zh/contributing/#_14","title":"\u6587\u6863\u6807\u51c6","text":"<ul> <li>\u4fdd\u6301\u7b80\u5355 - \u4f7f\u7528\u6e05\u6670\u3001\u7b80\u6d01\u7684\u8bed\u8a00</li> <li>\u5305\u542b\u793a\u4f8b - \u5c55\u793a\u800c\u4e0d\u4ec5\u4ec5\u662f\u544a\u8bc9</li> <li>\u968f\u66f4\u6539\u66f4\u65b0 - \u4fdd\u6301\u6587\u6863\u4e0e\u4ee3\u7801\u540c\u6b65</li> <li>\u6d4b\u8bd5\u793a\u4f8b - \u786e\u4fdd\u6240\u6709\u4ee3\u7801\u793a\u4f8b\u90fd\u80fd\u5de5\u4f5c</li> </ul>"},{"location":"zh/contributing/#pull-request","title":"\ud83d\udd04 Pull Request \u6d41\u7a0b","text":""},{"location":"zh/contributing/#_15","title":"\u63d0\u4ea4\u524d","text":"<ul> <li> \u8fd0\u884c\u6d4b\u8bd5 - <code>make test</code></li> <li> \u8fd0\u884c\u4ee3\u7801\u68c0\u67e5 - <code>make lint</code></li> <li> \u66f4\u65b0\u6587\u6863 - \u5982\u679c\u6dfb\u52a0/\u66f4\u6539\u529f\u80fd</li> <li> \u6dfb\u52a0\u66f4\u65b0\u65e5\u5fd7\u6761\u76ee - \u5728 <code>CHANGELOG.md</code> \u4e2d</li> <li> \u68c0\u67e5\u517c\u5bb9\u6027 - \u4e0e\u73b0\u6709\u529f\u80fd</li> </ul>"},{"location":"zh/contributing/#pr","title":"PR \u6a21\u677f","text":"<p>\u4f7f\u7528\u6211\u4eec\u7684 pull request \u6a21\u677f\uff1a</p> <pre><code>## \u63cf\u8ff0\n\u66f4\u6539\u7684\u7b80\u8981\u63cf\u8ff0\n\n## \u66f4\u6539\u7c7b\u578b\n- [ ] \u9519\u8bef\u4fee\u590d\n- [ ] \u65b0\u529f\u80fd\n- [ ] \u7834\u574f\u6027\u66f4\u6539\n- [ ] \u6587\u6863\u66f4\u65b0\n\n## \u6d4b\u8bd5\n- [ ] \u5355\u5143\u6d4b\u8bd5\u5df2\u6dfb\u52a0/\u66f4\u65b0\n- [ ] \u96c6\u6210\u6d4b\u8bd5\u901a\u8fc7\n- [ ] \u624b\u52a8\u6d4b\u8bd5\u5b8c\u6210\n\n## \u68c0\u67e5\u6e05\u5355\n- [ ] \u4ee3\u7801\u9075\u5faa\u6837\u5f0f\u6307\u5357\n- [ ] \u6587\u6863\u5df2\u66f4\u65b0\n- [ ] \u66f4\u65b0\u65e5\u5fd7\u5df2\u66f4\u65b0\n</code></pre>"},{"location":"zh/contributing/#_16","title":"\ud83c\udfd7\ufe0f \u9879\u76ee\u7ed3\u6784","text":"<p>\u7406\u89e3\u4ee3\u7801\u5e93\uff1a</p> <pre><code>sloth-runner/\n\u251c\u2500\u2500 cmd/                    # CLI \u547d\u4ee4\n\u251c\u2500\u2500 internal/              # \u5185\u90e8\u5305\n\u2502   \u251c\u2500\u2500 core/             # \u6838\u5fc3\u4e1a\u52a1\u903b\u8f91\n\u2502   \u251c\u2500\u2500 dsl/              # DSL \u5b9e\u73b0\n\u2502   \u251c\u2500\u2500 execution/        # \u4efb\u52a1\u6267\u884c\u5f15\u64ce\n\u2502   \u2514\u2500\u2500 plugins/          # \u63d2\u4ef6\u7cfb\u7edf\n\u251c\u2500\u2500 pkg/                   # \u516c\u5171\u5305\n\u251c\u2500\u2500 plugins/              # \u5185\u7f6e\u63d2\u4ef6\n\u251c\u2500\u2500 docs/                 # \u6587\u6863\n\u251c\u2500\u2500 web/                  # Web UI \u7ec4\u4ef6\n\u2514\u2500\u2500 examples/             # \u793a\u4f8b\u5de5\u4f5c\u6d41\n</code></pre>"},{"location":"zh/contributing/#_17","title":"\ud83c\udfaf \u8d21\u732e\u9886\u57df","text":""},{"location":"zh/contributing/#_18","title":"\u9ad8\u4f18\u5148\u7ea7","text":"<ul> <li>\ud83d\udc1b \u9519\u8bef\u4fee\u590d - \u603b\u662f\u6b22\u8fce</li> <li>\ud83d\udcc8 \u6027\u80fd\u6539\u8fdb - \u4f18\u5316\u673a\u4f1a</li> <li>\ud83e\uddea \u6d4b\u8bd5\u8986\u76d6\u7387 - \u589e\u52a0\u6d4b\u8bd5\u8986\u76d6\u7387</li> <li>\ud83d\udcda \u6587\u6863 - \u4fdd\u6301\u6587\u6863\u5168\u9762</li> </ul>"},{"location":"zh/contributing/#_19","title":"\u4e2d\u7b49\u4f18\u5148\u7ea7","text":"<ul> <li>\u2728 \u65b0\u529f\u80fd - \u9075\u5faa\u8def\u7ebf\u56fe\u4f18\u5148\u7ea7</li> <li>\ud83d\udd0c \u63d2\u4ef6\u751f\u6001\u7cfb\u7edf - \u66f4\u591a\u63d2\u4ef6\u548c\u96c6\u6210</li> <li>\ud83c\udfa8 UI \u6539\u8fdb - \u66f4\u597d\u7684\u7528\u6237\u4f53\u9a8c</li> </ul>"},{"location":"zh/contributing/#_20","title":"\ud83c\udfc6 \u8ba4\u53ef","text":"<p>\u8d21\u732e\u8005\u5728\u4ee5\u4e0b\u65b9\u9762\u5f97\u5230\u8ba4\u53ef\uff1a</p> <ul> <li>CONTRIBUTORS.md - \u5217\u51fa\u6240\u6709\u8d21\u732e\u8005</li> <li>\u53d1\u5e03\u8bf4\u660e - \u7a81\u51fa\u663e\u793a\u4e3b\u8981\u8d21\u732e</li> <li>\u793e\u533a\u5c55\u793a - \u7279\u8272\u8d21\u732e</li> <li>\u8d21\u732e\u8005\u5fbd\u7ae0 - GitHub \u4e2a\u4eba\u8d44\u6599\u8ba4\u53ef</li> </ul>"},{"location":"zh/contributing/#_21","title":"\ud83d\udcde \u83b7\u53d6\u5e2e\u52a9","text":""},{"location":"zh/contributing/#_22","title":"\u5f00\u53d1\u95ee\u9898","text":"<ul> <li>\ud83d\udcac Discord - <code>#development</code> \u9891\u9053</li> <li>\ud83d\udce7 \u90ae\u4ef6\u5217\u8868 - dev@sloth-runner.io</li> <li>\ud83d\udcd6 Wiki - \u5f00\u53d1\u6307\u5357\u548c\u5e38\u89c1\u95ee\u9898</li> </ul>"},{"location":"zh/contributing/#_23","title":"\u6307\u5bfc","text":"<p>\u521d\u6b21\u63a5\u89e6\u5f00\u6e90\uff1f\u6211\u4eec\u63d0\u4f9b\u6307\u5bfc\uff1a</p> <ul> <li>\ud83d\udc65 \u5bfc\u5e08\u5339\u914d - \u4e0e\u6709\u7ecf\u9a8c\u7684\u8d21\u732e\u8005\u914d\u5bf9</li> <li>\ud83d\udcda \u5b66\u4e60\u8d44\u6e90 - \u7b56\u5212\u7684\u5b66\u4e60\u6750\u6599</li> <li>\ud83c\udfaf \u5f15\u5bfc\u8d21\u732e - \u9002\u5408\u521d\u5b66\u8005\u7684 issue</li> </ul>"},{"location":"zh/contributing/#_24","title":"\ud83d\udcdc \u884c\u4e3a\u51c6\u5219","text":"<p>\u6211\u4eec\u81f4\u529b\u4e8e\u63d0\u4f9b\u4e00\u4e2a\u6b22\u8fce\u548c\u5305\u5bb9\u7684\u73af\u5883\u3002\u8bf7\u9605\u8bfb\u6211\u4eec\u7684\u884c\u4e3a\u51c6\u5219\u3002</p>"},{"location":"zh/contributing/#_25","title":"\u6211\u4eec\u7684\u6807\u51c6","text":"<ul> <li>\ud83e\udd1d \u4e92\u76f8\u5c0a\u91cd - \u5c0a\u91cd\u5bf9\u5f85\u6bcf\u4e2a\u4eba</li> <li>\ud83d\udca1 \u5efa\u8bbe\u6027 - \u63d0\u4f9b\u6709\u7528\u7684\u53cd\u9988</li> <li>\ud83c\udf0d \u5305\u5bb9\u6027 - \u6b22\u8fce\u591a\u5143\u5316\u7684\u89c2\u70b9</li> <li>\ud83d\udcda \u8010\u5fc3 - \u5e2e\u52a9\u4ed6\u4eba\u5b66\u4e60\u548c\u6210\u957f</li> </ul> <p>\u51c6\u5907\u8d21\u732e\uff1f</p> <p>\u4ece\u63a2\u7d22\u6211\u4eec\u7684\u65b0\u624b\u53cb\u597d\u7684 Issues \u5f00\u59cb\uff0c\u6216\u52a0\u5165\u6211\u4eec\u7684 Discord \u793e\u533a \u4ecb\u7ecd\u81ea\u5df1\uff01</p> <p>\u611f\u8c22\u60a8\u5e2e\u52a9\u8ba9 Sloth Runner \u53d8\u5f97\u66f4\u597d\uff01\ud83e\udda5\u2728</p>"},{"location":"zh/core-concepts/","title":"\u6838\u5fc3\u6982\u5ff5","text":"<p>\u672c\u6587\u6863\u89e3\u91ca\u4e86 <code>sloth-runner</code> \u7684\u57fa\u672c\u6982\u5ff5\uff0c\u5e2e\u52a9\u60a8\u7406\u89e3\u5982\u4f55\u5b9a\u4e49\u548c\u7f16\u6392\u590d\u6742\u7684\u5de5\u4f5c\u6d41\u3002</p>"},{"location":"zh/core-concepts/#modern-dsls","title":"<code>Modern DSLs</code> \u8868","text":"<p>\u4efb\u4f55 <code>sloth-runner</code> \u5de5\u4f5c\u6d41\u7684\u5165\u53e3\u70b9\u90fd\u662f\u4e00\u4e2a\u8fd4\u56de\u540d\u4e3a <code>Modern DSLs</code> \u7684\u5168\u5c40 Lua \u8868\u7684 Lua \u6587\u4ef6\u3002\u6b64\u8868\u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u5176\u4e2d\u6bcf\u4e2a\u952e\u90fd\u662f\u4e00\u4e2a \u4efb\u52a1\u7ec4 \u540d\u79f0\u3002</p> <pre><code>-- my_pipeline.sloth\nModern DSLs = {\n  -- \u5728\u6b64\u5904\u5b9a\u4e49\u4efb\u52a1\u7ec4\n}\n</code></pre>"},{"location":"zh/core-concepts/#_2","title":"\u4efb\u52a1\u7ec4","text":"<p>\u4efb\u52a1\u7ec4\u662f\u76f8\u5173\u4efb\u52a1\u7684\u96c6\u5408\u3002\u5b83\u8fd8\u53ef\u4ee5\u5b9a\u4e49\u5f71\u54cd\u5176\u4e2d\u6240\u6709\u4efb\u52a1\u7684\u5c5e\u6027\u3002</p> <p>\u7ec4\u5c5e\u6027:</p> <ul> <li><code>description</code> (string): \u7ec4\u529f\u80fd\u7684\u63cf\u8ff0\u3002</li> <li><code>tasks</code> (table): \u5355\u4e2a\u4efb\u52a1\u8868\u7684\u5217\u8868\u3002</li> <li><code>create_workdir_before_run</code> (boolean): \u5982\u679c\u4e3a <code>true</code>\uff0c\u5219\u5728\u4efb\u4f55\u4efb\u52a1\u8fd0\u884c\u4e4b\u524d\u4e3a\u8be5\u7ec4\u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u5de5\u4f5c\u76ee\u5f55\u3002\u6b64\u76ee\u5f55\u4f1a\u4f20\u9012\u7ed9\u6bcf\u4e2a\u4efb\u52a1\u3002</li> <li><code>clean_workdir_after_run</code> (function): \u4e00\u4e2a Lua \u51fd\u6570\uff0c\u7528\u4e8e\u51b3\u5b9a\u5728\u7ec4\u5b8c\u6210\u540e\u662f\u5426\u5e94\u5220\u9664\u4e34\u65f6\u5de5\u4f5c\u76ee\u5f55\u3002\u5b83\u63a5\u6536\u7ec4\u7684\u6700\u7ec8\u7ed3\u679c (<code>{success = true/false, ...}</code>)\u3002\u8fd4\u56de <code>true</code> \u5c06\u5220\u9664\u76ee\u5f55\u3002</li> </ul> <p>\u793a\u4f8b: <pre><code>Modern DSLs = {\n  my_group = {\n    description = \"\u4e00\u4e2a\u7ba1\u7406\u81ea\u5df1\u4e34\u65f6\u76ee\u5f55\u7684\u7ec4\u3002\",\n    create_workdir_before_run = true,\n    clean_workdir_after_run = function(result)\n      if not result.success then\n        log.warn(\"\u7ec4\u5931\u8d25\u3002\u5de5\u4f5c\u76ee\u5f55\u5c06\u4fdd\u7559\u7528\u4e8e\u8c03\u8bd5\u3002\")\n      end\n      return result.success -- \u4ec5\u5728\u4e00\u5207\u6210\u529f\u65f6\u6e05\u7406\n    end,\n    tasks = {\n      -- \u4efb\u52a1\u5728\u6b64\u5904\u5b9a\u4e49\n    }\n  }\n}\n</code></pre></p>"},{"location":"zh/core-concepts/#_3","title":"\u5355\u4e2a\u4efb\u52a1","text":"<p>\u4efb\u52a1\u662f\u5de5\u4f5c\u7684\u5355\u4e2a\u5355\u5143\u3002\u5b83\u88ab\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u5177\u6709\u591a\u4e2a\u53ef\u7528\u5c5e\u6027\u4ee5\u63a7\u5236\u5176\u884c\u4e3a\u7684\u8868\u3002</p>"},{"location":"zh/core-concepts/#_4","title":"\u57fa\u672c\u5c5e\u6027","text":"<ul> <li><code>name</code> (string): \u4efb\u52a1\u5728\u5176\u7ec4\u4e2d\u7684\u552f\u4e00\u540d\u79f0\u3002</li> <li><code>description</code> (string): \u4efb\u52a1\u529f\u80fd\u7684\u7b80\u8981\u63cf\u8ff0\u3002</li> <li><code>command</code> (string \u6216 function): \u4efb\u52a1\u7684\u6838\u5fc3\u64cd\u4f5c\u3002<ul> <li>\u4f5c\u4e3a\u5b57\u7b26\u4e32: \u4f5c\u4e3a shell \u547d\u4ee4\u6267\u884c\u3002</li> <li>\u4f5c\u4e3a\u51fd\u6570: \u6267\u884c Lua \u51fd\u6570\u3002\u5b83\u63a5\u6536\u4e24\u4e2a\u53c2\u6570\uff1a<code>params</code> (\u5176\u53c2\u6570\u8868) \u548c <code>deps</code> (\u5176\u4f9d\u8d56\u9879\u7684\u8f93\u51fa\u8868)\u3002\u8be5\u51fd\u6570\u5fc5\u987b\u8fd4\u56de\uff1a<ol> <li><code>boolean</code>: <code>true</code> \u8868\u793a\u6210\u529f\uff0c<code>false</code> \u8868\u793a\u5931\u8d25\u3002</li> <li><code>string</code>: \u63cf\u8ff0\u7ed3\u679c\u7684\u6d88\u606f\u3002</li> <li><code>table</code> (\u53ef\u9009): \u5176\u4ed6\u4efb\u52a1\u53ef\u4ee5\u4f9d\u8d56\u7684\u8f93\u51fa\u8868\u3002</li> </ol> </li> </ul> </li> </ul>"},{"location":"zh/core-concepts/#_5","title":"\u4f9d\u8d56\u4e0e\u6267\u884c\u6d41\u7a0b","text":"<ul> <li><code>depends_on</code> (string \u6216 table): \u5728\u6b64\u4efb\u52a1\u8fd0\u884c\u4e4b\u524d\u5fc5\u987b\u6210\u529f\u5b8c\u6210\u7684\u4efb\u52a1\u540d\u79f0\u5217\u8868\u3002</li> <li><code>next_if_fail</code> (string \u6216 table): \u4ec5\u5f53 \u6b64\u4efb\u52a1\u5931\u8d25\u65f6\u624d\u8fd0\u884c\u7684\u4efb\u52a1\u540d\u79f0\u5217\u8868\u3002\u8fd9\u5bf9\u4e8e\u6e05\u7406\u6216\u901a\u77e5\u4efb\u52a1\u5f88\u6709\u7528\u3002</li> <li><code>async</code> (boolean): \u5982\u679c\u4e3a <code>true</code>\uff0c\u4efb\u52a1\u5c06\u5728\u540e\u53f0\u8fd0\u884c\uff0c\u8fd0\u884c\u5668\u4e0d\u4f1a\u7b49\u5f85\u5b83\u5b8c\u6210\u518d\u5f00\u59cb\u6267\u884c\u987a\u5e8f\u4e2d\u7684\u4e0b\u4e00\u4e2a\u4efb\u52a1\u3002</li> </ul>"},{"location":"zh/core-concepts/#_6","title":"\u9519\u8bef\u5904\u7406\u4e0e\u7a33\u5065\u6027","text":"<ul> <li><code>retries</code> (number): \u5982\u679c\u4efb\u52a1\u5931\u8d25\uff0c\u91cd\u8bd5\u7684\u6b21\u6570\u3002\u9ed8\u8ba4\u4e3a <code>0</code>\u3002</li> <li><code>timeout</code> (string): \u4e00\u4e2a\u6301\u7eed\u65f6\u95f4 (\u4f8b\u5982 <code>\"10s\"</code>, <code>\"1m\"</code>), \u5982\u679c\u4efb\u52a1\u4ecd\u5728\u8fd0\u884c\uff0c\u5219\u5728\u6b64\u65f6\u95f4\u540e\u7ec8\u6b62\u3002</li> </ul>"},{"location":"zh/core-concepts/#_7","title":"\u6761\u4ef6\u6267\u884c","text":"<ul> <li><code>run_if</code> (string \u6216 function): \u9664\u975e\u6ee1\u8db3\u6b64\u6761\u4ef6\uff0c\u5426\u5219\u5c06\u8df3\u8fc7\u8be5\u4efb\u52a1\u3002<ul> <li>\u4f5c\u4e3a\u5b57\u7b26\u4e32: \u4e00\u4e2a shell \u547d\u4ee4\u3002\u9000\u51fa\u4ee3\u7801 <code>0</code> \u8868\u793a\u6761\u4ef6\u6ee1\u8db3\u3002</li> <li>\u4f5c\u4e3a\u51fd\u6570: \u4e00\u4e2a\u8fd4\u56de <code>true</code> \u8868\u793a\u4efb\u52a1\u5e94\u8fd0\u884c\u7684 Lua \u51fd\u6570\u3002</li> </ul> </li> <li><code>abort_if</code> (string \u6216 function): \u5982\u679c\u6ee1\u8db3\u6b64\u6761\u4ef6\uff0c\u6574\u4e2a\u5de5\u4f5c\u6d41\u5c06\u88ab\u4e2d\u6b62\u3002<ul> <li>\u4f5c\u4e3a\u5b57\u7b26\u4e32: \u4e00\u4e2a shell \u547d\u4ee4\u3002\u9000\u51fa\u4ee3\u7801 <code>0</code> \u8868\u793a\u4e2d\u6b62\u3002</li> <li>\u4f5c\u4e3a\u51fd\u6570: \u4e00\u4e2a\u8fd4\u56de <code>true</code> \u8868\u793a\u4e2d\u6b62\u7684 Lua \u51fd\u6570\u3002</li> </ul> </li> </ul>"},{"location":"zh/core-concepts/#_8","title":"\u751f\u547d\u5468\u671f\u94a9\u5b50","text":"<ul> <li><code>pre_exec</code> (function): \u5728\u4e3b <code>command</code> \u4e4b\u524d \u8fd0\u884c\u7684 Lua \u51fd\u6570\u3002</li> <li><code>post_exec</code> (function): \u5728\u4e3b <code>command</code> \u6210\u529f\u5b8c\u6210 \u4e4b\u540e \u8fd0\u884c\u7684 Lua \u51fd\u6570\u3002</li> </ul>"},{"location":"zh/core-concepts/#_9","title":"\u53ef\u91cd\u7528\u6027","text":"<ul> <li><code>uses</code> (table): \u6307\u5b9a\u4ece\u53e6\u4e00\u4e2a\u6587\u4ef6\uff08\u901a\u8fc7 <code>import</code> \u52a0\u8f7d\uff09\u7684\u9884\u5b9a\u4e49\u4efb\u52a1\u4f5c\u4e3a\u57fa\u7840\u3002\u7136\u540e\uff0c\u5f53\u524d\u4efb\u52a1\u5b9a\u4e49\u53ef\u4ee5\u8986\u76d6 <code>params</code> \u6216 <code>description</code> \u7b49\u5c5e\u6027\u3002</li> <li><code>params</code> (table): \u53ef\u4ee5\u4f20\u9012\u7ed9\u4efb\u52a1\u7684 <code>command</code> \u51fd\u6570\u7684\u952e\u503c\u5bf9\u5b57\u5178\u3002</li> <li><code>artifacts</code> (string \u6216 table): \u4e00\u4e2a\u6587\u4ef6\u6a21\u5f0f (glob) \u6216\u6a21\u5f0f\u5217\u8868\uff0c\u6307\u5b9a\u6210\u529f\u8fd0\u884c\u540e\u5e94\u5c06\u4efb\u52a1 <code>workdir</code> \u4e2d\u7684\u54ea\u4e9b\u6587\u4ef6\u4fdd\u5b58\u4e3a\u5de5\u4ef6\u3002</li> <li><code>consumes</code> (string \u6216 table): \u524d\u4e00\u4e2a\u4efb\u52a1\u7684\u5de5\u4ef6\u540d\u79f0\uff08\u6216\u540d\u79f0\u5217\u8868\uff09\uff0c\u5728\u8fd0\u884c\u6b64\u4efb\u52a1\u4e4b\u524d\u5e94\u5c06\u5176\u590d\u5236\u5230\u6b64\u4efb\u52a1\u7684 <code>workdir</code> \u4e2d\u3002</li> </ul>"},{"location":"zh/core-concepts/#_10","title":"\u5de5\u4ef6\u7ba1\u7406","text":"<p>Sloth-Runner \u5141\u8bb8\u4efb\u52a1\u901a\u8fc7\u5de5\u4ef6\u673a\u5236\u76f8\u4e92\u5171\u4eab\u6587\u4ef6\u3002\u4e00\u4e2a\u4efb\u52a1\u53ef\u4ee5\u201c\u751f\u4ea7\u201d\u4e00\u4e2a\u6216\u591a\u4e2a\u6587\u4ef6\u4f5c\u4e3a\u5de5\u4ef6\uff0c\u540e\u7eed\u4efb\u52a1\u53ef\u4ee5\u201c\u6d88\u8d39\u201d\u8fd9\u4e9b\u5de5\u4ef6\u3002</p> <p>\u8fd9\u5bf9\u4e8e CI/CD \u7ba1\u9053\u975e\u5e38\u6709\u7528\uff0c\u5176\u4e2d\u6784\u5efa\u6b65\u9aa4\u53ef\u80fd\u4f1a\u751f\u6210\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\uff08\u5de5\u4ef6\uff09\uff0c\u7136\u540e\u7531\u6d4b\u8bd5\u6216\u90e8\u7f72\u6b65\u9aa4\u4f7f\u7528\u3002</p>"},{"location":"zh/core-concepts/#_11","title":"\u5de5\u4f5c\u539f\u7406","text":"<ol> <li> <p>\u751f\u4ea7\u5de5\u4ef6: \u5c06 <code>artifacts</code> \u952e\u6dfb\u52a0\u5230\u60a8\u7684\u4efb\u52a1\u5b9a\u4e49\u4e2d\u3002\u8be5\u503c\u53ef\u4ee5\u662f\u5355\u4e2a\u6587\u4ef6\u6a21\u5f0f (\u4f8b\u5982 <code>\"report.txt\"</code>) \u6216\u5217\u8868 (\u4f8b\u5982 <code>{\"*.log\", \"app.bin\"}</code>)\u3002\u4efb\u52a1\u6210\u529f\u8fd0\u884c\u540e\uff0c\u8fd0\u884c\u5668\u5c06\u5728\u4efb\u52a1\u7684 <code>workdir</code> \u4e2d\u67e5\u627e\u4e0e\u8fd9\u4e9b\u6a21\u5f0f\u5339\u914d\u7684\u6587\u4ef6\uff0c\u5e76\u5c06\u5b83\u4eec\u590d\u5236\u5230\u7ba1\u9053\u7684\u5171\u4eab\u5de5\u4ef6\u5b58\u50a8\u4e2d\u3002</p> </li> <li> <p>\u6d88\u8d39\u5de5\u4ef6: \u5c06 <code>consumes</code> \u952e\u6dfb\u52a0\u5230\u53e6\u4e00\u4e2a\u4efb\u52a1\u7684\u5b9a\u4e49\u4e2d\uff08\u901a\u5e38 <code>depends_on</code> \u751f\u4ea7\u8005\u4efb\u52a1\uff09\u3002\u8be5\u503c\u5e94\u8be5\u662f\u60a8\u8981\u4f7f\u7528\u7684\u5de5\u4ef6\u7684\u6587\u4ef6\u540d (\u4f8b\u5982 <code>\"report.txt\"</code>)\u3002\u5728\u6b64\u4efb\u52a1\u8fd0\u884c\u4e4b\u524d\uff0c\u8fd0\u884c\u5668\u4f1a\u5c06\u6307\u5b9a\u7684\u5de5\u4ef6\u4ece\u5171\u4eab\u5b58\u50a8\u590d\u5236\u5230\u6b64\u4efb\u52a1\u7684 <code>workdir</code> \u4e2d\uff0c\u4f7f\u5176\u53ef\u7528\u4e8e <code>command</code>\u3002</p> </li> </ol>"},{"location":"zh/core-concepts/#_12","title":"\u5de5\u4ef6\u793a\u4f8b","text":"<pre><code>Modern DSLs = {\n  [\"ci-pipeline\"] = {\n    description = \"\u6f14\u793a\u5de5\u4ef6\u7684\u4f7f\u7528\u3002\",\n    create_workdir_before_run = true,\n    tasks = {\n      {\n        name = \"build\",\n        description = \"\u521b\u5efa\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\u5e76\u5c06\u5176\u58f0\u660e\u4e3a\u5de5\u4ef6\u3002\",\n        command = \"echo 'binary_content' &gt; app.bin\",\n        artifacts = {\"app.bin\"}\n      },\n      {\n        name = \"test\",\n        description = \"\u6d88\u8d39\u4e8c\u8fdb\u5236\u6587\u4ef6\u4ee5\u8fd0\u884c\u6d4b\u8bd5\u3002\",\n        depends_on = \"build\",\n        consumes = {\"app.bin\"},\n        command = function(params)\n          -- \u6b64\u65f6, 'app.bin' \u5b58\u5728\u4e8e\u6b64\u4efb\u52a1\u7684 workdir \u4e2d\n          local content, err = fs.read(params.workdir .. \"/app.bin\")\n          if content == \"binary_content\" then\n            log.info(\"\u6210\u529f\u6d88\u8d39\u5de5\u4ef6\uff01\")\n            return true\n          else\n            return false, \"\u5de5\u4ef6\u5185\u5bb9\u4e0d\u6b63\u786e\uff01\"\n          end\n        end\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"zh/core-concepts/#_13","title":"\u5168\u5c40\u51fd\u6570","text":"<p><code>sloth-runner</code> \u5728 Lua \u73af\u5883\u4e2d\u63d0\u4f9b\u5168\u5c40\u51fd\u6570\u4ee5\u5e2e\u52a9\u7f16\u6392\u5de5\u4f5c\u6d41\u3002</p>"},{"location":"zh/core-concepts/#importpath","title":"<code>import(path)</code>","text":"<p>\u52a0\u8f7d\u53e6\u4e00\u4e2a Lua \u6587\u4ef6\u5e76\u8fd4\u56de\u5176\u8fd4\u56de\u7684\u503c\u3002\u8fd9\u662f\u521b\u5efa\u53ef\u91cd\u7528\u4efb\u52a1\u6a21\u5757\u7684\u4e3b\u8981\u673a\u5236\u3002\u8def\u5f84\u662f\u76f8\u5bf9\u4e8e\u8c03\u7528 <code>import</code> \u7684\u6587\u4ef6\u7684\u3002</p> <p>\u793a\u4f8b (<code>reusable_tasks.sloth</code>): <pre><code>-- \u5bfc\u5165\u4e00\u4e2a\u8fd4\u56de\u4efb\u52a1\u5b9a\u4e49\u8868\u7684\u6a21\u5757\nlocal docker_tasks = import(\"shared/docker.sloth\")\n\nModern DSLs = {\n  main = {\n    tasks = {\n      {\n        -- \u4f7f\u7528\u5bfc\u5165\u6a21\u5757\u4e2d\u7684 'build' \u4efb\u52a1\n        uses = docker_tasks.build,\n        params = { image_name = \"my-app\" }\n      }\n    }\n  }\n}\n</code></pre></p>"},{"location":"zh/core-concepts/#paralleltasks","title":"<code>parallel(tasks)</code>","text":"<p>\u5e76\u53d1\u6267\u884c\u4efb\u52a1\u5217\u8868\uff0c\u5e76\u7b49\u5f85\u6240\u6709\u4efb\u52a1\u5b8c\u6210\u3002</p> <ul> <li><code>tasks</code> (table): \u8981\u5e76\u884c\u8fd0\u884c\u7684\u4efb\u52a1\u8868\u5217\u8868\u3002</li> </ul> <p>\u793a\u4f8b: <pre><code>command = function()\n  log.info(\"\u5e76\u884c\u542f\u52a83\u4e2a\u4efb\u52a1...\")\n  local results, err = parallel({\n    { name = \"short_task\", command = \"sleep 1\" },\n    { name = \"medium_task\", command = \"sleep 2\" },\n    { name = \"long_task\", command = \"sleep 3\" }\n  })\n  if err then\n    return false, \"\u5e76\u884c\u6267\u884c\u5931\u8d25\"\n  end\n  return true, \"\u6240\u6709\u5e76\u884c\u4efb\u52a1\u5df2\u5b8c\u6210\u3002\"\nend\n</code></pre></p>"},{"location":"zh/core-concepts/#exporttable","title":"<code>export(table)</code>","text":"<p>\u5c06\u6570\u636e\u4ece\u811a\u672c\u7684\u4efb\u4f55\u4f4d\u7f6e\u5bfc\u51fa\u5230 CLI\u3002\u5f53\u4f7f\u7528 <code>--return</code> \u6807\u5fd7\u65f6\uff0c\u6240\u6709\u5bfc\u51fa\u7684\u8868\u90fd\u4f1a\u4e0e\u6700\u7ec8\u4efb\u52a1\u7684\u8f93\u51fa\u5408\u5e76\u6210\u4e00\u4e2a JSON \u5bf9\u8c61\u3002</p> <ul> <li><code>table</code>: \u8981\u5bfc\u51fa\u7684 Lua \u8868\u3002</li> </ul> <p>\u793a\u4f8b: <pre><code>command = function()\n  export({ important_value = \"\u6765\u81ea\u4efb\u52a1\u4e2d\u95f4\u7684\u6570\u636e\" })\n  return true, \"\u4efb\u52a1\u5b8c\u6210\", { final_output = \"\u4e00\u4e9b\u7ed3\u679c\" }\nend\n</code></pre> \u4f7f\u7528 <code>--return</code> \u8fd0\u884c\u5c06\u4ea7\u751f\uff1a <pre><code>{\n  \"important_value\": \"\u6765\u81ea\u4efb\u52a1\u4e2d\u95f4\u7684\u6570\u636e\",\n  \"final_output\": \"\u4e00\u4e9b\u7ed3\u679c\"\n}\n</code></pre></p>"},{"location":"zh/distributed/","title":"\u5206\u5e03\u5f0f\u4efb\u52a1\u6267\u884c","text":"<p><code>sloth-runner</code> \u652f\u6301\u5206\u5e03\u5f0f\u4efb\u52a1\u6267\u884c\uff0c\u5141\u8bb8\u60a8\u5728\u8fdc\u7a0b\u4ee3\u7406\u4e0a\u8fd0\u884c\u4efb\u52a1\u3002\u8fd9\u4f7f\u5f97\u53ef\u6269\u5c55\u7684\u5206\u5e03\u5f0f\u5de5\u4f5c\u6d41\u6210\u4e3a\u53ef\u80fd\uff0c\u5176\u4e2d\u7ba1\u9053\u7684\u4e0d\u540c\u90e8\u5206\u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u673a\u5668\u4e0a\u6267\u884c\u3002</p>"},{"location":"zh/distributed/#_2","title":"\u5de5\u4f5c\u539f\u7406","text":"<p><code>sloth-runner</code> \u4e2d\u7684\u5206\u5e03\u5f0f\u6267\u884c\u6a21\u578b\u9075\u5faa\u4e3b\u4ece\u67b6\u6784\uff1a</p> <ol> <li>\u4e3b\u8282\u70b9\uff1a \u4e3b\u8981\u7684 <code>sloth-runner</code> \u5b9e\u4f8b\u5145\u5f53\u4e3b\u8282\u70b9\u3002\u5b83\u89e3\u6790\u5de5\u4f5c\u6d41\u5b9a\u4e49\uff0c\u8bc6\u522b\u914d\u7f6e\u4e3a\u5728\u8fdc\u7a0b\u4ee3\u7406\u4e0a\u8fd0\u884c\u7684\u4efb\u52a1\uff0c\u5e76\u5206\u6d3e\u5b83\u4eec\u3002</li> <li>\u4ee3\u7406\uff1a \u5728\u8fdc\u7a0b\u673a\u5668\u4e0a\u4ee5 <code>agent</code> \u6a21\u5f0f\u8fd0\u884c\u7684 <code>sloth-runner</code> \u5b9e\u4f8b\u3002\u5b83\u4fa6\u542c\u6765\u81ea\u4e3b\u8282\u70b9\u7684\u4f20\u5165\u4efb\u52a1\u6267\u884c\u8bf7\u6c42\uff0c\u6267\u884c\u4efb\u52a1\uff0c\u5e76\u5c06\u7ed3\u679c\u53d1\u56de\u3002</li> </ol>"},{"location":"zh/distributed/#_3","title":"\u914d\u7f6e\u8fdc\u7a0b\u4efb\u52a1","text":"<p>\u8981\u5728\u8fdc\u7a0b\u4ee3\u7406\u4e0a\u8fd0\u884c\u4efb\u52a1\uff0c\u60a8\u9700\u8981\u5728\u4efb\u52a1\u7ec4\u6216\u5355\u4e2a\u4efb\u52a1\u5b9a\u4e49\u4e2d\u6307\u5b9a <code>delegate_to</code> \u5b57\u6bb5\u3002</p>"},{"location":"zh/distributed/#1","title":"1. \u5728\u4efb\u52a1\u7ec4\u7ea7\u522b\u59d4\u6258\u7ed9\u4ee3\u7406","text":"<p>\u60a8\u53ef\u4ee5\u4f7f\u7528 <code>delegate_to</code> \u5b57\u6bb5\u76f4\u63a5\u5728 <code>Modern DSLs</code> \u7ec4\u4e2d\u5b9a\u4e49\u4ee3\u7406\u3002\u6b64\u7ec4\u4e2d\u7684\u6240\u6709\u4efb\u52a1\u90fd\u5c06\u59d4\u6258\u7ed9\u6b64\u4ee3\u7406\uff0c\u9664\u975e\u88ab\u4efb\u52a1\u7279\u5b9a\u7684 <code>delegate_to</code> \u8986\u76d6\u3002</p> <pre><code>Modern DSLs = {\n  my_distributed_group = {\n    description = \"\u4e00\u4e2a\u5305\u542b\u5206\u5e03\u5f0f\u4efb\u52a1\u7684\u4efb\u52a1\u7ec4\u3002\",\n    delegate_to = { address = \"localhost:50051\" }, -- \u4e3a\u6574\u4e2a\u7ec4\u5b9a\u4e49\u4ee3\u7406\n    tasks = {\n      {\n        name = \"remote_hello\",\n        description = \"\u5728\u8fdc\u7a0b\u4ee3\u7406\u4e0a\u8fd0\u884c hello world \u4efb\u52a1\u3002\",\n        -- \u6b64\u5904\u4e0d\u9700\u8981 'delegate_to' \u5b57\u6bb5\uff0c\u5b83\u7ee7\u627f\u81ea\u7ec4\n        command = function(params)\n          log.info(\"\u6765\u81ea\u8fdc\u7a0b\u4ee3\u7406\u7684\u95ee\u5019\uff01\")\n          return true, \"\u8fdc\u7a0b\u4efb\u52a1\u5df2\u6267\u884c\u3002\"\n        end\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"zh/distributed/#2","title":"2. \u5728\u4efb\u52a1\u7ea7\u522b\u59d4\u6258\u7ed9\u4ee3\u7406","text":"<p>\u6216\u8005\uff0c\u60a8\u53ef\u4ee5\u76f4\u63a5\u5728\u5355\u4e2a\u4efb\u52a1\u4e0a\u6307\u5b9a <code>delegate_to</code> \u5b57\u6bb5\u3002\u8fd9\u5c06\u8986\u76d6\u4efb\u4f55\u7ec4\u7ea7\u522b\u7684\u59d4\u6258\u6216\u5141\u8bb8\u5373\u5e2d\u8fdc\u7a0b\u6267\u884c\u3002</p> <pre><code>Modern DSLs = {\n  my_group = {\n    description = \"\u4e00\u4e2a\u5305\u542b\u7279\u5b9a\u8fdc\u7a0b\u4efb\u52a1\u7684\u4efb\u52a1\u7ec4\u3002\",\n    tasks = {\n      {\n        name = \"specific_remote_task\",\n        description = \"\u5728\u7279\u5b9a\u8fdc\u7a0b\u4ee3\u7406\u4e0a\u8fd0\u884c\u6b64\u4efb\u52a1\u3002\",\n        delegate_to = { address = \"192.168.1.100:50051\" }, -- \u4ec5\u4e3a\u6b64\u4efb\u52a1\u5b9a\u4e49\u4ee3\u7406\n        command = function(params)\n          log.info(\"\u6765\u81ea\u7279\u5b9a\u8fdc\u7a0b\u4ee3\u7406\u7684\u95ee\u5019\uff01\")\n          return true, \"\u7279\u5b9a\u8fdc\u7a0b\u4efb\u52a1\u5df2\u6267\u884c\u3002\"\n        end\n      },\n      {\n        name = \"local_task\",\n        description = \"\u6b64\u4efb\u52a1\u5728\u672c\u5730\u8fd0\u884c\u3002\",\n        command = \"echo '\u6765\u81ea\u672c\u5730\u673a\u5668\u7684\u95ee\u5019\uff01'\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"zh/distributed/#_4","title":"\u8fd0\u884c\u4ee3\u7406","text":"<p>\u8981\u4ee5\u4ee3\u7406\u6a21\u5f0f\u542f\u52a8 <code>sloth-runner</code> \u5b9e\u4f8b\uff0c\u8bf7\u4f7f\u7528 <code>agent</code> \u547d\u4ee4\uff1a</p> <pre><code>sloth-runner agent -p 50051\n</code></pre> <ul> <li><code>-p, --port</code>\uff1a\u6307\u5b9a\u4ee3\u7406\u5e94\u4fa6\u542c\u7684\u7aef\u53e3\u3002\u9ed8\u8ba4\u4e3a <code>50051</code>\u3002</li> </ul> <p>\u5f53\u4ee3\u7406\u542f\u52a8\u65f6\uff0c\u5b83\u5c06\u4fa6\u542c\u6765\u81ea\u4e3b <code>sloth-runner</code> \u5b9e\u4f8b\u7684\u4f20\u5165 gRPC \u8bf7\u6c42\u3002\u6536\u5230\u4efb\u52a1\u540e\uff0c\u5b83\u5c06\u5728\u5176\u672c\u5730\u73af\u5883\u4e2d\u6267\u884c\u4efb\u52a1\uff0c\u5e76\u5c06\u7ed3\u679c\u4ee5\u53ca\u4efb\u4f55\u66f4\u65b0\u7684\u5de5\u4f5c\u533a\u6587\u4ef6\u8fd4\u56de\u7ed9\u4e3b\u8282\u70b9\u3002</p>"},{"location":"zh/distributed/#_5","title":"\u5de5\u4f5c\u533a\u540c\u6b65","text":"<p>\u5f53\u4efb\u52a1\u5206\u6d3e\u5230\u8fdc\u7a0b\u4ee3\u7406\u65f6\uff0c<code>sloth-runner</code> \u4f1a\u81ea\u52a8\u5904\u7406\u4efb\u52a1\u5de5\u4f5c\u533a\u7684\u540c\u6b65\uff1a</p> <ol> <li>\u4e3b\u8282\u70b9\u5230\u4ee3\u7406\uff1a \u4e3b\u8282\u70b9\u521b\u5efa\u5f53\u524d\u4efb\u52a1\u5de5\u4f5c\u76ee\u5f55\u7684 tarball\uff0c\u5e76\u5c06\u5176\u53d1\u9001\u5230\u4ee3\u7406\u3002</li> <li>\u4ee3\u7406\u6267\u884c\uff1a \u4ee3\u7406\u5c06 tarball \u89e3\u538b\u7f29\u5230\u4e34\u65f6\u76ee\u5f55\u4e2d\uff0c\u5728\u8be5\u76ee\u5f55\u4e2d\u6267\u884c\u4efb\u52a1\uff0c\u5e76\u6355\u83b7\u5bf9\u4e34\u65f6\u76ee\u5f55\u4e2d\u6587\u4ef6\u6240\u505a\u7684\u4efb\u4f55\u66f4\u6539\u3002</li> <li>\u4ee3\u7406\u5230\u4e3b\u8282\u70b9\uff1a \u4efb\u52a1\u5b8c\u6210\u540e\uff0c\u4ee3\u7406\u521b\u5efa\u4fee\u6539\u540e\u7684\u4e34\u65f6\u76ee\u5f55\u7684 tarball\uff0c\u5e76\u5c06\u5176\u53d1\u56de\u7ed9\u4e3b\u8282\u70b9\u3002\u7136\u540e\uff0c\u4e3b\u8282\u70b9\u89e3\u538b\u7f29\u6b64 tarball\uff0c\u7528\u8fdc\u7a0b\u4efb\u52a1\u6240\u505a\u7684\u4efb\u4f55\u66f4\u6539\u66f4\u65b0\u5176\u672c\u5730\u5de5\u4f5c\u533a\u3002</li> </ol>"},{"location":"zh/getting-started/","title":"\u5feb\u901f\u5165\u95e8","text":"<p>\u6b22\u8fce\u4f7f\u7528 Sloth-Runner\uff01\u672c\u6307\u5357\u5c06\u5e2e\u52a9\u60a8\u5feb\u901f\u5f00\u59cb\u4f7f\u7528\u8be5\u5de5\u5177\u3002</p> <p>\ud83d\udcdd \u91cd\u8981\u8bf4\u660e\uff1a \u4ece\u5f53\u524d\u7248\u672c\u5f00\u59cb\uff0cSloth Runner \u5de5\u4f5c\u6d41\u6587\u4ef6\u4f7f\u7528 <code>.sloth</code> \u6269\u5c55\u540d\u800c\u4e0d\u662f <code>.sloth</code>\u3002Lua \u8bed\u6cd5\u4fdd\u6301\u4e0d\u53d8 - \u53ea\u662f\u6587\u4ef6\u6269\u5c55\u540d\u66f4\u6539\u4e3a\u66f4\u597d\u5730\u8bc6\u522b Sloth Runner DSL \u6587\u4ef6\u3002</p>"},{"location":"zh/getting-started/#_2","title":"\u5b89\u88c5","text":"<p>\u8981\u5728\u60a8\u7684\u7cfb\u7edf\u4e0a\u5b89\u88c5 <code>sloth-runner</code>\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u63d0\u4f9b\u7684 <code>install.sh</code> \u811a\u672c\u3002\u6b64\u811a\u672c\u4f1a\u81ea\u52a8\u68c0\u6d4b\u60a8\u7684\u64cd\u4f5c\u7cfb\u7edf\u548c\u67b6\u6784\uff0c\u4ece GitHub \u4e0b\u8f7d\u6700\u65b0\u7248\u672c\uff0c\u5e76\u5c06 <code>sloth-runner</code> \u53ef\u6267\u884c\u6587\u4ef6\u653e\u7f6e\u5728 <code>/usr/local/bin</code> \u4e2d\u3002</p> <pre><code>bash &lt;(curl -sL https://raw.githubusercontent.com/chalkan3-sloth/sloth-runner/master/install.sh)\n</code></pre> <p>\u6ce8\u610f\uff1a <code>install.sh</code> \u811a\u672c\u9700\u8981 <code>sudo</code> \u6743\u9650\u624d\u80fd\u5c06\u53ef\u6267\u884c\u6587\u4ef6\u79fb\u52a8\u5230 <code>/usr/local/bin</code>\u3002</p>"},{"location":"zh/getting-started/#_3","title":"\u57fa\u672c\u7528\u6cd5","text":""},{"location":"zh/getting-started/#_4","title":"\u5806\u6808\u7ba1\u7406","text":"<pre><code># \u521b\u5efa\u65b0\u5806\u6808\nsloth-runner stack new my-app --description \"\u5e94\u7528\u7a0b\u5e8f\u90e8\u7f72\u5806\u6808\"\n\n# \u5728\u5806\u6808\u4e0a\u8fd0\u884c\u5de5\u4f5c\u6d41\nsloth-runner run my-app -f examples/basic_pipeline.sloth\n\n# \u5217\u51fa\u6240\u6709\u5806\u6808\nsloth-runner stack list\n\n# \u67e5\u770b\u5806\u6808\u8be6\u60c5\nsloth-runner stack show my-app\n</code></pre>"},{"location":"zh/getting-started/#_5","title":"\u76f4\u63a5\u5de5\u4f5c\u6d41\u6267\u884c","text":"<p>\u8981\u76f4\u63a5\u8fd0\u884c\u5de5\u4f5c\u6d41\u6587\u4ef6\uff1a</p> <pre><code>sloth-runner run -f examples/basic_pipeline.sloth\n</code></pre> <p>\u8981\u5217\u51fa\u6587\u4ef6\u4e2d\u7684\u4efb\u52a1\uff1a</p> <pre><code>sloth-runner list -f examples/basic_pipeline.sloth\n</code></pre>"},{"location":"zh/getting-started/#_6","title":"\u4e0b\u4e00\u6b65","text":"<p>\u73b0\u5728\u60a8\u5df2\u7ecf\u5b89\u88c5\u5e76\u8fd0\u884c\u4e86 Sloth-Runner\uff0c\u8bf7\u63a2\u7d22\u6838\u5fc3\u6982\u5ff5\u4ee5\u4e86\u89e3\u5982\u4f55\u5b9a\u4e49\u4efb\u52a1\uff0c\u6216\u8005\u76f4\u63a5\u6df1\u5165\u4e86\u89e3\u65b0\u7684\u5185\u7f6e\u6a21\u5757\u4ee5\u4f7f\u7528 Git\u3001Pulumi \u548c Salt \u8fdb\u884c\u9ad8\u7ea7\u81ea\u52a8\u5316\u3002</p> <p>English | Portugu\u00eas | \u4e2d\u6587</p>"},{"location":"zh/nvim-plugin/","title":"\ud83e\udda5 Neovim \u63d2\u4ef6","text":"<p>\u4e3a Neovim/LunarVim \u63d0\u4f9b\u5b8c\u6574\u7684 Sloth Runner DSL \u652f\u6301</p> <p>Sloth Runner Neovim \u63d2\u4ef6\u4e3a\u5904\u7406 <code>.sloth</code> \u5de5\u4f5c\u6d41\u6587\u4ef6\u63d0\u4f9b\u5168\u9762\u7684 IDE \u529f\u80fd\uff0c\u5305\u62ec\u8bed\u6cd5\u9ad8\u4eae\u3001\u4ee3\u7801\u8865\u5168\u548c\u96c6\u6210\u4efb\u52a1\u6267\u884c\u3002</p>"},{"location":"zh/nvim-plugin/#_1","title":"\u2728 \u529f\u80fd\u7279\u6027","text":""},{"location":"zh/nvim-plugin/#_2","title":"\ud83c\udfa8 \u4e30\u5bcc\u7684\u8bed\u6cd5\u9ad8\u4eae","text":"<ul> <li>\u81ea\u5b9a\u4e49\u989c\u8272 \u7528\u4e8e DSL \u5173\u952e\u5b57\u3001\u65b9\u6cd5\u548c\u6a21\u5757</li> <li>\u5b57\u7b26\u4e32\u63d2\u503c \u9ad8\u4eae\u663e\u793a <code>${variable}</code> \u8bed\u6cd5</li> <li>\u6587\u4ef6\u8def\u5f84\u68c0\u6d4b \u7528\u4e8e\u811a\u672c\u548c\u914d\u7f6e\u6587\u4ef6</li> <li>\u73af\u5883\u53d8\u91cf \u9ad8\u4eae\u663e\u793a</li> <li>\u6ce8\u91ca\u652f\u6301 \u5e26\u6709\u62fc\u5199\u68c0\u67e5</li> </ul>"},{"location":"zh/nvim-plugin/#_3","title":"\ud83d\udcc1 \u667a\u80fd\u6587\u4ef6\u68c0\u6d4b","text":"<ul> <li>\u81ea\u52a8\u68c0\u6d4b <code>.sloth</code> \u6587\u4ef6\u5e76\u5e94\u7528\u9002\u5f53\u7684\u9ad8\u4eae</li> <li>\u5411\u540e\u517c\u5bb9 <code>.lua</code> \u6269\u5c55\u540d</li> <li>\u6587\u4ef6\u6d4f\u89c8\u5668\u4e2d\u7684\u81ea\u5b9a\u4e49\u6587\u4ef6\u56fe\u6807 (\ud83e\udda5)</li> </ul>"},{"location":"zh/nvim-plugin/#_4","title":"\u26a1 \u4ee3\u7801\u8865\u5168","text":"<ul> <li>\u667a\u80fd\u8865\u5168 DSL \u65b9\u6cd5\uff1a<code>command</code>\u3001<code>description</code>\u3001<code>timeout</code> \u7b49</li> <li>\u6a21\u5757\u8865\u5168 \u5185\u7f6e\u6a21\u5757\uff1a<code>exec</code>\u3001<code>fs</code>\u3001<code>net</code>\u3001<code>aws</code> \u7b49</li> <li>\u51fd\u6570\u8865\u5168 \u5e38\u7528\u6a21\u5f0f\uff1a<code>task()</code>\u3001<code>workflow.define()</code></li> </ul>"},{"location":"zh/nvim-plugin/#_5","title":"\ud83d\udd27 \u96c6\u6210\u6267\u884c\u5668","text":"<ul> <li>\u8fd0\u884c\u5de5\u4f5c\u6d41 \u76f4\u63a5\u5728 Neovim \u4e2d\u4f7f\u7528 <code>&lt;leader&gt;sr</code></li> <li>\u5217\u51fa\u4efb\u52a1 \u5f53\u524d\u6587\u4ef6\u4e2d\u7684\u4efb\u52a1\u4f7f\u7528 <code>&lt;leader&gt;sl</code></li> <li>\u8bd5\u8fd0\u884c\u652f\u6301 \u7528\u4e8e\u6d4b\u8bd5\u5de5\u4f5c\u6d41</li> </ul>"},{"location":"zh/nvim-plugin/#_6","title":"\ud83d\udccb \u4ee3\u7801\u7247\u6bb5\u548c\u6a21\u677f","text":"<ul> <li>\u5feb\u901f\u4efb\u52a1\u521b\u5efa \u4f7f\u7528 <code>_task</code> \u7f29\u5199</li> <li>\u5de5\u4f5c\u6d41\u6a21\u677f \u4f7f\u7528 <code>_workflow</code> \u7f29\u5199</li> <li>\u51fd\u6570\u6a21\u677f \u4f7f\u7528 <code>_cmd</code> \u7f29\u5199</li> <li>\u81ea\u52a8\u751f\u6210\u6a21\u677f \u7528\u4e8e\u65b0\u7684 <code>.sloth</code> \u6587\u4ef6</li> </ul>"},{"location":"zh/nvim-plugin/#_7","title":"\ud83c\udfaf \u6587\u672c\u5bf9\u8c61\u548c\u5bfc\u822a","text":"<ul> <li>\u9009\u62e9\u4efb\u52a1\u5757 \u4f7f\u7528 <code>vit</code> (visual in task)</li> <li>\u9009\u62e9\u5de5\u4f5c\u6d41\u5757 \u4f7f\u7528 <code>viw</code> (visual in workflow)</li> <li>\u667a\u80fd\u6298\u53e0 \u53ef\u6298\u53e0\u7684\u4ee3\u7801\u6bb5</li> <li>\u667a\u80fd\u7f29\u8fdb \u7528\u4e8e DSL \u94fe\u5f0f\u8c03\u7528</li> </ul>"},{"location":"zh/nvim-plugin/#_8","title":"\ud83d\ude80 \u5feb\u901f\u8bbe\u7f6e","text":""},{"location":"zh/nvim-plugin/#lunarvim","title":"LunarVim \u7528\u6237","text":"<p>\u6dfb\u52a0\u5230\u4f60\u7684 <code>~/.config/lvim/config.lua</code>\uff1a</p> <pre><code>-- \u7981\u7528\u81ea\u52a8\u683c\u5f0f\u5316\uff08\u63a8\u8350\uff09\nlvim.format_on_save.enabled = false\n\n-- \u914d\u7f6e sloth \u6587\u4ef6\u56fe\u6807\nrequire('nvim-web-devicons').setup {\n  override_by_extension = {\n    [\"sloth\"] = {\n      icon = \"\ud83e\udda5\",\n      color = \"#8B4513\",\n      name = \"SlothDSL\"\n    }\n  }\n}\n\n-- sloth runner \u6309\u952e\u6620\u5c04\nlvim.keys.normal_mode[\"&lt;leader&gt;sr\"] = function()\n  local file = vim.api.nvim_buf_get_name(0)\n  if file:match(\"%.sloth$\") then\n    vim.cmd(\"split | terminal sloth-runner run -f \" .. vim.fn.shellescape(file))\n  end\nend\n\nlvim.keys.normal_mode[\"&lt;leader&gt;sl\"] = function()\n  local file = vim.api.nvim_buf_get_name(0)\n  if file:match(\"%.sloth$\") then\n    vim.cmd(\"split | terminal sloth-runner list -f \" .. vim.fn.shellescape(file))\n  end\nend\n\n-- \u624b\u52a8\u683c\u5f0f\u5316\u547d\u4ee4\nlvim.keys.normal_mode[\"&lt;leader&gt;sf\"] = \":SlothFormat&lt;CR&gt;\"\n</code></pre>"},{"location":"zh/nvim-plugin/#neovim_1","title":"\u6807\u51c6 Neovim","text":"<p>\u4f7f\u7528 lazy.nvim\uff1a</p> <pre><code>{\n  dir = \"/path/to/sloth-runner/nvim-plugin\",\n  name = \"sloth-runner\",\n  ft = { \"sloth\" },\n  config = function()\n    require(\"sloth-runner\").setup({\n      runner = {\n        command = \"sloth-runner\",\n        keymaps = {\n          run_file = \"&lt;leader&gt;sr\",\n          list_tasks = \"&lt;leader&gt;sl\",\n          dry_run = \"&lt;leader&gt;st\",\n          debug = \"&lt;leader&gt;sd\",\n        }\n      },\n      completion = {\n        enable = true,\n        snippets = true,\n      },\n      folding = {\n        enable = true,\n        auto_close = false,\n      }\n    })\n  end,\n}\n</code></pre>"},{"location":"zh/nvim-plugin/#_9","title":"\ud83d\udcdd \u6309\u952e\u6620\u5c04","text":"\u6309\u952e \u52a8\u4f5c \u63cf\u8ff0 <code>&lt;leader&gt;sr</code> \u8fd0\u884c\u6587\u4ef6 \u6267\u884c\u5f53\u524d <code>.sloth</code> \u5de5\u4f5c\u6d41 <code>&lt;leader&gt;sl</code> \u5217\u51fa\u4efb\u52a1 \u663e\u793a\u5f53\u524d\u6587\u4ef6\u4e2d\u7684\u6240\u6709\u4efb\u52a1 <code>&lt;leader&gt;st</code> \u8bd5\u8fd0\u884c \u6d4b\u8bd5\u5de5\u4f5c\u6d41\u800c\u4e0d\u6267\u884c <code>&lt;leader&gt;sd</code> \u8c03\u8bd5 \u8fd0\u884c\u5e76\u8f93\u51fa\u8c03\u8bd5\u4fe1\u606f <code>&lt;leader&gt;sf</code> \u683c\u5f0f\u5316 \u683c\u5f0f\u5316\u5f53\u524d\u6587\u4ef6\uff08\u624b\u52a8\uff09"},{"location":"zh/nvim-plugin/#_10","title":"\ud83c\udfa8 \u4ee3\u7801\u7247\u6bb5","text":""},{"location":"zh/nvim-plugin/#_11","title":"\u5feb\u901f\u4efb\u52a1\u521b\u5efa","text":"<p>\u8f93\u5165 <code>_task</code> \u5e76\u6309 Tab\uff1a</p> <pre><code>local task_name = task(\"\")\n    :description(\"\")\n    :command(function(params, deps)\n        -- TODO: \u5b9e\u73b0\n        return true\n    end)\n    :build()\n</code></pre>"},{"location":"zh/nvim-plugin/#_12","title":"\u5feb\u901f\u5de5\u4f5c\u6d41\u521b\u5efa","text":"<p>\u8f93\u5165 <code>_workflow</code> \u5e76\u6309 Tab\uff1a</p> <pre><code>workflow.define(\"\", {\n    description = \"\",\n    version = \"1.0.0\",\n    tasks = {\n        -- \u4efb\u52a1\u5728\u8fd9\u91cc\n    }\n})\n</code></pre>"},{"location":"zh/nvim-plugin/#_13","title":"\u5feb\u901f\u547d\u4ee4\u51fd\u6570","text":"<p>\u8f93\u5165 <code>_cmd</code> \u5e76\u6309 Tab\uff1a</p> <pre><code>:command(function(params, deps)\n    -- TODO: \u5b9e\u73b0\n    return true\nend)\n</code></pre>"},{"location":"zh/nvim-plugin/#_14","title":"\ud83d\udee0\ufe0f \u624b\u52a8\u5b89\u88c5","text":"<ol> <li> <p>\u514b\u9686\u6216\u590d\u5236\u63d2\u4ef6\u6587\u4ef6\uff1a <pre><code>cp -r /path/to/sloth-runner/nvim-plugin ~/.config/nvim/\n</code></pre></p> </li> <li> <p>\u6dfb\u52a0\u5230\u4f60\u7684 Neovim \u914d\u7f6e\uff1a <pre><code>-- \u6dfb\u52a0\u5230 init.lua \u6216 init.vim\nvim.opt.runtimepath:append(\"~/.config/nvim/nvim-plugin\")\n</code></pre></p> </li> <li> <p>\u91cd\u542f Neovim \u5e76\u6253\u5f00 <code>.sloth</code> \u6587\u4ef6</p> </li> </ol>"},{"location":"zh/nvim-plugin/#_15","title":"\ud83d\udc1b \u6545\u969c\u6392\u9664","text":""},{"location":"zh/nvim-plugin/#_16","title":"\u8bed\u6cd5\u9ad8\u4eae\u4e0d\u5de5\u4f5c","text":"<ul> <li>\u786e\u4fdd\u6587\u4ef6\u6709 <code>.sloth</code> \u6269\u5c55\u540d</li> <li>\u5982\u679c\u9700\u8981\uff0c\u624b\u52a8\u8fd0\u884c <code>:set filetype=sloth</code></li> <li>\u68c0\u67e5\u63d2\u4ef6\u6587\u4ef6\u662f\u5426\u5728\u6b63\u786e\u4f4d\u7f6e</li> </ul>"},{"location":"zh/nvim-plugin/#_17","title":"\u6309\u952e\u6620\u5c04\u4e0d\u5de5\u4f5c","text":"<ul> <li>\u9a8c\u8bc1 <code>sloth-runner</code> \u5728\u4f60\u7684 PATH \u4e2d</li> <li>\u68c0\u67e5\u6309\u952e\u662f\u5426\u4e0e\u5176\u4ed6\u63d2\u4ef6\u51b2\u7a81</li> <li>\u4f7f\u7528 <code>:map &lt;leader&gt;sr</code> \u9a8c\u8bc1\u6620\u5c04\u662f\u5426\u5b58\u5728</li> </ul>"},{"location":"zh/nvim-plugin/#_18","title":"\u4ee3\u7801\u8865\u5168\u4e0d\u663e\u793a","text":"<ul> <li>\u786e\u4fdd\u8865\u5168\u5df2\u542f\u7528\uff1a<code>:set completeopt=menu,menuone,noselect</code></li> <li>\u5c1d\u8bd5\u624b\u52a8\u89e6\u53d1 <code>&lt;C-x&gt;&lt;C-o&gt;</code></li> <li>\u68c0\u67e5 omnifunc \u662f\u5426\u5df2\u8bbe\u7f6e\uff1a<code>:set omnifunc?</code></li> </ul>"},{"location":"zh/nvim-plugin/#_19","title":"\ud83d\udcd6 \u793a\u4f8b","text":""},{"location":"zh/nvim-plugin/#_20","title":"\u57fa\u672c\u5de5\u4f5c\u6d41\u6587\u4ef6","text":"<pre><code>-- deployment.sloth\nlocal deploy_task = task(\"deploy_app\")\n    :description(\"\u90e8\u7f72\u5e94\u7528\u5230\u751f\u4ea7\u73af\u5883\")\n    :command(function(params, deps)\n        local result = exec.run(\"kubectl apply -f deployment.yaml\")\n        if not result.success then\n            log.error(\"\u90e8\u7f72\u5931\u8d25: \" .. result.stderr)\n            return false\n        end\n\n        log.info(\"\ud83d\ude80 \u90e8\u7f72\u6210\u529f!\")\n        return true\n    end)\n    :timeout(300)\n    :retries(3)\n    :build()\n\nworkflow.define(\"production_deployment\", {\n    description = \"\u751f\u4ea7\u73af\u5883\u90e8\u7f72\u5de5\u4f5c\u6d41\",\n    version = \"1.0.0\",\n    tasks = { deploy_task }\n})\n</code></pre> <p>\u5b89\u88c5\u63d2\u4ef6\u540e\uff0c\u6b64\u6587\u4ef6\u5c06\u5177\u6709\uff1a - \u8bed\u6cd5\u9ad8\u4eae \u7528\u4e8e\u5173\u952e\u5b57\u3001\u51fd\u6570\u548c\u5b57\u7b26\u4e32 - \u4ee3\u7801\u8865\u5168 \u5728\u8f93\u5165\u65b9\u6cd5\u540d\u65f6 - \u5feb\u901f\u6267\u884c \u4f7f\u7528 <code>&lt;leader&gt;sr</code> - \u4efb\u52a1\u5217\u8868 \u4f7f\u7528 <code>&lt;leader&gt;sl</code></p>"},{"location":"zh/nvim-plugin/#_21","title":"\ud83d\ude80 \u4e0b\u4e00\u6b65","text":"<ul> <li>\u5b66\u4e60 DSL\uff1a \u67e5\u770b \u6838\u5fc3\u6982\u5ff5</li> <li>\u5c1d\u8bd5\u793a\u4f8b\uff1a \u53c2\u89c1 \u793a\u4f8b\u6307\u5357</li> <li>\u9ad8\u7ea7\u529f\u80fd\uff1a \u63a2\u7d22 \u9ad8\u7ea7\u529f\u80fd</li> <li>API \u53c2\u8003\uff1a \u9605\u8bfb Lua API \u6587\u6863</li> </ul> <p>Neovim \u63d2\u4ef6\u8ba9\u7f16\u5199 Sloth \u5de5\u4f5c\u6d41\u53d8\u5f97\u8f7b\u800c\u6613\u4e3e\uff0c\u63d0\u4f9b\u5b8c\u6574\u7684 IDE \u652f\u6301\u3002\u5f00\u59cb\u81ea\u4fe1\u5730\u521b\u5efa\u5f3a\u5927\u7684\u81ea\u52a8\u5316\u5de5\u4f5c\u6d41\uff01\ud83e\udda5\u2728</p>"},{"location":"zh/plugin-development/","title":"\ud83d\udd0c \u63d2\u4ef6\u5f00\u53d1","text":"<p>\u4e3a Sloth Runner \u5e73\u53f0\u6784\u5efa\u6269\u5c55</p> <p>Sloth Runner \u63d0\u4f9b\u4e86\u5f3a\u5927\u7684\u63d2\u4ef6\u7cfb\u7edf\uff0c\u5141\u8bb8\u5f00\u53d1\u8005\u4f7f\u7528\u81ea\u5b9a\u4e49\u529f\u80fd\u6269\u5c55\u5e73\u53f0\u3002\u672c\u6307\u5357\u6db5\u76d6\u4e86\u5f00\u53d1\u81ea\u5df1\u7684\u63d2\u4ef6\u6240\u9700\u4e86\u89e3\u7684\u4e00\u5207\u3002</p>"},{"location":"zh/plugin-development/#_2","title":"\ud83c\udfd7\ufe0f \u63d2\u4ef6\u67b6\u6784","text":""},{"location":"zh/plugin-development/#_3","title":"\u63d2\u4ef6\u7c7b\u578b","text":"<p>Sloth Runner \u652f\u6301\u591a\u79cd\u7c7b\u578b\u7684\u63d2\u4ef6\uff1a</p> <ol> <li>\ud83c\udf19 Lua \u6a21\u5757 - \u4f7f\u7528\u65b0\u529f\u80fd\u548c\u80fd\u529b\u6269\u5c55 DSL</li> <li>\u26a1 \u547d\u4ee4\u5904\u7406\u5668 - \u6dfb\u52a0\u65b0\u7684 CLI \u547d\u4ee4\u548c\u64cd\u4f5c</li> <li>\ud83c\udfa8 UI \u6269\u5c55 - \u589e\u5f3a Web \u4eea\u8868\u677f\u548c\u754c\u9762</li> <li>\ud83d\udd17 \u96c6\u6210 - \u8fde\u63a5\u5916\u90e8\u5de5\u5177\u548c\u670d\u52a1</li> <li>\ud83e\udda5 \u7f16\u8f91\u5668\u63d2\u4ef6 - IDE/\u7f16\u8f91\u5668\u6269\u5c55\uff08\u5982\u6211\u4eec\u7684 Neovim \u63d2\u4ef6\uff09</li> </ol>"},{"location":"zh/plugin-development/#_4","title":"\u6838\u5fc3\u7ec4\u4ef6","text":"<pre><code>sloth-runner/\n\u251c\u2500\u2500 plugins/\n\u2502   \u251c\u2500\u2500 lua-modules/       # Lua DSL \u6269\u5c55\n\u2502   \u251c\u2500\u2500 commands/          # CLI \u547d\u4ee4\u63d2\u4ef6\n\u2502   \u251c\u2500\u2500 ui/               # Web UI \u6269\u5c55\n\u2502   \u251c\u2500\u2500 integrations/     # \u7b2c\u4e09\u65b9\u96c6\u6210\n\u2502   \u2514\u2500\u2500 editors/          # \u7f16\u8f91\u5668/IDE \u63d2\u4ef6\n\u2514\u2500\u2500 internal/\n    \u2514\u2500\u2500 plugin/           # \u63d2\u4ef6\u7cfb\u7edf\u6838\u5fc3\n</code></pre>"},{"location":"zh/plugin-development/#lua","title":"\ud83c\udf19 \u5f00\u53d1 Lua \u6a21\u5757\u63d2\u4ef6","text":""},{"location":"zh/plugin-development/#_5","title":"\u57fa\u672c\u7ed3\u6784","text":"<p>\u521b\u5efa\u4e00\u4e2a\u6269\u5c55 DSL \u7684\u65b0 Lua \u6a21\u5757\uff1a</p> <pre><code>-- plugins/lua-modules/my-module/init.lua\nlocal M = {}\n\n-- \u6a21\u5757\u5143\u6570\u636e\nM._NAME = \"my-module\"\nM._VERSION = \"1.0.0\"\nM._DESCRIPTION = \"Sloth Runner \u7684\u81ea\u5b9a\u4e49\u529f\u80fd\"\n\n-- \u516c\u5171 API\nfunction M.hello(name)\n    return string.format(\"\u4f60\u597d\uff0c%s \u6765\u81ea\u6211\u7684\u81ea\u5b9a\u4e49\u6a21\u5757\uff01\", name or \"\u4e16\u754c\")\nend\n\nfunction M.custom_task(config)\n    return {\n        execute = function(params)\n            log.info(\"\ud83d\udd0c \u6267\u884c\u81ea\u5b9a\u4e49\u4efb\u52a1: \" .. config.name)\n            -- \u81ea\u5b9a\u4e49\u4efb\u52a1\u903b\u8f91\n            return true\n        end,\n        validate = function()\n            return config.name ~= nil\n        end\n    }\nend\n\n-- \u6ce8\u518c\u6a21\u5757\u51fd\u6570\nfunction M.register()\n    -- \u4f7f\u51fd\u6570\u5728 DSL \u4e2d\u53ef\u7528\n    _G.my_module = M\n\n    -- \u6ce8\u518c\u81ea\u5b9a\u4e49\u4efb\u52a1\u7c7b\u578b\n    task.register_type(\"custom\", M.custom_task)\nend\n\nreturn M\n</code></pre>"},{"location":"zh/plugin-development/#_6","title":"\u5728\u5de5\u4f5c\u6d41\u4e2d\u4f7f\u7528\u81ea\u5b9a\u4e49\u6a21\u5757","text":"<pre><code>-- workflow.sloth\nlocal my_task = task(\"test_custom\")\n    :type(\"custom\", { name = \"test\" })\n    :description(\"\u6d4b\u8bd5\u81ea\u5b9a\u4e49\u63d2\u4ef6\")\n    :build()\n\n-- \u76f4\u63a5\u4f7f\u7528\u6a21\u5757\nlocal greeting = my_module.hello(\"\u5f00\u53d1\u8005\")\nlog.info(greeting)\n\nworkflow.define(\"plugin_test\", {\n    description = \"\u6d4b\u8bd5\u81ea\u5b9a\u4e49\u63d2\u4ef6\",\n    tasks = { my_task }\n})\n</code></pre>"},{"location":"zh/plugin-development/#_7","title":"\u63d2\u4ef6\u6ce8\u518c","text":"<p>\u521b\u5efa\u63d2\u4ef6\u6e05\u5355\uff1a</p> <pre><code># plugins/lua-modules/my-module/plugin.yaml\nname: my-module\nversion: 1.0.0\ndescription: Sloth Runner \u7684\u81ea\u5b9a\u4e49\u529f\u80fd\ntype: lua-module\nauthor: \u60a8\u7684\u59d3\u540d\nlicense: MIT\n\nentry_point: init.lua\ndependencies:\n  - sloth-runner: \"&gt;=1.0.0\"\n\npermissions:\n  - filesystem.read\n  - network.http\n  - system.exec\n\nconfiguration:\n  settings:\n    api_key:\n      type: string\n      required: false\n      description: \"\u5916\u90e8\u670d\u52a1\u7684 API \u5bc6\u94a5\"\n</code></pre>"},{"location":"zh/plugin-development/#_8","title":"\u26a1 \u547d\u4ee4\u63d2\u4ef6\u5f00\u53d1","text":""},{"location":"zh/plugin-development/#cli","title":"CLI \u547d\u4ee4\u7ed3\u6784","text":"<pre><code>// plugins/commands/my-command/main.go\npackage main\n\nimport (\n    \"github.com/spf13/cobra\"\n    \"github.com/chalkan3-sloth/sloth-runner/pkg/plugin\"\n)\n\ntype MyCommandPlugin struct {\n    config *MyConfig\n}\n\ntype MyConfig struct {\n    Setting1 string `json:\"setting1\"`\n    Setting2 int    `json:\"setting2\"`\n}\n\nfunc (p *MyCommandPlugin) Name() string {\n    return \"my-command\"\n}\n\nfunc (p *MyCommandPlugin) Command() *cobra.Command {\n    cmd := &amp;cobra.Command{\n        Use:   \"my-command\",\n        Short: \"\u81ea\u5b9a\u4e49\u547d\u4ee4\u529f\u80fd\",\n        Long:  \"\u81ea\u5b9a\u4e49\u547d\u4ee4\u7684\u6269\u5c55\u63cf\u8ff0\",\n        RunE:  p.execute,\n    }\n\n    cmd.Flags().StringVar(&amp;p.config.Setting1, \"setting1\", \"\", \"\u81ea\u5b9a\u4e49\u8bbe\u7f6e\")\n    cmd.Flags().IntVar(&amp;p.config.Setting2, \"setting2\", 0, \"\u53e6\u4e00\u4e2a\u8bbe\u7f6e\")\n\n    return cmd\n}\n\nfunc (p *MyCommandPlugin) execute(cmd *cobra.Command, args []string) error {\n    log.Info(\"\ud83d\udd0c \u6267\u884c\u81ea\u5b9a\u4e49\u547d\u4ee4\uff0c\u8bbe\u7f6e:\", \n        \"setting1\", p.config.Setting1,\n        \"setting2\", p.config.Setting2)\n\n    // \u81ea\u5b9a\u4e49\u547d\u4ee4\u903b\u8f91\n    return nil\n}\n\nfunc main() {\n    plugin := &amp;MyCommandPlugin{\n        config: &amp;MyConfig{},\n    }\n\n    plugin.Register()\n}\n</code></pre>"},{"location":"zh/plugin-development/#_9","title":"\ud83d\udee0\ufe0f \u63d2\u4ef6\u5f00\u53d1\u5de5\u5177","text":""},{"location":"zh/plugin-development/#_10","title":"\u63d2\u4ef6\u751f\u6210\u5668","text":"<p>\u4f7f\u7528\u751f\u6210\u5668\u5feb\u901f\u521b\u5efa\u65b0\u63d2\u4ef6\uff1a</p> <pre><code># \u751f\u6210\u65b0\u7684 Lua \u6a21\u5757\u63d2\u4ef6\nsloth-runner plugin generate --type=lua-module --name=my-module\n\n# \u751f\u6210 CLI \u547d\u4ee4\u63d2\u4ef6\nsloth-runner plugin generate --type=command --name=my-command\n\n# \u751f\u6210 UI \u6269\u5c55\nsloth-runner plugin generate --type=ui --name=my-dashboard\n</code></pre>"},{"location":"zh/plugin-development/#_11","title":"\u5f00\u53d1\u73af\u5883","text":"<pre><code># \u542f\u52a8\u5f00\u53d1\u670d\u52a1\u5668\uff0c\u652f\u6301\u63d2\u4ef6\u70ed\u91cd\u8f7d\nsloth-runner dev --plugins-dir=./plugins\n\n# \u672c\u5730\u6d4b\u8bd5\u63d2\u4ef6\nsloth-runner plugin test ./plugins/my-plugin\n\n# \u6784\u5efa\u63d2\u4ef6\u7528\u4e8e\u5206\u53d1\nsloth-runner plugin build ./plugins/my-plugin --output=dist/\n</code></pre>"},{"location":"zh/plugin-development/#_12","title":"\u63d2\u4ef6\u6d4b\u8bd5","text":"<pre><code>// plugins/my-plugin/plugin_test.go\npackage main\n\nimport (\n    \"testing\"\n    \"github.com/chalkan3-sloth/sloth-runner/pkg/plugin/testing\"\n)\n\nfunc TestMyPlugin(t *testing.T) {\n    // \u521b\u5efa\u6d4b\u8bd5\u73af\u5883\n    env := plugintest.NewEnvironment(t)\n\n    // \u52a0\u8f7d\u63d2\u4ef6\n    plugin, err := env.LoadPlugin(\"./\")\n    if err != nil {\n        t.Fatal(err)\n    }\n\n    // \u6d4b\u8bd5\u63d2\u4ef6\u529f\u80fd\n    result, err := plugin.Execute(map[string]interface{}{\n        \"test_param\": \"value\",\n    })\n\n    if err != nil {\n        t.Fatal(err)\n    }\n\n    // \u9a8c\u8bc1\u7ed3\u679c\n    if result.Status != \"success\" {\n        t.Errorf(\"\u671f\u671b\u6210\u529f\uff0c\u5f97\u5230 %s\", result.Status)\n    }\n}\n</code></pre>"},{"location":"zh/plugin-development/#_13","title":"\ud83d\udce6 \u63d2\u4ef6\u5206\u53d1","text":""},{"location":"zh/plugin-development/#_14","title":"\u63d2\u4ef6\u6ce8\u518c\u8868","text":"<p>\u5c06\u60a8\u7684\u63d2\u4ef6\u53d1\u5e03\u5230 Sloth Runner \u63d2\u4ef6\u6ce8\u518c\u8868\uff1a</p> <pre><code># \u767b\u5f55\u6ce8\u518c\u8868\nsloth-runner registry login\n\n# \u53d1\u5e03\u63d2\u4ef6\nsloth-runner plugin publish ./my-plugin\n\n# \u5b89\u88c5\u5df2\u53d1\u5e03\u7684\u63d2\u4ef6\nsloth-runner plugin install my-username/my-plugin\n</code></pre>"},{"location":"zh/plugin-development/#_15","title":"\u63d2\u4ef6\u5e02\u573a","text":"<p>\u6d4f\u89c8\u548c\u53d1\u73b0\u63d2\u4ef6\uff1a</p> <pre><code># \u641c\u7d22\u63d2\u4ef6\nsloth-runner plugin search \"kubernetes\"\n\n# \u83b7\u53d6\u63d2\u4ef6\u4fe1\u606f\nsloth-runner plugin info kubernetes-operator\n\n# \u4ece\u5e02\u573a\u5b89\u88c5\nsloth-runner plugin install --marketplace kubernetes-operator\n</code></pre>"},{"location":"zh/plugin-development/#_16","title":"\ud83d\udd12 \u5b89\u5168\u6027\u548c\u6700\u4f73\u5b9e\u8df5","text":""},{"location":"zh/plugin-development/#_17","title":"\u5b89\u5168\u6307\u5357","text":"<ol> <li>\ud83d\udee1\ufe0f \u6700\u5c0f\u6743\u9650\u539f\u5219 - \u53ea\u8bf7\u6c42\u5fc5\u8981\u7684\u6743\u9650</li> <li>\ud83d\udd10 \u8f93\u5165\u9a8c\u8bc1 - \u59cb\u7ec8\u9a8c\u8bc1\u7528\u6237\u8f93\u5165\u548c\u914d\u7f6e</li> <li>\ud83d\udeab \u907f\u514d\u5168\u5c40\u72b6\u6001 - \u4fdd\u6301\u63d2\u4ef6\u72b6\u6001\u9694\u79bb</li> <li>\ud83d\udcdd \u9519\u8bef\u5904\u7406 - \u63d0\u4f9b\u6e05\u6670\u7684\u9519\u8bef\u6d88\u606f\u548c\u65e5\u5fd7\u8bb0\u5f55</li> <li>\ud83e\uddea \u6d4b\u8bd5 - \u4e3a\u6240\u6709\u529f\u80fd\u7f16\u5199\u5168\u9762\u7684\u6d4b\u8bd5</li> </ol>"},{"location":"zh/plugin-development/#_18","title":"\u4ee3\u7801\u8d28\u91cf","text":"<pre><code>// \u597d\u7684\uff1a\u6e05\u6670\u7684\u9519\u8bef\u5904\u7406\nfunc (p *MyPlugin) Execute(params map[string]interface{}) (*Result, error) {\n    value, ok := params[\"required_param\"].(string)\n    if !ok {\n        return nil, fmt.Errorf(\"required_param \u5fc5\u987b\u662f\u5b57\u7b26\u4e32\")\n    }\n\n    if value == \"\" {\n        return nil, fmt.Errorf(\"required_param \u4e0d\u80fd\u4e3a\u7a7a\")\n    }\n\n    // \u4f7f\u7528\u9a8c\u8bc1\u7684\u8f93\u5165\u8fdb\u884c\u5904\u7406\n    result := p.process(value)\n    return result, nil\n}\n</code></pre>"},{"location":"zh/plugin-development/#_19","title":"\u6587\u6863\u6807\u51c6","text":"<p>\u6bcf\u4e2a\u63d2\u4ef6\u90fd\u5e94\u5305\u62ec\uff1a</p> <ul> <li>\ud83d\udccb README.md - \u5b89\u88c5\u548c\u4f7f\u7528\u8bf4\u660e</li> <li>\ud83d\udcda API \u6587\u6863 - \u51fd\u6570/\u65b9\u6cd5\u6587\u6863</li> <li>\ud83d\udcd6 \u793a\u4f8b - \u5de5\u4f5c\u4ee3\u7801\u793a\u4f8b</li> <li>\ud83e\uddea \u6d4b\u8bd5 - \u5355\u5143\u6d4b\u8bd5\u548c\u96c6\u6210\u6d4b\u8bd5</li> <li>\ud83d\udcc4 \u8bb8\u53ef\u8bc1 - \u6e05\u6670\u7684\u8bb8\u53ef\u4fe1\u606f</li> </ul>"},{"location":"zh/plugin-development/#_20","title":"\ud83d\udcda \u793a\u4f8b\u548c\u6a21\u677f","text":""},{"location":"zh/plugin-development/#_21","title":"\u5b8c\u6574\u63d2\u4ef6\u793a\u4f8b","text":"<p>\u67e5\u770b\u8fd9\u4e9b\u793a\u4f8b\u63d2\u4ef6\uff1a</p> <ul> <li>Kubernetes Operator Plugin - \u7ba1\u7406 K8s \u8d44\u6e90</li> <li>Slack Integration Plugin - \u53d1\u9001\u901a\u77e5</li> <li>Monitoring Dashboard Plugin - \u81ea\u5b9a\u4e49\u6307\u6807 UI</li> </ul>"},{"location":"zh/plugin-development/#_22","title":"\u63d2\u4ef6\u6a21\u677f","text":"<p>\u4f7f\u7528\u5b98\u65b9\u6a21\u677f\u5feb\u901f\u5f00\u59cb\uff1a</p> <pre><code># \u4f7f\u7528\u6a21\u677f\nsloth-runner plugin init --template=lua-module my-plugin\nsloth-runner plugin init --template=go-command my-command\nsloth-runner plugin init --template=react-ui my-dashboard\n</code></pre>"},{"location":"zh/plugin-development/#_23","title":"\ud83d\udcac \u793e\u533a\u548c\u652f\u6301","text":""},{"location":"zh/plugin-development/#_24","title":"\u83b7\u53d6\u5e2e\u52a9","text":"<ul> <li>\ud83d\udcd6 \u63d2\u4ef6 API \u6587\u6863</li> <li>\ud83d\udcac Discord \u793e\u533a - #plugin-development</li> <li>\ud83d\udc1b GitHub Issues - \u9519\u8bef\u62a5\u544a\u548c\u529f\u80fd\u8bf7\u6c42</li> <li>\ud83d\udce7 \u63d2\u4ef6\u90ae\u4ef6\u5217\u8868 - \u5f00\u53d1\u8ba8\u8bba</li> </ul>"},{"location":"zh/plugin-development/#_25","title":"\u8d21\u732e","text":"<p>\u6211\u4eec\u6b22\u8fce\u63d2\u4ef6\u8d21\u732e\uff01\u8bf7\u53c2\u9605\u6211\u4eec\u7684\u8d21\u732e\u6307\u5357\u4e86\u89e3\u4ee5\u4e0b\u8be6\u60c5\uff1a</p> <ul> <li>\u63d2\u4ef6\u63d0\u4ea4\u6d41\u7a0b</li> <li>\u4ee3\u7801\u5ba1\u67e5\u6307\u5357</li> <li>\u6587\u6863\u8981\u6c42</li> <li>\u6d4b\u8bd5\u6807\u51c6</li> </ul> <p>\u4eca\u5929\u5c31\u5f00\u59cb\u4e3a Sloth Runner \u6784\u5efa\u51fa\u8272\u7684\u63d2\u4ef6\uff01\u5e73\u53f0\u7684\u53ef\u6269\u5c55\u67b6\u6784\u4f7f\u6dfb\u52a0\u60a8\u9700\u8981\u7684\u786e\u5207\u529f\u80fd\u53d8\u5f97\u7b80\u5355\u3002\ud83d\udd0c\u2728</p>"},{"location":"zh/quick-start/","title":"\u26a1 \u5feb\u901f\u6559\u7a0b","text":"<p>\u5b8c\u6574\u7684\u4e2d\u6587\u6587\u6863\uff0c\u8bf7\u8bbf\u95ee\uff1a</p>"},{"location":"zh/quick-start/#_2","title":"\ud83d\ude80 \u5feb\u901f\u5f00\u59cb","text":""},{"location":"zh/quick-start/#_3","title":"\u5b89\u88c5","text":"<pre><code># \u4e0b\u8f7d\ncurl -sSL https://raw.githubusercontent.com/chalkan3-sloth/sloth-runner/master/install.sh | bash\n\n# \u6216\u901a\u8fc7 Go\ngo install github.com/chalkan3-sloth/sloth-runner/cmd/sloth-runner@latest\n</code></pre>"},{"location":"zh/quick-start/#_4","title":"\u7b2c\u4e00\u4e2a\u5de5\u4f5c\u6d41","text":"<p>\u521b\u5efa\u6587\u4ef6 <code>hello.sloth</code>:</p> <pre><code>local hello_task = task(\"hello\")\n    :description(\"\u6211\u7684\u7b2c\u4e00\u4e2a\u4efb\u52a1\")\n    :command(function()\n        print(\"\ud83e\udda5 \u4f60\u597d\uff0c\u6765\u81ea Sloth Runner!\")\n        return true\n    end)\n    :build()\n\nworkflow.define(\"hello_world\", {\n    description = \"\u6211\u7684\u7b2c\u4e00\u4e2a\u5de5\u4f5c\u6d41\",\n    tasks = { hello_task }\n})\n</code></pre> <p>\u8fd0\u884c:</p> <pre><code>sloth-runner run -f hello.sloth\n</code></pre>"},{"location":"zh/quick-start/#_5","title":"\ud83d\udcda \u4e0b\u4e00\u6b65","text":"<ul> <li>\u6838\u5fc3\u6982\u5ff5</li> <li>\u9ad8\u7ea7\u793a\u4f8b</li> <li>\u9ad8\u7ea7\u529f\u80fd</li> </ul> <p>\u5b8c\u6574\u6559\u7a0b\uff0c\u8bf7\u53c2\u9605\uff1a\u4e3b\u6559\u7a0b</p>"},{"location":"zh/repl/","title":"\u4ea4\u4e92\u5f0f REPL","text":"<p><code>sloth-runner repl</code> \u547d\u4ee4\u5c06\u60a8\u5e26\u5165\u4e00\u4e2a\u4ea4\u4e92\u5f0f\u7684 Read-Eval-Print Loop (REPL) \u4f1a\u8bdd\u3002\u8fd9\u662f\u4e00\u4e2a\u5f3a\u5927\u7684\u5de5\u5177\uff0c\u7528\u4e8e\u8c03\u8bd5\u3001\u63a2\u7d22\u548c\u5feb\u901f\u5b9e\u9a8c sloth-runner \u6a21\u5757\u3002</p>"},{"location":"zh/repl/#repl_1","title":"\u542f\u52a8 REPL","text":"<p>\u8981\u542f\u52a8\u4f1a\u8bdd\uff0c\u53ea\u9700\u8fd0\u884c\uff1a <pre><code>sloth-runner repl\n</code></pre></p> <p>\u60a8\u8fd8\u53ef\u4ee5\u9884\u52a0\u8f7d\u4e00\u4e2a\u5de5\u4f5c\u6d41\u6587\u4ef6\uff0c\u4ee5\u4f7f\u5176 <code>Modern DSLs</code> \u548c\u4efb\u4f55\u8f85\u52a9\u51fd\u6570\u5728\u4f1a\u8bdd\u4e2d\u53ef\u7528\u3002\u8fd9\u5bf9\u4e8e\u8c03\u8bd5\u73b0\u6709\u7684\u7ba1\u9053\u975e\u5e38\u6709\u7528\u3002</p> <pre><code>sloth-runner repl -f /path/to/your/pipeline.sloth\n</code></pre>"},{"location":"zh/repl/#_1","title":"\u529f\u80fd","text":""},{"location":"zh/repl/#_2","title":"\u5b9e\u65f6\u73af\u5883","text":"<p>REPL \u63d0\u4f9b\u4e86\u4e00\u4e2a\u5b9e\u65f6\u7684 Lua \u73af\u5883\uff0c\u60a8\u53ef\u4ee5\u5728\u5176\u4e2d\u6267\u884c\u4efb\u4f55 Lua \u4ee3\u7801\u3002\u6240\u6709\u5185\u7f6e\u7684 sloth-runner \u6a21\u5757\uff08<code>aws</code>\u3001<code>docker</code>\u3001<code>fs</code>\u3001<code>log</code> \u7b49\uff09\u90fd\u5df2\u9884\u52a0\u8f7d\u5e76\u53ef\u4f9b\u4f7f\u7528\u3002</p> <pre><code>sloth&gt; log.info(\"\u6765\u81ea REPL \u7684\u4f60\u597d\uff01\")\nsloth&gt; result = fs.read(\"README.md\")\nsloth&gt; print(string.sub(result, 1, 50))\n</code></pre>"},{"location":"zh/repl/#_3","title":"\u81ea\u52a8\u8865\u5168","text":"<p>REPL \u6709\u4e00\u4e2a\u590d\u6742\u7684\u81ea\u52a8\u8865\u5168\u7cfb\u7edf\u3002 - \u5f00\u59cb\u8f93\u5165\u5168\u5c40\u53d8\u91cf\u6216\u6a21\u5757\u7684\u540d\u79f0\uff08\u4f8b\u5982 <code>aws</code>\uff09\u5e76\u6309 <code>Tab</code> \u67e5\u770b\u5efa\u8bae\u3002 - \u8f93\u5165\u6a21\u5757\u540d\u79f0\u540e\u8ddf\u4e00\u4e2a\u70b9\uff08\u4f8b\u5982 <code>docker.</code>\uff09\u5e76\u6309 <code>Tab</code> \u67e5\u770b\u8be5\u6a21\u5757\u4e2d\u6240\u6709\u53ef\u7528\u7684\u51fd\u6570\u3002</p>"},{"location":"zh/repl/#_4","title":"\u5386\u53f2\u8bb0\u5f55","text":"<p>REPL \u4f1a\u4fdd\u7559\u60a8\u7684\u547d\u4ee4\u5386\u53f2\u8bb0\u5f55\u3002\u4f7f\u7528\u5411\u4e0a\u548c\u5411\u4e0b\u7bad\u5934\u952e\u6d4f\u89c8\u4ee5\u524d\u7684\u547d\u4ee4\u3002</p>"},{"location":"zh/repl/#_5","title":"\u4f1a\u8bdd\u793a\u4f8b","text":"<p>\u4ee5\u4e0b\u662f\u4f7f\u7528 REPL \u8c03\u8bd5 Docker \u547d\u4ee4\u7684\u793a\u4f8b\u3002</p> <pre><code>$ sloth-runner repl\nSloth-Runner Interactive REPL\n\u8f93\u5165 'exit' \u6216 'quit' \u79bb\u5f00\u3002\nsloth&gt; result = docker.exec({\"ps\", \"-a\"})\nsloth&gt; print(result.stdout)\nCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES\nsloth&gt; -- \u73b0\u5728\u8ba9\u6211\u4eec\u5c1d\u8bd5\u6784\u5efa\u4e00\u4e2a\u955c\u50cf\nsloth&gt; build_result = docker.build({tag=\"my-test\", path=\"./examples/docker\"})\nsloth&gt; print(build_result.success)\ntrue\nsloth&gt; exit\n\u518d\u89c1\uff01\n</code></pre>"},{"location":"zh/scheduler/","title":"\u4efb\u52a1\u8c03\u5ea6\u5668","text":"<p><code>sloth-runner</code> \u73b0\u5728\u5305\u542b\u4e00\u4e2a\u5185\u7f6e\u7684\u4efb\u52a1\u8c03\u5ea6\u5668\uff0c\u5141\u8bb8\u60a8\u4f7f\u7528 cron \u8bed\u6cd5\u5728\u6307\u5b9a\u7684\u65f6\u95f4\u95f4\u9694\u81ea\u52a8\u6267\u884c\u60a8\u7684 Lua \u5b9a\u4e49\u4efb\u52a1\u3002</p>"},{"location":"zh/scheduler/#_2","title":"\u529f\u80fd","text":"<ul> <li>\u540e\u53f0\u8fdb\u7a0b: \u8c03\u5ea6\u5668\u4f5c\u4e3a\u6301\u4e45\u7684\u540e\u53f0\u8fdb\u7a0b\u8fd0\u884c\uff0c\u72ec\u7acb\u4e8e\u60a8\u7684\u7ec8\u7aef\u4f1a\u8bdd\u3002</li> <li>\u57fa\u4e8e Cron \u7684\u8c03\u5ea6: \u4f7f\u7528\u7075\u6d3b\u7684 cron \u5b57\u7b26\u4e32\u5b9a\u4e49\u4efb\u52a1\u8c03\u5ea6\u3002</li> <li>\u6301\u4e45\u6027: \u8c03\u5ea6\u4efb\u52a1\u4ece\u914d\u7f6e\u6587\u4ef6\u52a0\u8f7d\uff0c\u786e\u4fdd\u5728\u91cd\u542f\u540e\u6062\u590d\u3002</li> <li>\u4e0e\u73b0\u6709\u4efb\u52a1\u96c6\u6210: \u8c03\u5ea6\u5668\u5229\u7528\u73b0\u6709\u7684 <code>sloth-runner run</code> \u547d\u4ee4\u6765\u6267\u884c\u60a8\u7684\u4efb\u52a1\u3002</li> </ul>"},{"location":"zh/scheduler/#scheduleryaml","title":"\u914d\u7f6e: <code>scheduler.yaml</code>","text":"<p>\u8c03\u5ea6\u4efb\u52a1\u5728 YAML \u6587\u4ef6\u4e2d\u5b9a\u4e49\uff0c\u901a\u5e38\u547d\u540d\u4e3a <code>scheduler.yaml</code>\u3002\u6b64\u6587\u4ef6\u6307\u5b9a\u8981\u8fd0\u884c\u7684\u4efb\u52a1\u3001\u5b83\u4eec\u7684\u8c03\u5ea6\u4ee5\u53ca Lua \u6587\u4ef6\u3001\u7ec4\u548c\u4efb\u52a1\u540d\u79f0\u3002</p> <pre><code>scheduled_tasks:\n  - name: \"my_daily_backup\"\n    schedule: \"0 0 * * *\" # \u6bcf\u5929\u5348\u591c\n    task_file: \"examples/my_workflow.sloth\"\n    task_group: \"backup_group\"\n    task_name: \"perform_backup\"\n  - name: \"hourly_report_generation\"\n    schedule: \"0 * * * *\" # \u6bcf\u5c0f\u65f6\n    task_file: \"examples/reporting.sloth\"\n    task_group: \"reports\"\n    task_name: \"generate_report\"\n</code></pre> <p>\u5b57\u6bb5:</p> <ul> <li><code>name</code> (\u5b57\u7b26\u4e32, \u5fc5\u586b): \u8c03\u5ea6\u4efb\u52a1\u7684\u552f\u4e00\u540d\u79f0\u3002</li> <li><code>schedule</code> (\u5b57\u7b26\u4e32, \u5fc5\u586b): \u5b9a\u4e49\u4efb\u52a1\u4f55\u65f6\u8fd0\u884c\u7684 cron \u5b57\u7b26\u4e32\u3002\u652f\u6301\u6807\u51c6 cron \u8bed\u6cd5\u548c\u4e00\u4e9b\u9884\u5b9a\u4e49\u8c03\u5ea6 (\u4f8b\u5982, <code>@every 1h</code>, <code>@daily</code>)\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 robfig/cron \u6587\u6863\u3002</li> <li><code>task_file</code> (\u5b57\u7b26\u4e32, \u5fc5\u586b): Lua \u4efb\u52a1\u5b9a\u4e49\u6587\u4ef6\u7684\u8def\u5f84\u3002</li> <li><code>task_group</code> (\u5b57\u7b26\u4e32, \u5fc5\u586b): Lua \u6587\u4ef6\u4e2d\u7684\u4efb\u52a1\u7ec4\u540d\u79f0\u3002</li> <li><code>task_name</code> (\u5b57\u7b26\u4e32, \u5fc5\u586b): \u5728\u4efb\u52a1\u7ec4\u4e2d\u6267\u884c\u7684\u7279\u5b9a\u4efb\u52a1\u540d\u79f0\u3002</li> </ul>"},{"location":"zh/scheduler/#cli","title":"CLI \u547d\u4ee4","text":""},{"location":"zh/scheduler/#sloth-runner-scheduler-enable","title":"<code>sloth-runner scheduler enable</code>","text":"<p>\u5c06 <code>sloth-runner</code> \u8c03\u5ea6\u5668\u4f5c\u4e3a\u540e\u53f0\u8fdb\u7a0b\u542f\u52a8\u3002\u6b64\u547d\u4ee4\u786e\u4fdd\u8c03\u5ea6\u5668\u6b63\u5728\u8fd0\u884c\u5e76\u51c6\u5907\u597d\u5904\u7406\u8c03\u5ea6\u4efb\u52a1\u3002</p> <pre><code>sloth-runner scheduler enable --scheduler-config scheduler.yaml\n</code></pre> <ul> <li><code>--scheduler-config</code> (\u6216 <code>-c</code>): \u6307\u5b9a <code>scheduler.yaml</code> \u914d\u7f6e\u6587\u4ef6\u7684\u8def\u5f84\u3002\u9ed8\u8ba4\u4e3a\u5f53\u524d\u76ee\u5f55\u4e2d\u7684 <code>scheduler.yaml</code>\u3002</li> </ul> <p>\u6267\u884c\u540e\uff0c\u547d\u4ee4\u5c06\u6253\u5370\u540e\u53f0\u8c03\u5ea6\u5668\u8fdb\u7a0b\u7684 PID\u3002\u5373\u4f7f\u60a8\u7684\u7ec8\u7aef\u4f1a\u8bdd\u5173\u95ed\uff0c\u8c03\u5ea6\u5668\u4e5f\u5c06\u7ee7\u7eed\u8fd0\u884c\u3002</p>"},{"location":"zh/scheduler/#sloth-runner-scheduler-disable","title":"<code>sloth-runner scheduler disable</code>","text":"<p>\u505c\u6b62\u6b63\u5728\u8fd0\u884c\u7684 <code>sloth-runner</code> \u8c03\u5ea6\u5668\u540e\u53f0\u8fdb\u7a0b\u3002</p> <pre><code>sloth-runner scheduler disable\n</code></pre> <p>\u6b64\u547d\u4ee4\u5c06\u5c1d\u8bd5\u4f18\u96c5\u5730\u7ec8\u6b62\u8c03\u5ea6\u5668\u8fdb\u7a0b\u3002\u5982\u679c\u6210\u529f\uff0c\u5b83\u5c06\u5220\u9664\u7531 <code>enable</code> \u547d\u4ee4\u521b\u5efa\u7684 PID \u6587\u4ef6\u3002</p>"},{"location":"zh/scheduler/#sloth-runner-scheduler-list","title":"<code>sloth-runner scheduler list</code>","text":"<p>\u5217\u51fa <code>scheduler.yaml</code> \u914d\u7f6e\u6587\u4ef6\u4e2d\u5b9a\u4e49\u7684\u6240\u6709\u8c03\u5ea6\u4efb\u52a1\u3002\u6b64\u547d\u4ee4\u63d0\u4f9b\u5df2\u914d\u7f6e\u4efb\u52a1\u3001\u5176\u8c03\u5ea6\u548c\u76f8\u5173 Lua \u4efb\u52a1\u8be6\u7ec6\u4fe1\u606f\u7684\u6982\u8ff0\u3002</p> <pre><code>sloth-runner scheduler list --scheduler-config scheduler.yaml\n</code></pre> <ul> <li><code>--scheduler-config</code> (\u6216 <code>-c</code>): \u6307\u5b9a <code>scheduler.yaml</code> \u914d\u7f6e\u6587\u4ef6\u7684\u8def\u5f84\u3002\u9ed8\u8ba4\u4e3a\u5f53\u524d\u76ee\u5f55\u4e2d\u7684 <code>scheduler.yaml</code>\u3002</li> </ul> <p>\u793a\u4f8b\u8f93\u51fa:</p> <pre><code># Configured Scheduled Tasks\n\nNAME                     | SCHEDULE    | FILE                     | GROUP        | TASK\nmy_daily_backup          | 0 0 * * *   | examples/my_workflow.sloth | backup_group | perform_backup\nhourly_report_generation | 0 * * * *   | examples/reporting.sloth   | reports      | generate_report\n</code></pre>"},{"location":"zh/scheduler/#sloth-runner-scheduler-delete-task_name","title":"<code>sloth-runner scheduler delete &lt;task_name&gt;</code>","text":"<p>\u4ece <code>scheduler.yaml</code> \u914d\u7f6e\u6587\u4ef6\u4e2d\u5220\u9664\u7279\u5b9a\u7684\u8c03\u5ea6\u4efb\u52a1\u3002\u6b64\u547d\u4ee4\u5c06\u5220\u9664\u4efb\u52a1\u5b9a\u4e49\uff0c\u8c03\u5ea6\u5668\u5c06\u4e0d\u518d\u6267\u884c\u5b83\u3002</p> <pre><code>sloth-runner scheduler delete my_daily_backup --scheduler-config scheduler.yaml\n</code></pre> <ul> <li><code>&lt;task_name&gt;</code> (\u5b57\u7b26\u4e32, \u5fc5\u586b): \u8981\u5220\u9664\u7684\u8c03\u5ea6\u4efb\u52a1\u7684\u552f\u4e00\u540d\u79f0\u3002</li> <li><code>--scheduler-config</code> (\u6216 <code>-c</code>): \u6307\u5b9a <code>scheduler.yaml</code> \u914d\u7f6e\u6587\u4ef6\u7684\u8def\u5f84\u3002\u9ed8\u8ba4\u4e3a\u5f53\u524d\u76ee\u5f55\u4e2d\u7684 <code>scheduler.yaml</code>\u3002</li> </ul> <p>\u91cd\u8981: \u6b64\u547d\u4ee4\u4f1a\u4fee\u6539\u60a8\u7684 <code>scheduler.yaml</code> \u6587\u4ef6\u3002\u5982\u6709\u5fc5\u8981\uff0c\u8bf7\u786e\u4fdd\u60a8\u6709\u5907\u4efd\u3002\u5982\u679c\u8c03\u5ea6\u5668\u5f53\u524d\u6b63\u5728\u8fd0\u884c\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u7981\u7528\u5e76\u91cd\u65b0\u542f\u7528\u5b83\u624d\u80fd\u4f7f\u66f4\u6539\u7acb\u5373\u751f\u6548\u3002</p>"},{"location":"zh/scheduler/#_3","title":"\u65e5\u5fd7\u548c\u9519\u8bef\u5904\u7406","text":"<p>\u8c03\u5ea6\u5668\u5c06\u5176\u6d3b\u52a8\u548c\u8c03\u5ea6\u4efb\u52a1\u7684\u6267\u884c\u72b6\u6001\u8bb0\u5f55\u5230\u6807\u51c6\u8f93\u51fa\u548c\u6807\u51c6\u9519\u8bef\u3002\u5efa\u8bae\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u8fd0\u884c\u65f6\u5c06\u8fd9\u4e9b\u8f93\u51fa\u91cd\u5b9a\u5411\u5230\u65e5\u5fd7\u6587\u4ef6\u3002</p> <p>\u5982\u679c\u8c03\u5ea6\u4efb\u52a1\u5931\u8d25\uff0c\u8c03\u5ea6\u5668\u5c06\u8bb0\u5f55\u9519\u8bef\u5e76\u7ee7\u7eed\u6267\u884c\u5176\u4ed6\u8c03\u5ea6\u4efb\u52a1\u3002\u5b83\u4e0d\u4f1a\u56e0\u5355\u4e2a\u4efb\u52a1\u5931\u8d25\u800c\u505c\u6b62\u3002</p>"},{"location":"zh/scheduler/#_4","title":"\u793a\u4f8b","text":"<ol> <li> <p>\u521b\u5efa <code>scheduler.yaml</code> \u6587\u4ef6:</p> <pre><code>scheduled_tasks:\n  - name: \"my_test_task\"\n    schedule: \"@every 1m\"\n    task_file: \"examples/basic_pipeline.sloth\"\n    task_group: \"basic_pipeline\"\n    task_name: \"fetch_data\"\n</code></pre> </li> <li> <p>\u542f\u7528\u8c03\u5ea6\u5668:</p> <pre><code>sloth-runner scheduler enable --scheduler-config scheduler.yaml\n</code></pre> </li> <li> <p>\u89c2\u5bdf\u8f93\u51fa\u3002\u6bcf\u5206\u949f\uff0c\u60a8\u5e94\u8be5\u4f1a\u770b\u5230\u6307\u793a <code>my_test_task</code> \u6267\u884c\u7684\u6d88\u606f\u3002</p> </li> <li> <p>\u505c\u6b62\u8c03\u5ea6\u5668:</p> <pre><code>sloth-runner scheduler disable\n</code></pre> </li> </ol>"},{"location":"zh/testing/","title":"\u6d4b\u8bd5\u5de5\u4f5c\u6d41","text":"<p>sloth-runner \u5305\u542b\u4e00\u4e2a\u5185\u7f6e\u7684\u6d4b\u8bd5\u6846\u67b6\uff0c\u5141\u8bb8\u60a8\u4e3a\u4efb\u52a1\u5de5\u4f5c\u6d41\u7f16\u5199\u5355\u5143\u548c\u96c6\u6210\u6d4b\u8bd5\u3002\u4e3a\u60a8\u7684\u81ea\u52a8\u5316\u7f16\u5199\u6d4b\u8bd5\u5bf9\u4e8e\u786e\u4fdd\u53ef\u9760\u6027\u3001\u9632\u6b62\u56de\u5f52\u4ee5\u53ca\u5728\u8fdb\u884c\u66f4\u6539\u65f6\u5145\u6ee1\u4fe1\u5fc3\u81f3\u5173\u91cd\u8981\u3002</p>"},{"location":"zh/testing/#test","title":"<code>test</code> \u547d\u4ee4","text":"<p>\u60a8\u53ef\u4ee5\u4f7f\u7528 <code>sloth-runner test</code> \u547d\u4ee4\u8fd0\u884c\u6d4b\u8bd5\u6587\u4ef6\u3002\u5b83\u9700\u8981\u4e24\u4e2a\u4e3b\u8981\u6587\u4ef6\uff1a\u60a8\u8981\u6d4b\u8bd5\u7684\u5de5\u4f5c\u6d41\u548c\u6d4b\u8bd5\u811a\u672c\u672c\u8eab\u3002</p> <pre><code>sloth-runner test -w &lt;\u5de5\u4f5c\u6d41\u8def\u5f84.sloth&gt; -f &lt;\u6d4b\u8bd5\u6587\u4ef6\u8def\u5f84.sloth&gt;\n</code></pre> <ul> <li><code>-w, --workflow</code>: \u6307\u5b9a\u8981\u6d4b\u8bd5\u7684\u4e3b <code>Modern DSLs</code> \u6587\u4ef6\u7684\u8def\u5f84\u3002</li> <li><code>-f, --file</code>: \u6307\u5b9a\u60a8\u7684\u6d4b\u8bd5\u6587\u4ef6\u7684\u8def\u5f84\u3002</li> </ul>"},{"location":"zh/testing/#_2","title":"\u7f16\u5199\u6d4b\u8bd5","text":"<p>\u6d4b\u8bd5\u662f\u7528 Lua \u7f16\u5199\u7684\uff0c\u5e76\u4f7f\u7528\u6d4b\u8bd5\u8fd0\u884c\u5668\u63d0\u4f9b\u7684\u4e24\u4e2a\u65b0\u7684\u5168\u5c40\u6a21\u5757\uff1a<code>test</code> \u548c <code>assert</code>\u3002</p>"},{"location":"zh/testing/#test_1","title":"<code>test</code> \u6a21\u5757","text":"<p><code>test</code> \u6a21\u5757\u7528\u4e8e\u6784\u5efa\u60a8\u7684\u6d4b\u8bd5\u5e76\u8fd0\u884c\u5de5\u4f5c\u6d41\u4e2d\u7684\u7279\u5b9a\u4efb\u52a1\u3002</p> <ul> <li><code>test.describe(suite_name, function)</code>: \u5c06\u76f8\u5173\u6d4b\u8bd5\u5206\u7ec4\u5230\u4e00\u4e2a\u201c\u5957\u4ef6\u201d\u4e2d\u3002\u8fd9\u7528\u4e8e\u7ec4\u7ec7\u3002</li> <li><code>test.it(function)</code>: \u5b9a\u4e49\u5355\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u3002\u6d4b\u8bd5\u7684\u63cf\u8ff0\u5e94\u5305\u542b\u5728\u6b64\u51fd\u6570\u5185\u7684\u65ad\u8a00\u6d88\u606f\u4e2d\u3002</li> <li><code>test.run_task(task_name)</code>: \u8fd9\u662f\u6d4b\u8bd5\u6846\u67b6\u7684\u6838\u5fc3\u529f\u80fd\u3002\u5b83\u4ece\u52a0\u8f7d\u7684\u5de5\u4f5c\u6d41\u6587\u4ef6\u4e2d\u6309\u540d\u79f0\u6267\u884c\u5355\u4e2a\u4efb\u52a1\u3002\u5b83\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u6267\u884c\u8be6\u7ec6\u4fe1\u606f\u7684 <code>result</code> \u8868\u3002</li> </ul> <p><code>run_task</code> \u8fd4\u56de\u7684 <code>result</code> \u8868\u5177\u6709\u4ee5\u4e0b\u7ed3\u6784\uff1a</p> <pre><code>{\n  success = true, -- \u5e03\u5c14\u503c\uff1a\u5982\u679c\u4efb\u52a1\u6210\u529f\u5219\u4e3a true\uff0c\u5426\u5219\u4e3a false\n  message = \"\u4efb\u52a1\u6267\u884c\u6210\u529f\", -- \u5b57\u7b26\u4e32\uff1a\u4efb\u52a1\u8fd4\u56de\u7684\u6d88\u606f\n  duration = \"1.23ms\", -- \u5b57\u7b26\u4e32\uff1a\u6267\u884c\u6301\u7eed\u65f6\u95f4\n  output = { ... }, -- \u8868\uff1a\u4efb\u52a1\u8fd4\u56de\u7684\u8f93\u51fa\u8868\n  error = nil -- \u5b57\u7b26\u4e32\uff1a\u5982\u679c\u4efb\u52a1\u5931\u8d25\uff0c\u5219\u4e3a\u9519\u8bef\u6d88\u606f\n}\n</code></pre>"},{"location":"zh/testing/#assert","title":"<code>assert</code> \u6a21\u5757","text":"<p><code>assert</code> \u6a21\u5757\u63d0\u4f9b\u7528\u4e8e\u68c0\u67e5\u4efb\u52a1\u6267\u884c\u7ed3\u679c\u7684\u51fd\u6570\u3002</p> <ul> <li><code>assert.is_true(value, message)</code>: \u68c0\u67e5 <code>value</code> \u662f\u5426\u4e3a true\u3002</li> <li><code>assert.equals(actual, expected, message)</code>: \u68c0\u67e5 <code>actual</code> \u503c\u662f\u5426\u7b49\u4e8e <code>expected</code> \u503c\u3002</li> </ul>"},{"location":"zh/testing/#mocking","title":"\u6a21\u5757\u6a21\u62df (Mocking)","text":"<p>\u4e3a\u4e86\u6d4b\u8bd5\u60a8\u7684\u7ba1\u9053\u903b\u8f91\u800c\u65e0\u9700\u8fdb\u884c\u5b9e\u9645\u7684\u5916\u90e8\u8c03\u7528\uff08\u4f8b\u5982\uff0c\u5bf9 AWS\u3001Docker \u6216 Terraform\uff09\uff0c\u6d4b\u8bd5\u6846\u67b6\u5305\u542b\u4e86\u4e00\u4e2a\u5f3a\u5927\u7684\u6a21\u62df\u529f\u80fd\u3002</p>"},{"location":"zh/testing/#_3","title":"\u4e25\u683c\u6a21\u62df\u7b56\u7565","text":"<p>\u6d4b\u8bd5\u8fd0\u884c\u5668\u5f3a\u5236\u6267\u884c \u4e25\u683c\u7684\u6a21\u62df\u7b56\u7565\u3002\u5728\u6d4b\u8bd5\u6a21\u5f0f\u4e0b\u8fd0\u884c\u65f6\uff0c\u4efb\u4f55\u5bf9\u6a21\u5757\u51fd\u6570\uff08\u5982 <code>aws.exec</code> \u6216 <code>docker.build</code>\uff09\u7684\u8c03\u7528\u5982\u679c \u6ca1\u6709 \u88ab\u660e\u786e\u6a21\u62df\uff0c\u5c06\u5bfc\u81f4\u6d4b\u8bd5\u7acb\u5373\u5931\u8d25\u3002\u8fd9\u53ef\u786e\u4fdd\u60a8\u7684\u6d4b\u8bd5\u662f\u5b8c\u5168\u81ea\u5305\u542b\u7684\u3001\u786e\u5b9a\u6027\u7684\uff0c\u5e76\u4e14\u6ca1\u6709\u610f\u5916\u7684\u526f\u4f5c\u7528\u3002</p>"},{"location":"zh/testing/#testmockfunction_name-mock_definition","title":"<code>test.mock(function_name, mock_definition)</code>","text":"<p>\u6b64\u51fd\u6570\u5141\u8bb8\u60a8\u4e3a\u4efb\u4f55\u53ef\u6a21\u62df\u7684\u6a21\u5757\u51fd\u6570\u5b9a\u4e49\u4e00\u4e2a\u4f2a\u9020\u7684\u8fd4\u56de\u503c\u3002</p> <ul> <li><code>function_name</code> (string): \u8981\u6a21\u62df\u7684\u51fd\u6570\u7684\u5168\u540d\uff08\u4f8b\u5982 <code>\"aws.s3.sync\"</code>, <code>\"docker.build\"</code>\uff09\u3002</li> <li><code>mock_definition</code> (table): \u4e00\u4e2a\u5b9a\u4e49\u6a21\u62df\u51fd\u6570\u5e94\u8fd4\u56de\u4ec0\u4e48\u7684\u8868\u3002\u5b83 \u5fc5\u987b \u5305\u542b\u4e00\u4e2a <code>returns</code> \u952e\uff0c\u8be5\u952e\u662f\u4e00\u4e2a\u51fd\u6570\u5c06\u8fd4\u56de\u7684\u503c\u7684\u5217\u8868\u3002</li> </ul> <p><code>returns</code> \u5217\u8868\u81f3\u5173\u91cd\u8981\uff0c\u56e0\u4e3a Lua \u51fd\u6570\u53ef\u4ee5\u8fd4\u56de\u591a\u4e2a\u503c\u3002</p> <p>\u793a\u4f8b:</p> <pre><code>-- \u6a21\u62df\u4e00\u4e2a\u8fd4\u56de\u5355\u4e2a\u7ed3\u679c\u8868\u7684\u51fd\u6570\ntest.mock(\"docker.build\", {\n  returns = {\n    { success = true, stdout = \"\u6210\u529f\u6784\u5efa\u955c\u50cf\" }\n  }\n})\n\n-- \u6a21\u62df\u4e00\u4e2a\u8fd4\u56de\u4e24\u4e2a\u503c\u7684\u51fd\u6570\uff08\u4f8b\u5982\uff0c\u4e00\u4e2a\u503c\u548c\u4e00\u4e2a\u9519\u8bef\uff09\n-- \u8fd9\u6a21\u62df\u4e86\u5bf9 terraform.output \u7684\u6210\u529f\u8c03\u7528\ntest.mock(\"terraform.output\", {\n  returns = { \"my_file.txt\", nil }\n})\n\n-- \u8fd9\u6a21\u62df\u4e86\u5931\u8d25\u7684\u8c03\u7528\ntest.mock(\"terraform.output\", {\n  returns = { nil, \"\u672a\u627e\u5230\u8f93\u51fa\" }\n})\n</code></pre>"},{"location":"zh/testing/#_4","title":"\u5b8c\u6574\u7684\u6a21\u62df\u793a\u4f8b","text":"<p>\u5047\u8bbe\u60a8\u6709\u4e00\u4e2a\u8c03\u7528 <code>aws.exec</code> \u7684\u4efb\u52a1\uff0c\u5e76\u4e14\u5176\u903b\u8f91\u53d6\u51b3\u4e8e\u8f93\u51fa\u3002</p> <p><code>my_workflow.sloth</code> \u4e2d\u7684\u4efb\u52a1: <pre><code>-- ...\n{\n  name = \"check-account\",\n  command = function()\n    local result = aws.exec({\"sts\", \"get-caller-identity\"})\n    local data = data.parse_json(result.stdout)\n    if data.Account == \"123456789012\" then\n      return true, \"\u6b63\u786e\u7684\u5e10\u6237\u3002\"\n    else\n      return false, \"\u9519\u8bef\u7684\u5e10\u6237\u3002\"\n    end\n  end\n}\n-- ...\n</code></pre></p> <p><code>my_test.sloth</code> \u4e2d\u7684\u6d4b\u8bd5: <pre><code>test.describe(\"\u5e10\u6237\u68c0\u67e5\u903b\u8f91\", function()\n  test.it(function()\n    -- \u6a21\u62df aws.exec \u7684\u8fd4\u56de\u503c\n    test.mock(\"aws.exec\", {\n      returns = {\n        {\n          success = true,\n          stdout = '{\"Account\": \"123456789012\"}'\n        }\n      }\n    })\n\n    -- \u8fd0\u884c\u4f7f\u7528\u6a21\u62df\u7684\u4efb\u52a1\n    local result = test.run_task(\"check-account\")\n\n    -- \u65ad\u8a00\u4efb\u52a1\u7684\u903b\u8f91\u5728\u6a21\u62df\u6570\u636e\u4e0b\u662f\u5426\u6b63\u5e38\u5de5\u4f5c\n    assert.is_true(result.success, \"\u4f7f\u7528\u6b63\u786e\u7684\u5e10\u6237 ID\uff0c\u4efb\u52a1\u5e94\u8be5\u6210\u529f\")\n    assert.equals(result.message, \"\u6b63\u786e\u7684\u5e10\u6237\u3002\", \"\u6d88\u606f\u5e94\u8be5\u662f\u6b63\u786e\u7684\")\n  end)\nend)\n</code></pre></p>"},{"location":"zh/modules/aws/","title":"AWS \u6a21\u5757","text":"<p><code>aws</code> \u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5168\u9762\u7684\u754c\u9762\uff0c\u7528\u4e8e\u4f7f\u7528 AWS CLI \u4e0e\u4e9a\u9a6c\u900a\u7f51\u7edc\u670d\u52a1\u8fdb\u884c\u4ea4\u4e92\u3002\u5b83\u65e8\u5728\u4e0e\u6807\u51c6\u7684 AWS \u51ed\u8bc1\u94fe\u65e0\u7f1d\u534f\u4f5c\uff0c\u5e76\u4e3a <code>aws-vault</code> \u63d0\u4f9b\u4e00\u6d41\u7684\u652f\u6301\u4ee5\u589e\u5f3a\u5b89\u5168\u6027\u3002</p>"},{"location":"zh/modules/aws/#_1","title":"\u914d\u7f6e","text":"<p><code>values.yaml</code> \u4e2d\u65e0\u9700\u7279\u5b9a\u914d\u7f6e\u3002\u8be5\u6a21\u5757\u4f9d\u8d56\u4e8e\u60a8\u7684\u73af\u5883\u914d\u7f6e\u4e3a\u53ef\u4e0e AWS \u4ea4\u4e92\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u5b9e\u73b0\uff1a - EC2 \u5b9e\u4f8b\u6216 ECS/EKS \u4efb\u52a1\u7684 IAM \u89d2\u8272\u3002 - \u6807\u51c6\u73af\u5883\u53d8\u91cf\uff08<code>AWS_ACCESS_KEY_ID</code>\u3001<code>AWS_SECRET_ACCESS_KEY</code> \u7b49\uff09\u3002 - \u5df2\u914d\u7f6e\u7684 <code>~/.aws/credentials</code> \u6587\u4ef6\u3002 - \u4f7f\u7528\u5e26\u6709\u547d\u540d\u914d\u7f6e\u6587\u4ef6\u7684 <code>aws-vault</code>\u3002</p>"},{"location":"zh/modules/aws/#_2","title":"\u901a\u7528\u6267\u884c\u5668","text":""},{"location":"zh/modules/aws/#awsexecargs-opts","title":"<code>aws.exec(args, opts)</code>","text":"<p>\u8fd9\u662f\u8be5\u6a21\u5757\u7684\u6838\u5fc3\u529f\u80fd\u3002\u5b83\u6267\u884c\u4efb\u4f55 AWS CLI \u547d\u4ee4\u5e76\u8fd4\u56de\u7ed3\u679c\u3002</p> <p>\u53c2\u6570:</p> <ul> <li><code>args</code> (table): \u5fc5\u9700\u3002 \u4e00\u4e2a\u5b57\u7b26\u4e32\u8868\uff0c\u8868\u793a\u8981\u4f20\u9012\u7ed9 AWS CLI \u7684\u547d\u4ee4\u548c\u53c2\u6570\uff08\u4f8b\u5982 <code>{\"s3\", \"ls\", \"--recursive\"}</code>\uff09\u3002</li> <li><code>opts</code> (table): \u53ef\u9009\u3002 \u4e00\u4e2a\u6267\u884c\u9009\u9879\u8868\u3002<ul> <li><code>profile</code> (string): \u5982\u679c\u63d0\u4f9b\uff0c\u5c06\u4f7f\u7528 <code>aws-vault exec &lt;profile&gt; -- aws ...</code> \u6267\u884c\u547d\u4ee4\u3002\u5982\u679c\u7701\u7565\uff0c\u5c06\u76f4\u63a5\u8fd0\u884c <code>aws ...</code>\u3002</li> </ul> </li> </ul> <p>\u8fd4\u56de:</p> <p>\u4e00\u4e2a\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\u7684\u8868\uff1a - <code>stdout</code> (string): \u547d\u4ee4\u7684\u6807\u51c6\u8f93\u51fa\u3002 - <code>stderr</code> (string): \u547d\u4ee4\u7684\u6807\u51c6\u9519\u8bef\u3002 - <code>exit_code</code> (number): \u547d\u4ee4\u7684\u9000\u51fa\u4ee3\u7801\u3002<code>0</code> \u901a\u5e38\u8868\u793a\u6210\u529f\u3002</p> <p>\u793a\u4f8b:</p> <pre><code>-- \u4f7f\u7528\u9ed8\u8ba4\u51ed\u8bc1\nlocal result = aws.exec({\"sts\", \"get-caller-identity\"})\nif result.exit_code == 0 then\n  print(result.stdout)\nend\n\n-- \u4f7f\u7528 aws-vault \u914d\u7f6e\u6587\u4ef6\nlocal result_with_profile = aws.exec({\"ec2\", \"describe-instances\"}, {profile = \"my-prod-profile\"})\n</code></pre>"},{"location":"zh/modules/aws/#s3","title":"S3 \u8f85\u52a9\u51fd\u6570","text":""},{"location":"zh/modules/aws/#awss3syncparams","title":"<code>aws.s3.sync(params)</code>","text":"<p><code>aws s3 sync</code> \u547d\u4ee4\u7684\u9ad8\u7ea7\u5305\u88c5\u5668\uff0c\u7528\u4e8e\u5c06\u76ee\u5f55\u4e0e S3 \u540c\u6b65\u3002</p> <p>\u53c2\u6570:</p> <ul> <li><code>params</code> (table): \u4e00\u4e2a\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\u7684\u8868\uff1a<ul> <li><code>source</code> (string): \u5fc5\u9700\u3002 \u6e90\u76ee\u5f55\u6216 S3 \u8def\u5f84\u3002</li> <li><code>destination</code> (string): \u5fc5\u9700\u3002 \u76ee\u6807\u76ee\u5f55\u6216 S3 \u8def\u5f84\u3002</li> <li><code>profile</code> (string): \u53ef\u9009\u3002 \u8981\u4f7f\u7528\u7684 <code>aws-vault</code> \u914d\u7f6e\u6587\u4ef6\u3002</li> <li><code>delete</code> (boolean): \u53ef\u9009\u3002 \u5982\u679c\u4e3a <code>true</code>\uff0c\u5219\u5411\u540c\u6b65\u547d\u4ee4\u6dfb\u52a0 <code>--delete</code> \u6807\u5fd7\u3002</li> </ul> </li> </ul> <p>\u8fd4\u56de:</p> <ul> <li>\u6210\u529f\u65f6\u8fd4\u56de <code>true</code>\u3002</li> <li>\u5931\u8d25\u65f6\u8fd4\u56de <code>false, error_message</code>\u3002</li> </ul> <p>\u793a\u4f8b:</p> <pre><code>local ok, err = aws.s3.sync({\n  source = \"./build\",\n  destination = \"s3://my-app-bucket/static\",\n  profile = \"deployment-profile\",\n  delete = true\n})\nif not ok then\n  log.error(\"S3 \u540c\u6b65\u5931\u8d25: \" .. err)\nend\n</code></pre>"},{"location":"zh/modules/aws/#secrets-manager","title":"Secrets Manager \u8f85\u52a9\u51fd\u6570","text":""},{"location":"zh/modules/aws/#awssecretsmanagerget_secretparams","title":"<code>aws.secretsmanager.get_secret(params)</code>","text":"<p>\u4ece AWS Secrets Manager \u68c0\u7d22\u5bc6\u94a5\u7684\u503c\u3002\u6b64\u51fd\u6570\u901a\u8fc7\u76f4\u63a5\u8fd4\u56de <code>SecretString</code> \u6765\u7b80\u5316\u8be5\u8fc7\u7a0b\u3002</p> <p>\u53c2\u6570:</p> <ul> <li><code>params</code> (table): \u4e00\u4e2a\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\u7684\u8868\uff1a<ul> <li><code>secret_id</code> (string): \u5fc5\u9700\u3002 \u8981\u68c0\u7d22\u7684\u5bc6\u94a5\u7684\u540d\u79f0\u6216 ARN\u3002</li> <li><code>profile</code> (string): \u53ef\u9009\u3002 \u8981\u4f7f\u7528\u7684 <code>aws-vault</code> \u914d\u7f6e\u6587\u4ef6\u3002</li> </ul> </li> </ul> <p>\u8fd4\u56de:</p> <ul> <li>\u6210\u529f\u65f6\u8fd4\u56de <code>secret_string</code> (string)\u3002</li> <li>\u5931\u8d25\u65f6\u8fd4\u56de <code>nil, error_message</code>\u3002</li> </ul> <p>\u793a\u4f8b:</p> <pre><code>local db_password, err = aws.secretsmanager.get_secret({\n  secret_id = \"production/database/password\",\n  profile = \"my-app-profile\"\n})\n\nif not db_password then\n  log.error(\"\u83b7\u53d6\u5bc6\u94a5\u5931\u8d25: \" .. err)\n  return false, \"\u914d\u7f6e\u5931\u8d25\u3002\"\nend\n\n-- \u73b0\u5728\u60a8\u53ef\u4ee5\u4f7f\u7528 db_password \u53d8\u91cf\n</code></pre>"},{"location":"zh/modules/azure/","title":"Azure \u6a21\u5757","text":"<p><code>azure</code> \u6a21\u5757\u63d0\u4f9b\u4e86\u4f7f\u7528 <code>az</code> \u547d\u4ee4\u884c\u5de5\u5177\u4e0e Microsoft Azure \u8fdb\u884c\u4ea4\u4e92\u7684\u754c\u9762\u3002</p>"},{"location":"zh/modules/azure/#_1","title":"\u914d\u7f6e","text":"<p>\u6b64\u6a21\u5757\u9700\u8981\u5b89\u88c5\u5e76\u9a8c\u8bc1 <code>az</code> CLI\u3002\u5728\u4f7f\u7528\u6b64\u6a21\u5757\u7684\u7ba1\u9053\u8fd0\u884c\u4e4b\u524d\uff0c\u60a8\u5fc5\u987b\u767b\u5f55\u5230\u60a8\u7684 Azure \u5e10\u6237\uff1a</p> <pre><code>az login\n</code></pre> <p>\u8be5\u6a21\u5757\u5c06\u4f7f\u7528\u60a8\u767b\u5f55\u7684\u51ed\u636e\u6267\u884c\u6240\u6709\u547d\u4ee4\u3002</p>"},{"location":"zh/modules/azure/#_2","title":"\u901a\u7528\u6267\u884c\u5668","text":""},{"location":"zh/modules/azure/#azureexecargs","title":"<code>azure.exec(args)</code>","text":"<p>\u6267\u884c\u4efb\u4f55 <code>az</code> \u547d\u4ee4\u3002\u6b64\u51fd\u6570\u4f1a\u81ea\u52a8\u6dfb\u52a0 <code>--output json</code> \u6807\u5fd7\uff08\u5982\u679c\u5c1a\u4e0d\u5b58\u5728\uff09\uff0c\u4ee5\u786e\u4fdd\u8f93\u51fa\u662f\u673a\u5668\u53ef\u89e3\u6790\u7684\u3002</p> <p>\u53c2\u6570:</p> <ul> <li><code>args</code> (table): \u5fc5\u9700\u3002 \u4e00\u4e2a\u5b57\u7b26\u4e32\u8868\uff0c\u8868\u793a\u8981\u4f20\u9012\u7ed9 <code>az</code> \u7684\u547d\u4ee4\u548c\u53c2\u6570\uff08\u4f8b\u5982 <code>{\"group\", \"list\", \"--location\", \"eastus\"}</code>\uff09\u3002</li> </ul> <p>\u8fd4\u56de:</p> <p>\u4e00\u4e2a\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\u7684\u8868\uff1a - <code>stdout</code> (string): \u547d\u4ee4\u7684\u6807\u51c6\u8f93\u51fa\uff08\u4f5c\u4e3a JSON \u5b57\u7b26\u4e32\uff09\u3002 - <code>stderr</code> (string): \u547d\u4ee4\u7684\u6807\u51c6\u9519\u8bef\u3002 - <code>exit_code</code> (number): \u547d\u4ee4\u7684\u9000\u51fa\u4ee3\u7801\u3002<code>0</code> \u901a\u5e38\u8868\u793a\u6210\u529f\u3002</p> <p>\u793a\u4f8b:</p> <pre><code>local result = azure.exec({\"account\", \"show\"})\nif result.exit_code == 0 then\n  local account_info, err = data.parse_json(result.stdout)\n  if account_info then\n    log.info(\"\u767b\u5f55\u4e3a: \" .. account_info.user.name)\n  end\nend\n</code></pre>"},{"location":"zh/modules/azure/#rg","title":"\u8d44\u6e90\u7ec4 (RG) \u8f85\u52a9\u51fd\u6570","text":""},{"location":"zh/modules/azure/#azurergdeleteparams","title":"<code>azure.rg.delete(params)</code>","text":"<p>\u5220\u9664\u8d44\u6e90\u7ec4\u3002</p> <p>\u53c2\u6570:</p> <ul> <li><code>params</code> (table): \u4e00\u4e2a\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\u7684\u8868\uff1a<ul> <li><code>name</code> (string): \u5fc5\u9700\u3002 \u8981\u5220\u9664\u7684\u8d44\u6e90\u7ec4\u7684\u540d\u79f0\u3002</li> <li><code>yes</code> (boolean): \u53ef\u9009\u3002 \u5982\u679c\u4e3a <code>true</code>\uff0c\u5219\u6dfb\u52a0 <code>--yes</code> \u6807\u5fd7\u4ee5\u7ed5\u8fc7\u786e\u8ba4\u63d0\u793a\u3002</li> </ul> </li> </ul> <p>\u8fd4\u56de:</p> <ul> <li>\u6210\u529f\u65f6\u8fd4\u56de <code>true</code>\u3002</li> <li>\u5931\u8d25\u65f6\u8fd4\u56de <code>false, error_message</code>\u3002</li> </ul> <p>\u793a\u4f8b:</p> <pre><code>local ok, err = azure.rg.delete({\n  name = \"my-test-rg\",\n  yes = true\n})\nif not ok then\n  log.error(\"\u5220\u9664\u8d44\u6e90\u7ec4\u5931\u8d25: \" .. err)\nend\n</code></pre>"},{"location":"zh/modules/azure/#vm","title":"\u865a\u62df\u673a (VM) \u8f85\u52a9\u51fd\u6570","text":""},{"location":"zh/modules/azure/#azurevmlistparams","title":"<code>azure.vm.list(params)</code>","text":"<p>\u5217\u51fa\u865a\u62df\u673a\u3002</p> <p>\u53c2\u6570:</p> <ul> <li><code>params</code> (table): \u53ef\u9009\u3002 \u4e00\u4e2a\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\u7684\u8868\uff1a<ul> <li><code>resource_group</code> (string): \u7528\u4e8e\u5c06\u5217\u8868\u8303\u56f4\u9650\u5b9a\u4e3a\u7684\u8d44\u6e90\u7ec4\u7684\u540d\u79f0\u3002\u5982\u679c\u7701\u7565\uff0c\u5219\u5217\u51fa\u6574\u4e2a\u8ba2\u9605\u4e2d\u7684 VM\u3002</li> </ul> </li> </ul> <p>\u8fd4\u56de:</p> <ul> <li>\u6210\u529f\u65f6\u8fd4\u56de <code>vms</code> (table)\uff0c\u8be5\u8868\u662f\u60a8\u7684 VM \u5bf9\u8c61\u7684\u5df2\u89e3\u6790 JSON \u6570\u7ec4\u3002</li> <li>\u5931\u8d25\u65f6\u8fd4\u56de <code>nil, error_message</code>\u3002</li> </ul> <p>\u793a\u4f8b:</p> <pre><code>-- \u5217\u51fa\u8ba2\u9605\u4e2d\u7684\u6240\u6709 VM\nlocal all_vms, err1 = azure.vm.list()\n\n-- \u5217\u51fa\u7279\u5b9a\u8d44\u6e90\u7ec4\u4e2d\u7684 VM\nlocal specific_vms, err2 = azure.vm.list({resource_group = \"my-production-rg\"})\nif specific_vms then\n  for _, vm in ipairs(specific_vms) do\n    print(\"\u627e\u5230 VM: \" .. vm.name)\n  end\nend\n</code></pre>"},{"location":"zh/modules/data/","title":"Data \u6a21\u5757","text":"<p><code>data</code> \u6a21\u5757\u63d0\u4f9b\u4e86\u5728 Lua \u8868\u548c\u5e38\u89c1\u6570\u636e\u683c\u5f0f\uff08\u5982 JSON \u548c YAML\uff09\u4e4b\u95f4\u89e3\u6790\u548c\u5e8f\u5217\u5316\u6570\u636e\u7684\u529f\u80fd\u3002</p>"},{"location":"zh/modules/data/#dataparse_jsonjson_string","title":"<code>data.parse_json(json_string)</code>","text":"<p>\u5c06 JSON \u5b57\u7b26\u4e32\u89e3\u6790\u4e3a Lua \u8868\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>json_string</code> (string): \u8981\u89e3\u6790\u7684 JSON \u683c\u5f0f\u5b57\u7b26\u4e32\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>table</code>: \u751f\u6210\u7684 Lua \u8868\u3002</li> <li><code>error</code>: \u5982\u679c\u89e3\u6790\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/data/#datato_jsonlua_table","title":"<code>data.to_json(lua_table)</code>","text":"<p>\u5c06 Lua \u8868\u5e8f\u5217\u5316\u4e3a JSON \u5b57\u7b26\u4e32\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>lua_table</code> (table): \u8981\u5e8f\u5217\u5316\u7684 Lua \u8868\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>string</code>: \u751f\u6210\u7684 JSON \u5b57\u7b26\u4e32\u3002</li> <li><code>error</code>: \u5982\u679c\u5e8f\u5217\u5316\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/data/#dataparse_yamlyaml_string","title":"<code>data.parse_yaml(yaml_string)</code>","text":"<p>\u5c06 YAML \u5b57\u7b26\u4e32\u89e3\u6790\u4e3a Lua \u8868\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>yaml_string</code> (string): \u8981\u89e3\u6790\u7684 YAML \u683c\u5f0f\u5b57\u7b26\u4e32\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>table</code>: \u751f\u6210\u7684 Lua \u8868\u3002</li> <li><code>error</code>: \u5982\u679c\u89e3\u6790\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/data/#datato_yamllua_table","title":"<code>data.to_yaml(lua_table)</code>","text":"<p>\u5c06 Lua \u8868\u5e8f\u5217\u5316\u4e3a YAML \u5b57\u7b26\u4e32\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>lua_table</code> (table): \u8981\u5e8f\u5217\u5316\u7684 Lua \u8868\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>string</code>: \u751f\u6210\u7684 YAML \u5b57\u7b26\u4e32\u3002</li> <li><code>error</code>: \u5982\u679c\u5e8f\u5217\u5316\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/data/#_1","title":"\u793a\u4f8b","text":"<pre><code>command = function()\n  local data = require(\"data\")\n\n  -- JSON \u793a\u4f8b\n  log.info(\"\u6d4b\u8bd5 JSON \u5e8f\u5217\u5316...\")\n  local my_table = { name = \"sloth-runner\", version = 1.0, features = { \"tasks\", \"lua\" } }\n  local json_str, err = data.to_json(my_table)\n  if err then\n    return false, \"\u5e8f\u5217\u5316\u5230 JSON \u5931\u8d25: \" .. err\n  end\n  print(\"\u5e8f\u5217\u5316\u7684 JSON: \" .. json_str)\n\n  log.info(\"\u6d4b\u8bd5 JSON \u89e3\u6790...\")\n  local parsed_table, err = data.parse_json(json_str)\n  if err then\n    return false, \"\u89e3\u6790 JSON \u5931\u8d25: \" .. err\n  end\n  log.info(\"\u4ece JSON \u89e3\u6790\u7684\u540d\u79f0: \" .. parsed_table.name)\n\n  -- YAML \u793a\u4f8b\n  log.info(\"\u6d4b\u8bd5 YAML \u5e8f\u5217\u5316...\")\n  local yaml_str, err = data.to_yaml(my_table)\n  if err then\n    return false, \"\u5e8f\u5217\u5316\u5230 YAML \u5931\u8d25: \" .. err\n  end\n  print(\"\u5e8f\u5217\u5316\u7684 YAML:\\n\" .. yaml_str)\n\n  log.info(\"\u6d4b\u8bd5 YAML \u89e3\u6790...\")\n  parsed_table, err = data.parse_yaml(yaml_str)\n  if err then\n    return false, \"\u89e3\u6790 YAML \u5931\u8d25: \" .. err\n  end\n  log.info(\"\u4ece YAML \u89e3\u6790\u7684\u7248\u672c: \" .. parsed_table.version)\n\n  return true, \"Data \u6a21\u5757\u64cd\u4f5c\u6210\u529f\u3002\"\nend\n</code></pre> <p>```</p>"},{"location":"zh/modules/digitalocean/","title":"DigitalOcean \u6a21\u5757","text":"<p><code>digitalocean</code> \u6a21\u5757\u63d0\u4f9b\u4e86\u4f7f\u7528 <code>doctl</code> \u547d\u4ee4\u884c\u5de5\u5177\u4e0e\u60a8\u7684 DigitalOcean \u8d44\u6e90\u8fdb\u884c\u4ea4\u4e92\u7684\u754c\u9762\u3002</p>"},{"location":"zh/modules/digitalocean/#_1","title":"\u914d\u7f6e","text":"<p>\u6b64\u6a21\u5757\u9700\u8981\u5b89\u88c5\u5e76\u9a8c\u8bc1 <code>doctl</code> CLI\u3002\u6807\u51c6\u65b9\u6cd5\u662f\u5728\u60a8\u7684 DigitalOcean \u63a7\u5236\u9762\u677f\u4e2d\u751f\u6210\u4e2a\u4eba\u8bbf\u95ee\u4ee4\u724c\uff0c\u5e76\u5c06\u5176\u8bbe\u7f6e\u4e3a <code>DIGITALOCEAN_ACCESS_TOKEN</code> \u73af\u5883\u53d8\u91cf\u3002</p> <pre><code>export DIGITALOCEAN_ACCESS_TOKEN=\"your_do_api_token_here\"\n</code></pre> <p>\u8be5\u6a21\u5757\u5c06\u81ea\u52a8\u5c06\u6b64\u4ee4\u724c\u7528\u4e8e\u6240\u6709\u547d\u4ee4\u3002</p>"},{"location":"zh/modules/digitalocean/#_2","title":"\u901a\u7528\u6267\u884c\u5668","text":""},{"location":"zh/modules/digitalocean/#digitaloceanexecargs","title":"<code>digitalocean.exec(args)</code>","text":"<p>\u6267\u884c\u4efb\u4f55 <code>doctl</code> \u547d\u4ee4\u3002\u6b64\u51fd\u6570\u4f1a\u81ea\u52a8\u6dfb\u52a0 <code>--output json</code> \u6807\u5fd7\uff0c\u4ee5\u786e\u4fdd\u8f93\u51fa\u662f\u673a\u5668\u53ef\u89e3\u6790\u7684\u3002</p> <p>\u53c2\u6570:</p> <ul> <li><code>args</code> (table): \u5fc5\u9700\u3002 \u4e00\u4e2a\u5b57\u7b26\u4e32\u8868\uff0c\u8868\u793a\u8981\u4f20\u9012\u7ed9 <code>doctl</code> \u7684\u547d\u4ee4\u548c\u53c2\u6570\uff08\u4f8b\u5982 <code>{\"compute\", \"droplet\", \"list\"}</code>\uff09\u3002</li> </ul> <p>\u8fd4\u56de:</p> <p>\u4e00\u4e2a\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\u7684\u8868\uff1a - <code>stdout</code> (string): \u547d\u4ee4\u7684\u6807\u51c6\u8f93\u51fa\uff08\u4f5c\u4e3a JSON \u5b57\u7b26\u4e32\uff09\u3002 - <code>stderr</code> (string): \u547d\u4ee4\u7684\u6807\u51c6\u9519\u8bef\u3002 - <code>exit_code</code> (number): \u547d\u4ee4\u7684\u9000\u51fa\u4ee3\u7801\u3002<code>0</code> \u901a\u5e38\u8868\u793a\u6210\u529f\u3002</p> <p>\u793a\u4f8b:</p> <pre><code>local result = digitalocean.exec({\"account\", \"get\"})\nif result.exit_code == 0 then\n  local account_info, err = data.parse_json(result.stdout)\n  if account_info then\n    log.info(\"\u5e10\u6237\u72b6\u6001: \" .. account_info.status)\n  end\nend\n</code></pre>"},{"location":"zh/modules/digitalocean/#droplets","title":"Droplets \u8f85\u52a9\u51fd\u6570","text":""},{"location":"zh/modules/digitalocean/#digitaloceandropletslist","title":"<code>digitalocean.droplets.list()</code>","text":"<p>\u4e00\u4e2a\u9ad8\u7ea7\u5305\u88c5\u5668\uff0c\u7528\u4e8e\u5217\u51fa\u60a8\u5e10\u6237\u4e2d\u7684\u6240\u6709 Droplet\u3002</p> <p>\u8fd4\u56de:</p> <ul> <li>\u6210\u529f\u65f6\u8fd4\u56de <code>droplets</code> (table)\uff0c\u8be5\u8868\u662f\u60a8\u7684 Droplet \u5bf9\u8c61\u7684\u5df2\u89e3\u6790 JSON \u6570\u7ec4\u3002</li> <li>\u5931\u8d25\u65f6\u8fd4\u56de <code>nil, error_message</code>\u3002</li> </ul> <p>\u793a\u4f8b:</p> <pre><code>local droplets, err = digitalocean.droplets.list()\nif droplets then\n  for _, droplet in ipairs(droplets) do\n    print(\"\u627e\u5230 Droplet: \" .. droplet.name)\n  end\nend\n</code></pre>"},{"location":"zh/modules/digitalocean/#digitaloceandropletsdeleteparams","title":"<code>digitalocean.droplets.delete(params)</code>","text":"<p>\u6309 ID \u5220\u9664\u7279\u5b9a\u7684 Droplet\u3002</p> <p>\u53c2\u6570:</p> <ul> <li><code>params</code> (table): \u4e00\u4e2a\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\u7684\u8868\uff1a<ul> <li><code>id</code> (string): \u5fc5\u9700\u3002 \u8981\u5220\u9664\u7684 Droplet \u7684 ID\u3002</li> <li><code>force</code> (boolean): \u53ef\u9009\u3002 \u5982\u679c\u4e3a <code>true</code>\uff0c\u5219\u6dfb\u52a0 <code>--force</code> \u6807\u5fd7\u4ee5\u7ed5\u8fc7\u786e\u8ba4\u63d0\u793a\u3002\u9ed8\u8ba4\u4e3a <code>false</code>\u3002</li> </ul> </li> </ul> <p>\u8fd4\u56de:</p> <ul> <li>\u6210\u529f\u65f6\u8fd4\u56de <code>true</code>\u3002</li> <li>\u5931\u8d25\u65f6\u8fd4\u56de <code>false, error_message</code>\u3002</li> </ul> <p>\u793a\u4f8b:</p> <pre><code>local ok, err = digitalocean.droplets.delete({\n  id = \"123456789\",\n  force = true\n})\nif not ok then\n  log.error(\"\u5220\u9664 droplet \u5931\u8d25: \" .. err)\nend\n</code></pre>"},{"location":"zh/modules/docker/","title":"Docker \u6a21\u5757","text":"<p><code>docker</code> \u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a\u65b9\u4fbf\u7684\u754c\u9762\uff0c\u7528\u4e8e\u4e0e Docker \u5b88\u62a4\u8fdb\u7a0b\u4ea4\u4e92\uff0c\u5141\u8bb8\u60a8\u5728\u7ba1\u9053\u4e2d\u6784\u5efa\u3001\u8fd0\u884c\u548c\u63a8\u9001 Docker \u955c\u50cf\u3002</p>"},{"location":"zh/modules/docker/#_1","title":"\u914d\u7f6e","text":"<p>\u6b64\u6a21\u5757\u9700\u8981\u5b89\u88c5 <code>docker</code> CLI\uff0c\u5e76\u4e14 Docker \u5b88\u62a4\u8fdb\u7a0b\u6b63\u5728\u8fd0\u884c\u4e14\u53ef\u8bbf\u95ee\u3002</p>"},{"location":"zh/modules/docker/#_2","title":"\u51fd\u6570","text":""},{"location":"zh/modules/docker/#dockerexecargs","title":"<code>docker.exec(args)</code>","text":"<p>\u6267\u884c\u4efb\u4f55\u539f\u59cb\u7684 <code>docker</code> \u547d\u4ee4\u3002</p> <ul> <li><code>args</code> (table): \u5fc5\u9700\u3002 \u8981\u4f20\u9012\u7ed9 <code>docker</code> \u547d\u4ee4\u7684\u53c2\u6570\u5217\u8868\uff08\u4f8b\u5982 <code>{\"ps\", \"-a\"}</code>\uff09\u3002</li> <li>\u8fd4\u56de: \u5305\u542b <code>success</code>\u3001<code>stdout</code>\u3001<code>stderr</code> \u548c <code>exit_code</code> \u7684\u7ed3\u679c\u8868\u3002</li> </ul>"},{"location":"zh/modules/docker/#dockerbuildparams","title":"<code>docker.build(params)</code>","text":"<p>\u4f7f\u7528 <code>docker build</code> \u6784\u5efa Docker \u955c\u50cf\u3002</p> <ul> <li><code>params</code> (table):<ul> <li><code>tag</code> (string): \u5fc5\u9700\u3002 \u955c\u50cf\u7684\u6807\u7b7e\uff08\u4f8b\u5982 <code>my-app:latest</code>\uff09\u3002</li> <li><code>path</code> (string): \u5fc5\u9700\u3002 \u6784\u5efa\u4e0a\u4e0b\u6587\u8def\u5f84\u3002</li> <li><code>dockerfile</code> (string): \u53ef\u9009\u3002 Dockerfile \u7684\u8def\u5f84\u3002</li> <li><code>build_args</code> (table): \u53ef\u9009\u3002 \u6784\u5efa\u53c2\u6570\u8868\uff08\u4f8b\u5982 <code>{VERSION = \"1.0\"}</code>\uff09\u3002</li> </ul> </li> <li>\u8fd4\u56de: \u7ed3\u679c\u8868\u3002</li> </ul>"},{"location":"zh/modules/docker/#dockerpushparams","title":"<code>docker.push(params)</code>","text":"<p>\u4f7f\u7528 <code>docker push</code> \u5c06 Docker \u955c\u50cf\u63a8\u9001\u5230\u6ce8\u518c\u8868\u3002</p> <ul> <li><code>params</code> (table):<ul> <li><code>tag</code> (string): \u5fc5\u9700\u3002 \u8981\u63a8\u9001\u7684\u955c\u50cf\u7684\u6807\u7b7e\u3002</li> </ul> </li> <li>\u8fd4\u56de: \u7ed3\u679c\u8868\u3002</li> </ul>"},{"location":"zh/modules/docker/#dockerrunparams","title":"<code>docker.run(params)</code>","text":"<p>\u4f7f\u7528 <code>docker run</code> \u8fd0\u884c Docker \u5bb9\u5668\u3002</p> <ul> <li><code>params</code> (table):<ul> <li><code>image</code> (string): \u5fc5\u9700\u3002 \u8981\u8fd0\u884c\u7684\u955c\u50cf\u3002</li> <li><code>name</code> (string): \u53ef\u9009\u3002 \u5bb9\u5668\u7684\u540d\u79f0\u3002</li> <li><code>detach</code> (boolean): \u53ef\u9009\u3002 \u5982\u679c\u4e3a <code>true</code>\uff0c\u5219\u5728\u540e\u53f0\u8fd0\u884c\u5bb9\u5668 (<code>-d</code>)\u3002</li> <li><code>ports</code> (table): \u53ef\u9009\u3002 \u7aef\u53e3\u6620\u5c04\u5217\u8868\uff08\u4f8b\u5982 <code>{\"8080:80\"}</code>\uff09\u3002</li> <li><code>env</code> (table): \u53ef\u9009\u3002 \u73af\u5883\u53d8\u91cf\u8868\uff08\u4f8b\u5982 <code>{MY_VAR = \"value\"}</code>\uff09\u3002</li> </ul> </li> <li>\u8fd4\u56de: \u7ed3\u679c\u8868\u3002</li> </ul>"},{"location":"zh/modules/docker/#_3","title":"\u793a\u4f8b","text":"<pre><code>local image_tag = \"my-test-image:latest\"\n\n-- \u4efb\u52a1 1: Build\nlocal result_build = docker.build({\n  tag = image_tag,\n  path = \"./app\"\n})\nif not result_build.success then return false, \"\u6784\u5efa\u5931\u8d25\" end\n\n-- \u4efb\u52a1 2: Run\nlocal result_run = docker.run({\n  image = image_tag,\n  name = \"my-test-container\",\n  ports = {\"8080:80\"}\n})\nif not result_run.success then return false, \"\u8fd0\u884c\u5931\u8d25\" end\n\n-- \u4efb\u52a1 3: Push (\u6d4b\u8bd5\u6210\u529f\u540e)\nlocal result_push = docker.push({tag = image_tag})\nif not result_push.success then return false, \"\u63a8\u9001\u5931\u8d25\" end\n</code></pre>"},{"location":"zh/modules/exec/","title":"Exec \u6a21\u5757","text":"<p><code>exec</code> \u6a21\u5757\u662f <code>sloth-runner</code> \u4e2d\u6700\u57fa\u672c\u7684\u6a21\u5757\u4e4b\u4e00\u3002\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5f3a\u5927\u7684\u51fd\u6570\u6765\u6267\u884c\u4efb\u610f\u7684 shell \u547d\u4ee4\uff0c\u8ba9\u60a8\u53ef\u4ee5\u5b8c\u5168\u63a7\u5236\u6267\u884c\u73af\u5883\u3002</p>"},{"location":"zh/modules/exec/#execruncommand-options","title":"<code>exec.run(command, [options])</code>","text":"<p>\u4f7f\u7528 <code>bash -c</code> \u6267\u884c\u4e00\u4e2a shell \u547d\u4ee4\u3002</p>"},{"location":"zh/modules/exec/#_1","title":"\u53c2\u6570","text":"<ul> <li><code>command</code> (string): \u8981\u6267\u884c\u7684 shell \u547d\u4ee4\u3002</li> <li><code>options</code> (table, \u53ef\u9009): \u7528\u4e8e\u63a7\u5236\u6267\u884c\u7684\u9009\u9879\u8868\u3002<ul> <li><code>workdir</code> (string): \u547d\u4ee4\u5e94\u5728\u5176\u4e2d\u6267\u884c\u7684\u5de5\u4f5c\u76ee\u5f55\u3002\u5982\u679c\u672a\u63d0\u4f9b\uff0c\u5b83\u5c06\u5728\u4efb\u52a1\u7ec4\u7684\u4e34\u65f6\u76ee\u5f55\uff08\u5982\u679c\u53ef\u7528\uff09\u6216\u5f53\u524d\u76ee\u5f55\u4e2d\u8fd0\u884c\u3002</li> <li><code>env</code> (table): \u4e3a\u547d\u4ee4\u6267\u884c\u8bbe\u7f6e\u7684\u73af\u5883\u53d8\u91cf\u5b57\u5178\uff08\u952e\u503c\u5bf9\uff09\u3002\u8fd9\u4e9b\u53d8\u91cf\u4f1a\u6dfb\u52a0\u5230\u73b0\u6709\u73af\u5883\u4e2d\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/exec/#_2","title":"\u8fd4\u56de","text":"<p>\u4e00\u4e2a\u5305\u542b\u547d\u4ee4\u6267\u884c\u7ed3\u679c\u7684\u8868\uff1a</p> <ul> <li><code>success</code> (boolean): \u5982\u679c\u547d\u4ee4\u4ee5\u4ee3\u7801 <code>0</code> \u9000\u51fa\uff0c\u5219\u4e3a <code>true</code>\uff0c\u5426\u5219\u4e3a <code>false</code>\u3002</li> <li><code>stdout</code> (string): \u547d\u4ee4\u7684\u6807\u51c6\u8f93\u51fa\u3002</li> <li><code>stderr</code> (string): \u547d\u4ee4\u7684\u6807\u51c6\u9519\u8bef\u8f93\u51fa\u3002</li> </ul>"},{"location":"zh/modules/exec/#_3","title":"\u793a\u4f8b","text":"<p>\u6b64\u793a\u4f8b\u6f14\u793a\u5982\u4f55\u4f7f\u7528\u5e26\u6709\u81ea\u5b9a\u4e49\u5de5\u4f5c\u76ee\u5f55\u548c\u73af\u5883\u53d8\u91cf\u7684 <code>exec.run</code>\u3002</p> <pre><code>-- examples/exec_module_example.sloth\n\nModern DSLs = {\n  main = {\n    description = \"\u4e00\u4e2a\u6f14\u793a exec \u6a21\u5757\u7684\u4efb\u52a1\u3002\",\n    tasks = {\n      {\n        name = \"run-with-options\",\n        description = \"\u4f7f\u7528\u81ea\u5b9a\u4e49\u5de5\u4f5c\u76ee\u5f55\u548c\u73af\u5883\u6267\u884c\u547d\u4ee4\u3002\",\n        command = function()\n          log.info(\"\u51c6\u5907\u8fd0\u884c\u81ea\u5b9a\u4e49\u547d\u4ee4...\")\n\n          local exec = require(\"exec\")\n\n          -- \u4e3a\u793a\u4f8b\u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u76ee\u5f55\n          local temp_dir = \"/tmp/sloth-exec-test\"\n          fs.mkdir(temp_dir)\n          fs.write(temp_dir .. \"/test.txt\", \"\u6765\u81ea\u6d4b\u8bd5\u6587\u4ef6\u7684\u95ee\u5019\")\n\n          -- \u5b9a\u4e49\u9009\u9879\n          local options = {\n            workdir = temp_dir,\n            env = {\n              MY_VAR = \"SlothRunner\",\n              ANOTHER_VAR = \"is_awesome\"\n            }\n          }\n\n          -- \u6267\u884c\u547d\u4ee4\n          local result = exec.run(\"echo 'MY_VAR is $MY_VAR' &amp;&amp; ls -l &amp;&amp; cat test.txt\", options)\n\n          -- \u6e05\u7406\u4e34\u65f6\u76ee\u5f55\n          fs.rm_r(temp_dir)\n\n          if result.success then\n            log.info(\"\u547d\u4ee4\u6210\u529f\u6267\u884c\uff01\")\n            print(\"--- STDOUT ---\")\n            print(result.stdout)\n            print(\"--------------\")\n            return true, \"Exec \u547d\u4ee4\u6210\u529f\u3002\"\n          else\n            log.error(\"Exec \u547d\u4ee4\u5931\u8d25\u3002\")\n            log.error(\"Stderr: \" .. result.stderr)\n            return false, \"Exec \u547d\u4ee4\u5931\u8d25\u3002\"\n          end\n        end\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"zh/modules/fs/","title":"FS \u6a21\u5757","text":"<p><code>fs</code> \u6a21\u5757\u63d0\u4f9b\u4e86\u4ece\u60a8\u7684 Lua \u811a\u672c\u76f4\u63a5\u4e0e\u6587\u4ef6\u7cfb\u7edf\u4ea4\u4e92\u7684\u57fa\u672c\u529f\u80fd\u3002</p> <p>---\\n</p>"},{"location":"zh/modules/fs/#fsreadpath","title":"<code>fs.read(path)</code>","text":"<p>\u8bfb\u53d6\u6587\u4ef6\u7684\u5168\u90e8\u5185\u5bb9\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>path</code> (string): \u6587\u4ef6\u8def\u5f84\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>string</code>: \u6587\u4ef6\u5185\u5bb9\u3002</li> <li><code>error</code>: \u5982\u679c\u8bfb\u53d6\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"zh/modules/fs/#fswritepath-content","title":"<code>fs.write(path, content)</code>","text":"<p>\u5c06\u5185\u5bb9\u5199\u5165\u6587\u4ef6\uff0c\u5982\u679c\u6587\u4ef6\u5df2\u5b58\u5728\u5219\u8986\u76d6\u5b83\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>path</code> (string): \u6587\u4ef6\u8def\u5f84\u3002</li> <li><code>content</code> (string): \u8981\u5199\u5165\u7684\u5185\u5bb9\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>error</code>: \u5982\u679c\u5199\u5165\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"zh/modules/fs/#fsappendpath-content","title":"<code>fs.append(path, content)</code>","text":"<p>\u5c06\u5185\u5bb9\u8ffd\u52a0\u5230\u6587\u4ef6\u672b\u5c3e\u3002\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u5219\u521b\u5efa\u5b83\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>path</code> (string): \u6587\u4ef6\u8def\u5f84\u3002</li> <li><code>content</code> (string): \u8981\u8ffd\u52a0\u7684\u5185\u5bb9\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>error</code>: \u5982\u679c\u8ffd\u52a0\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"zh/modules/fs/#fsexistspath","title":"<code>fs.exists(path)</code>","text":"<p>\u68c0\u67e5\u7ed9\u5b9a\u8def\u5f84\u7684\u6587\u4ef6\u6216\u76ee\u5f55\u662f\u5426\u5b58\u5728\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>path</code> (string): \u8981\u68c0\u67e5\u7684\u8def\u5f84\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>boolean</code>: \u5982\u679c\u8def\u5f84\u5b58\u5728\uff0c\u5219\u4e3a <code>true</code>\uff0c\u5426\u5219\u4e3a <code>false</code>\u3002</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"zh/modules/fs/#fsmkdirpath","title":"<code>fs.mkdir(path)</code>","text":"<p>\u5728\u7ed9\u5b9a\u8def\u5f84\u521b\u5efa\u4e00\u4e2a\u76ee\u5f55\uff0c\u5305\u62ec\u4efb\u4f55\u5fc5\u8981\u7684\u7236\u76ee\u5f55 (\u7c7b\u4f3c\u4e8e <code>mkdir -p</code>)\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>path</code> (string): \u8981\u521b\u5efa\u7684\u76ee\u5f55\u8def\u5f84\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>error</code>: \u5982\u679c\u521b\u5efa\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"zh/modules/fs/#fsrmpath","title":"<code>fs.rm(path)</code>","text":"<p>\u5220\u9664\u5355\u4e2a\u6587\u4ef6\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>path</code> (string): \u8981\u5220\u9664\u7684\u6587\u4ef6\u7684\u8def\u5f84\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>error</code>: \u5982\u679c\u5220\u9664\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"zh/modules/fs/#fsrm_rpath","title":"<code>fs.rm_r(path)</code>","text":"<p>\u9012\u5f52\u5730\u5220\u9664\u6587\u4ef6\u6216\u76ee\u5f55 (\u7c7b\u4f3c\u4e8e <code>rm -rf</code>)\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>path</code> (string): \u8981\u5220\u9664\u7684\u8def\u5f84\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>error</code>: \u5982\u679c\u5220\u9664\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"zh/modules/fs/#fslspath","title":"<code>fs.ls(path)</code>","text":"<p>\u5217\u51fa\u76ee\u5f55\u7684\u5185\u5bb9\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>path</code> (string): \u76ee\u5f55\u7684\u8def\u5f84\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>table</code>: \u5305\u542b\u6587\u4ef6\u548c\u5b50\u76ee\u5f55\u540d\u79f0\u7684\u8868\u3002</li> <li><code>error</code>: \u5982\u679c\u5217\u51fa\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"zh/modules/fs/#fstmpname","title":"<code>fs.tmpname()</code>","text":"<p>\u751f\u6210\u4e00\u4e2a\u552f\u4e00\u7684\u4e34\u65f6\u76ee\u5f55\u8def\u5f84\u3002\u6ce8\u610f\uff1a\u6b64\u51fd\u6570\u4ec5\u8fd4\u56de\u540d\u79f0\uff0c\u4e0d\u521b\u5efa\u76ee\u5f55\u3002</p> <ul> <li>\u8fd4\u56de:<ul> <li><code>string</code>: \u9002\u5408\u7528\u4f5c\u4e34\u65f6\u76ee\u5f55\u7684\u552f\u4e00\u8def\u5f84\u3002</li> <li><code>error</code>: \u5982\u679c\u65e0\u6cd5\u751f\u6210\u540d\u79f0\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/fs/#_1","title":"\u793a\u4f8b","text":"<pre><code>command = function()\n  local fs = require(\"fs\")\n\n  local tmp_dir = \"/tmp/fs-example\"\n  log.info(\"\u6b63\u5728\u521b\u5efa\u76ee\u5f55: \" .. tmp_dir)\n  fs.mkdir(tmp_dir)\n\n  local file_path = tmp_dir .. \"/my_file.txt\"\n  log.info(\"\u6b63\u5728\u5199\u5165\u6587\u4ef6: \" .. file_path)\n  fs.write(file_path, \"\u4f60\u597d, Sloth Runner!\\n\")\n\n  log.info(\"\u6b63\u5728\u8ffd\u52a0\u5230\u6587\u4ef6...\")\n  fs.append(file_path, \"\u8fd9\u662f\u4e00\u4e2a\u65b0\u884c\u3002\")\n\n  if fs.exists(file_path) then\n    log.info(\"\u6587\u4ef6\u5185\u5bb9: \" .. fs.read(file_path))\n  end\n\n  log.info(\"\u6b63\u5728\u5217\u51fa \" .. tmp_dir .. \" \u7684\u5185\u5bb9\")\n  local contents = fs.ls(tmp_dir)\n  for i, name in ipairs(contents) do\n    print(\"- \" .. name)\n  end\n\n  log.info(\"\u6b63\u5728\u6e05\u7406...\")\n  fs.rm_r(tmp_dir)\n\n  return true, \"FS \u6a21\u5757\u64cd\u4f5c\u6210\u529f\u3002\"\nend\n</code></pre> <p>```</p>"},{"location":"zh/modules/gcp/","title":"GCP \u6a21\u5757","text":"<p><code>gcp</code> \u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u754c\u9762\uff0c\u7528\u4e8e\u4ece <code>sloth-runner</code> \u4efb\u52a1\u5185\u90e8\u6267\u884c\u8c37\u6b4c\u4e91\u547d\u4ee4\u884c\u754c\u9762 (<code>gcloud</code>) \u547d\u4ee4\u3002</p>"},{"location":"zh/modules/gcp/#gcpexecargs","title":"<code>gcp.exec(args)</code>","text":"<p>\u4f7f\u7528\u6307\u5b9a\u7684\u53c2\u6570\u6267\u884c <code>gcloud</code> \u547d\u4ee4\u3002</p>"},{"location":"zh/modules/gcp/#_1","title":"\u53c2\u6570","text":"<ul> <li><code>args</code> (table): \u4e00\u4e2a Lua \u8868\uff08\u6570\u7ec4\uff09\uff0c\u5305\u542b\u8981\u4f20\u9012\u7ed9 <code>gcloud</code> \u547d\u4ee4\u7684\u5b57\u7b26\u4e32\u53c2\u6570\u3002\u4f8b\u5982\uff0c<code>{\"compute\", \"instances\", \"list\"}</code>\u3002</li> </ul>"},{"location":"zh/modules/gcp/#_2","title":"\u8fd4\u56de","text":"<p>\u4e00\u4e2a\u5305\u542b\u547d\u4ee4\u6267\u884c\u7ed3\u679c\u7684\u8868\uff0c\u5176\u4e2d\u5305\u542b\u4ee5\u4e0b\u952e\uff1a</p> <ul> <li><code>stdout</code> (string): \u547d\u4ee4\u7684\u6807\u51c6\u8f93\u51fa\u3002</li> <li><code>stderr</code> (string): \u547d\u4ee4\u7684\u6807\u51c6\u9519\u8bef\u8f93\u51fa\u3002</li> <li><code>exit_code</code> (number): \u547d\u4ee4\u7684\u9000\u51fa\u4ee3\u7801\u3002\u9000\u51fa\u4ee3\u7801 <code>0</code> \u901a\u5e38\u8868\u793a\u6210\u529f\u3002</li> </ul>"},{"location":"zh/modules/gcp/#_3","title":"\u793a\u4f8b","text":"<p>\u6b64\u793a\u4f8b\u5b9a\u4e49\u4e86\u4e00\u4e2a\u4efb\u52a1\uff0c\u7528\u4e8e\u5217\u51fa\u7279\u5b9a\u9879\u76ee\u5728 <code>us-central1</code> \u533a\u57df\u4e2d\u7684\u6240\u6709 Compute Engine \u5b9e\u4f8b\u3002</p> <pre><code>-- examples/gcp_cli_example.sloth\n\nModern DSLs = {\n  main = {\n    description = \"\u4e00\u4e2a\u5217\u51fa GCP \u8ba1\u7b97\u5b9e\u4f8b\u7684\u4efb\u52a1\u3002\",\n    tasks = {\n      {\n        name = \"list-instances\",\n        description = \"\u5217\u51fa us-central1 \u4e2d\u7684 GCE \u5b9e\u4f8b\u3002\",\n        command = function()\n          log.info(\"\u6b63\u5728\u5217\u51fa GCP \u5b9e\u4f8b...\")\n\n          -- \u9700\u8981 gcp \u6a21\u5757\u4f7f\u5176\u53ef\u7528\n          local gcp = require(\"gcp\")\n\n          -- \u6267\u884c gcloud \u547d\u4ee4\n          local result = gcp.exec({\n            \"compute\", \n            \"instances\", \n            \"list\", \n            \"--project\", \"my-gcp-project-id\",\n            \"--zones\", \"us-central1-a,us-central1-b\"\n          })\n\n          -- \u68c0\u67e5\u7ed3\u679c\n          if result and result.exit_code == 0 then\n            log.info(\"\u6210\u529f\u5217\u51fa\u5b9e\u4f8b\u3002\")\n            print(\"--- \u5b9e\u4f8b\u5217\u8868 ---\")\n            print(result.stdout)\n            print(\"---------------------\")\n            return true, \"GCP \u547d\u4ee4\u6210\u529f\u3002\"\n          else\n            log.error(\"\u672a\u80fd\u5217\u51fa GCP \u5b9e\u4f8b\u3002\")\n            if result then\n              log.error(\"Stderr: \" .. result.stderr)\n            end\n            return false, \"GCP \u547d\u4ee4\u5931\u8d25\u3002\"\n          end\n        end\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"zh/modules/git/","title":"Git \u6a21\u5757","text":"<p><code>git</code> \u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6d41\u7545\u7684 API \u6765\u4e0e Git \u5b58\u50a8\u5e93\u8fdb\u884c\u4ea4\u4e92\uff0c\u5141\u8bb8\u60a8\u81ea\u52a8\u5316\u5e38\u89c1\u7684\u7248\u672c\u63a7\u5236\u64cd\u4f5c\uff0c\u5982\u514b\u9686\u3001\u63d0\u4ea4\u548c\u63a8\u9001\u3002</p>"},{"location":"zh/modules/git/#gitcloneurl-path","title":"<code>git.clone(url, path)</code>","text":"<p>\u5c06 Git \u5b58\u50a8\u5e93\u514b\u9686\u5230\u672c\u5730\u8def\u5f84\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>url</code> (string): \u8981\u514b\u9686\u7684\u5b58\u50a8\u5e93\u7684 URL\u3002</li> <li><code>path</code> (string): \u8981\u514b\u9686\u5230\u7684\u672c\u5730\u76ee\u5f55\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>repo</code> (object): \u6210\u529f\u65f6\u8fd4\u56de\u4e00\u4e2a <code>GitRepo</code> \u5bf9\u8c61\u3002</li> <li><code>error</code>: \u5982\u679c\u514b\u9686\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/git/#gitrepopath","title":"<code>git.repo(path)</code>","text":"<p>\u6253\u5f00\u4e00\u4e2a\u73b0\u6709\u7684\u672c\u5730 Git \u5b58\u50a8\u5e93\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>path</code> (string): \u73b0\u6709\u672c\u5730\u5b58\u50a8\u5e93\u7684\u8def\u5f84\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>repo</code> (object): \u6210\u529f\u65f6\u8fd4\u56de\u4e00\u4e2a <code>GitRepo</code> \u5bf9\u8c61\u3002</li> <li><code>error</code>: \u5982\u679c\u8def\u5f84\u4e0d\u662f\u6709\u6548\u7684 Git \u5b58\u50a8\u5e93\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/git/#gitrepo","title":"<code>GitRepo</code> \u5bf9\u8c61","text":"<p>\u6b64\u5bf9\u8c61\u8868\u793a\u4e00\u4e2a\u672c\u5730\u5b58\u50a8\u5e93\uff0c\u5e76\u63d0\u4f9b\u53ef\u94fe\u63a5\u7684\u65b9\u6cd5\u6765\u6267\u884c Git \u64cd\u4f5c\u3002</p>"},{"location":"zh/modules/git/#repocheckoutref","title":"<code>repo:checkout(ref)</code>","text":"<p>\u68c0\u51fa\u7279\u5b9a\u7684\u5206\u652f\u3001\u6807\u7b7e\u6216\u63d0\u4ea4\u3002</p> <ul> <li>\u53c2\u6570: <code>ref</code> (string)\u3002</li> </ul>"},{"location":"zh/modules/git/#repopullremote-branch","title":"<code>repo:pull(remote, branch)</code>","text":"<p>\u4ece\u8fdc\u7a0b\u62c9\u53d6\u66f4\u6539\u3002</p> <ul> <li>\u53c2\u6570: <code>remote</code> (string), <code>branch</code> (string)\u3002</li> </ul>"},{"location":"zh/modules/git/#repoaddpattern","title":"<code>repo:add(pattern)</code>","text":"<p>\u5c06\u6587\u4ef6\u6682\u5b58\u4ee5\u8fdb\u884c\u63d0\u4ea4\u3002</p> <ul> <li>\u53c2\u6570: <code>pattern</code> (string), \u4f8b\u5982 <code>\".\"</code> \u6216 <code>\"path/to/file.txt\"</code>\u3002</li> </ul>"},{"location":"zh/modules/git/#repocommitmessage","title":"<code>repo:commit(message)</code>","text":"<p>\u521b\u5efa\u4e00\u4e2a\u63d0\u4ea4\u3002</p> <ul> <li>\u53c2\u6570: <code>message</code> (string)\u3002</li> </ul>"},{"location":"zh/modules/git/#repotagname-message","title":"<code>repo:tag(name, [message])</code>","text":"<p>\u521b\u5efa\u4e00\u4e2a\u65b0\u6807\u7b7e\u3002</p> <ul> <li>\u53c2\u6570: <code>name</code> (string), <code>message</code> (string, \u53ef\u9009)\u3002</li> </ul>"},{"location":"zh/modules/git/#repopushremote-branch-options","title":"<code>repo:push(remote, branch, [options])</code>","text":"<p>\u5c06\u63d0\u4ea4\u63a8\u9001\u5230\u8fdc\u7a0b\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>remote</code> (string)\u3002</li> <li><code>branch</code> (string)\u3002</li> <li><code>options</code> (table, \u53ef\u9009): \u4f8b\u5982 <code>{ follow_tags = true }</code>\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/git/#reporesult","title":"<code>repo:result()</code>","text":"<p>\u6b64\u65b9\u6cd5\u5728\u94fe\u7684\u672b\u5c3e\u8c03\u7528\uff0c\u4ee5\u83b7\u53d6\u6700\u540e\u4e00\u4e2a\u64cd\u4f5c\u7684\u7ed3\u679c\u3002</p> <ul> <li>\u8fd4\u56de:<ul> <li><code>result</code> (table): \u4e00\u4e2a\u5305\u542b <code>success</code> (boolean)\u3001<code>stdout</code> (string) \u548c <code>stderr</code> (string) \u7684\u8868\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/git/#_1","title":"\u793a\u4f8b","text":"<p>\u6b64\u793a\u4f8b\u6f14\u793a\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684\u7c7b\u4f3c CI/CD \u7684\u5de5\u4f5c\u6d41\uff1a\u514b\u9686\u3001\u521b\u5efa\u7248\u672c\u6587\u4ef6\u3001\u6dfb\u52a0\u3001\u63d0\u4ea4\u3001\u6253\u6807\u7b7e\u548c\u63a8\u9001\u3002</p> <pre><code>command = function()\n  local git = require(\"git\")\n  local repo_path = \"/tmp/git-example-repo\"\n\n  -- \u6e05\u7406\u4ee5\u524d\u7684\u8fd0\u884c\n  fs.rm_r(repo_path)\n\n  -- 1. \u514b\u9686\u5b58\u50a8\u5e93\n  log.info(\"\u6b63\u5728\u514b\u9686\u5b58\u50a8\u5e93...\")\n  local repo, err = git.clone(\"https://github.com/chalkan3-sloth/sloth-runner.git\", repo_path)\n  if err then\n    return false, \"\u514b\u9686\u5931\u8d25: \" .. err\n  end\n\n  -- 2. \u521b\u5efa\u5e76\u5199\u5165\u7248\u672c\u6587\u4ef6\n  fs.write(repo_path .. \"/VERSION\", \"1.2.3\")\n\n  -- 3. \u94fe\u63a5 Git \u547d\u4ee4: add -&gt; commit -&gt; tag -&gt; push\n  log.info(\"\u6b63\u5728\u6dfb\u52a0\u3001\u63d0\u4ea4\u3001\u6253\u6807\u7b7e\u548c\u63a8\u9001...\")\n  repo:add(\".\"):commit(\"ci: Bump version to 1.2.3\"):tag(\"v1.2.3\"):push(\"origin\", \"main\", { follow_tags = true })\n\n  -- 4. \u83b7\u53d6\u6700\u7ec8\u64cd\u4f5c (push) \u7684\u7ed3\u679c\n  local result = repo:result()\n\n  if not result.success then\n    log.error(\"Git \u63a8\u9001\u5931\u8d25: \" .. result.stderr)\n    return false, \"Git \u63a8\u9001\u5931\u8d25\u3002\"\n  end\n\n  log.info(\"\u6210\u529f\u63a8\u9001\u65b0\u7248\u672c\u6807\u7b7e\u3002\")\n  return true, \"Git \u64cd\u4f5c\u6210\u529f\u3002\"\nend\n</code></pre>"},{"location":"zh/modules/log/","title":"Log \u6a21\u5757","text":"<p><code>log</code> \u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u800c\u5fc5\u8981\u7684\u63a5\u53e3\uff0c\u7528\u4e8e\u4ece\u60a8\u7684 Lua \u811a\u672c\u4e2d\u5c06\u6d88\u606f\u8bb0\u5f55\u5230 <code>sloth-runner</code> \u63a7\u5236\u53f0\u3002\u5728\u4efb\u52a1\u6267\u884c\u671f\u95f4\uff0c\u4f7f\u7528\u6b64\u6a21\u5757\u662f\u63d0\u4f9b\u53cd\u9988\u548c\u8c03\u8bd5\u4fe1\u606f\u7684\u6807\u51c6\u65b9\u5f0f\u3002</p>"},{"location":"zh/modules/log/#loginfomessage","title":"<code>log.info(message)</code>","text":"<p>\u4ee5 INFO \u7ea7\u522b\u8bb0\u5f55\u4e00\u6761\u6d88\u606f\u3002\u8fd9\u662f\u7528\u4e8e\u4e00\u822c\u4fe1\u606f\u6027\u6d88\u606f\u7684\u6807\u51c6\u7ea7\u522b\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>message</code> (string): \u8981\u8bb0\u5f55\u7684\u6d88\u606f\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/log/#logwarnmessage","title":"<code>log.warn(message)</code>","text":"<p>\u4ee5 WARN \u7ea7\u522b\u8bb0\u5f55\u4e00\u6761\u6d88\u606f\u3002\u8fd9\u9002\u7528\u4e8e\u5e94\u5f15\u8d77\u7528\u6237\u6ce8\u610f\u7684\u975e\u5173\u952e\u95ee\u9898\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>message</code> (string): \u8981\u8bb0\u5f55\u7684\u6d88\u606f\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/log/#logerrormessage","title":"<code>log.error(message)</code>","text":"<p>\u4ee5 ERROR \u7ea7\u522b\u8bb0\u5f55\u4e00\u6761\u6d88\u606f\u3002\u8fd9\u5e94\u7528\u4e8e\u53ef\u80fd\u5bfc\u81f4\u4efb\u52a1\u5931\u8d25\u7684\u91cd\u5927\u9519\u8bef\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>message</code> (string): \u8981\u8bb0\u5f55\u7684\u6d88\u606f\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/log/#logdebugmessage","title":"<code>log.debug(message)</code>","text":"<p>\u4ee5 DEBUG \u7ea7\u522b\u8bb0\u5f55\u4e00\u6761\u6d88\u606f\u3002\u9664\u975e\u8fd0\u884c\u5668\u5904\u4e8e\u8be6\u7ec6\u6216\u8c03\u8bd5\u6a21\u5f0f\uff0c\u5426\u5219\u8fd9\u4e9b\u6d88\u606f\u901a\u5e38\u662f\u9690\u85cf\u7684\u3002\u5b83\u4eec\u5bf9\u4e8e\u8be6\u7ec6\u7684\u8bca\u65ad\u4fe1\u606f\u5f88\u6709\u7528\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>message</code> (string): \u8981\u8bb0\u5f55\u7684\u6d88\u606f\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/log/#_1","title":"\u793a\u4f8b","text":"<pre><code>command = function()\n  -- log \u6a21\u5757\u662f\u5168\u5c40\u53ef\u7528\u7684\uff0c\u4e0d\u9700\u8981 require\u3002\n\n  log.info(\"\u542f\u52a8\u65e5\u5fd7\u8bb0\u5f55\u793a\u4f8b\u4efb\u52a1\u3002\")\n\n  local user_name = \"Sloth\"\n  log.debug(\"\u5f53\u524d\u7528\u6237\u662f: \" .. user_name)\n\n  if user_name ~= \"Sloth\" then\n    log.warn(\"\u7528\u6237\u4e0d\u662f\u9884\u671f\u7684\u7528\u6237\u3002\")\n  end\n\n  log.info(\"\u4efb\u52a1\u6b63\u5728\u6267\u884c\u5176\u4e3b\u8981\u64cd\u4f5c...\")\n\n  local success = true -- \u6a21\u62df\u4e00\u6b21\u6210\u529f\u7684\u64cd\u4f5c\n  if not success then\n    log.error(\"\u4e3b\u8981\u64cd\u4f5c\u610f\u5916\u5931\u8d25\uff01\")\n    return false, \"\u4e3b\u8981\u64cd\u4f5c\u5931\u8d25\"\n  end\n\n  log.info(\"\u65e5\u5fd7\u8bb0\u5f55\u793a\u4f8b\u4efb\u52a1\u6210\u529f\u5b8c\u6210\u3002\")\n  return true, \"\u65e5\u5fd7\u8bb0\u5f55\u5df2\u6f14\u793a\u3002\"\nend\n</code></pre>"},{"location":"zh/modules/metrics/","title":"\ud83d\udcca \u6307\u6807\u548c\u76d1\u63a7\u6a21\u5757","text":"<p>\u6307\u6807\u548c\u76d1\u63a7\u6a21\u5757\u63d0\u4f9b\u5168\u9762\u7684\u7cfb\u7edf\u76d1\u63a7\u3001\u81ea\u5b9a\u4e49\u6307\u6807\u6536\u96c6\u548c\u5065\u5eb7\u68c0\u67e5\u529f\u80fd\u3002\u5b83\u5b9e\u73b0\u4e86\u5bf9\u7cfb\u7edf\u8d44\u6e90\u548c\u5e94\u7528\u7a0b\u5e8f\u6027\u80fd\u7684\u5b9e\u65f6\u89c2\u5bdf\u80fd\u529b\u3002</p>"},{"location":"zh/modules/metrics/#_2","title":"\ud83d\ude80 \u6838\u5fc3\u7279\u6027","text":"<ul> <li>\u7cfb\u7edf\u6307\u6807: \u81ea\u52a8\u6536\u96c6CPU\u3001\u5185\u5b58\u3001\u78c1\u76d8\u548c\u7f51\u7edc\u6307\u6807</li> <li>\u8fd0\u884c\u65f6\u6307\u6807: Go\u8fd0\u884c\u65f6\u4fe1\u606f\uff08\u534f\u7a0b\u3001\u5806\u3001GC\uff09</li> <li>\u81ea\u5b9a\u4e49\u6307\u6807: \u8ba1\u91cf\u5668\u3001\u8ba1\u6570\u5668\u3001\u76f4\u65b9\u56fe\u548c\u8ba1\u65f6\u5668</li> <li>\u5065\u5eb7\u68c0\u67e5: \u81ea\u52a8\u7cfb\u7edf\u5065\u5eb7\u76d1\u63a7</li> <li>HTTP\u7aef\u70b9: \u517c\u5bb9Prometheus\u7684\u6307\u6807\u5bfc\u51fa</li> <li>\u544a\u8b66\u7cfb\u7edf: \u57fa\u4e8e\u9608\u503c\u7684\u544a\u8b66</li> <li>JSON API: \u5b8c\u6574\u7684\u6307\u6807\u6570\u636e\u7528\u4e8e\u96c6\u6210</li> </ul>"},{"location":"zh/modules/metrics/#_3","title":"\ud83d\udcca \u7cfb\u7edf\u6307\u6807","text":""},{"location":"zh/modules/metrics/#cpu","title":"CPU\u3001\u5185\u5b58\u548c\u78c1\u76d8\u76d1\u63a7","text":"<pre><code>-- \u83b7\u53d6\u5f53\u524dCPU\u4f7f\u7528\u7387\nlocal cpu_usage = metrics.system_cpu()\nlog.info(\"CPU\u4f7f\u7528\u7387: \" .. string.format(\"%.1f%%\", cpu_usage))\n\n-- \u83b7\u53d6\u5185\u5b58\u4fe1\u606f\nlocal memory_info = metrics.system_memory()\nlog.info(\"\u5185\u5b58: \" .. string.format(\"%.1f%% (%.0f/%.0f MB)\", \n    memory_info.percent, memory_info.used_mb, memory_info.total_mb))\n\n-- \u83b7\u53d6\u78c1\u76d8\u4f7f\u7528\u60c5\u51b5\nlocal disk_info = metrics.system_disk(\"/\")\nlog.info(\"\u78c1\u76d8: \" .. string.format(\"%.1f%% (%.1f/%.1f GB)\", \n    disk_info.percent, disk_info.used_gb, disk_info.total_gb))\n\n-- \u68c0\u67e5\u7279\u5b9a\u78c1\u76d8\u8def\u5f84\nlocal var_disk = metrics.system_disk(\"/var\")\nlog.info(\"/var \u78c1\u76d8\u4f7f\u7528\u7387: \" .. string.format(\"%.1f%%\", var_disk.percent))\n</code></pre>"},{"location":"zh/modules/metrics/#_4","title":"\u8fd0\u884c\u65f6\u4fe1\u606f","text":"<pre><code>-- \u83b7\u53d6Go\u8fd0\u884c\u65f6\u6307\u6807\nlocal runtime = metrics.runtime_info()\nlog.info(\"\u8fd0\u884c\u65f6\u4fe1\u606f:\")\nlog.info(\"  \u534f\u7a0b\u6570: \" .. runtime.goroutines)\nlog.info(\"  CPU\u6838\u5fc3: \" .. runtime.num_cpu)\nlog.info(\"  \u5806\u5df2\u5206\u914d: \" .. string.format(\"%.1f MB\", runtime.heap_alloc_mb))\nlog.info(\"  \u5806\u7cfb\u7edf: \" .. string.format(\"%.1f MB\", runtime.heap_sys_mb))\nlog.info(\"  GC\u6b21\u6570: \" .. runtime.num_gc)\nlog.info(\"  Go\u7248\u672c: \" .. runtime.go_version)\n</code></pre>"},{"location":"zh/modules/metrics/#_5","title":"\ud83d\udcc8 \u81ea\u5b9a\u4e49\u6307\u6807","text":""},{"location":"zh/modules/metrics/#_6","title":"\u8ba1\u91cf\u5668\u6307\u6807\uff08\u5f53\u524d\u503c\uff09","text":"<pre><code>-- \u8bbe\u7f6e\u7b80\u5355\u7684\u8ba1\u91cf\u5668\u503c\nmetrics.gauge(\"cpu_temperature\", 65.4)\nmetrics.gauge(\"active_connections\", 142)\nmetrics.gauge(\"queue_size\", 23)\n\n-- \u5e26\u6807\u7b7e\u8bbe\u7f6e\u8ba1\u91cf\u5668\nmetrics.gauge(\"memory_usage\", memory_percent, {\n    server = \"web-01\",\n    environment = \"production\",\n    region = \"us-east-1\"\n})\n\n-- \u66f4\u65b0\u90e8\u7f72\u72b6\u6001\nmetrics.gauge(\"deployment_progress\", 75.5, {\n    app = \"frontend\",\n    version = \"v2.1.0\"\n})\n</code></pre>"},{"location":"zh/modules/metrics/#_7","title":"\u8ba1\u6570\u5668\u6307\u6807\uff08\u589e\u91cf\u503c\uff09","text":"<pre><code>-- \u589e\u91cf\u8ba1\u6570\u5668\nlocal total_requests = metrics.counter(\"http_requests_total\", 1)\nlocal error_count = metrics.counter(\"http_errors_total\", 1, {\n    status_code = \"500\",\n    endpoint = \"/api/users\"\n})\n\n-- \u6279\u91cf\u589e\u91cf\nlocal processed = metrics.counter(\"messages_processed\", 50, {\n    queue = \"user_notifications\",\n    priority = \"high\"\n})\n\nlog.info(\"\u5904\u7406\u7684\u603b\u8bf7\u6c42\u6570: \" .. total_requests)\n</code></pre>"},{"location":"zh/modules/metrics/#_8","title":"\u76f4\u65b9\u56fe\u6307\u6807\uff08\u503c\u5206\u5e03\uff09","text":"<pre><code>-- \u8bb0\u5f55\u54cd\u5e94\u65f6\u95f4\nmetrics.histogram(\"response_time_ms\", 245.6, {\n    endpoint = \"/api/users\",\n    method = \"GET\"\n})\n\n-- \u8bb0\u5f55\u8d1f\u8f7d\u5927\u5c0f\nmetrics.histogram(\"payload_size_bytes\", 1024, {\n    content_type = \"application/json\"\n})\n\n-- \u8bb0\u5f55\u6279\u5904\u7406\u5927\u5c0f\nmetrics.histogram(\"batch_size\", 150, {\n    operation = \"bulk_insert\",\n    table = \"user_events\"\n})\n</code></pre>"},{"location":"zh/modules/metrics/#_9","title":"\u8ba1\u65f6\u5668\u6307\u6807\uff08\u51fd\u6570\u6267\u884c\u65f6\u95f4\uff09","text":"<pre><code>-- \u81ea\u52a8\u8ba1\u65f6\u51fd\u6570\u6267\u884c\nlocal duration = metrics.timer(\"database_query\", function()\n    -- \u6a21\u62df\u6570\u636e\u5e93\u67e5\u8be2\n    local result = exec.run(\"sleep 0.1\")\n    return result\nend, {\n    query_type = \"select\",\n    table = \"users\"\n})\n\nlog.info(\"\u6570\u636e\u5e93\u67e5\u8be2\u8017\u65f6: \" .. string.format(\"%.2f ms\", duration))\n\n-- \u8ba1\u65f6\u590d\u6742\u64cd\u4f5c\nlocal processing_time = metrics.timer(\"data_processing\", function()\n    -- \u5904\u7406\u5927\u6570\u636e\u96c6\n    local data = {}\n    for i = 1, 100000 do\n        data[i] = math.sqrt(i) * 2.5\n    end\n    return #data\nend, {\n    operation = \"mathematical_computation\",\n    size = \"large\"\n})\n\nlog.info(\"\u6570\u636e\u5904\u7406\u5b8c\u6210\u7528\u65f6: \" .. string.format(\"%.2f ms\", processing_time))\n</code></pre>"},{"location":"zh/modules/metrics/#_10","title":"\ud83c\udfe5 \u5065\u5eb7\u76d1\u63a7","text":""},{"location":"zh/modules/metrics/#_11","title":"\u81ea\u52a8\u5065\u5eb7\u72b6\u6001","text":"<pre><code>-- \u83b7\u53d6\u5168\u9762\u7684\u5065\u5eb7\u72b6\u6001\nlocal health = metrics.health_status()\nlog.info(\"\u6574\u4f53\u5065\u5eb7\u72b6\u6001: \" .. health.overall)\n\n-- \u68c0\u67e5\u5404\u4e2a\u7ec4\u4ef6\nlocal components = {\"cpu\", \"memory\", \"disk\"}\nfor _, component in ipairs(components) do\n    local comp_info = health[component]\n    if comp_info then\n        local status_icon = \"\u2705\"\n        if comp_info.status == \"warning\" then\n            status_icon = \"\u26a0\ufe0f\"\n        elseif comp_info.status == \"critical\" then\n            status_icon = \"\u274c\"\n        end\n\n        log.info(string.format(\"  %s %s: %.1f%% (%s)\", \n            status_icon, component:upper(), comp_info.usage, comp_info.status))\n    end\nend\n</code></pre>"},{"location":"zh/modules/metrics/#_12","title":"\u81ea\u5b9a\u4e49\u5065\u5eb7\u68c0\u67e5","text":"<pre><code>-- \u521b\u5efa\u5e94\u7528\u5065\u5eb7\u68c0\u67e5\u51fd\u6570\nfunction check_application_health()\n    local health_score = 100\n    local issues = {}\n\n    -- \u68c0\u67e5\u6570\u636e\u5e93\u8fde\u901a\u6027\n    local db_result = exec.run(\"pg_isready -h localhost -p 5432\")\n    if db_result ~= \"\" then\n        health_score = health_score - 20\n        table.insert(issues, \"\u6570\u636e\u5e93\u8fde\u63a5\u5931\u8d25\")\n    end\n\n    -- \u68c0\u67e5\u78c1\u76d8\u7a7a\u95f4\n    local disk = metrics.system_disk(\"/\")\n    if disk.percent &gt; 90 then\n        health_score = health_score - 30\n        table.insert(issues, \"\u78c1\u76d8\u7a7a\u95f4\u4e25\u91cd\u4e0d\u8db3: \" .. string.format(\"%.1f%%\", disk.percent))\n    end\n\n    -- \u68c0\u67e5\u5185\u5b58\u4f7f\u7528\n    local memory = metrics.system_memory()\n    if memory.percent &gt; 85 then\n        health_score = health_score - 25\n        table.insert(issues, \"\u5185\u5b58\u4f7f\u7528\u7387\u9ad8: \" .. string.format(\"%.1f%%\", memory.percent))\n    end\n\n    -- \u8bb0\u5f55\u5065\u5eb7\u5f97\u5206\n    metrics.gauge(\"application_health_score\", health_score)\n\n    if health_score &lt; 70 then\n        metrics.alert(\"application_health\", {\n            level = \"warning\",\n            message = \"\u5e94\u7528\u5065\u5eb7\u72b6\u51b5\u4e0b\u964d: \" .. table.concat(issues, \", \"),\n            score = health_score\n        })\n    end\n\n    return health_score &gt;= 70\nend\n\n-- \u5728\u4efb\u52a1\u4e2d\u4f7f\u7528\nModern DSLs = {\n    health_monitoring = {\n        tasks = {\n            health_check = {\n                command = function()\n                    local healthy = check_application_health()\n                    return healthy, healthy and \"\u7cfb\u7edf\u5065\u5eb7\" or \"\u68c0\u6d4b\u5230\u7cfb\u7edf\u5065\u5eb7\u95ee\u9898\"\n                end\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"zh/modules/metrics/#_13","title":"\ud83d\udea8 \u544a\u8b66\u7cfb\u7edf","text":""},{"location":"zh/modules/metrics/#_14","title":"\u521b\u5efa\u544a\u8b66","text":"<pre><code>-- \u7b80\u5355\u9608\u503c\u544a\u8b66\nlocal cpu = metrics.system_cpu()\nif cpu &gt; 80 then\n    metrics.alert(\"high_cpu_usage\", {\n        level = \"warning\",\n        message = \"CPU\u4f7f\u7528\u7387\u8fc7\u9ad8: \" .. string.format(\"%.1f%%\", cpu),\n        threshold = 80,\n        value = cpu,\n        severity = \"medium\"\n    })\nend\n\n-- \u591a\u6761\u4ef6\u590d\u6742\u544a\u8b66\nlocal memory = metrics.system_memory()\nlocal disk = metrics.system_disk()\n\nif memory.percent &gt; 90 and disk.percent &gt; 85 then\n    metrics.alert(\"resource_exhaustion\", {\n        level = \"critical\",\n        message = string.format(\"\u8d44\u6e90\u4f7f\u7528\u4e25\u91cd - \u5185\u5b58: %.1f%%, \u78c1\u76d8: %.1f%%\", \n            memory.percent, disk.percent),\n        memory_usage = memory.percent,\n        disk_usage = disk.percent,\n        recommended_action = \"\u7acb\u5373\u6269\u5c55\u8d44\u6e90\"\n    })\nend\n\n-- \u5e94\u7528\u7279\u5b9a\u544a\u8b66\nlocal queue_size = state.get(\"task_queue_size\", 0)\nif queue_size &gt; 1000 then\n    metrics.alert(\"queue_backlog\", {\n        level = \"warning\", \n        message = \"\u68c0\u6d4b\u5230\u4efb\u52a1\u961f\u5217\u79ef\u538b: \" .. queue_size .. \" \u4e2a\u9879\u76ee\",\n        queue_size = queue_size,\n        estimated_processing_time = queue_size * 2 .. \" \u79d2\"\n    })\nend\n</code></pre>"},{"location":"zh/modules/metrics/#_15","title":"\ud83d\udd0d \u6307\u6807\u7ba1\u7406","text":""},{"location":"zh/modules/metrics/#_16","title":"\u68c0\u7d22\u81ea\u5b9a\u4e49\u6307\u6807","text":"<pre><code>-- \u83b7\u53d6\u7279\u5b9a\u81ea\u5b9a\u4e49\u6307\u6807\nlocal cpu_metric = metrics.get_custom(\"cpu_temperature\")\nif cpu_metric then\n    log.info(\"CPU\u6e29\u5ea6\u6307\u6807: \" .. data.to_json(cpu_metric))\nend\n\n-- \u5217\u51fa\u6240\u6709\u81ea\u5b9a\u4e49\u6307\u6807\nlocal all_metrics = metrics.list_custom()\nlog.info(\"\u81ea\u5b9a\u4e49\u6307\u6807\u603b\u6570: \" .. #all_metrics)\nfor i, metric_name in ipairs(all_metrics) do\n    log.info(\"  \" .. i .. \". \" .. metric_name)\nend\n</code></pre>"},{"location":"zh/modules/metrics/#_17","title":"\u6027\u80fd\u76d1\u63a7\u793a\u4f8b","text":"<pre><code>Modern DSLs = {\n    performance_monitoring = {\n        tasks = {\n            monitor_api_performance = {\n                command = function()\n                    -- \u5f00\u59cb\u76d1\u63a7\u4f1a\u8bdd\n                    log.info(\"\u5f00\u59cbAPI\u6027\u80fd\u76d1\u63a7...\")\n\n                    -- \u6a21\u62dfAPI\u8c03\u7528\u5e76\u6d4b\u91cf\u6027\u80fd\n                    for i = 1, 10 do\n                        local api_time = metrics.timer(\"api_call_\" .. i, function()\n                            -- \u6a21\u62dfAPI\u8c03\u7528\n                            exec.run(\"curl -s -o /dev/null -w '%{time_total}' https://api.example.com/health\")\n                        end, {\n                            endpoint = \"health\",\n                            call_number = tostring(i)\n                        })\n\n                        -- \u8bb0\u5f55\u54cd\u5e94\u65f6\u95f4\n                        metrics.histogram(\"api_response_time\", api_time, {\n                            endpoint = \"health\"\n                        })\n\n                        -- \u68c0\u67e5\u54cd\u5e94\u65f6\u95f4\u662f\u5426\u53ef\u63a5\u53d7\n                        if api_time &gt; 1000 then -- 1\u79d2\n                            metrics.counter(\"slow_api_calls\", 1, {\n                                endpoint = \"health\"\n                            })\n\n                            metrics.alert(\"slow_api_response\", {\n                                level = \"warning\",\n                                message = string.format(\"API\u54cd\u5e94\u6162: %.2f ms\", api_time),\n                                response_time = api_time,\n                                threshold = 1000\n                            })\n                        end\n\n                        -- \u8c03\u7528\u95f4\u77ed\u6682\u5ef6\u8fdf\n                        exec.run(\"sleep 0.1\")\n                    end\n\n                    -- \u83b7\u53d6\u6c47\u603b\u7edf\u8ba1\n                    local system_health = metrics.health_status()\n                    log.info(\"API\u6d4b\u8bd5\u540e\u7cfb\u7edf\u5065\u5eb7: \" .. system_health.overall)\n\n                    return true, \"API\u6027\u80fd\u76d1\u63a7\u5b8c\u6210\"\n                end\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"zh/modules/metrics/#http","title":"\ud83c\udf10 HTTP\u7aef\u70b9","text":"<p>\u6307\u6807\u6a21\u5757\u81ea\u52a8\u4e3a\u5916\u90e8\u76d1\u63a7\u7cfb\u7edf\u516c\u5f00HTTP\u7aef\u70b9\uff1a</p>"},{"location":"zh/modules/metrics/#prometheus-metrics","title":"Prometheus\u683c\u5f0f (<code>/metrics</code>)","text":"<pre><code># \u8bbf\u95ee\u517c\u5bb9Prometheus\u7684\u6307\u6807\ncurl http://agent:8080/metrics\n\n# \u793a\u4f8b\u8f93\u51fa:\n# sloth_agent_cpu_usage_percent 15.4\n# sloth_agent_memory_usage_mb 2048.5\n# sloth_agent_disk_usage_percent 67.2\n# sloth_agent_tasks_total 142\n</code></pre>"},{"location":"zh/modules/metrics/#json-metricsjson","title":"JSON\u683c\u5f0f (<code>/metrics/json</code>)","text":"<pre><code># \u83b7\u53d6JSON\u683c\u5f0f\u7684\u5b8c\u6574\u6307\u6807\ncurl http://agent:8080/metrics/json\n\n# \u793a\u4f8b\u54cd\u5e94:\n{\n  \"agent_name\": \"myagent1\",\n  \"timestamp\": \"2024-01-15T10:30:00Z\",\n  \"system\": {\n    \"cpu_usage_percent\": 15.4,\n    \"memory_usage_mb\": 2048.5,\n    \"disk_usage_percent\": 67.2\n  },\n  \"runtime\": {\n    \"num_goroutines\": 25,\n    \"heap_alloc_mb\": 45.2\n  },\n  \"custom\": {\n    \"api_response_time\": {...},\n    \"deployment_progress\": 85.5\n  }\n}\n</code></pre>"},{"location":"zh/modules/metrics/#health","title":"\u5065\u5eb7\u68c0\u67e5 (<code>/health</code>)","text":"<pre><code># \u68c0\u67e5\u4ee3\u7406\u5065\u5eb7\u72b6\u6001\ncurl http://agent:8080/health\n\n# \u793a\u4f8b\u54cd\u5e94:\n{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2024-01-15T10:30:00Z\",\n  \"checks\": {\n    \"cpu\": {\"usage\": 15.4, \"status\": \"healthy\"},\n    \"memory\": {\"usage\": 45.8, \"status\": \"healthy\"},\n    \"disk\": {\"usage\": 67.2, \"status\": \"healthy\"}\n  }\n}\n</code></pre>"},{"location":"zh/modules/metrics/#api","title":"\ud83d\udccb API\u53c2\u8003","text":""},{"location":"zh/modules/metrics/#_18","title":"\u7cfb\u7edf\u6307\u6807","text":"\u51fd\u6570 \u53c2\u6570 \u8fd4\u56de\u503c \u63cf\u8ff0 <code>metrics.system_cpu()</code> - usage: number \u83b7\u53d6\u5f53\u524dCPU\u4f7f\u7528\u767e\u5206\u6bd4 <code>metrics.system_memory()</code> - info: table \u83b7\u53d6\u5185\u5b58\u4f7f\u7528\u4fe1\u606f <code>metrics.system_disk(path?)</code> path?: string info: table \u83b7\u53d6\u8def\u5f84\u7684\u78c1\u76d8\u4f7f\u7528\u60c5\u51b5 (\u9ed8\u8ba4: \"/\") <code>metrics.runtime_info()</code> - info: table \u83b7\u53d6Go\u8fd0\u884c\u65f6\u4fe1\u606f"},{"location":"zh/modules/metrics/#_19","title":"\u81ea\u5b9a\u4e49\u6307\u6807","text":"\u51fd\u6570 \u53c2\u6570 \u8fd4\u56de\u503c \u63cf\u8ff0 <code>metrics.gauge(name, value, tags?)</code> name: string, value: number, tags?: table success: boolean \u8bbe\u7f6e\u8ba1\u91cf\u5668\u6307\u6807 <code>metrics.counter(name, increment?, tags?)</code> name: string, increment?: number, tags?: table new_value: number \u589e\u91cf\u8ba1\u6570\u5668 <code>metrics.histogram(name, value, tags?)</code> name: string, value: number, tags?: table success: boolean \u8bb0\u5f55\u76f4\u65b9\u56fe\u503c <code>metrics.timer(name, function, tags?)</code> name: string, func: function, tags?: table duration: number \u8ba1\u65f6\u51fd\u6570\u6267\u884c"},{"location":"zh/modules/metrics/#_20","title":"\u5065\u5eb7\u548c\u76d1\u63a7","text":"\u51fd\u6570 \u53c2\u6570 \u8fd4\u56de\u503c \u63cf\u8ff0 <code>metrics.health_status()</code> - status: table \u83b7\u53d6\u5168\u9762\u5065\u5eb7\u72b6\u6001 <code>metrics.alert(name, data)</code> name: string, data: table success: boolean \u521b\u5efa\u544a\u8b66"},{"location":"zh/modules/metrics/#_21","title":"\u5b9e\u7528\u5de5\u5177","text":"\u51fd\u6570 \u53c2\u6570 \u8fd4\u56de\u503c \u63cf\u8ff0 <code>metrics.get_custom(name)</code> name: string metric: table | nil \u6309\u540d\u79f0\u83b7\u53d6\u81ea\u5b9a\u4e49\u6307\u6807 <code>metrics.list_custom()</code> - names: table \u5217\u51fa\u6240\u6709\u81ea\u5b9a\u4e49\u6307\u6807\u540d\u79f0"},{"location":"zh/modules/metrics/#_22","title":"\ud83c\udfaf \u6700\u4f73\u5b9e\u8df5","text":"<ol> <li>\u4f7f\u7528\u5408\u9002\u7684\u6307\u6807\u7c7b\u578b - \u8ba1\u91cf\u5668\u7528\u4e8e\u5f53\u524d\u503c\uff0c\u8ba1\u6570\u5668\u7528\u4e8e\u603b\u8ba1\uff0c\u76f4\u65b9\u56fe\u7528\u4e8e\u5206\u5e03</li> <li>\u6dfb\u52a0\u6709\u610f\u4e49\u7684\u6807\u7b7e \u6765\u5206\u7c7b\u548c\u8fc7\u6ee4\u6307\u6807</li> <li>\u8bbe\u7f6e\u5408\u7406\u7684\u544a\u8b66\u9608\u503c \u4ee5\u907f\u514d\u544a\u8b66\u75b2\u52b3</li> <li>\u76d1\u63a7\u5e7f\u6cdb\u6307\u6807\u6536\u96c6\u7684\u6027\u80fd\u5f71\u54cd</li> <li>\u5bf9\u6027\u80fd\u5173\u952e\u64cd\u4f5c\u4f7f\u7528\u8ba1\u65f6\u5668 \u6765\u8bc6\u522b\u74f6\u9888</li> <li>\u4e3a\u6240\u6709\u5173\u952e\u7cfb\u7edf\u7ec4\u4ef6\u5b9e\u65bd\u5065\u5eb7\u68c0\u67e5</li> <li>\u5c06\u6307\u6807\u5bfc\u51fa\u5230\u5916\u90e8\u7cfb\u7edf \u5982Prometheus\u8fdb\u884c\u957f\u671f\u5b58\u50a8</li> </ol> <p>\u6307\u6807\u548c\u76d1\u63a7\u6a21\u5757\u4e3a\u60a8\u7684\u5206\u5e03\u5f0fsloth-runner\u73af\u5883\u63d0\u4f9b\u5168\u9762\u7684\u53ef\u89c2\u6d4b\u6027! \ud83d\udcca\ud83d\ude80</p>"},{"location":"zh/modules/net/","title":"Net \u6a21\u5757","text":"<p><code>net</code> \u6a21\u5757\u63d0\u4f9b\u4e86\u53d1\u51fa HTTP \u8bf7\u6c42\u548c\u4e0b\u8f7d\u6587\u4ef6\u7684\u529f\u80fd\uff0c\u5141\u8bb8\u60a8\u7684\u4efb\u52a1\u4e0e Web \u670d\u52a1\u548c\u8fdc\u7a0b\u8d44\u6e90\u8fdb\u884c\u4ea4\u4e92\u3002</p>"},{"location":"zh/modules/net/#nethttp_geturl","title":"<code>net.http_get(url)</code>","text":"<p>\u5411\u6307\u5b9a\u7684 URL \u6267\u884c HTTP GET \u8bf7\u6c42\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>url</code> (string): \u8981\u53d1\u9001 GET \u8bf7\u6c42\u7684 URL\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>body</code> (string): \u4f5c\u4e3a\u5b57\u7b26\u4e32\u7684\u54cd\u5e94\u4f53\u3002</li> <li><code>status_code</code> (number): \u54cd\u5e94\u7684 HTTP \u72b6\u6001\u7801\u3002</li> <li><code>headers</code> (table): \u5305\u542b\u54cd\u5e94\u5934\u7684\u8868\u3002</li> <li><code>error</code> (string): \u5982\u679c\u8bf7\u6c42\u5931\u8d25\uff0c\u5219\u4e3a\u9519\u8bef\u6d88\u606f\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/net/#nethttp_posturl-body-headers","title":"<code>net.http_post(url, body, [headers])</code>","text":"<p>\u5411\u6307\u5b9a\u7684 URL \u6267\u884c HTTP POST \u8bf7\u6c42\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>url</code> (string): \u8981\u53d1\u9001 POST \u8bf7\u6c42\u7684 URL\u3002</li> <li><code>body</code> (string): \u8981\u53d1\u9001\u7684\u8bf7\u6c42\u4f53\u3002</li> <li><code>headers</code> (table, \u53ef\u9009): \u8981\u8bbe\u7f6e\u7684\u8bf7\u6c42\u5934\u8868\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>body</code> (string): \u4f5c\u4e3a\u5b57\u7b26\u4e32\u7684\u54cd\u5e94\u4f53\u3002</li> <li><code>status_code</code> (number): \u54cd\u5e94\u7684 HTTP \u72b6\u6001\u7801\u3002</li> <li><code>headers</code> (table): \u5305\u542b\u54cd\u5e94\u5934\u7684\u8868\u3002</li> <li><code>error</code> (string): \u5982\u679c\u8bf7\u6c42\u5931\u8d25\uff0c\u5219\u4e3a\u9519\u8bef\u6d88\u606f\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/net/#netdownloadurl-destination_path","title":"<code>net.download(url, destination_path)</code>","text":"<p>\u4ece URL \u4e0b\u8f7d\u6587\u4ef6\u5e76\u5c06\u5176\u4fdd\u5b58\u5230\u672c\u5730\u8def\u5f84\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>url</code> (string): \u8981\u4e0b\u8f7d\u7684\u6587\u4ef6\u7684 URL\u3002</li> <li><code>destination_path</code> (string): \u7528\u4e8e\u4fdd\u5b58\u4e0b\u8f7d\u5185\u5bb9\u7684\u672c\u5730\u6587\u4ef6\u8def\u5f84\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>error</code>: \u5982\u679c\u4e0b\u8f7d\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/net/#_1","title":"\u793a\u4f8b","text":"<pre><code>command = function()\n  local net = require(\"net\")\n\n  -- GET \u8bf7\u6c42\u793a\u4f8b\n  log.info(\"\u6b63\u5728\u5411 httpbin.org \u6267\u884c GET \u8bf7\u6c42...\")\n  local body, status, headers, err = net.http_get(\"https://httpbin.org/get\")\n  if err then\n    log.error(\"GET \u8bf7\u6c42\u5931\u8d25: \" .. err)\n    return false, \"GET \u8bf7\u6c42\u5931\u8d25\"\n  end\n  log.info(\"GET \u8bf7\u6c42\u6210\u529f\uff01\u72b6\u6001: \" .. status)\n  -- print(\"\u54cd\u5e94\u4f53: \" .. body)\n\n  -- POST \u8bf7\u6c42\u793a\u4f8b\n  log.info(\"\u6b63\u5728\u5411 httpbin.org \u6267\u884c POST \u8bf7\u6c42...\")\n  local post_body = '{\"name\": \"sloth-runner\", \"awesome\": true}'\n  local post_headers = { [\"Content-Type\"] = \"application/json\" }\n  body, status, headers, err = net.http_post(\"https://httpbin.org/post\", post_body, post_headers)\n  if err then\n    log.error(\"POST \u8bf7\u6c42\u5931\u8d25: \" .. err)\n    return false, \"POST \u8bf7\u6c42\u5931\u8d25\"\n  end\n  log.info(\"POST \u8bf7\u6c42\u6210\u529f\uff01\u72b6\u6001: \" .. status)\n  -- print(\"\u54cd\u5e94\u4f53: \" .. body)\n\n  -- \u4e0b\u8f7d\u793a\u4f8b\n  local download_path = \"/tmp/sloth-runner-logo.svg\"\n  log.info(\"\u6b63\u5728\u4e0b\u8f7d\u6587\u4ef6\u5230 \" .. download_path)\n  local err = net.download(\"https://raw.githubusercontent.com/chalkan3-sloth/sloth-runner/master/assets/sloth-runner-logo.svg\", download_path)\n  if err then\n    log.error(\"\u4e0b\u8f7d\u5931\u8d25: \" .. err)\n    return false, \"\u4e0b\u8f7d\u5931\u8d25\"\n  end\n  log.info(\"\u6587\u4ef6\u4e0b\u8f7d\u6210\u529f\u3002\")\n  fs.rm(download_path) -- \u6e05\u7406\n\n  return true, \"Net \u6a21\u5757\u64cd\u4f5c\u6210\u529f\u3002\"\nend\n</code></pre>"},{"location":"zh/modules/notifications/","title":"\u901a\u77e5\u6a21\u5757","text":"<p><code>notifications</code> \u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u79cd\u4ece\u60a8\u7684\u7ba1\u9053\u5411\u5404\u79cd\u901a\u77e5\u670d\u52a1\u53d1\u9001\u6d88\u606f\u7684\u7b80\u5355\u65b9\u6cd5\u3002\u8fd9\u5bf9\u4e8e\u62a5\u544a CI/CD \u5de5\u4f5c\u6d41\u7684\u6210\u529f\u6216\u5931\u8d25\u7279\u522b\u6709\u7528\u3002</p> <p>\u76ee\u524d\u652f\u6301\u4ee5\u4e0b\u670d\u52a1\uff1a - Slack - ntfy</p>"},{"location":"zh/modules/notifications/#_2","title":"\u914d\u7f6e","text":"<p>\u5728\u4f7f\u7528\u8be5\u6a21\u5757\u4e4b\u524d\uff0c\u60a8\u9700\u8981\u5c06\u6240\u9700\u7684\u51ed\u636e\u6216 URL \u6dfb\u52a0\u5230\u60a8\u7684 <code>configs/values.yaml</code> \u6587\u4ef6\u4e2d\u3002\u8be5\u6a21\u5757\u5c06\u5728\u8fd0\u884c\u65f6\u8bfb\u53d6\u8fd9\u4e9b\u503c\u3002</p> <pre><code># configs/values.yaml\n\nnotifications:\n  slack:\n    # \u60a8\u7684 Slack Incoming Webhook URL\n    webhook_url: \"https://hooks.slack.com/services/...\"\n  ntfy:\n    # \u8981\u4f7f\u7528\u7684 ntfy \u670d\u52a1\u5668\u3002\u53ef\u4ee5\u662f\u516c\u5171\u670d\u52a1\u5668\u6216\u81ea\u6258\u7ba1\u670d\u52a1\u5668\u3002\n    server: \"https://ntfy.sh\"\n    # \u7528\u4e8e\u53d1\u5e03\u901a\u77e5\u7684\u4e3b\u9898\u3002\n    topic: \"your-sloth-runner-topic\"\n</code></pre>"},{"location":"zh/modules/notifications/#slack","title":"Slack","text":""},{"location":"zh/modules/notifications/#notificationsslacksendparams","title":"<code>notifications.slack.send(params)</code>","text":"<p>\u901a\u8fc7 Incoming Webhook \u5411 Slack \u9891\u9053\u53d1\u9001\u6d88\u606f\u3002</p> <p>\u53c2\u6570:</p> <ul> <li><code>params</code> (table): \u4e00\u4e2a\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\u7684\u8868\uff1a<ul> <li><code>webhook_url</code> (string): \u5fc5\u9700\u3002 Slack Incoming Webhook URL\u3002\u5efa\u8bae\u4ece <code>values</code> \u6a21\u5757\u83b7\u53d6\u3002</li> <li><code>message</code> (string): \u5fc5\u9700\u3002 \u6d88\u606f\u7684\u4e3b\u8981\u6587\u672c\u3002</li> <li><code>pipeline</code> (string): \u53ef\u9009\u3002 \u7ba1\u9053\u7684\u540d\u79f0\uff0c\u5c06\u663e\u793a\u5728\u6d88\u606f\u9644\u4ef6\u4e2d\u4ee5\u63d0\u4f9b\u4e0a\u4e0b\u6587\u3002</li> <li><code>error_details</code> (string): \u53ef\u9009\u3002 \u8981\u5305\u542b\u5728\u6d88\u606f\u9644\u4ef6\u4e2d\u7684\u4efb\u4f55\u9519\u8bef\u8be6\u7ec6\u4fe1\u606f\u3002\u8fd9\u5bf9\u4e8e\u5931\u8d25\u901a\u77e5\u5f88\u6709\u7528\u3002</li> </ul> </li> </ul> <p>\u8fd4\u56de:</p> <ul> <li>\u6210\u529f\u65f6\u8fd4\u56de <code>true</code>\u3002</li> <li>\u5931\u8d25\u65f6\u8fd4\u56de <code>false, error_message</code>\u3002</li> </ul> <p>\u793a\u4f8b:</p> <pre><code>local values = require(\"values\")\n\nlocal slack_webhook = values.get(\"notifications.slack.webhook_url\")\n\nif slack_webhook and slack_webhook ~= \"\" then\n  -- \u6210\u529f\u65f6\n  notifications.slack.send({\n    webhook_url = slack_webhook,\n    message = \"\u2705 \u7ba1\u9053\u6210\u529f\u6267\u884c\uff01\",\n    pipeline = \"my-awesome-pipeline\"\n  })\n\n  -- \u5931\u8d25\u65f6\n  notifications.slack.send({\n    webhook_url = slack_webhook,\n    message = \"\u274c \u7ba1\u9053\u6267\u884c\u5931\u8d25\uff01\",\n    pipeline = \"my-awesome-pipeline\",\n    error_details = \"\u65e0\u6cd5\u8fde\u63a5\u5230\u6570\u636e\u5e93\u3002\"\n  })\nend\n</code></pre>"},{"location":"zh/modules/notifications/#ntfy","title":"ntfy","text":""},{"location":"zh/modules/notifications/#notificationsntfysendparams","title":"<code>notifications.ntfy.send(params)</code>","text":"<p>\u5411 ntfy.sh \u4e3b\u9898\u53d1\u9001\u6d88\u606f\u3002</p> <p>\u53c2\u6570:</p> <ul> <li><code>params</code> (table): \u4e00\u4e2a\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\u7684\u8868\uff1a<ul> <li><code>server</code> (string): \u5fc5\u9700\u3002 ntfy \u670d\u52a1\u5668 URL\u3002</li> <li><code>topic</code> (string): \u5fc5\u9700\u3002 \u8981\u53d1\u9001\u6d88\u606f\u7684\u4e3b\u9898\u3002</li> <li><code>message</code> (string): \u5fc5\u9700\u3002 \u901a\u77e5\u7684\u6b63\u6587\u3002</li> <li><code>title</code> (string): \u53ef\u9009\u3002 \u901a\u77e5\u7684\u6807\u9898\u3002</li> <li><code>priority</code> (string): \u53ef\u9009\u3002 \u901a\u77e5\u4f18\u5148\u7ea7\uff08\u4f8b\u5982 <code>high</code>, <code>default</code>, <code>low</code>\uff09\u3002</li> <li><code>tags</code> (table): \u53ef\u9009\u3002 \u8981\u6dfb\u52a0\u5230\u901a\u77e5\u4e2d\u7684\u6807\u7b7e\uff08\u8868\u60c5\u7b26\u53f7\uff09\u5217\u8868\u3002</li> </ul> </li> </ul> <p>\u8fd4\u56de:</p> <ul> <li>\u6210\u529f\u65f6\u8fd4\u56de <code>true</code>\u3002</li> <li>\u5931\u8d25\u65f6\u8fd4\u56de <code>false, error_message</code>\u3002</li> </ul> <p>\u793a\u4f8b:</p> <pre><code>local values = require(\"values\")\n\nlocal ntfy_server = values.get(\"notifications.ntfy.server\")\nlocal ntfy_topic = values.get(\"notifications.ntfy.topic\")\n\nif ntfy_topic and ntfy_topic ~= \"\" then\n  -- \u6210\u529f\u65f6\n  notifications.ntfy.send({\n    server = ntfy_server,\n    topic = ntfy_topic,\n    title = \"\u7ba1\u9053\u6210\u529f\",\n    message = \"\u7ba1\u9053\u65e0\u9519\u8bef\u5b8c\u6210\u3002\",\n    priority = \"default\",\n    tags = {\"tada\"}\n  })\n\n  -- \u5931\u8d25\u65f6\n  notifications.ntfy.send({\n    server = ntfy_server,\n    topic = ntfy_topic,\n    title = \"\u7ba1\u9053\u5931\u8d25\uff01\",\n    message = \"\u7ba1\u9053\u56e0\u9519\u8bef\u800c\u5931\u8d25\u3002\",\n    priority = \"high\",\n    tags = {\"skull\", \"warning\"}\n  })\nend\n</code></pre>"},{"location":"zh/modules/pulumi/","title":"Pulumi \u6a21\u5757","text":"<p><code>pulumi</code> \u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6d41\u7545\u7684 API \u6765\u7f16\u6392 Pulumi \u5806\u6808\uff0c\u4f7f\u60a8\u80fd\u591f\u76f4\u63a5\u4ece <code>sloth-runner</code> \u7ba1\u7406\u60a8\u7684\u57fa\u7840\u8bbe\u65bd\u5373\u4ee3\u7801 (IaC) \u5de5\u4f5c\u6d41\u3002</p>"},{"location":"zh/modules/pulumi/#pulumistackname-options","title":"<code>pulumi.stack(name, options)</code>","text":"<p>\u521b\u5efa\u4e00\u4e2a Pulumi \u5806\u6808\u5bf9\u8c61\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>name</code> (string): \u5806\u6808\u7684\u5168\u540d (\u4f8b\u5982, <code>\"my-org/my-project/dev\"</code>)\u3002</li> <li><code>options</code> (table): \u4e00\u4e2a\u9009\u9879\u8868\u3002<ul> <li><code>workdir</code> (string): (\u5fc5\u9700) Pulumi \u9879\u76ee\u76ee\u5f55\u7684\u8def\u5f84\u3002</li> </ul> </li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>stack</code> (object): \u4e00\u4e2a <code>PulumiStack</code> \u5bf9\u8c61\u3002</li> <li><code>error</code>: \u5982\u679c\u65e0\u6cd5\u521d\u59cb\u5316\u5806\u6808\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/pulumi/#pulumistack","title":"<code>PulumiStack</code> \u5bf9\u8c61","text":"<p>\u6b64\u5bf9\u8c61\u8868\u793a\u4e00\u4e2a\u7279\u5b9a\u7684 Pulumi \u5806\u6808\uff0c\u5e76\u63d0\u4f9b\u7528\u4e8e\u4ea4\u4e92\u7684\u65b9\u6cd5\u3002</p>"},{"location":"zh/modules/pulumi/#stackupoptions","title":"<code>stack:up([options])</code>","text":"<p>\u901a\u8fc7\u8fd0\u884c <code>pulumi up</code> \u521b\u5efa\u6216\u66f4\u65b0\u5806\u6808\u7684\u8d44\u6e90\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>options</code> (table, \u53ef\u9009):<ul> <li><code>yes</code> (boolean): \u5982\u679c\u4e3a <code>true</code>\uff0c\u5219\u4f20\u9012 <code>--yes</code> \u4ee5\u81ea\u52a8\u6279\u51c6\u66f4\u65b0\u3002</li> <li><code>config</code> (table): \u8981\u4f20\u9012\u7ed9\u5806\u6808\u7684\u914d\u7f6e\u503c\u5b57\u5178\u3002</li> <li><code>args</code> (table): \u8981\u4f20\u9012\u7ed9\u547d\u4ee4\u7684\u9644\u52a0\u5b57\u7b26\u4e32\u53c2\u6570\u5217\u8868\u3002</li> </ul> </li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>result</code> (table): \u4e00\u4e2a\u5305\u542b <code>success</code> (boolean)\u3001<code>stdout</code> (string) \u548c <code>stderr</code> (string) \u7684\u8868\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/pulumi/#stackpreviewoptions","title":"<code>stack:preview([options])</code>","text":"<p>\u901a\u8fc7\u8fd0\u884c <code>pulumi preview</code> \u9884\u89c8\u66f4\u65b0\u5c06\u8fdb\u884c\u7684\u66f4\u6539\u3002</p> <ul> <li>\u53c2\u6570: \u4e0e <code>stack:up</code> \u76f8\u540c\u3002</li> <li>\u8fd4\u56de: \u4e0e <code>stack:up</code> \u76f8\u540c\u3002</li> </ul>"},{"location":"zh/modules/pulumi/#stackrefreshoptions","title":"<code>stack:refresh([options])</code>","text":"<p>\u901a\u8fc7\u8fd0\u884c <code>pulumi refresh</code> \u5237\u65b0\u5806\u6808\u7684\u72b6\u6001\u3002</p> <ul> <li>\u53c2\u6570: \u4e0e <code>stack:up</code> \u76f8\u540c\u3002</li> <li>\u8fd4\u56de: \u4e0e <code>stack:up</code> \u76f8\u540c\u3002</li> </ul>"},{"location":"zh/modules/pulumi/#stackdestroyoptions","title":"<code>stack:destroy([options])</code>","text":"<p>\u901a\u8fc7\u8fd0\u884c <code>pulumi destroy</code> \u9500\u6bc1\u5806\u6808\u4e2d\u7684\u6240\u6709\u8d44\u6e90\u3002</p> <ul> <li>\u53c2\u6570: \u4e0e <code>stack:up</code> \u76f8\u540c\u3002</li> <li>\u8fd4\u56de: \u4e0e <code>stack:up</code> \u76f8\u540c\u3002</li> </ul>"},{"location":"zh/modules/pulumi/#stackoutputs","title":"<code>stack:outputs()</code>","text":"<p>\u68c0\u7d22\u5df2\u90e8\u7f72\u5806\u6808\u7684\u8f93\u51fa\u3002</p> <ul> <li>\u8fd4\u56de:<ul> <li><code>outputs</code> (table): \u5806\u6808\u8f93\u51fa\u7684 Lua \u8868\u3002</li> <li><code>error</code>: \u5982\u679c\u83b7\u53d6\u8f93\u51fa\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/pulumi/#_1","title":"\u793a\u4f8b","text":"<p>\u6b64\u793a\u4f8b\u663e\u793a\u4e86\u4e00\u4e2a\u5e38\u89c1\u6a21\u5f0f\uff1a\u90e8\u7f72\u4e00\u4e2a\u7f51\u7edc\u5806\u6808 (VPC)\uff0c\u7136\u540e\u4f7f\u7528\u5176\u8f93\u51fa (<code>vpcId</code>) \u6765\u914d\u7f6e\u548c\u90e8\u7f72\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5806\u6808\u3002</p> <pre><code>command = function()\n  local pulumi = require(\"pulumi\")\n\n  -- 1. \u5b9a\u4e49 VPC \u5806\u6808\n  local vpc_stack = pulumi.stack(\"my-org/vpc/prod\", { workdir = \"./pulumi/vpc\" })\n\n  -- 2. \u90e8\u7f72 VPC\n  log.info(\"\u6b63\u5728\u90e8\u7f72 VPC \u5806\u6808...\")\n  local vpc_result = vpc_stack:up({ yes = true })\n  if not vpc_result.success then\n    return false, \"VPC \u90e8\u7f72\u5931\u8d25: \" .. vpc_result.stderr\n  end\n\n  -- 3. \u4ece\u5176\u8f93\u51fa\u4e2d\u83b7\u53d6 VPC ID\n  log.info(\"\u6b63\u5728\u83b7\u53d6 VPC \u8f93\u51fa...\")\n  local vpc_outputs, err = vpc_stack:outputs()\n  if err then\n    return false, \"\u83b7\u53d6 VPC \u8f93\u51fa\u5931\u8d25: \" .. err\n  end\n  local vpc_id = vpc_outputs.vpcId\n\n  -- 4. \u5b9a\u4e49\u5e94\u7528\u7a0b\u5e8f\u5806\u6808\n  local app_stack = pulumi.stack(\"my-org/app/prod\", { workdir = \"./pulumi/app\" })\n\n  -- 5. \u90e8\u7f72\u5e94\u7528\u7a0b\u5e8f\uff0c\u5c06 vpcId \u4f5c\u4e3a\u914d\u7f6e\u4f20\u9012\n  log.info(\"\u6b63\u5728\u5c06\u5e94\u7528\u7a0b\u5e8f\u5806\u6808\u90e8\u7f72\u5230 VPC: \" .. vpc_id)\n  local app_result = app_stack:up({\n    yes = true,\n    config = { [\"my-app:vpcId\"] = vpc_id }\n  })\n  if not app_result.success then\n    return false, \"\u5e94\u7528\u7a0b\u5e8f\u90e8\u7f72\u5931\u8d25: \" .. app_result.stderr\n  end\n\n  log.info(\"\u6240\u6709\u5806\u6808\u5747\u5df2\u6210\u529f\u90e8\u7f72\u3002\")\n  return true, \"Pulumi \u7f16\u6392\u5b8c\u6210\u3002\"\nend\n</code></pre>"},{"location":"zh/modules/python/","title":"Python \u6a21\u5757","text":"<p><code>python</code> \u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u79cd\u65b9\u4fbf\u7684\u65b9\u5f0f\u6765\u7ba1\u7406 Python \u865a\u62df\u73af\u5883 (<code>venv</code>) \u5e76\u4ece\u60a8\u7684 <code>sloth-runner</code> \u4efb\u52a1\u4e2d\u6267\u884c\u811a\u672c\u3002\u8fd9\u5bf9\u4e8e\u6d89\u53ca\u57fa\u4e8e Python \u7684\u5de5\u5177\u6216\u811a\u672c\u7684\u5de5\u4f5c\u6d41\u7279\u522b\u6709\u7528\u3002</p>"},{"location":"zh/modules/python/#pythonvenvpath","title":"<code>python.venv(path)</code>","text":"<p>\u521b\u5efa\u4e00\u4e2a Python \u865a\u62df\u73af\u5883\u5bf9\u8c61\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u53ea\u5728 Lua \u4e2d\u521b\u5efa\u5bf9\u8c61\uff1b\u73af\u5883\u672c\u8eab\u5728\u6587\u4ef6\u7cfb\u7edf\u4e0a\u76f4\u5230\u60a8\u8c03\u7528 <code>:create()</code> \u540e\u624d\u88ab\u521b\u5efa\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>path</code> (string): \u5e94\u5728\u5176\u4e2d\u521b\u5efa\u865a\u62df\u73af\u5883\u7684\u6587\u4ef6\u7cfb\u7edf\u8def\u5f84 (\u4f8b\u5982, <code>./.venv</code>)\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>venv</code> (object): \u4e00\u4e2a\u865a\u62df\u73af\u5883\u5bf9\u8c61\uff0c\u5305\u542b\u4e0e\u5176\u4ea4\u4e92\u7684\u65b9\u6cd5\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/python/#venvcreate","title":"<code>venv:create()</code>","text":"<p>\u5728\u6307\u5b9a\u8def\u5f84\u7684\u6587\u4ef6\u7cfb\u7edf\u4e0a\u521b\u5efa\u865a\u62df\u73af\u5883\u3002</p> <ul> <li>\u8fd4\u56de:<ul> <li><code>error</code>: \u5982\u679c\u521b\u5efa\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/python/#venvpipcommand","title":"<code>venv:pip(command)</code>","text":"<p>\u5728\u865a\u62df\u73af\u5883\u7684\u4e0a\u4e0b\u6587\u4e2d\u6267\u884c <code>pip</code> \u547d\u4ee4\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>command</code> (string): \u8981\u4f20\u9012\u7ed9 <code>pip</code> \u7684\u53c2\u6570 (\u4f8b\u5982, <code>install -r requirements.txt</code>)\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>result</code> (table): \u4e00\u4e2a\u5305\u542b <code>pip</code> \u547d\u4ee4\u7684 <code>stdout</code>\u3001<code>stderr</code> \u548c <code>exit_code</code> \u7684\u8868\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/python/#venvexecscript_path","title":"<code>venv:exec(script_path)</code>","text":"<p>\u4f7f\u7528\u865a\u62df\u73af\u5883\u4e2d\u7684 Python \u89e3\u91ca\u5668\u6267\u884c Python \u811a\u672c\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>script_path</code> (string): \u8981\u6267\u884c\u7684 Python \u811a\u672c\u7684\u8def\u5f84\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>result</code> (table): \u4e00\u4e2a\u5305\u542b\u811a\u672c\u6267\u884c\u7684 <code>stdout</code>\u3001<code>stderr</code> \u548c <code>exit_code</code> \u7684\u8868\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/python/#_1","title":"\u793a\u4f8b","text":"<p>\u6b64\u793a\u4f8b\u6f14\u793a\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684\u751f\u547d\u5468\u671f\uff1a\u521b\u5efa\u865a\u62df\u73af\u5883\u3001\u4ece <code>requirements.txt</code> \u6587\u4ef6\u5b89\u88c5\u4f9d\u8d56\u9879\u4ee5\u53ca\u8fd0\u884c Python \u811a\u672c\u3002</p> <pre><code>-- examples/python_venv_lifecycle_example.sloth\n\nModern DSLs = {\n  main = {\n    description = \"\u4e00\u4e2a\u6f14\u793a Python venv \u751f\u547d\u5468\u671f\u7684\u4efb\u52a1\u3002\",\n    create_workdir_before_run = true, -- \u4f7f\u7528\u4e34\u65f6\u5de5\u4f5c\u76ee\u5f55\n    tasks = {\n      {\n        name = \"run-python-script\",\n        description = \"\u521b\u5efa venv\uff0c\u5b89\u88c5\u4f9d\u8d56\u9879\u5e76\u8fd0\u884c\u811a\u672c\u3002\",\n        command = function(params) \n          local python = require(\"python\")\n          local workdir = params.workdir -- \u4ece\u7ec4\u4e2d\u83b7\u53d6\u4e34\u65f6\u5de5\u4f5c\u76ee\u5f55\n\n          -- 1. \u5c06\u6211\u4eec\u7684 Python \u811a\u672c\u548c\u4f9d\u8d56\u9879\u5199\u5165\u5de5\u4f5c\u76ee\u5f55\n          fs.write(workdir .. \"/requirements.txt\", \"requests==2.28.1\")\n          fs.write(workdir .. \"/main.py\", \"import requests\\nprint(f'Hello from Python! Using requests version: {requests.__version__}')\")\n\n          -- 2. \u521b\u5efa\u4e00\u4e2a venv \u5bf9\u8c61\n          local venv_path = workdir .. \"/.venv\"\n          log.info(\"\u6b63\u5728\u8bbe\u7f6e\u865a\u62df\u73af\u5883\u4e8e: \" .. venv_path)\n          local venv = python.venv(venv_path)\n\n          -- 3. \u5728\u6587\u4ef6\u7cfb\u7edf\u4e0a\u521b\u5efa venv\n          venv:create()\n\n          -- 4. \u4f7f\u7528 pip \u5b89\u88c5\u4f9d\u8d56\u9879\n          log.info(\"\u6b63\u5728\u4ece requirements.txt \u5b89\u88c5\u4f9d\u8d56\u9879...\")\n          local pip_result = venv:pip(\"install -r \" .. workdir .. \"/requirements.txt\")\n          if pip_result.exit_code ~= 0 then\n            log.error(\"Pip \u5b89\u88c5\u5931\u8d25: \" .. pip_result.stderr)\n            return false, \"\u672a\u80fd\u5b89\u88c5 Python \u4f9d\u8d56\u9879\u3002\"\n          end\n\n          -- 5. \u6267\u884c\u811a\u672c\n          log.info(\"\u6b63\u5728\u8fd0\u884c Python \u811a\u672c...\")\n          local exec_result = venv:exec(workdir .. \"/main.py\")\n          if exec_result.exit_code ~= 0 then\n            log.error(\"Python \u811a\u672c\u5931\u8d25: \" .. exec_result.stderr)\n            return false, \"Python \u811a\u672c\u6267\u884c\u5931\u8d25\u3002\"\n          end\n\n          log.info(\"Python \u811a\u672c\u6210\u529f\u6267\u884c\u3002\")\n          print(\"--- Python \u811a\u672c\u8f93\u51fa ---\")\n          print(exec_result.stdout)\n          print(\"----------------------------\")\n\n          return true, \"Python venv \u751f\u547d\u5468\u671f\u5b8c\u6210\u3002\"\n        end\n      }\n    }\n  }\n}\n</code></pre> <p>```</p>"},{"location":"zh/modules/salt/","title":"Salt \u6a21\u5757","text":"<p><code>salt</code> \u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6d41\u7545\u7684 API \u6765\u4e0e SaltStack \u8fdb\u884c\u4ea4\u4e92\uff0c\u5141\u8bb8\u60a8\u4ece <code>sloth-runner</code> \u5de5\u4f5c\u6d41\u4e2d\u8fd0\u884c\u8fdc\u7a0b\u6267\u884c\u547d\u4ee4\u548c\u7ba1\u7406\u914d\u7f6e\u3002</p>"},{"location":"zh/modules/salt/#saltclientoptions","title":"<code>salt.client([options])</code>","text":"<p>\u521b\u5efa\u4e00\u4e2a Salt \u5ba2\u6237\u7aef\u5bf9\u8c61\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>options</code> (table, \u53ef\u9009): \u4e00\u4e2a\u9009\u9879\u8868\u3002<ul> <li><code>config_path</code> (string): Salt master \u914d\u7f6e\u6587\u4ef6\u7684\u8def\u5f84\u3002</li> </ul> </li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>client</code> (object): \u4e00\u4e2a <code>SaltClient</code> \u5bf9\u8c61\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/salt/#saltclient","title":"<code>SaltClient</code> \u5bf9\u8c61","text":"<p>\u6b64\u5bf9\u8c61\u8868\u793a Salt master \u7684\u5ba2\u6237\u7aef\uff0c\u5e76\u63d0\u4f9b\u7528\u4e8e\u5b9a\u4f4d minions \u7684\u65b9\u6cd5\u3002</p>"},{"location":"zh/modules/salt/#clienttargettarget_string-expr_form","title":"<code>client:target(target_string, [expr_form])</code>","text":"<p>\u6307\u5b9a\u547d\u4ee4\u7684\u76ee\u6807 minion\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>target_string</code> (string): \u76ee\u6807\u8868\u8fbe\u5f0f (\u4f8b\u5982, <code>\"*\"</code> \u8868\u793a\u6240\u6709 minions, <code>\"web-server-1\"</code>, \u6216\u4e00\u4e2a grain \u503c)\u3002</li> <li><code>expr_form</code> (string, \u53ef\u9009): \u8981\u4f7f\u7528\u7684\u5b9a\u4f4d\u7c7b\u578b (\u4f8b\u5982, <code>\"glob\"</code>, <code>\"grain\"</code>, <code>\"list\"</code>)\u3002\u9ed8\u8ba4\u4e3a glob\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>target</code> (object): \u4e00\u4e2a <code>SaltTarget</code> \u5bf9\u8c61\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/salt/#salttarget","title":"<code>SaltTarget</code> \u5bf9\u8c61","text":"<p>\u6b64\u5bf9\u8c61\u8868\u793a\u4e00\u4e2a\u7279\u5b9a\u7684\u76ee\u6807\uff0c\u5e76\u63d0\u4f9b\u53ef\u94fe\u63a5\u7684\u65b9\u6cd5\u6765\u6267\u884c Salt \u51fd\u6570\u3002</p>"},{"location":"zh/modules/salt/#targetcmdfunction-arg1-arg2","title":"<code>target:cmd(function, [arg1, arg2, ...])</code>","text":"<p>\u5728\u76ee\u6807\u4e0a\u6267\u884c Salt \u6267\u884c\u6a21\u5757\u51fd\u6570\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>function</code> (string): \u8981\u8fd0\u884c\u7684\u51fd\u6570\u7684\u540d\u79f0 (\u4f8b\u5982, <code>\"test.ping\"</code>, <code>\"state.apply\"</code>, <code>\"cmd.run\"</code>)\u3002</li> <li><code>arg1</code>, <code>arg2</code>, ... (any): \u8981\u4f20\u9012\u7ed9 Salt \u51fd\u6570\u7684\u9644\u52a0\u53c2\u6570\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>result</code> (table): \u4e00\u4e2a\u5305\u542b <code>success</code> (boolean)\u3001<code>stdout</code> (string \u6216 table) \u548c <code>stderr</code> (string) \u7684\u8868\u3002\u5982\u679c Salt \u547d\u4ee4\u8fd4\u56de JSON\uff0c<code>stdout</code> \u5c06\u662f\u4e00\u4e2a\u89e3\u6790\u540e\u7684 Lua \u8868\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/salt/#_1","title":"\u793a\u4f8b","text":"<p>\u6b64\u793a\u4f8b\u6f14\u793a\u4e86\u5982\u4f55\u5b9a\u4f4d minions \u4ee5 ping \u5b83\u4eec\u5e76\u5e94\u7528 Salt \u72b6\u6001\u3002</p> <pre><code>command = function()\n  local salt = require(\"salt\")\n\n  -- 1. \u521b\u5efa\u4e00\u4e2a Salt \u5ba2\u6237\u7aef\n  local client = salt.client()\n\n  -- 2. \u5b9a\u4f4d\u6240\u6709 minions \u5e76 ping \u5b83\u4eec\n  log.info(\"\u6b63\u5728 ping \u6240\u6709 minions...\")\n  local ping_result = client:target(\"*\"):cmd(\"test.ping\")\n  if not ping_result.success then\n    return false, \"Ping minions \u5931\u8d25: \" .. ping_result.stderr\n  end\n  print(\"Ping \u7ed3\u679c:\")\n  print(data.to_yaml(ping_result.stdout)) -- stdout \u662f\u4e00\u4e2a\u8868\n\n  -- 3. \u5b9a\u4f4d\u4e00\u4e2a\u7279\u5b9a\u7684 web \u670d\u52a1\u5668\u5e76\u5e94\u7528\u4e00\u4e2a\u72b6\u6001\n  log.info(\"\u6b63\u5728\u5411 web-server-1 \u5e94\u7528 'nginx' \u72b6\u6001...\")\n  local apply_result = client:target(\"web-server-1\", \"glob\"):cmd(\"state.apply\", \"nginx\")\n  if not apply_result.success then\n    return false, \"\u5e94\u7528\u72b6\u6001\u5931\u8d25: \" .. apply_result.stderr\n  end\n\n  log.info(\"\u72b6\u6001\u6210\u529f\u5e94\u7528\u3002\")\n  return true, \"Salt \u64cd\u4f5c\u5b8c\u6210\u3002\"\nend\n</code></pre>"},{"location":"zh/modules/state/","title":"\ud83d\udcbe \u72b6\u6001\u7ba1\u7406\u6a21\u5757","text":"<p>\u72b6\u6001\u7ba1\u7406\u6a21\u5757\u63d0\u4f9b\u5f3a\u5927\u7684\u6301\u4e45\u5316\u72b6\u6001\u529f\u80fd\uff0c\u5305\u62ec\u539f\u5b50\u64cd\u4f5c\u3001\u5206\u5e03\u5f0f\u9501\u548cTTL\uff08\u751f\u5b58\u65f6\u95f4\uff09\u529f\u80fd\u3002\u6240\u6709\u6570\u636e\u90fd\u4f7f\u7528SQLite\u7684WAL\u6a21\u5f0f\u5728\u672c\u5730\u5b58\u50a8\uff0c\u4ee5\u83b7\u5f97\u6700\u5927\u7684\u6027\u80fd\u548c\u53ef\u9760\u6027\u3002</p>"},{"location":"zh/modules/state/#_2","title":"\ud83d\ude80 \u6838\u5fc3\u7279\u6027","text":"<ul> <li>SQLite \u6301\u4e45\u5316: \u4f7f\u7528WAL\u6a21\u5f0f\u7684\u53ef\u9760\u5b58\u50a8</li> <li>\u539f\u5b50\u64cd\u4f5c: \u7ebf\u7a0b\u5b89\u5168\u7684\u589e\u91cf\u3001\u6bd4\u8f83\u4ea4\u6362\u3001\u8ffd\u52a0\u64cd\u4f5c</li> <li>\u5206\u5e03\u5f0f\u9501: \u5e26\u81ea\u52a8\u8d85\u65f6\u7684\u4e34\u754c\u533a</li> <li>TTL (\u751f\u5b58\u65f6\u95f4): \u81ea\u52a8\u952e\u8fc7\u671f</li> <li>\u6570\u636e\u7c7b\u578b: \u5b57\u7b26\u4e32\u3001\u6570\u5b57\u3001\u5e03\u5c14\u503c\u3001\u8868\u3001\u5217\u8868</li> <li>\u6a21\u5f0f\u5339\u914d: \u901a\u914d\u7b26\u952e\u641c\u7d22</li> <li>\u81ea\u52a8\u6e05\u7406: \u8fc7\u671f\u6570\u636e\u7684\u540e\u53f0\u6e05\u7406</li> <li>\u7edf\u8ba1\u4fe1\u606f: \u4f7f\u7528\u60c5\u51b5\u548c\u6027\u80fd\u6307\u6807</li> </ul>"},{"location":"zh/modules/state/#_3","title":"\ud83d\udccb \u57fa\u672c\u7528\u6cd5","text":""},{"location":"zh/modules/state/#_4","title":"\u8bbe\u7f6e\u548c\u83b7\u53d6\u503c","text":"<pre><code>-- \u8bbe\u7f6e\u503c\nstate.set(\"app_version\", \"v1.2.3\")\nstate.set(\"user_count\", 1000)\nstate.set(\"config\", {\n    debug = true,\n    max_connections = 100\n})\n\n-- \u83b7\u53d6\u503c\nlocal version = state.get(\"app_version\")\nlocal count = state.get(\"user_count\")\nlocal config = state.get(\"config\")\n\n-- \u5e26\u9ed8\u8ba4\u503c\u83b7\u53d6\nlocal theme = state.get(\"ui_theme\", \"dark\")\n\n-- \u68c0\u67e5\u5b58\u5728\u6027\nif state.exists(\"app_version\") then\n    log.info(\"\u5e94\u7528\u7248\u672c\u5df2\u914d\u7f6e\")\nend\n\n-- \u5220\u9664\u952e\nstate.delete(\"old_key\")\n</code></pre>"},{"location":"zh/modules/state/#ttl","title":"TTL (\u751f\u5b58\u65f6\u95f4)","text":"<pre><code>-- \u8bbe\u7f6e\u5e26TTL (60\u79d2)\nstate.set(\"session_token\", \"abc123\", 60)\n\n-- \u4e3a\u73b0\u6709\u952e\u8bbe\u7f6eTTL\nstate.set_ttl(\"user_session\", 300) -- 5\u5206\u949f\n\n-- \u68c0\u67e5\u5269\u4f59TTL\nlocal ttl = state.get_ttl(\"session_token\")\nlog.info(\"\u4ee4\u724c\u5728 \" .. ttl .. \" \u79d2\u540e\u8fc7\u671f\")\n</code></pre>"},{"location":"zh/modules/state/#_5","title":"\u539f\u5b50\u64cd\u4f5c","text":"<pre><code>-- \u539f\u5b50\u589e\u91cf\nlocal counter = state.increment(\"page_views\", 1)\nlocal bulk_counter = state.increment(\"downloads\", 50)\n\n-- \u539f\u5b50\u51cf\u91cf  \nlocal remaining = state.decrement(\"inventory\", 5)\n\n-- \u5b57\u7b26\u4e32\u8ffd\u52a0\nstate.set(\"log_messages\", \"\u542f\u52a8\u5e94\u7528\u7a0b\u5e8f\")\nlocal new_length = state.append(\"log_messages\", \" -&gt; \u8fde\u63a5\u5230\u6570\u636e\u5e93\")\n\n-- \u539f\u5b50\u6bd4\u8f83\u4ea4\u6362\nlocal old_version = state.get(\"config_version\")\nlocal success = state.compare_swap(\"config_version\", old_version, old_version + 1)\nif success then\n    log.info(\"\u914d\u7f6e\u5b89\u5168\u66f4\u65b0\")\nend\n</code></pre>"},{"location":"zh/modules/state/#_6","title":"\u5217\u8868\u64cd\u4f5c","text":"<pre><code>-- \u6dfb\u52a0\u9879\u76ee\u5230\u5217\u8868\nstate.list_push(\"deployment_queue\", {\n    app = \"frontend\",\n    version = \"v2.1.0\",\n    environment = \"staging\"\n})\n\n-- \u68c0\u67e5\u5217\u8868\u5927\u5c0f\nlocal queue_size = state.list_length(\"deployment_queue\")\nlog.info(\"\u961f\u5217\u4e2d\u7684\u9879\u76ee: \" .. queue_size)\n\n-- \u5904\u7406\u5217\u8868 (pop\u79fb\u9664\u6700\u540e\u4e00\u9879)\nwhile state.list_length(\"deployment_queue\") &gt; 0 do\n    local deployment = state.list_pop(\"deployment_queue\")\n    log.info(\"\u5904\u7406\u90e8\u7f72: \" .. deployment.app)\n    -- \u5904\u7406\u90e8\u7f72...\nend\n</code></pre>"},{"location":"zh/modules/state/#_7","title":"\u5206\u5e03\u5f0f\u9501\u548c\u4e34\u754c\u533a","text":"<pre><code>-- \u5c1d\u8bd5\u83b7\u53d6\u9501 (\u4e0d\u7b49\u5f85)\nlocal lock_acquired = state.try_lock(\"deployment_lock\", 30) -- 30\u79d2TTL\nif lock_acquired then\n    -- \u5173\u952e\u5de5\u4f5c\n    state.unlock(\"deployment_lock\")\nend\n\n-- \u5e26\u7b49\u5f85\u548c\u8d85\u65f6\u7684\u9501\nlocal acquired = state.lock(\"database_migration\", 60) -- \u7b49\u5f85\u6700\u591a60\u79d2\nif acquired then\n    -- \u6267\u884c\u8fc1\u79fb\n    state.unlock(\"database_migration\")\nend\n\n-- \u5e26\u81ea\u52a8\u9501\u7ba1\u7406\u7684\u4e34\u754c\u533a\nstate.with_lock(\"critical_section\", function()\n    log.info(\"\u6267\u884c\u5173\u952e\u64cd\u4f5c...\")\n\n    -- \u66f4\u65b0\u5168\u5c40\u8ba1\u6570\u5668\n    local counter = state.increment(\"global_counter\", 1)\n\n    -- \u66f4\u65b0\u65f6\u95f4\u6233\n    state.set(\"last_operation\", os.time())\n\n    log.info(\"\u5173\u952e\u64cd\u4f5c\u5b8c\u6210 - \u8ba1\u6570\u5668: \" .. counter)\n\n    -- \u51fd\u6570\u8fd4\u56de\u65f6\u81ea\u52a8\u91ca\u653e\u9501\n    return \"operation_success\"\nend, 15) -- 15\u79d2\u8d85\u65f6\n</code></pre>"},{"location":"zh/modules/state/#api","title":"\ud83d\udd0d API\u53c2\u8003","text":""},{"location":"zh/modules/state/#_8","title":"\u57fa\u672c\u64cd\u4f5c","text":"\u51fd\u6570 \u53c2\u6570 \u8fd4\u56de\u503c \u63cf\u8ff0 <code>state.set(key, value, ttl?)</code> key: string, value: any, ttl?: number success: boolean \u8bbe\u7f6e\u503c\uff0c\u53ef\u9009TTL <code>state.get(key, default?)</code> key: string, default?: any value: any \u83b7\u53d6\u503c\u6216\u8fd4\u56de\u9ed8\u8ba4\u503c <code>state.delete(key)</code> key: string success: boolean \u5220\u9664\u952e <code>state.exists(key)</code> key: string exists: boolean \u68c0\u67e5\u952e\u662f\u5426\u5b58\u5728 <code>state.clear(pattern?)</code> pattern?: string success: boolean \u6309\u6a21\u5f0f\u5220\u9664\u952e"},{"location":"zh/modules/state/#ttl_1","title":"TTL\u64cd\u4f5c","text":"\u51fd\u6570 \u53c2\u6570 \u8fd4\u56de\u503c \u63cf\u8ff0 <code>state.set_ttl(key, seconds)</code> key: string, seconds: number success: boolean \u4e3a\u73b0\u6709\u952e\u8bbe\u7f6eTTL <code>state.get_ttl(key)</code> key: string ttl: number \u83b7\u53d6\u5269\u4f59TTL (-1 = \u65e0TTL, -2 = \u4e0d\u5b58\u5728)"},{"location":"zh/modules/state/#_9","title":"\u539f\u5b50\u64cd\u4f5c","text":"\u51fd\u6570 \u53c2\u6570 \u8fd4\u56de\u503c \u63cf\u8ff0 <code>state.increment(key, delta?)</code> key: string, delta?: number new_value: number \u539f\u5b50\u589e\u91cf\u503c <code>state.decrement(key, delta?)</code> key: string, delta?: number new_value: number \u539f\u5b50\u51cf\u91cf\u503c <code>state.append(key, value)</code> key: string, value: string new_length: number \u539f\u5b50\u8ffd\u52a0\u5b57\u7b26\u4e32 <code>state.compare_swap(key, old, new)</code> key: string, old: any, new: any success: boolean \u539f\u5b50\u6bd4\u8f83\u4ea4\u6362"},{"location":"zh/modules/state/#_10","title":"\u5217\u8868\u64cd\u4f5c","text":"\u51fd\u6570 \u53c2\u6570 \u8fd4\u56de\u503c \u63cf\u8ff0 <code>state.list_push(key, item)</code> key: string, item: any length: number \u6dfb\u52a0\u9879\u76ee\u5230\u5217\u8868\u672b\u5c3e <code>state.list_pop(key)</code> key: string item: any | nil \u79fb\u9664\u5e76\u8fd4\u56de\u6700\u540e\u4e00\u9879 <code>state.list_length(key)</code> key: string length: number \u83b7\u53d6\u5217\u8868\u957f\u5ea6"},{"location":"zh/modules/state/#_11","title":"\u5206\u5e03\u5f0f\u9501","text":"\u51fd\u6570 \u53c2\u6570 \u8fd4\u56de\u503c \u63cf\u8ff0 <code>state.try_lock(name, ttl)</code> name: string, ttl: number success: boolean \u5c1d\u8bd5\u83b7\u53d6\u9501\u800c\u4e0d\u7b49\u5f85 <code>state.lock(name, timeout?)</code> name: string, timeout?: number success: boolean \u5e26\u8d85\u65f6\u83b7\u53d6\u9501 <code>state.unlock(name)</code> name: string success: boolean \u91ca\u653e\u9501 <code>state.with_lock(name, fn, timeout?)</code> name: string, fn: function, timeout?: number result: any \u4f7f\u7528\u81ea\u52a8\u9501\u6267\u884c\u51fd\u6570"},{"location":"zh/modules/state/#_12","title":"\u5b9e\u7528\u5de5\u5177","text":"\u51fd\u6570 \u53c2\u6570 \u8fd4\u56de\u503c \u63cf\u8ff0 <code>state.keys(pattern?)</code> pattern?: string keys: table \u6309\u6a21\u5f0f\u5217\u51fa\u952e <code>state.stats()</code> - stats: table \u83b7\u53d6\u7cfb\u7edf\u7edf\u8ba1\u4fe1\u606f"},{"location":"zh/modules/state/#_13","title":"\ud83d\udca1 \u5b9e\u9645\u7528\u4f8b","text":""},{"location":"zh/modules/state/#1","title":"1. \u90e8\u7f72\u7248\u672c\u63a7\u5236","text":"<pre><code>Modern DSLs = {\n    deployment_pipeline = {\n        tasks = {\n            prepare_deploy = {\n                command = function()\n                    -- \u68c0\u67e5\u6700\u540e\u90e8\u7f72\u7684\u7248\u672c\n                    local last_version = state.get(\"last_deployed_version\", \"v0.0.0\")\n                    local new_version = \"v1.2.3\"\n\n                    -- \u68c0\u67e5\u662f\u5426\u5df2\u90e8\u7f72\n                    if last_version == new_version then\n                        log.warn(\"\u7248\u672c \" .. new_version .. \" \u5df2\u90e8\u7f72\")\n                        return false, \"\u7248\u672c\u5df2\u90e8\u7f72\"\n                    end\n\n                    -- \u6ce8\u518c\u90e8\u7f72\u5f00\u59cb\n                    state.set(\"deploy_status\", \"in_progress\")\n                    state.set(\"deploy_start_time\", os.time())\n                    state.increment(\"total_deploys\", 1)\n\n                    return true, \"\u90e8\u7f72\u51c6\u5907\u5b8c\u6210\"\n                end\n            },\n\n            execute_deploy = {\n                depends_on = \"prepare_deploy\",\n                command = function()\n                    -- \u90e8\u7f72\u7684\u4e34\u754c\u533a\n                    return state.with_lock(\"deployment_lock\", function()\n                        log.info(\"\u4f7f\u7528\u9501\u6267\u884c\u90e8\u7f72...\")\n\n                        -- \u6a21\u62df\u90e8\u7f72\n                        exec.run(\"sleep 5\")\n\n                        -- \u66f4\u65b0\u72b6\u6001\n                        state.set(\"last_deployed_version\", \"v1.2.3\")\n                        state.set(\"deploy_status\", \"completed\")\n                        state.set(\"deploy_end_time\", os.time())\n\n                        -- \u8bb0\u5f55\u5386\u53f2\n                        state.list_push(\"deploy_history\", {\n                            version = \"v1.2.3\",\n                            timestamp = os.time(),\n                            duration = state.get(\"deploy_end_time\") - state.get(\"deploy_start_time\")\n                        })\n\n                        return true, \"\u90e8\u7f72\u6210\u529f\u5b8c\u6210\"\n                    end, 300) -- 5\u5206\u949f\u8d85\u65f6\n                end\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"zh/modules/state/#2-ttl","title":"2. \u5e26TTL\u7684\u667a\u80fd\u7f13\u5b58","text":"<pre><code>-- \u7f13\u5b58\u52a9\u624b\u51fd\u6570\nfunction get_cached_data(cache_key, fetch_function, ttl)\n    local cached = state.get(cache_key)\n    if cached then\n        log.info(\"\u7f13\u5b58\u547d\u4e2d: \" .. cache_key)\n        return cached\n    end\n\n    log.info(\"\u7f13\u5b58\u672a\u547d\u4e2d: \" .. cache_key .. \" - \u6b63\u5728\u83b7\u53d6...\")\n    local data = fetch_function()\n    state.set(cache_key, data, ttl or 300) -- \u9ed8\u8ba45\u5206\u949f\n    return data\nend\n\n-- \u5728\u4efb\u52a1\u4e2d\u4f7f\u7528\nModern DSLs = {\n    data_processing = {\n        tasks = {\n            fetch_user_data = {\n                command = function()\n                    local user_data = get_cached_data(\"user:123:profile\", function()\n                        -- \u6a21\u62df\u6602\u8d35\u7684\u83b7\u53d6\u64cd\u4f5c\n                        return {\n                            name = \"\u5f20\u4e09\",\n                            email = \"zhangsan@example.com\",\n                            preferences = {\"dark_mode\", \"notifications\"}\n                        }\n                    end, 600) -- \u7f13\u5b5810\u5206\u949f\n\n                    log.info(\"\u7528\u6237\u6570\u636e: \" .. data.to_json(user_data))\n                    return true, \"\u7528\u6237\u6570\u636e\u5df2\u83b7\u53d6\"\n                end\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"zh/modules/state/#3","title":"3. \u901f\u7387\u9650\u5236","text":"<pre><code>function check_rate_limit(identifier, max_requests, window_seconds)\n    local key = \"rate_limit:\" .. identifier\n    local current_count = state.get(key, 0)\n\n    if current_count &gt;= max_requests then\n        return false, \"\u901f\u7387\u9650\u5236\u8d85\u51fa\"\n    end\n\n    -- \u589e\u52a0\u8ba1\u6570\u5668\n    if current_count == 0 then\n        -- \u7a97\u53e3\u4e2d\u7684\u7b2c\u4e00\u4e2a\u8bf7\u6c42\n        state.set(key, 1, window_seconds)\n    else\n        -- \u589e\u52a0\u73b0\u6709\u8ba1\u6570\u5668\n        state.increment(key, 1)\n    end\n\n    return true, \"\u8bf7\u6c42\u5141\u8bb8\"\nend\n\n-- \u5728\u4efb\u52a1\u4e2d\u4f7f\u7528\nModern DSLs = {\n    api_tasks = {\n        tasks = {\n            make_api_call = {\n                command = function()\n                    local allowed, msg = check_rate_limit(\"api_calls\", 100, 3600) -- 100\u6b21\u8c03\u7528/\u5c0f\u65f6\n\n                    if not allowed then\n                        log.error(msg)\n                        return false, msg\n                    end\n\n                    -- \u8fdb\u884cAPI\u8c03\u7528\n                    log.info(\"\u8fdb\u884cAPI\u8c03\u7528...\")\n                    return true, \"API\u8c03\u7528\u5b8c\u6210\"\n                end\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"zh/modules/state/#_14","title":"\u2699\ufe0f \u914d\u7f6e\u548c\u5b58\u50a8","text":""},{"location":"zh/modules/state/#_15","title":"\u6570\u636e\u5e93\u4f4d\u7f6e","text":"<p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cSQLite\u6570\u636e\u5e93\u521b\u5efa\u5728: - Linux/macOS: <code>~/.sloth-runner/state.db</code> - Windows: <code>%USERPROFILE%\\.sloth-runner\\state.db</code></p>"},{"location":"zh/modules/state/#_16","title":"\u6280\u672f\u7279\u6027","text":"<ul> <li>\u5f15\u64ce: \u5e26WAL\u6a21\u5f0f\u7684SQLite 3</li> <li>\u5e76\u53d1\u8bbf\u95ee: \u652f\u6301\u591a\u4e2a\u540c\u65f6\u8fde\u63a5</li> <li>\u81ea\u52a8\u6e05\u7406: \u6bcf5\u5206\u949f\u81ea\u52a8\u6e05\u7406\u8fc7\u671f\u6570\u636e</li> <li>\u9501\u8d85\u65f6: \u8fc7\u671f\u9501\u81ea\u52a8\u6e05\u7406</li> <li>\u5e8f\u5217\u5316: \u590d\u6742\u5bf9\u8c61\u4f7f\u7528JSON\uff0c\u7b80\u5355\u7c7b\u578b\u4f7f\u7528\u539f\u751f\u683c\u5f0f</li> </ul>"},{"location":"zh/modules/state/#_17","title":"\u9650\u5236","text":"<ul> <li>\u672c\u5730\u8303\u56f4: \u72b6\u6001\u4ec5\u5728\u672c\u5730\u673a\u5668\u4e0a\u6301\u4e45\u5316</li> <li>\u5e76\u53d1\u6027: \u9501\u4ec5\u5728\u672c\u5730\u8fdb\u7a0b\u5185\u6709\u6548</li> <li>\u5927\u5c0f: \u9002\u5408\u5c0f\u5230\u4e2d\u578b\u6570\u636e\u96c6 (&lt; 1GB)</li> </ul>"},{"location":"zh/modules/state/#_18","title":"\ud83d\udd04 \u6700\u4f73\u5b9e\u8df5","text":"<ol> <li>\u5bf9\u4e34\u65f6\u6570\u636e\u4f7f\u7528TTL \u4ee5\u9632\u6b62\u5b58\u50a8\u81a8\u80c0</li> <li>\u5bf9\u4e34\u754c\u533a\u4f7f\u7528\u9501 \u4ee5\u907f\u514d\u7ade\u6001\u6761\u4ef6</li> <li>\u4f7f\u7528\u6a21\u5f0f\u8fdb\u884c\u6279\u91cf\u64cd\u4f5c \u7ba1\u7406\u76f8\u5173\u952e</li> <li>\u4f7f\u7528<code>state.stats()</code>\u76d1\u63a7\u5b58\u50a8\u5927\u5c0f</li> <li>\u4f7f\u7528\u539f\u5b50\u64cd\u4f5c \u800c\u4e0d\u662f\u8bfb-\u4fee\u6539-\u5199\u6a21\u5f0f</li> <li>\u4f7f\u7528<code>state.clear(pattern)</code>\u5b9a\u671f\u6e05\u7406\u8fc7\u671f\u952e</li> </ol> <p>\u72b6\u6001\u7ba1\u7406\u6a21\u5757\u5c06sloth-runner\u8f6c\u53d8\u4e3a\u6709\u72b6\u6001\u7684\u3001\u53ef\u9760\u7684\u590d\u6742\u4efb\u52a1\u7f16\u6392\u5e73\u53f0! \ud83d\ude80</p>"},{"location":"zh/modules/terraform/","title":"Terraform \u6a21\u5757","text":"<p><code>terraform</code> \u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a\u9ad8\u7ea7\u754c\u9762\uff0c\u7528\u4e8e\u7f16\u6392 <code>terraform</code> CLI \u547d\u4ee4\uff0c\u5141\u8bb8\u60a8\u76f4\u63a5\u5728 Sloth-Runner \u7ba1\u9053\u5185\u7ba1\u7406\u60a8\u7684\u57fa\u7840\u67b6\u6784\u751f\u547d\u5468\u671f\u3002</p>"},{"location":"zh/modules/terraform/#_1","title":"\u914d\u7f6e","text":"<p>\u6b64\u6a21\u5757\u9700\u8981\u5b89\u88c5 <code>terraform</code> CLI \u5e76\u53ef\u5728\u7cfb\u7edf\u7684 PATH \u4e2d\u4f7f\u7528\u3002\u6240\u6709\u547d\u4ee4\u90fd\u5fc5\u987b\u5728\u60a8\u7684 <code>.tf</code> \u6587\u4ef6\u6240\u5728\u7684\u7279\u5b9a <code>workdir</code> \u4e2d\u6267\u884c\u3002</p>"},{"location":"zh/modules/terraform/#_2","title":"\u51fd\u6570","text":""},{"location":"zh/modules/terraform/#terraforminitparams","title":"<code>terraform.init(params)</code>","text":"<p>\u521d\u59cb\u5316 Terraform \u5de5\u4f5c\u76ee\u5f55\u3002</p> <ul> <li><code>params</code> (table):<ul> <li><code>workdir</code> (string): \u5fc5\u9700\u3002 \u5305\u542b Terraform \u6587\u4ef6\u7684\u76ee\u5f55\u7684\u8def\u5f84\u3002</li> </ul> </li> <li>\u8fd4\u56de: \u5305\u542b <code>success</code>\u3001<code>stdout</code>\u3001<code>stderr</code> \u548c <code>exit_code</code> \u7684\u7ed3\u679c\u8868\u3002</li> </ul>"},{"location":"zh/modules/terraform/#terraformplanparams","title":"<code>terraform.plan(params)</code>","text":"<p>\u521b\u5efa Terraform \u6267\u884c\u8ba1\u5212\u3002</p> <ul> <li><code>params</code> (table):<ul> <li><code>workdir</code> (string): \u5fc5\u9700\u3002 \u76ee\u5f55\u7684\u8def\u5f84\u3002</li> <li><code>out</code> (string): \u53ef\u9009\u3002 \u7528\u4e8e\u4fdd\u5b58\u751f\u6210\u7684\u8ba1\u5212\u7684\u6587\u4ef6\u540d\u3002</li> </ul> </li> <li>\u8fd4\u56de: \u7ed3\u679c\u8868\u3002</li> </ul>"},{"location":"zh/modules/terraform/#terraformapplyparams","title":"<code>terraform.apply(params)</code>","text":"<p>\u5e94\u7528 Terraform \u8ba1\u5212\u3002</p> <ul> <li><code>params</code> (table):<ul> <li><code>workdir</code> (string): \u5fc5\u9700\u3002 \u76ee\u5f55\u7684\u8def\u5f84\u3002</li> <li><code>plan</code> (string): \u53ef\u9009\u3002 \u8981\u5e94\u7528\u7684\u8ba1\u5212\u6587\u4ef6\u7684\u8def\u5f84\u3002</li> <li><code>auto_approve</code> (boolean): \u53ef\u9009\u3002 \u5982\u679c\u4e3a <code>true</code>\uff0c\u5219\u65e0\u9700\u4ea4\u4e92\u5f0f\u6279\u51c6\u5373\u53ef\u5e94\u7528\u66f4\u6539\u3002</li> </ul> </li> <li>\u8fd4\u56de: \u7ed3\u679c\u8868\u3002</li> </ul>"},{"location":"zh/modules/terraform/#terraformdestroyparams","title":"<code>terraform.destroy(params)</code>","text":"<p>\u9500\u6bc1 Terraform \u7ba1\u7406\u7684\u57fa\u7840\u67b6\u6784\u3002</p> <ul> <li><code>params</code> (table):<ul> <li><code>workdir</code> (string): \u5fc5\u9700\u3002 \u76ee\u5f55\u7684\u8def\u5f84\u3002</li> <li><code>auto_approve</code> (boolean): \u53ef\u9009\u3002 \u5982\u679c\u4e3a <code>true</code>\uff0c\u5219\u65e0\u9700\u4ea4\u4e92\u5f0f\u6279\u51c6\u5373\u53ef\u9500\u6bc1\u8d44\u6e90\u3002</li> </ul> </li> <li>\u8fd4\u56de: \u7ed3\u679c\u8868\u3002</li> </ul>"},{"location":"zh/modules/terraform/#terraformoutputparams","title":"<code>terraform.output(params)</code>","text":"<p>\u4ece Terraform \u72b6\u6001\u6587\u4ef6\u8bfb\u53d6\u8f93\u51fa\u53d8\u91cf\u3002</p> <ul> <li><code>params</code> (table):<ul> <li><code>workdir</code> (string): \u5fc5\u9700\u3002 \u76ee\u5f55\u7684\u8def\u5f84\u3002</li> <li><code>name</code> (string): \u53ef\u9009\u3002 \u8981\u8bfb\u53d6\u7684\u7279\u5b9a\u8f93\u51fa\u7684\u540d\u79f0\u3002\u5982\u679c\u7701\u7565\uff0c\u5219\u6240\u6709\u8f93\u51fa\u90fd\u4f5c\u4e3a\u8868\u8fd4\u56de\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li>\u6210\u529f\u65f6: \u8f93\u51fa\u7684\u5df2\u89e3\u6790 JSON \u503c\uff08\u53ef\u4ee5\u662f\u5b57\u7b26\u4e32\u3001\u8868\u7b49\uff09\u3002</li> <li>\u5931\u8d25\u65f6: <code>nil, error_message</code>\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/terraform/#_3","title":"\u5b8c\u6574\u751f\u547d\u5468\u671f\u793a\u4f8b","text":"<pre><code>local tf_workdir = \"./examples/terraform\"\n\n-- \u4efb\u52a1 1: Init\nlocal result_init = terraform.init({workdir = tf_workdir})\nif not result_init.success then return false, \"Init \u5931\u8d25\" end\n\n-- \u4efb\u52a1 2: Plan\nlocal result_plan = terraform.plan({workdir = tf_workdir})\nif not result_plan.success then return false, \"Plan \u5931\u8d25\" end\n\n-- \u4efb\u52a1 3: Apply\nlocal result_apply = terraform.apply({workdir = tf_workdir, auto_approve = true})\nif not result_apply.success then return false, \"Apply \u5931\u8d25\" end\n\n-- \u4efb\u52a1 4: Get Output\nlocal filename, err = terraform.output({workdir = tf_workdir, name = \"report_filename\"})\nif not filename then return false, \"Output \u5931\u8d25: \" .. err end\nlog.info(\"Terraform \u521b\u5efa\u7684\u6587\u4ef6: \" .. filename)\n\n-- \u4efb\u52a1 5: Destroy\nlocal result_destroy = terraform.destroy({workdir = tf_workdir, auto_approve = true})\nif not result_destroy.success then return false, \"Destroy \u5931\u8d25\" end\n</code></pre>"}]}