*sloth-runner.txt*  Neovim plugin for Sloth Runner DSL

==============================================================================
CONTENTS                                                *sloth-runner-contents*

    1. Introduction ......................... |sloth-runner-introduction|
    2. Installation ......................... |sloth-runner-installation|
    3. Configuration ........................ |sloth-runner-configuration|
    4. Commands ............................. |sloth-runner-commands|
    5. Keymaps .............................. |sloth-runner-keymaps|
    6. API .................................. |sloth-runner-api|
    7. Telescope ............................ |sloth-runner-telescope|
    8. Completion ........................... |sloth-runner-completion|
    9. Health ............................... |sloth-runner-health|
   10. License .............................. |sloth-runner-license|

==============================================================================
1. INTRODUCTION                                     *sloth-runner-introduction*

Sloth Runner is a modern Neovim plugin that provides first-class support for
the Sloth Runner DSL - a powerful workflow and task automation language.

Features:
  â€¢ Syntax highlighting for .sloth files
  â€¢ Intelligent code completion with nvim-cmp
  â€¢ Workflow execution from within Neovim
  â€¢ Task/workflow picker with Telescope
  â€¢ Code formatting support
  â€¢ Text objects for tasks and workflows
  â€¢ Health checks with :checkhealth

==============================================================================
2. INSTALLATION                                     *sloth-runner-installation*

Using lazy.nvim: >lua
    {
      "username/sloth-runner.nvim",
      ft = "sloth",
      dependencies = {
        "hrsh7th/nvim-cmp",           -- Optional: for completion
        "nvim-telescope/telescope.nvim", -- Optional: for pickers
      },
      config = function()
        require("sloth-runner").setup({
          -- your config here
        })
      end,
    }
<

Using packer.nvim: >lua
    use {
      "username/sloth-runner.nvim",
      ft = "sloth",
      requires = {
        "hrsh7th/nvim-cmp",
        "nvim-telescope/telescope.nvim",
      },
      config = function()
        require("sloth-runner").setup()
      end,
    }
<

Requirements:
  â€¢ Neovim >= 0.9.0
  â€¢ sloth-runner executable in PATH
  â€¢ Optional: nvim-cmp for completion
  â€¢ Optional: telescope.nvim for pickers

==============================================================================
3. CONFIGURATION                                   *sloth-runner-configuration*

Default configuration: >lua
    require("sloth-runner").setup({
      runner = {
        cmd = "sloth-runner",           -- Runner executable
        default_args = {},              -- Default arguments
        use_float = true,               -- Use floating window
        auto_close_on_success = false,  -- Auto-close on success
        notify = true,                  -- Show notifications
      },

      formatter = {
        format_on_save = false,         -- Auto-format on save
        cmd = "stylua",                 -- Formatter command
        args = {                        -- Formatter arguments
          "--indent-type", "Spaces",
          "--indent-width", "2"
        },
        use_builtin = true,             -- Use builtin if unavailable
      },

      completion = {
        enabled = true,                 -- Enable nvim-cmp integration
        priority = 100,                 -- Completion priority
        show_docs = true,               -- Show documentation
      },

      keymaps = {
        enabled = true,                 -- Enable default keymaps
        prefix = "<leader>s",           -- Keymap prefix
        run = "r",                      -- Run workflow
        list = "l",                     -- List tasks
        test = "t",                     -- Dry run
        validate = "v",                 -- Validate file
        format = "f",                   -- Format file
        task_textobj = "it",            -- Task text object
        workflow_textobj = "iw",        -- Workflow text object
      },

      telescope = {
        enabled = true,                 -- Enable telescope
        theme = "dropdown",             -- Telescope theme
        layout_config = {
          width = 0.8,
          height = 0.6,
        },
      },

      ui = {
        icons = {
          task = "ðŸ“‹",
          workflow = "ðŸ”„",
          running = "âš¡",
          success = "âœ“",
          error = "âœ—",
          warning = "âš ",
        },
        float = {
          border = "rounded",
          title_pos = "center",
          width = 0.8,
          height = 0.8,
        },
        -- Welcome banner
        show_welcome = true,              -- Show ðŸ¦¥ when opening .sloth files
        welcome_style = "notification",   -- "notification", "banner", "large", "float"
      },

      debug = {
        enabled = false,                -- Enable debug logging
        log_file = vim.fn.stdpath("cache") .. "/sloth-runner.log",
      },
    })
<

Welcome Banner Styles:                                   *sloth-runner-welcome*

  "notification" - Simple notification with ðŸ¦¥ emoji (default)
  "banner"       - ASCII art banner in command line
  "large"        - Large banner with decorative box
  "float"        - Floating window (auto-closes after 3s)

To disable the welcome banner:
>
  require("sloth-runner").setup({
    ui = { show_welcome = false }
  })
<

To show the welcome banner again:
>
  :SlothWelcome
<

Easter egg - sloth animation:
>
  :SlothAnimate
  -- Shows: ðŸ¦¥ â†’ ðŸ¦¥ðŸ’¤ â†’ ðŸ¦¥ðŸ’¤ðŸ’¤ â†’ ðŸ¦¥âš¡ â†’ ðŸ¦¥âœ¨
<

==============================================================================
4. COMMANDS                                             *sloth-runner-commands*

:SlothRun [task]                                                   *:SlothRun*
    Run workflow or specific task.
    Examples:
      :SlothRun              " Run entire workflow
      :SlothRun build        " Run specific task

:SlothList                                                        *:SlothList*
    List all tasks and workflows in current file.

:SlothTest [task]                                                 *:SlothTest*
    Dry run workflow or specific task.
    Examples:
      :SlothTest             " Dry run entire workflow
      :SlothTest deploy      " Dry run specific task

:SlothValidate                                                *:SlothValidate*
    Validate current .sloth file syntax and structure.

:SlothFormat                                                    *:SlothFormat*
    Format current .sloth file.

:SlothInfo                                                        *:SlothInfo*
    Show plugin information and configuration.

:SlothWelcome                                                  *:SlothWelcome*
    Show welcome message with sloth emoji ðŸ¦¥.
    Useful to see the banner again or test different styles.

:SlothAnimate                                                  *:SlothAnimate*
    Show sloth animation (easter egg).
    A fun animation with the sloth emoji: ðŸ¦¥ðŸ’¤âš¡âœ¨

:SlothTasks                                                      *:SlothTasks*
    Open Telescope task picker (requires telescope.nvim).

:SlothWorkflows                                              *:SlothWorkflows*
    Open Telescope workflow picker (requires telescope.nvim).

==============================================================================
5. KEYMAPS                                                 *sloth-runner-keymaps*

Default keymaps (prefix: <leader>s):

  <leader>sr    Run workflow
  <leader>sl    List tasks
  <leader>st    Dry run
  <leader>sv    Validate file
  <leader>sf    Format file

Text objects:

  it            Select task block (visual/operator-pending)
  iw            Select workflow block (visual/operator-pending)

Examples:
  vit           Visually select task block
  dit           Delete task block
  yiw           Yank workflow block

==============================================================================
6. API                                                         *sloth-runner-api*

require('sloth-runner').setup({opts})                  *sloth-runner.setup()*
    Initialize the plugin with configuration options.

    Parameters:
      {opts}  Table of configuration options (optional)

require('sloth-runner').run({args})                      *sloth-runner.run()*
    Run a workflow or task.

    Parameters:
      {args}  Table with fields:
              â€¢ file: File path (default: current file)
              â€¢ task: Task name (optional)
              â€¢ dry_run: Boolean (default: false)

require('sloth-runner').list({args})                    *sloth-runner.list()*
    List tasks and workflows.

    Parameters:
      {args}  Table with fields:
              â€¢ file: File path (default: current file)

require('sloth-runner').validate()                  *sloth-runner.validate()*
    Validate current file.

    Returns:
      success (boolean), error_message (string|nil)

require('sloth-runner').format()                      *sloth-runner.format()*
    Format current file.

require('sloth-runner').get_config()              *sloth-runner.get_config()*
    Get current configuration.

    Returns:
      Configuration table

==============================================================================
7. TELESCOPE                                           *sloth-runner-telescope*

Telescope pickers are available when telescope.nvim is installed.

:Telescope sloth tasks                          *telescope-sloth-tasks*
    Open task picker. Select and run tasks interactively.

    Keymaps in picker:
      <CR>      Run selected task
      <C-g>     Go to task definition

:Telescope sloth workflows                  *telescope-sloth-workflows*
    Open workflow picker. Select and run workflows.

    Keymaps in picker:
      <CR>      Run selected workflow
      <C-g>     Go to workflow definition

:Telescope sloth                                    *telescope-sloth*
    Open combined tasks and workflows picker.

==============================================================================
8. COMPLETION                                         *sloth-runner-completion*

When nvim-cmp is installed, Sloth Runner provides intelligent completion:

  â€¢ DSL keywords (task, workflow, etc.)
  â€¢ Method chaining (:command, :description, etc.)
  â€¢ Module names (exec, fs, net, etc.)
  â€¢ Context-aware suggestions

The completion source is automatically registered with nvim-cmp.

To configure completion priority: >lua
    require("sloth-runner").setup({
      completion = {
        priority = 100,  -- Adjust as needed
      }
    })
<

==============================================================================
9. HEALTH                                                 *sloth-runner-health*

Check plugin health with:
>
    :checkhealth sloth-runner
<

The health check verifies:
  â€¢ Plugin initialization status
  â€¢ sloth-runner executable availability
  â€¢ Optional dependencies (nvim-cmp, telescope)
  â€¢ Configuration validity
  â€¢ Formatter availability

==============================================================================
10. LICENSE                                             *sloth-runner-license*

MIT License

Copyright (c) 2025 Sloth Runner Team

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

==============================================================================
vim:tw=78:ts=8:ft=help:norl:
