-- MODERN DSL ONLY
-- Legacy TaskDefinitions removed - Modern DSL syntax only
-- Converted automatically on Seg 29 Set 2025 10:42:31 -03

local create_artifact_task = task("create_artifact")
local create_another_artifact_task = task("create_another_artifact")
local verify_artifacts_task = task("verify_artifacts")

local create_artifact_task = task("create_artifact")
local create_another_artifact_task = task("create_another_artifact")
local verify_artifacts_task = task("verify_artifacts")
local create_artifact_task = task("create_artifact")
    :description("Creates a dummy file and declares it as an artifact with modern DSL")
    :command(function(params)
        local workdir = params.workdir
        local filename = "my_artifact.txt"
        local filepath = workdir .. "/" .. filename
        
        log.info("Modern DSL: Creating dummy artifact: " .. filepath)
        
        -- Enhanced artifact creation with metadata
        local content = {
            message = "This is a test artifact generated by sloth-runner Modern DSL.",
            created_at = os.date("%Y-%m-%d %H:%M:%S"),
            created_by = "sloth-runner-modern",
            version = "2.0.0",
            metadata = {
                task_name = "create_artifact",
                workdir = workdir,
                artifact_type = "text_file"
            }
        }
        
        local artifact_content = data.to_json(content)
        local success = fs.write(filepath, artifact_content)
        
        if not success then
            return false, "Failed to create artifact file"
        end
        
        log.info("Modern DSL: Artifact created successfully with enhanced metadata")
        
        return true, "Artifact created with metadata.", {
            artifact_path = filepath,
            artifact_size = fs.size(filepath),
            created_at = content.created_at
        }
    end)
    :artifacts({"my_artifact.txt"})
    :on_success(function(params, output)
        log.info("Modern DSL: Artifact ready for collection: " .. output.artifact_path)
        log.info("Artifact size: " .. output.artifact_size .. " bytes")
    end)
    :build()
local create_another_artifact_task = task("create_another_artifact")
    :description("Creates another artifact with different format using modern DSL")
    :command(function(params)
        local workdir = params.workdir
        local filename = "another_artifact.log"
        local filepath = workdir .. "/" .. filename
        
        log.info("Modern DSL: Creating another dummy artifact: " .. filepath)
        
        -- Create a log-style artifact
        local log_content = string.format([[
# Modern DSL Artifact Log
# Generated at: %s
# Task: create_another_artifact
# Workflow Version: 2.0.0

[INFO] %s - Starting artifact generation
[INFO] %s - Artifact type: log_file
[INFO] %s - Enhanced logging with timestamps
[SUCCESS] %s - Artifact generation completed
        ]], 
        os.date("%Y-%m-%d %H:%M:%S"),
        os.date("%H:%M:%S"),
        os.date("%H:%M:%S"),
        os.date("%H:%M:%S"),
        os.date("%H:%M:%S"))
        
        local success = fs.write(filepath, log_content)
        
        if not success then
            return false, "Failed to create log artifact file"
        end
        
        log.info("Modern DSL: Log artifact created successfully")
        
        return true, "Log artifact created.", {
            artifact_path = filepath,
            artifact_type = "log_file",
            artifact_size = fs.size(filepath),
            line_count = 9 -- Approximate line count
        }
    end)
    :artifacts({"another_artifact.log"})
    :on_success(function(params, output)
        log.info("Modern DSL: Log artifact ready: " .. output.artifact_path)
        log.info("Log artifact contains " .. output.line_count .. " lines")
    end)
    :build()
local verify_artifacts_task = task("verify_artifacts")
    :description("Verifies that artifacts were created correctly with modern DSL")
    :depends_on({"create_artifact", "create_another_artifact"})
    :consumes({"my_artifact.txt", "another_artifact.log"})
    :command(function(params)
        log.info("Modern DSL: Verifying created artifacts...")
        
        local workdir = params.workdir
        local results = {}
        
        -- Verify first artifact
        local artifact1_path = workdir .. "/my_artifact.txt"
        if fs.exists(artifact1_path) then
            local content = fs.read(artifact1_path)
            local data_obj = data.parse_json(content)
            results.artifact1 = {
                exists = true,
                size = fs.size(artifact1_path),
                created_by = data_obj.created_by,
                version = data_obj.version
            }
            log.info("✓ Artifact 1 verified: " .. artifact1_path)
        else
            results.artifact1 = { exists = false }
            log.error("✗ Artifact 1 missing: " .. artifact1_path)
        end
        
        -- Verify second artifact
        local artifact2_path = workdir .. "/another_artifact.log"
        if fs.exists(artifact2_path) then
            local content = fs.read(artifact2_path)
            local line_count = 0
            for line in content:gmatch("[^\r\n]+") do
                line_count = line_count + 1
            end
            results.artifact2 = {
                exists = true,
                size = fs.size(artifact2_path),
                line_count = line_count
            }
            log.info("✓ Artifact 2 verified: " .. artifact2_path)
        else
            results.artifact2 = { exists = false }
            log.error("✗ Artifact 2 missing: " .. artifact2_path)
        end
        
        local all_verified = results.artifact1.exists and results.artifact2.exists
        
        if all_verified then
            return true, "All artifacts verified successfully", results
        else
            return false, "Some artifacts failed verification"
        end
    end)
    :on_success(function(params, output)
        log.info("Modern DSL: Artifact verification completed successfully!")
    end)
    :build()

workflow.define("artifact_management_modern", {
    description = "Artifact production and collection demonstration - Modern DSL",
    version = "2.0.0",
    
    metadata = {
        category = "demonstration",
        tags = {"artifacts", "files", "metadata", "modern-dsl"}
    },
    
    tasks = {
        create_artifact_task,
        create_another_artifact_task,
        verify_artifacts_task
    },
    
    config = {
        timeout = "10m",
        artifact_retention = "7d", -- Keep artifacts for 7 days
        compression = true
    },
    
    on_start = function()
        log.info("Starting artifact management demonstration...")
        return true
    end,
    
    on_complete = function(success, results)
        if success then
            log.info("Artifact management demo completed - all artifacts created and verified!")
        else
            log.warn("Artifact management demo had issues - check individual tasks")
        end
        return true
    end
})
