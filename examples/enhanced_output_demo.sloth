-- Enhanced Output Demo - Showcasing new Pulumi-style output
-- Generated by Sloth Runner Enhanced Features

-- Build task with enhanced output
local build_task = task("build_app")
    :description("Build the application with enhanced output formatting")
    :command(function(params, deps)
        log.info("🔨 Building application...")
        
        -- Simulate build process
        local result = exec.run("echo 'Building application...' && sleep 2")
        
        return true, result.stdout, {
            build_status = "success",
            build_time = os.time(),
            artifacts = {"app", "dist/"},
            version = "v1.0.0",
            size = "15.2MB"
        }
    end)
    :timeout("5m")
    :retries(2, "exponential")
    :artifacts({"app", "dist/"})
    :on_success(function(params, output)
        log.info("✅ Build completed successfully!")
        if output and output.artifacts then
            log.info("📦 Artifacts: " .. table.concat(output.artifacts, ", "))
        end
    end)
    :build()

-- Test task with detailed output
local test_task = task("run_tests")
    :description("Run comprehensive tests with detailed reporting")
    :depends_on({"build_app"})
    :command(function(params, deps)
        log.info("🧪 Running tests...")
        
        -- Simulate test execution
        local result = exec.run("echo 'Running tests...' && sleep 3")
        
        return true, result.stdout, {
            test_status = "passed",
            total_tests = 156,
            passed_tests = 156,
            failed_tests = 0,
            coverage = "98.5%",
            duration = "3.2s",
            suites = {"unit", "integration", "e2e"}
        }
    end)
    :timeout("10m")
    :build()

-- Deploy task with rich output
local deploy_task = task("deploy_production")
    :description("Deploy to production with detailed status")
    :depends_on({"run_tests"})
    :run_if(function(params, deps)
        return deps.run_tests and deps.run_tests.test_status == "passed"
    end)
    :command(function(params, deps)
        log.info("🚀 Deploying to production...")
        
        -- Simulate deployment
        local result = exec.run("echo 'Deploying application...' && sleep 4")
        
        local version = "v1.0.0"
        if deps.build_app and deps.build_app.version then
            version = deps.build_app.version
        end
        
        return true, result.stdout, {
            deployment_status = "success",
            environment = "production",
            url = "https://myapp.example.com",
            version = version,
            health_check = "passing",
            instances = 3,
            load_balancer = "active"
        }
    end)
    :timeout("10m")
    :on_success(function(params, output)
        log.info("🌐 Application deployed successfully!")
        if output and output.url then
            log.info("🔗 URL: " .. output.url)
        end
    end)
    :build()

-- Enhanced Workflow Definition
workflow.define("enhanced_output_demo", {
    description = "Enhanced Output Demo - Showcasing Pulumi-style formatting",
    version = "1.0.0",
    
    metadata = {
        author = "Sloth Runner Team",
        category = "demo",
        complexity = "intermediate",
        tags = {"demo", "output", "pulumi-style", "enhanced"},
        created_at = os.date(),
        features = {"rich_output", "detailed_reporting", "progress_indicators"}
    },
    
    tasks = { build_task, test_task, deploy_task },
    
    config = {
        timeout = "30m",
        max_parallel_tasks = 2,
        fail_fast = true,
        output_style = "pulumi"
    },
    
    on_start = function()
        log.info("🦥 Starting Enhanced Output Demo...")
        return true
    end,
    
    on_complete = function(success, results)
        if success then
            log.info("🎉 Enhanced Output Demo completed successfully!")
            log.info("📊 Summary:")
            log.info("  • Build: ✅ Completed")
            log.info("  • Tests: ✅ All passed")
            log.info("  • Deploy: ✅ Live in production")
        else
            log.error("❌ Enhanced Output Demo failed!")
        end
        return true
    end
})