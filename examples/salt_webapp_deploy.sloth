-- Exemplo Pr√°tico: Deploy de Aplica√ß√£o Web com Salt
-- Este exemplo demonstra como usar o m√≥dulo Salt para fazer deploy completo
-- de uma aplica√ß√£o web em ambiente de produ√ß√£o

local salt = require("salt")

-- Fun√ß√£o principal do comando
command = function()
    log.info("üöÄ Iniciando deploy da aplica√ß√£o web com Salt...")
    
    -- 1. VERIFICA√á√ÉO INICIAL DE CONECTIVIDADE
    log.info("üì° Verificando conectividade com todos os minions...")
    local ping_result = salt.ping("*", {timeout = 30})
    if not ping_result.success then
        return false, "Falha na conectividade: " .. (ping_result.error or "Erro desconhecido")
    end
    
    log.info("‚úÖ Conectividade confirmada com os minions")
    
    -- 2. PREPARA√á√ÉO DA INFRAESTRUTURA
    log.info("üîß Preparando infraestrutura...")
    
    -- Atualizar reposit√≥rios de pacotes
    local pkg_refresh = salt.pkg_refresh("*")
    if pkg_refresh.success then
        log.info("‚úÖ Reposit√≥rios de pacotes atualizados")
    end
    
    -- Verificar e instalar depend√™ncias b√°sicas
    local dependencies = {"nginx", "python3", "python3-pip", "git", "supervisor"}
    for _, package in ipairs(dependencies) do
        log.info("üì¶ Instalando depend√™ncia: " .. package)
        local install_result = salt.pkg_install("web-servers", package)
        if install_result.success then
            log.info("‚úÖ " .. package .. " instalado com sucesso")
        else
            log.warning("‚ö†Ô∏è Falha ao instalar " .. package .. ": " .. (install_result.error or ""))
        end
    end
    
    -- 3. CONFIGURA√á√ÉO DE USU√ÅRIOS E PERMISS√ïES
    log.info("üë• Configurando usu√°rios do sistema...")
    
    -- Criar usu√°rio da aplica√ß√£o
    local user_create = salt.user_add("web-servers", "webapp", {
        home = "/home/webapp",
        shell = "/bin/bash",
        uid = "1001"
    })
    if user_create.success then
        log.info("‚úÖ Usu√°rio 'webapp' criado")
    end
    
    -- Criar grupo para a aplica√ß√£o
    local group_create = salt.group_add("web-servers", "webapp", "1001")
    if group_create.success then
        log.info("‚úÖ Grupo 'webapp' criado")
    end
    
    -- 4. PREPARA√á√ÉO DE DIRET√ìRIOS
    log.info("üìÅ Criando estrutura de diret√≥rios...")
    
    local directories = {
        "/opt/webapp",
        "/opt/webapp/app",
        "/opt/webapp/logs",
        "/opt/webapp/static",
        "/var/log/webapp"
    }
    
    for _, dir in ipairs(directories) do
        -- Criar diret√≥rio
        local mkdir_result = salt.cmd("web-servers", "cmd", "run", "mkdir -p " .. dir)
        if mkdir_result.success then
            -- Definir propriet√°rio
            salt.cmd("web-servers", "cmd", "run", "chown webapp:webapp " .. dir)
            log.info("üìÅ Diret√≥rio criado: " .. dir)
        end
    end
    
    -- 5. DEPLOY DO C√ìDIGO DA APLICA√á√ÉO
    log.info("üíª Fazendo deploy do c√≥digo da aplica√ß√£o...")
    
    -- Clone do reposit√≥rio (ou pull se j√° existir)
    local repo_url = "https://github.com/company/webapp.git"
    local app_path = "/opt/webapp/app"
    
    -- Verificar se j√° existe
    local repo_exists = salt.file_stats("web-servers", app_path .. "/.git")
    
    if repo_exists.success and repo_exists.returns then
        -- Fazer pull se reposit√≥rio j√° existe
        log.info("üîÑ Atualizando c√≥digo existente...")
        local git_pull = salt.git_pull("web-servers", app_path)
        if git_pull.success then
            log.info("‚úÖ C√≥digo atualizado via git pull")
        end
    else
        -- Clonar reposit√≥rio
        log.info("üì• Clonando reposit√≥rio...")
        local git_clone = salt.git_clone("web-servers", repo_url, app_path)
        if git_clone.success then
            log.info("‚úÖ Reposit√≥rio clonado com sucesso")
        end
    end
    
    -- Fazer checkout da vers√£o espec√≠fica
    local app_version = "v2.1.0"
    local git_checkout = salt.git_checkout("web-servers", app_path, app_version)
    if git_checkout.success then
        log.info("‚úÖ Checkout para vers√£o: " .. app_version)
    end
    
    -- 6. CONFIGURA√á√ÉO DO AMBIENTE PYTHON
    log.info("üêç Configurando ambiente Python...")
    
    -- Instalar depend√™ncias Python
    local pip_install = salt.cmd("web-servers", "cmd", "run", 
        "cd " .. app_path .. " && pip3 install -r requirements.txt")
    if pip_install.success then
        log.info("‚úÖ Depend√™ncias Python instaladas")
    end
    
    -- 7. CONFIGURA√á√ÉO DO BANCO DE DADOS
    log.info("üóÑÔ∏è Configurando banco de dados...")
    
    -- Criar banco de dados
    local db_create = salt.mysql_db_create("db-servers", "webapp_production")
    if db_create.success then
        log.info("‚úÖ Banco de dados 'webapp_production' criado")
    end
    
    -- Criar usu√°rio do banco
    local db_user = salt.mysql_user_create("db-servers", "webapp_user", "localhost", "secure_password_123")
    if db_user.success then
        log.info("‚úÖ Usu√°rio do banco criado")
    end
    
    -- Conceder permiss√µes
    local db_grant = salt.mysql_grant_add("db-servers", "ALL", "webapp_production.*", "webapp_user", "localhost")
    if db_grant.success then
        log.info("‚úÖ Permiss√µes do banco configuradas")
    end
    
    -- 8. CONFIGURA√á√ÉO DO NGINX
    log.info("üåê Configurando servidor web Nginx...")
    
    -- Aplicar configura√ß√£o do Nginx via state
    local nginx_config = salt.state_apply("web-servers", "nginx.webapp", {
        pillar = {
            webapp = {
                server_name = "webapp.company.com",
                app_port = 8000,
                static_path = "/opt/webapp/static",
                log_path = "/var/log/webapp"
            }
        }
    })
    
    if nginx_config.success then
        log.info("‚úÖ Configura√ß√£o do Nginx aplicada")
    end
    
    -- Recarregar Nginx
    local nginx_reload = salt.service_reload("web-servers", "nginx")
    if nginx_reload.success then
        log.info("‚úÖ Nginx recarregado")
    end
    
    -- 9. CONFIGURA√á√ÉO DO SUPERVISOR (GERENCIADOR DE PROCESSOS)
    log.info("‚öôÔ∏è Configurando Supervisor...")
    
    -- Aplicar configura√ß√£o do supervisor
    local supervisor_config = salt.state_apply("web-servers", "supervisor.webapp")
    if supervisor_config.success then
        log.info("‚úÖ Configura√ß√£o do Supervisor aplicada")
    end
    
    -- Recarregar supervisor
    local supervisor_reload = salt.service_restart("web-servers", "supervisor")
    if supervisor_reload.success then
        log.info("‚úÖ Supervisor reiniciado")
    end
    
    -- 10. EXECUTAR MIGRA√á√ïES DE BANCO
    log.info("üîÑ Executando migra√ß√µes de banco de dados...")
    
    local migrations = salt.cmd("web-servers", "cmd", "run", 
        "cd " .. app_path .. " && python3 manage.py migrate")
    if migrations.success then
        log.info("‚úÖ Migra√ß√µes executadas com sucesso")
    end
    
    -- 11. COLETAR ARQUIVOS EST√ÅTICOS
    log.info("üì¶ Coletando arquivos est√°ticos...")
    
    local static_files = salt.cmd("web-servers", "cmd", "run", 
        "cd " .. app_path .. " && python3 manage.py collectstatic --noinput")
    if static_files.success then
        log.info("‚úÖ Arquivos est√°ticos coletados")
    end
    
    -- 12. INICIAR APLICA√á√ÉO
    log.info("üöÄ Iniciando aplica√ß√£o...")
    
    -- Iniciar processo da aplica√ß√£o via supervisor
    local app_start = salt.cmd("web-servers", "cmd", "run", "supervisorctl start webapp")
    if app_start.success then
        log.info("‚úÖ Aplica√ß√£o iniciada")
    end
    
    -- 13. VERIFICA√á√ïES DE SA√öDE
    log.info("üè• Realizando verifica√ß√µes de sa√∫de...")
    
    -- Aguardar um momento para a aplica√ß√£o inicializar
    time.sleep(10)
    
    -- Verificar se a aplica√ß√£o est√° respondendo
    local health_check = salt.cmd("web-servers", "cmd", "run", 
        "curl -f http://localhost:8000/health/ || echo 'FAILED'")
    
    if health_check.success and not string.find(health_check.stdout or "", "FAILED") then
        log.info("‚úÖ Verifica√ß√£o de sa√∫de passou")
    else
        log.warning("‚ö†Ô∏è Verifica√ß√£o de sa√∫de falhou")
    end
    
    -- Verificar status dos servi√ßos
    local services = {"nginx", "supervisor"}
    for _, service in ipairs(services) do
        local service_status = salt.service_status("web-servers", service)
        if service_status.success then
            log.info("‚úÖ Servi√ßo " .. service .. " est√° rodando")
        else
            log.warning("‚ö†Ô∏è Servi√ßo " .. service .. " pode ter problemas")
        end
    end
    
    -- 14. CONFIGURAR MONITORAMENTO
    log.info("üìä Configurando monitoramento...")
    
    -- Configurar beacon para monitorar uso de disco
    local disk_beacon = salt.beacon_add("web-servers", "diskusage", {
        interval = 300,  -- 5 minutos
        threshold = 85   -- Alertar se uso > 85%
    })
    
    if disk_beacon.success then
        log.info("‚úÖ Beacon de monitoramento de disco configurado")
    end
    
    -- Configurar beacon para monitorar servi√ßos
    local service_beacon = salt.beacon_add("web-servers", "service", {
        services = {"nginx", "supervisor"},
        interval = 60
    })
    
    if service_beacon.success then
        log.info("‚úÖ Beacon de monitoramento de servi√ßos configurado")
    end
    
    -- 15. CONFIGURAR BACKUP AUTOM√ÅTICO
    log.info("üíæ Configurando backup autom√°tico...")
    
    -- Agendar backup di√°rio do banco
    local backup_schedule = salt.schedule_add("db-servers", "daily-backup", {
        function = "cmd.run",
        args = ["mysqldump webapp_production > /backup/webapp_$(date +%Y%m%d).sql"],
        hours = 2,
        minutes = 0
    })
    
    if backup_schedule.success then
        log.info("‚úÖ Backup autom√°tico agendado para 02:00 diariamente")
    end
    
    -- 16. ENVIAR EVENTO DE DEPLOY CONCLU√çDO
    log.info("üì° Enviando notifica√ß√£o de deploy conclu√≠do...")
    
    local deploy_event = salt.event_fire("deployment.completed", {
        application = "webapp",
        version = app_version,
        timestamp = os.date(),
        environment = "production"
    }, "web-servers")
    
    if deploy_event.success then
        log.info("‚úÖ Evento de deploy enviado")
    end
    
    -- 17. RELAT√ìRIO FINAL
    log.info("üìã Gerando relat√≥rio final...")
    
    -- Obter informa√ß√µes do sistema
    local system_info = salt.system_info("web-servers")
    local disk_usage = salt.disk_usage("web-servers", "/")
    local memory_info = salt.status_meminfo("web-servers")
    
    -- Log do resumo
    log.info("=" .. string.rep("=", 50))
    log.info("üéâ DEPLOY CONCLU√çDO COM SUCESSO!")
    log.info("=" .. string.rep("=", 50))
    log.info("üì¶ Aplica√ß√£o: webapp")
    log.info("üè∑Ô∏è Vers√£o: " .. app_version)
    log.info("üåê URL: http://webapp.company.com")
    log.info("‚è∞ Conclu√≠do em: " .. os.date())
    log.info("=" .. string.rep("=", 50))
    
    -- Instru√ß√µes p√≥s-deploy
    log.info("üìù PR√ìXIMOS PASSOS:")
    log.info("1. Verificar logs da aplica√ß√£o: /var/log/webapp/")
    log.info("2. Monitorar m√©tricas via dashboard")
    log.info("3. Testar funcionalidades cr√≠ticas")
    log.info("4. Documentar mudan√ßas no changelog")
    
    return true, "Deploy da aplica√ß√£o web conclu√≠do com sucesso!"
end

-- Fun√ß√£o de rollback em caso de problemas
rollback = function()
    log.info("üîÑ Iniciando rollback...")
    
    local previous_version = "v2.0.5"
    
    -- Parar aplica√ß√£o
    salt.cmd("web-servers", "cmd", "run", "supervisorctl stop webapp")
    
    -- Fazer checkout da vers√£o anterior
    salt.git_checkout("web-servers", "/opt/webapp/app", previous_version)
    
    -- Executar migra√ß√µes se necess√°rio
    salt.cmd("web-servers", "cmd", "run", "cd /opt/webapp/app && python3 manage.py migrate")
    
    -- Reiniciar aplica√ß√£o
    salt.cmd("web-servers", "cmd", "run", "supervisorctl start webapp")
    
    log.info("‚úÖ Rollback para vers√£o " .. previous_version .. " conclu√≠do")
    
    return true, "Rollback conclu√≠do"
end

-- Fun√ß√£o para verificar status p√≥s-deploy
status_check = function()
    log.info("üîç Verificando status da aplica√ß√£o...")
    
    local checks = {
        -- Verificar servi√ßos
        nginx_status = salt.service_status("web-servers", "nginx"),
        supervisor_status = salt.service_status("web-servers", "supervisor"),
        
        -- Verificar conectividade
        app_health = salt.cmd("web-servers", "cmd", "run", "curl -f http://localhost:8000/health/"),
        
        -- Verificar recursos
        disk_usage = salt.disk_usage("web-servers", "/"),
        memory_usage = salt.status_meminfo("web-servers"),
        
        -- Verificar logs recentes
        app_logs = salt.cmd("web-servers", "cmd", "run", "tail -n 50 /var/log/webapp/app.log"),
        nginx_logs = salt.cmd("web-servers", "cmd", "run", "tail -n 20 /var/log/nginx/error.log")
    }
    
    -- Analisar resultados
    local issues = {}
    for check_name, result in pairs(checks) do
        if not result.success then
            table.insert(issues, check_name)
        end
    end
    
    if #issues == 0 then
        log.info("‚úÖ Todos os checks passaram - aplica√ß√£o saud√°vel")
        return true, "Sistema operando normalmente"
    else
        log.warning("‚ö†Ô∏è Issues encontradas: " .. table.concat(issues, ", "))
        return false, "Sistema com problemas detectados"
    end
end