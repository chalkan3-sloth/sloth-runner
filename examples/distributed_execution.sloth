-- Exemplo completo de uso do Sloth Runner com agents distribu√≠dos
-- Este script demonstra como executar tarefas em agents remotos usando :delegate_to()

log.info("üöÄ Iniciando exemplo de execu√ß√£o distribu√≠da")

-- ============================================================================
-- EXEMPLO 1: Tarefa simples em um agent espec√≠fico
-- ============================================================================

local check_hostname = task("check_hostname_ladyguica")
    :description("Verificar hostname do agent ladyguica")
    :delegate_to("ladyguica")  -- Executa no agent 'ladyguica'
    :command(function(this, params)
        local exec = require("exec")
        
        log.info("üîç Verificando hostname em " .. this.agent.get())
        
        local result = exec.run("hostname")
        
        if result.exit_code == 0 then
            log.info("‚úÖ Hostname: " .. result.stdout)
            return true, result.stdout
        else
            return false, "Erro: " .. result.stderr
        end
    end)
    :timeout("10s")
    :build()

-- ============================================================================
-- EXEMPLO 2: Tarefa com verifica√ß√£o de sistema operacional
-- ============================================================================

local check_os = task("check_os_keiteguica")
    :description("Verificar informa√ß√µes do sistema no agent keiteguica")
    :delegate_to("keiteguica")  -- Executa no agent 'keiteguica'
    :command(function(this, params)
        local exec = require("exec")
        
        log.info("üñ•Ô∏è  Verificando sistema operacional em " .. this.agent.get())
        
        -- Verificar distribui√ß√£o Linux
        local os_result = exec.run("cat /etc/os-release | grep PRETTY_NAME | cut -d= -f2 | tr -d '\"'")
        
        if os_result.exit_code == 0 then
            log.info("Sistema: " .. os_result.stdout)
        end
        
        -- Verificar uptime
        local uptime_result = exec.run("uptime -p")
        if uptime_result.exit_code == 0 then
            log.info("Uptime: " .. uptime_result.stdout)
        end
        
        -- Verificar mem√≥ria
        local mem_result = exec.run("free -h | grep Mem | awk '{print $2}'")
        if mem_result.exit_code == 0 then
            log.info("Mem√≥ria Total: " .. mem_result.stdout)
        end
        
        return true, "Verifica√ß√£o conclu√≠da"
    end)
    :timeout("15s")
    :build()

-- ============================================================================
-- EXEMPLO 3: Deploy de aplica√ß√£o em m√∫ltiplos agents
-- ============================================================================

local deploy_nginx = task("deploy_nginx")
    :description("Instalar/atualizar nginx em agent remoto")
    :delegate_to("ladyguica")
    :command(function(this, params)
        local systemd = require("systemd")
        local pkg = require("pkg")
        
        log.info("üì¶ Instalando nginx em " .. this.agent.get())
        
        -- Instalar nginx
        local install_result = pkg.install({"nginx"})
        
        if not install_result.success then
            return false, "Falha ao instalar nginx: " .. (install_result.error or "unknown")
        end
        
        log.info("‚úÖ Nginx instalado com sucesso")
        
        -- Iniciar e habilitar servi√ßo
        log.info("üîß Configurando servi√ßo nginx...")
        
        systemd.enable("nginx")
        local start_result = systemd.start("nginx")
        
        if start_result.success then
            log.info("‚úÖ Nginx iniciado e habilitado")
            return true, "Deploy conclu√≠do com sucesso"
        else
            return false, "Falha ao iniciar nginx"
        end
    end)
    :timeout("2m")
    :retries(2, "linear")
    :build()

-- ============================================================================
-- EXEMPLO 4: Verificar status de servi√ßo em m√∫ltiplos agents
-- ============================================================================

local check_nginx_status = task("check_nginx_status_all")
    :description("Verificar status do nginx em todos os agents")
    :command(function(this, params)
        local agents = {"ladyguica", "keiteguica"}
        local results = {}
        
        for _, agent_name in ipairs(agents) do
            log.info("üîç Verificando nginx em " .. agent_name)
            
            -- Criar subtarefa para verificar cada agent
            local check = task("check_nginx_" .. agent_name)
                :delegate_to(agent_name)
                :command(function(t, p)
                    local systemd = require("systemd")
                    
                    local status = systemd.status("nginx")
                    
                    if status.is_active then
                        log.info("‚úÖ Nginx ativo em " .. agent_name)
                        return true, "active"
                    else
                        log.warn("‚ö†Ô∏è  Nginx inativo em " .. agent_name)
                        return false, "inactive"
                    end
                end)
                :timeout("10s")
                :build()
            
            local success, output = check:run()
            results[agent_name] = {success = success, status = output}
        end
        
        -- Resumo
        log.info("")
        log.info("üìä Resumo:")
        for agent, result in pairs(results) do
            if result.success then
                log.info("  ‚úÖ " .. agent .. ": " .. result.status)
            else
                log.warn("  ‚ùå " .. agent .. ": " .. result.status)
            end
        end
        
        return true, "Verifica√ß√£o conclu√≠da"
    end)
    :timeout("1m")
    :build()

-- ============================================================================
-- EXEMPLO 5: Backup de configura√ß√µes
-- ============================================================================

local backup_configs = task("backup_configs")
    :description("Fazer backup de configura√ß√µes em agent remoto")
    :delegate_to("ladyguica")
    :command(function(this, params)
        local exec = require("exec")
        local fs = require("fs")
        
        log.info("üíæ Iniciando backup de configura√ß√µes...")
        
        -- Criar diret√≥rio de backup
        local backup_dir = "/tmp/backup_" .. os.date("%Y%m%d_%H%M%S")
        fs.mkdir(backup_dir)
        
        -- Arquivos para backup
        local files_to_backup = {
            "/etc/nginx/nginx.conf",
            "/etc/hosts",
            "/etc/hostname"
        }
        
        local backed_up = {}
        
        for _, file in ipairs(files_to_backup) do
            if fs.exists(file) then
                local filename = file:match("([^/]+)$")
                local dest = backup_dir .. "/" .. filename
                
                local result = exec.run("cp " .. file .. " " .. dest)
                
                if result.exit_code == 0 then
                    log.info("‚úÖ Backup: " .. file)
                    table.insert(backed_up, file)
                else
                    log.warn("‚ö†Ô∏è  Falha no backup de: " .. file)
                end
            end
        end
        
        -- Criar arquivo tar.gz
        local tar_file = backup_dir .. ".tar.gz"
        local tar_result = exec.run("tar -czf " .. tar_file .. " -C " .. backup_dir .. " .")
        
        if tar_result.exit_code == 0 then
            log.info("‚úÖ Backup compactado: " .. tar_file)
            
            -- Limpar diret√≥rio tempor√°rio
            exec.run("rm -rf " .. backup_dir)
            
            return true, "Backup criado: " .. tar_file
        else
            return false, "Falha ao compactar backup"
        end
    end)
    :timeout("30s")
    :build()

-- ============================================================================
-- EXEMPLO 6: Workflow completo de deploy
-- ============================================================================

local deploy_workflow = workflow.define("complete_deploy")
    :description("Deploy completo em ambiente distribu√≠do")
    :tasks({
        -- 1. Verificar conectividade
        task("verify_connectivity")
            :description("Verificar conectividade com agents")
            :command(function(this, params)
                local agents = {"ladyguica", "keiteguica"}
                
                for _, agent_name in ipairs(agents) do
                    log.info("üîå Verificando " .. agent_name .. "...")
                    
                    local ping = task("ping_" .. agent_name)
                        :delegate_to(agent_name)
                        :command(function(t, p)
                            return true, "connected"
                        end)
                        :timeout("5s")
                        :build()
                    
                    local success = ping:run()
                    
                    if not success then
                        return false, "Agent " .. agent_name .. " n√£o est√° acess√≠vel"
                    end
                    
                    log.info("  ‚úÖ " .. agent_name .. " conectado")
                end
                
                return true, "Todos os agents conectados"
            end)
            :build(),
        
        -- 2. Fazer backup antes do deploy
        backup_configs,
        
        -- 3. Deploy da aplica√ß√£o
        deploy_nginx,
        
        -- 4. Verificar status ap√≥s deploy
        check_nginx_status
    })
    :config({
        timeout = "10m",
        max_parallel_tasks = 1,
        on_task_failure = "stop"
    })
    :on_complete(function(success, results)
        if success then
            log.info("")
            log.info("üéâ Deploy completo realizado com sucesso!")
        else
            log.error("‚ùå Deploy falhou!")
        end
    end)

-- ============================================================================
-- EXECUTAR EXEMPLOS
-- ============================================================================

log.info("")
log.info("=" .. string.rep("=", 78))
log.info("Escolha um exemplo para executar:")
log.info("=" .. string.rep("=", 78))
log.info("")
log.info("1. Verificar hostname do agent ladyguica")
log.info("2. Verificar informa√ß√µes do sistema no agent keiteguica")
log.info("3. Deploy do nginx no agent ladyguica")
log.info("4. Verificar status do nginx em todos os agents")
log.info("5. Fazer backup de configura√ß√µes")
log.info("6. Executar workflow completo de deploy")
log.info("")

-- Para executar um exemplo espec√≠fico, descomente a linha correspondente:

-- check_hostname:run()
-- check_os:run()
-- deploy_nginx:run()
-- check_nginx_status:run()
-- backup_configs:run()
-- deploy_workflow:run()

-- Por padr√£o, vamos executar a verifica√ß√£o de conectividade
log.info("üöÄ Executando verifica√ß√£o de conectividade...")
log.info("")

local connectivity_check = task("connectivity_test")
    :description("Teste de conectividade com agents")
    :command(function(this, params)
        local agents = {"ladyguica", "keiteguica"}
        local connected = {}
        local failed = {}
        
        for _, agent_name in ipairs(agents) do
            log.info("üîå Testando " .. agent_name .. "...")
            
            local ping = task("ping_" .. agent_name)
                :delegate_to(agent_name)
                :command(function(t, p)
                    local exec = require("exec")
                    local hostname_result = exec.run("hostname")
                    return true, hostname_result.stdout
                end)
                :timeout("10s")
                :build()
            
            local success, output = ping:run()
            
            if success then
                table.insert(connected, agent_name)
                log.info("  ‚úÖ " .. agent_name .. " - Hostname: " .. (output or "N/A"))
            else
                table.insert(failed, agent_name)
                log.error("  ‚ùå " .. agent_name .. " - Falha na conex√£o")
            end
        end
        
        log.info("")
        log.info("üìä Resultado:")
        log.info("  Conectados: " .. #connected .. "/" .. #agents)
        
        if #failed > 0 then
            log.warn("  Falhas: " .. table.concat(failed, ", "))
        end
        
        return #failed == 0, "Teste conclu√≠do"
    end)
    :timeout("1m")
    :build()

connectivity_check:run()

log.info("")
log.info("‚úÖ Exemplo conclu√≠do!")
log.info("")
log.info("Para executar outros exemplos, edite o arquivo e descomente as linhas apropriadas.")
