-- 🌟 Hello World - Seu primeiro script Sloth Runner
-- Este é o exemplo mais básico que demonstra a estrutura fundamental

TaskDefinitions = {
    hello_world = {
        description = "Um simples Hello World para começar",
        clean_workdir_after_run = true,
        
        tasks = {
            {
                name = "say_hello",
                description = "Diz olá para o mundo",
                command = function()
                    -- 📝 Log é usado para saída formatada
                    log.info("🌟 Olá, mundo do Sloth Runner!")
                    log.info("🦥 Este é seu primeiro script funcionando!")
                    
                    -- 💾 Demonstrar uso do state para compartilhar dados
                    state.set("greeting", "Olá do Sloth Runner!")
                    state.set("start_time", os.date("%Y-%m-%d %H:%M:%S"))
                    
                    -- ✅ Sempre retorne true para sucesso, false para falha
                    return true, "Hello World executado com sucesso!"
                end
            },
            
            {
                name = "show_system_info",
                description = "Mostra informações do sistema",
                depends_on = "say_hello", -- 🔗 Esta task depende da anterior
                command = function()
                    log.info("📊 Informações do Sistema:")
                    
                    -- 🖥️ Executar comandos do sistema
                    local os_info = exec.run("uname -a")
                    if os_info.success then
                        log.info("Sistema: " .. os_info.stdout:trim())
                    end
                    
                    local date_info = exec.run("date")
                    if date_info.success then
                        log.info("Data atual: " .. date_info.stdout:trim())
                    end
                    
                    -- 🖥️ Mostrar informações adicionais
                    local uptime = exec.run("uptime")
                    if uptime.success then
                        log.info("Uptime: " .. uptime.stdout:trim())
                    end
                    
                    local whoami = exec.run("whoami")
                    if whoami.success then
                        log.info("Usuário atual: " .. whoami.stdout:trim())
                    end
                    
                    -- 💾 Armazenar informações do sistema no state
                    local system_data = {
                        os = os_info.success and os_info.stdout:trim() or "unknown",
                        date = date_info.success and date_info.stdout:trim() or "unknown",
                        uptime = uptime.success and uptime.stdout:trim() or "unknown",
                        user = whoami.success and whoami.stdout:trim() or "unknown"
                    }
                    state.set("system_info", system_data)
                    
                    return true, "Informações do sistema coletadas"
                end
            },
            
            {
                name = "create_welcome_file",
                description = "Cria um arquivo de boas-vindas",
                depends_on = "show_system_info",
                artifacts = {"welcome.txt", "system-info.json"},
                command = function(params)
                    -- 💾 Recuperar dados do state
                    local greeting = state.get("greeting") or "Hello World!"
                    local start_time = state.get("start_time") or "unknown"
                    local system_info = state.get("system_info") or {}
                    
                    local welcome_text = string.format([[
🦥 Bem-vindo ao Sloth Runner!

Este arquivo foi criado automaticamente pelo seu primeiro script.

📊 Informações da Execução:
- Horário de início: %s
- Sistema operacional: %s
- Usuário: %s
- Saudação: %s

🎯 Algumas coisas que você pode fazer:
- Explorar os exemplos em examples/
- Usar help() para ver ajuda interativa
- Criar seus próprios scripts de automação
- Usar o state para compartilhar dados entre tasks
- Criar artifacts para persistir resultados

📚 Estrutura Básica de um Script:
1. TaskDefinitions - Define grupos de tarefas
2. tasks - Lista de tarefas a executar
3. depends_on - Define dependências entre tarefas
4. command - Função que executa a lógica da tarefa
5. artifacts - Arquivos a serem preservados

Happy coding! 🚀
]], start_time, system_info.os or "unknown", system_info.user or "unknown", greeting)
                    
                    -- 📁 Usar o módulo fs para operações de arquivo
                    local filename = "welcome.txt"
                    fs.write(filename, welcome_text)
                    
                    -- 💾 Criar arquivo JSON com informações do sistema
                    local system_json = json.encode({
                        execution = {
                            start_time = start_time,
                            greeting = greeting
                        },
                        system = system_info,
                        script_info = {
                            name = "hello-world.lua",
                            description = "Primeiro exemplo do Sloth Runner",
                            author = "Sloth Runner Community",
                            version = "1.1.0"
                        }
                    })
                    fs.write("system-info.json", system_json)
                    
                    -- ✅ Verificar se os arquivos foram criados
                    if fs.exists(filename) and fs.exists("system-info.json") then
                        log.info("✅ Arquivos criados com sucesso!")
                        log.info("  📄 " .. filename)
                        log.info("  📄 system-info.json")
                        
                        return true, "Arquivos de boas-vindas criados"
                    else
                        log.error("❌ Falha ao criar um ou mais arquivos")
                        return false, "Erro ao criar arquivos"
                    end
                end
            },
            
            {
                name = "show_completion_stats",
                description = "Mostra estatísticas finais da execução",
                depends_on = "create_welcome_file",
                command = function()
                    log.info("📈 Estatísticas da Execução:")
                    
                    -- 📊 Obter estatísticas do state
                    local stats = state.stats()
                    log.info("  💾 Total de chaves no state: " .. tostring(stats.total_keys))
                    
                    -- 📁 Verificar arquivos criados
                    local files_created = {"welcome.txt", "system-info.json"}
                    local files_count = 0
                    local total_size = 0
                    
                    for _, file in ipairs(files_created) do
                        if fs.exists(file) then
                            files_count = files_count + 1
                            local size = fs.size(file) or 0
                            total_size = total_size + size
                            log.info("  📄 " .. file .. " (" .. size .. " bytes)")
                        end
                    end
                    
                    -- ⏱️ Calcular tempo de execução
                    local start_time = state.get("start_time")
                    local end_time = os.date("%Y-%m-%d %H:%M:%S")
                    
                    log.info("⏱️  Tempo de execução:")
                    log.info("  🚀 Início: " .. (start_time or "unknown"))
                    log.info("  🏁 Fim: " .. end_time)
                    
                    log.info("🎉 Execução completa!")
                    log.info("  📁 " .. files_count .. " arquivos criados")
                    log.info("  💾 " .. total_size .. " bytes totais")
                    log.info("  🦥 Bem-vindo ao mundo do Sloth Runner!")
                    
                    -- 🎯 Próximos passos
                    log.info("\n🎯 Próximos Passos:")
                    log.info("  1. Execute: sloth-runner run examples/beginner/state-basics.lua")
                    log.info("  2. Explore: examples/beginner/docker-basics.lua")
                    log.info("  3. Tente: examples/intermediate/parallel-processing.lua")
                    
                    return true, "Estatísticas de conclusão exibidas"
                end
            }
        }
    }
}