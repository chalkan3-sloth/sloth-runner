-- Modern DSL: [FILE_DESCRIPTION]
-- Migrated from legacy TaskDefinitions format
-- This example now uses the modern fluent API alongside legacy compatibility

-- üåü Hello World - Seu primeiro script Sloth Runner
-- Este √© o exemplo mais b√°sico que demonstra a estrutura fundamental


-- Modern DSL Implementation
-- Define a simple hello world task using the modern fluent API
local hello_task = task("say_hello")
    :description("Says hello to the world with modern DSL")
    :command(function()
        log.info("üåü Modern DSL: Ol√°, mundo do Sloth Runner!")
        log.info("ü¶• Este √© seu primeiro script funcionando com Modern DSL!")
        
        -- Enhanced state management
        local greeting_data = {
            greeting = "Ol√° do Sloth Runner Modern DSL!",
            start_time = os.date("%Y-%m-%d %H:%M:%S"),
            dsl_version = "2.0.0",
            features = {"modern-syntax", "fluent-api", "enhanced-logging"}
        }
        
        state.set("greeting", greeting_data.greeting)
        state.set("start_time", greeting_data.start_time)
        state.set("dsl_version", greeting_data.dsl_version)
        
        log.info("üìä Dados salvos no state: " .. data.to_json(greeting_data))
        
        return true, "Modern DSL Hello World executado com sucesso!", greeting_data
    end)
    :timeout("30s")
    :on_success(function(params, output)
        log.info("‚ú® Modern DSL task completed at: " .. output.start_time)
    end)
    :build()

local verify_task = task("verify_state")
    :description("Verifies state data with modern DSL")
    :depends_on({"say_hello"})
    :command(function()
        log.info("üîç Modern DSL: Verificando dados do state...")
        
        local greeting = state.get("greeting")
        local start_time = state.get("start_time")
        local dsl_version = state.get("dsl_version")
        
        log.info("Greeting: " .. (greeting or "N/A"))
        log.info("Start Time: " .. (start_time or "N/A"))
        log.info("DSL Version: " .. (dsl_version or "N/A"))
        
        -- Enhanced verification
        local verification_results = {
            greeting_exists = state.exists("greeting"),
            start_time_exists = state.exists("start_time"),
            dsl_version_exists = state.exists("dsl_version"),
            all_data_present = true
        }
        
        verification_results.all_data_present = verification_results.greeting_exists and 
                                              verification_results.start_time_exists and 
                                              verification_results.dsl_version_exists
        
        if verification_results.all_data_present then
            log.info("‚úÖ Modern DSL: Todos os dados verificados com sucesso!")
        else
            log.warn("‚ö†Ô∏è Modern DSL: Alguns dados est√£o faltando")
        end
        
        return verification_results.all_data_present, 
               "State verification " .. (verification_results.all_data_present and "passed" or "failed"),
               verification_results
    end)
    :build()

-- Define workflow using modern syntax
workflow.define("hello_world_modern", {
    description = "Hello World demonstration - Modern DSL",
    version = "2.0.0",
    
    metadata = {
        category = "beginner",
        tags = {"hello-world", "beginner", "state", "modern-dsl"},
        author = "Sloth Runner Team"
    },
    
    tasks = {
        hello_task,
        verify_task
    },
    
    config = {
        timeout = "5m",
        clean_workdir_after_run = true
    },
    
    on_start = function()
        log.info("üöÄ Starting hello world workflow with Modern DSL...")
        return true
    end,
    
    on_complete = function(success, results)
        if success then
            log.info("‚ú® Hello World workflow completed successfully!")
            log.info("üéØ Modern DSL demonstration completed")
        end
        return true
    end
})

-- Maintain backward compatibility with legacy format
TaskDefinitions = {
    hello_world = {
        description = "Um simples Hello World para come√ßar",
        clean_workdir_after_run = true,
        
        tasks = {
            {
                name = "say_hello",
                description = "Diz ol√° para o mundo",
                command = function()
                    -- üìù Log √© usado para sa√≠da formatada
                    log.info("üåü Ol√°, mundo do Sloth Runner!")
                    log.info("ü¶• Este √© seu primeiro script funcionando!")
                    
                    -- üíæ Demonstrar uso do state para compartilhar dados
                    state.set("greeting", "Ol√° do Sloth Runner!")
                    state.set("start_time", os.date("%Y-%m-%d %H:%M:%S"))
                    
                    -- ‚úÖ Sempre retorne true para sucesso, false para falha
                    return true, "Hello World executado com sucesso!"
                end
            },
            
            {
                name = "show_system_info",
                description = "Mostra informa√ß√µes do sistema",
                depends_on = "say_hello", -- üîó Esta task depende da anterior
                command = function()
                    log.info("üìä Informa√ß√µes do Sistema:")
                    
                    -- üñ•Ô∏è Executar comandos do sistema
                    local os_info = exec.run("uname -a")
                    if os_info.success then
                        log.info("Sistema: " .. os_info.stdout:trim())
                    end
                    
                    local date_info = exec.run("date")
                    if date_info.success then
                        log.info("Data atual: " .. date_info.stdout:trim())
                    end
                    
                    -- üñ•Ô∏è Mostrar informa√ß√µes adicionais
                    local uptime = exec.run("uptime")
                    if uptime.success then
                        log.info("Uptime: " .. uptime.stdout:trim())
                    end
                    
                    local whoami = exec.run("whoami")
                    if whoami.success then
                        log.info("Usu√°rio atual: " .. whoami.stdout:trim())
                    end
                    
                    -- üíæ Armazenar informa√ß√µes do sistema no state
                    local system_data = {
                        os = os_info.success and os_info.stdout:trim() or "unknown",
                        date = date_info.success and date_info.stdout:trim() or "unknown",
                        uptime = uptime.success and uptime.stdout:trim() or "unknown",
                        user = whoami.success and whoami.stdout:trim() or "unknown"
                    }
                    state.set("system_info", system_data)
                    
                    return true, "Informa√ß√µes do sistema coletadas"
                end
            },
            
            {
                name = "create_welcome_file",
                description = "Cria um arquivo de boas-vindas",
                depends_on = "show_system_info",
                artifacts = {"welcome.txt", "system-info.json"},
                command = function(params)
                    -- üíæ Recuperar dados do state
                    local greeting = state.get("greeting") or "Hello World!"
                    local start_time = state.get("start_time") or "unknown"
                    local system_info = state.get("system_info") or {}
                    
                    local welcome_text = string.format([[
ü¶• Bem-vindo ao Sloth Runner!

Este arquivo foi criado automaticamente pelo seu primeiro script.

üìä Informa√ß√µes da Execu√ß√£o:
- Hor√°rio de in√≠cio: %s
- Sistema operacional: %s
- Usu√°rio: %s
- Sauda√ß√£o: %s

üéØ Algumas coisas que voc√™ pode fazer:
- Explorar os exemplos em examples/
- Usar help() para ver ajuda interativa
- Criar seus pr√≥prios scripts de automa√ß√£o
- Usar o state para compartilhar dados entre tasks
- Criar artifacts para persistir resultados

üìö Estrutura B√°sica de um Script:
1. TaskDefinitions - Define grupos de tarefas
2. tasks - Lista de tarefas a executar
3. depends_on - Define depend√™ncias entre tarefas
4. command - Fun√ß√£o que executa a l√≥gica da tarefa
5. artifacts - Arquivos a serem preservados

Happy coding! üöÄ
]], start_time, system_info.os or "unknown", system_info.user or "unknown", greeting)
                    
                    -- üìÅ Usar o m√≥dulo fs para opera√ß√µes de arquivo
                    local filename = "welcome.txt"
                    fs.write(filename, welcome_text)
                    
                    -- üíæ Criar arquivo JSON com informa√ß√µes do sistema
                    local system_json = json.encode({
                        execution = {
                            start_time = start_time,
                            greeting = greeting
                        },
                        system = system_info,
                        script_info = {
                            name = "hello-world.lua",
                            description = "Primeiro exemplo do Sloth Runner",
                            author = "Sloth Runner Community",
                            version = "1.1.0"
                        }
                    })
                    fs.write("system-info.json", system_json)
                    
                    -- ‚úÖ Verificar se os arquivos foram criados
                    if fs.exists(filename) and fs.exists("system-info.json") then
                        log.info("‚úÖ Arquivos criados com sucesso!")
                        log.info("  üìÑ " .. filename)
                        log.info("  üìÑ system-info.json")
                        
                        return true, "Arquivos de boas-vindas criados"
                    else
                        log.error("‚ùå Falha ao criar um ou mais arquivos")
                        return false, "Erro ao criar arquivos"
                    end
                end
            },
            
            {
                name = "show_completion_stats",
                description = "Mostra estat√≠sticas finais da execu√ß√£o",
                depends_on = "create_welcome_file",
                command = function()
                    log.info("üìà Estat√≠sticas da Execu√ß√£o:")
                    
                    -- üìä Obter estat√≠sticas do state
                    local stats = state.stats()
                    log.info("  üíæ Total de chaves no state: " .. tostring(stats.total_keys))
                    
                    -- üìÅ Verificar arquivos criados
                    local files_created = {"welcome.txt", "system-info.json"}
                    local files_count = 0
                    local total_size = 0
                    
                    for _, file in ipairs(files_created) do
                        if fs.exists(file) then
                            files_count = files_count + 1
                            local size = fs.size(file) or 0
                            total_size = total_size + size
                            log.info("  üìÑ " .. file .. " (" .. size .. " bytes)")
                        end
                    end
                    
                    -- ‚è±Ô∏è Calcular tempo de execu√ß√£o
                    local start_time = state.get("start_time")
                    local end_time = os.date("%Y-%m-%d %H:%M:%S")
                    
                    log.info("‚è±Ô∏è  Tempo de execu√ß√£o:")
                    log.info("  üöÄ In√≠cio: " .. (start_time or "unknown"))
                    log.info("  üèÅ Fim: " .. end_time)
                    
                    log.info("üéâ Execu√ß√£o completa!")
                    log.info("  üìÅ " .. files_count .. " arquivos criados")
                    log.info("  üíæ " .. total_size .. " bytes totais")
                    log.info("  ü¶• Bem-vindo ao mundo do Sloth Runner!")
                    
                    -- üéØ Pr√≥ximos passos
                    log.info("\nüéØ Pr√≥ximos Passos:")
                    log.info("  1. Execute: sloth-runner run examples/beginner/state-basics.lua")
                    log.info("  2. Explore: examples/beginner/docker-basics.lua")
                    log.info("  3. Tente: examples/intermediate/parallel-processing.lua")
                    
                    return true, "Estat√≠sticas de conclus√£o exibidas"
                end
            }
        }
    }
}