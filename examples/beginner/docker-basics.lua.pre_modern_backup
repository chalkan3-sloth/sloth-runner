-- Modern DSL: [FILE_DESCRIPTION]
-- Migrated from legacy TaskDefinitions format
-- This example now uses the modern fluent API alongside legacy compatibility

-- üê≥ Docker Basics - Primeiros passos com Docker
-- Este exemplo demonstra opera√ß√µes b√°sicas do Docker


-- TODO: Implement modern DSL version here
-- Example modern DSL structure:
--
-- local example_task = task("task_name")
--     :description("Task description with modern DSL")
--     :command(function(params, deps)
--         -- Enhanced task logic
--         return true, "Task completed", { result = "success" }
--     end)
--     :timeout("30s")
--     :build()
--
-- workflow.define("workflow_name", {
--     description = "Workflow description - Modern DSL",
--     version = "2.0.0",
--     tasks = { example_task },
--     config = { timeout = "10m" }
-- })

-- Maintain backward compatibility with legacy format
TaskDefinitions = {
    docker_basics = {
        description = "Exemplos b√°sicos de uso do Docker",
        
        tasks = {
            {
                name = "check_docker",
                description = "Verifica se o Docker est√° funcionando",
                command = function()
                    log.info("üê≥ Verificando instala√ß√£o do Docker...")
                    
                    local docker = require("docker")
                    
                    -- Verificar vers√£o do Docker
                    local version_result = docker.exec({"version", "--format", "{{.Server.Version}}"})
                    
                    if version_result.success then
                        log.info("‚úÖ Docker instalado! Vers√£o: " .. string.gsub(version_result.stdout, "\n", ""))
                    else
                        log.error("‚ùå Docker n√£o encontrado: " .. version_result.stderr)
                        return false, "Docker n√£o est√° dispon√≠vel"
                    end
                    
                    -- Verificar se o daemon est√° rodando
                    local info_result = docker.exec({"info", "--format", "{{.ServerVersion}}"})
                    if info_result.success then
                        log.info("‚úÖ Docker daemon est√° rodando")
                    else
                        log.error("‚ùå Docker daemon n√£o est√° rodando")
                        return false, "Docker daemon n√£o acess√≠vel"
                    end
                    
                    return true, "Docker verificado com sucesso"
                end
            },
            
            {
                name = "list_containers",
                description = "Lista containers existentes",
                depends_on = "check_docker",
                command = function()
                    log.info("üìã Listando containers...")
                    
                    local docker = require("docker")
                    
                    -- Listar containers rodando
                    local running_result = docker.exec({"ps", "--format", "table {{.Names}}\t{{.Image}}\t{{.Status}}"})
                    
                    if running_result.success then
                        if string.len(running_result.stdout) > 0 then
                            log.info("üü¢ Containers rodando:")
                            log.info(running_result.stdout)
                        else
                            log.info("üì≠ Nenhum container rodando no momento")
                        end
                    else
                        log.error("‚ùå Erro ao listar containers: " .. running_result.stderr)
                    end
                    
                    -- Listar todos os containers (incluindo parados)
                    local all_result = docker.exec({"ps", "-a", "--format", "table {{.Names}}\t{{.Image}}\t{{.Status}}"})
                    
                    if all_result.success then
                        if string.len(all_result.stdout) > 0 then
                            log.info("üì¶ Todos os containers:")
                            log.info(all_result.stdout)
                        else
                            log.info("üì≠ Nenhum container encontrado")
                        end
                    end
                    
                    return true, "Containers listados"
                end
            },
            
            {
                name = "pull_test_image",
                description = "Baixa uma imagem de teste",
                depends_on = "list_containers",
                command = function()
                    log.info("‚¨áÔ∏è  Baixando imagem de teste...")
                    
                    local docker = require("docker")
                    
                    -- Pull da imagem hello-world (pequena e r√°pida)
                    local pull_result = docker.exec({"pull", "hello-world:latest"})
                    
                    if pull_result.success then
                        log.info("‚úÖ Imagem hello-world baixada com sucesso!")
                        
                        -- Verificar se a imagem existe
                        local images_result = docker.exec({"images", "hello-world", "--format", "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"})
                        if images_result.success then
                            log.info("üì¶ Imagem dispon√≠vel:")
                            log.info(images_result.stdout)
                        end
                    else
                        log.error("‚ùå Erro ao baixar imagem: " .. pull_result.stderr)
                        return false, "Falha ao baixar imagem"
                    end
                    
                    return true, "Imagem de teste baixada"
                end
            },
            
            {
                name = "run_hello_container",
                description = "Executa um container de exemplo",
                depends_on = "pull_test_image",
                command = function()
                    log.info("üöÄ Executando container hello-world...")
                    
                    local docker = require("docker")
                    
                    -- Executar container hello-world
                    local run_result = docker.run({
                        image = "hello-world",
                        name = "sloth-runner-hello-test"
                    })
                    
                    if run_result.success then
                        log.info("‚úÖ Container executado com sucesso!")
                        log.info("üìÑ Sa√≠da do container:")
                        log.info(run_result.stdout)
                    else
                        log.error("‚ùå Erro ao executar container: " .. run_result.stderr)
                        return false, "Falha ao executar container"
                    end
                    
                    return true, "Container hello-world executado"
                end
            },
            
            {
                name = "cleanup_test_resources",
                description = "Limpa recursos de teste criados",
                depends_on = "run_hello_container",
                command = function()
                    log.info("üßπ Limpando recursos de teste...")
                    
                    local docker = require("docker")
                    
                    -- Remover container (se ainda existir)
                    local rm_result = docker.exec({"rm", "-f", "sloth-runner-hello-test"})
                    if rm_result.success then
                        log.info("üóëÔ∏è  Container removido")
                    else
                        log.info("‚ÑπÔ∏è  Container j√° foi removido automaticamente")
                    end
                    
                    -- Opcionalmente remover a imagem (descomente se desejar)
                    --[[
                    local rmi_result = docker.exec({"rmi", "hello-world:latest"})
                    if rmi_result.success then
                        log.info("üóëÔ∏è  Imagem hello-world removida")
                    else
                        log.info("‚ÑπÔ∏è  Mantendo imagem hello-world para uso futuro")
                    end
                    --]]
                    
                    log.info("‚ÑπÔ∏è  Imagem hello-world mantida para uso futuro")
                    log.info("‚úÖ Limpeza conclu√≠da!")
                    
                    return true, "Recursos de teste limpos"
                end
            }
        }
    }
}