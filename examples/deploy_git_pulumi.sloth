-- Deploy Git + Pulumi Example
-- This example demonstrates how to clone a Git repository and deploy infrastructure using Pulumi
-- The Pulumi configuration is loaded from values.yaml

local clone_repo_task = task("clone_digitalocean_repo")
    :description("Clone Git repository with Pulumi infrastructure")
    :workdir("/tmp/digitalocean-droplets-go")
    :command(function(this, params)
        local workdir_ensured = this.workdir.ensure()
        if not workdir_ensured then 
          return false, "Workdir problem"
        end 

        local git = require("git")
        
        log.info("üì° Starting git.clone()...")
        
        local git_repository = git.clone(
            "https://github.com/chalkan3/go-do-droplet",
            this.workdir.get()
        )
        
        log.info("‚úÖ git.clone() executed!")
        log.info("üìä Repo object: " .. tostring(git_repository))
            
        return true, "Git clone successful using modern DSL", { 
            git_module_used = true,
            modern_dsl_used = true,
            repository_url = "https://github.com/chalkan3/go-do-droplet",
            clone_destination = this.workdir.get()
        }
       
    end)
    :timeout("5m")
    :on_success(function(this, params, output)
        log.info("‚úÖ === CLONE SUCCESS ===")
    end)
    :on_fail(function(this, params, output)
        this.workdir:cleanup()
    end)
    :build()

local deploy_pulumi_task = task("deploy-pulumi")
    :description("Deploy infrastructure using Pulumi with values.yaml configuration")
    :workdir("/tmp/digitalocean-droplets-go")
    :command(function(this, params)
        log.info("üîß Starting Pulumi deployment...")
        
        -- Check if Pulumi files exist
        local workdir = this.workdir:get()
        log.info("üìÇ Checking for Pulumi files in: " .. workdir)
        
        -- Try to open Pulumi.yaml to see if this is a Pulumi project
        local pulumi_yaml = io.open(workdir .. "/Pulumi.yaml", "r")
        local has_pulumi_files = pulumi_yaml ~= nil
        if pulumi_yaml then 
            pulumi_yaml:close() 
        end
        
        if not has_pulumi_files then
            log.warn("‚ö†Ô∏è No Pulumi.yaml file found in repository")
            log.info("üìÇ Repository appears to be a different type of project")
            return true, "No Pulumi files found - skipping Pulumi operations", {
                pulumi_used = false,
                skipped = true,
                reason = "no_pulumi_files"
            }
        end
        
        log.info("üìÅ Found Pulumi configuration files")
        
        local pulumi = require("pulumi")
        
        -- Login to Pulumi (using local backend)
        log.info("üîê Logging into Pulumi (local backend)...")
        local client = pulumi.login("file://.", { login_local = true })
        
        -- Check if login was successful
        if client.error then
            log.error("‚ùå Pulumi login failed: " .. client.error)
            return false, "Pulumi login failed", {
                pulumi_used = true,
                login_success = false,
                error = client.error
            }
        end
        
        log.info("‚úÖ Pulumi login successful")
        
        -- Set working directory for client
        client:set_workdir(workdir)
        
        -- Select/create stack
        log.info("üìã Setting up Pulumi stack...")
        local stack_success, stack_msg = client:stack("dev", { create = true })
        if not stack_success then
            log.error("‚ùå Pulumi stack setup failed: " .. stack_msg)
            return false, "Pulumi stack setup failed", {
                pulumi_used = true,
                login_success = true,
                stack_success = false,
                error = stack_msg
            }
        end
        
        log.info("‚úÖ Pulumi stack setup successful")
        
        -- Load configuration from values.yaml
        local pulumi_config = {}
        
        if values and values.pulumi then
            log.info("üìã Loading Pulumi configuration from values.yaml")
            pulumi_config = {
                dropletName = values.pulumi.dropletName or "sloth-runner",
                region = values.pulumi.region or "nyc3",
                size = values.pulumi.size or "s-1vcpu-1gb",
                image = values.pulumi.image or "ubuntu-22-04-x64",
                environment = values.pulumi.environment or "dev",
                project = values.pulumi.project or "main"
            }
        else
            log.warn("‚ö†Ô∏è values table or pulumi section not found, using default values")
            pulumi_config = {
                dropletName = "sloth-runner",
                region = "nyc3",
                size = "s-1vcpu-1gb",
                image = "ubuntu-22-04-x64",
                environment = "dev",
                project = "main"
            }
        end
        
        -- Set configuration values (equivalent to pulumi config set commands)
        log.info("‚öôÔ∏è Setting Pulumi configuration...")
        for key, value in pairs(pulumi_config) do
            local config_success, config_msg = client:set_config(key, tostring(value))
            if config_success then
                log.info("  ‚úÖ " .. key .. ": " .. tostring(value))
            else
                log.error("  ‚ùå Failed to set " .. key .. ": " .. config_msg)
                return false, "Failed to set Pulumi configuration", {
                    pulumi_used = true,
                    login_success = true,
                    stack_success = true,
                    config_success = false,
                    error = config_msg
                }
            end
        end
        
        log.info("‚úÖ Pulumi configuration set successfully")
        
        -- Run Pulumi preview
        log.info("üîç Running Pulumi preview...")
        local preview_success, preview_output = client:preview({})
        
        if preview_success then
            log.info("üìä Pulumi Preview Output:")
            log.print(preview_output)
            
            -- Run Pulumi up
            log.info("üöÄ Running Pulumi up...")
            local up_success, up_output = client:up({ auto_approve = true })
            
            if up_success then
                log.info("üéâ Pulumi Up Output:")
                log.print(up_output)
                return true, "Pulumi deployment successful", {
                    pulumi_used = true,
                    login_success = true,
                    stack_success = true,
                    preview_success = true,
                    up_success = true,
                    infrastructure_deployed = true,
                    config_source = "values.yaml"
                }
            else
                log.error("‚ùå Pulumi up failed: " .. up_output)
                return false, "Pulumi up failed", {
                    pulumi_used = true,
                    login_success = true,
                    stack_success = true,
                    preview_success = true,
                    up_success = false,
                    error = up_output
                }
            end
        else
            log.error("‚ùå Pulumi preview failed: " .. preview_output)
            return false, "Pulumi preview failed", {
                pulumi_used = true,
                login_success = true,
                stack_success = true,
                preview_success = false,
                error = preview_output
            }
        end
    end)
    :timeout("15m")
    :on_success(function(this, params, output)
        if output.skipped then
            log.info("‚è≠Ô∏è === PULUMI SKIPPED ===")
            log.info("Reason: " .. (output.reason or "unknown"))
        else
            log.info("üéâ === PULUMI DEPLOYMENT SUCCESS ===")
            log.info("üìä Preview successful: " .. tostring(output.preview_success))
            if output.up_success ~= nil then
                log.info("üöÄ Up successful: " .. tostring(output.up_success))
                if output.infrastructure_deployed then
                    log.info("üèóÔ∏è Infrastructure deployed using: " .. (output.config_source or "unknown"))
                end
            end
        end
    end)
    :on_fail(function(this, params, output)
        log.error("üí• Pulumi deployment failed")
        if output and output.error then
            log.error("Error details: " .. output.error)
        end
        this.workdir:cleanup()
    end)
    :build()

workflow.define("deploy_git_pulumi")
    :description("Complete GitOps workflow: Clone repository and deploy infrastructure using Pulumi with values.yaml configuration")
    :version("1.0.0")
    :tasks({ clone_repo_task, deploy_pulumi_task })
    :config({
        timeout = "20m",
        max_parallel_tasks = 1
    })
    :on_complete(function(success, results)
        log.info("üéâ === GITOPS PULUMI WORKFLOW COMPLETED ===")
        
        if success and results and results.clone_digitalocean_repo then
            local clone_results = results.clone_digitalocean_repo
            
            log.info("üìä === FINAL RESULTS ===")
            log.info("  Repository: " .. (clone_results.repository_url or "unknown"))
            log.info("  Clone destination: " .. (clone_results.clone_destination or "unknown"))
            log.info("  Git module working: " .. tostring(clone_results.git_module_used))
            log.info("  Modern DSL used: " .. tostring(clone_results.modern_dsl_used))
            
            -- Check Pulumi results
            if results["deploy-pulumi"] then
                local pulumi_results = results["deploy-pulumi"]
                log.info("üîß === PULUMI RESULTS ===")
                log.info("  Pulumi used: " .. tostring(pulumi_results.pulumi_used))
                if pulumi_results.login_success ~= nil then
                    log.info("  Login success: " .. tostring(pulumi_results.login_success))
                end
                if pulumi_results.stack_success ~= nil then
                    log.info("  Stack success: " .. tostring(pulumi_results.stack_success))
                end
                if pulumi_results.preview_success ~= nil then
                    log.info("  Preview success: " .. tostring(pulumi_results.preview_success))
                end
                if pulumi_results.up_success ~= nil then
                    log.info("  Up success: " .. tostring(pulumi_results.up_success))
                    if pulumi_results.up_success then
                        log.info("üéØ === INFRASTRUCTURE DEPLOYED SUCCESSFULLY ===")
                        log.info("  Configuration source: " .. (pulumi_results.config_source or "unknown"))
                    end
                end
            end
        else
            log.warn("‚ùå GitOps Pulumi workflow failed")
        end
        
        return true
    end)