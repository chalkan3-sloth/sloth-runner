-- Multi-host execution test with workflow-based Modern DSL
-- Run: sloth-runner run -f test_multi_host_final.sloth --delegate-to lady-arch --delegate-to keite-guica

-- Define the workflow
workflow({
    name = "multi-host-test",
    description = "Test multi-host execution capability"
})

-- Task 1: Get system information
task({
    name = "system-info",
    description = "Gather system information from hosts",
    run = function()
        print("\n=== System Information ===")

        -- Get hostname
        local hostname = exec.run("hostname")
        if hostname.success then
            print("📍 Hostname: " .. hostname.output:gsub("\n", ""))
        end

        -- Get system info
        local uname = exec.run("uname -a")
        if uname.success then
            print("💻 System: " .. uname.output:gsub("\n", ""))
        end

        -- Get uptime
        local uptime = exec.run("uptime")
        if uptime.success then
            print("⏱️ Uptime: " .. uptime.output:gsub("\n", ""))
        end

        -- Get CPU cores
        local cpu = exec.run("nproc")
        if cpu.success then
            print("🔧 CPU Cores: " .. cpu.output:gsub("\n", ""))
        end

        -- Get memory
        local mem = exec.run("free -h | grep Mem | awk '{print $2}'")
        if mem.success then
            print("💾 Total Memory: " .. mem.output:gsub("\n", ""))
        end

        print("✅ System info collected\n")

        return {changed = false, message = "System info retrieved"}
    end
})

-- Task 2: Test file operations
task({
    name = "file-operations",
    description = "Test file creation and management",
    depends_on = {"system-info"},
    run = function()
        print("=== File Operations Test ===")

        -- Create test directory
        exec.run("mkdir -p /tmp/sloth-multi-host-test")

        -- Create test file with timestamp
        local timestamp = exec.run("date +%Y%m%d_%H%M%S")
        if timestamp.success then
            local ts = timestamp.output:gsub("\n", "")
            local filename = string.format("/tmp/sloth-multi-host-test/test_%s.txt", ts)

            -- Write to file
            exec.run(string.format("echo 'Multi-host test file' > %s", filename))
            exec.run(string.format("echo 'Created at: %s' >> %s", ts, filename))
            exec.run(string.format("echo 'Host: $(hostname)' >> %s", filename))
            exec.run(string.format("echo 'User: $(whoami)' >> %s", filename))

            print("📄 Created file: " .. filename)

            -- Read back the file
            local content = exec.run(string.format("cat %s", filename))
            if content.success then
                print("📝 File content:")
                print(content.output)
            end
        end

        print("✅ File operations completed\n")

        return {changed = true, message = "Files created"}
    end
})

-- Task 3: Network test
task({
    name = "network-test",
    description = "Test network connectivity",
    depends_on = {"file-operations"},
    run = function()
        print("=== Network Test ===")

        -- Get IP address
        local ip = exec.run("ip -4 addr show | grep inet | grep -v '127.0.0.1' | head -1 | awk '{print $2}'")
        if ip.success then
            print("🌐 IP Address: " .. ip.output:gsub("\n", ""))
        end

        -- Test connectivity
        local ping = exec.run("ping -c 1 8.8.8.8 > /dev/null 2>&1 && echo 'OK' || echo 'FAIL'")
        if ping.success then
            local status = ping.output:gsub("\n", "")
            if status == "OK" then
                print("📡 Internet: Connected")
            else
                print("📡 Internet: Not connected")
            end
        end

        -- List network interfaces
        local interfaces = exec.run("ip link show | grep '^[0-9]' | cut -d: -f2 | tr -d ' '")
        if interfaces.success then
            print("🔌 Network interfaces:")
            print(interfaces.output)
        end

        print("✅ Network test completed\n")

        return {changed = false, message = "Network tested"}
    end
})

-- Task 4: Cleanup
task({
    name = "cleanup",
    description = "Clean up test files",
    depends_on = {"network-test"},
    run = function()
        print("=== Cleanup ===")

        -- Remove test directory
        exec.run("rm -rf /tmp/sloth-multi-host-test")
        print("🧹 Removed test directory")

        print("✅ Cleanup completed\n")

        return {changed = true, message = "Cleanup done"}
    end
})

print("📊 Multi-Host Test Workflow Ready")
print("🚀 Run with: sloth-runner run -f test_multi_host_final.sloth --delegate-to host1 --delegate-to host2")
print("")