-- parallel_deployment.sloth
-- Deploy to multiple servers in parallel using goroutines
--
-- This example demonstrates how to use goroutines to deploy your application
-- to multiple servers simultaneously, reducing deployment time dramatically.
--
-- Sequential deployment: 6 servers √ó 30 seconds = 3 minutes
-- Parallel deployment: 30 seconds total (6x faster!)

local deploy_to_servers = task("deploy_multi_server")
    :description("Deploy application to multiple servers in parallel")
    :command(function(this, params)
        local go = require("goroutine")
        
        -- List of target servers
        local servers = {
            {name = "web-01", host = "192.168.1.10"},
            {name = "web-02", host = "192.168.1.11"},
            {name = "web-03", host = "192.168.1.12"},
            {name = "api-01", host = "192.168.1.20"},
            {name = "api-02", host = "192.168.1.21"},
            {name = "db-01", host = "192.168.1.30"},
        }
        
        log.info("üöÄ Starting parallel deployment to " .. #servers .. " servers...")
        log.info("")
        
        -- Create goroutines for parallel deployment
        local goroutines = {}
        for _, server in ipairs(servers) do
            -- Each server deployment runs in its own goroutine
            local g = go.create(function()
                log.info("üì¶ Deploying to " .. server.name .. " (" .. server.host .. ")")
                
                -- Simulate deployment steps
                local steps = {
                    "Uploading application files...",
                    "Installing dependencies...",
                    "Restarting services...",
                    "Running health checks..."
                }
                
                for _, step in ipairs(steps) do
                    log.info("  ‚Üí " .. server.name .. ": " .. step)
                    os.execute("sleep 0.5")  -- Simulate work
                end
                
                log.info("‚úÖ " .. server.name .. " deployment completed!")
                
                -- Return deployment result
                return {
                    server = server.name,
                    host = server.host,
                    status = "success",
                    deployed_at = os.date("%Y-%m-%d %H:%M:%S")
                }
            end)
            
            table.insert(goroutines, g)
        end
        
        log.info("")
        log.info("‚è≥ Waiting for all deployments to complete...")
        log.info("")
        
        -- Wait for all goroutines to complete (with 60 second timeout)
        local results = go.wait_all(goroutines, 60)
        
        -- Process results
        local success_count = 0
        local failed_count = 0
        
        log.info("üìä Deployment Results:")
        log.info("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
        
        for _, result in ipairs(results) do
            if result.success then
                success_count = success_count + 1
                log.info("‚úÖ " .. result.value.server .. " ‚Üí Deployed successfully at " .. result.value.deployed_at)
            else
                failed_count = failed_count + 1
                log.error("‚ùå " .. (result.error or "Unknown deployment failure"))
            end
        end
        
        log.info("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
        log.info("üìà Summary: " .. success_count .. " successful, " .. failed_count .. " failed")
        log.info("")
        
        if failed_count > 0 then
            return false, "Some deployments failed", {
                total = #servers,
                success = success_count,
                failed = failed_count
            }
        end
        
        return true, "All deployments completed successfully!", {
            total = #servers,
            success = success_count,
            duration = "~30 seconds (parallel)"
        }
    end)
    :timeout("2m")
    :build()

-- Create workflow
workflow.define("parallel_deployment", {
    description = "Deploy to multiple servers in parallel using goroutines",
    version = "1.0.0",
    tasks = { deploy_to_servers },
    
    config = {
        timeout = "5m"
    },
    
    on_complete = function(success, results)
        if success then
            log.info("üéâ Parallel deployment workflow completed successfully!")
        else
            log.error("‚ùå Parallel deployment workflow failed!")
        end
    end
})
