-- Example: Idempotent Web Server Setup
-- This example shows how to use state management for idempotent operations

local install_nginx = task("install-nginx")
	:description("Install nginx with state tracking")
	:command(function(this, params)
		local pkg_key = "package:installed:nginx"

		-- Check if nginx is already installed (tracked)
		if state.exists(pkg_key) then
			print("✓ nginx already installed (skipping)")
			return true, "nginx already installed (skipped)"
		end

		-- Install nginx
		print("⚙ Installing nginx...")
		pkg.install({
			name = "nginx",
			delegate_to = values.host or "localhost"
		})

		-- Track installation
		state.set(pkg_key, tostring(os.time()))
		print("✓ nginx installed successfully")

		return true, "nginx installed successfully"
	end)
	:delegate_to(values.host or "localhost")
	:build()

local configure_nginx = task("configure-nginx")
	:description("Configure nginx with content-aware state tracking")
	:command(function(this, params)
		local template_src = "./templates/nginx.conf.tmpl"
		local config_file = "/etc/nginx/nginx.conf"
		local state_key = "config:nginx:main"

		-- Read and render template
		local file_handle = io.open(template_src, "r")
		if not file_handle then
			error("Template file not found: " .. template_src)
		end

		local content = file_handle:read("*all")
		file_handle:close()

		-- Simple variable substitution
		content = content:gsub("{{worker_processes}}", values.worker_processes or "auto")
		content = content:gsub("{{worker_connections}}", values.worker_connections or "1024")

		-- Calculate checksum of new content
		local new_hash = crypto.sha256(content)

		-- Get stored hash
		local old_hash = state.get(state_key)

		if old_hash == new_hash then
			print("✓ nginx configuration unchanged (skipping)")
			return true, "nginx configuration unchanged (skipped)"
		end

		-- Write configuration file
		print("⚙ Updating nginx configuration...")

		-- Save to temporary file first
		local tmp_file = "/tmp/nginx.conf.new"
		local tmp_handle = io.open(tmp_file, "w")
		tmp_handle:write(content)
		tmp_handle:close()

		-- Copy to destination
		file.copy({
			src = tmp_file,
			dest = config_file,
			mode = "0644",
			owner = "root",
			group = "root",
			delegate_to = values.host or "localhost"
		})

		-- Update state
		state.set(state_key, new_hash)
		print("✓ nginx configuration updated")

		return true, "nginx configuration updated (hash: " .. new_hash .. ")"
	end)
	:delegate_to(values.host or "localhost")
	:build()

local start_nginx = task("start-nginx")
	:description("Start nginx service with state tracking")
	:command(function(this, params)
		local service_key = "service:started:nginx"

		-- Check if service is tracked as started
		if not state.exists(service_key) then
			print("⚙ Starting nginx service...")

			systemd.start({
				name = "nginx",
				delegate_to = values.host or "localhost"
			})

			state.set(service_key, tostring(os.time()))
			print("✓ nginx service started")

			return true, "nginx service started"
		else
			print("✓ nginx service already running")
			return true, "nginx service already running (skipped)"
		end
	end)
	:delegate_to(values.host or "localhost")
	:build()

local enable_nginx = task("enable-nginx")
	:description("Enable nginx service on boot with state tracking")
	:command(function(this, params)
		local enable_key = "service:enabled:nginx"

		if not state.exists(enable_key) then
			print("⚙ Enabling nginx service...")

			systemd.enable({
				name = "nginx",
				delegate_to = values.host or "localhost"
			})

			state.set(enable_key, tostring(os.time()))
			print("✓ nginx service enabled")

			return true, "nginx service enabled"
		else
			print("✓ nginx service already enabled")
			return true, "nginx service already enabled (skipped)"
		end
	end)
	:delegate_to(values.host or "localhost")
	:build()

local summary = task("summary")
	:description("Display deployment summary with state information")
	:command(function(this, params)
		print("\n=== Deployment Summary ===")

		-- Show state statistics
		local stats = {
			{key = "package:installed:nginx", label = "nginx package"},
			{key = "config:nginx:main", label = "nginx config"},
			{key = "service:started:nginx", label = "nginx service"},
			{key = "service:enabled:nginx", label = "nginx enabled"}
		}

		print("\nTracked Resources:")
		for _, item in ipairs(stats) do
			local exists = state.exists(item.key)
			if exists then
				local value = state.get(item.key)
				print(string.format("  ✓ %s: tracked (timestamp: %s)", item.label, value))
			else
				print(string.format("  ✗ %s: not tracked", item.label))
			end
		end

		print("\n=== End Summary ===\n")
		return true, "Deployment summary displayed"
	end)
	:build()
