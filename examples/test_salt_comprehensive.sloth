-- Test do M√≥dulo Salt Comprehensive

print("üßÇ Testando o M√≥dulo Salt Comprehensive")
print("=" .. string.rep("=", 50))

-- Carrega o m√≥dulo salt
local salt = require("salt")

-- Verifica se o m√≥dulo foi carregado corretamente
if not salt then
    print("‚ùå Erro: M√≥dulo salt n√£o foi carregado")
    return false
end

print("‚úÖ M√≥dulo salt carregado com sucesso")

-- Testa algumas fun√ß√µes b√°sicas
print("\nüîç Testando fun√ß√µes b√°sicas:")

-- Test 1: Ping function
print("1. Testando salt.ping...")
local ping_result = salt.ping("*")
if ping_result then
    print("   ‚úÖ Fun√ß√£o salt.ping() dispon√≠vel")
    print("   üìä Success:", ping_result.success)
    if ping_result.error then
        print("   ‚ö†Ô∏è Expected error (no salt installation):", ping_result.error)
    end
else
    print("   ‚ùå Fun√ß√£o salt.ping() n√£o dispon√≠vel")
end

-- Test 2: Version function  
print("\n2. Testando salt.version...")
local version_result = salt.version("*")
if version_result then
    print("   ‚úÖ Fun√ß√£o salt.version() dispon√≠vel")
    print("   üìä Success:", version_result.success)
else
    print("   ‚ùå Fun√ß√£o salt.version() n√£o dispon√≠vel")
end

-- Test 3: Key management
print("\n3. Testando salt.key_list...")
local keys_result = salt.key_list("all")
if keys_result then
    print("   ‚úÖ Fun√ß√£o salt.key_list() dispon√≠vel")
    print("   üìä Success:", keys_result.success)
else
    print("   ‚ùå Fun√ß√£o salt.key_list() n√£o dispon√≠vel")
end

-- Test 4: State management
print("\n4. Testando salt.state_apply...")
local state_result = salt.state_apply("*", "test", {test = true})
if state_result then
    print("   ‚úÖ Fun√ß√£o salt.state_apply() dispon√≠vel")
    print("   üìä Success:", state_result.success)
else
    print("   ‚ùå Fun√ß√£o salt.state_apply() n√£o dispon√≠vel")
end

-- Test 5: Package management
print("\n5. Testando salt.pkg_list...")
local pkg_result = salt.pkg_list("*")
if pkg_result then
    print("   ‚úÖ Fun√ß√£o salt.pkg_list() dispon√≠vel")
    print("   üìä Success:", pkg_result.success)
else
    print("   ‚ùå Fun√ß√£o salt.pkg_list() n√£o dispon√≠vel")
end

-- Test 6: Docker integration
print("\n6. Testando salt.docker_ps...")
local docker_result = salt.docker_ps("*")
if docker_result then
    print("   ‚úÖ Fun√ß√£o salt.docker_ps() dispon√≠vel")
    print("   üìä Success:", docker_result.success)
else
    print("   ‚ùå Fun√ß√£o salt.docker_ps() n√£o dispon√≠vel")
end

-- Test 7: API client
print("\n7. Testando salt.api_client...")
local api_client = salt.api_client("http://localhost:8000", "admin", "password")
if api_client then
    print("   ‚úÖ Fun√ß√£o salt.api_client() dispon√≠vel")
    print("   üìä API client criado")
    
    -- Test API login
    if api_client.login then
        local login_result = api_client:login()
        print("   üìä Login method available:", login_result ~= nil)
    end
else
    print("   ‚ùå Fun√ß√£o salt.api_client() n√£o dispon√≠vel")
end

-- Test 8: Advanced features
print("\n8. Testando funcionalidades avan√ßadas...")

local advanced_functions = {
    "beacon_list",
    "schedule_list", 
    "mine_get",
    "orchestrate",
    "git_clone",
    "mysql_query",
    "performance_profile"
}

for _, func_name in ipairs(advanced_functions) do
    if salt[func_name] then
        print("   ‚úÖ " .. func_name .. "() dispon√≠vel")
    else
        print("   ‚ùå " .. func_name .. "() n√£o dispon√≠vel")
    end
end

-- Summary
print("\nüìä RESUMO DO TESTE:")
print("=" .. string.rep("=", 50))

local total_functions = 0
local available_functions = 0

-- Count available functions
for func_name, func in pairs(salt) do
    if type(func) == "function" then
        total_functions = total_functions + 1
        available_functions = available_functions + 1
    end
end

print("üìà Fun√ß√µes dispon√≠veis:", available_functions)
print("üéØ M√≥dulo funcional:", available_functions > 0 and "‚úÖ SIM" or "‚ùå N√ÉO")

if available_functions > 100 then
    print("üèÜ EXCELENTE: M√≥dulo Salt comprehensive completamente funcional!")
    print("üöÄ Pronto para uso empresarial")
elseif available_functions > 50 then
    print("üëç BOM: M√≥dulo Salt com funcionalidades essenciais")
elseif available_functions > 10 then
    print("‚ö†Ô∏è B√ÅSICO: M√≥dulo Salt com funcionalidades limitadas")
else
    print("‚ùå PROBLEMA: M√≥dulo Salt com funcionalidades insuficientes")
end

print("\n‚ú® Teste do m√≥dulo Salt comprehensive conclu√≠do!")

return true