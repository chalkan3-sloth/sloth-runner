-- Modern DSL: [FILE_DESCRIPTION]
-- Migrated from legacy TaskDefinitions format
-- This example now uses the modern fluent API alongside legacy compatibility

-- üöÄ API Integration - Integrando com APIs REST
-- Este exemplo demonstra integra√ß√£o completa com uma API REST incluindo autentica√ß√£o


-- TODO: Implement modern DSL version here
-- Example modern DSL structure:
--
-- local example_task = task("task_name")
--     :description("Task description with modern DSL")
--     :command(function(params, deps)
--         -- Enhanced task logic
--         return true, "Task completed", { result = "success" }
--     end)
--     :timeout("30s")
--     :build()
--
-- workflow.define("workflow_name", {
--     description = "Workflow description - Modern DSL",
--     version = "2.0.0",
--     tasks = { example_task },
--     config = { timeout = "10m" }
-- })

-- Maintain backward compatibility with legacy format
TaskDefinitions = {
    api_integration = {
        description = "Integra√ß√£o completa com API REST usando HTTP avan√ßado",
        
        tasks = {
            {
                name = "setup_api_config",
                description = "Configura par√¢metros da API",
                command = function(params)
                    log.info("‚öôÔ∏è  Configurando par√¢metros da API...")
                    
                    -- API p√∫blica para demonstra√ß√£o: JSONPlaceholder
                    local api_config = {
                        base_url = "https://jsonplaceholder.typicode.com",
                        timeout = 10,
                        retry_count = 3,
                        retry_delay = 2
                    }
                    
                    -- Salvar configura√ß√£o no estado
                    state.set("api_config", api_config)
                    
                    log.info("‚úÖ Configura√ß√£o da API salva:")
                    log.info("  Base URL: " .. api_config.base_url)
                    log.info("  Timeout: " .. api_config.timeout .. "s")
                    log.info("  Max Retries: " .. api_config.retry_count)
                    
                    return true, "API configurada"
                end
            },
            
            {
                name = "fetch_users_list",
                description = "Busca lista de usu√°rios da API",
                depends_on = "setup_api_config",
                command = function()
                    log.info("üë• Buscando lista de usu√°rios...")
                    
                    local http = require("http")
                    local config = state.get("api_config")
                    
                    local result = http.get({
                        url = config.base_url .. "/users",
                        headers = {
                            ["Accept"] = "application/json",
                            ["User-Agent"] = "Sloth-Runner-API-Demo/1.0"
                        },
                        timeout = config.timeout,
                        max_retries = config.retry_count,
                        retry_delay = config.retry_delay
                    })
                    
                    if result.success then
                        local users = result.data.json
                        log.info("‚úÖ " .. #users .. " usu√°rios encontrados")
                        
                        -- Processar e salvar dados dos usu√°rios
                        local user_summary = {}
                        for i, user in ipairs(users) do
                            table.insert(user_summary, {
                                id = user.id,
                                name = user.name,
                                email = user.email,
                                company = user.company.name
                            })
                            
                            -- Mostrar apenas os primeiros 3 para n√£o sobrecarregar o log
                            if i <= 3 then
                                log.info("üë§ " .. user.name .. " (" .. user.email .. ") - " .. user.company.name)
                            end
                        end
                        
                        if #users > 3 then
                            log.info("   ... e mais " .. (#users - 3) .. " usu√°rios")
                        end
                        
                        state.set("users_data", user_summary)
                        
                    else
                        log.error("‚ùå Erro ao buscar usu√°rios: " .. result.error)
                        return false, "Falha ao buscar usu√°rios"
                    end
                    
                    return true, "Lista de usu√°rios obtida"
                end
            },
            
            {
                name = "fetch_posts_for_user",
                description = "Busca posts de um usu√°rio espec√≠fico",
                depends_on = "fetch_users_list", 
                command = function()
                    log.info("üìù Buscando posts de usu√°rio espec√≠fico...")
                    
                    local http = require("http")
                    local config = state.get("api_config")
                    local users = state.get("users_data")
                    
                    -- Pegar o primeiro usu√°rio da lista
                    local target_user = users[1]
                    log.info("üéØ Buscando posts do usu√°rio: " .. target_user.name)
                    
                    local result = http.get({
                        url = config.base_url .. "/users/" .. target_user.id .. "/posts",
                        headers = {
                            ["Accept"] = "application/json",
                            ["User-Agent"] = "Sloth-Runner-API-Demo/1.0"
                        },
                        timeout = config.timeout
                    })
                    
                    if result.success then
                        local posts = result.data.json
                        log.info("‚úÖ " .. #posts .. " posts encontrados")
                        
                        -- Mostrar primeiros posts
                        for i, post in ipairs(posts) do
                            if i <= 2 then
                                log.info("üìñ Post " .. post.id .. ": " .. post.title)
                            end
                        end
                        
                        if #posts > 2 then
                            log.info("   ... e mais " .. (#posts - 2) .. " posts")
                        end
                        
                        -- Salvar posts do usu√°rio
                        state.set("user_posts", {
                            user_id = target_user.id,
                            user_name = target_user.name,
                            posts = posts
                        })
                        
                    else
                        log.error("‚ùå Erro ao buscar posts: " .. result.error)
                        return false, "Falha ao buscar posts"
                    end
                    
                    return true, "Posts do usu√°rio obtidos"
                end
            },
            
            {
                name = "create_new_post",
                description = "Cria um novo post via API",
                depends_on = "fetch_posts_for_user",
                command = function()
                    log.info("‚úçÔ∏è  Criando novo post...")
                    
                    local http = require("http")
                    local config = state.get("api_config")
                    local user_posts = state.get("user_posts")
                    
                    local new_post = {
                        title = "Post criado pelo Sloth Runner",
                        body = "Este post foi criado automaticamente como demonstra√ß√£o da integra√ß√£o com API REST.",
                        userId = user_posts.user_id
                    }
                    
                    log.info("üì§ Enviando dados: " .. new_post.title)
                    
                    local result = http.post({
                        url = config.base_url .. "/posts",
                        json = new_post,
                        headers = {
                            ["Accept"] = "application/json",
                            ["User-Agent"] = "Sloth-Runner-API-Demo/1.0"
                        },
                        timeout = config.timeout
                    })
                    
                    if result.success then
                        local created_post = result.data.json
                        log.info("‚úÖ Post criado com sucesso!")
                        log.info("üÜî ID do novo post: " .. created_post.id)
                        log.info("üìã T√≠tulo: " .. created_post.title)
                        
                        state.set("created_post", created_post)
                        
                    else
                        log.error("‚ùå Erro ao criar post: " .. result.error)
                        return false, "Falha ao criar post"
                    end
                    
                    return true, "Novo post criado"
                end
            },
            
            {
                name = "validate_and_update_post",
                description = "Valida dados e atualiza o post criado",
                depends_on = "create_new_post",
                command = function()
                    log.info("üîç Validando e atualizando post...")
                    
                    local http = require("http")
                    local validate = require("validate")
                    local config = state.get("api_config")
                    local created_post = state.get("created_post")
                    
                    -- Validar dados do post
                    local post_schema = {
                        title = { required = "true", type = "string" },
                        body = { required = "true", type = "string" },
                        userId = { required = "true", type = "number" }
                    }
                    
                    local validation = validate.schema(created_post, post_schema)
                    if validation.valid then
                        log.info("‚úÖ Dados do post v√°lidos")
                    else
                        log.error("‚ùå Dados inv√°lidos: " .. table.concat(validation.errors, ", "))
                        return false, "Valida√ß√£o de dados falhou"
                    end
                    
                    -- Atualizar o post
                    local updated_data = {
                        id = created_post.id,
                        title = created_post.title .. " [ATUALIZADO]",
                        body = created_post.body .. "\n\nPost atualizado em: " .. os.date("%Y-%m-%d %H:%M:%S"),
                        userId = created_post.userId
                    }
                    
                    local result = http.put({
                        url = config.base_url .. "/posts/" .. created_post.id,
                        json = updated_data,
                        headers = {
                            ["Accept"] = "application/json",
                            ["User-Agent"] = "Sloth-Runner-API-Demo/1.0"
                        }
                    })
                    
                    if result.success then
                        local updated_post = result.data.json
                        log.info("‚úÖ Post atualizado com sucesso!")
                        log.info("üìù Novo t√≠tulo: " .. updated_post.title)
                    else
                        log.error("‚ùå Erro ao atualizar post: " .. result.error)
                        return false, "Falha ao atualizar post"
                    end
                    
                    return true, "Post validado e atualizado"
                end
            },
            
            {
                name = "generate_api_report",
                description = "Gera relat√≥rio das opera√ß√µes realizadas",
                depends_on = "validate_and_update_post",
                command = function()
                    log.info("üìä Gerando relat√≥rio das opera√ß√µes...")
                    
                    local users = state.get("users_data")
                    local user_posts = state.get("user_posts")
                    local created_post = state.get("created_post")
                    
                    local report = {
                        timestamp = os.date("%Y-%m-%d %H:%M:%S"),
                        summary = {
                            users_fetched = #users,
                            posts_analyzed = #user_posts.posts,
                            posts_created = 1,
                            operations_successful = 6
                        },
                        details = {
                            target_user = user_posts.user_name,
                            created_post_id = created_post.id,
                            api_base_url = state.get("api_config").base_url
                        }
                    }
                    
                    -- Salvar relat√≥rio no estado
                    state.set("api_integration_report", report)
                    
                    -- Criar arquivo de relat√≥rio
                    local report_content = string.format([[
üöÄ Relat√≥rio de Integra√ß√£o com API
================================

Data/Hora: %s

üìä Resumo das Opera√ß√µes:
- Usu√°rios buscados: %d
- Posts analisados: %d  
- Posts criados: %d
- Opera√ß√µes bem-sucedidas: %d

üéØ Detalhes:
- Usu√°rio alvo: %s
- ID do post criado: %d
- API utilizada: %s

‚úÖ Todas as opera√ß√µes foram executadas com sucesso!
]], 
                        report.timestamp,
                        report.summary.users_fetched,
                        report.summary.posts_analyzed, 
                        report.summary.posts_created,
                        report.summary.operations_successful,
                        report.details.target_user,
                        report.details.created_post_id,
                        report.details.api_base_url
                    )
                    
                    fs.write("api_integration_report.md", report_content)
                    
                    log.info("‚úÖ Relat√≥rio gerado:")
                    log.info("  üìÑ Arquivo: api_integration_report.md")
                    log.info("  üë• " .. report.summary.users_fetched .. " usu√°rios processados")
                    log.info("  üìù " .. report.summary.posts_analyzed .. " posts analisados")
                    log.info("  ‚ú® " .. report.summary.posts_created .. " post criado")
                    
                    return true, "Relat√≥rio gerado com sucesso"
                end
            }
        }
    }
}