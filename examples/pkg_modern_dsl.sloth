-- Exemplo DSL Moderno - Gerenciamento de Pacotes
-- Demonstra o uso do m√≥dulo pkg com DSL moderno

local update_packages = task("update_packages")
    :description("Atualiza lista de pacotes do sistema")
    :command(function(this, params)
        log.info("üîÑ Atualizando cache de pacotes...")
        
        local success, output = pkg.update()
        
        if success then
            log.info("‚úÖ Cache atualizado com sucesso!")
            return true, "Cache atualizado"
        else
            log.error("‚ùå Erro: " .. output)
            return false, "Falha"
        end
    end)
    :timeout("120s")
    :build()

local install_dev_tools = task("install_dev_tools")
    :description("Instala ferramentas de desenvolvimento")
    :command(function(this, params)
        log.info("üõ†Ô∏è  Instalando ferramentas de desenvolvimento...")
        
        local tools = {"git", "curl", "wget", "vim", "htop"}
        local success, output = pkg.install(tools)
        
        if success then
            log.info("‚úÖ Ferramentas instaladas!")
            for _, tool in ipairs(tools) do
                log.info("  ‚úì " .. tool)
            end
            return true, "Instalado"
        else
            log.warn("‚ö†Ô∏è  " .. output)
            return true, "OK (podem j√° existir)"
        end
    end)
    :depends_on({"update_packages"})
    :timeout("300s")
    :build()

local search_python = task("search_python")
    :description("Busca pacotes Python dispon√≠veis")
    :command(function(this, params)
        log.info("üîç Buscando pacotes Python...")
        
        local success, output = pkg.search("python3")
        
        if success then
            log.info("‚úÖ Busca conclu√≠da!")
            
            local count = 0
            for line in output:gmatch("[^\r\n]+") do
                count = count + 1
                if count <= 10 then
                    log.info("  " .. line)
                end
            end
            
            if count > 10 then
                log.info("  ... e mais " .. (count - 10) .. " resultados")
            end
            
            return true, count .. " resultados"
        else
            log.error("‚ùå " .. output)
            return false, "Erro na busca"
        end
    end)
    :timeout("60s")
    :build()

local check_package_info = task("check_package_info")
    :description("Verifica informa√ß√µes de pacotes instalados")
    :command(function(this, params)
        log.info("‚ÑπÔ∏è  Verificando informa√ß√µes de pacotes...")
        
        local packages_to_check = {"git", "curl"}
        
        for _, pkg_name in ipairs(packages_to_check) do
            log.info("\nüì¶ Informa√ß√µes de " .. pkg_name .. ":")
            local success, output = pkg.info(pkg_name)
            
            if success then
                -- Mostra primeiras 8 linhas
                local count = 0
                for line in output:gmatch("[^\r\n]+") do
                    if count < 8 then
                        log.info("  " .. line)
                        count = count + 1
                    end
                end
            else
                log.warn("  ‚ö†Ô∏è  Pacote n√£o encontrado ou n√£o instalado")
            end
        end
        
        return true, "Verifica√ß√£o conclu√≠da"
    end)
    :depends_on({"install_dev_tools"})
    :timeout("60s")
    :build()

local cleanup_packages = task("cleanup_packages")
    :description("Remove pacotes desnecess√°rios (exemplo)")
    :command(function(this, params)
        log.info("üßπ Limpando pacotes desnecess√°rios...")
        
        -- Exemplo: remove um pacote de teste (descomente se quiser testar)
        -- local success, output = pkg.remove("htop")
        
        -- Por enquanto, apenas simula
        log.info("‚ÑπÔ∏è  Limpeza desativada neste exemplo")
        log.info("üí° Para remover pacotes, use: pkg.remove('nome_pacote')")
        log.info("üí° Ou m√∫ltiplos: pkg.remove({'pkg1', 'pkg2'})")
        
        return true, "OK"
    end)
    :timeout("60s")
    :build()

local list_installed = task("list_installed")
    :description("Lista pacotes instalados no sistema")
    :command(function(this, params)
        log.info("üìã Listando pacotes instalados...")
        
        local success, packages = pkg.list()
        
        if success then
            if type(packages) == "table" then
                local count = 0
                local sample = {}
                
                -- Conta e pega amostra
                for k, v in pairs(packages) do
                    count = count + 1
                    if count <= 10 then
                        table.insert(sample, v)
                    end
                end
                
                log.info("‚úÖ Total instalado: " .. count .. " pacotes")
                log.info("\nüìã Primeiros 10 pacotes:")
                for _, pkg in ipairs(sample) do
                    log.info("  ‚Ä¢ " .. pkg)
                end
                
                if count > 10 then
                    log.info("  ... e mais " .. (count - 10) .. " pacotes")
                end
                
                return true, count .. " pacotes"
            else
                log.info("‚úÖ Listagem realizada")
                return true, "OK"
            end
        else
            log.error("‚ùå Falha ao listar")
            return false, "Erro"
        end
    end)
    :timeout("60s")
    :build()

workflow.define("setup_development_environment")
    :description("Configura ambiente de desenvolvimento com gerenciamento de pacotes")
    :version("1.0.0")
    :tasks({
        update_packages,
        install_dev_tools,
        search_python,
        check_package_info,
        list_installed,
        cleanup_packages
    })
    :config({
        timeout = "15m",
        max_parallel_tasks = 1
    })
    :on_complete(function(success, results)
        if success then
            log.info("\nüéâ Ambiente de desenvolvimento configurado com sucesso!")
            log.info("‚úÖ Todos os pacotes instalados e verificados")
        else
            log.error("\n‚ùå Falha na configura√ß√£o do ambiente")
        end
        return true
    end)
