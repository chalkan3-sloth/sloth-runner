-- Deploy Git + Terraform Example
-- This example demonstrates how to clone a Git repository and deploy infrastructure using Terraform
-- The Terraform variables are loaded from values.yaml for better configuration management

local clone_repo_task = task("clone_digitalocean_repo")
    :description("Clone Git repository with Terraform infrastructure")
    :workdir("/tmp/digitalocean-droplets")
    :command(function(this, params)
        local workdir_ensured = this.workdir.ensure()
        if not workdir_ensured then 
          return false, "Workdir problem"
        end 

        local git = require("git")
        
        log.info("üì° Starting git.clone()...")
        
        local git_repository = git.clone(
            "https://github.com/chalkan3/terraform-do-droplet",
            this.workdir.get()
        )
        
        log.info("‚úÖ git.clone() executed!")
        log.info("üìä Repo object: " .. tostring(git_repository))
            
        return true, "Git clone successful using modern DSL", { 
            git_module_used = true,
            modern_dsl_used = true,
            repository_url = "https://github.com/chalkan3/terraform-do-droplet",
            clone_destination = this.workdir.get()
        }
       
    end)
    :timeout("5m")
    :on_success(function(this, params, output)
        log.info("‚úÖ === CLONE SUCCESS ===")
    end)
    :on_fail(function(this, params, output)
        this.workdir:cleanup()
    end)
    :build()

local deploy_terraform_task = task("deploy-terraform")
    :description("Deploy infrastructure using Terraform with values.yaml configuration")
    :workdir("/tmp/digitalocean-droplets/environments/dev/")
    :command(function(this, params)
        log.info("üîß Starting Terraform deployment...")
        
        -- Check if terraform files exist using io.open
        local workdir = this.workdir:get()
        log.info("üìÇ Checking for Terraform files in: " .. workdir)
        
        -- Try to open main.tf to see if this is a Terraform project
        local main_tf = io.open(workdir .. "/main.tf", "r")
        local has_terraform_files = main_tf ~= nil
        if main_tf then 
            main_tf:close() 
        end
        
        if not has_terraform_files then
            log.warn("‚ö†Ô∏è No main.tf file found in repository")
            log.info("üìÇ Repository appears to be a different type of project")
            return true, "No Terraform files found - skipping Terraform operations", {
                terraform_used = false,
                plan_success = false,
                skipped = true,
                reason = "no_terraform_files"
            }
        end
        
        log.info("üìÅ Found Terraform configuration files")
        
        local terraform = require("terraform")
        
        -- Create terraform client - this automatically runs terraform init
        log.info("üîÑ Running terraform init...")
        local client = terraform.init(workdir)
        
        -- Check if init was successful
        if client.error then
            log.error("‚ùå Terraform init failed: " .. client.error)
            return false, "Terraform init failed", {
                terraform_used = true,
                init_success = false,
                error = client.error
            }
        end
        
        log.info("‚úÖ Terraform init successful")
        
        -- Load configuration from values.yaml using Values table
        -- Ensure Values table exists and has terraform section
        local terraform_config = {}
        
        if Values and Values.terraform then
            log.info("üìã Loading Terraform configuration from values.yaml")
            terraform_config = {
                do_token = Values.terraform.do_token or "",
                droplet_name = Values.terraform.droplet_name or "sloth-runner-demo",
                droplet_region = Values.terraform.droplet_region or "nyc3",
                droplet_size = Values.terraform.droplet_size or "s-1vcpu-1gb",
                environment = Values.terraform.environment or "dev",
                project_name = Values.terraform.project_name or "sloth-demo",
                enable_backups = Values.terraform.enable_backups or false,
                droplet_tags = Values.terraform.droplet_tags or { "sloth-runner", "demo", "terraform" }
            }
        else
            log.warn("‚ö†Ô∏è Values table or terraform section not found, using default values")
            terraform_config = {
                do_token = "",
                droplet_name = "sloth-runner-demo",
                droplet_region = "nyc3",
                droplet_size = "s-1vcpu-1gb",
                environment = "dev",
                project_name = "sloth-demo",
                enable_backups = false,
                droplet_tags = { "sloth-runner", "demo", "terraform" }
            }
        end
        
        log.info("üìã Using Terraform configuration from values.yaml:")
        log.info("  Droplet Name: " .. terraform_config.droplet_name)
        log.info("  Region: " .. terraform_config.droplet_region)
        log.info("  Size: " .. terraform_config.droplet_size)
        log.info("  Environment: " .. terraform_config.environment)
        
        local tfvars = client:create_tfvars("terraform.tfvars", terraform_config)
        
        log.info("üìÑ Created tfvars file: " .. tfvars.filename)
        
        local plan_result = client:plan({
            var_file = tfvars.filename
        })
        
        if plan_result.success then
            log.info("üìä Terraform Plan Output:")
            log.print(plan_result.output)
            
            -- Execute terraform apply after successful plan
            log.info("üöÄ Running terraform apply...")
            local apply_result = client:apply({
                var_file = tfvars.filename,
                auto_approve = true  -- Auto-approve for automation
            })
            
            if apply_result.success then
                log.info("üéâ Terraform Apply Output:")
                log.print(apply_result.output)
                return true, "Terraform plan and apply successful", {
                    terraform_used = true,
                    init_success = true,
                    plan_success = true,
                    apply_success = true,
                    infrastructure_deployed = true,
                    config_source = "values.yaml"
                }
            else
                log.error("‚ùå Terraform apply failed: " .. apply_result.error)
                return false, "Terraform apply failed", {
                    terraform_used = true,
                    init_success = true,
                    plan_success = true,
                    apply_success = false,
                    error = apply_result.error
                }
            end
        else
            log.error("‚ùå Terraform plan failed: " .. plan_result.error)
            return false, "Terraform plan failed", {
                terraform_used = true,
                init_success = true,
                plan_success = false,
                error = plan_result.error
            }
        end
    end)
    :timeout("15m")
    :on_success(function(this, params, output)
        if output.skipped then
            log.info("‚è≠Ô∏è === TERRAFORM SKIPPED ===")
            log.info("Reason: " .. (output.reason or "unknown"))
        else
            log.info("üéâ === TERRAFORM DEPLOYMENT SUCCESS ===")
            log.info("üìä Plan successful: " .. tostring(output.plan_success))
            if output.apply_success ~= nil then
                log.info("üöÄ Apply successful: " .. tostring(output.apply_success))
                if output.infrastructure_deployed then
                    log.info("üèóÔ∏è Infrastructure deployed using: " .. (output.config_source or "unknown"))
                end
            end
        end
    end)
    :on_fail(function(this, params, output)
        log.error("üí• Terraform deployment failed")
        if output and output.error then
            log.error("Error details: " .. output.error)
        end
        this.workdir:cleanup()
    end)
    :build()

workflow.define("deploy_git_terraform")
    :description("Complete GitOps workflow: Clone repository and deploy infrastructure using Terraform with values.yaml configuration")
    :version("1.0.0")
    :tasks({ clone_repo_task, deploy_terraform_task })
    :config({
        timeout = "20m",
        max_parallel_tasks = 1
    })
    :on_complete(function(success, results)
        log.info("üéâ === GITOPS WORKFLOW COMPLETED ===")
        
        if success and results and results.clone_digitalocean_repo then
            local clone_results = results.clone_digitalocean_repo
            
            log.info("üìä === FINAL RESULTS ===")
            log.info("  Repository: " .. (clone_results.repository_url or "unknown"))
            log.info("  Clone destination: " .. (clone_results.clone_destination or "unknown"))
            log.info("  Git module working: " .. tostring(clone_results.git_module_used))
            log.info("  Modern DSL used: " .. tostring(clone_results.modern_dsl_used))
            
            -- Check terraform results
            if results["deploy-terraform"] then
                local terraform_results = results["deploy-terraform"]
                log.info("üîß === TERRAFORM RESULTS ===")
                log.info("  Terraform used: " .. tostring(terraform_results.terraform_used))
                if terraform_results.init_success ~= nil then
                    log.info("  Init success: " .. tostring(terraform_results.init_success))
                end
                if terraform_results.plan_success ~= nil then
                    log.info("  Plan success: " .. tostring(terraform_results.plan_success))
                end
                if terraform_results.apply_success ~= nil then
                    log.info("  Apply success: " .. tostring(terraform_results.apply_success))
                    if terraform_results.apply_success then
                        log.info("üéØ === INFRASTRUCTURE DEPLOYED SUCCESSFULLY ===")
                        log.info("  Configuration source: " .. (terraform_results.config_source or "unknown"))
                    end
                end
            end
        else
            log.warn("‚ùå GitOps workflow failed")
        end
        
        return true
    end)