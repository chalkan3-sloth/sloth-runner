TaskDefinitions = {
    dynamic_workflow = {
        description = "A dynamic workflow generated by Go template for {{.Env}}",
        tasks = {
            {
                name = "setup_environment",
                description = "Sets up the execution environment",
                command = function(params)
                    print("Lua: Setting up environment...")
                    return true, "echo 'Environment setup'", { status = "ready" }
                end,
                async = false,
            },

            {{if .IsProduction}}
            {
                name = "deploy_to_production",
                description = "Deploys the application to production",
                depends_on = "setup_environment",
                command = function(params, input_from_dependency)
                    print("Lua: Deploying to production...")
                    -- Simulate a potential failure in production deployment
                    if math.random() < 0.5 then -- 50% chance of failure
                        return false, "Deployment to production failed randomly"
                    end
                    return true, "echo 'Deployed'", { deployment_status = "success" }
                end,
                async = false,
            },
            {{end}}

            {{range $i, $e := .Shards}}
            {
                name = "process_shard_{{$i}}",
                description = "Processes data shard {{$i}}",
                depends_on = "setup_environment",
                command = function(params, input_from_dependency)
                    print("Lua: Processing shard {{$i}}...")
                    -- Simulate a potential failure for even shards
                    if {{$i}} % 2 == 0 then
                        return false, "Processing of even shard {{$i}} failed"
                    end
                    return true, "echo 'Shard {{$i}} processed'", { shard_id = {{$i}}, processed_records = 1000 }
                end,
                async = true,
            },
            {{end}}

            {
                name = "cleanup",
                description = "Cleans up resources after all shards are processed",
                depends_on = { {{range $i, $e := .Shards}}{{if $i}}, {{end}}"process_shard_{{$i}}"{{end}} },
                command = function(params, input_from_dependency)
                    print("Lua: Cleaning up...")
                    return true, "echo 'Cleanup complete'", { cleanup_status = "done" }
                end,
                async = false,
            }
        }
    }
}