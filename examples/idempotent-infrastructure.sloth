-- Idempotent Infrastructure Workflow Example
-- This workflow demonstrates stack-based idempotency

workflow({
    name = "idempotent-web-infrastructure",
    description = "Complete web server setup with idempotency guarantees"
})

-- Task 1: System packages
task({
    name = "system-packages",
    run = function()
        print("=== Installing System Packages ===")
        
        -- These will only install if not present or version differs
        local packages = {"nginx", "certbot", "python3-certbot-nginx"}
        
        for _, pkg_name in ipairs(packages) do
            local result = pkg.install({
                name = pkg_name,
                state = "present"
            })
            
            if result.changed then
                print("✓ " .. pkg_name .. " installed")
            else
                print("✓ " .. pkg_name .. " already present")
            end
        end
        
        -- Store package list in stack
        stack.set_output("installed_packages", packages)
    end
})

-- Task 2: Create application user
task({
    name = "create-app-user",
    depends_on = {"system-packages"},
    run = function()
        print("=== Creating Application User ===")
        
        -- Only creates if user doesn't exist
        local result = user.create({
            name = "webapp",
            system = true,
            shell = "/usr/sbin/nologin",
            home = "/var/www"
        })
        
        if result.changed then
            print("✓ User 'webapp' created")
        else
            print("✓ User 'webapp' already exists")
        end
        
        stack.set_output("app_user", "webapp")
    end
})

-- Task 3: Setup directory structure
task({
    name = "setup-directories",
    depends_on = {"create-app-user"},
    run = function()
        print("=== Setting Up Directories ===")
        
        local directories = {
            "/var/www/html",
            "/var/www/logs",
            "/etc/nginx/sites-available",
            "/etc/nginx/sites-enabled"
        }
        
        for _, dir in ipairs(directories) do
            -- file_ops module automatically checks if directory exists
            -- and only creates if needed
            local result = file_ops.stat({path = dir})
            
            if not result or not result.is_directory then
                os.execute("mkdir -p " .. dir)
                print("✓ Created " .. dir)
            else
                print("✓ " .. dir .. " already exists")
            end
        end
    end
})

-- Task 4: Deploy application files
task({
    name = "deploy-app-files",
    depends_on = {"setup-directories"},
    run = function()
        print("=== Deploying Application Files ===")
        
        -- Copy only updates if files are different (checksum-based)
        local files = {
            {src = "app/index.html", dest = "/var/www/html/index.html"},
            {src = "app/style.css", dest = "/var/www/html/style.css"},
            {src = "app/app.js", dest = "/var/www/html/app.js"}
        }
        
        local changed_count = 0
        
        for _, file in ipairs(files) do
            local result = file_ops.copy({
                src = file.src,
                dest = file.dest,
                mode = "0644"
            })
            
            if result.changed then
                print("✓ Updated " .. file.dest)
                changed_count = changed_count + 1
            else
                print("✓ " .. file.dest .. " up to date")
            end
        end
        
        stack.set_output("app_files_updated", changed_count)
    end
})

-- Task 5: Configure Nginx
task({
    name = "configure-nginx",
    depends_on = {"deploy-app-files"},
    run = function()
        print("=== Configuring Nginx ===")
        
        -- Template rendering with idempotency
        local config_changed = false
        
        -- Copy nginx config (only if changed)
        local result = file_ops.copy({
            src = "configs/nginx-site.conf",
            dest = "/etc/nginx/sites-available/webapp",
            mode = "0644"
        })
        
        if result.changed then
            print("✓ Nginx config updated")
            config_changed = true
        else
            print("✓ Nginx config unchanged")
        end
        
        -- Enable site (idempotent symlink)
        local link_exists = file_ops.stat({
            path = "/etc/nginx/sites-enabled/webapp"
        })
        
        if not link_exists then
            os.execute("ln -s /etc/nginx/sites-available/webapp /etc/nginx/sites-enabled/webapp")
            print("✓ Site enabled")
            config_changed = true
        else
            print("✓ Site already enabled")
        end
        
        -- Only reload nginx if config changed
        if config_changed then
            print("→ Reloading nginx (config changed)")
            systemd.reload({name = "nginx"})
        else
            print("→ Nginx reload skipped (no changes)")
        end
        
        stack.set_output("nginx_config_changed", config_changed)
    end
})

-- Task 6: Ensure services are running
task({
    name = "ensure-services",
    depends_on = {"configure-nginx"},
    run = function()
        print("=== Ensuring Services Are Running ===")
        
        -- systemd.ensure is idempotent
        local services = {
            {name = "nginx", state = "started", enabled = true},
        }
        
        for _, svc in ipairs(services) do
            local result = systemd.ensure({
                name = svc.name,
                state = svc.state,
                enabled = svc.enabled
            })
            
            if result.changed then
                print("✓ " .. svc.name .. " state changed")
            else
                print("✓ " .. svc.name .. " already in desired state")
            end
        end
    end
})

-- Task 7: Validate deployment
task({
    name = "validate-deployment",
    depends_on = {"ensure-services"},
    run = function()
        print("=== Validating Deployment ===")
        
        -- Use infra_test module to validate
        -- These tests are always run (not idempotent by design)
        
        -- Check if nginx is listening
        local port_check = infra_test.port_is_listening({
            port = 80
        })
        
        if port_check then
            print("✓ Nginx listening on port 80")
        else
            error("✗ Nginx not listening on port 80")
        end
        
        -- Check if service is running
        local svc_check = infra_test.service_is_running({
            name = "nginx"
        })
        
        if svc_check then
            print("✓ Nginx service is running")
        else
            error("✗ Nginx service not running")
        end
        
        -- Check if files exist
        local file_check = infra_test.file_exists({
            path = "/var/www/html/index.html"
        })
        
        if file_check then
            print("✓ Application files deployed")
        else
            error("✗ Application files missing")
        end
        
        print("\n=== Deployment Valid ===")
        stack.set_output("deployment_valid", true)
    end
})

-- Task 8: Display summary
task({
    name = "summary",
    depends_on = {"validate-deployment"},
    run = function()
        print("\n" .. string.rep("=", 60))
        print("DEPLOYMENT SUMMARY")
        print(string.rep("=", 60))
        
        local stack_name = stack.get_name()
        print("Stack: " .. stack_name)
        
        local packages = stack.get_output("installed_packages") or {}
        print("Packages: " .. table.concat(packages, ", "))
        
        local app_user = stack.get_output("app_user")
        print("App User: " .. app_user)
        
        local files_updated = stack.get_output("app_files_updated") or 0
        print("Files Updated: " .. files_updated)
        
        local nginx_changed = stack.get_output("nginx_config_changed")
        print("Nginx Config Changed: " .. tostring(nginx_changed))
        
        print("\n✅ Infrastructure is idempotent!")
        print("→ Running this workflow again will only apply necessary changes")
        print(string.rep("=", 60))
    end
})
