-- Example: Using Secrets in Sloth Runner
-- Demonstrates how to use encrypted secrets in workflows

local check_secrets_availability = task("check_secrets_availability")
    :description("Check if secrets are available")
    :command(function(this, params)
        log.info("Checking if secrets are available...")

        if secrets then
            log.success("Secrets are loaded and available!")

            -- List available secret names (don't print values)
            local secret_count = 0
            for name, _ in pairs(secrets) do
                log.info("Found secret: " .. name)
                secret_count = secret_count + 1
            end

            log.success(string.format("Total secrets loaded: %d", secret_count))
        else
            log.warning("No secrets available - run with --password-stdin to load secrets")
        end

        return true, "Secrets availability checked"
    end)
    :build()

local use_api_key = task("use_api_key")
    :description("Use API key from secrets")
    :depends_on({"check_secrets_availability"})
    :command(function(this, params)
        if secrets and secrets.api_key then
            log.info("Using API key from secrets...")

            -- Use the API key (don't print it!)
            local masked = string.sub(secrets.api_key, 1, 10) .. "..."
            log.info("API Key (masked): " .. masked)

            -- Example: Use in API call
            exec(string.format("echo 'Would call API with key: %s'", masked))
        else
            log.error("API key not found in secrets")
        end

        return true, "API key processed"
    end)
    :build()

local configure_database = task("configure_database")
    :description("Configure database with secret password")
    :depends_on({"check_secrets_availability"})
    :command(function(this, params)
        if secrets and secrets.db_password then
            log.info("Configuring database with secret password...")

            -- Don't print the password!
            log.info("Database password is available")

            -- Example: Configure database (password not shown)
            exec("echo 'Would configure database with secret password'")
        else
            log.error("Database password not found in secrets")
        end

        return true, "Database configuration attempted"
    end)
    :build()

local deploy_with_secrets = task("deploy_with_secrets")
    :description("Deploy application with secrets")
    :depends_on({"use_api_key", "configure_database"})
    :command(function(this, params)
        log.info("Deploying application with secrets...")

        if secrets then
            -- Use multiple secrets
            local has_api_key = secrets.api_key ~= nil
            local has_db_password = secrets.db_password ~= nil
            local has_aws_key = secrets.aws_access_key ~= nil

            log.info(string.format("API Key available: %s", tostring(has_api_key)))
            log.info(string.format("DB Password available: %s", tostring(has_db_password)))
            log.info(string.format("AWS Key available: %s", tostring(has_aws_key)))

            if has_api_key and has_db_password then
                log.success("All required secrets are available - deployment can proceed")
                exec("echo 'Deployment successful!'")
            else
                log.error("Missing required secrets for deployment")
            end
        else
            log.error("Cannot deploy - secrets not loaded")
        end

        return true, "Deployment completed"
    end)
    :build()

-- Define workflow
workflow.define("secrets_example", {
    description = "Example workflow using encrypted secrets",
    tasks = {
        check_secrets_availability = {
            name = "check_secrets_availability",
            description = "Check if secrets are available",
            command = check_secrets_availability
        },
        use_api_key = {
            name = "use_api_key",
            description = "Use API key from secrets",
            command = use_api_key
        },
        configure_database = {
            name = "configure_database",
            description = "Configure database with secret password",
            command = configure_database
        },
        deploy_with_secrets = {
            name = "deploy_with_secrets",
            description = "Deploy application with secrets",
            command = deploy_with_secrets
        }
    }
})
